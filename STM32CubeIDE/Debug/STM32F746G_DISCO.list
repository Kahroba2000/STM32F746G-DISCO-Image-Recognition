
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c248  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000df8ac  0801c420  0801c420  0002c420  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080fbccc  080fbccc  00112834  2**0
                  CONTENTS
  4 .ARM          00000008  080fbccc  080fbccc  0010bccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080fbcd4  080fbcd4  00112834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080fbcd4  080fbcd4  0010bcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080fbcd8  080fbcd8  0010bcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001134  20000000  080fbcdc  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       000016fc  20001138  080fce10  00111138  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00020c94  20002840  080fe50c  00112840  2**5
                  ALLOC
 11 ._user_heap_stack 00001404  200234d4  080fe50c  001134d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00112834  2**0
                  CONTENTS, READONLY
 13 BufferSection 00000000  c0000000  c0000000  00112864  2**0
                  CONTENTS
 14 ExtFlashSection 00000000  90000000  90000000  00112864  2**0
                  CONTENTS
 15 FontFlashSection 00000000  90000000  90000000  00112864  2**0
                  CONTENTS
 16 TextFlashSection 00000000  90000000  90000000  00112864  2**0
                  CONTENTS
 17 .debug_info   00073ba3  00000000  00000000  00112864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000ca8b  00000000  00000000  00186407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00051ebb  00000000  00000000  00192e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000028e8  00000000  00000000  001e4d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00004200  00000000  00000000  001e7638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00012f17  00000000  00000000  001eb838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0006cf4f  00000000  00000000  001fe74f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    00121e82  00000000  00000000  0026b69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000050  00000000  00000000  0038d520  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00009438  00000000  00000000  0038d570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .stab         000000b4  00000000  00000000  003969a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .stabstr      00000183  00000000  00000000  00396a5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20002840 	.word	0x20002840
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801c400 	.word	0x0801c400

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20002844 	.word	0x20002844
 800020c:	0801c400 	.word	0x0801c400

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <read_file>:
 * The modules that use fread() and fwrite() always invoke them through
 * these macros.  On some systems you may need to twiddle the argument casts.
 * CAUTION: argument order is different from underlying functions!
 */
size_t read_file (JFILE  *file, uint8_t *buf, uint32_t sizeofbuf)
{
 8000f8c:	b510      	push	{r4, lr}
  static size_t BytesReadfile ;  
  f_read (file, buf , sizeofbuf, &BytesReadfile); 
 8000f8e:	4c03      	ldr	r4, [pc, #12]	; (8000f9c <read_file+0x10>)
 8000f90:	4623      	mov	r3, r4
 8000f92:	f005 fdc3 	bl	8006b1c <f_read>
  return BytesReadfile; 
}
 8000f96:	6820      	ldr	r0, [r4, #0]
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000285c 	.word	0x2000285c

08000fa0 <Jpeg_CallbackFunction>:
	  f_close(&MyFile);
}


static uint8_t Jpeg_CallbackFunction(uint8_t* Row, uint32_t DataLength)
{
 8000fa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#ifdef USE_DMA2D
  static DMA2D_HandleTypeDef hdma2d_eval;

  offset = (LCD_FRAME_BUFFER + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4));
 8000fa4:	4d28      	ldr	r5, [pc, #160]	; (8001048 <Jpeg_CallbackFunction+0xa8>)
  hdma2d_eval.Init.OutputOffset = 0;

  /* Foreground Configuration */
  hdma2d_eval.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d_eval.LayerCfg[1].InputAlpha = 0xFF;
  hdma2d_eval.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000fa6:	2701      	movs	r7, #1
  offset = (LCD_FRAME_BUFFER + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4));
 8000fa8:	4928      	ldr	r1, [pc, #160]	; (800104c <Jpeg_CallbackFunction+0xac>)
{
 8000faa:	4606      	mov	r6, r0
  offset = (LCD_FRAME_BUFFER + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4));
 8000fac:	682a      	ldr	r2, [r5, #0]
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <Jpeg_CallbackFunction+0xb0>)
 8000fb0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8001064 <Jpeg_CallbackFunction+0xc4>
 8000fb4:	fb01 3302 	mla	r3, r1, r2, r3
  hdma2d_eval.Init.Mode         = DMA2D_M2M_PFC;
 8000fb8:	4c26      	ldr	r4, [pc, #152]	; (8001054 <Jpeg_CallbackFunction+0xb4>)
  hdma2d_eval.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8000fba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  offset = (LCD_FRAME_BUFFER + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4));
 8000fbe:	f8c8 3000 	str.w	r3, [r8]
  hdma2d_eval.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8000fc2:	2300      	movs	r3, #0
  hdma2d_eval.LayerCfg[1].InputOffset = 0;

  hdma2d_eval.Instance = DMA2D;

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8000fc4:	4620      	mov	r0, r4
  hdma2d_eval.Init.OutputOffset = 0;
 8000fc6:	60e3      	str	r3, [r4, #12]
  hdma2d_eval.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000fc8:	6323      	str	r3, [r4, #48]	; 0x30
  hdma2d_eval.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8000fca:	e9c4 2301 	strd	r2, r3, [r4, #4]
  hdma2d_eval.LayerCfg[1].InputAlpha = 0xFF;
 8000fce:	22ff      	movs	r2, #255	; 0xff
  hdma2d_eval.LayerCfg[1].InputOffset = 0;
 8000fd0:	e9c4 370a 	strd	r3, r7, [r4, #40]	; 0x28
  hdma2d_eval.Instance = DMA2D;
 8000fd4:	4b20      	ldr	r3, [pc, #128]	; (8001058 <Jpeg_CallbackFunction+0xb8>)
  hdma2d_eval.LayerCfg[1].InputAlpha = 0xFF;
 8000fd6:	6362      	str	r2, [r4, #52]	; 0x34
  hdma2d_eval.Instance = DMA2D;
 8000fd8:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8000fda:	f001 ff55 	bl	8002e88 <HAL_DMA2D_Init>
 8000fde:	b990      	cbnz	r0, 8001006 <Jpeg_CallbackFunction+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, 1) == HAL_OK)
 8000fe0:	4639      	mov	r1, r7
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f002 f8a4 	bl	8003130 <HAL_DMA2D_ConfigLayer>
 8000fe8:	b968      	cbnz	r0, 8001006 <Jpeg_CallbackFunction+0x66>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, (uint32_t)Row, (uint32_t)offset, IMAGE_WIDTH, 1) == HAL_OK)
 8000fea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fee:	f8d8 2000 	ldr.w	r2, [r8]
 8000ff2:	4631      	mov	r1, r6
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	9700      	str	r7, [sp, #0]
 8000ff8:	f001 ff72 	bl	8002ee0 <HAL_DMA2D_Start>
 8000ffc:	b918      	cbnz	r0, 8001006 <Jpeg_CallbackFunction+0x66>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8000ffe:	210a      	movs	r1, #10
 8001000:	4620      	mov	r0, r4
 8001002:	f001 ff87 	bl	8002f14 <HAL_DMA2D_PollForTransfer>
{
 8001006:	2000      	movs	r0, #0
#ifdef SWAP_RB
  uint32_t pixel = 0, width_counter, result = 0, result1 = 0;

   for(width_counter = 0; width_counter < IMAGE_WIDTH; width_counter++)
   {
     pixel = *(__IO uint32_t *)(LCD_FRAME_BUFFER + (width_counter*4) + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4));
 8001008:	4f14      	ldr	r7, [pc, #80]	; (800105c <Jpeg_CallbackFunction+0xbc>)
 800100a:	4e15      	ldr	r6, [pc, #84]	; (8001060 <Jpeg_CallbackFunction+0xc0>)
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	fb07 6303 	mla	r3, r7, r3, r6
 8001012:	4403      	add	r3, r0
   for(width_counter = 0; width_counter < IMAGE_WIDTH; width_counter++)
 8001014:	3001      	adds	r0, #1
     pixel = *(__IO uint32_t *)(LCD_FRAME_BUFFER + (width_counter*4) + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4));
 8001016:	009b      	lsls	r3, r3, #2
   for(width_counter = 0; width_counter < IMAGE_WIDTH; width_counter++)
 8001018:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
     pixel = *(__IO uint32_t *)(LCD_FRAME_BUFFER + (width_counter*4) + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4));
 800101c:	6819      	ldr	r1, [r3, #0]
     result1 = (((pixel & 0x00FF0000) >> 16) | ((pixel & 0x000000FF) << 16));
 800101e:	ea4f 4401 	mov.w	r4, r1, lsl #16
 8001022:	f3c1 4207 	ubfx	r2, r1, #16, #8
     pixel = pixel & 0xFF00FF00;
 8001026:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
     result1 = (((pixel & 0x00FF0000) >> 16) | ((pixel & 0x000000FF) << 16));
 800102a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800102e:	ea42 0204 	orr.w	r2, r2, r4
     result = (result1 | pixel);
 8001032:	ea42 0201 	orr.w	r2, r2, r1
     *(__IO uint32_t *)(LCD_FRAME_BUFFER + (width_counter*4) + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4)) = result;
 8001036:	601a      	str	r2, [r3, #0]
   for(width_counter = 0; width_counter < IMAGE_WIDTH; width_counter++)
 8001038:	d1e8      	bne.n	800100c <Jpeg_CallbackFunction+0x6c>

   }
#endif

  line_counter--;
 800103a:	682b      	ldr	r3, [r5, #0]
  return 0;
}
 800103c:	2000      	movs	r0, #0
  line_counter--;
 800103e:	3b01      	subs	r3, #1
 8001040:	602b      	str	r3, [r5, #0]
}
 8001042:	b002      	add	sp, #8
 8001044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001048:	20000000 	.word	0x20000000
 800104c:	fffffb00 	.word	0xfffffb00
 8001050:	c004ab00 	.word	0xc004ab00
 8001054:	20002d2c 	.word	0x20002d2c
 8001058:	4002b000 	.word	0x4002b000
 800105c:	3ffffec0 	.word	0x3ffffec0
 8001060:	30012ac0 	.word	0x30012ac0
 8001064:	20000004 	.word	0x20000004

08001068 <SystemClock_Config>:
{
 8001068:	b510      	push	{r4, lr}
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 800106e:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001070:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001072:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001074:	2019      	movs	r0, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001076:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001078:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001080:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001084:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001088:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800108c:	2308      	movs	r3, #8
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800108e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001090:	9311      	str	r3, [sp, #68]	; 0x44
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001092:	f002 fb95 	bl	80037c0 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8001096:	b100      	cbz	r0, 800109a <SystemClock_Config+0x32>
    while(1) { ; }
 8001098:	e7fe      	b.n	8001098 <SystemClock_Config+0x30>
  ret = HAL_PWREx_EnableOverDrive();
 800109a:	f002 fb59 	bl	8003750 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 800109e:	b100      	cbz	r0, 80010a2 <SystemClock_Config+0x3a>
    while(1) { ; }
 80010a0:	e7fe      	b.n	80010a0 <SystemClock_Config+0x38>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80010a2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	9003      	str	r0, [sp, #12]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 80010aa:	2106      	movs	r1, #6
 80010ac:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 80010ba:	f002 fd6d 	bl	8003b98 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 80010be:	b100      	cbz	r0, 80010c2 <SystemClock_Config+0x5a>
    while(1) { ; }
 80010c0:	e7fe      	b.n	80010c0 <SystemClock_Config+0x58>
}
 80010c2:	b012      	add	sp, #72	; 0x48
 80010c4:	bd10      	pop	{r4, pc}
	...

080010c8 <_write>:
{
 80010c8:	b510      	push	{r4, lr}
 80010ca:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	b292      	uxth	r2, r2
 80010d2:	4802      	ldr	r0, [pc, #8]	; (80010dc <_write+0x14>)
 80010d4:	f004 f8cf 	bl	8005276 <HAL_UART_Transmit>
}
 80010d8:	4620      	mov	r0, r4
 80010da:	bd10      	pop	{r4, pc}
 80010dc:	20002e98 	.word	0x20002e98

080010e0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010e0:	6802      	ldr	r2, [r0, #0]
 80010e2:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d101      	bne.n	80010ec <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80010e8:	f001 bc9c 	b.w	8002a24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40001000 	.word	0x40001000

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  while(1) {
//    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
    HAL_Delay(50); /* wait 50 ms */
 80010f6:	2032      	movs	r0, #50	; 0x32
 80010f8:	f001 fca6 	bl	8002a48 <HAL_Delay>
  while(1) {
 80010fc:	e7fb      	b.n	80010f6 <Error_Handler+0x2>
	...

08001100 <main>:
{
 8001100:	b570      	push	{r4, r5, r6, lr}
 8001102:	b086      	sub	sp, #24
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001104:	2100      	movs	r1, #0
 8001106:	2210      	movs	r2, #16
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001108:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800110a:	a802      	add	r0, sp, #8
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800110c:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800110e:	f018 fad3 	bl	80196b8 <memset>
  HAL_MPU_Disable();
 8001112:	f001 fcfd 	bl	8002b10 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001116:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 800111a:	4b89      	ldr	r3, [pc, #548]	; (8001340 <main+0x240>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800111c:	a802      	add	r0, sp, #8
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800111e:	f8ad 5008 	strh.w	r5, [sp, #8]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001122:	9405      	str	r4, [sp, #20]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001124:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001128:	f001 fd10 	bl	8002b4c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 800112c:	2317      	movs	r3, #23
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800112e:	a802      	add	r0, sp, #8
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001130:	f88d 5009 	strb.w	r5, [sp, #9]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001134:	f88d 3010 	strb.w	r3, [sp, #16]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001138:	f88d 5016 	strb.w	r5, [sp, #22]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800113c:	f001 fd06 	bl	8002b4c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001140:	2004      	movs	r0, #4
 8001142:	f001 fcf3 	bl	8002b2c <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001146:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800114a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800114e:	4a7d      	ldr	r2, [pc, #500]	; (8001344 <main+0x244>)
 8001150:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001154:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800115c:	6953      	ldr	r3, [r2, #20]
 800115e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001162:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001164:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001168:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800116c:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001170:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001174:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001178:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800117c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001180:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001184:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001186:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800118a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800118c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001190:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001192:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001196:	d2f9      	bcs.n	800118c <main+0x8c>
    } while(sets-- != 0U);
 8001198:	3b20      	subs	r3, #32
 800119a:	f113 0f20 	cmn.w	r3, #32
 800119e:	d1f2      	bne.n	8001186 <main+0x86>
 80011a0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80011a4:	6953      	ldr	r3, [r2, #20]
 80011a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011aa:	6153      	str	r3, [r2, #20]
 80011ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011b0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80011b4:	f001 fc24 	bl	8002a00 <HAL_Init>
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80011b8:	2501      	movs	r5, #1
  SystemClock_Config();
 80011ba:	f7ff ff55 	bl	8001068 <SystemClock_Config>
  hcrc.Instance = CRC;
 80011be:	4862      	ldr	r0, [pc, #392]	; (8001348 <main+0x248>)
 80011c0:	4b62      	ldr	r3, [pc, #392]	; (800134c <main+0x24c>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80011c2:	6205      	str	r5, [r0, #32]
  hcrc.Instance = CRC;
 80011c4:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	8083      	strh	r3, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80011ca:	e9c0 3305 	strd	r3, r3, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011ce:	f001 fce9 	bl	8002ba4 <HAL_CRC_Init>
 80011d2:	4604      	mov	r4, r0
 80011d4:	b108      	cbz	r0, 80011da <main+0xda>
    Error_Handler();
 80011d6:	f7ff ff8d 	bl	80010f4 <Error_Handler>
  MX_X_CUBE_AI_Init();
 80011da:	f000 fc4b 	bl	8001a74 <MX_X_CUBE_AI_Init>
	BSP_LCD_Init();
 80011de:	f001 f90f 	bl	8002400 <BSP_LCD_Init>
	BSP_LCD_DisplayOn();
 80011e2:	f001 f841 	bl	8002268 <BSP_LCD_DisplayOn>
	BSP_LCD_LayerDefaultInit(0,LCD_FB_START_ADDRESS);
 80011e6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80011ea:	4620      	mov	r0, r4
 80011ec:	f000 fec4 	bl	8001f78 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 80011f0:	4620      	mov	r0, r4
 80011f2:	f000 fefb 	bl	8001fec <BSP_LCD_SelectLayer>
	BSP_LCD_SetLayerWindow(0, 0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
 80011f6:	23f0      	movs	r3, #240	; 0xf0
 80011f8:	4622      	mov	r2, r4
 80011fa:	4621      	mov	r1, r4
 80011fc:	4620      	mov	r0, r4
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	f44f 73a0 	mov.w	r3, #320	; 0x140
			  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001204:	4c52      	ldr	r4, [pc, #328]	; (8001350 <main+0x250>)
	BSP_LCD_SetLayerWindow(0, 0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
 8001206:	f000 fef7 	bl	8001ff8 <BSP_LCD_SetLayerWindow>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 800120a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800120e:	f000 ff23 	bl	8002058 <BSP_LCD_Clear>
  printf("LCD Config OK\r\n");
 8001212:	4850      	ldr	r0, [pc, #320]	; (8001354 <main+0x254>)
 8001214:	f019 f828 	bl	801a268 <puts>
  BSP_LCD_DisplayStringAtLine(1,(uint8_t*)"CIFAR10 Image Classification");
 8001218:	4628      	mov	r0, r5
 800121a:	494f      	ldr	r1, [pc, #316]	; (8001358 <main+0x258>)
 800121c:	f001 f812 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"STM32Cube AI");
 8001220:	494e      	ldr	r1, [pc, #312]	; (800135c <main+0x25c>)
 8001222:	2002      	movs	r0, #2
         if(f_open(&MyFile, "image.jpg", FA_READ) == FR_OK)
 8001224:	4d4e      	ldr	r5, [pc, #312]	; (8001360 <main+0x260>)
  BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"STM32Cube AI");
 8001226:	f001 f80d 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(3,(uint8_t*)"STM32F429 Discovery");
 800122a:	494e      	ldr	r1, [pc, #312]	; (8001364 <main+0x264>)
 800122c:	2003      	movs	r0, #3
 800122e:	f001 f809 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
  HAL_Delay(3000);
 8001232:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001236:	f001 fc07 	bl	8002a48 <HAL_Delay>
    if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800123a:	494b      	ldr	r1, [pc, #300]	; (8001368 <main+0x268>)
 800123c:	484b      	ldr	r0, [pc, #300]	; (800136c <main+0x26c>)
 800123e:	f005 fdbb 	bl	8006db8 <FATFS_LinkDriver>
 8001242:	4602      	mov	r2, r0
 8001244:	b9a8      	cbnz	r0, 8001272 <main+0x172>
      if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8001246:	4948      	ldr	r1, [pc, #288]	; (8001368 <main+0x268>)
 8001248:	4849      	ldr	r0, [pc, #292]	; (8001370 <main+0x270>)
 800124a:	f005 fb23 	bl	8006894 <f_mount>
 800124e:	b980      	cbnz	r0, 8001272 <main+0x172>
         if(f_open(&MyFile, "image.jpg", FA_READ) == FR_OK)
 8001250:	2201      	movs	r2, #1
 8001252:	4948      	ldr	r1, [pc, #288]	; (8001374 <main+0x274>)
 8001254:	4628      	mov	r0, r5
 8001256:	f005 fb5d 	bl	8006914 <f_open>
 800125a:	b950      	cbnz	r0, 8001272 <main+0x172>
			  BSP_LCD_Clear(LCD_COLOR_BLUE);
 800125c:	4620      	mov	r0, r4
 800125e:	f000 fefb 	bl	8002058 <BSP_LCD_Clear>
			  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"3333");
 8001262:	2005      	movs	r0, #5
 8001264:	4944      	ldr	r1, [pc, #272]	; (8001378 <main+0x278>)
 8001266:	f000 ffed 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
			  HAL_Delay(2000);
 800126a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800126e:	f001 fbeb 	bl	8002a48 <HAL_Delay>
	  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001272:	4620      	mov	r0, r4
 8001274:	f000 fef0 	bl	8002058 <BSP_LCD_Clear>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"Print the image");
 8001278:	4940      	ldr	r1, [pc, #256]	; (800137c <main+0x27c>)
 800127a:	2005      	movs	r0, #5
 800127c:	f000 ffe2 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(7,(uint8_t*)"Resize the image");
 8001280:	493f      	ldr	r1, [pc, #252]	; (8001380 <main+0x280>)
 8001282:	2007      	movs	r0, #7
 8001284:	f000 ffde 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
	  HAL_Delay(2000);
 8001288:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800128c:	f001 fbdc 	bl	8002a48 <HAL_Delay>
	  jpeg_decode_From_File(&MyFile, IMAGE_WIDTH, _aucLine, Jpeg_CallbackFunction);
 8001290:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <main+0x284>)
 8001292:	4a3d      	ldr	r2, [pc, #244]	; (8001388 <main+0x288>)
 8001294:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001298:	4628      	mov	r0, r5
 800129a:	f000 fb7b 	bl	8001994 <jpeg_decode_From_File>
	  HAL_Delay(2000);
 800129e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012a2:	f001 fbd1 	bl	8002a48 <HAL_Delay>
	  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80012a6:	4620      	mov	r0, r4
 80012a8:	f000 fed6 	bl	8002058 <BSP_LCD_Clear>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"Image was shown");
 80012ac:	4937      	ldr	r1, [pc, #220]	; (800138c <main+0x28c>)
 80012ae:	2005      	movs	r0, #5
 80012b0:	f000 ffc8 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
	  HAL_Delay(2000);
 80012b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012b8:	f001 fbc6 	bl	8002a48 <HAL_Delay>
	  f_close(&MyFile);
 80012bc:	4628      	mov	r0, r5
 80012be:	f005 fd42 	bl	8006d46 <f_close>
	  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80012c2:	4620      	mov	r0, r4
 80012c4:	f000 fec8 	bl	8002058 <BSP_LCD_Clear>
	  BSP_LCD_DisplayStringAtLine(3,(uint8_t*)"Time to resize");
 80012c8:	4931      	ldr	r1, [pc, #196]	; (8001390 <main+0x290>)
 80012ca:	2003      	movs	r0, #3
 80012cc:	f000 ffba 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(4,(uint8_t*)"AND");
 80012d0:	4930      	ldr	r1, [pc, #192]	; (8001394 <main+0x294>)
 80012d2:	2004      	movs	r0, #4
 80012d4:	f000 ffb6 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"Fill it");
 80012d8:	492f      	ldr	r1, [pc, #188]	; (8001398 <main+0x298>)
 80012da:	2005      	movs	r0, #5
 80012dc:	f000 ffb2 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
	  HAL_Delay(5000);
 80012e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80012e4:	f001 fbb0 	bl	8002a48 <HAL_Delay>
	  resize_jpeg_to32x32((uint8_t*)fno.fname, IMAGE_WIDTH);
 80012e8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80012ec:	482b      	ldr	r0, [pc, #172]	; (800139c <main+0x29c>)
 80012ee:	f000 fae7 	bl	80018c0 <resize_jpeg_to32x32>
	  BSP_LCD_Clear(LCD_COLOR_RED);
 80012f2:	482b      	ldr	r0, [pc, #172]	; (80013a0 <main+0x2a0>)
 80012f4:	f000 feb0 	bl	8002058 <BSP_LCD_Clear>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"Resized");
 80012f8:	492a      	ldr	r1, [pc, #168]	; (80013a4 <main+0x2a4>)
 80012fa:	2005      	movs	r0, #5
 80012fc:	f000 ffa2 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(7,(uint8_t*)"Time to RUN AI");
 8001300:	4929      	ldr	r1, [pc, #164]	; (80013a8 <main+0x2a8>)
 8001302:	2007      	movs	r0, #7
 8001304:	f000 ff9e 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
	  HAL_Delay(20000);
 8001308:	f644 6020 	movw	r0, #20000	; 0x4e20
 800130c:	f001 fb9c 	bl	8002a48 <HAL_Delay>
	  conf = MX_X_CUBE_AI_Process();
 8001310:	f000 fbec 	bl	8001aec <MX_X_CUBE_AI_Process>
  	  sprintf(msg,"(%i%%)",conf);
 8001314:	4925      	ldr	r1, [pc, #148]	; (80013ac <main+0x2ac>)
	  conf = MX_X_CUBE_AI_Process();
 8001316:	4602      	mov	r2, r0
  	  sprintf(msg,"(%i%%)",conf);
 8001318:	4825      	ldr	r0, [pc, #148]	; (80013b0 <main+0x2b0>)
 800131a:	f018 ffbd 	bl	801a298 <siprintf>
	  BSP_LCD_Clear(LCD_COLOR_GREEN);
 800131e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001322:	f000 fe99 	bl	8002058 <BSP_LCD_Clear>
	  BSP_LCD_DisplayStringAtLine(3,(uint8_t*)"DONE");
 8001326:	4923      	ldr	r1, [pc, #140]	; (80013b4 <main+0x2b4>)
 8001328:	2003      	movs	r0, #3
 800132a:	f000 ff8b 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)msg);
 800132e:	4920      	ldr	r1, [pc, #128]	; (80013b0 <main+0x2b0>)
 8001330:	2005      	movs	r0, #5
 8001332:	f000 ff87 	bl	8002244 <BSP_LCD_DisplayStringAtLine>
	  HAL_Delay(5000);
 8001336:	f241 3088 	movw	r0, #5000	; 0x1388
 800133a:	f001 fb85 	bl	8002a48 <HAL_Delay>
  while (1)
 800133e:	e77c      	b.n	800123a <main+0x13a>
 8001340:	0300001b 	.word	0x0300001b
 8001344:	e000ed00 	.word	0xe000ed00
 8001348:	20002cc8 	.word	0x20002cc8
 800134c:	40023000 	.word	0x40023000
 8001350:	ff0000ff 	.word	0xff0000ff
 8001354:	0801c430 	.word	0x0801c430
 8001358:	0801c43f 	.word	0x0801c43f
 800135c:	0801c45c 	.word	0x0801c45c
 8001360:	20002860 	.word	0x20002860
 8001364:	0801c469 	.word	0x0801c469
 8001368:	20002f70 	.word	0x20002f70
 800136c:	080f97e0 	.word	0x080f97e0
 8001370:	20002a94 	.word	0x20002a94
 8001374:	0801c47d 	.word	0x0801c47d
 8001378:	0801c487 	.word	0x0801c487
 800137c:	0801c48c 	.word	0x0801c48c
 8001380:	0801c49c 	.word	0x0801c49c
 8001384:	08000fa1 	.word	0x08000fa1
 8001388:	20001138 	.word	0x20001138
 800138c:	0801c4ad 	.word	0x0801c4ad
 8001390:	0801c4bd 	.word	0x0801c4bd
 8001394:	0801c4cc 	.word	0x0801c4cc
 8001398:	0801c4d0 	.word	0x0801c4d0
 800139c:	20001941 	.word	0x20001941
 80013a0:	ffff0000 	.word	0xffff0000
 80013a4:	0801c4d8 	.word	0x0801c4d8
 80013a8:	0801c4e0 	.word	0x0801c4e0
 80013ac:	0801c4ef 	.word	0x0801c4ef
 80013b0:	20001950 	.word	0x20001950
 80013b4:	0801c4f6 	.word	0x0801c4f6

080013b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_MspInit+0x4c>)
{
 80013ba:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80013bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013be:	210f      	movs	r1, #15
 80013c0:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
 80013ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013cc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80013d0:	9200      	str	r2, [sp, #0]
 80013d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013da:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013dc:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e8:	f001 fb52 	bl	8002a90 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80013ec:	2105      	movs	r1, #5
 80013ee:	2200      	movs	r2, #0
 80013f0:	4608      	mov	r0, r1
 80013f2:	f001 fb4d 	bl	8002a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013f6:	2005      	movs	r0, #5

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f8:	b003      	add	sp, #12
 80013fa:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013fe:	f001 bb79 	b.w	8002af4 <HAL_NVIC_EnableIRQ>
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001408:	6802      	ldr	r2, [r0, #0]
{
 800140a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_CRC_MspInit+0x28>)
 800140e:	429a      	cmp	r2, r3
 8001410:	d10b      	bne.n	800142a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001412:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800141a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800141e:	631a      	str	r2, [r3, #48]	; 0x30
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800142a:	b002      	add	sp, #8
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023000 	.word	0x40023000

08001434 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_DMA2D_MspInit+0x3c>)
{
 8001436:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001438:	6802      	ldr	r2, [r0, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d115      	bne.n	800146a <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800143e:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001442:	2105      	movs	r1, #5
 8001444:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001448:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800144e:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800145a:	f001 fb19 	bl	8002a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800145e:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001460:	b003      	add	sp, #12
 8001462:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001466:	f001 bb45 	b.w	8002af4 <HAL_NVIC_EnableIRQ>
}
 800146a:	b003      	add	sp, #12
 800146c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001470:	4002b000 	.word	0x4002b000

08001474 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	b0ac      	sub	sp, #176	; 0xb0
 8001478:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	2214      	movs	r2, #20
 800147c:	2100      	movs	r1, #0
 800147e:	a806      	add	r0, sp, #24
 8001480:	f018 f91a 	bl	80196b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001484:	2284      	movs	r2, #132	; 0x84
 8001486:	2100      	movs	r1, #0
 8001488:	a80b      	add	r0, sp, #44	; 0x2c
 800148a:	f018 f915 	bl	80196b8 <memset>
  if(hltdc->Instance==LTDC)
 800148e:	6822      	ldr	r2, [r4, #0]
 8001490:	4b46      	ldr	r3, [pc, #280]	; (80015ac <HAL_LTDC_MspInit+0x138>)
 8001492:	429a      	cmp	r2, r3
 8001494:	f040 8087 	bne.w	80015a6 <HAL_LTDC_MspInit+0x132>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001498:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149a:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800149c:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800149e:	2332      	movs	r3, #50	; 0x32
 80014a0:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80014a2:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80014a4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ac:	f002 fc42 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	b108      	cbz	r0, 80014b6 <HAL_LTDC_MspInit+0x42>
    {
      Error_Handler();
 80014b2:	f7ff fe1f 	bl	80010f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014b6:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <HAL_LTDC_MspInit+0x13c>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014bc:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c0:	a906      	add	r1, sp, #24
 80014c2:	483c      	ldr	r0, [pc, #240]	; (80015b4 <HAL_LTDC_MspInit+0x140>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014c4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44
 80014ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014cc:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80014d0:	9200      	str	r2, [sp, #0]
 80014d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d6:	f042 0210 	orr.w	r2, r2, #16
 80014da:	631a      	str	r2, [r3, #48]	; 0x30
 80014dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014de:	f002 0210 	and.w	r2, r2, #16
 80014e2:	9201      	str	r2, [sp, #4]
 80014e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ec:	631a      	str	r2, [r3, #48]	; 0x30
 80014ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80014f4:	9202      	str	r2, [sp, #8]
 80014f6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80014f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001502:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001506:	9203      	str	r2, [sp, #12]
 8001508:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800150a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
 8001512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001514:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001518:	9204      	str	r2, [sp, #16]
 800151a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800151c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800151e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001522:	631a      	str	r2, [r3, #48]	; 0x30
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	9305      	str	r3, [sp, #20]
 800152c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2310      	movs	r3, #16
 8001530:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001538:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153a:	f001 fe41 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 800153e:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001542:	a906      	add	r1, sp, #24
 8001544:	481c      	ldr	r0, [pc, #112]	; (80015b8 <HAL_LTDC_MspInit+0x144>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001546:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001550:	f001 fe36 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001554:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001556:	a906      	add	r1, sp, #24
 8001558:	4818      	ldr	r0, [pc, #96]	; (80015bc <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800155a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001564:	f001 fe2c 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800156c:	a906      	add	r1, sp, #24
 800156e:	4814      	ldr	r0, [pc, #80]	; (80015c0 <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001574:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800157a:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800157c:	f001 fe20 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001580:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001584:	a906      	add	r1, sp, #24
 8001586:	480f      	ldr	r0, [pc, #60]	; (80015c4 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001588:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001592:	f001 fe15 	bl	80031c0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001596:	2058      	movs	r0, #88	; 0x58
 8001598:	4622      	mov	r2, r4
 800159a:	2105      	movs	r1, #5
 800159c:	f001 fa78 	bl	8002a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015a0:	2058      	movs	r0, #88	; 0x58
 80015a2:	f001 faa7 	bl	8002af4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80015a6:	b02c      	add	sp, #176	; 0xb0
 80015a8:	bd70      	pop	{r4, r5, r6, pc}
 80015aa:	bf00      	nop
 80015ac:	40016800 	.word	0x40016800
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40022400 	.word	0x40022400
 80015bc:	40022800 	.word	0x40022800
 80015c0:	40021800 	.word	0x40021800
 80015c4:	40022000 	.word	0x40022000

080015c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ca:	b0ab      	sub	sp, #172	; 0xac
 80015cc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	2214      	movs	r2, #20
 80015d0:	2100      	movs	r1, #0
 80015d2:	a804      	add	r0, sp, #16
 80015d4:	f018 f870 	bl	80196b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d8:	2284      	movs	r2, #132	; 0x84
 80015da:	2100      	movs	r1, #0
 80015dc:	a809      	add	r0, sp, #36	; 0x24
 80015de:	f018 f86b 	bl	80196b8 <memset>
  if(hsd->Instance==SDMMC1)
 80015e2:	6822      	ldr	r2, [r4, #0]
 80015e4:	4b25      	ldr	r3, [pc, #148]	; (800167c <HAL_SD_MspInit+0xb4>)
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d145      	bne.n	8001676 <HAL_SD_MspInit+0xae>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80015ea:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ee:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80015f0:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f2:	f002 fb9f 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 80015f6:	b108      	cbz	r0, 80015fc <HAL_SD_MspInit+0x34>
    {
      Error_Handler();
 80015f8:	f7ff fd7c 	bl	80010f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015fc:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_SD_MspInit+0xb8>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2603      	movs	r6, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001606:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001608:	a904      	add	r1, sp, #16
 800160a:	481e      	ldr	r0, [pc, #120]	; (8001684 <HAL_SD_MspInit+0xbc>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800160c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001610:	645a      	str	r2, [r3, #68]	; 0x44
 8001612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001614:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001618:	9201      	str	r2, [sp, #4]
 800161a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800161e:	f042 0204 	orr.w	r2, r2, #4
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
 8001624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001626:	f002 0204 	and.w	r2, r2, #4
 800162a:	9202      	str	r2, [sp, #8]
 800162c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800162e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001630:	f042 0208 	orr.w	r2, r2, #8
 8001634:	631a      	str	r2, [r3, #48]	; 0x30
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001638:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	9303      	str	r3, [sp, #12]
 8001640:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	e9cd 3704 	strd	r3, r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164e:	f001 fdb7 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001652:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001654:	a904      	add	r1, sp, #16
 8001656:	480c      	ldr	r0, [pc, #48]	; (8001688 <HAL_SD_MspInit+0xc0>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001658:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	e9cd 3704 	strd	r3, r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	e9cd 4606 	strd	r4, r6, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001662:	f001 fdad 	bl	80031c0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001666:	2031      	movs	r0, #49	; 0x31
 8001668:	4622      	mov	r2, r4
 800166a:	2105      	movs	r1, #5
 800166c:	f001 fa10 	bl	8002a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001670:	2031      	movs	r0, #49	; 0x31
 8001672:	f001 fa3f 	bl	8002af4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001676:	b02b      	add	sp, #172	; 0xac
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800167a:	bf00      	nop
 800167c:	40012c00 	.word	0x40012c00
 8001680:	40023800 	.word	0x40023800
 8001684:	40020800 	.word	0x40020800
 8001688:	40020c00 	.word	0x40020c00

0800168c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800168c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800168e:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001690:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001692:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001694:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_SDRAM_MspInit+0xb0>)
 8001696:	681e      	ldr	r6, [r3, #0]
 8001698:	2e00      	cmp	r6, #0
 800169a:	d14d      	bne.n	8001738 <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 800169c:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a0:	2503      	movs	r5, #3
 80016a2:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80016a4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a6:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016aa:	4826      	ldr	r0, [pc, #152]	; (8001744 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80016ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38
 80016b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c2:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ca:	f001 fd79 	bl	80031c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80016ce:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016d2:	a901      	add	r1, sp, #4
 80016d4:	481c      	ldr	r0, [pc, #112]	; (8001748 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e0:	f001 fd6e 	bl	80031c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80016e4:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e8:	a901      	add	r1, sp, #4
 80016ea:	4818      	ldr	r0, [pc, #96]	; (800174c <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f6:	f001 fd63 	bl	80031c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016fe:	a901      	add	r1, sp, #4
 8001700:	4813      	ldr	r0, [pc, #76]	; (8001750 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001702:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800170c:	f001 fd58 	bl	80031c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001710:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001712:	a901      	add	r1, sp, #4
 8001714:	480f      	ldr	r0, [pc, #60]	; (8001754 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001716:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001720:	f001 fd4e 	bl	80031c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001724:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	a901      	add	r1, sp, #4
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800172a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	f001 fd44 	bl	80031c0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001738:	b007      	add	sp, #28
 800173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800173c:	20002f1c 	.word	0x20002f1c
 8001740:	40023800 	.word	0x40023800
 8001744:	40021000 	.word	0x40021000
 8001748:	40021800 	.word	0x40021800
 800174c:	40020c00 	.word	0x40020c00
 8001750:	40021400 	.word	0x40021400
 8001754:	40021c00 	.word	0x40021c00
 8001758:	40020800 	.word	0x40020800

0800175c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b510      	push	{r4, lr}
 800175e:	4601      	mov	r1, r0
 8001760:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001762:	2200      	movs	r2, #0
 8001764:	2036      	movs	r0, #54	; 0x36
 8001766:	f001 f993 	bl	8002a90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800176a:	2036      	movs	r0, #54	; 0x36
 800176c:	f001 f9c2 	bl	8002af4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001772:	a901      	add	r1, sp, #4
 8001774:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001778:	4c13      	ldr	r4, [pc, #76]	; (80017c8 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800177a:	f042 0210 	orr.w	r2, r2, #16
 800177e:	641a      	str	r2, [r3, #64]	; 0x40
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800178a:	f002 fab5 	bl	8003cf8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800178e:	f002 faa3 	bl	8003cd8 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001794:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 8001796:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001798:	f240 33e7 	movw	r3, #999	; 0x3e7
 800179c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_InitTick+0x74>)
 80017a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80017a4:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80017a6:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80017a8:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017aa:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80017ac:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017b0:	f003 fcd0 	bl	8005154 <HAL_TIM_Base_Init>
 80017b4:	b920      	cbnz	r0, 80017c0 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017b6:	4620      	mov	r0, r4
 80017b8:	f003 fb74 	bl	8004ea4 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 80017bc:	b008      	add	sp, #32
 80017be:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
 80017c2:	e7fb      	b.n	80017bc <HAL_InitTick+0x60>
 80017c4:	40023800 	.word	0x40023800
 80017c8:	20002f20 	.word	0x20002f20
 80017cc:	40001000 	.word	0x40001000
 80017d0:	000f4240 	.word	0x000f4240

080017d4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017d4:	4770      	bx	lr

080017d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler>

080017d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler>

080017da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler>

080017dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler>

080017de <DebugMon_Handler>:
 80017de:	4770      	bx	lr

080017e0 <RCC_IRQHandler>:
 80017e0:	4770      	bx	lr
	...

080017e4 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */
//////////////
  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80017e4:	4801      	ldr	r0, [pc, #4]	; (80017ec <SDMMC1_IRQHandler+0x8>)
 80017e6:	f003 ba03 	b.w	8004bf0 <HAL_SD_IRQHandler>
 80017ea:	bf00      	nop
 80017ec:	20002e14 	.word	0x20002e14

080017f0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f0:	4801      	ldr	r0, [pc, #4]	; (80017f8 <TIM6_DAC_IRQHandler+0x8>)
 80017f2:	f003 bb99 	b.w	8004f28 <HAL_TIM_IRQHandler>
 80017f6:	bf00      	nop
 80017f8:	20002f20 	.word	0x20002f20

080017fc <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80017fc:	4801      	ldr	r0, [pc, #4]	; (8001804 <LTDC_IRQHandler+0x8>)
 80017fe:	f001 bec4 	b.w	800358a <HAL_LTDC_IRQHandler>
 8001802:	bf00      	nop
 8001804:	20002d6c 	.word	0x20002d6c

08001808 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001808:	4801      	ldr	r0, [pc, #4]	; (8001810 <DMA2D_IRQHandler+0x8>)
 800180a:	f001 bc06 	b.w	800301a <HAL_DMA2D_IRQHandler>
 800180e:	bf00      	nop
 8001810:	20002cec 	.word	0x20002cec

08001814 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001814:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <_sbrk+0x30>)
{
 8001816:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001818:	6811      	ldr	r1, [r2, #0]
{
 800181a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800181c:	b909      	cbnz	r1, 8001822 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800181e:	490a      	ldr	r1, [pc, #40]	; (8001848 <_sbrk+0x34>)
 8001820:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001822:	6810      	ldr	r0, [r2, #0]
 8001824:	4909      	ldr	r1, [pc, #36]	; (800184c <_sbrk+0x38>)
 8001826:	4c0a      	ldr	r4, [pc, #40]	; (8001850 <_sbrk+0x3c>)
 8001828:	4403      	add	r3, r0
 800182a:	1b09      	subs	r1, r1, r4
 800182c:	428b      	cmp	r3, r1
 800182e:	d906      	bls.n	800183e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001830:	f017 fe08 	bl	8019444 <__errno>
 8001834:	230c      	movs	r3, #12
 8001836:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001838:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800183c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800183e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001840:	e7fc      	b.n	800183c <_sbrk+0x28>
 8001842:	bf00      	nop
 8001844:	20002f6c 	.word	0x20002f6c
 8001848:	200234d8 	.word	0x200234d8
 800184c:	20050000 	.word	0x20050000
 8001850:	00000a00 	.word	0x00000a00

08001854 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8001854:	2000      	movs	r0, #0
 8001856:	4770      	bx	lr

08001858 <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8001858:	4770      	bx	lr

0800185a <HAL_SD_AbortCallback>:
{
 800185a:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800185c:	f7ff fffc 	bl	8001858 <BSP_SD_AbortCallback>
}
 8001860:	bd08      	pop	{r3, pc}

08001862 <BSP_SD_WriteCpltCallback>:
 8001862:	4770      	bx	lr

08001864 <HAL_SD_TxCpltCallback>:
{
 8001864:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8001866:	f7ff fffc 	bl	8001862 <BSP_SD_WriteCpltCallback>
}
 800186a:	bd08      	pop	{r3, pc}

0800186c <BSP_SD_ReadCpltCallback>:
 800186c:	4770      	bx	lr

0800186e <HAL_SD_RxCpltCallback>:
{
 800186e:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8001870:	f7ff fffc 	bl	800186c <BSP_SD_ReadCpltCallback>
}
 8001874:	bd08      	pop	{r3, pc}
	...

08001878 <SaveResizedImageToBuffer>:

	  f_close(&file);

}

void SaveResizedImageToBuffer(uint8_t* buffer){
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	4e0e      	ldr	r6, [pc, #56]	; (80018b4 <SaveResizedImageToBuffer+0x3c>)
 800187c:	f100 0796 	add.w	r7, r0, #150	; 0x96
	  uint32_t i = 0;
	  RGB_matrix =  (RGB_typedef*)_aucLine;
	  //uint16_t  ypos, xpos,x;
	  //uint32_t  ARGB32Buffer[128];

	RGB_matrix =  (RGB_typedef*)buffer;
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <SaveResizedImageToBuffer+0x40>)
 8001882:	8832      	ldrh	r2, [r6, #0]
 8001884:	6018      	str	r0, [r3, #0]
	  for(i=0;i<50;i++){
		  resize_image_buffr[resizedImageCounter++]=RGB_matrix[i].R;
 8001886:	4c0d      	ldr	r4, [pc, #52]	; (80018bc <SaveResizedImageToBuffer+0x44>)
	RGB_matrix =  (RGB_typedef*)buffer;
 8001888:	4613      	mov	r3, r2
		  resize_image_buffr[resizedImageCounter++]=RGB_matrix[i].R;
 800188a:	7881      	ldrb	r1, [r0, #2]
		  resize_image_buffr[resizedImageCounter++]=RGB_matrix[i].G;
 800188c:	1c5d      	adds	r5, r3, #1
		  resize_image_buffr[resizedImageCounter++]=RGB_matrix[i].R;
 800188e:	54e1      	strb	r1, [r4, r3]
		  resize_image_buffr[resizedImageCounter++]=RGB_matrix[i].G;
 8001890:	b2ad      	uxth	r5, r5
 8001892:	f890 c001 	ldrb.w	ip, [r0, #1]
 8001896:	1c99      	adds	r1, r3, #2
		  resize_image_buffr[resizedImageCounter++]=RGB_matrix[i].B;
 8001898:	3303      	adds	r3, #3
		  resize_image_buffr[resizedImageCounter++]=RGB_matrix[i].G;
 800189a:	f804 c005 	strb.w	ip, [r4, r5]
		  resize_image_buffr[resizedImageCounter++]=RGB_matrix[i].B;
 800189e:	b289      	uxth	r1, r1
 80018a0:	f810 5b03 	ldrb.w	r5, [r0], #3
 80018a4:	b29b      	uxth	r3, r3
	  for(i=0;i<50;i++){
 80018a6:	42b8      	cmp	r0, r7
		  resize_image_buffr[resizedImageCounter++]=RGB_matrix[i].B;
 80018a8:	5465      	strb	r5, [r4, r1]
	  for(i=0;i<50;i++){
 80018aa:	d1ee      	bne.n	800188a <SaveResizedImageToBuffer+0x12>
		  resize_image_buffr[resizedImageCounter++]=RGB_matrix[i].B;
 80018ac:	3296      	adds	r2, #150	; 0x96
 80018ae:	8032      	strh	r2, [r6, #0]
	  }
}
 80018b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20002390 	.word	0x20002390
 80018b8:	20002a90 	.word	0x20002a90
 80018bc:	200019c8 	.word	0x200019c8

080018c0 <resize_jpeg_to32x32>:
void resize_jpeg_to32x32(uint8_t *filename, uint32_t width){
 80018c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	  if(f_open(&file, "image.jpg", FA_READ) != FR_OK)
 80018c2:	4c2c      	ldr	r4, [pc, #176]	; (8001974 <resize_jpeg_to32x32+0xb4>)
	  JSAMPROW buffer[2] = {0}; /* Output row buffer */
 80018c4:	2300      	movs	r3, #0
	  if(f_open(&file, "image.jpg", FA_READ) != FR_OK)
 80018c6:	2201      	movs	r2, #1
 80018c8:	492b      	ldr	r1, [pc, #172]	; (8001978 <resize_jpeg_to32x32+0xb8>)
 80018ca:	1d20      	adds	r0, r4, #4
	  JSAMPROW buffer[2] = {0}; /* Output row buffer */
 80018cc:	e9cd 3300 	strd	r3, r3, [sp]
	  if(f_open(&file, "image.jpg", FA_READ) != FR_OK)
 80018d0:	f005 f820 	bl	8006914 <f_open>
 80018d4:	4605      	mov	r5, r0
 80018d6:	b138      	cbz	r0, 80018e8 <resize_jpeg_to32x32+0x28>
	 		 printf("asdfdfsd");
 80018d8:	4c28      	ldr	r4, [pc, #160]	; (800197c <resize_jpeg_to32x32+0xbc>)
	 	 printf("open file error\r\n");
 80018da:	4829      	ldr	r0, [pc, #164]	; (8001980 <resize_jpeg_to32x32+0xc0>)
 80018dc:	f018 fcc4 	bl	801a268 <puts>
	 		 printf("asdfdfsd");
 80018e0:	4620      	mov	r0, r4
 80018e2:	f018 fc3b 	bl	801a15c <iprintf>
	 	 while(1){
 80018e6:	e7fb      	b.n	80018e0 <resize_jpeg_to32x32+0x20>
	  buffer[0] = &_aucLine[0];
 80018e8:	4b26      	ldr	r3, [pc, #152]	; (8001984 <resize_jpeg_to32x32+0xc4>)
	  cinfo.err = jpeg_std_error(&jerr);
 80018ea:	f504 700d 	add.w	r0, r4, #564	; 0x234
	  buffer[0] = &_aucLine[0];
 80018ee:	9300      	str	r3, [sp, #0]
	  cinfo.err = jpeg_std_error(&jerr);
 80018f0:	f00c fe10 	bl	800e514 <jpeg_std_error>
	  jpeg_create_decompress(&cinfo);
 80018f4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80018f8:	2150      	movs	r1, #80	; 0x50
	  cinfo.err = jpeg_std_error(&jerr);
 80018fa:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
	  jpeg_create_decompress(&cinfo);
 80018fe:	f504 702e 	add.w	r0, r4, #696	; 0x2b8
 8001902:	f006 fd0c 	bl	800831e <jpeg_CreateDecompress>
	  jpeg_stdio_src (&cinfo, &file);
 8001906:	1d21      	adds	r1, r4, #4
 8001908:	f504 702e 	add.w	r0, r4, #696	; 0x2b8
 800190c:	f007 fcb8 	bl	8009280 <jpeg_stdio_src>
	  jpeg_read_header(&cinfo, TRUE);
 8001910:	2101      	movs	r1, #1
 8001912:	f504 702e 	add.w	r0, r4, #696	; 0x2b8
 8001916:	f006 fe0b 	bl	8008530 <jpeg_read_header>
	  cinfo.dct_method = JDCT_FLOAT;
 800191a:	2302      	movs	r3, #2
	  cinfo.scale_denom=8;
 800191c:	2201      	movs	r2, #1
	  jpeg_start_decompress(&cinfo);
 800191e:	f504 702e 	add.w	r0, r4, #696	; 0x2b8
	  cinfo.dct_method = JDCT_FLOAT;
 8001922:	f884 3300 	strb.w	r3, [r4, #768]	; 0x300
	  cinfo.scale_denom=8;
 8001926:	2308      	movs	r3, #8
 8001928:	e9c4 23b9 	strd	r2, r3, [r4, #740]	; 0x2e4
	  jpeg_start_decompress(&cinfo);
 800192c:	f006 fea4 	bl	8008678 <jpeg_start_decompress>
	  printf("Jpeg Sie %dx%d\r\n",cinfo.output_width, cinfo.output_height);
 8001930:	4815      	ldr	r0, [pc, #84]	; (8001988 <resize_jpeg_to32x32+0xc8>)
 8001932:	e9d4 12ca 	ldrd	r1, r2, [r4, #808]	; 0x328
 8001936:	f018 fc11 	bl	801a15c <iprintf>
	  resizedImageCounter=0;
 800193a:	8025      	strh	r5, [r4, #0]
		  (void) jpeg_read_scanlines(&cinfo, buffer, 1);
 800193c:	f504 752e 	add.w	r5, r4, #696	; 0x2b8
	  while (cinfo.output_scanline < cinfo.output_height)
 8001940:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 8001944:	f8d4 332c 	ldr.w	r3, [r4, #812]	; 0x32c
 8001948:	429a      	cmp	r2, r3
 800194a:	d30a      	bcc.n	8001962 <resize_jpeg_to32x32+0xa2>
	  jpeg_finish_decompress(&cinfo);
 800194c:	480f      	ldr	r0, [pc, #60]	; (800198c <resize_jpeg_to32x32+0xcc>)
 800194e:	f006 fe11 	bl	8008574 <jpeg_finish_decompress>
	  jpeg_destroy_decompress(&cinfo);
 8001952:	480e      	ldr	r0, [pc, #56]	; (800198c <resize_jpeg_to32x32+0xcc>)
 8001954:	f006 fd30 	bl	80083b8 <jpeg_destroy_decompress>
	  f_close(&file);
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <resize_jpeg_to32x32+0xd0>)
 800195a:	f005 f9f4 	bl	8006d46 <f_close>
}
 800195e:	b003      	add	sp, #12
 8001960:	bd30      	pop	{r4, r5, pc}
		  (void) jpeg_read_scanlines(&cinfo, buffer, 1);
 8001962:	2201      	movs	r2, #1
 8001964:	4669      	mov	r1, sp
 8001966:	4628      	mov	r0, r5
 8001968:	f006 fecf 	bl	800870a <jpeg_read_scanlines>
		  SaveResizedImageToBuffer(buffer[0]);
 800196c:	9800      	ldr	r0, [sp, #0]
 800196e:	f7ff ff83 	bl	8001878 <SaveResizedImageToBuffer>
 8001972:	e7e5      	b.n	8001940 <resize_jpeg_to32x32+0x80>
 8001974:	20002390 	.word	0x20002390
 8001978:	0801c47d 	.word	0x0801c47d
 800197c:	0801c50c 	.word	0x0801c50c
 8001980:	0801c4fb 	.word	0x0801c4fb
 8001984:	20001138 	.word	0x20001138
 8001988:	0801c515 	.word	0x0801c515
 800198c:	20002648 	.word	0x20002648
 8001990:	20002394 	.word	0x20002394

08001994 <jpeg_decode_From_File>:
}

/* USER CODE END 4 */

void jpeg_decode_From_File(JFILE *file, uint32_t width, uint8_t * buff, uint8_t (*callback)(uint8_t*, uint32_t))
{
 8001994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t row_stride = 0; /* physical row width in image buffer */

  buffer[0] = buff;

  /* Step 1: allocate and initialize JPEG decompression object */
  cinfo.err = jpeg_std_error(&jerr);
 8001996:	4c20      	ldr	r4, [pc, #128]	; (8001a18 <jpeg_decode_From_File+0x84>)
{
 8001998:	461e      	mov	r6, r3
  JSAMPROW buffer[2] = {0}; /* Output row buffer */
 800199a:	2300      	movs	r3, #0
{
 800199c:	4607      	mov	r7, r0
  cinfo.err = jpeg_std_error(&jerr);
 800199e:	f504 700d 	add.w	r0, r4, #564	; 0x234
{
 80019a2:	460d      	mov	r5, r1
  buffer[0] = buff;
 80019a4:	e9cd 2300 	strd	r2, r3, [sp]
  cinfo.err = jpeg_std_error(&jerr);
 80019a8:	f00c fdb4 	bl	800e514 <jpeg_std_error>

  /* Initialize the JPEG decompression object */
  jpeg_create_decompress(&cinfo);
 80019ac:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80019b0:	2150      	movs	r1, #80	; 0x50
  cinfo.err = jpeg_std_error(&jerr);
 80019b2:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  jpeg_create_decompress(&cinfo);
 80019b6:	f504 702e 	add.w	r0, r4, #696	; 0x2b8
  cinfo.dct_method = JDCT_FLOAT;

  /* Step 5: start decompressor */
  jpeg_start_decompress(&cinfo);

  row_stride = width * 3;
 80019ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  jpeg_create_decompress(&cinfo);
 80019be:	f006 fcae 	bl	800831e <jpeg_CreateDecompress>
  jpeg_stdio_src (&cinfo, file);
 80019c2:	4639      	mov	r1, r7
 80019c4:	f504 702e 	add.w	r0, r4, #696	; 0x2b8
  while (cinfo.output_scanline < cinfo.output_height)
  {
    (void) jpeg_read_scanlines(&cinfo, buffer, 1);
 80019c8:	f504 772e 	add.w	r7, r4, #696	; 0x2b8
  jpeg_stdio_src (&cinfo, file);
 80019cc:	f007 fc58 	bl	8009280 <jpeg_stdio_src>
  jpeg_read_header(&cinfo, TRUE);
 80019d0:	2101      	movs	r1, #1
 80019d2:	f504 702e 	add.w	r0, r4, #696	; 0x2b8
 80019d6:	f006 fdab 	bl	8008530 <jpeg_read_header>
  cinfo.dct_method = JDCT_FLOAT;
 80019da:	2302      	movs	r3, #2
  jpeg_start_decompress(&cinfo);
 80019dc:	f504 702e 	add.w	r0, r4, #696	; 0x2b8
  cinfo.dct_method = JDCT_FLOAT;
 80019e0:	f884 3300 	strb.w	r3, [r4, #768]	; 0x300
  jpeg_start_decompress(&cinfo);
 80019e4:	f006 fe48 	bl	8008678 <jpeg_start_decompress>
  while (cinfo.output_scanline < cinfo.output_height)
 80019e8:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
 80019ec:	f8d4 332c 	ldr.w	r3, [r4, #812]	; 0x32c
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d209      	bcs.n	8001a08 <jpeg_decode_From_File+0x74>
    (void) jpeg_read_scanlines(&cinfo, buffer, 1);
 80019f4:	4669      	mov	r1, sp
 80019f6:	2201      	movs	r2, #1
 80019f8:	4638      	mov	r0, r7
 80019fa:	f006 fe86 	bl	800870a <jpeg_read_scanlines>

    if (callback(buffer[0], row_stride) != 0)
 80019fe:	4629      	mov	r1, r5
 8001a00:	9800      	ldr	r0, [sp, #0]
 8001a02:	47b0      	blx	r6
 8001a04:	2800      	cmp	r0, #0
 8001a06:	d0ef      	beq.n	80019e8 <jpeg_decode_From_File+0x54>
      break;
    }
  }

  /* Step 6: Finish decompression */
  jpeg_finish_decompress(&cinfo);
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <jpeg_decode_From_File+0x88>)
 8001a0a:	f006 fdb3 	bl	8008574 <jpeg_finish_decompress>

  /* Step 7: Release JPEG decompression object */
  jpeg_destroy_decompress(&cinfo);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <jpeg_decode_From_File+0x88>)
 8001a10:	f006 fcd2 	bl	80083b8 <jpeg_destroy_decompress>

}
 8001a14:	b003      	add	sp, #12
 8001a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a18:	20002390 	.word	0x20002390
 8001a1c:	20002648 	.word	0x20002648

08001a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a26:	e003      	b.n	8001a30 <LoopCopyDataInit>

08001a28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a2e:	3104      	adds	r1, #4

08001a30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a30:	480b      	ldr	r0, [pc, #44]	; (8001a60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a38:	d3f6      	bcc.n	8001a28 <CopyDataInit>
  ldr  r2, =_sbss
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a3c:	e002      	b.n	8001a44 <LoopFillZerobss>

08001a3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a40:	f842 3b04 	str.w	r3, [r2], #4

08001a44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a48:	d3f9      	bcc.n	8001a3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a4a:	f000 ffb3 	bl	80029b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f017 fdf5 	bl	801963c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a52:	f7ff fb55 	bl	8001100 <main>
  bx  lr    
 8001a56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a58:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001a5c:	080fbcdc 	.word	0x080fbcdc
  ldr  r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a64:	20001134 	.word	0x20001134
  ldr  r2, =_sbss
 8001a68:	20002840 	.word	0x20002840
  ldr  r3, = _ebss
 8001a6c:	200234d4 	.word	0x200234d4

08001a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC_IRQHandler>
	...

08001a74 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8001a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001a76:	4c14      	ldr	r4, [pc, #80]	; (8001ac8 <MX_X_CUBE_AI_Init+0x54>)
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8001a78:	4814      	ldr	r0, [pc, #80]	; (8001acc <MX_X_CUBE_AI_Init+0x58>)
 8001a7a:	f018 fbf5 	bl	801a268 <puts>
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001a7e:	4914      	ldr	r1, [pc, #80]	; (8001ad0 <MX_X_CUBE_AI_Init+0x5c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	4620      	mov	r0, r4
 8001a84:	f000 f9be 	bl	8001e04 <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8001a88:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8001a8c:	d006      	beq.n	8001a9c <MX_X_CUBE_AI_Init+0x28>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8001a8e:	0a03      	lsrs	r3, r0, #8
 8001a90:	460a      	mov	r2, r1
 8001a92:	4810      	ldr	r0, [pc, #64]	; (8001ad4 <MX_X_CUBE_AI_Init+0x60>)
 8001a94:	4910      	ldr	r1, [pc, #64]	; (8001ad8 <MX_X_CUBE_AI_Init+0x64>)
 8001a96:	f018 fb61 	bl	801a15c <iprintf>
  do {} while (1);
 8001a9a:	e7fe      	b.n	8001a9a <MX_X_CUBE_AI_Init+0x26>
  ai_input = ai_network_inputs_get(network, NULL);
 8001a9c:	4d0f      	ldr	r5, [pc, #60]	; (8001adc <MX_X_CUBE_AI_Init+0x68>)
 8001a9e:	6820      	ldr	r0, [r4, #0]
 8001aa0:	9101      	str	r1, [sp, #4]
 8001aa2:	f000 f863 	bl	8001b6c <ai_network_inputs_get>
  ai_output = ai_network_outputs_get(network, NULL);
 8001aa6:	9901      	ldr	r1, [sp, #4]
  ai_input = ai_network_inputs_get(network, NULL);
 8001aa8:	6028      	str	r0, [r5, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8001aaa:	6820      	ldr	r0, [r4, #0]
 8001aac:	f000 f868 	bl	8001b80 <ai_network_outputs_get>
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_X_CUBE_AI_Init+0x6c>)
 8001ab2:	6018      	str	r0, [r3, #0]
	data_ins[idx] = ai_input[idx].data;
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <MX_X_CUBE_AI_Init+0x70>)
 8001aba:	601a      	str	r2, [r3, #0]
	data_outs[idx] = ai_output[idx].data;
 8001abc:	6842      	ldr	r2, [r0, #4]
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <MX_X_CUBE_AI_Init+0x74>)
 8001ac0:	601a      	str	r2, [r3, #0]

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 8001ac2:	b003      	add	sp, #12
 8001ac4:	bd30      	pop	{r4, r5, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20002f84 	.word	0x20002f84
 8001acc:	0801c526 	.word	0x0801c526
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	0801c55e 	.word	0x0801c55e
 8001ad8:	0801c543 	.word	0x0801c543
 8001adc:	20002f74 	.word	0x20002f74
 8001ae0:	20002f78 	.word	0x20002f78
 8001ae4:	20002f7c 	.word	0x20002f7c
 8001ae8:	20002f80 	.word	0x20002f80

08001aec <MX_X_CUBE_AI_Process>:

int MX_X_CUBE_AI_Process(void)
{
 8001aec:	b508      	push	{r3, lr}
    /* USER CODE BEGIN 6 */
  int res = -1;
  float conf=-100;


  printf("TEMPLATE - run - main loop\r\n");
 8001aee:	4810      	ldr	r0, [pc, #64]	; (8001b30 <MX_X_CUBE_AI_Process+0x44>)
 8001af0:	f018 fbba 	bl	801a268 <puts>
//  RGB24_to_Float_Asym(&resize_image_buffr[0], (uint8_t*)&data_ins[0], 50* 50);

  if (network) {
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_X_CUBE_AI_Process+0x48>)
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	b1b0      	cbz	r0, 8001b28 <MX_X_CUBE_AI_Process+0x3c>
      data[idx] = &resize_image_buffr[0];
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_X_CUBE_AI_Process+0x4c>)
 8001afc:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <MX_X_CUBE_AI_Process+0x50>)
 8001afe:	601a      	str	r2, [r3, #0]
  batch = ai_network_run(network, ai_input, ai_output);
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_X_CUBE_AI_Process+0x54>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_X_CUBE_AI_Process+0x58>)
 8001b06:	6819      	ldr	r1, [r3, #0]
 8001b08:	f000 f9c3 	bl	8001e92 <ai_network_run>
  if (batch != 1) {
 8001b0c:	2801      	cmp	r0, #1
 8001b0e:	d000      	beq.n	8001b12 <MX_X_CUBE_AI_Process+0x26>
	  while(1){
 8001b10:	e7fe      	b.n	8001b10 <MX_X_CUBE_AI_Process+0x24>
	u32dummy = (u32dummy << 8)|(uint8_t)data[x];
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <MX_X_CUBE_AI_Process+0x5c>)
	val = data[0];
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
//    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
//    ai_log_err(err, "Process has FAILED");
//  }
  return conf;
    /* USER CODE END 6 */
}
 8001b1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b22:	ee17 0a90 	vmov	r0, s15
 8001b26:	bd08      	pop	{r3, pc}
  float conf=-100;
 8001b28:	eddf 7a08 	vldr	s15, [pc, #32]	; 8001b4c <MX_X_CUBE_AI_Process+0x60>
 8001b2c:	e7f7      	b.n	8001b1e <MX_X_CUBE_AI_Process+0x32>
 8001b2e:	bf00      	nop
 8001b30:	0801c590 	.word	0x0801c590
 8001b34:	20002f84 	.word	0x20002f84
 8001b38:	20002f7c 	.word	0x20002f7c
 8001b3c:	200019c8 	.word	0x200019c8
 8001b40:	20002f78 	.word	0x20002f78
 8001b44:	20002f74 	.word	0x20002f74
 8001b48:	20002f80 	.word	0x20002f80
 8001b4c:	c2c80000 	.word	0xc2c80000

08001b50 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8001b50:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8001b52:	2305      	movs	r3, #5
 8001b54:	2200      	movs	r2, #0
 8001b56:	e9cd 3200 	strd	r3, r2, [sp]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	4a02      	ldr	r2, [pc, #8]	; (8001b68 <ai_network_create+0x18>)
 8001b5e:	f014 f9f1 	bl	8015f44 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8001b62:	b003      	add	sp, #12
 8001b64:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b68:	20000e74 	.word	0x20000e74

08001b6c <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8001b6c:	b910      	cbnz	r0, 8001b74 <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001b6e:	4802      	ldr	r0, [pc, #8]	; (8001b78 <ai_network_inputs_get+0xc>)
 8001b70:	4b02      	ldr	r3, [pc, #8]	; (8001b7c <ai_network_inputs_get+0x10>)
 8001b72:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8001b74:	f013 bf0c 	b.w	8015990 <ai_platform_inputs_get>
 8001b78:	20000e74 	.word	0x20000e74
 8001b7c:	a1c00100 	.word	0xa1c00100

08001b80 <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8001b80:	b910      	cbnz	r0, 8001b88 <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001b82:	4802      	ldr	r0, [pc, #8]	; (8001b8c <ai_network_outputs_get+0xc>)
 8001b84:	4b02      	ldr	r3, [pc, #8]	; (8001b90 <ai_network_outputs_get+0x10>)
 8001b86:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8001b88:	f014 b872 	b.w	8015c70 <ai_platform_outputs_get>
 8001b8c:	20000e74 	.word	0x20000e74
 8001b90:	a1c00100 	.word	0xa1c00100

08001b94 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8001b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b98:	4607      	mov	r7, r0
 8001b9a:	4688      	mov	r8, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8001b9c:	f014 fb86 	bl	80162ac <ai_platform_network_init>
  if (!net_ctx) return false;
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	f000 80e2 	beq.w	8001d6c <ai_network_init+0x1d8>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8001ba8:	4e77      	ldr	r6, [pc, #476]	; (8001d88 <ai_network_init+0x1f4>)
 8001baa:	4642      	mov	r2, r8
 8001bac:	2101      	movs	r1, #1
 8001bae:	4630      	mov	r0, r6
 8001bb0:	f013 fd2c 	bl	801560c <ai_platform_get_weights_map>
 8001bb4:	4605      	mov	r5, r0
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	f000 80da 	beq.w	8001d70 <ai_network_init+0x1dc>
    conv2d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8001bbc:	4a73      	ldr	r2, [pc, #460]	; (8001d8c <ai_network_init+0x1f8>)
 8001bbe:	6813      	ldr	r3, [r2, #0]
 8001bc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bc4:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8001bc6:	6833      	ldr	r3, [r6, #0]
    conv2d_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8001bc8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8001bcc:	4a70      	ldr	r2, [pc, #448]	; (8001d90 <ai_network_init+0x1fc>)
    conv2d_3_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 240640);
 8001bce:	f503 366b 	add.w	r6, r3, #240640	; 0x3ac00
    conv2d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8001bd2:	6811      	ldr	r1, [r2, #0]
 8001bd4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001bd8:	6011      	str	r1, [r2, #0]
    conv2d_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 8001bda:	f503 7110 	add.w	r1, r3, #576	; 0x240
    conv2d_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 8001bde:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8001be2:	4a6c      	ldr	r2, [pc, #432]	; (8001d94 <ai_network_init+0x200>)
 8001be4:	6811      	ldr	r1, [r2, #0]
 8001be6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001bea:	6011      	str	r1, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 8001bec:	f503 7120 	add.w	r1, r3, #640	; 0x280
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 8001bf0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8001bf4:	4a68      	ldr	r2, [pc, #416]	; (8001d98 <ai_network_init+0x204>)
 8001bf6:	6811      	ldr	r1, [r2, #0]
 8001bf8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001bfc:	6011      	str	r1, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 19072);
 8001bfe:	f503 4195 	add.w	r1, r3, #19072	; 0x4a80
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 19072);
 8001c02:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8001c06:	4a65      	ldr	r2, [pc, #404]	; (8001d9c <ai_network_init+0x208>)
 8001c08:	6811      	ldr	r1, [r2, #0]
 8001c0a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001c0e:	6011      	str	r1, [r2, #0]
    conv2d_2_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 19200);
 8001c10:	f503 4196 	add.w	r1, r3, #19200	; 0x4b00
    conv2d_2_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 19200);
 8001c14:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8001c18:	4a61      	ldr	r2, [pc, #388]	; (8001da0 <ai_network_init+0x20c>)
 8001c1a:	6811      	ldr	r1, [r2, #0]
 8001c1c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001c20:	6011      	str	r1, [r2, #0]
    conv2d_2_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 92928);
 8001c22:	f503 31b5 	add.w	r1, r3, #92672	; 0x16a00
 8001c26:	f501 7180 	add.w	r1, r1, #256	; 0x100
    conv2d_2_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 92928);
 8001c2a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8001c2e:	4a5d      	ldr	r2, [pc, #372]	; (8001da4 <ai_network_init+0x210>)
 8001c30:	6811      	ldr	r1, [r2, #0]
 8001c32:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001c36:	6011      	str	r1, [r2, #0]
    conv2d_3_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 93184);
 8001c38:	f503 31b6 	add.w	r1, r3, #93184	; 0x16c00
    conv2d_3_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 93184);
 8001c3c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8001c40:	4a59      	ldr	r2, [pc, #356]	; (8001da8 <ai_network_init+0x214>)
 8001c42:	6811      	ldr	r1, [r2, #0]
 8001c44:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001c48:	6011      	str	r1, [r2, #0]
    conv2d_3_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 240640);
 8001c4a:	e9c2 6602 	strd	r6, r6, [r2, #8]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8001c4e:	4a57      	ldr	r2, [pc, #348]	; (8001dac <ai_network_init+0x218>)
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 240896);
 8001c50:	f506 7680 	add.w	r6, r6, #256	; 0x100
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8001c54:	6811      	ldr	r1, [r2, #0]
 8001c56:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001c5a:	6011      	str	r1, [r2, #0]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8001c5c:	4954      	ldr	r1, [pc, #336]	; (8001db0 <ai_network_init+0x21c>)
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 240896);
 8001c5e:	e9c2 6602 	strd	r6, r6, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8001c62:	680a      	ldr	r2, [r1, #0]
 8001c64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c68:	600a      	str	r2, [r1, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 765184);
 8001c6a:	f503 223a 	add.w	r2, r3, #761856	; 0xba000
 8001c6e:	f502 6050 	add.w	r0, r2, #3328	; 0xd00
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 765696);
 8001c72:	f502 6270 	add.w	r2, r2, #3840	; 0xf00
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 765184);
 8001c76:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8001c7a:	494e      	ldr	r1, [pc, #312]	; (8001db4 <ai_network_init+0x220>)
 8001c7c:	6808      	ldr	r0, [r1, #0]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 765696);
 8001c7e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8001c82:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8001c86:	4a4c      	ldr	r2, [pc, #304]	; (8001db8 <ai_network_init+0x224>)
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8001c88:	6008      	str	r0, [r1, #0]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8001c8a:	6811      	ldr	r1, [r2, #0]
 8001c8c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001c90:	6011      	str	r1, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 896768);
 8001c92:	f503 215a 	add.w	r1, r3, #892928	; 0xda000
    dense_2_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 897792);
 8001c96:	f503 235b 	add.w	r3, r3, #897024	; 0xdb000
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 896768);
 8001c9a:	f501 6170 	add.w	r1, r1, #3840	; 0xf00
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 896768);
 8001c9e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8001ca2:	4a46      	ldr	r2, [pc, #280]	; (8001dbc <ai_network_init+0x228>)
 8001ca4:	6811      	ldr	r1, [r2, #0]
 8001ca6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001caa:	6011      	str	r1, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 897792);
 8001cac:	f503 7140 	add.w	r1, r3, #768	; 0x300
    dense_2_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 898816);
 8001cb0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
    dense_2_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 897792);
 8001cb4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8001cb8:	4a41      	ldr	r2, [pc, #260]	; (8001dc0 <ai_network_init+0x22c>)
 8001cba:	6811      	ldr	r1, [r2, #0]
 8001cbc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    dense_2_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 898816);
 8001cc0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8001cc4:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8001cc6:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8001e00 <ai_network_init+0x26c>
 8001cca:	4642      	mov	r2, r8
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4648      	mov	r0, r9
 8001cd0:	f013 fcf4 	bl	80156bc <ai_platform_get_activations_map>
 8001cd4:	4606      	mov	r6, r0
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d050      	beq.n	8001d7c <ai_network_init+0x1e8>
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 38568);
 8001cda:	f8d9 3000 	ldr.w	r3, [r9]
 8001cde:	4939      	ldr	r1, [pc, #228]	; (8001dc4 <ai_network_init+0x230>)
 8001ce0:	f503 4216 	add.w	r2, r3, #38400	; 0x9600
 8001ce4:	32a8      	adds	r2, #168	; 0xa8
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 38568);
 8001ce6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 48568);
 8001cea:	f503 423d 	add.w	r2, r3, #48384	; 0xbd00
 8001cee:	4936      	ldr	r1, [pc, #216]	; (8001dc8 <ai_network_init+0x234>)
 8001cf0:	32b8      	adds	r2, #184	; 0xb8
    conv2d_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 48568);
 8001cf2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 3776);
 8001cf6:	f503 616c 	add.w	r1, r3, #3776	; 0xec0
 8001cfa:	4a34      	ldr	r2, [pc, #208]	; (8001dcc <ai_network_init+0x238>)
    conv2d_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3776);
 8001cfc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 43776);
 8001d00:	f503 412b 	add.w	r1, r3, #43776	; 0xab00
 8001d04:	4a32      	ldr	r2, [pc, #200]	; (8001dd0 <ai_network_init+0x23c>)
    conv2d_1_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 43776);
 8001d06:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001d0a:	4a32      	ldr	r2, [pc, #200]	; (8001dd4 <ai_network_init+0x240>)
    conv2d_2_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 21632);
 8001d0c:	f503 41a9 	add.w	r1, r3, #21632	; 0x5480
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001d10:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_2_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 21632);
 8001d14:	4a30      	ldr	r2, [pc, #192]	; (8001dd8 <ai_network_init+0x244>)
    conv2d_2_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 21632);
 8001d16:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 28288);
 8001d1a:	f503 41dd 	add.w	r1, r3, #28288	; 0x6e80
 8001d1e:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <ai_network_init+0x248>)
    conv2d_2_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 28288);
 8001d20:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001d24:	4a2e      	ldr	r2, [pc, #184]	; (8001de0 <ai_network_init+0x24c>)
    conv2d_3_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 3584);
 8001d26:	f503 6160 	add.w	r1, r3, #3584	; 0xe00
    conv2d_3_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001d2a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_3_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 3584);
 8001d2e:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <ai_network_init+0x250>)
    conv2d_3_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3584);
 8001d30:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001d34:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <ai_network_init+0x254>)
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8001d36:	f503 7100 	add.w	r1, r3, #512	; 0x200
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001d3a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8001d3e:	4a2b      	ldr	r2, [pc, #172]	; (8001dec <ai_network_init+0x258>)
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 8001d40:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 1024);
 8001d44:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8001d48:	4929      	ldr	r1, [pc, #164]	; (8001df0 <ai_network_init+0x25c>)
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1024);
 8001d4a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001d4e:	4929      	ldr	r1, [pc, #164]	; (8001df4 <ai_network_init+0x260>)
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001d50:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_2_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 1024);
 8001d54:	4928      	ldr	r1, [pc, #160]	; (8001df8 <ai_network_init+0x264>)
    dense_2_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1024);
 8001d56:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001d5a:	4a28      	ldr	r2, [pc, #160]	; (8001dfc <ai_network_init+0x268>)
    dense_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001d5c:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8001d60:	4638      	mov	r0, r7
 8001d62:	f014 fc1f 	bl	80165a4 <ai_platform_network_post_init>
 8001d66:	4030      	ands	r0, r6
 8001d68:	4028      	ands	r0, r5
 8001d6a:	b2c0      	uxtb	r0, r0

  return ok;
}
 8001d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8001d70:	2212      	movs	r2, #18
 8001d72:	2130      	movs	r1, #48	; 0x30
 8001d74:	4620      	mov	r0, r4
 8001d76:	f013 fe05 	bl	8015984 <ai_platform_network_set_error>
  return false;
 8001d7a:	e7a4      	b.n	8001cc6 <ai_network_init+0x132>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8001d7c:	2213      	movs	r2, #19
 8001d7e:	2130      	movs	r1, #48	; 0x30
 8001d80:	4620      	mov	r0, r4
 8001d82:	f013 fdff 	bl	8015984 <ai_platform_network_set_error>
  return false;
 8001d86:	e7eb      	b.n	8001d60 <ai_network_init+0x1cc>
 8001d88:	200106e8 	.word	0x200106e8
 8001d8c:	20000ba0 	.word	0x20000ba0
 8001d90:	20000ac0 	.word	0x20000ac0
 8001d94:	20000860 	.word	0x20000860
 8001d98:	20000780 	.word	0x20000780
 8001d9c:	2000096c 	.word	0x2000096c
 8001da0:	2000088c 	.word	0x2000088c
 8001da4:	20000a94 	.word	0x20000a94
 8001da8:	20000998 	.word	0x20000998
 8001dac:	20000e18 	.word	0x20000e18
 8001db0:	20000da4 	.word	0x20000da4
 8001db4:	20000c40 	.word	0x20000c40
 8001db8:	20000bcc 	.word	0x20000bcc
 8001dbc:	20000d2c 	.word	0x20000d2c
 8001dc0:	20000cb8 	.word	0x20000cb8
 8001dc4:	20000edc 	.word	0x20000edc
 8001dc8:	20000b74 	.word	0x20000b74
 8001dcc:	20000b48 	.word	0x20000b48
 8001dd0:	20000834 	.word	0x20000834
 8001dd4:	20000808 	.word	0x20000808
 8001dd8:	20000940 	.word	0x20000940
 8001ddc:	20000914 	.word	0x20000914
 8001de0:	20000a68 	.word	0x20000a68
 8001de4:	20000a3c 	.word	0x20000a3c
 8001de8:	20000dec 	.word	0x20000dec
 8001dec:	20000e64 	.word	0x20000e64
 8001df0:	20000c14 	.word	0x20000c14
 8001df4:	20000c8c 	.word	0x20000c8c
 8001df8:	20000d00 	.word	0x20000d00
 8001dfc:	20000d78 	.word	0x20000d78
 8001e00:	200106e4 	.word	0x200106e4

08001e04 <ai_network_create_and_init>:
{
 8001e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e08:	4688      	mov	r8, r1
 8001e0a:	b08f      	sub	sp, #60	; 0x3c
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8001e0c:	2100      	movs	r1, #0
{
 8001e0e:	4606      	mov	r6, r0
 8001e10:	4617      	mov	r7, r2
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8001e12:	f7ff fe9d 	bl	8001b50 <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 8001e16:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8001e1a:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 8001e1c:	d001      	beq.n	8001e22 <ai_network_create_and_init+0x1e>
    return err;
 8001e1e:	4620      	mov	r0, r4
 8001e20:	e006      	b.n	8001e30 <ai_network_create_and_init+0x2c>
    if (ai_network_data_params_get(&params) != true) {
 8001e22:	4668      	mov	r0, sp
 8001e24:	f000 f838 	bl	8001e98 <ai_network_data_params_get>
 8001e28:	b928      	cbnz	r0, 8001e36 <ai_network_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 8001e2a:	6830      	ldr	r0, [r6, #0]
 8001e2c:	f013 fcb8 	bl	80157a0 <ai_platform_network_get_error>
}
 8001e30:	b00f      	add	sp, #60	; 0x3c
 8001e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 8001e36:	f1b8 0f00 	cmp.w	r8, #0
 8001e3a:	d11a      	bne.n	8001e72 <ai_network_create_and_init+0x6e>
    if (weights) {
 8001e3c:	bb3f      	cbnz	r7, 8001e8e <ai_network_create_and_init+0x8a>
    if (ai_network_init(*network, &params) != true) {
 8001e3e:	4669      	mov	r1, sp
 8001e40:	6830      	ldr	r0, [r6, #0]
 8001e42:	f7ff fea7 	bl	8001b94 <ai_network_init>
 8001e46:	b928      	cbnz	r0, 8001e54 <ai_network_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 8001e48:	6830      	ldr	r0, [r6, #0]
 8001e4a:	f013 fca9 	bl	80157a0 <ai_platform_network_get_error>
 8001e4e:	4604      	mov	r4, r0
 8001e50:	fa5f f980 	uxtb.w	r9, r0
    return err;
 8001e54:	f369 0407 	bfi	r4, r9, #0, #8
 8001e58:	e7e1      	b.n	8001e1e <ai_network_create_and_init+0x1a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8001e5a:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8001e5e:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_activations.size;idx++)
 8001e60:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8001e62:	a803      	add	r0, sp, #12
 8001e64:	f013 fbbe 	bl	80155e4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8001e68:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001e6c:	42ab      	cmp	r3, r5
 8001e6e:	dcf4      	bgt.n	8001e5a <ai_network_create_and_init+0x56>
 8001e70:	e7e4      	b.n	8001e3c <ai_network_create_and_init+0x38>
 8001e72:	464d      	mov	r5, r9
 8001e74:	e7f8      	b.n	8001e68 <ai_network_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8001e76:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8001e7a:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_weights.size;idx++)
 8001e7c:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8001e7e:	a801      	add	r0, sp, #4
 8001e80:	f013 fbb0 	bl	80155e4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8001e84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001e88:	42ab      	cmp	r3, r5
 8001e8a:	dcf4      	bgt.n	8001e76 <ai_network_create_and_init+0x72>
 8001e8c:	e7d7      	b.n	8001e3e <ai_network_create_and_init+0x3a>
 8001e8e:	2500      	movs	r5, #0
 8001e90:	e7f8      	b.n	8001e84 <ai_network_create_and_init+0x80>

08001e92 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8001e92:	f014 bc93 	b.w	80167bc <ai_platform_network_process>
	...

08001e98 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8001e98:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8001e9a:	4603      	mov	r3, r0
{
 8001e9c:	b085      	sub	sp, #20
  if (!params) return false;
 8001e9e:	b170      	cbz	r0, 8001ebe <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8001ea0:	4c08      	ldr	r4, [pc, #32]	; (8001ec4 <ai_network_data_params_get+0x2c>)
 8001ea2:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8001ea4:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 8001ea6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eaa:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 8001eae:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8001eb2:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f013 fc57 	bl	801576c <ai_platform_bind_network_params>
}
 8001ebe:	b005      	add	sp, #20
 8001ec0:	bd30      	pop	{r4, r5, pc}
 8001ec2:	bf00      	nop
 8001ec4:	0801c420 	.word	0x0801c420

08001ec8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001ec8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001ecc:	4c1a      	ldr	r4, [pc, #104]	; (8001f38 <LL_FillBuffer+0x70>)
{
 8001ece:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001ed0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 8001ed4:	460e      	mov	r6, r1
 8001ed6:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001ed8:	2134      	movs	r1, #52	; 0x34
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001eda:	6063      	str	r3, [r4, #4]
{
 8001edc:	4681      	mov	r9, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <LL_FillBuffer+0x74>)
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001ee0:	4620      	mov	r0, r4
{
 8001ee2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <LL_FillBuffer+0x78>)
 8001eea:	fb01 3302 	mla	r3, r1, r2, r3
 8001eee:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001ef2:	2d02      	cmp	r5, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001ef4:	60e3      	str	r3, [r4, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001ef6:	bf18      	it	ne
 8001ef8:	2500      	movne	r5, #0
  hDma2dHandler.Instance = DMA2D;
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <LL_FillBuffer+0x7c>)
 8001efc:	60a5      	str	r5, [r4, #8]
 8001efe:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001f00:	f000 ffc2 	bl	8002e88 <HAL_DMA2D_Init>
 8001f04:	b9a0      	cbnz	r0, 8001f30 <LL_FillBuffer+0x68>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001f06:	4649      	mov	r1, r9
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f001 f911 	bl	8003130 <HAL_DMA2D_ConfigLayer>
 8001f0e:	b978      	cbnz	r0, 8001f30 <LL_FillBuffer+0x68>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	4632      	mov	r2, r6
 8001f14:	4651      	mov	r1, sl
 8001f16:	4620      	mov	r0, r4
 8001f18:	f8cd 8000 	str.w	r8, [sp]
 8001f1c:	f000 ffe0 	bl	8002ee0 <HAL_DMA2D_Start>
 8001f20:	b930      	cbnz	r0, 8001f30 <LL_FillBuffer+0x68>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001f22:	210a      	movs	r1, #10
 8001f24:	4620      	mov	r0, r4
      }
    }
  } 
}
 8001f26:	b002      	add	sp, #8
 8001f28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001f2c:	f000 bff2 	b.w	8002f14 <HAL_DMA2D_PollForTransfer>
}
 8001f30:	b002      	add	sp, #8
 8001f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f36:	bf00      	nop
 8001f38:	20010708 	.word	0x20010708
 8001f3c:	200106ec 	.word	0x200106ec
 8001f40:	20010748 	.word	0x20010748
 8001f44:	4002b000 	.word	0x4002b000

08001f48 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <BSP_LCD_GetXSize+0x10>)
 8001f4a:	2134      	movs	r1, #52	; 0x34
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <BSP_LCD_GetXSize+0x14>)
 8001f50:	fb01 3302 	mla	r3, r1, r2, r3
}
 8001f54:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001f56:	4770      	bx	lr
 8001f58:	200106ec 	.word	0x200106ec
 8001f5c:	20010748 	.word	0x20010748

08001f60 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <BSP_LCD_GetYSize+0x10>)
 8001f62:	2134      	movs	r1, #52	; 0x34
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <BSP_LCD_GetYSize+0x14>)
 8001f68:	fb01 3302 	mla	r3, r1, r2, r3
}
 8001f6c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001f6e:	4770      	bx	lr
 8001f70:	200106ec 	.word	0x200106ec
 8001f74:	20010748 	.word	0x20010748

08001f78 <BSP_LCD_LayerDefaultInit>:
{     
 8001f78:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
 8001f7a:	2500      	movs	r5, #0
{     
 8001f7c:	b08e      	sub	sp, #56	; 0x38
 8001f7e:	460e      	mov	r6, r1
 8001f80:	4604      	mov	r4, r0
  layer_cfg.WindowX0 = 0;
 8001f82:	9501      	str	r5, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001f84:	f7ff ffe0 	bl	8001f48 <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
 8001f88:	e9cd 0502 	strd	r0, r5, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001f8c:	f7ff ffe8 	bl	8001f60 <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
 8001f90:	23ff      	movs	r3, #255	; 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001f92:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  layer_cfg.FBStartAdress = FB_Address;
 8001f96:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Backcolor.Blue = 0;
 8001f98:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
 8001f9c:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  layer_cfg.Alpha0 = 0;
 8001fa0:	e9cd 3506 	strd	r3, r5, [sp, #24]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001fa4:	2307      	movs	r3, #7
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001fa6:	e9cd 0504 	strd	r0, r5, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001faa:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001fae:	f7ff ffcb 	bl	8001f48 <BSP_LCD_GetXSize>
 8001fb2:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001fb4:	f7ff ffd4 	bl	8001f60 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001fb8:	4622      	mov	r2, r4
 8001fba:	a901      	add	r1, sp, #4
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001fbc:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001fbe:	4808      	ldr	r0, [pc, #32]	; (8001fe0 <BSP_LCD_LayerDefaultInit+0x68>)
 8001fc0:	f001 fb40 	bl	8003644 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001fc4:	220c      	movs	r2, #12
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <BSP_LCD_LayerDefaultInit+0x6c>)
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	4354      	muls	r4, r2
 8001fce:	191a      	adds	r2, r3, r4
 8001fd0:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001fd2:	4905      	ldr	r1, [pc, #20]	; (8001fe8 <BSP_LCD_LayerDefaultInit+0x70>)
 8001fd4:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001fd6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001fda:	511a      	str	r2, [r3, r4]
}
 8001fdc:	b00e      	add	sp, #56	; 0x38
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
 8001fe0:	20010748 	.word	0x20010748
 8001fe4:	200106f0 	.word	0x200106f0
 8001fe8:	20000f44 	.word	0x20000f44

08001fec <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8001fec:	4b01      	ldr	r3, [pc, #4]	; (8001ff4 <BSP_LCD_SelectLayer+0x8>)
 8001fee:	6018      	str	r0, [r3, #0]
} 
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	200106ec 	.word	0x200106ec

08001ff8 <BSP_LCD_SetLayerWindow>:
{
 8001ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_LTDC_SetWindowSize(&hLtdcHandler, Width, Height, LayerIndex);
 8001ffc:	4f09      	ldr	r7, [pc, #36]	; (8002024 <BSP_LCD_SetLayerWindow+0x2c>)
{
 8001ffe:	4604      	mov	r4, r0
 8002000:	460d      	mov	r5, r1
 8002002:	4616      	mov	r6, r2
 8002004:	4619      	mov	r1, r3
  HAL_LTDC_SetWindowSize(&hLtdcHandler, Width, Height, LayerIndex);
 8002006:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800200a:	4603      	mov	r3, r0
 800200c:	4638      	mov	r0, r7
 800200e:	f001 fb46 	bl	800369e <HAL_LTDC_SetWindowSize>
  HAL_LTDC_SetWindowPosition(&hLtdcHandler, Xpos, Ypos, LayerIndex); 
 8002012:	4623      	mov	r3, r4
 8002014:	4632      	mov	r2, r6
 8002016:	4629      	mov	r1, r5
 8002018:	4638      	mov	r0, r7
}
 800201a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_LTDC_SetWindowPosition(&hLtdcHandler, Xpos, Ypos, LayerIndex); 
 800201e:	f001 bb6b 	b.w	80036f8 <HAL_LTDC_SetWindowPosition>
 8002022:	bf00      	nop
 8002024:	20010748 	.word	0x20010748

08002028 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <BSP_LCD_SetFont+0x10>)
 800202a:	210c      	movs	r1, #12
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b03      	ldr	r3, [pc, #12]	; (800203c <BSP_LCD_SetFont+0x14>)
 8002030:	fb01 3302 	mla	r3, r1, r2, r3
 8002034:	6098      	str	r0, [r3, #8]
}
 8002036:	4770      	bx	lr
 8002038:	200106ec 	.word	0x200106ec
 800203c:	200106f0 	.word	0x200106f0

08002040 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <BSP_LCD_GetFont+0x10>)
 8002042:	210c      	movs	r1, #12
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	4b03      	ldr	r3, [pc, #12]	; (8002054 <BSP_LCD_GetFont+0x14>)
 8002048:	fb01 3302 	mla	r3, r1, r2, r3
}
 800204c:	6898      	ldr	r0, [r3, #8]
 800204e:	4770      	bx	lr
 8002050:	200106ec 	.word	0x200106ec
 8002054:	200106f0 	.word	0x200106f0

08002058 <BSP_LCD_Clear>:
{ 
 8002058:	b530      	push	{r4, r5, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <BSP_LCD_Clear+0x34>)
{ 
 800205c:	b085      	sub	sp, #20
 800205e:	4604      	mov	r4, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002060:	681d      	ldr	r5, [r3, #0]
 8002062:	f7ff ff71 	bl	8001f48 <BSP_LCD_GetXSize>
 8002066:	9003      	str	r0, [sp, #12]
 8002068:	f7ff ff7a 	bl	8001f60 <BSP_LCD_GetYSize>
 800206c:	4908      	ldr	r1, [pc, #32]	; (8002090 <BSP_LCD_Clear+0x38>)
 800206e:	4603      	mov	r3, r0
 8002070:	2034      	movs	r0, #52	; 0x34
 8002072:	9401      	str	r4, [sp, #4]
 8002074:	9a03      	ldr	r2, [sp, #12]
 8002076:	fb00 1105 	mla	r1, r0, r5, r1
 800207a:	2000      	movs	r0, #0
 800207c:	9000      	str	r0, [sp, #0]
 800207e:	4628      	mov	r0, r5
 8002080:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8002082:	f7ff ff21 	bl	8001ec8 <LL_FillBuffer>
}
 8002086:	b005      	add	sp, #20
 8002088:	bd30      	pop	{r4, r5, pc}
 800208a:	bf00      	nop
 800208c:	200106ec 	.word	0x200106ec
 8002090:	20010748 	.word	0x20010748

08002094 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <BSP_LCD_DrawPixel+0x38>)
{
 8002096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800209a:	681b      	ldr	r3, [r3, #0]
{
 800209c:	4614      	mov	r4, r2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800209e:	4e0c      	ldr	r6, [pc, #48]	; (80020d0 <BSP_LCD_DrawPixel+0x3c>)
 80020a0:	2234      	movs	r2, #52	; 0x34
{
 80020a2:	4605      	mov	r5, r0
 80020a4:	460f      	mov	r7, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80020a6:	fb02 6603 	mla	r6, r2, r3, r6
 80020aa:	f7ff ff4d 	bl	8001f48 <BSP_LCD_GetXSize>
 80020ae:	fb00 5007 	mla	r0, r0, r7, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020b2:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80020b4:	f8d6 805c 	ldr.w	r8, [r6, #92]	; 0x5c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d104      	bne.n	80020c6 <BSP_LCD_DrawPixel+0x32>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80020bc:	b2a4      	uxth	r4, r4
 80020be:	f828 4010 	strh.w	r4, [r8, r0, lsl #1]
}
 80020c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80020c6:	f848 4020 	str.w	r4, [r8, r0, lsl #2]
}
 80020ca:	e7fa      	b.n	80020c2 <BSP_LCD_DrawPixel+0x2e>
 80020cc:	200106ec 	.word	0x200106ec
 80020d0:	20010748 	.word	0x20010748

080020d4 <BSP_LCD_DisplayChar>:
{
 80020d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <BSP_LCD_DisplayChar+0xbc>)
{
 80020da:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80020dc:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
 80020de:	f04f 0800 	mov.w	r8, #0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80020e2:	f8d3 b000 	ldr.w	fp, [r3]
{
 80020e6:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80020ea:	200c      	movs	r0, #12
 80020ec:	4929      	ldr	r1, [pc, #164]	; (8002194 <BSP_LCD_DisplayChar+0xc0>)
 80020ee:	fb00 110b 	mla	r1, r0, fp, r1
 80020f2:	6889      	ldr	r1, [r1, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80020f4:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80020f8:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 80020fc:	f109 0607 	add.w	r6, r9, #7
 8002100:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002102:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002106:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 8002108:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 800210c:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
 8002110:	f109 32ff 	add.w	r2, r9, #4294967295
 8002114:	fa52 f380 	uxtab	r3, r2, r0
 8002118:	9302      	str	r3, [sp, #8]
 800211a:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
 800211c:	45d0      	cmp	r8, sl
 800211e:	eb03 0108 	add.w	r1, r3, r8
 8002122:	b289      	uxth	r1, r1
 8002124:	d302      	bcc.n	800212c <BSP_LCD_DisplayChar+0x58>
}
 8002126:	b005      	add	sp, #20
 8002128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 800212c:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 800212e:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 8002130:	d004      	beq.n	800213c <BSP_LCD_DisplayChar+0x68>
 8002132:	2e02      	cmp	r6, #2
 8002134:	d109      	bne.n	800214a <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
 8002136:	882c      	ldrh	r4, [r5, #0]
 8002138:	ba64      	rev16	r4, r4
 800213a:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 800213c:	2700      	movs	r7, #0
 800213e:	45b9      	cmp	r9, r7
 8002140:	d80a      	bhi.n	8002158 <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
 8002142:	f108 0801 	add.w	r8, r8, #1
 8002146:	4435      	add	r5, r6
 8002148:	e7e7      	b.n	800211a <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800214a:	786a      	ldrb	r2, [r5, #1]
 800214c:	0424      	lsls	r4, r4, #16
 800214e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8002152:	78aa      	ldrb	r2, [r5, #2]
 8002154:	4314      	orrs	r4, r2
      break;
 8002156:	e7f1      	b.n	800213c <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
 8002158:	9b00      	ldr	r3, [sp, #0]
 800215a:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800215c:	9103      	str	r1, [sp, #12]
 800215e:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 8002160:	9b02      	ldr	r3, [sp, #8]
 8002162:	eba3 0c07 	sub.w	ip, r3, r7
 8002166:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 8002168:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 800216a:	fa02 f20c 	lsl.w	r2, r2, ip
 800216e:	4222      	tst	r2, r4
 8002170:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002174:	bf0d      	iteet	eq
 8002176:	4b07      	ldreq	r3, [pc, #28]	; (8002194 <BSP_LCD_DisplayChar+0xc0>)
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002178:	fb02 f20b 	mulne.w	r2, r2, fp
 800217c:	4b05      	ldrne	r3, [pc, #20]	; (8002194 <BSP_LCD_DisplayChar+0xc0>)
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800217e:	fb02 320b 	mlaeq	r2, r2, fp, r3
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002182:	bf14      	ite	ne
 8002184:	589a      	ldrne	r2, [r3, r2]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002186:	6852      	ldreq	r2, [r2, #4]
 8002188:	f7ff ff84 	bl	8002094 <BSP_LCD_DrawPixel>
 800218c:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
 800218e:	e7d6      	b.n	800213e <BSP_LCD_DisplayChar+0x6a>
 8002190:	200106ec 	.word	0x200106ec
 8002194:	200106f0 	.word	0x200106f0

08002198 <BSP_LCD_DisplayStringAt>:
{
 8002198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800219c:	4699      	mov	r9, r3
 800219e:	4605      	mov	r5, r0
 80021a0:	460f      	mov	r7, r1
 80021a2:	4616      	mov	r6, r2
  uint8_t  *ptr = Text;
 80021a4:	4613      	mov	r3, r2
 80021a6:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 80021a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021ac:	2a00      	cmp	r2, #0
 80021ae:	d1fa      	bne.n	80021a6 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80021b0:	f7ff feca 	bl	8001f48 <BSP_LCD_GetXSize>
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <BSP_LCD_DisplayStringAt+0xa4>)
 80021b6:	210c      	movs	r1, #12
  switch (Mode)
 80021b8:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <BSP_LCD_DisplayStringAt+0xa8>)
 80021c0:	fb01 3302 	mla	r3, r1, r2, r3
 80021c4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80021c8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80021cc:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (Mode)
 80021d0:	d01d      	beq.n	800220e <BSP_LCD_DisplayStringAt+0x76>
 80021d2:	f1b9 0f02 	cmp.w	r9, #2
 80021d6:	d021      	beq.n	800221c <BSP_LCD_DisplayStringAt+0x84>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80021d8:	b22b      	sxth	r3, r5
    ref_column = 1;
 80021da:	2400      	movs	r4, #0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bfd8      	it	le
 80021e0:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80021e2:	f7ff feb1 	bl	8001f48 <BSP_LCD_GetXSize>
 80021e6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80021ea:	b2a2      	uxth	r2, r4
 80021ec:	f816 9004 	ldrb.w	r9, [r6, r4]
 80021f0:	3401      	adds	r4, #1
 80021f2:	fb03 0012 	mls	r0, r3, r2, r0
 80021f6:	b280      	uxth	r0, r0
 80021f8:	4298      	cmp	r0, r3
 80021fa:	bf34      	ite	cc
 80021fc:	2000      	movcc	r0, #0
 80021fe:	2001      	movcs	r0, #1
 8002200:	f1b9 0f00 	cmp.w	r9, #0
 8002204:	bf08      	it	eq
 8002206:	2000      	moveq	r0, #0
 8002208:	b970      	cbnz	r0, 8002228 <BSP_LCD_DisplayStringAt+0x90>
}
 800220a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800220e:	1b34      	subs	r4, r6, r4
 8002210:	4420      	add	r0, r4
 8002212:	4358      	muls	r0, r3
 8002214:	eb05 0050 	add.w	r0, r5, r0, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002218:	b285      	uxth	r5, r0
      break;
 800221a:	e7dd      	b.n	80021d8 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800221c:	1b34      	subs	r4, r6, r4
 800221e:	4404      	add	r4, r0
 8002220:	fb14 f403 	smulbb	r4, r4, r3
 8002224:	1b60      	subs	r0, r4, r5
 8002226:	e7f7      	b.n	8002218 <BSP_LCD_DisplayStringAt+0x80>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002228:	4628      	mov	r0, r5
 800222a:	464a      	mov	r2, r9
 800222c:	4639      	mov	r1, r7
 800222e:	f7ff ff51 	bl	80020d4 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002232:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8002236:	4428      	add	r0, r5
 8002238:	b285      	uxth	r5, r0
    i++;
 800223a:	e7d2      	b.n	80021e2 <BSP_LCD_DisplayStringAt+0x4a>
 800223c:	200106ec 	.word	0x200106ec
 8002240:	200106f0 	.word	0x200106f0

08002244 <BSP_LCD_DisplayStringAtLine>:
{  
 8002244:	b513      	push	{r0, r1, r4, lr}
 8002246:	4604      	mov	r4, r0
 8002248:	9101      	str	r1, [sp, #4]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800224a:	f7ff fef9 	bl	8002040 <BSP_LCD_GetFont>
 800224e:	88c3      	ldrh	r3, [r0, #6]
 8002250:	9a01      	ldr	r2, [sp, #4]
 8002252:	2000      	movs	r0, #0
 8002254:	fb13 f104 	smulbb	r1, r3, r4
 8002258:	2303      	movs	r3, #3
 800225a:	b289      	uxth	r1, r1
}
 800225c:	b002      	add	sp, #8
 800225e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002262:	f7ff bf99 	b.w	8002198 <BSP_LCD_DisplayStringAt>
	...

08002268 <BSP_LCD_DisplayOn>:
{
 8002268:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800226c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002270:	4808      	ldr	r0, [pc, #32]	; (8002294 <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	6993      	ldr	r3, [r2, #24]
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800227c:	2201      	movs	r2, #1
 800227e:	f001 f889 	bl	8003394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002282:	2201      	movs	r2, #1
 8002284:	2108      	movs	r1, #8
 8002286:	4804      	ldr	r0, [pc, #16]	; (8002298 <BSP_LCD_DisplayOn+0x30>)
}
 8002288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800228c:	f001 b882 	b.w	8003394 <HAL_GPIO_WritePin>
 8002290:	20010748 	.word	0x20010748
 8002294:	40022000 	.word	0x40022000
 8002298:	40022800 	.word	0x40022800

0800229c <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 800229c:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800229e:	484c      	ldr	r0, [pc, #304]	; (80023d0 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80022a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 80022a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
{
 80022aa:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 80022ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80022ae:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80022b0:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80022b2:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 80022b4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80022b8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80022bc:	4e45      	ldr	r6, [pc, #276]	; (80023d4 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80022be:	9200      	str	r2, [sp, #0]
 80022c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80022c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022cc:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80022d0:	9201      	str	r2, [sp, #4]
 80022d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d6:	f042 0210 	orr.w	r2, r2, #16
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
 80022dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022de:	f002 0210 	and.w	r2, r2, #16
 80022e2:	9202      	str	r2, [sp, #8]
 80022e4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
 80022ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80022f4:	9203      	str	r2, [sp, #12]
 80022f6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80022f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002302:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002306:	9204      	str	r2, [sp, #16]
 8002308:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800230a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800230c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
 8002312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002314:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002318:	9205      	str	r2, [sp, #20]
 800231a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800231c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800231e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
 8002324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002326:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800232a:	9206      	str	r2, [sp, #24]
 800232c:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 800232e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
 8002336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002338:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800233c:	9207      	str	r2, [sp, #28]
 800233e:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002342:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800234a:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800234c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002350:	9308      	str	r3, [sp, #32]
 8002352:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002354:	2310      	movs	r3, #16
 8002356:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800235c:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002360:	f000 ff2e 	bl	80031c0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002364:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002366:	a909      	add	r1, sp, #36	; 0x24
 8002368:	481b      	ldr	r0, [pc, #108]	; (80023d8 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800236a:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800236c:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002370:	f000 ff26 	bl	80031c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002374:	f44f 4346 	mov.w	r3, #50688	; 0xc600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002378:	a909      	add	r1, sp, #36	; 0x24
 800237a:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800237c:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800237e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002382:	f000 ff1d 	bl	80031c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002386:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800238a:	a909      	add	r1, sp, #36	; 0x24
 800238c:	4813      	ldr	r0, [pc, #76]	; (80023dc <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800238e:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002390:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002394:	f000 ff14 	bl	80031c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002398:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800239a:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800239c:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800239e:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023a0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80023a4:	4c0e      	ldr	r4, [pc, #56]	; (80023e0 <BSP_LCD_MspInit+0x144>)
 80023a6:	4620      	mov	r0, r4
 80023a8:	f000 ff0a 	bl	80031c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80023ac:	a909      	add	r1, sp, #36	; 0x24
 80023ae:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80023b0:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80023b2:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80023b4:	f000 ff04 	bl	80031c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80023b8:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80023ba:	a909      	add	r1, sp, #36	; 0x24
 80023bc:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80023be:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80023c2:	f000 fefd 	bl	80031c0 <HAL_GPIO_Init>
}
 80023c6:	b00f      	add	sp, #60	; 0x3c
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40021800 	.word	0x40021800
 80023dc:	40022400 	.word	0x40022400
 80023e0:	40022800 	.word	0x40022800

080023e4 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <BSP_LCD_ClockConfig+0x18>)
 80023e6:	2308      	movs	r3, #8
 80023e8:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80023ea:	23c0      	movs	r3, #192	; 0xc0
 80023ec:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80023ee:	2305      	movs	r3, #5
 80023f0:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80023f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80023f8:	f001 bc9c 	b.w	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 80023fc:	200107f0 	.word	0x200107f0

08002400 <BSP_LCD_Init>:
{    
 8002400:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002402:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002404:	4c22      	ldr	r4, [pc, #136]	; (8002490 <BSP_LCD_Init+0x90>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002406:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002408:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800240a:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800240e:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002412:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002416:	230b      	movs	r3, #11
 8002418:	e9c4 1307 	strd	r1, r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800241c:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002420:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002422:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002426:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800242a:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800242c:	e9c4 3c0b 	strd	r3, ip, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002430:	f7ff ffd8 	bl	80023e4 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002434:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 8002438:	f44f 7388 	mov.w	r3, #272	; 0x110
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800243c:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800243e:	e9c4 e318 	strd	lr, r3, [r4, #96]	; 0x60
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002446:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800244a:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800244e:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hLtdcHandler.Instance = LTDC;
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <BSP_LCD_Init+0x94>)
 8002454:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002456:	f001 f978 	bl	800374a <HAL_LTDC_GetState>
 800245a:	4601      	mov	r1, r0
 800245c:	b910      	cbnz	r0, 8002464 <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800245e:	4620      	mov	r0, r4
 8002460:	f7ff ff1c 	bl	800229c <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8002464:	480a      	ldr	r0, [pc, #40]	; (8002490 <BSP_LCD_Init+0x90>)
 8002466:	f001 f821 	bl	80034ac <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800246a:	2201      	movs	r2, #1
 800246c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002470:	4809      	ldr	r0, [pc, #36]	; (8002498 <BSP_LCD_Init+0x98>)
 8002472:	f000 ff8f 	bl	8003394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002476:	2201      	movs	r2, #1
 8002478:	2108      	movs	r1, #8
 800247a:	4808      	ldr	r0, [pc, #32]	; (800249c <BSP_LCD_Init+0x9c>)
 800247c:	f000 ff8a 	bl	8003394 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8002480:	f000 fa5c 	bl	800293c <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002484:	4806      	ldr	r0, [pc, #24]	; (80024a0 <BSP_LCD_Init+0xa0>)
 8002486:	f7ff fdcf 	bl	8002028 <BSP_LCD_SetFont>
}
 800248a:	2000      	movs	r0, #0
 800248c:	bd10      	pop	{r4, pc}
 800248e:	bf00      	nop
 8002490:	20010748 	.word	0x20010748
 8002494:	40016800 	.word	0x40016800
 8002498:	40022000 	.word	0x40022000
 800249c:	40022800 	.word	0x40022800
 80024a0:	20000f44 	.word	0x20000f44

080024a4 <BSP_SD_IsDetected>:
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t      status = SD_PRESENT;
 80024a4:	2301      	movs	r3, #1
{
 80024a6:	b507      	push	{r0, r1, r2, lr}
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80024a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ac:	4807      	ldr	r0, [pc, #28]	; (80024cc <BSP_SD_IsDetected+0x28>)
  __IO uint8_t      status = SD_PRESENT;
 80024ae:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80024b2:	f000 ff69 	bl	8003388 <HAL_GPIO_ReadPin>
 80024b6:	2801      	cmp	r0, #1
 80024b8:	d102      	bne.n	80024c0 <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 80024c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80024c4:	b003      	add	sp, #12
 80024c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80024ca:	bf00      	nop
 80024cc:	40020800 	.word	0x40020800

080024d0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80024d0:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	460a      	mov	r2, r1
 80024d8:	4601      	mov	r1, r0
 80024da:	4804      	ldr	r0, [pc, #16]	; (80024ec <BSP_SD_ReadBlocks+0x1c>)
 80024dc:	f001 ff18 	bl	8004310 <HAL_SD_ReadBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 80024e0:	3800      	subs	r0, #0
 80024e2:	bf18      	it	ne
 80024e4:	2001      	movne	r0, #1
 80024e6:	b003      	add	sp, #12
 80024e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80024ec:	20010934 	.word	0x20010934

080024f0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80024f0:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	460a      	mov	r2, r1
 80024f8:	4601      	mov	r1, r0
 80024fa:	4804      	ldr	r0, [pc, #16]	; (800250c <BSP_SD_WriteBlocks+0x1c>)
 80024fc:	f002 f804 	bl	8004508 <HAL_SD_WriteBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8002500:	3800      	subs	r0, #0
 8002502:	bf18      	it	ne
 8002504:	2001      	movne	r0, #1
 8002506:	b003      	add	sp, #12
 8002508:	f85d fb04 	ldr.w	pc, [sp], #4
 800250c:	20010934 	.word	0x20010934

08002510 <BSP_SD_MspInit>:
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002510:	4b52      	ldr	r3, [pc, #328]	; (800265c <BSP_SD_MspInit+0x14c>)
 8002512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
{
 8002518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800251c:	645a      	str	r2, [r3, #68]	; 0x44
{
 800251e:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8002522:	2703      	movs	r7, #3
{
 8002524:	4605      	mov	r5, r0
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8002526:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800252a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800252e:	a905      	add	r1, sp, #20
 8002530:	484b      	ldr	r0, [pc, #300]	; (8002660 <BSP_SD_MspInit+0x150>)
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002532:	2600      	movs	r6, #0
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002534:	9201      	str	r2, [sp, #4]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8002536:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800253a:	9a01      	ldr	r2, [sp, #4]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 800253c:	f04f 0a20 	mov.w	sl, #32
  __DMAx_TxRx_CLK_ENABLE();
 8002540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002542:	f44f 3940 	mov.w	r9, #196608	; 0x30000
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8002546:	4c47      	ldr	r4, [pc, #284]	; (8002664 <BSP_SD_MspInit+0x154>)
  __DMAx_TxRx_CLK_ENABLE();
 8002548:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
 800254e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002550:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002554:	9202      	str	r2, [sp, #8]
 8002556:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255a:	f042 0204 	orr.w	r2, r2, #4
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
 8002560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002562:	f002 0204 	and.w	r2, r2, #4
 8002566:	9203      	str	r2, [sp, #12]
 8002568:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800256a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800256c:	f042 0208 	orr.w	r2, r2, #8
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002572:	2202      	movs	r2, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	9304      	str	r3, [sp, #16]
 800257c:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800257e:	2301      	movs	r3, #1
 8002580:	e9cd 2306 	strd	r2, r3, [sp, #24]
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8002584:	230c      	movs	r3, #12
 8002586:	e9cd 7308 	strd	r7, r3, [sp, #32]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800258a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800258e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002590:	f000 fe16 	bl	80031c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002594:	a905      	add	r1, sp, #20
 8002596:	4834      	ldr	r0, [pc, #208]	; (8002668 <BSP_SD_MspInit+0x158>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 8002598:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800259c:	f000 fe10 	bl	80031c0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	210e      	movs	r1, #14
 80025a4:	2031      	movs	r0, #49	; 0x31
 80025a6:	f000 fa73 	bl	8002a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80025aa:	2031      	movs	r0, #49	; 0x31
 80025ac:	f000 faa2 	bl	8002af4 <HAL_NVIC_EnableIRQ>
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80025b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80025bc:	482b      	ldr	r0, [pc, #172]	; (800266c <BSP_SD_MspInit+0x15c>)
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80025be:	642c      	str	r4, [r5, #64]	; 0x40
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80025c0:	6020      	str	r0, [r4, #0]
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 80025c2:	4620      	mov	r0, r4
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80025c4:	60e6      	str	r6, [r4, #12]
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80025c6:	62a7      	str	r7, [r4, #40]	; 0x28
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80025c8:	63a5      	str	r5, [r4, #56]	; 0x38
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025ca:	e9c4 2304 	strd	r2, r3, [r4, #16]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80025ce:	e9c4 1601 	strd	r1, r6, [r4, #4]
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80025d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025d6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 80025da:	e9c4 ba06 	strd	fp, sl, [r4, #24]
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80025de:	e9c4 130b 	strd	r1, r3, [r4, #44]	; 0x2c
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80025e2:	e9c4 9808 	strd	r9, r8, [r4, #32]
  HAL_DMA_DeInit(&dma_rx_handle);
 80025e6:	f000 fbd1 	bl	8002d8c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 80025ea:	4620      	mov	r0, r4
 80025ec:	f000 fb4e 	bl	8002c8c <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 80025f0:	4c1f      	ldr	r4, [pc, #124]	; (8002670 <BSP_SD_MspInit+0x160>)
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80025fa:	62a7      	str	r7, [r4, #40]	; 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80025fc:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8002606:	63ec      	str	r4, [r5, #60]	; 0x3c
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002608:	60e6      	str	r6, [r4, #12]
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 800260a:	63a5      	str	r5, [r4, #56]	; 0x38
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800260c:	e9c4 2304 	strd	r2, r3, [r4, #16]
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002610:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002614:	e9c4 730b 	strd	r7, r3, [r4, #44]	; 0x2c
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8002618:	4b16      	ldr	r3, [pc, #88]	; (8002674 <BSP_SD_MspInit+0x164>)
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800261a:	e9c4 0101 	strd	r0, r1, [r4, #4]
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 800261e:	4620      	mov	r0, r4
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8002620:	6023      	str	r3, [r4, #0]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8002622:	e9c4 ba06 	strd	fp, sl, [r4, #24]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8002626:	e9c4 9808 	strd	r9, r8, [r4, #32]
  HAL_DMA_DeInit(&dma_tx_handle);
 800262a:	f000 fbaf 	bl	8002d8c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 800262e:	4620      	mov	r0, r4
 8002630:	f000 fb2c 	bl	8002c8c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8002634:	4632      	mov	r2, r6
 8002636:	210f      	movs	r1, #15
 8002638:	203b      	movs	r0, #59	; 0x3b
 800263a:	f000 fa29 	bl	8002a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 800263e:	203b      	movs	r0, #59	; 0x3b
 8002640:	f000 fa58 	bl	8002af4 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8002644:	4632      	mov	r2, r6
 8002646:	210f      	movs	r1, #15
 8002648:	2045      	movs	r0, #69	; 0x45
 800264a:	f000 fa21 	bl	8002a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 800264e:	2045      	movs	r0, #69	; 0x45
 8002650:	f000 fa50 	bl	8002af4 <HAL_NVIC_EnableIRQ>
}
 8002654:	b00b      	add	sp, #44	; 0x2c
 8002656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40020800 	.word	0x40020800
 8002664:	20010874 	.word	0x20010874
 8002668:	40020c00 	.word	0x40020c00
 800266c:	40026458 	.word	0x40026458
 8002670:	200108d4 	.word	0x200108d4
 8002674:	400264a0 	.word	0x400264a0

08002678 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8002678:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <BSP_SD_Detect_MspInit+0x38>)

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800267c:	2101      	movs	r1, #1
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800267e:	480d      	ldr	r0, [pc, #52]	; (80026b4 <BSP_SD_Detect_MspInit+0x3c>)
  SD_DETECT_GPIO_CLK_ENABLE();
 8002680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002682:	f042 0204 	orr.w	r2, r2, #4
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002688:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  SD_DETECT_GPIO_CLK_ENABLE();
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002696:	2300      	movs	r3, #0
 8002698:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80026a2:	a901      	add	r1, sp, #4
 80026a4:	f000 fd8c 	bl	80031c0 <HAL_GPIO_Init>
}
 80026a8:	b007      	add	sp, #28
 80026aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020800 	.word	0x40020800

080026b8 <BSP_SD_Init>:
{ 
 80026b8:	b570      	push	{r4, r5, r6, lr}
  uSdHandle.Instance = SDMMC1;
 80026ba:	4c13      	ldr	r4, [pc, #76]	; (8002708 <BSP_SD_Init+0x50>)
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80026bc:	2600      	movs	r6, #0
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <BSP_SD_Init+0x54>)
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80026c0:	4631      	mov	r1, r6
 80026c2:	4620      	mov	r0, r4
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80026c4:	61a6      	str	r6, [r4, #24]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80026c6:	e9c4 3600 	strd	r3, r6, [r4]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80026ca:	e9c4 6602 	strd	r6, r6, [r4, #8]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80026ce:	e9c4 6604 	strd	r6, r6, [r4, #16]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80026d2:	f7ff ffd1 	bl	8002678 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 80026d6:	f7ff fee5 	bl	80024a4 <BSP_SD_IsDetected>
 80026da:	2801      	cmp	r0, #1
 80026dc:	4605      	mov	r5, r0
 80026de:	d111      	bne.n	8002704 <BSP_SD_Init+0x4c>
  BSP_SD_MspInit(&uSdHandle, NULL);
 80026e0:	4620      	mov	r0, r4
 80026e2:	4631      	mov	r1, r6
 80026e4:	f7ff ff14 	bl	8002510 <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 80026e8:	4620      	mov	r0, r4
 80026ea:	f002 f995 	bl	8004a18 <HAL_SD_Init>
 80026ee:	b938      	cbnz	r0, 8002700 <BSP_SD_Init+0x48>
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80026f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026f4:	4620      	mov	r0, r4
 80026f6:	f002 f9bd 	bl	8004a74 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 80026fa:	1b85      	subs	r5, r0, r6
 80026fc:	bf18      	it	ne
 80026fe:	2501      	movne	r5, #1
}
 8002700:	4628      	mov	r0, r5
 8002702:	bd70      	pop	{r4, r5, r6, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 8002704:	2502      	movs	r5, #2
 8002706:	e7fb      	b.n	8002700 <BSP_SD_Init+0x48>
 8002708:	20010934 	.word	0x20010934
 800270c:	40012c00 	.word	0x40012c00

08002710 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8002710:	b508      	push	{r3, lr}
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8002712:	4803      	ldr	r0, [pc, #12]	; (8002720 <BSP_SD_GetCardState+0x10>)
 8002714:	f002 fa38 	bl	8004b88 <HAL_SD_GetCardState>
}
 8002718:	3804      	subs	r0, #4
 800271a:	bf18      	it	ne
 800271c:	2001      	movne	r0, #1
 800271e:	bd08      	pop	{r3, pc}
 8002720:	20010934 	.word	0x20010934

08002724 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8002724:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8002726:	4801      	ldr	r0, [pc, #4]	; (800272c <BSP_SD_GetCardInfo+0x8>)
 8002728:	f002 b991 	b.w	8004a4e <HAL_SD_GetCardInfo>
 800272c:	20010934 	.word	0x20010934

08002730 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002734:	4c21      	ldr	r4, [pc, #132]	; (80027bc <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002736:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002738:	4d21      	ldr	r5, [pc, #132]	; (80027c0 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 800273a:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800273e:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002740:	4621      	mov	r1, r4
{
 8002742:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002748:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 800274a:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800274e:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8002752:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002756:	f002 fb6d 	bl	8004e34 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800275a:	4630      	mov	r0, r6
 800275c:	f000 f974 	bl	8002a48 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002760:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002762:	4621      	mov	r1, r4
 8002764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002768:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800276a:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800276e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002772:	f002 fb5f 	bl	8004e34 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002776:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002778:	4621      	mov	r1, r4
 800277a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800277e:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002780:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8002784:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8002786:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800278a:	f002 fb53 	bl	8004e34 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800278e:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002792:	4621      	mov	r1, r4
 8002794:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002798:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800279a:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800279c:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 800279e:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80027a0:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 80027a4:	9b01      	ldr	r3, [sp, #4]
 80027a6:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80027a8:	f002 fb44 	bl	8004e34 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80027ac:	4649      	mov	r1, r9
 80027ae:	4628      	mov	r0, r5
}
 80027b0:	b003      	add	sp, #12
 80027b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80027b6:	f002 bb5c 	b.w	8004e72 <HAL_SDRAM_ProgramRefreshRate>
 80027ba:	bf00      	nop
 80027bc:	200109b8 	.word	0x200109b8
 80027c0:	20010a44 	.word	0x20010a44

080027c4 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80027c4:	4b54      	ldr	r3, [pc, #336]	; (8002918 <BSP_SDRAM_MspInit+0x154>)
 80027c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c8:	f042 0201 	orr.w	r2, r2, #1
{  
 80027cc:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38
{  
 80027d0:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 80027d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 80027d4:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80027d6:	a909      	add	r1, sp, #36	; 0x24
 80027d8:	4850      	ldr	r0, [pc, #320]	; (800291c <BSP_SDRAM_MspInit+0x158>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80027da:	f002 0201 	and.w	r2, r2, #1
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80027de:	4c50      	ldr	r4, [pc, #320]	; (8002920 <BSP_SDRAM_MspInit+0x15c>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80027e0:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 80027e2:	9201      	str	r2, [sp, #4]
 80027e4:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 80027e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
 80027ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80027f4:	9202      	str	r2, [sp, #8]
 80027f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027fa:	f042 0204 	orr.w	r2, r2, #4
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002802:	f002 0204 	and.w	r2, r2, #4
 8002806:	9203      	str	r2, [sp, #12]
 8002808:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800280a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800280c:	f042 0208 	orr.w	r2, r2, #8
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
 8002812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002814:	f002 0208 	and.w	r2, r2, #8
 8002818:	9204      	str	r2, [sp, #16]
 800281a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800281c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281e:	f042 0210 	orr.w	r2, r2, #16
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
 8002824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002826:	f002 0210 	and.w	r2, r2, #16
 800282a:	9205      	str	r2, [sp, #20]
 800282c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800282e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002830:	f042 0220 	orr.w	r2, r2, #32
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
 8002836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002838:	f002 0220 	and.w	r2, r2, #32
 800283c:	9206      	str	r2, [sp, #24]
 800283e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
 8002848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800284e:	9207      	str	r2, [sp, #28]
 8002850:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002858:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800285a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002862:	9308      	str	r3, [sp, #32]
 8002864:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002866:	2302      	movs	r3, #2
 8002868:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800286c:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800286e:	230c      	movs	r3, #12
 8002870:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002872:	2308      	movs	r3, #8
 8002874:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002876:	f000 fca3 	bl	80031c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800287a:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800287e:	a909      	add	r1, sp, #36	; 0x24
 8002880:	4828      	ldr	r0, [pc, #160]	; (8002924 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002882:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002884:	f000 fc9c 	bl	80031c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002888:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800288c:	a909      	add	r1, sp, #36	; 0x24
 800288e:	4826      	ldr	r0, [pc, #152]	; (8002928 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002890:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002892:	f000 fc95 	bl	80031c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002896:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800289a:	a909      	add	r1, sp, #36	; 0x24
 800289c:	4823      	ldr	r0, [pc, #140]	; (800292c <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800289e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80028a0:	f000 fc8e 	bl	80031c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80028a4:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80028a8:	a909      	add	r1, sp, #36	; 0x24
 80028aa:	4821      	ldr	r0, [pc, #132]	; (8002930 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80028ac:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80028ae:	f000 fc87 	bl	80031c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80028b2:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80028b4:	a909      	add	r1, sp, #36	; 0x24
 80028b6:	481f      	ldr	r0, [pc, #124]	; (8002934 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80028b8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80028ba:	f000 fc81 	bl	80031c0 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80028be:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80028c0:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80028c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80028c8:	6325      	str	r5, [r4, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80028ca:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Mode                = DMA_NORMAL;
 80028cc:	61e5      	str	r5, [r4, #28]
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80028ce:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80028d0:	e9c4 5301 	strd	r5, r3, [r4, #4]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80028d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d8:	e9c4 1303 	strd	r1, r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80028dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028e0:	e9c4 0305 	strd	r0, r3, [r4, #20]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80028e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80028e8:	4620      	mov	r0, r4
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80028ea:	e9c4 3508 	strd	r3, r5, [r4, #32]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80028ee:	2303      	movs	r3, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80028f0:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <BSP_SDRAM_MspInit+0x174>)
 80028f6:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
 80028f8:	f000 fa48 	bl	8002d8c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80028fc:	4620      	mov	r0, r4
 80028fe:	f000 f9c5 	bl	8002c8c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002902:	462a      	mov	r2, r5
 8002904:	210f      	movs	r1, #15
 8002906:	2038      	movs	r0, #56	; 0x38
 8002908:	f000 f8c2 	bl	8002a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800290c:	2038      	movs	r0, #56	; 0x38
 800290e:	f000 f8f1 	bl	8002af4 <HAL_NVIC_EnableIRQ>
}
 8002912:	b00e      	add	sp, #56	; 0x38
 8002914:	bd70      	pop	{r4, r5, r6, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	40020800 	.word	0x40020800
 8002920:	200109e4 	.word	0x200109e4
 8002924:	40020c00 	.word	0x40020c00
 8002928:	40021000 	.word	0x40021000
 800292c:	40021400 	.word	0x40021400
 8002930:	40021800 	.word	0x40021800
 8002934:	40021c00 	.word	0x40021c00
 8002938:	40026410 	.word	0x40026410

0800293c <BSP_SDRAM_Init>:
{ 
 800293c:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800293e:	4c19      	ldr	r4, [pc, #100]	; (80029a4 <BSP_SDRAM_Init+0x68>)
  Timing.ExitSelfRefreshDelay = 7;
 8002940:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <BSP_SDRAM_Init+0x6c>)
  Timing.SelfRefreshTime      = 4;
 8002944:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8002946:	4d19      	ldr	r5, [pc, #100]	; (80029ac <BSP_SDRAM_Init+0x70>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002948:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800294c:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800294e:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002950:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 8002952:	61ab      	str	r3, [r5, #24]
  Timing.ExitSelfRefreshDelay = 7;
 8002954:	e9c5 3100 	strd	r3, r1, [r5]
  Timing.RowCycleDelay        = 7;
 8002958:	e9c5 2102 	strd	r2, r1, [r5, #8]
  Timing.RPDelay              = 2;
 800295c:	e9c5 3304 	strd	r3, r3, [r5, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002960:	2210      	movs	r2, #16
 8002962:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002964:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002966:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800296a:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800296e:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002970:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002978:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800297c:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800297e:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002982:	f7ff ff1f 	bl	80027c4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002986:	4629      	mov	r1, r5
 8002988:	4620      	mov	r0, r4
 800298a:	4c09      	ldr	r4, [pc, #36]	; (80029b0 <BSP_SDRAM_Init+0x74>)
 800298c:	f002 fa32 	bl	8004df4 <HAL_SDRAM_Init>
 8002990:	3800      	subs	r0, #0
 8002992:	bf18      	it	ne
 8002994:	2001      	movne	r0, #1
 8002996:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002998:	f240 6003 	movw	r0, #1539	; 0x603
 800299c:	f7ff fec8 	bl	8002730 <BSP_SDRAM_Initialization_sequence>
}
 80029a0:	7820      	ldrb	r0, [r4, #0]
 80029a2:	bd38      	pop	{r3, r4, r5, pc}
 80029a4:	20010a44 	.word	0x20010a44
 80029a8:	a0000140 	.word	0xa0000140
 80029ac:	200109c8 	.word	0x200109c8
 80029b0:	20000f4c 	.word	0x20000f4c

080029b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029b4:	490f      	ldr	r1, [pc, #60]	; (80029f4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029b6:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029b8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80029bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <SystemInit+0x44>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	f042 0201 	orr.w	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80029ce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80029d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029da:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80029dc:	4a07      	ldr	r2, [pc, #28]	; (80029fc <SystemInit+0x48>)
 80029de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029e6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80029e8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029ee:	608b      	str	r3, [r1, #8]
#endif
}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000ed00 	.word	0xe000ed00
 80029f8:	40023800 	.word	0x40023800
 80029fc:	24003010 	.word	0x24003010

08002a00 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a00:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a02:	2003      	movs	r0, #3
{
 8002a04:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a06:	6813      	ldr	r3, [r2, #0]
 8002a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a0e:	f000 f82d 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7fe fea2 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a18:	f7fe fcce 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	bd08      	pop	{r3, pc}
 8002a20:	40023c00 	.word	0x40023c00

08002a24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a24:	4a03      	ldr	r2, [pc, #12]	; (8002a34 <HAL_IncTick+0x10>)
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <HAL_IncTick+0x14>)
 8002a28:	6811      	ldr	r1, [r2, #0]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	440b      	add	r3, r1
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20010a78 	.word	0x20010a78
 8002a38:	20000f54 	.word	0x20000f54

08002a3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a3c:	4b01      	ldr	r3, [pc, #4]	; (8002a44 <HAL_GetTick+0x8>)
 8002a3e:	6818      	ldr	r0, [r3, #0]
}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20010a78 	.word	0x20010a78

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b538      	push	{r3, r4, r5, lr}
 8002a4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a4c:	f7ff fff6 	bl	8002a3c <HAL_GetTick>
 8002a50:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a52:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002a54:	bf1e      	ittt	ne
 8002a56:	4b04      	ldrne	r3, [pc, #16]	; (8002a68 <HAL_Delay+0x20>)
 8002a58:	781b      	ldrbne	r3, [r3, #0]
 8002a5a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a5c:	f7ff ffee 	bl	8002a3c <HAL_GetTick>
 8002a60:	1b43      	subs	r3, r0, r5
 8002a62:	42a3      	cmp	r3, r4
 8002a64:	d3fa      	bcc.n	8002a5c <HAL_Delay+0x14>
  {
  }
}
 8002a66:	bd38      	pop	{r3, r4, r5, pc}
 8002a68:	20000f54 	.word	0x20000f54

08002a6c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a6c:	4907      	ldr	r1, [pc, #28]	; (8002a8c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a6e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a70:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a7a:	0412      	lsls	r2, r2, #16
 8002a7c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002a88:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a92:	b530      	push	{r4, r5, lr}
 8002a94:	68dc      	ldr	r4, [r3, #12]
 8002a96:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a9a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa0:	2d04      	cmp	r5, #4
 8002aa2:	bf28      	it	cs
 8002aa4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa6:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aac:	bf8c      	ite	hi
 8002aae:	3c03      	subhi	r4, #3
 8002ab0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8002ab6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	fa01 f104 	lsl.w	r1, r1, r4
 8002ac8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002ad0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002ad2:	db06      	blt.n	8002ae2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002ad8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002adc:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ae0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	f000 000f 	and.w	r0, r0, #15
 8002ae6:	4a02      	ldr	r2, [pc, #8]	; (8002af0 <HAL_NVIC_SetPriority+0x60>)
 8002ae8:	5413      	strb	r3, [r2, r0]
 8002aea:	e7f9      	b.n	8002ae0 <HAL_NVIC_SetPriority+0x50>
 8002aec:	e000ed00 	.word	0xe000ed00
 8002af0:	e000ed14 	.word	0xe000ed14

08002af4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002af4:	2800      	cmp	r0, #0
 8002af6:	db08      	blt.n	8002b0a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af8:	0942      	lsrs	r2, r0, #5
 8002afa:	2301      	movs	r3, #1
 8002afc:	f000 001f 	and.w	r0, r0, #31
 8002b00:	fa03 f000 	lsl.w	r0, r3, r0
 8002b04:	4b01      	ldr	r3, [pc, #4]	; (8002b0c <HAL_NVIC_EnableIRQ+0x18>)
 8002b06:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002b10:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <HAL_MPU_Disable+0x18>)
 8002b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_MPU_Enable+0x1c>)
 8002b2e:	f040 0001 	orr.w	r0, r0, #1
 8002b32:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002b3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b42:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002b4c:	7843      	ldrb	r3, [r0, #1]
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_MPU_ConfigRegion+0x54>)
{
 8002b50:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8002b52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8002b56:	7801      	ldrb	r1, [r0, #0]
 8002b58:	b1e9      	cbz	r1, 8002b96 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002b5a:	6843      	ldr	r3, [r0, #4]
 8002b5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002b60:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b62:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002b64:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b66:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b6a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002b6c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b6e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002b72:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b74:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b78:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b7a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b7e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b84:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b86:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b8a:	7a01      	ldrb	r1, [r0, #8]
 8002b8c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b90:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002b94:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8002b96:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8002b9a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8002b9e:	e7f9      	b.n	8002b94 <HAL_MPU_ConfigRegion+0x48>
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ba4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	b908      	cbnz	r0, 8002bae <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8002bac:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002bae:	7f43      	ldrb	r3, [r0, #29]
 8002bb0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bb4:	b913      	cbnz	r3, 8002bbc <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8002bb6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8002bb8:	f7fe fc26 	bl	8001408 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002bc0:	7923      	ldrb	r3, [r4, #4]
 8002bc2:	b9e3      	cbnz	r3, 8002bfe <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <HAL_CRC_Init+0x70>)
 8002bc8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	f022 0218 	bic.w	r2, r2, #24
 8002bd0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002bd2:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002bd4:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002bd6:	b9d2      	cbnz	r2, 8002c0e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002bdc:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8002bde:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	6961      	ldr	r1, [r4, #20]
 8002be4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002be8:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002bea:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002bec:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8002bfc:	e7d6      	b.n	8002bac <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002bfe:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8002c02:	4620      	mov	r0, r4
 8002c04:	f000 f808 	bl	8002c18 <HAL_CRCEx_Polynomial_Set>
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	d0e2      	beq.n	8002bd2 <HAL_CRC_Init+0x2e>
 8002c0c:	e7cd      	b.n	8002baa <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002c0e:	6922      	ldr	r2, [r4, #16]
 8002c10:	e7e4      	b.n	8002bdc <HAL_CRC_Init+0x38>
 8002c12:	bf00      	nop
 8002c14:	04c11db7 	.word	0x04c11db7

08002c18 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002c18:	231f      	movs	r3, #31
{
 8002c1a:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	d31c      	bcc.n	8002c5a <HAL_CRCEx_Polynomial_Set+0x42>
 8002c20:	fa21 f403 	lsr.w	r4, r1, r3
 8002c24:	07e4      	lsls	r4, r4, #31
 8002c26:	d5f9      	bpl.n	8002c1c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8002c28:	2a10      	cmp	r2, #16
 8002c2a:	d012      	beq.n	8002c52 <HAL_CRCEx_Polynomial_Set+0x3a>
 8002c2c:	d804      	bhi.n	8002c38 <HAL_CRCEx_Polynomial_Set+0x20>
 8002c2e:	b13a      	cbz	r2, 8002c40 <HAL_CRCEx_Polynomial_Set+0x28>
 8002c30:	2a08      	cmp	r2, #8
 8002c32:	d010      	beq.n	8002c56 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8002c34:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8002c36:	e00b      	b.n	8002c50 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8002c38:	2a18      	cmp	r2, #24
 8002c3a:	d1fb      	bne.n	8002c34 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8002c3c:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8002c3e:	d8f9      	bhi.n	8002c34 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002c40:	6800      	ldr	r0, [r0, #0]
 8002c42:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002c44:	6883      	ldr	r3, [r0, #8]
 8002c46:	f023 0318 	bic.w	r3, r3, #24
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	6082      	str	r2, [r0, #8]
 8002c4e:	2000      	movs	r0, #0
}
 8002c50:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8002c52:	2b07      	cmp	r3, #7
 8002c54:	e7f3      	b.n	8002c3e <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8002c56:	2b0f      	cmp	r3, #15
 8002c58:	e7f1      	b.n	8002c3e <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8002c5a:	2a00      	cmp	r2, #0
 8002c5c:	d1ea      	bne.n	8002c34 <HAL_CRCEx_Polynomial_Set+0x1c>
 8002c5e:	e7ef      	b.n	8002c40 <HAL_CRCEx_Polynomial_Set+0x28>

08002c60 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c60:	6803      	ldr	r3, [r0, #0]
{
 8002c62:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c64:	2018      	movs	r0, #24
 8002c66:	b2d9      	uxtb	r1, r3
 8002c68:	3910      	subs	r1, #16
 8002c6a:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8002c6e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c70:	4c05      	ldr	r4, [pc, #20]	; (8002c88 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8002c72:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c74:	5c20      	ldrb	r0, [r4, r0]
 8002c76:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c78:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002c7c:	f020 0003 	bic.w	r0, r0, #3
 8002c80:	bf88      	it	hi
 8002c82:	3004      	addhi	r0, #4
 8002c84:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002c86:	bd10      	pop	{r4, pc}
 8002c88:	080f97d8 	.word	0x080f97d8

08002c8c <HAL_DMA_Init>:
{
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c90:	f7ff fed4 	bl	8002a3c <HAL_GetTick>
 8002c94:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002c96:	2c00      	cmp	r4, #0
 8002c98:	d073      	beq.n	8002d82 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c9a:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8002c9c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002ca8:	6813      	ldr	r3, [r2, #0]
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb0:	6821      	ldr	r1, [r4, #0]
 8002cb2:	680b      	ldr	r3, [r1, #0]
 8002cb4:	07d8      	lsls	r0, r3, #31
 8002cb6:	d42f      	bmi.n	8002d18 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8002cb8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cba:	4d33      	ldr	r5, [pc, #204]	; (8002d88 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cbc:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cbe:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	68e2      	ldr	r2, [r4, #12]
 8002cc8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cca:	6922      	ldr	r2, [r4, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	6962      	ldr	r2, [r4, #20]
 8002cd0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd2:	69e2      	ldr	r2, [r4, #28]
 8002cd4:	4303      	orrs	r3, r0
 8002cd6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd8:	6a22      	ldr	r2, [r4, #32]
 8002cda:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cdc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002cde:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ce4:	bf02      	ittt	eq
 8002ce6:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002cea:	4335      	orreq	r5, r6
 8002cec:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cee:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8002cf0:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002cf2:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cf4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002cf8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cfc:	d133      	bne.n	8002d66 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8002cfe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d00:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002d02:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d04:	b37d      	cbz	r5, 8002d66 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d06:	b990      	cbnz	r0, 8002d2e <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002d08:	2a01      	cmp	r2, #1
 8002d0a:	d021      	beq.n	8002d50 <HAL_DMA_Init+0xc4>
 8002d0c:	f032 0202 	bics.w	r2, r2, #2
 8002d10:	d129      	bne.n	8002d66 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d12:	01ea      	lsls	r2, r5, #7
 8002d14:	d527      	bpl.n	8002d66 <HAL_DMA_Init+0xda>
 8002d16:	e01e      	b.n	8002d56 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d18:	f7ff fe90 	bl	8002a3c <HAL_GetTick>
 8002d1c:	1b40      	subs	r0, r0, r5
 8002d1e:	2805      	cmp	r0, #5
 8002d20:	d9c6      	bls.n	8002cb0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d22:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d24:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d26:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002d28:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d2e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002d32:	d114      	bne.n	8002d5e <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002d34:	2a03      	cmp	r2, #3
 8002d36:	d816      	bhi.n	8002d66 <HAL_DMA_Init+0xda>
 8002d38:	a001      	add	r0, pc, #4	; (adr r0, 8002d40 <HAL_DMA_Init+0xb4>)
 8002d3a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d57 	.word	0x08002d57
 8002d44:	08002d13 	.word	0x08002d13
 8002d48:	08002d57 	.word	0x08002d57
 8002d4c:	08002d51 	.word	0x08002d51
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d50:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002d54:	d107      	bne.n	8002d66 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d56:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8002d58:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d5a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002d5c:	e7e4      	b.n	8002d28 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8002d5e:	2a02      	cmp	r2, #2
 8002d60:	d9f9      	bls.n	8002d56 <HAL_DMA_Init+0xca>
 8002d62:	2a03      	cmp	r2, #3
 8002d64:	d0d5      	beq.n	8002d12 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002d66:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7ff ff79 	bl	8002c60 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d70:	233f      	movs	r3, #63	; 0x3f
 8002d72:	4093      	lsls	r3, r2
 8002d74:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d76:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002d78:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002d7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002d80:	e7d4      	b.n	8002d2c <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8002d82:	2001      	movs	r0, #1
 8002d84:	e7d2      	b.n	8002d2c <HAL_DMA_Init+0xa0>
 8002d86:	bf00      	nop
 8002d88:	f010803f 	.word	0xf010803f

08002d8c <HAL_DMA_DeInit>:
{
 8002d8c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002d8e:	4605      	mov	r5, r0
 8002d90:	b320      	cbz	r0, 8002ddc <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002d92:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	b2dc      	uxtb	r4, r3
 8002d9a:	d01d      	beq.n	8002dd8 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002d9c:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8002d9e:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002da8:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8002daa:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002dac:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002dae:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002db0:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002db2:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002db4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002db6:	f7ff ff53 	bl	8002c60 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dba:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002dbc:	233f      	movs	r3, #63	; 0x3f
 8002dbe:	4093      	lsls	r3, r2
 8002dc0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc2:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8002dc4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8002dc8:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8002dcc:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002dd0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8002dd4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 8002dd8:	4620      	mov	r0, r4
 8002dda:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002ddc:	2401      	movs	r4, #1
 8002dde:	e7fb      	b.n	8002dd8 <HAL_DMA_DeInit+0x4c>

08002de0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d003      	beq.n	8002df0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002dec:	2001      	movs	r0, #1
 8002dee:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8002df0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002df2:	2305      	movs	r3, #5
 8002df4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8002df8:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002dfa:	6813      	ldr	r3, [r2, #0]
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6013      	str	r3, [r2, #0]
}
 8002e02:	4770      	bx	lr

08002e04 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002e04:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002e06:	6804      	ldr	r4, [r0, #0]
 8002e08:	9d04      	ldr	r5, [sp, #16]
 8002e0a:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002e0c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002e10:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8002e14:	4333      	orrs	r3, r6
 8002e16:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002e18:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002e1a:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002e1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e20:	d130      	bne.n	8002e84 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002e22:	6886      	ldr	r6, [r0, #8]
 8002e24:	b11e      	cbz	r6, 8002e2e <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002e26:	2e01      	cmp	r6, #1
 8002e28:	d103      	bne.n	8002e32 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002e2a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002e2e:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002e32:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002e34:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002e38:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002e3c:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002e3e:	d107      	bne.n	8002e50 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8002e40:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002e42:	0aa9      	lsrs	r1, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002e44:	02db      	lsls	r3, r3, #11
 8002e46:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8002e4a:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8002e4e:	e7ee      	b.n	8002e2e <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002e50:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002e52:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002e56:	d10a      	bne.n	8002e6e <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8002e58:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002e5a:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002e5c:	0289      	lsls	r1, r1, #10
      tmp1 = (tmp1 >> 31U);
 8002e5e:	0fd3      	lsrs	r3, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002e60:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002e64:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8002e68:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 8002e6c:	e7df      	b.n	8002e2e <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8002e6e:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002e70:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002e72:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8002e74:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002e76:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002e7a:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8002e7e:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8002e82:	e7d4      	b.n	8002e2e <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002e84:	60e1      	str	r1, [r4, #12]
}
 8002e86:	e7d3      	b.n	8002e30 <DMA2D_SetConfig+0x2c>

08002e88 <HAL_DMA2D_Init>:
{
 8002e88:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	b330      	cbz	r0, 8002edc <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002e8e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002e92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e96:	b91b      	cbnz	r3, 8002ea0 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8002e98:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002e9c:	f7fe faca 	bl	8001434 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ea0:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ea2:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ea4:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002ea6:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ea8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002eac:	6813      	ldr	r3, [r2, #0]
 8002eae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002eb2:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002eb4:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002eb6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002eb8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002eba:	f023 0307 	bic.w	r3, r3, #7
 8002ebe:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ec0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002ec2:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ec4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ec6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002eca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002ed2:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002ed4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002ed6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002eda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002edc:	2001      	movs	r0, #1
 8002ede:	e7fc      	b.n	8002eda <HAL_DMA2D_Init+0x52>

08002ee0 <HAL_DMA2D_Start>:
{
 8002ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8002ee2:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
 8002ee6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8002ee8:	2d01      	cmp	r5, #1
 8002eea:	f04f 0502 	mov.w	r5, #2
 8002eee:	d00f      	beq.n	8002f10 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ef0:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8002ef4:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002ef6:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8002ef8:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002efc:	9500      	str	r5, [sp, #0]
 8002efe:	f7ff ff81 	bl	8002e04 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002f02:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8002f04:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8002f06:	6813      	ldr	r3, [r2, #0]
 8002f08:	4333      	orrs	r3, r6
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8002f10:	4628      	mov	r0, r5
 8002f12:	e7fb      	b.n	8002f0c <HAL_DMA2D_Start+0x2c>

08002f14 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8002f14:	2300      	movs	r3, #0
{
 8002f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8002f18:	9301      	str	r3, [sp, #4]
{
 8002f1a:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002f1c:	6803      	ldr	r3, [r0, #0]
{
 8002f1e:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	07db      	lsls	r3, r3, #31
 8002f24:	d417      	bmi.n	8002f56 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002f26:	6822      	ldr	r2, [r4, #0]
 8002f28:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002f2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f2c:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002f2e:	069e      	lsls	r6, r3, #26
 8002f30:	d506      	bpl.n	8002f40 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8002f32:	f7ff fd83 	bl	8002a3c <HAL_GetTick>
 8002f36:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	06d2      	lsls	r2, r2, #27
 8002f3e:	d543      	bpl.n	8002fc8 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8002f44:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002f46:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f48:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8002f4a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002f52:	b002      	add	sp, #8
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002f56:	f7ff fd71 	bl	8002a3c <HAL_GetTick>
 8002f5a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	0792      	lsls	r2, r2, #30
 8002f62:	d4e0      	bmi.n	8002f26 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002f68:	9a01      	ldr	r2, [sp, #4]
 8002f6a:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002f6e:	d017      	beq.n	8002fa0 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f70:	9a01      	ldr	r2, [sp, #4]
 8002f72:	0695      	lsls	r5, r2, #26
 8002f74:	d503      	bpl.n	8002f7e <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f78:	f042 0202 	orr.w	r2, r2, #2
 8002f7c:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f7e:	9a01      	ldr	r2, [sp, #4]
 8002f80:	07d0      	lsls	r0, r2, #31
 8002f82:	d503      	bpl.n	8002f8c <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f8c:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f8e:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f90:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002f92:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002f9e:	e7d8      	b.n	8002f52 <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 8002fa0:	1c69      	adds	r1, r5, #1
 8002fa2:	d0dc      	beq.n	8002f5e <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fa4:	f7ff fd4a 	bl	8002a3c <HAL_GetTick>
 8002fa8:	1b80      	subs	r0, r0, r6
 8002faa:	42a8      	cmp	r0, r5
 8002fac:	d801      	bhi.n	8002fb2 <HAL_DMA2D_PollForTransfer+0x9e>
 8002fae:	2d00      	cmp	r5, #0
 8002fb0:	d1d4      	bne.n	8002f5c <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002fb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002fb4:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002fb6:	f043 0320 	orr.w	r3, r3, #32
 8002fba:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 8002fbc:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002fbe:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002fc2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002fc6:	e7c4      	b.n	8002f52 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002fcc:	9a01      	ldr	r2, [sp, #4]
 8002fce:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002fd2:	d016      	beq.n	8003002 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002fd4:	9a01      	ldr	r2, [sp, #4]
 8002fd6:	0716      	lsls	r6, r2, #28
 8002fd8:	d503      	bpl.n	8002fe2 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002fda:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002fdc:	f042 0204 	orr.w	r2, r2, #4
 8002fe0:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002fe2:	9a01      	ldr	r2, [sp, #4]
 8002fe4:	0695      	lsls	r5, r2, #26
 8002fe6:	d503      	bpl.n	8002ff0 <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002fe8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002fea:	f042 0202 	orr.w	r2, r2, #2
 8002fee:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ff0:	9a01      	ldr	r2, [sp, #4]
 8002ff2:	07d0      	lsls	r0, r2, #31
 8002ff4:	d503      	bpl.n	8002ffe <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ff6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ffe:	2229      	movs	r2, #41	; 0x29
 8003000:	e7c5      	b.n	8002f8e <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 8003002:	1c69      	adds	r1, r5, #1
 8003004:	d099      	beq.n	8002f3a <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7ff fd19 	bl	8002a3c <HAL_GetTick>
 800300a:	1b80      	subs	r0, r0, r6
 800300c:	42a8      	cmp	r0, r5
 800300e:	d8d0      	bhi.n	8002fb2 <HAL_DMA2D_PollForTransfer+0x9e>
 8003010:	2d00      	cmp	r5, #0
 8003012:	d191      	bne.n	8002f38 <HAL_DMA2D_PollForTransfer+0x24>
 8003014:	e7cd      	b.n	8002fb2 <HAL_DMA2D_PollForTransfer+0x9e>

08003016 <HAL_DMA2D_LineEventCallback>:
 8003016:	4770      	bx	lr

08003018 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8003018:	4770      	bx	lr

0800301a <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800301a:	6803      	ldr	r3, [r0, #0]
{
 800301c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800301e:	685e      	ldr	r6, [r3, #4]
{
 8003020:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003022:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003024:	07f2      	lsls	r2, r6, #31
 8003026:	d514      	bpl.n	8003052 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003028:	05e9      	lsls	r1, r5, #23
 800302a:	d512      	bpl.n	8003052 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003032:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003034:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800303c:	2201      	movs	r2, #1
 800303e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003040:	2304      	movs	r3, #4
 8003042:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003046:	2300      	movs	r3, #0
 8003048:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800304c:	6943      	ldr	r3, [r0, #20]
 800304e:	b103      	cbz	r3, 8003052 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8003050:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003052:	06b2      	lsls	r2, r6, #26
 8003054:	d516      	bpl.n	8003084 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003056:	04ab      	lsls	r3, r5, #18
 8003058:	d514      	bpl.n	8003084 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003062:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003064:	2220      	movs	r2, #32
 8003066:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003068:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800306a:	f043 0302 	orr.w	r3, r3, #2
 800306e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003070:	2304      	movs	r3, #4
 8003072:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003076:	2300      	movs	r3, #0
 8003078:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800307c:	6963      	ldr	r3, [r4, #20]
 800307e:	b10b      	cbz	r3, 8003084 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8003080:	4620      	mov	r0, r4
 8003082:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003084:	0730      	lsls	r0, r6, #28
 8003086:	d516      	bpl.n	80030b6 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003088:	0529      	lsls	r1, r5, #20
 800308a:	d514      	bpl.n	80030b6 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003094:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003096:	2208      	movs	r2, #8
 8003098:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800309a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030a2:	2304      	movs	r3, #4
 80030a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80030a8:	2300      	movs	r3, #0
 80030aa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80030ae:	6963      	ldr	r3, [r4, #20]
 80030b0:	b10b      	cbz	r3, 80030b6 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80030b2:	4620      	mov	r0, r4
 80030b4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80030b6:	0772      	lsls	r2, r6, #29
 80030b8:	d50b      	bpl.n	80030d2 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80030ba:	056b      	lsls	r3, r5, #21
 80030bc:	d509      	bpl.n	80030d2 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80030be:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80030c0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80030ca:	2204      	movs	r2, #4
 80030cc:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80030ce:	f7ff ffa2 	bl	8003016 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80030d2:	07b0      	lsls	r0, r6, #30
 80030d4:	d514      	bpl.n	8003100 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80030d6:	05a9      	lsls	r1, r5, #22
 80030d8:	d512      	bpl.n	8003100 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80030e4:	2202      	movs	r2, #2
 80030e6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80030e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030ea:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80030f2:	2300      	movs	r3, #0
 80030f4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 80030f8:	6923      	ldr	r3, [r4, #16]
 80030fa:	b10b      	cbz	r3, 8003100 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80030fc:	4620      	mov	r0, r4
 80030fe:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003100:	06f2      	lsls	r2, r6, #27
 8003102:	d513      	bpl.n	800312c <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003104:	04eb      	lsls	r3, r5, #19
 8003106:	d511      	bpl.n	800312c <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003108:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800310a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003112:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003114:	2210      	movs	r2, #16
 8003116:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003118:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800311a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800311c:	2301      	movs	r3, #1
 800311e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003122:	2300      	movs	r3, #0
 8003124:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003128:	f7ff ff76 	bl	8003018 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800312c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003130 <HAL_DMA2D_ConfigLayer>:
{
 8003130:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8003132:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003136:	2b01      	cmp	r3, #1
 8003138:	f04f 0302 	mov.w	r3, #2
 800313c:	d02b      	beq.n	8003196 <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800313e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8003142:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003144:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003148:	4f1c      	ldr	r7, [pc, #112]	; (80031bc <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 800314a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800314e:	010e      	lsls	r6, r1, #4
 8003150:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8003152:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8003156:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800315a:	3c09      	subs	r4, #9
 800315c:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800315e:	bf96      	itet	ls
 8003160:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003164:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003168:	431a      	orrls	r2, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800316a:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800316c:	b9a9      	cbnz	r1, 800319a <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800316e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003170:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003172:	ea01 0107 	and.w	r1, r1, r7
 8003176:	ea42 0201 	orr.w	r2, r2, r1
 800317a:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800317c:	6982      	ldr	r2, [r0, #24]
 800317e:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003180:	d803      	bhi.n	800318a <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003182:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003184:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800318a:	2301      	movs	r3, #1
 800318c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8003190:	2300      	movs	r3, #0
 8003192:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8003196:	4618      	mov	r0, r3
}
 8003198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800319a:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800319c:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800319e:	ea01 0107 	and.w	r1, r1, r7
 80031a2:	ea42 0201 	orr.w	r2, r2, r1
 80031a6:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80031a8:	eb00 0206 	add.w	r2, r0, r6
 80031ac:	6992      	ldr	r2, [r2, #24]
 80031ae:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031b0:	d8eb      	bhi.n	800318a <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80031b2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80031b6:	621d      	str	r5, [r3, #32]
 80031b8:	e7e7      	b.n	800318a <HAL_DMA2D_ConfigLayer+0x5a>
 80031ba:	bf00      	nop
 80031bc:	00fcfff0 	.word	0x00fcfff0

080031c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031c4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c6:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8003384 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ca:	4a6c      	ldr	r2, [pc, #432]	; (800337c <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 80031cc:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ce:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80031d0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80031d6:	43ac      	bics	r4, r5
 80031d8:	f040 80b6 	bne.w	8003348 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031dc:	684d      	ldr	r5, [r1, #4]
 80031de:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031e2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031e4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031e8:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ec:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031ee:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031f0:	2f01      	cmp	r7, #1
 80031f2:	d834      	bhi.n	800325e <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 80031f4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031f6:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80031fa:	68cf      	ldr	r7, [r1, #12]
 80031fc:	fa07 f708 	lsl.w	r7, r7, r8
 8003200:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003204:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003206:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003208:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800320c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8003210:	409f      	lsls	r7, r3
 8003212:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003216:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003218:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321a:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800321c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003220:	688f      	ldr	r7, [r1, #8]
 8003222:	fa07 f708 	lsl.w	r7, r7, r8
 8003226:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800322a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322c:	d119      	bne.n	8003262 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800322e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003232:	f003 0b07 	and.w	fp, r3, #7
 8003236:	f04f 0e0f 	mov.w	lr, #15
 800323a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800323e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8003242:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003246:	fa0e fe0b 	lsl.w	lr, lr, fp
 800324a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800324e:	690f      	ldr	r7, [r1, #16]
 8003250:	fa07 f70b 	lsl.w	r7, r7, fp
 8003254:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8003258:	f8ca 7020 	str.w	r7, [sl, #32]
 800325c:	e001      	b.n	8003262 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800325e:	2c03      	cmp	r4, #3
 8003260:	d1da      	bne.n	8003218 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8003262:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003264:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003268:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800326c:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003270:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8003274:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003276:	d067      	beq.n	8003348 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003278:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800327c:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003280:	f003 0703 	and.w	r7, r3, #3
 8003284:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003288:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800328c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003290:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003292:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8003296:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 800329a:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800329e:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 80032a2:	9401      	str	r4, [sp, #4]
 80032a4:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032a6:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80032aa:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032ae:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032b2:	4c33      	ldr	r4, [pc, #204]	; (8003380 <HAL_GPIO_Init+0x1c0>)
 80032b4:	42a0      	cmp	r0, r4
 80032b6:	d04e      	beq.n	8003356 <HAL_GPIO_Init+0x196>
 80032b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80032bc:	42a0      	cmp	r0, r4
 80032be:	d04c      	beq.n	800335a <HAL_GPIO_Init+0x19a>
 80032c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80032c4:	42a0      	cmp	r0, r4
 80032c6:	d04a      	beq.n	800335e <HAL_GPIO_Init+0x19e>
 80032c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80032cc:	42a0      	cmp	r0, r4
 80032ce:	d048      	beq.n	8003362 <HAL_GPIO_Init+0x1a2>
 80032d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80032d4:	42a0      	cmp	r0, r4
 80032d6:	d046      	beq.n	8003366 <HAL_GPIO_Init+0x1a6>
 80032d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d044      	beq.n	800336a <HAL_GPIO_Init+0x1aa>
 80032e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80032e4:	42a0      	cmp	r0, r4
 80032e6:	d042      	beq.n	800336e <HAL_GPIO_Init+0x1ae>
 80032e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80032ec:	42a0      	cmp	r0, r4
 80032ee:	d040      	beq.n	8003372 <HAL_GPIO_Init+0x1b2>
 80032f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80032f4:	42a0      	cmp	r0, r4
 80032f6:	d03e      	beq.n	8003376 <HAL_GPIO_Init+0x1b6>
 80032f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80032fc:	42a0      	cmp	r0, r4
 80032fe:	bf0c      	ite	eq
 8003300:	2409      	moveq	r4, #9
 8003302:	240a      	movne	r4, #10
 8003304:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003306:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003308:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800330c:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800330e:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8003312:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003314:	bf54      	ite	pl
 8003316:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003318:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800331c:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800331e:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8003320:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8003322:	bf54      	ite	pl
 8003324:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003326:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800332a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 800332c:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800332e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8003330:	bf54      	ite	pl
 8003332:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003334:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003338:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800333a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 800333c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800333e:	bf54      	ite	pl
 8003340:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003342:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8003346:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003348:	3301      	adds	r3, #1
 800334a:	2b10      	cmp	r3, #16
 800334c:	f47f af3e 	bne.w	80031cc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8003350:	b003      	add	sp, #12
 8003352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003356:	2400      	movs	r4, #0
 8003358:	e7d4      	b.n	8003304 <HAL_GPIO_Init+0x144>
 800335a:	2401      	movs	r4, #1
 800335c:	e7d2      	b.n	8003304 <HAL_GPIO_Init+0x144>
 800335e:	2402      	movs	r4, #2
 8003360:	e7d0      	b.n	8003304 <HAL_GPIO_Init+0x144>
 8003362:	2403      	movs	r4, #3
 8003364:	e7ce      	b.n	8003304 <HAL_GPIO_Init+0x144>
 8003366:	2404      	movs	r4, #4
 8003368:	e7cc      	b.n	8003304 <HAL_GPIO_Init+0x144>
 800336a:	2405      	movs	r4, #5
 800336c:	e7ca      	b.n	8003304 <HAL_GPIO_Init+0x144>
 800336e:	2406      	movs	r4, #6
 8003370:	e7c8      	b.n	8003304 <HAL_GPIO_Init+0x144>
 8003372:	2407      	movs	r4, #7
 8003374:	e7c6      	b.n	8003304 <HAL_GPIO_Init+0x144>
 8003376:	2408      	movs	r4, #8
 8003378:	e7c4      	b.n	8003304 <HAL_GPIO_Init+0x144>
 800337a:	bf00      	nop
 800337c:	40013c00 	.word	0x40013c00
 8003380:	40020000 	.word	0x40020000
 8003384:	40023800 	.word	0x40023800

08003388 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003388:	6903      	ldr	r3, [r0, #16]
 800338a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800338c:	bf14      	ite	ne
 800338e:	2001      	movne	r0, #1
 8003390:	2000      	moveq	r0, #0
 8003392:	4770      	bx	lr

08003394 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003394:	b10a      	cbz	r2, 800339a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003396:	6181      	str	r1, [r0, #24]
  }
}
 8003398:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800339a:	0409      	lsls	r1, r1, #16
 800339c:	e7fb      	b.n	8003396 <HAL_GPIO_WritePin+0x2>

0800339e <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800339e:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80033a0:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80033a2:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033a6:	3284      	adds	r2, #132	; 0x84
 80033a8:	1883      	adds	r3, r0, r2
{
 80033aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80033ae:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80033b0:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033b4:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80033b6:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80033ba:	684c      	ldr	r4, [r1, #4]
 80033bc:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033c0:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80033c4:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80033c8:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033ca:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80033cc:	68c5      	ldr	r5, [r0, #12]
 80033ce:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80033d2:	443d      	add	r5, r7
 80033d4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80033d8:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80033da:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80033dc:	68c5      	ldr	r5, [r0, #12]
 80033de:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80033e2:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80033e4:	689d      	ldr	r5, [r3, #8]
 80033e6:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80033ea:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80033ec:	688d      	ldr	r5, [r1, #8]
 80033ee:	68c7      	ldr	r7, [r0, #12]
 80033f0:	3501      	adds	r5, #1
 80033f2:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80033f6:	443d      	add	r5, r7
 80033f8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80033fc:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80033fe:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003400:	691d      	ldr	r5, [r3, #16]
 8003402:	f025 0507 	bic.w	r5, r5, #7
 8003406:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003408:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800340a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800340c:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003410:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003414:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003418:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800341c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003420:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003424:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8003428:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800342a:	695d      	ldr	r5, [r3, #20]
 800342c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003430:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003432:	694d      	ldr	r5, [r1, #20]
 8003434:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003436:	69dd      	ldr	r5, [r3, #28]
 8003438:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800343c:	f025 0507 	bic.w	r5, r5, #7
 8003440:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003442:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8003446:	433d      	orrs	r5, r7
 8003448:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800344a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800344c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800344e:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003452:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003454:	b31e      	cbz	r6, 800349e <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003456:	2e01      	cmp	r6, #1
 8003458:	d023      	beq.n	80034a2 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800345a:	1eb5      	subs	r5, r6, #2
 800345c:	2d02      	cmp	r5, #2
 800345e:	d922      	bls.n	80034a6 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003460:	2e07      	cmp	r6, #7
 8003462:	bf0c      	ite	eq
 8003464:	2502      	moveq	r5, #2
 8003466:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003468:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800346a:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800346e:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003472:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003474:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003476:	3403      	adds	r4, #3
 8003478:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800347a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800347c:	436e      	muls	r6, r5
 800347e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8003482:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003484:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003486:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800348a:	f024 0407 	bic.w	r4, r4, #7
 800348e:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003490:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003492:	5883      	ldr	r3, [r0, r2]
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	5083      	str	r3, [r0, r2]
}
 800349a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800349e:	2504      	movs	r5, #4
 80034a0:	e7e2      	b.n	8003468 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80034a2:	2503      	movs	r5, #3
 80034a4:	e7e0      	b.n	8003468 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80034a6:	2502      	movs	r5, #2
 80034a8:	e7de      	b.n	8003468 <LTDC_SetConfig+0xca>
	...

080034ac <HAL_LTDC_Init>:
{
 80034ac:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80034ae:	4604      	mov	r4, r0
 80034b0:	2800      	cmp	r0, #0
 80034b2:	d063      	beq.n	800357c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80034b4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80034b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034bc:	b91b      	cbnz	r3, 80034c6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80034be:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80034c2:	f7fd ffd7 	bl	8001474 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80034d4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034d6:	6999      	ldr	r1, [r3, #24]
 80034d8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80034dc:	4302      	orrs	r2, r0
 80034de:	68e0      	ldr	r0, [r4, #12]
 80034e0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034e2:	6920      	ldr	r0, [r4, #16]
 80034e4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80034e6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034e8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80034ea:	4925      	ldr	r1, [pc, #148]	; (8003580 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034ec:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	400a      	ands	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80034fa:	69a0      	ldr	r0, [r4, #24]
 80034fc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80034fe:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003500:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	400a      	ands	r2, r1
 8003506:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800350e:	6a20      	ldr	r0, [r4, #32]
 8003510:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003512:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003514:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	400a      	ands	r2, r1
 800351a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003522:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003524:	4302      	orrs	r2, r0
 8003526:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	4011      	ands	r1, r2
 800352c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800352e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003536:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003538:	430a      	orrs	r2, r1
 800353a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800353c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800353e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003542:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003546:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800354a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800354c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800354e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003552:	430a      	orrs	r2, r1
 8003554:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003558:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800355c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003562:	f042 0206 	orr.w	r2, r2, #6
 8003566:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003570:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003572:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003576:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800357a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800357c:	2001      	movs	r0, #1
 800357e:	e7fc      	b.n	800357a <HAL_LTDC_Init+0xce>
 8003580:	f000f800 	.word	0xf000f800

08003584 <HAL_LTDC_ErrorCallback>:
 8003584:	4770      	bx	lr

08003586 <HAL_LTDC_LineEventCallback>:
 8003586:	4770      	bx	lr

08003588 <HAL_LTDC_ReloadEventCallback>:
 8003588:	4770      	bx	lr

0800358a <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800358a:	6803      	ldr	r3, [r0, #0]
{
 800358c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800358e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8003590:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003592:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003594:	0772      	lsls	r2, r6, #29
 8003596:	d514      	bpl.n	80035c2 <HAL_LTDC_IRQHandler+0x38>
 8003598:	0769      	lsls	r1, r5, #29
 800359a:	d512      	bpl.n	80035c2 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800359c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800359e:	f022 0204 	bic.w	r2, r2, #4
 80035a2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80035a4:	2204      	movs	r2, #4
 80035a6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80035a8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80035b4:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80035b6:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80035ba:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80035be:	f7ff ffe1 	bl	8003584 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80035c2:	07b2      	lsls	r2, r6, #30
 80035c4:	d516      	bpl.n	80035f4 <HAL_LTDC_IRQHandler+0x6a>
 80035c6:	07ab      	lsls	r3, r5, #30
 80035c8:	d514      	bpl.n	80035f4 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80035ca:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80035cc:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80035ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d0:	f022 0202 	bic.w	r2, r2, #2
 80035d4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80035d6:	2202      	movs	r2, #2
 80035d8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80035da:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80035e4:	2304      	movs	r3, #4
 80035e6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80035ea:	2300      	movs	r3, #0
 80035ec:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80035f0:	f7ff ffc8 	bl	8003584 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80035f4:	07f0      	lsls	r0, r6, #31
 80035f6:	d510      	bpl.n	800361a <HAL_LTDC_IRQHandler+0x90>
 80035f8:	07e9      	lsls	r1, r5, #31
 80035fa:	d50e      	bpl.n	800361a <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80035fc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80035fe:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003608:	2201      	movs	r2, #1
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800360c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800360e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003612:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8003616:	f7ff ffb6 	bl	8003586 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800361a:	0732      	lsls	r2, r6, #28
 800361c:	d511      	bpl.n	8003642 <HAL_LTDC_IRQHandler+0xb8>
 800361e:	072b      	lsls	r3, r5, #28
 8003620:	d50f      	bpl.n	8003642 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003622:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003624:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003628:	f022 0208 	bic.w	r2, r2, #8
 800362c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800362e:	2208      	movs	r2, #8
 8003630:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003632:	2301      	movs	r3, #1
 8003634:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003638:	2300      	movs	r3, #0
 800363a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800363e:	f7ff ffa3 	bl	8003588 <HAL_LTDC_ReloadEventCallback>
}
 8003642:	bd70      	pop	{r4, r5, r6, pc}

08003644 <HAL_LTDC_ConfigLayer>:
{
 8003644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8003648:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800364c:	4606      	mov	r6, r0
 800364e:	460f      	mov	r7, r1
 8003650:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8003652:	2b01      	cmp	r3, #1
 8003654:	f04f 0002 	mov.w	r0, #2
 8003658:	d01f      	beq.n	800369a <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800365a:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800365c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003660:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003662:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003666:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800366a:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800366e:	3438      	adds	r4, #56	; 0x38
 8003670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800367a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800367c:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800367e:	4630      	mov	r0, r6
 8003680:	4662      	mov	r2, ip
 8003682:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003684:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003686:	f7ff fe8a 	bl	800339e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800368a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800368c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800368e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003692:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003696:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800369a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800369e <HAL_LTDC_SetWindowSize>:
{
 800369e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80036a0:	f890 50a0 	ldrb.w	r5, [r0, #160]	; 0xa0
{
 80036a4:	4604      	mov	r4, r0
 80036a6:	469e      	mov	lr, r3
  __HAL_LOCK(hltdc);
 80036a8:	2d01      	cmp	r5, #1
 80036aa:	f04f 0502 	mov.w	r5, #2
 80036ae:	d021      	beq.n	80036f4 <HAL_LTDC_SetWindowSize+0x56>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80036b0:	f880 50a1 	strb.w	r5, [r0, #161]	; 0xa1
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 80036b4:	2534      	movs	r5, #52	; 0x34
  __HAL_LOCK(hltdc);
 80036b6:	2701      	movs	r7, #1
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 80036b8:	435d      	muls	r5, r3
  __HAL_LOCK(hltdc);
 80036ba:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 80036be:	1946      	adds	r6, r0, r5
 80036c0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80036c2:	eb03 0c01 	add.w	ip, r3, r1
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 80036c6:	6c33      	ldr	r3, [r6, #64]	; 0x40
  pLayerCfg->ImageHeight = YSize;
 80036c8:	e9c6 1218 	strd	r1, r2, [r6, #96]	; 0x60
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 80036cc:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80036d0:	f105 0138 	add.w	r1, r5, #56	; 0x38
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 80036d4:	eb03 0c02 	add.w	ip, r3, r2
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80036d8:	4672      	mov	r2, lr
 80036da:	4401      	add	r1, r0
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 80036dc:	f8c6 c044 	str.w	ip, [r6, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80036e0:	f7ff fe5d 	bl	800339e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80036e4:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 80036e6:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80036e8:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80036ea:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80036ee:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80036f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 80036f4:	4628      	mov	r0, r5
 80036f6:	e7fc      	b.n	80036f2 <HAL_LTDC_SetWindowSize+0x54>

080036f8 <HAL_LTDC_SetWindowPosition>:
{
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80036fa:	f890 50a0 	ldrb.w	r5, [r0, #160]	; 0xa0
{
 80036fe:	4604      	mov	r4, r0
 8003700:	469c      	mov	ip, r3
  __HAL_LOCK(hltdc);
 8003702:	2d01      	cmp	r5, #1
 8003704:	f04f 0502 	mov.w	r5, #2
 8003708:	d01d      	beq.n	8003746 <HAL_LTDC_SetWindowPosition+0x4e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800370a:	f880 50a1 	strb.w	r5, [r0, #161]	; 0xa1
  pLayerCfg->WindowX0 = X0;
 800370e:	2534      	movs	r5, #52	; 0x34
  __HAL_LOCK(hltdc);
 8003710:	2701      	movs	r7, #1
  pLayerCfg->WindowX0 = X0;
 8003712:	435d      	muls	r5, r3
  __HAL_LOCK(hltdc);
 8003714:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->WindowX0 = X0;
 8003718:	1946      	adds	r6, r0, r5
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 800371a:	6e33      	ldr	r3, [r6, #96]	; 0x60
  pLayerCfg->WindowX0 = X0;
 800371c:	63b1      	str	r1, [r6, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 800371e:	4419      	add	r1, r3
  pLayerCfg->WindowY0 = Y0;
 8003720:	e9c6 120f 	strd	r1, r2, [r6, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8003724:	6e71      	ldr	r1, [r6, #100]	; 0x64
 8003726:	440a      	add	r2, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003728:	f105 0138 	add.w	r1, r5, #56	; 0x38
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 800372c:	6472      	str	r2, [r6, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800372e:	4401      	add	r1, r0
 8003730:	4662      	mov	r2, ip
 8003732:	f7ff fe34 	bl	800339e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003736:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8003738:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800373a:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800373c:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003740:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8003744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8003746:	4628      	mov	r0, r5
 8003748:	e7fc      	b.n	8003744 <HAL_LTDC_SetWindowPosition+0x4c>

0800374a <HAL_LTDC_GetState>:
  return hltdc->State;
 800374a:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 800374e:	4770      	bx	lr

08003750 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8003752:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003756:	4c19      	ldr	r4, [pc, #100]	; (80037bc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003758:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003770:	f7ff f964 	bl	8002a3c <HAL_GetTick>
 8003774:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003776:	6863      	ldr	r3, [r4, #4]
 8003778:	03da      	lsls	r2, r3, #15
 800377a:	d50c      	bpl.n	8003796 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800377c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800377e:	4d0f      	ldr	r5, [pc, #60]	; (80037bc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003786:	f7ff f959 	bl	8002a3c <HAL_GetTick>
 800378a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800378c:	686b      	ldr	r3, [r5, #4]
 800378e:	039b      	lsls	r3, r3, #14
 8003790:	d50a      	bpl.n	80037a8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003792:	2000      	movs	r0, #0
 8003794:	e006      	b.n	80037a4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003796:	f7ff f951 	bl	8002a3c <HAL_GetTick>
 800379a:	1b40      	subs	r0, r0, r5
 800379c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80037a0:	d9e9      	bls.n	8003776 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80037a2:	2003      	movs	r0, #3
}
 80037a4:	b003      	add	sp, #12
 80037a6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037a8:	f7ff f948 	bl	8002a3c <HAL_GetTick>
 80037ac:	1b00      	subs	r0, r0, r4
 80037ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80037b2:	d9eb      	bls.n	800378c <HAL_PWREx_EnableOverDrive+0x3c>
 80037b4:	e7f5      	b.n	80037a2 <HAL_PWREx_EnableOverDrive+0x52>
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40007000 	.word	0x40007000

080037c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037c4:	4604      	mov	r4, r0
 80037c6:	b340      	cbz	r0, 800381a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c8:	6803      	ldr	r3, [r0, #0]
 80037ca:	07db      	lsls	r3, r3, #31
 80037cc:	d410      	bmi.n	80037f0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	079f      	lsls	r7, r3, #30
 80037d2:	d464      	bmi.n	800389e <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	0719      	lsls	r1, r3, #28
 80037d8:	f100 80aa 	bmi.w	8003930 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	075a      	lsls	r2, r3, #29
 80037e0:	f100 80cb 	bmi.w	800397a <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e4:	69a2      	ldr	r2, [r4, #24]
 80037e6:	2a00      	cmp	r2, #0
 80037e8:	f040 8134 	bne.w	8003a54 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80037ec:	2000      	movs	r0, #0
 80037ee:	e02b      	b.n	8003848 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f0:	4b96      	ldr	r3, [pc, #600]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	f002 020c 	and.w	r2, r2, #12
 80037f8:	2a04      	cmp	r2, #4
 80037fa:	d007      	beq.n	800380c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	f002 020c 	and.w	r2, r2, #12
 8003802:	2a08      	cmp	r2, #8
 8003804:	d10b      	bne.n	800381e <HAL_RCC_OscConfig+0x5e>
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	0256      	lsls	r6, r2, #9
 800380a:	d508      	bpl.n	800381e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	4b8f      	ldr	r3, [pc, #572]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	039d      	lsls	r5, r3, #14
 8003812:	d5dc      	bpl.n	80037ce <HAL_RCC_OscConfig+0xe>
 8003814:	6863      	ldr	r3, [r4, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1d9      	bne.n	80037ce <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800381a:	2001      	movs	r0, #1
 800381c:	e014      	b.n	8003848 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381e:	6862      	ldr	r2, [r4, #4]
 8003820:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003824:	d113      	bne.n	800384e <HAL_RCC_OscConfig+0x8e>
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800382c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800382e:	f7ff f905 	bl	8002a3c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4e86      	ldr	r6, [pc, #536]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8003834:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	6833      	ldr	r3, [r6, #0]
 8003838:	0398      	lsls	r0, r3, #14
 800383a:	d4c8      	bmi.n	80037ce <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7ff f8fe 	bl	8002a3c <HAL_GetTick>
 8003840:	1b40      	subs	r0, r0, r5
 8003842:	2864      	cmp	r0, #100	; 0x64
 8003844:	d9f7      	bls.n	8003836 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8003846:	2003      	movs	r0, #3
}
 8003848:	b002      	add	sp, #8
 800384a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384e:	4d7f      	ldr	r5, [pc, #508]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	b992      	cbnz	r2, 800387a <HAL_RCC_OscConfig+0xba>
 8003854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003858:	602b      	str	r3, [r5, #0]
 800385a:	682b      	ldr	r3, [r5, #0]
 800385c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003860:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003862:	f7ff f8eb 	bl	8002a3c <HAL_GetTick>
 8003866:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003868:	682b      	ldr	r3, [r5, #0]
 800386a:	0399      	lsls	r1, r3, #14
 800386c:	d5af      	bpl.n	80037ce <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800386e:	f7ff f8e5 	bl	8002a3c <HAL_GetTick>
 8003872:	1b80      	subs	r0, r0, r6
 8003874:	2864      	cmp	r0, #100	; 0x64
 8003876:	d9f7      	bls.n	8003868 <HAL_RCC_OscConfig+0xa8>
 8003878:	e7e5      	b.n	8003846 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800387e:	d107      	bne.n	8003890 <HAL_RCC_OscConfig+0xd0>
 8003880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003884:	602b      	str	r3, [r5, #0]
 8003886:	682b      	ldr	r3, [r5, #0]
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	602b      	str	r3, [r5, #0]
 800388e:	e7ce      	b.n	800382e <HAL_RCC_OscConfig+0x6e>
 8003890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003894:	602b      	str	r3, [r5, #0]
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389c:	e7f6      	b.n	800388c <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800389e:	4b6b      	ldr	r3, [pc, #428]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	f012 0f0c 	tst.w	r2, #12
 80038a6:	d007      	beq.n	80038b8 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	f002 020c 	and.w	r2, r2, #12
 80038ae:	2a08      	cmp	r2, #8
 80038b0:	d111      	bne.n	80038d6 <HAL_RCC_OscConfig+0x116>
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	0252      	lsls	r2, r2, #9
 80038b6:	d40e      	bmi.n	80038d6 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b8:	4a64      	ldr	r2, [pc, #400]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
 80038ba:	6813      	ldr	r3, [r2, #0]
 80038bc:	079b      	lsls	r3, r3, #30
 80038be:	d502      	bpl.n	80038c6 <HAL_RCC_OscConfig+0x106>
 80038c0:	68e3      	ldr	r3, [r4, #12]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d1a9      	bne.n	800381a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c6:	6813      	ldr	r3, [r2, #0]
 80038c8:	6921      	ldr	r1, [r4, #16]
 80038ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80038d2:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d4:	e77e      	b.n	80037d4 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038d6:	68e2      	ldr	r2, [r4, #12]
 80038d8:	b1c2      	cbz	r2, 800390c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 80038da:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	4d5b      	ldr	r5, [pc, #364]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038e4:	f7ff f8aa 	bl	8002a3c <HAL_GetTick>
 80038e8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	682b      	ldr	r3, [r5, #0]
 80038ec:	079f      	lsls	r7, r3, #30
 80038ee:	d507      	bpl.n	8003900 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	6922      	ldr	r2, [r4, #16]
 80038f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80038fc:	602b      	str	r3, [r5, #0]
 80038fe:	e769      	b.n	80037d4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003900:	f7ff f89c 	bl	8002a3c <HAL_GetTick>
 8003904:	1b80      	subs	r0, r0, r6
 8003906:	2802      	cmp	r0, #2
 8003908:	d9ef      	bls.n	80038ea <HAL_RCC_OscConfig+0x12a>
 800390a:	e79c      	b.n	8003846 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800390c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390e:	4e4f      	ldr	r6, [pc, #316]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003916:	f7ff f891 	bl	8002a3c <HAL_GetTick>
 800391a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391c:	6833      	ldr	r3, [r6, #0]
 800391e:	0798      	lsls	r0, r3, #30
 8003920:	f57f af58 	bpl.w	80037d4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003924:	f7ff f88a 	bl	8002a3c <HAL_GetTick>
 8003928:	1b40      	subs	r0, r0, r5
 800392a:	2802      	cmp	r0, #2
 800392c:	d9f6      	bls.n	800391c <HAL_RCC_OscConfig+0x15c>
 800392e:	e78a      	b.n	8003846 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003930:	6963      	ldr	r3, [r4, #20]
 8003932:	4d46      	ldr	r5, [pc, #280]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
 8003934:	b183      	cbz	r3, 8003958 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8003936:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800393e:	f7ff f87d 	bl	8002a3c <HAL_GetTick>
 8003942:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003944:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003946:	079b      	lsls	r3, r3, #30
 8003948:	f53f af48 	bmi.w	80037dc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394c:	f7ff f876 	bl	8002a3c <HAL_GetTick>
 8003950:	1b80      	subs	r0, r0, r6
 8003952:	2802      	cmp	r0, #2
 8003954:	d9f6      	bls.n	8003944 <HAL_RCC_OscConfig+0x184>
 8003956:	e776      	b.n	8003846 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8003958:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003960:	f7ff f86c 	bl	8002a3c <HAL_GetTick>
 8003964:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003966:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003968:	079f      	lsls	r7, r3, #30
 800396a:	f57f af37 	bpl.w	80037dc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800396e:	f7ff f865 	bl	8002a3c <HAL_GetTick>
 8003972:	1b80      	subs	r0, r0, r6
 8003974:	2802      	cmp	r0, #2
 8003976:	d9f6      	bls.n	8003966 <HAL_RCC_OscConfig+0x1a6>
 8003978:	e765      	b.n	8003846 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397a:	4b34      	ldr	r3, [pc, #208]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
 800397c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397e:	00d0      	lsls	r0, r2, #3
 8003980:	d427      	bmi.n	80039d2 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8003984:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003986:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003996:	4d2e      	ldr	r5, [pc, #184]	; (8003a50 <HAL_RCC_OscConfig+0x290>)
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	05d9      	lsls	r1, r3, #23
 800399c:	d51b      	bpl.n	80039d6 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399e:	68a3      	ldr	r3, [r4, #8]
 80039a0:	4d2a      	ldr	r5, [pc, #168]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d127      	bne.n	80039f6 <HAL_RCC_OscConfig+0x236>
 80039a6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80039b2:	f7ff f843 	bl	8002a3c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b6:	4e25      	ldr	r6, [pc, #148]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80039b8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ba:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80039bc:	079b      	lsls	r3, r3, #30
 80039be:	d53f      	bpl.n	8003a40 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 80039c0:	2f00      	cmp	r7, #0
 80039c2:	f43f af0f 	beq.w	80037e4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c6:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <HAL_RCC_OscConfig+0x28c>)
 80039c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80039ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ce:	6413      	str	r3, [r2, #64]	; 0x40
 80039d0:	e708      	b.n	80037e4 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 80039d2:	2700      	movs	r7, #0
 80039d4:	e7df      	b.n	8003996 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 80039d6:	682b      	ldr	r3, [r5, #0]
 80039d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039dc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80039de:	f7ff f82d 	bl	8002a3c <HAL_GetTick>
 80039e2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	05da      	lsls	r2, r3, #23
 80039e8:	d4d9      	bmi.n	800399e <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ea:	f7ff f827 	bl	8002a3c <HAL_GetTick>
 80039ee:	1b80      	subs	r0, r0, r6
 80039f0:	2864      	cmp	r0, #100	; 0x64
 80039f2:	d9f7      	bls.n	80039e4 <HAL_RCC_OscConfig+0x224>
 80039f4:	e727      	b.n	8003846 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f6:	b9ab      	cbnz	r3, 8003a24 <HAL_RCC_OscConfig+0x264>
 80039f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	672b      	str	r3, [r5, #112]	; 0x70
 8003a04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a06:	f023 0304 	bic.w	r3, r3, #4
 8003a0a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003a0c:	f7ff f816 	bl	8002a3c <HAL_GetTick>
 8003a10:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a12:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a14:	0798      	lsls	r0, r3, #30
 8003a16:	d5d3      	bpl.n	80039c0 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a18:	f7ff f810 	bl	8002a3c <HAL_GetTick>
 8003a1c:	1b80      	subs	r0, r0, r6
 8003a1e:	4540      	cmp	r0, r8
 8003a20:	d9f7      	bls.n	8003a12 <HAL_RCC_OscConfig+0x252>
 8003a22:	e710      	b.n	8003846 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a28:	d103      	bne.n	8003a32 <HAL_RCC_OscConfig+0x272>
 8003a2a:	f043 0304 	orr.w	r3, r3, #4
 8003a2e:	672b      	str	r3, [r5, #112]	; 0x70
 8003a30:	e7b9      	b.n	80039a6 <HAL_RCC_OscConfig+0x1e6>
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	672b      	str	r3, [r5, #112]	; 0x70
 8003a38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a3a:	f023 0304 	bic.w	r3, r3, #4
 8003a3e:	e7b5      	b.n	80039ac <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fe fffc 	bl	8002a3c <HAL_GetTick>
 8003a44:	1b40      	subs	r0, r0, r5
 8003a46:	4540      	cmp	r0, r8
 8003a48:	d9b7      	bls.n	80039ba <HAL_RCC_OscConfig+0x1fa>
 8003a4a:	e6fc      	b.n	8003846 <HAL_RCC_OscConfig+0x86>
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a54:	4d38      	ldr	r5, [pc, #224]	; (8003b38 <HAL_RCC_OscConfig+0x378>)
 8003a56:	68ab      	ldr	r3, [r5, #8]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d041      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8003a60:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a62:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a68:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a6a:	d12e      	bne.n	8003aca <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8003a6c:	f7fe ffe6 	bl	8002a3c <HAL_GetTick>
 8003a70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	682b      	ldr	r3, [r5, #0]
 8003a74:	0199      	lsls	r1, r3, #6
 8003a76:	d422      	bmi.n	8003abe <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8003a82:	430b      	orrs	r3, r1
 8003a84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a8a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003a8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003a94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a98:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a9a:	682b      	ldr	r3, [r5, #0]
 8003a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003aa2:	f7fe ffcb 	bl	8002a3c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	4d24      	ldr	r5, [pc, #144]	; (8003b38 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8003aa8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aaa:	682b      	ldr	r3, [r5, #0]
 8003aac:	019a      	lsls	r2, r3, #6
 8003aae:	f53f ae9d 	bmi.w	80037ec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab2:	f7fe ffc3 	bl	8002a3c <HAL_GetTick>
 8003ab6:	1b00      	subs	r0, r0, r4
 8003ab8:	2802      	cmp	r0, #2
 8003aba:	d9f6      	bls.n	8003aaa <HAL_RCC_OscConfig+0x2ea>
 8003abc:	e6c3      	b.n	8003846 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abe:	f7fe ffbd 	bl	8002a3c <HAL_GetTick>
 8003ac2:	1b80      	subs	r0, r0, r6
 8003ac4:	2802      	cmp	r0, #2
 8003ac6:	d9d4      	bls.n	8003a72 <HAL_RCC_OscConfig+0x2b2>
 8003ac8:	e6bd      	b.n	8003846 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8003aca:	f7fe ffb7 	bl	8002a3c <HAL_GetTick>
 8003ace:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	019b      	lsls	r3, r3, #6
 8003ad4:	f57f ae8a 	bpl.w	80037ec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fe ffb0 	bl	8002a3c <HAL_GetTick>
 8003adc:	1b00      	subs	r0, r0, r4
 8003ade:	2802      	cmp	r0, #2
 8003ae0:	d9f6      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x310>
 8003ae2:	e6b0      	b.n	8003846 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae4:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8003ae6:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae8:	f43f ae97 	beq.w	800381a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af0:	69e1      	ldr	r1, [r4, #28]
 8003af2:	428a      	cmp	r2, r1
 8003af4:	f47f ae91 	bne.w	800381a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003af8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afc:	6a21      	ldr	r1, [r4, #32]
 8003afe:	428a      	cmp	r2, r1
 8003b00:	f47f ae8b 	bne.w	800381a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b04:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b08:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003b10:	f47f ae83 	bne.w	800381a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b16:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003b1a:	0852      	lsrs	r2, r2, #1
 8003b1c:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b1e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003b22:	f47f ae7a 	bne.w	800381a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b26:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003b2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b2c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003b30:	f43f ae5c 	beq.w	80037ec <HAL_RCC_OscConfig+0x2c>
 8003b34:	e671      	b.n	800381a <HAL_RCC_OscConfig+0x5a>
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800

08003b3c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b3c:	4913      	ldr	r1, [pc, #76]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003b3e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b40:	688b      	ldr	r3, [r1, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d01b      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x46>
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d11b      	bne.n	8003b86 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b4e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b50:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b52:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b54:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b58:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003b60:	bf1a      	itte	ne
 8003b62:	480b      	ldrne	r0, [pc, #44]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x54>)
 8003b64:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b66:	480b      	ldreq	r0, [pc, #44]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x58>)
 8003b68:	fba1 0100 	umull	r0, r1, r1, r0
 8003b6c:	f7fd f88c 	bl	8000c88 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x50>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003b78:	3301      	adds	r3, #1
 8003b7a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003b7c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003b80:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b82:	4803      	ldr	r0, [pc, #12]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x54>)
 8003b84:	e7fc      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8003b86:	4803      	ldr	r0, [pc, #12]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8003b88:	e7fa      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x44>
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	007a1200 	.word	0x007a1200
 8003b94:	00f42400 	.word	0x00f42400

08003b98 <HAL_RCC_ClockConfig>:
{
 8003b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	b910      	cbnz	r0, 8003ba8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003ba2:	2001      	movs	r0, #1
}
 8003ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4a46      	ldr	r2, [pc, #280]	; (8003cc4 <HAL_RCC_ClockConfig+0x12c>)
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	428b      	cmp	r3, r1
 8003bb2:	d328      	bcc.n	8003c06 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb4:	6822      	ldr	r2, [r4, #0]
 8003bb6:	0797      	lsls	r7, r2, #30
 8003bb8:	d430      	bmi.n	8003c1c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bba:	07d0      	lsls	r0, r2, #31
 8003bbc:	d444      	bmi.n	8003c48 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bbe:	4a41      	ldr	r2, [pc, #260]	; (8003cc4 <HAL_RCC_ClockConfig+0x12c>)
 8003bc0:	6813      	ldr	r3, [r2, #0]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	42ab      	cmp	r3, r5
 8003bc8:	d867      	bhi.n	8003c9a <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	0751      	lsls	r1, r2, #29
 8003bce:	d470      	bmi.n	8003cb2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd0:	0713      	lsls	r3, r2, #28
 8003bd2:	d507      	bpl.n	8003be4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bd4:	4a3c      	ldr	r2, [pc, #240]	; (8003cc8 <HAL_RCC_ClockConfig+0x130>)
 8003bd6:	6921      	ldr	r1, [r4, #16]
 8003bd8:	6893      	ldr	r3, [r2, #8]
 8003bda:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003bde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003be2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003be4:	f7ff ffaa 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8003be8:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <HAL_RCC_ClockConfig+0x130>)
 8003bea:	4a38      	ldr	r2, [pc, #224]	; (8003ccc <HAL_RCC_ClockConfig+0x134>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003bf2:	5cd3      	ldrb	r3, [r2, r3]
 8003bf4:	40d8      	lsrs	r0, r3
 8003bf6:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <HAL_RCC_ClockConfig+0x138>)
 8003bf8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003bfa:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <HAL_RCC_ClockConfig+0x13c>)
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	f7fd fdad 	bl	800175c <HAL_InitTick>
  return HAL_OK;
 8003c02:	2000      	movs	r0, #0
 8003c04:	e7ce      	b.n	8003ba4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	6813      	ldr	r3, [r2, #0]
 8003c08:	f023 030f 	bic.w	r3, r3, #15
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c10:	6813      	ldr	r3, [r2, #0]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	428b      	cmp	r3, r1
 8003c18:	d1c3      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xa>
 8003c1a:	e7cb      	b.n	8003bb4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	f012 0f04 	tst.w	r2, #4
 8003c20:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <HAL_RCC_ClockConfig+0x130>)
 8003c22:	d003      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c24:	6899      	ldr	r1, [r3, #8]
 8003c26:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8003c2a:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2c:	0716      	lsls	r6, r2, #28
 8003c2e:	d503      	bpl.n	8003c38 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c30:	6899      	ldr	r1, [r3, #8]
 8003c32:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8003c36:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4923      	ldr	r1, [pc, #140]	; (8003cc8 <HAL_RCC_ClockConfig+0x130>)
 8003c3a:	68a0      	ldr	r0, [r4, #8]
 8003c3c:	688b      	ldr	r3, [r1, #8]
 8003c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c42:	4303      	orrs	r3, r0
 8003c44:	608b      	str	r3, [r1, #8]
 8003c46:	e7b8      	b.n	8003bba <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c48:	6861      	ldr	r1, [r4, #4]
 8003c4a:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <HAL_RCC_ClockConfig+0x130>)
 8003c4c:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c50:	d11b      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	d0a4      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c58:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c5a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	4f1a      	ldr	r7, [pc, #104]	; (8003cc8 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c60:	f022 0203 	bic.w	r2, r2, #3
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003c68:	f7fe fee8 	bl	8002a3c <HAL_GetTick>
 8003c6c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	6862      	ldr	r2, [r4, #4]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003c7a:	d0a0      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7c:	f7fe fede 	bl	8002a3c <HAL_GetTick>
 8003c80:	1b80      	subs	r0, r0, r6
 8003c82:	4540      	cmp	r0, r8
 8003c84:	d9f3      	bls.n	8003c6e <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8003c86:	2003      	movs	r0, #3
 8003c88:	e78c      	b.n	8003ba4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c8a:	2902      	cmp	r1, #2
 8003c8c:	d102      	bne.n	8003c94 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003c92:	e7e0      	b.n	8003c56 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c94:	f012 0f02 	tst.w	r2, #2
 8003c98:	e7dd      	b.n	8003c56 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	6813      	ldr	r3, [r2, #0]
 8003c9c:	f023 030f 	bic.w	r3, r3, #15
 8003ca0:	432b      	orrs	r3, r5
 8003ca2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca4:	6813      	ldr	r3, [r2, #0]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	42ab      	cmp	r3, r5
 8003cac:	f47f af79 	bne.w	8003ba2 <HAL_RCC_ClockConfig+0xa>
 8003cb0:	e78b      	b.n	8003bca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb2:	4905      	ldr	r1, [pc, #20]	; (8003cc8 <HAL_RCC_ClockConfig+0x130>)
 8003cb4:	68e0      	ldr	r0, [r4, #12]
 8003cb6:	688b      	ldr	r3, [r1, #8]
 8003cb8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003cbc:	4303      	orrs	r3, r0
 8003cbe:	608b      	str	r3, [r1, #8]
 8003cc0:	e786      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x38>
 8003cc2:	bf00      	nop
 8003cc4:	40023c00 	.word	0x40023c00
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	080f97c0 	.word	0x080f97c0
 8003cd0:	20000f50 	.word	0x20000f50
 8003cd4:	20000f58 	.word	0x20000f58

08003cd8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd8:	4b04      	ldr	r3, [pc, #16]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x14>)
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003ce2:	5cd3      	ldrb	r3, [r2, r3]
 8003ce4:	4a03      	ldr	r2, [pc, #12]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003ce6:	6810      	ldr	r0, [r2, #0]
}
 8003ce8:	40d8      	lsrs	r0, r3
 8003cea:	4770      	bx	lr
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	080f97d0 	.word	0x080f97d0
 8003cf4:	20000f50 	.word	0x20000f50

08003cf8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cf8:	230f      	movs	r3, #15
 8003cfa:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_GetClockConfig+0x34>)
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	f002 0203 	and.w	r2, r2, #3
 8003d04:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003d0c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003d14:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	08db      	lsrs	r3, r3, #3
 8003d1a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003d1e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_RCC_GetClockConfig+0x38>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	600b      	str	r3, [r1, #0]
}
 8003d2a:	4770      	bx	lr
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40023c00 	.word	0x40023c00

08003d34 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d34:	6803      	ldr	r3, [r0, #0]
{
 8003d36:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d3a:	f013 0601 	ands.w	r6, r3, #1
{
 8003d3e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d40:	d00b      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d42:	4aaa      	ldr	r2, [pc, #680]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003d44:	6891      	ldr	r1, [r2, #8]
 8003d46:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003d4a:	6091      	str	r1, [r2, #8]
 8003d4c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8003d4e:	6891      	ldr	r1, [r2, #8]
 8003d50:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d52:	fab6 f686 	clz	r6, r6
 8003d56:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d58:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d5a:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8003d5e:	d012      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d60:	49a2      	ldr	r1, [pc, #648]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003d62:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003d64:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d68:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d6c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8003d70:	bf08      	it	eq
 8003d72:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d74:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d78:	bf16      	itet	ne
 8003d7a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8003d7e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d80:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d82:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d86:	02d8      	lsls	r0, r3, #11
 8003d88:	d510      	bpl.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d8a:	4898      	ldr	r0, [pc, #608]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003d8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003d8e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d92:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d96:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003d9a:	ea42 0201 	orr.w	r2, r2, r1
 8003d9e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003da2:	f000 8184 	beq.w	80040ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003da6:	2900      	cmp	r1, #0
 8003da8:	bf08      	it	eq
 8003daa:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8003dac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003db0:	bf18      	it	ne
 8003db2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003db4:	0699      	lsls	r1, r3, #26
 8003db6:	d531      	bpl.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003db8:	4b8c      	ldr	r3, [pc, #560]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dba:	4f8d      	ldr	r7, [pc, #564]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd6:	f7fe fe31 	bl	8002a3c <HAL_GetTick>
 8003dda:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	05da      	lsls	r2, r3, #23
 8003de0:	f140 8167 	bpl.w	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de4:	4f81      	ldr	r7, [pc, #516]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003de8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003dec:	f040 816c 	bne.w	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003df2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003df6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003dfa:	4a7c      	ldr	r2, [pc, #496]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003dfc:	f040 818a 	bne.w	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003e00:	6891      	ldr	r1, [r2, #8]
 8003e02:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003e06:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003e0a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003e0e:	4301      	orrs	r1, r0
 8003e10:	6091      	str	r1, [r2, #8]
 8003e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e16:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	06d9      	lsls	r1, r3, #27
 8003e20:	d50c      	bpl.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e22:	4a72      	ldr	r2, [pc, #456]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003e24:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003e28:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003e2c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003e30:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003e34:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e36:	4301      	orrs	r1, r0
 8003e38:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e3c:	045a      	lsls	r2, r3, #17
 8003e3e:	d508      	bpl.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e40:	496a      	ldr	r1, [pc, #424]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003e42:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003e44:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e48:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003e4c:	4302      	orrs	r2, r0
 8003e4e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e52:	041f      	lsls	r7, r3, #16
 8003e54:	d508      	bpl.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e56:	4965      	ldr	r1, [pc, #404]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003e58:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003e5a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e5e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003e62:	4302      	orrs	r2, r0
 8003e64:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e68:	03d8      	lsls	r0, r3, #15
 8003e6a:	d508      	bpl.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e6c:	495f      	ldr	r1, [pc, #380]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003e6e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003e70:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e74:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003e78:	4302      	orrs	r2, r0
 8003e7a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e7e:	0399      	lsls	r1, r3, #14
 8003e80:	d508      	bpl.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e82:	495a      	ldr	r1, [pc, #360]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003e84:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003e86:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e8a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003e8e:	4302      	orrs	r2, r0
 8003e90:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e94:	065a      	lsls	r2, r3, #25
 8003e96:	d508      	bpl.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e98:	4954      	ldr	r1, [pc, #336]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003e9a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003e9c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ea0:	f022 0203 	bic.w	r2, r2, #3
 8003ea4:	4302      	orrs	r2, r0
 8003ea6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eaa:	061f      	lsls	r7, r3, #24
 8003eac:	d508      	bpl.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eae:	494f      	ldr	r1, [pc, #316]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003eb0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003eb2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003eb6:	f022 020c 	bic.w	r2, r2, #12
 8003eba:	4302      	orrs	r2, r0
 8003ebc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ec0:	05d8      	lsls	r0, r3, #23
 8003ec2:	d508      	bpl.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ec4:	4949      	ldr	r1, [pc, #292]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003ec6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003ec8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ecc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003ed0:	4302      	orrs	r2, r0
 8003ed2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ed6:	0599      	lsls	r1, r3, #22
 8003ed8:	d508      	bpl.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eda:	4944      	ldr	r1, [pc, #272]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003edc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003ede:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ee2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003ee6:	4302      	orrs	r2, r0
 8003ee8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eec:	055a      	lsls	r2, r3, #21
 8003eee:	d508      	bpl.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ef0:	493e      	ldr	r1, [pc, #248]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003ef2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ef4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ef8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003efc:	4302      	orrs	r2, r0
 8003efe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f02:	051f      	lsls	r7, r3, #20
 8003f04:	d508      	bpl.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f06:	4939      	ldr	r1, [pc, #228]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f0a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f0e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f12:	4302      	orrs	r2, r0
 8003f14:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f18:	04d8      	lsls	r0, r3, #19
 8003f1a:	d508      	bpl.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f1c:	4933      	ldr	r1, [pc, #204]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003f1e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003f20:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f24:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003f28:	4302      	orrs	r2, r0
 8003f2a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f2e:	0499      	lsls	r1, r3, #18
 8003f30:	d508      	bpl.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f32:	492e      	ldr	r1, [pc, #184]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003f34:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003f36:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f3a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003f3e:	4302      	orrs	r2, r0
 8003f40:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f44:	025a      	lsls	r2, r3, #9
 8003f46:	d508      	bpl.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f48:	4928      	ldr	r1, [pc, #160]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003f4a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003f4c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f50:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003f54:	4302      	orrs	r2, r0
 8003f56:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f5a:	029f      	lsls	r7, r3, #10
 8003f5c:	d50c      	bpl.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f5e:	4823      	ldr	r0, [pc, #140]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003f60:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003f62:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003f66:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f6a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003f6e:	bf08      	it	eq
 8003f70:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f72:	430a      	orrs	r2, r1
 8003f74:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003f78:	f013 0f08 	tst.w	r3, #8
 8003f7c:	bf18      	it	ne
 8003f7e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f80:	0358      	lsls	r0, r3, #13
 8003f82:	d508      	bpl.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f84:	4919      	ldr	r1, [pc, #100]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003f86:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003f88:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f90:	4302      	orrs	r2, r0
 8003f92:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f96:	0219      	lsls	r1, r3, #8
 8003f98:	d509      	bpl.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f9a:	4914      	ldr	r1, [pc, #80]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003f9c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003fa0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003fa4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003fa8:	4302      	orrs	r2, r0
 8003faa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fae:	2e01      	cmp	r6, #1
 8003fb0:	f000 80b4 	beq.w	800411c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003fb4:	019a      	lsls	r2, r3, #6
 8003fb6:	f100 80b1 	bmi.w	800411c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fba:	2d01      	cmp	r5, #1
 8003fbc:	d175      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fbe:	4d0b      	ldr	r5, [pc, #44]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc8:	f7fe fd38 	bl	8002a3c <HAL_GetTick>
 8003fcc:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	009f      	lsls	r7, r3, #2
 8003fd2:	f100 8127 	bmi.w	8004224 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	0316      	lsls	r6, r2, #12
 8003fda:	d501      	bpl.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003fdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fde:	b14b      	cbz	r3, 8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003fe0:	02d0      	lsls	r0, r2, #11
 8003fe2:	d522      	bpl.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fe6:	bb03      	cbnz	r3, 800402a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8003fe8:	e004      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ff4:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ff8:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004000:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004004:	430b      	orrs	r3, r1
 8004006:	6961      	ldr	r1, [r4, #20]
 8004008:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800400c:	69a1      	ldr	r1, [r4, #24]
 800400e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004012:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004016:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800401a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800401c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004020:	3901      	subs	r1, #1
 8004022:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004026:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800402a:	0291      	lsls	r1, r2, #10
 800402c:	d515      	bpl.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x326>
 800402e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004034:	d111      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004036:	4982      	ldr	r1, [pc, #520]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004038:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800403c:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004040:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004044:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004048:	4303      	orrs	r3, r0
 800404a:	6960      	ldr	r0, [r4, #20]
 800404c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004050:	6a20      	ldr	r0, [r4, #32]
 8004052:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800405a:	0712      	lsls	r2, r2, #28
 800405c:	d519      	bpl.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800405e:	4a78      	ldr	r2, [pc, #480]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004060:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004064:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004068:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800406c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004070:	430b      	orrs	r3, r1
 8004072:	6961      	ldr	r1, [r4, #20]
 8004074:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004078:	69e1      	ldr	r1, [r4, #28]
 800407a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800407e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004082:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004086:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004088:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800408c:	430b      	orrs	r3, r1
 800408e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004092:	4c6b      	ldr	r4, [pc, #428]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800409c:	f7fe fcce 	bl	8002a3c <HAL_GetTick>
 80040a0:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	f140 80c4 	bpl.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80040aa:	2000      	movs	r0, #0
 80040ac:	e009      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 80040ae:	2601      	movs	r6, #1
 80040b0:	e67c      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b2:	f7fe fcc3 	bl	8002a3c <HAL_GetTick>
 80040b6:	eba0 0008 	sub.w	r0, r0, r8
 80040ba:	2864      	cmp	r0, #100	; 0x64
 80040bc:	f67f ae8e 	bls.w	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80040c0:	2003      	movs	r0, #3
}
 80040c2:	b003      	add	sp, #12
 80040c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040ca:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80040ce:	4293      	cmp	r3, r2
 80040d0:	f43f ae8e 	beq.w	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80040d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80040dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80040e0:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80040e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80040e8:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80040ea:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ee:	07db      	lsls	r3, r3, #31
 80040f0:	f57f ae7e 	bpl.w	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80040f4:	f7fe fca2 	bl	8002a3c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f8:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80040fc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004100:	0798      	lsls	r0, r3, #30
 8004102:	f53f ae75 	bmi.w	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004106:	f7fe fc99 	bl	8002a3c <HAL_GetTick>
 800410a:	eba0 0008 	sub.w	r0, r0, r8
 800410e:	4548      	cmp	r0, r9
 8004110:	d9f5      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8004112:	e7d5      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004114:	6891      	ldr	r1, [r2, #8]
 8004116:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800411a:	e679      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800411c:	4e48      	ldr	r6, [pc, #288]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800411e:	6833      	ldr	r3, [r6, #0]
 8004120:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004124:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004126:	f7fe fc89 	bl	8002a3c <HAL_GetTick>
 800412a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800412c:	6833      	ldr	r3, [r6, #0]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	d472      	bmi.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004132:	6822      	ldr	r2, [r4, #0]
 8004134:	07d7      	lsls	r7, r2, #31
 8004136:	d512      	bpl.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004138:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800413a:	b983      	cbnz	r3, 800415e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800413c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004140:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004148:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800414c:	430b      	orrs	r3, r1
 800414e:	6861      	ldr	r1, [r4, #4]
 8004150:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004154:	68a1      	ldr	r1, [r4, #8]
 8004156:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800415a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800415e:	0316      	lsls	r6, r2, #12
 8004160:	d503      	bpl.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004162:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004168:	d005      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800416a:	02d0      	lsls	r0, r2, #11
 800416c:	d51e      	bpl.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800416e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004174:	d11a      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004176:	4932      	ldr	r1, [pc, #200]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004178:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800417c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004184:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004188:	4303      	orrs	r3, r0
 800418a:	6860      	ldr	r0, [r4, #4]
 800418c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004190:	68e0      	ldr	r0, [r4, #12]
 8004192:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004196:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800419a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800419e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041a0:	f020 001f 	bic.w	r0, r0, #31
 80041a4:	3b01      	subs	r3, #1
 80041a6:	4303      	orrs	r3, r0
 80041a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041ac:	01d1      	lsls	r1, r2, #7
 80041ae:	d511      	bpl.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041b0:	4923      	ldr	r1, [pc, #140]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041b2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041b6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041ba:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80041be:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80041c2:	4303      	orrs	r3, r0
 80041c4:	6860      	ldr	r0, [r4, #4]
 80041c6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80041ca:	6920      	ldr	r0, [r4, #16]
 80041cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80041d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041d4:	0192      	lsls	r2, r2, #6
 80041d6:	d50d      	bpl.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041d8:	6923      	ldr	r3, [r4, #16]
 80041da:	6862      	ldr	r2, [r4, #4]
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80041e2:	68e2      	ldr	r2, [r4, #12]
 80041e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80041e8:	68a2      	ldr	r2, [r4, #8]
 80041ea:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80041ee:	4a14      	ldr	r2, [pc, #80]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80041f4:	4e12      	ldr	r6, [pc, #72]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041f6:	6833      	ldr	r3, [r6, #0]
 80041f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041fc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80041fe:	f7fe fc1d 	bl	8002a3c <HAL_GetTick>
 8004202:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004204:	6833      	ldr	r3, [r6, #0]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	f53f aed7 	bmi.w	8003fba <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800420c:	f7fe fc16 	bl	8002a3c <HAL_GetTick>
 8004210:	1bc0      	subs	r0, r0, r7
 8004212:	2864      	cmp	r0, #100	; 0x64
 8004214:	d9f6      	bls.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004216:	e753      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004218:	f7fe fc10 	bl	8002a3c <HAL_GetTick>
 800421c:	1bc0      	subs	r0, r0, r7
 800421e:	2864      	cmp	r0, #100	; 0x64
 8004220:	d984      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004222:	e74d      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004224:	f7fe fc0a 	bl	8002a3c <HAL_GetTick>
 8004228:	1b80      	subs	r0, r0, r6
 800422a:	2864      	cmp	r0, #100	; 0x64
 800422c:	f67f aecf 	bls.w	8003fce <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004230:	e746      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004232:	f7fe fc03 	bl	8002a3c <HAL_GetTick>
 8004236:	1b40      	subs	r0, r0, r5
 8004238:	2864      	cmp	r0, #100	; 0x64
 800423a:	f67f af32 	bls.w	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800423e:	e73f      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004240:	40023800 	.word	0x40023800

08004244 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004246:	4605      	mov	r5, r0
 8004248:	b089      	sub	sp, #36	; 0x24
 800424a:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800424c:	f7fe fbf6 	bl	8002a3c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8004250:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8004252:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004254:	2108      	movs	r1, #8
 8004256:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8004258:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800425c:	f001 f9fe 	bl	800565c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004260:	4604      	mov	r4, r0
 8004262:	b9d8      	cbnz	r0, 800429c <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004264:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8004266:	6828      	ldr	r0, [r5, #0]
 8004268:	0409      	lsls	r1, r1, #16
 800426a:	f001 faa1 	bl	80057b0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800426e:	4604      	mov	r4, r0
 8004270:	b9a0      	cbnz	r0, 800429c <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8004272:	f04f 32ff 	mov.w	r2, #4294967295
 8004276:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004278:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800427a:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800427c:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 800427e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004282:	2302      	movs	r3, #2
 8004284:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004288:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800428a:	a902      	add	r1, sp, #8
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800428c:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800428e:	f001 f91b 	bl	80054c8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004292:	6828      	ldr	r0, [r5, #0]
 8004294:	f001 fabc 	bl	8005810 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004298:	4604      	mov	r4, r0
 800429a:	b190      	cbz	r0, 80042c2 <SD_FindSCR+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800429c:	4620      	mov	r0, r4
 800429e:	b009      	add	sp, #36	; 0x24
 80042a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80042a2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80042a4:	0293      	lsls	r3, r2, #10
 80042a6:	d512      	bpl.n	80042ce <SD_FindSCR+0x8a>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80042a8:	f001 f8e8 	bl	800547c <SDMMC_ReadFIFO>
 80042ac:	ab08      	add	r3, sp, #32
 80042ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 80042b2:	3401      	adds	r4, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80042b4:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80042b8:	f7fe fbc0 	bl	8002a3c <HAL_GetTick>
 80042bc:	1bc0      	subs	r0, r0, r7
 80042be:	3001      	adds	r0, #1
 80042c0:	d023      	beq.n	800430a <SD_FindSCR+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80042c2:	6828      	ldr	r0, [r5, #0]
 80042c4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80042c6:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 80042ca:	d0ea      	beq.n	80042a2 <SD_FindSCR+0x5e>
 80042cc:	e002      	b.n	80042d4 <SD_FindSCR+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80042ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80042d0:	0491      	lsls	r1, r2, #18
 80042d2:	d4f1      	bmi.n	80042b8 <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80042d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80042d6:	0712      	lsls	r2, r2, #28
 80042d8:	d502      	bpl.n	80042e0 <SD_FindSCR+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80042da:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80042dc:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80042de:	e7dd      	b.n	800429c <SD_FindSCR+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80042e0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80042e2:	0793      	lsls	r3, r2, #30
 80042e4:	d501      	bpl.n	80042ea <SD_FindSCR+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80042e6:	2402      	movs	r4, #2
 80042e8:	e7f8      	b.n	80042dc <SD_FindSCR+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80042ea:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80042ec:	f014 0420 	ands.w	r4, r4, #32
 80042f0:	d001      	beq.n	80042f6 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80042f2:	2420      	movs	r4, #32
 80042f4:	e7f2      	b.n	80042dc <SD_FindSCR+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80042f6:	9b01      	ldr	r3, [sp, #4]
 80042f8:	f240 523a 	movw	r2, #1338	; 0x53a
 80042fc:	ba1b      	rev	r3, r3
 80042fe:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004300:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004302:	9b00      	ldr	r3, [sp, #0]
 8004304:	ba1b      	rev	r3, r3
 8004306:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8004308:	e7c8      	b.n	800429c <SD_FindSCR+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 800430a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800430e:	e7c5      	b.n	800429c <SD_FindSCR+0x58>

08004310 <HAL_SD_ReadBlocks>:
{
 8004310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004314:	460d      	mov	r5, r1
 8004316:	b087      	sub	sp, #28
 8004318:	4604      	mov	r4, r0
 800431a:	4616      	mov	r6, r2
 800431c:	469a      	mov	sl, r3
  uint32_t tickstart = HAL_GetTick();
 800431e:	f7fe fb8d 	bl	8002a3c <HAL_GetTick>
 8004322:	4680      	mov	r8, r0
  if(NULL == pData)
 8004324:	b92d      	cbnz	r5, 8004332 <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004326:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004328:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 800432c:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800432e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8004330:	e010      	b.n	8004354 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8004332:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004336:	2b01      	cmp	r3, #1
 8004338:	b2df      	uxtb	r7, r3
 800433a:	f040 80df 	bne.w	80044fc <HAL_SD_ReadBlocks+0x1ec>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800433e:	eb06 030a 	add.w	r3, r6, sl
 8004342:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004344:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004346:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004348:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800434a:	d907      	bls.n	800435c <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800434c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800434e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004352:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004354:	4638      	mov	r0, r7
 8004356:	b007      	add	sp, #28
 8004358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 800435c:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 800435e:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004360:	2200      	movs	r2, #0
 8004362:	f04f 0b01 	mov.w	fp, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8004366:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800436a:	f04f 0902 	mov.w	r9, #2
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800436e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8004370:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004372:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004374:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800437c:	ea4f 234a 	mov.w	r3, sl, lsl #9
      add *= 512U;
 8004380:	bf18      	it	ne
 8004382:	0276      	lslne	r6, r6, #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004384:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004386:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004388:	e9cd 2b04 	strd	r2, fp, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800438c:	e9cd 3902 	strd	r3, r9, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004390:	f001 f89a 	bl	80054c8 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8004394:	45da      	cmp	sl, fp
 8004396:	d912      	bls.n	80043be <HAL_SD_ReadBlocks+0xae>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004398:	4631      	mov	r1, r6
 800439a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800439c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80043a0:	f001 f98c 	bl	80056bc <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80043a4:	b190      	cbz	r0, 80043cc <HAL_SD_ReadBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	4a56      	ldr	r2, [pc, #344]	; (8004504 <HAL_SD_ReadBlocks+0x1f4>)
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80043ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043ae:	4318      	orrs	r0, r3
 80043b0:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 80043bc:	e7ca      	b.n	8004354 <HAL_SD_ReadBlocks+0x44>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80043be:	4631      	mov	r1, r6
 80043c0:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80043c2:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80043c6:	f001 f961 	bl	800568c <SDMMC_CmdReadSingleBlock>
 80043ca:	e7eb      	b.n	80043a4 <HAL_SD_ReadBlocks+0x94>
    dataremaining = config.DataLength;
 80043cc:	9e01      	ldr	r6, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80043ce:	6820      	ldr	r0, [r4, #0]
 80043d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043d2:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80043d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80043d8:	d017      	beq.n	800440a <HAL_SD_ReadBlocks+0xfa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80043da:	05db      	lsls	r3, r3, #23
 80043dc:	d509      	bpl.n	80043f2 <HAL_SD_ReadBlocks+0xe2>
 80043de:	f1ba 0f01 	cmp.w	sl, #1
 80043e2:	d906      	bls.n	80043f2 <HAL_SD_ReadBlocks+0xe2>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80043e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d003      	beq.n	80043f2 <HAL_SD_ReadBlocks+0xe2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043ea:	f001 f9af 	bl	800574c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d1d9      	bne.n	80043a6 <HAL_SD_ReadBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043f6:	f011 0108 	ands.w	r1, r1, #8
 80043fa:	d036      	beq.n	800446a <HAL_SD_ReadBlocks+0x15a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80043fc:	4a41      	ldr	r2, [pc, #260]	; (8004504 <HAL_SD_ReadBlocks+0x1f4>)
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004402:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004406:	63a3      	str	r3, [r4, #56]	; 0x38
 8004408:	e7d3      	b.n	80043b2 <HAL_SD_ReadBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800440a:	041a      	lsls	r2, r3, #16
 800440c:	d518      	bpl.n	8004440 <HAL_SD_ReadBlocks+0x130>
 800440e:	b1be      	cbz	r6, 8004440 <HAL_SD_ReadBlocks+0x130>
 8004410:	f105 0b04 	add.w	fp, r5, #4
 8004414:	f105 0924 	add.w	r9, r5, #36	; 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004418:	6820      	ldr	r0, [r4, #0]
        for(count = 0U; count < 8U; count++)
 800441a:	f10b 0b04 	add.w	fp, fp, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 800441e:	f001 f82d 	bl	800547c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004422:	f80b 0c08 	strb.w	r0, [fp, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004426:	0a02      	lsrs	r2, r0, #8
 8004428:	f80b 2c07 	strb.w	r2, [fp, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800442c:	0c02      	lsrs	r2, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800442e:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004430:	f80b 2c06 	strb.w	r2, [fp, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004434:	f80b 0c05 	strb.w	r0, [fp, #-5]
        for(count = 0U; count < 8U; count++)
 8004438:	45d9      	cmp	r9, fp
 800443a:	d1ed      	bne.n	8004418 <HAL_SD_ReadBlocks+0x108>
          tempbuff++;
 800443c:	3520      	adds	r5, #32
          dataremaining--;
 800443e:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004440:	f7fe fafc 	bl	8002a3c <HAL_GetTick>
 8004444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004446:	eba0 0008 	sub.w	r0, r0, r8
 800444a:	4298      	cmp	r0, r3
 800444c:	d3bf      	bcc.n	80043ce <HAL_SD_ReadBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800444e:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8004450:	2703      	movs	r7, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004452:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <HAL_SD_ReadBlocks+0x1f4>)
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800445c:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800445e:	2301      	movs	r3, #1
 8004460:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004464:	2300      	movs	r3, #0
 8004466:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8004468:	e774      	b.n	8004354 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800446a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800446c:	f012 0202 	ands.w	r2, r2, #2
 8004470:	d00a      	beq.n	8004488 <HAL_SD_ReadBlocks+0x178>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004472:	4a24      	ldr	r2, [pc, #144]	; (8004504 <HAL_SD_ReadBlocks+0x1f4>)
 8004474:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004476:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004478:	f043 0302 	orr.w	r3, r3, #2
 800447c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800447e:	2301      	movs	r3, #1
 8004480:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004484:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004486:	e765      	b.n	8004354 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004488:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800448a:	0689      	lsls	r1, r1, #26
 800448c:	d527      	bpl.n	80044de <HAL_SD_ReadBlocks+0x1ce>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800448e:	491d      	ldr	r1, [pc, #116]	; (8004504 <HAL_SD_ReadBlocks+0x1f4>)
 8004490:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004494:	f043 0320 	orr.w	r3, r3, #32
 8004498:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800449a:	2301      	movs	r3, #1
 800449c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044a0:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80044a2:	e757      	b.n	8004354 <HAL_SD_ReadBlocks+0x44>
      data = SDMMC_ReadFIFO(hsd->Instance);
 80044a4:	f000 ffea 	bl	800547c <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 80044a8:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80044ac:	0a03      	lsrs	r3, r0, #8
      dataremaining--;
 80044ae:	3e04      	subs	r6, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80044b0:	3504      	adds	r5, #4
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80044b2:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80044b6:	0c03      	lsrs	r3, r0, #16
 80044b8:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80044bc:	0e03      	lsrs	r3, r0, #24
 80044be:	f805 3c05 	strb.w	r3, [r5, #-5]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80044c2:	f7fe fabb 	bl	8002a3c <HAL_GetTick>
 80044c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80044c8:	eba0 0008 	sub.w	r0, r0, r8
 80044cc:	4298      	cmp	r0, r3
 80044ce:	d307      	bcc.n	80044e0 <HAL_SD_ReadBlocks+0x1d0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <HAL_SD_ReadBlocks+0x1f4>)
 80044d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80044d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044dc:	e793      	b.n	8004406 <HAL_SD_ReadBlocks+0xf6>
 80044de:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80044e0:	6820      	ldr	r0, [r4, #0]
 80044e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044e4:	029b      	lsls	r3, r3, #10
 80044e6:	d501      	bpl.n	80044ec <HAL_SD_ReadBlocks+0x1dc>
 80044e8:	2e00      	cmp	r6, #0
 80044ea:	d1db      	bne.n	80044a4 <HAL_SD_ReadBlocks+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80044ec:	f240 533a 	movw	r3, #1338	; 0x53a
    return HAL_OK;
 80044f0:	2700      	movs	r7, #0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80044f2:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80044fa:	e72b      	b.n	8004354 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80044fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004502:	e713      	b.n	800432c <HAL_SD_ReadBlocks+0x1c>
 8004504:	004005ff 	.word	0x004005ff

08004508 <HAL_SD_WriteBlocks>:
{
 8004508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	460d      	mov	r5, r1
 800450e:	b089      	sub	sp, #36	; 0x24
 8004510:	4604      	mov	r4, r0
 8004512:	4692      	mov	sl, r2
 8004514:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8004516:	f7fe fa91 	bl	8002a3c <HAL_GetTick>
 800451a:	4681      	mov	r9, r0
  if(NULL == pData)
 800451c:	b935      	cbnz	r5, 800452c <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800451e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004520:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 8004524:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004528:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800452a:	e011      	b.n	8004550 <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 800452c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004530:	2b01      	cmp	r3, #1
 8004532:	fa5f f883 	uxtb.w	r8, r3
 8004536:	f040 80ac 	bne.w	8004692 <HAL_SD_WriteBlocks+0x18a>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800453a:	eb0a 0307 	add.w	r3, sl, r7
 800453e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004540:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004542:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004544:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004546:	d907      	bls.n	8004558 <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004548:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800454a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800454e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004550:	4640      	mov	r0, r8
 8004552:	b009      	add	sp, #36	; 0x24
 8004554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8004558:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 800455a:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800455c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004560:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8004562:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004564:	2190      	movs	r1, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004566:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004568:	f04f 33ff 	mov.w	r3, #4294967295
 800456c:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800456e:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 8004572:	bf18      	it	ne
 8004574:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004578:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800457a:	2300      	movs	r3, #0
 800457c:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004580:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004582:	2301      	movs	r3, #1
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004584:	a902      	add	r1, sp, #8
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004586:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004588:	f000 ff9e 	bl	80054c8 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 800458c:	2f01      	cmp	r7, #1
 800458e:	d912      	bls.n	80045b6 <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004590:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004592:	4651      	mov	r1, sl
 8004594:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004596:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004598:	f001 f8c0 	bl	800571c <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800459c:	b190      	cbz	r0, 80045c4 <HAL_SD_WriteBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	4a3e      	ldr	r2, [pc, #248]	; (800469c <HAL_SD_WriteBlocks+0x194>)
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80045a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045a6:	4318      	orrs	r0, r3
 80045a8:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80045b4:	e7cc      	b.n	8004550 <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80045b6:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80045b8:	4651      	mov	r1, sl
 80045ba:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80045bc:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80045be:	f001 f895 	bl	80056ec <SDMMC_CmdWriteSingleBlock>
 80045c2:	e7eb      	b.n	800459c <HAL_SD_WriteBlocks+0x94>
    dataremaining = config.DataLength;
 80045c4:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80045c6:	6820      	ldr	r0, [r4, #0]
 80045c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80045ca:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80045ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80045d0:	d016      	beq.n	8004600 <HAL_SD_WriteBlocks+0xf8>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80045d2:	05db      	lsls	r3, r3, #23
 80045d4:	d508      	bpl.n	80045e8 <HAL_SD_WriteBlocks+0xe0>
 80045d6:	2f01      	cmp	r7, #1
 80045d8:	d906      	bls.n	80045e8 <HAL_SD_WriteBlocks+0xe0>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80045da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d003      	beq.n	80045e8 <HAL_SD_WriteBlocks+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80045e0:	f001 f8b4 	bl	800574c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d1da      	bne.n	800459e <HAL_SD_WriteBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80045ec:	f010 0008 	ands.w	r0, r0, #8
 80045f0:	d029      	beq.n	8004646 <HAL_SD_WriteBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80045f2:	4a2a      	ldr	r2, [pc, #168]	; (800469c <HAL_SD_WriteBlocks+0x194>)
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80045f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045f8:	f043 0308 	orr.w	r3, r3, #8
 80045fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80045fe:	e7d4      	b.n	80045aa <HAL_SD_WriteBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004600:	045a      	lsls	r2, r3, #17
 8004602:	d50c      	bpl.n	800461e <HAL_SD_WriteBlocks+0x116>
 8004604:	b15e      	cbz	r6, 800461e <HAL_SD_WriteBlocks+0x116>
 8004606:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 800460a:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800460e:	a901      	add	r1, sp, #4
 8004610:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004612:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004614:	f000 ff35 	bl	8005482 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004618:	45ab      	cmp	fp, r5
 800461a:	d1f6      	bne.n	800460a <HAL_SD_WriteBlocks+0x102>
          dataremaining--;
 800461c:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800461e:	f7fe fa0d 	bl	8002a3c <HAL_GetTick>
 8004622:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004624:	eba0 0009 	sub.w	r0, r0, r9
 8004628:	4298      	cmp	r0, r3
 800462a:	d3cc      	bcc.n	80045c6 <HAL_SD_WriteBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800462c:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800462e:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004632:	4a1a      	ldr	r2, [pc, #104]	; (800469c <HAL_SD_WriteBlocks+0x194>)
 8004634:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004636:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004638:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800463a:	2301      	movs	r3, #1
 800463c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004640:	2300      	movs	r3, #0
 8004642:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8004644:	e784      	b.n	8004550 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004646:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004648:	f011 0102 	ands.w	r1, r1, #2
 800464c:	d00a      	beq.n	8004664 <HAL_SD_WriteBlocks+0x15c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800464e:	4a13      	ldr	r2, [pc, #76]	; (800469c <HAL_SD_WriteBlocks+0x194>)
 8004650:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004652:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004654:	f043 0302 	orr.w	r3, r3, #2
 8004658:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800465a:	2301      	movs	r3, #1
 800465c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004660:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004662:	e775      	b.n	8004550 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8004664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004666:	f012 0210 	ands.w	r2, r2, #16
 800466a:	d00a      	beq.n	8004682 <HAL_SD_WriteBlocks+0x17a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800466c:	4a0b      	ldr	r2, [pc, #44]	; (800469c <HAL_SD_WriteBlocks+0x194>)
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004672:	f043 0310 	orr.w	r3, r3, #16
 8004676:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004678:	2301      	movs	r3, #1
 800467a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800467e:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004680:	e766      	b.n	8004550 <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004682:	f240 513a 	movw	r1, #1338	; 0x53a
    return HAL_OK;
 8004686:	4690      	mov	r8, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004688:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800468a:	2301      	movs	r3, #1
 800468c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8004690:	e75e      	b.n	8004550 <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004692:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004698:	e744      	b.n	8004524 <HAL_SD_WriteBlocks+0x1c>
 800469a:	bf00      	nop
 800469c:	004005ff 	.word	0x004005ff

080046a0 <HAL_SD_ErrorCallback>:
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80046a4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80046a6:	0f9a      	lsrs	r2, r3, #30
 80046a8:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80046aa:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80046ae:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80046b0:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80046b4:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80046b6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80046ba:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80046bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80046c0:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80046c2:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80046c4:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80046c6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80046c8:	0d1a      	lsrs	r2, r3, #20
 80046ca:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80046cc:	f3c3 4203 	ubfx	r2, r3, #16, #4
 80046d0:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80046d2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80046d6:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80046d8:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80046dc:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80046de:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80046e2:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80046e4:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80046e8:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80046ea:	2200      	movs	r2, #0
 80046ec:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80046ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 80046f0:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 80046f2:	2a00      	cmp	r2, #0
 80046f4:	d16c      	bne.n	80047d0 <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80046f6:	f640 74fc 	movw	r4, #4092	; 0xffc
 80046fa:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80046fc:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8004700:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8004704:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004706:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800470a:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800470c:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8004710:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004712:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8004716:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004718:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800471c:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004720:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004722:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004724:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004726:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004728:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800472a:	f002 0207 	and.w	r2, r2, #7
 800472e:	3202      	adds	r2, #2
 8004730:	fa03 f202 	lsl.w	r2, r3, r2
 8004734:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004736:	7a0b      	ldrb	r3, [r1, #8]
 8004738:	f003 040f 	and.w	r4, r3, #15
 800473c:	2301      	movs	r3, #1
 800473e:	40a3      	lsls	r3, r4
 8004740:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004742:	0a5b      	lsrs	r3, r3, #9
 8004744:	4353      	muls	r3, r2
 8004746:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004748:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800474c:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800474e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004750:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8004754:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004756:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800475a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800475e:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004760:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004762:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->Reserved3 = 0;
 8004764:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004766:	0fda      	lsrs	r2, r3, #31
 8004768:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800476a:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800476e:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004770:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8004774:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004776:	f3c3 5283 	ubfx	r2, r3, #22, #4
 800477a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800477c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8004780:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004784:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8004788:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800478c:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004790:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8004794:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004798:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800479c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80047a0:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80047a4:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80047a8:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80047ac:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80047b0:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80047b4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80047b8:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80047bc:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80047c0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80047c4:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80047ce:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80047d0:	2a01      	cmp	r2, #1
 80047d2:	d10f      	bne.n	80047f4 <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80047d4:	041b      	lsls	r3, r3, #16
 80047d6:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80047da:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80047de:	4313      	orrs	r3, r2
 80047e0:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80047e2:	690b      	ldr	r3, [r1, #16]
 80047e4:	3301      	adds	r3, #1
 80047e6:	029b      	lsls	r3, r3, #10
 80047e8:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80047ea:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80047ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047f0:	6583      	str	r3, [r0, #88]	; 0x58
 80047f2:	e7ab      	b.n	800474c <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80047f4:	6803      	ldr	r3, [r0, #0]
 80047f6:	4a05      	ldr	r2, [pc, #20]	; (800480c <HAL_SD_GetCardCSD+0x168>)
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004802:	2301      	movs	r3, #1
 8004804:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8004808:	4618      	mov	r0, r3
 800480a:	e7e0      	b.n	80047ce <HAL_SD_GetCardCSD+0x12a>
 800480c:	004005ff 	.word	0x004005ff

08004810 <HAL_SD_InitCard>:
{
 8004810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004814:	2300      	movs	r3, #0
{
 8004816:	b098      	sub	sp, #96	; 0x60
 8004818:	4604      	mov	r4, r0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800481a:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800481c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004820:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004824:	2376      	movs	r3, #118	; 0x76
 8004826:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 8004828:	ab0a      	add	r3, sp, #40	; 0x28
 800482a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800482e:	ab07      	add	r3, sp, #28
 8004830:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004838:	f000 fe04 	bl	8005444 <SDMMC_Init>
  if(status != HAL_OK)
 800483c:	4605      	mov	r5, r0
 800483e:	2800      	cmp	r0, #0
 8004840:	f040 80e3 	bne.w	8004a0a <HAL_SD_InitCard+0x1fa>
  __HAL_SD_DISABLE(hsd);
 8004844:	6820      	ldr	r0, [r4, #0]
 8004846:	6843      	ldr	r3, [r0, #4]
 8004848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800484c:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800484e:	f000 fe1d 	bl	800548c <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8004852:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8004854:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8004856:	6853      	ldr	r3, [r2, #4]
 8004858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485c:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 800485e:	f7fe f8f3 	bl	8002a48 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004862:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8004864:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004866:	f000 fe43 	bl	80054f0 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800486a:	4605      	mov	r5, r0
 800486c:	b940      	cbnz	r0, 8004880 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800486e:	6820      	ldr	r0, [r4, #0]
 8004870:	f001 f90e 	bl	8005a90 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004874:	b170      	cbz	r0, 8004894 <HAL_SD_InitCard+0x84>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004876:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004878:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800487a:	f000 fe39 	bl	80054f0 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800487e:	b198      	cbz	r0, 80048a8 <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 8004880:	2501      	movs	r5, #1
 8004882:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004886:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004888:	4303      	orrs	r3, r0
 800488a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800488c:	4628      	mov	r0, r5
 800488e:	b018      	add	sp, #96	; 0x60
 8004890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004894:	2301      	movs	r3, #1
 8004896:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004898:	2100      	movs	r1, #0
 800489a:	6820      	ldr	r0, [r4, #0]
 800489c:	f000 ff88 	bl	80057b0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80048a0:	b128      	cbz	r0, 80048ae <HAL_SD_InitCard+0x9e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048a2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80048a6:	e7eb      	b.n	8004880 <HAL_SD_InitCard+0x70>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80048a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d0f4      	beq.n	8004898 <HAL_SD_InitCard+0x88>
{
 80048ae:	2600      	movs	r6, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80048b0:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80048b4:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8004a14 <HAL_SD_InitCard+0x204>
 80048b8:	e014      	b.n	80048e4 <HAL_SD_InitCard+0xd4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80048ba:	4631      	mov	r1, r6
 80048bc:	6820      	ldr	r0, [r4, #0]
 80048be:	f000 ff77 	bl	80057b0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80048c2:	2800      	cmp	r0, #0
 80048c4:	d1dc      	bne.n	8004880 <HAL_SD_InitCard+0x70>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80048c6:	4641      	mov	r1, r8
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	f001 f843 	bl	8005954 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d1e7      	bne.n	80048a2 <HAL_SD_InitCard+0x92>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048d2:	4631      	mov	r1, r6
 80048d4:	6820      	ldr	r0, [r4, #0]
 80048d6:	f000 fdf4 	bl	80054c2 <SDMMC_GetResponse>
    count++;
 80048da:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048dc:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80048de:	0fc6      	lsrs	r6, r0, #31
    count++;
 80048e0:	3301      	adds	r3, #1
 80048e2:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80048e4:	9b06      	ldr	r3, [sp, #24]
 80048e6:	42bb      	cmp	r3, r7
 80048e8:	d801      	bhi.n	80048ee <HAL_SD_InitCard+0xde>
 80048ea:	2e00      	cmp	r6, #0
 80048ec:	d0e5      	beq.n	80048ba <HAL_SD_InitCard+0xaa>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80048ee:	9b06      	ldr	r3, [sp, #24]
 80048f0:	42bb      	cmp	r3, r7
 80048f2:	d80c      	bhi.n	800490e <HAL_SD_InitCard+0xfe>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80048f4:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 80048f8:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80048fa:	6820      	ldr	r0, [r4, #0]
 80048fc:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 80048fe:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004902:	f000 fdc7 	bl	8005494 <SDMMC_GetPowerState>
 8004906:	b928      	cbnz	r0, 8004914 <HAL_SD_InitCard+0x104>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004908:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800490c:	e7b8      	b.n	8004880 <HAL_SD_InitCard+0x70>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800490e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8004912:	e7b5      	b.n	8004880 <HAL_SD_InitCard+0x70>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004914:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004916:	2b03      	cmp	r3, #3
 8004918:	d043      	beq.n	80049a2 <HAL_SD_InitCard+0x192>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800491a:	6820      	ldr	r0, [r4, #0]
 800491c:	f000 ffce 	bl	80058bc <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004920:	2800      	cmp	r0, #0
 8004922:	d1ad      	bne.n	8004880 <HAL_SD_InitCard+0x70>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004924:	4601      	mov	r1, r0
 8004926:	6820      	ldr	r0, [r4, #0]
 8004928:	f000 fdcb 	bl	80054c2 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800492c:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800492e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004930:	6820      	ldr	r0, [r4, #0]
 8004932:	f000 fdc6 	bl	80054c2 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004936:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004938:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800493a:	6820      	ldr	r0, [r4, #0]
 800493c:	f000 fdc1 	bl	80054c2 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004940:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004942:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004944:	6820      	ldr	r0, [r4, #0]
 8004946:	f000 fdbc 	bl	80054c2 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800494a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800494c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004950:	2b03      	cmp	r3, #3
 8004952:	d026      	beq.n	80049a2 <HAL_SD_InitCard+0x192>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004954:	f10d 0116 	add.w	r1, sp, #22
 8004958:	6820      	ldr	r0, [r4, #0]
 800495a:	f001 f857 	bl	8005a0c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800495e:	2800      	cmp	r0, #0
 8004960:	d18e      	bne.n	8004880 <HAL_SD_InitCard+0x70>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004962:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004964:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004966:	2b03      	cmp	r3, #3
 8004968:	d01b      	beq.n	80049a2 <HAL_SD_InitCard+0x192>
    hsd->SdCard.RelCardAdd = sd_rca;
 800496a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800496e:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004970:	0409      	lsls	r1, r1, #16
 8004972:	f000 ffb8 	bl	80058e6 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004976:	2800      	cmp	r0, #0
 8004978:	d182      	bne.n	8004880 <HAL_SD_InitCard+0x70>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800497a:	4601      	mov	r1, r0
 800497c:	6820      	ldr	r0, [r4, #0]
 800497e:	f000 fda0 	bl	80054c2 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004982:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004984:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004986:	6820      	ldr	r0, [r4, #0]
 8004988:	f000 fd9b 	bl	80054c2 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800498c:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800498e:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004990:	6820      	ldr	r0, [r4, #0]
 8004992:	f000 fd96 	bl	80054c2 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004996:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004998:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800499a:	6820      	ldr	r0, [r4, #0]
 800499c:	f000 fd91 	bl	80054c2 <SDMMC_GetResponse>
 80049a0:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80049a2:	2104      	movs	r1, #4
 80049a4:	6820      	ldr	r0, [r4, #0]
 80049a6:	f000 fd8c 	bl	80054c2 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80049aa:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80049ac:	0d00      	lsrs	r0, r0, #20
 80049ae:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80049b0:	4620      	mov	r0, r4
 80049b2:	f7ff fe77 	bl	80046a4 <HAL_SD_GetCardCSD>
 80049b6:	4605      	mov	r5, r0
 80049b8:	2800      	cmp	r0, #0
 80049ba:	f47f af72 	bne.w	80048a2 <HAL_SD_InitCard+0x92>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80049be:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80049c0:	4603      	mov	r3, r0
 80049c2:	6820      	ldr	r0, [r4, #0]
 80049c4:	0412      	lsls	r2, r2, #16
 80049c6:	f000 fedb 	bl	8005780 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80049ca:	2800      	cmp	r0, #0
 80049cc:	f47f af58 	bne.w	8004880 <HAL_SD_InitCard+0x70>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80049d0:	f104 0310 	add.w	r3, r4, #16
 80049d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049d8:	1d23      	adds	r3, r4, #4
 80049da:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80049de:	6820      	ldr	r0, [r4, #0]
 80049e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049e2:	f000 fd2f 	bl	8005444 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80049e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049ea:	6820      	ldr	r0, [r4, #0]
 80049ec:	f000 fe36 	bl	800565c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80049f0:	2800      	cmp	r0, #0
 80049f2:	f43f af4b 	beq.w	800488c <HAL_SD_InitCard+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049f6:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 80049f8:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049fa:	4a05      	ldr	r2, [pc, #20]	; (8004a10 <HAL_SD_InitCard+0x200>)
 80049fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80049fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a00:	4318      	orrs	r0, r3
 8004a02:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a04:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8004a08:	e740      	b.n	800488c <HAL_SD_InitCard+0x7c>
    return HAL_ERROR;
 8004a0a:	2501      	movs	r5, #1
 8004a0c:	e73e      	b.n	800488c <HAL_SD_InitCard+0x7c>
 8004a0e:	bf00      	nop
 8004a10:	004005ff 	.word	0x004005ff
 8004a14:	c1100000 	.word	0xc1100000

08004a18 <HAL_SD_Init>:
{
 8004a18:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	b908      	cbnz	r0, 8004a22 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8004a1e:	2001      	movs	r0, #1
}
 8004a20:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8004a22:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8004a26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a2a:	b913      	cbnz	r3, 8004a32 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8004a2c:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8004a2e:	f7fc fdcb 	bl	80015c8 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8004a32:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004a34:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8004a36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004a3a:	f7ff fee9 	bl	8004810 <HAL_SD_InitCard>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d1ed      	bne.n	8004a1e <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8004a42:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a44:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8004a46:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8004a48:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8004a4c:	e7e8      	b.n	8004a20 <HAL_SD_Init+0x8>

08004a4e <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004a4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004a50:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004a52:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004a54:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004a56:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004a58:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004a5a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004a5c:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004a5e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004a60:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004a62:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004a64:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004a66:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004a68:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004a6a:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 8004a6c:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004a6e:	61cb      	str	r3, [r1, #28]
}
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8004a74:	2303      	movs	r3, #3
{
 8004a76:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8004a78:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8004a7c:	b08b      	sub	sp, #44	; 0x2c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8004a80:	4604      	mov	r4, r0
 8004a82:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d002      	beq.n	8004a8e <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004a88:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004a8c:	d103      	bne.n	8004a96 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	e05d      	b.n	8004b52 <HAL_SD_ConfigWideBusOperation+0xde>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004a96:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a9a:	6800      	ldr	r0, [r0, #0]
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004a9c:	d137      	bne.n	8004b0e <HAL_SD_ConfigWideBusOperation+0x9a>
  uint32_t scr[2U] = {0U, 0U};
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004aa4:	f000 fd0d 	bl	80054c2 <SDMMC_GetResponse>
 8004aa8:	0180      	lsls	r0, r0, #6
 8004aaa:	d449      	bmi.n	8004b40 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8004aac:	a904      	add	r1, sp, #16
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f7ff fbc8 	bl	8004244 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ab4:	b960      	cbnz	r0, 8004ad0 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004ab6:	9b05      	ldr	r3, [sp, #20]
 8004ab8:	0359      	lsls	r1, r3, #13
 8004aba:	d544      	bpl.n	8004b46 <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004abc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004abe:	6820      	ldr	r0, [r4, #0]
 8004ac0:	0409      	lsls	r1, r1, #16
 8004ac2:	f000 fe75 	bl	80057b0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ac6:	b918      	cbnz	r0, 8004ad0 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004ac8:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004aca:	6820      	ldr	r0, [r4, #0]
 8004acc:	f000 fe88 	bl	80057e0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8004ad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ad2:	4318      	orrs	r0, r3
 8004ad4:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004ad6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ad8:	6827      	ldr	r7, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004ada:	2e00      	cmp	r6, #0
 8004adc:	d03b      	beq.n	8004b56 <HAL_SD_ConfigWideBusOperation+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ade:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <HAL_SD_ConfigWideBusOperation+0x110>)
    hsd->State = HAL_SD_STATE_READY;
 8004ae0:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ae2:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ae4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ae8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	f000 fdb5 	bl	800565c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004af2:	b130      	cbz	r0, 8004b02 <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004af4:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8004af6:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004af8:	4a22      	ldr	r2, [pc, #136]	; (8004b84 <HAL_SD_ConfigWideBusOperation+0x110>)
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004afc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004afe:	4318      	orrs	r0, r3
 8004b00:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8004b02:	2301      	movs	r3, #1
}
 8004b04:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8004b06:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004b0a:	b00b      	add	sp, #44	; 0x2c
 8004b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004b0e:	b9e9      	cbnz	r1, 8004b4c <HAL_SD_ConfigWideBusOperation+0xd8>
  uint32_t scr[2U] = {0U, 0U};
 8004b10:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b14:	f000 fcd5 	bl	80054c2 <SDMMC_GetResponse>
 8004b18:	0182      	lsls	r2, r0, #6
 8004b1a:	d411      	bmi.n	8004b40 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8004b1c:	a904      	add	r1, sp, #16
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f7ff fb90 	bl	8004244 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d1d3      	bne.n	8004ad0 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b28:	9b05      	ldr	r3, [sp, #20]
 8004b2a:	03db      	lsls	r3, r3, #15
 8004b2c:	d50b      	bpl.n	8004b46 <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b2e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004b30:	6820      	ldr	r0, [r4, #0]
 8004b32:	0409      	lsls	r1, r1, #16
 8004b34:	f000 fe3c 	bl	80057b0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d1c9      	bne.n	8004ad0 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004b3c:	4601      	mov	r1, r0
 8004b3e:	e7c4      	b.n	8004aca <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004b44:	e7c4      	b.n	8004ad0 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b46:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004b4a:	e7c1      	b.n	8004ad0 <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b52:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b54:	e7bf      	b.n	8004ad6 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004b56:	6863      	ldr	r3, [r4, #4]
 8004b58:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004b5a:	68a3      	ldr	r3, [r4, #8]
 8004b5c:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004b5e:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8004b60:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004b64:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8004b66:	4635      	mov	r5, r6
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004b68:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004b6a:	69a3      	ldr	r3, [r4, #24]
 8004b6c:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 8004b6e:	ab0a      	add	r3, sp, #40	; 0x28
 8004b70:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004b74:	ab04      	add	r3, sp, #16
 8004b76:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b7e:	f000 fc61 	bl	8005444 <SDMMC_Init>
 8004b82:	e7b1      	b.n	8004ae8 <HAL_SD_ConfigWideBusOperation+0x74>
 8004b84:	004005ff 	.word	0x004005ff

08004b88 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b88:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8004b8a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b8c:	0409      	lsls	r1, r1, #16
{
 8004b8e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b90:	6800      	ldr	r0, [r0, #0]
 8004b92:	f000 fe55 	bl	8005840 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b96:	4601      	mov	r1, r0
 8004b98:	b928      	cbnz	r0, 8004ba6 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004b9a:	6820      	ldr	r0, [r4, #0]
 8004b9c:	f000 fc91 	bl	80054c2 <SDMMC_GetResponse>
}
 8004ba0:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8004ba4:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8004ba6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ba8:	4308      	orrs	r0, r1
 8004baa:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8004bac:	2000      	movs	r0, #0
 8004bae:	e7f7      	b.n	8004ba0 <HAL_SD_GetCardState+0x18>

08004bb0 <SD_DMATxAbort>:
{
 8004bb0:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004bb2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004bb4:	f240 523a 	movw	r2, #1338	; 0x53a
 8004bb8:	6823      	ldr	r3, [r4, #0]
  CardState = HAL_SD_GetCardState(hsd);
 8004bba:	4620      	mov	r0, r4
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8004bbe:	f7ff ffe3 	bl	8004b88 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8004bc2:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004bc4:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 8004bc6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004bca:	2300      	movs	r3, #0
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004bcc:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 8004bce:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004bd0:	d805      	bhi.n	8004bde <SD_DMATxAbort+0x2e>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004bd2:	6820      	ldr	r0, [r4, #0]
 8004bd4:	f000 fdba 	bl	800574c <SDMMC_CmdStopTransfer>
 8004bd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bda:	4318      	orrs	r0, r3
 8004bdc:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004bde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 8004be0:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004be2:	b913      	cbnz	r3, 8004bea <SD_DMATxAbort+0x3a>
    HAL_SD_AbortCallback(hsd);
 8004be4:	f7fc fe39 	bl	800185a <HAL_SD_AbortCallback>
}
 8004be8:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 8004bea:	f7ff fd59 	bl	80046a0 <HAL_SD_ErrorCallback>
}
 8004bee:	e7fb      	b.n	8004be8 <SD_DMATxAbort+0x38>

08004bf0 <HAL_SD_IRQHandler>:
{
 8004bf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 8004bf4:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 8004bf6:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004bf8:	6800      	ldr	r0, [r0, #0]
 8004bfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bfc:	041f      	lsls	r7, r3, #16
 8004bfe:	d51f      	bpl.n	8004c40 <HAL_SD_IRQHandler+0x50>
 8004c00:	072e      	lsls	r6, r5, #28
 8004c02:	d51d      	bpl.n	8004c40 <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 8004c04:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  if (dataremaining > 0U)
 8004c06:	b1c7      	cbz	r7, 8004c3a <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pRxBuffPtr;
 8004c08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c0a:	1d35      	adds	r5, r6, #4
 8004c0c:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004c10:	6820      	ldr	r0, [r4, #0]
    for(count = 0U; count < 8U; count++)
 8004c12:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004c14:	f000 fc32 	bl	800547c <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8004c18:	f805 0c08 	strb.w	r0, [r5, #-8]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004c1c:	0a03      	lsrs	r3, r0, #8
 8004c1e:	f805 3c07 	strb.w	r3, [r5, #-7]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004c22:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004c24:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004c26:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004c2a:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 8004c2e:	4545      	cmp	r5, r8
 8004c30:	d1ee      	bne.n	8004c10 <HAL_SD_IRQHandler+0x20>
      tmp++;
 8004c32:	3620      	adds	r6, #32
      dataremaining--;
 8004c34:	3f20      	subs	r7, #32
    }

    hsd->pRxBuffPtr = tmp;
 8004c36:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004c38:	62e7      	str	r7, [r4, #44]	; 0x2c
}
 8004c3a:	b002      	add	sp, #8
 8004c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004c40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c42:	05d9      	lsls	r1, r3, #23
 8004c44:	d544      	bpl.n	8004cd0 <HAL_SD_IRQHandler+0xe0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004c46:	f44f 7380 	mov.w	r3, #256	; 0x100
    if((context & SD_CONTEXT_IT) != 0U)
 8004c4a:	072a      	lsls	r2, r5, #28
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004c4c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004c4e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004c50:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8004c54:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004c58:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004c5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004c5c:	f023 0301 	bic.w	r3, r3, #1
 8004c60:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8004c62:	d51a      	bpl.n	8004c9a <HAL_SD_IRQHandler+0xaa>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004c64:	f015 0f22 	tst.w	r5, #34	; 0x22
 8004c68:	d008      	beq.n	8004c7c <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c6a:	f000 fd6f 	bl	800574c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c6e:	b128      	cbz	r0, 8004c7c <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 8004c70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c72:	4318      	orrs	r0, r3
 8004c74:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004c76:	4620      	mov	r0, r4
 8004c78:	f7ff fd12 	bl	80046a0 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	f240 523a 	movw	r2, #1338	; 0x53a
        HAL_SD_RxCpltCallback(hsd);
 8004c82:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004c90:	07ab      	lsls	r3, r5, #30
 8004c92:	d01a      	beq.n	8004cca <HAL_SD_IRQHandler+0xda>
        HAL_SD_RxCpltCallback(hsd);
 8004c94:	f7fc fdeb 	bl	800186e <HAL_SD_RxCpltCallback>
 8004c98:	e7cf      	b.n	8004c3a <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004c9a:	062f      	lsls	r7, r5, #24
 8004c9c:	d5cd      	bpl.n	8004c3a <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004c9e:	06ae      	lsls	r6, r5, #26
 8004ca0:	d508      	bpl.n	8004cb4 <HAL_SD_IRQHandler+0xc4>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ca2:	f000 fd53 	bl	800574c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004ca6:	b128      	cbz	r0, 8004cb4 <HAL_SD_IRQHandler+0xc4>
          hsd->ErrorCode |= errorstate;
 8004ca8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004caa:	4318      	orrs	r0, r3
 8004cac:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f7ff fcf6 	bl	80046a0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004cb4:	07a8      	lsls	r0, r5, #30
 8004cb6:	d1c0      	bne.n	8004c3a <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004cb8:	6822      	ldr	r2, [r4, #0]
        HAL_SD_TxCpltCallback(hsd);
 8004cba:	4620      	mov	r0, r4
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004cbc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004cbe:	f023 0308 	bic.w	r3, r3, #8
 8004cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004cca:	f7fc fdcb 	bl	8001864 <HAL_SD_TxCpltCallback>
 8004cce:	e7b4      	b.n	8004c3a <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004cd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004cd2:	0459      	lsls	r1, r3, #17
 8004cd4:	d526      	bpl.n	8004d24 <HAL_SD_IRQHandler+0x134>
 8004cd6:	072a      	lsls	r2, r5, #28
 8004cd8:	d524      	bpl.n	8004d24 <HAL_SD_IRQHandler+0x134>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8004cda:	6a67      	ldr	r7, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 8004cdc:	2f00      	cmp	r7, #0
 8004cde:	d0ac      	beq.n	8004c3a <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 8004ce0:	6a26      	ldr	r6, [r4, #32]
 8004ce2:	1d35      	adds	r5, r6, #4
 8004ce4:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 8004ce8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    for(count = 0U; count < 8U; count++)
 8004cec:	3504      	adds	r5, #4
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004cee:	a901      	add	r1, sp, #4
 8004cf0:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 8004cf2:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8004cf4:	f815 2c07 	ldrb.w	r2, [r5, #-7]
 8004cf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cfc:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8004cfe:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 8004d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d06:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8004d08:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 8004d0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004d10:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004d12:	f000 fbb6 	bl	8005482 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004d16:	4545      	cmp	r5, r8
 8004d18:	d1e6      	bne.n	8004ce8 <HAL_SD_IRQHandler+0xf8>
      tmp++;
 8004d1a:	3620      	adds	r6, #32
      dataremaining--;
 8004d1c:	3f20      	subs	r7, #32
    }

    hsd->pTxBuffPtr = tmp;
 8004d1e:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 8004d20:	6267      	str	r7, [r4, #36]	; 0x24
  }
}
 8004d22:	e78a      	b.n	8004c3a <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004d24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d26:	f013 0f3a 	tst.w	r3, #58	; 0x3a
 8004d2a:	d086      	beq.n	8004c3a <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004d2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d2e:	079b      	lsls	r3, r3, #30
 8004d30:	d503      	bpl.n	8004d3a <HAL_SD_IRQHandler+0x14a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d34:	f043 0302 	orr.w	r3, r3, #2
 8004d38:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8004d3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d3c:	071f      	lsls	r7, r3, #28
 8004d3e:	d503      	bpl.n	8004d48 <HAL_SD_IRQHandler+0x158>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d42:	f043 0308 	orr.w	r3, r3, #8
 8004d46:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004d48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d4a:	069e      	lsls	r6, r3, #26
 8004d4c:	d503      	bpl.n	8004d56 <HAL_SD_IRQHandler+0x166>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d50:	f043 0320 	orr.w	r3, r3, #32
 8004d54:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8004d56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d58:	06d9      	lsls	r1, r3, #27
 8004d5a:	d503      	bpl.n	8004d64 <HAL_SD_IRQHandler+0x174>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004d5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d5e:	f043 0310 	orr.w	r3, r3, #16
 8004d62:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004d64:	f240 533a 	movw	r3, #1338	; 0x53a
 8004d68:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004d6a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004d6c:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8004d70:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d72:	f000 fceb 	bl	800574c <SDMMC_CmdStopTransfer>
 8004d76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004d78:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d7a:	ea40 0003 	orr.w	r0, r0, r3
 8004d7e:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004d80:	d508      	bpl.n	8004d94 <HAL_SD_IRQHandler+0x1a4>
      hsd->State = HAL_SD_STATE_READY;
 8004d82:	2301      	movs	r3, #1
      HAL_SD_ErrorCallback(hsd);
 8004d84:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 8004d86:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004d8e:	f7ff fc87 	bl	80046a0 <HAL_SD_ErrorCallback>
 8004d92:	e752      	b.n	8004c3a <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004d94:	062b      	lsls	r3, r5, #24
 8004d96:	f57f af50 	bpl.w	8004c3a <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004d9a:	f015 0f30 	tst.w	r5, #48	; 0x30
 8004d9e:	d00d      	beq.n	8004dbc <HAL_SD_IRQHandler+0x1cc>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004da0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004da2:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <HAL_SD_IRQHandler+0x1f8>)
 8004da4:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004da6:	f7fe f81b 	bl	8002de0 <HAL_DMA_Abort_IT>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	f43f af45 	beq.w	8004c3a <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 8004db0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8004db2:	b002      	add	sp, #8
 8004db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          SD_DMARxAbort(hsd->hdmarx);
 8004db8:	f7ff befa 	b.w	8004bb0 <SD_DMATxAbort>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004dbc:	f015 0503 	ands.w	r5, r5, #3
 8004dc0:	d009      	beq.n	8004dd6 <HAL_SD_IRQHandler+0x1e6>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004dc2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004dc4:	4b09      	ldr	r3, [pc, #36]	; (8004dec <HAL_SD_IRQHandler+0x1fc>)
 8004dc6:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004dc8:	f7fe f80a 	bl	8002de0 <HAL_DMA_Abort_IT>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	f43f af34 	beq.w	8004c3a <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 8004dd2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004dd4:	e7ed      	b.n	8004db2 <HAL_SD_IRQHandler+0x1c2>
        hsd->State = HAL_SD_STATE_READY;
 8004dd6:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dd8:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8004dda:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 8004ddc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004de0:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004de2:	f7fc fd3a 	bl	800185a <HAL_SD_AbortCallback>
}
 8004de6:	e728      	b.n	8004c3a <HAL_SD_IRQHandler+0x4a>
 8004de8:	08004bb1 	.word	0x08004bb1
 8004dec:	08004df1 	.word	0x08004df1

08004df0 <SD_DMARxAbort>:
 8004df0:	f7ff bede 	b.w	8004bb0 <SD_DMATxAbort>

08004df4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004df8:	4604      	mov	r4, r0
 8004dfa:	b1c8      	cbz	r0, 8004e30 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004dfc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004e00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e04:	b91b      	cbnz	r3, 8004e0e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004e06:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004e0a:	f7fc fc3f 	bl	800168c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e0e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004e10:	1d21      	adds	r1, r4, #4
 8004e12:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e14:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004e18:	f000 fa87 	bl	800532a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004e1c:	6862      	ldr	r2, [r4, #4]
 8004e1e:	4629      	mov	r1, r5
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	f000 fabd 	bl	80053a0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e26:	2301      	movs	r3, #1

  return HAL_OK;
 8004e28:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e2a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8004e2e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e30:	2001      	movs	r0, #1
 8004e32:	e7fc      	b.n	8004e2e <HAL_SDRAM_Init+0x3a>

08004e34 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004e34:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004e36:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004e3e:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004e40:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8004e42:	d010      	beq.n	8004e66 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004e44:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8004e48:	2c01      	cmp	r4, #1
 8004e4a:	d110      	bne.n	8004e6e <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e4c:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004e4e:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e50:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004e54:	f000 fada 	bl	800540c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004e58:	6833      	ldr	r3, [r6, #0]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d104      	bne.n	8004e68 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004e5e:	2305      	movs	r3, #5
 8004e60:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004e64:	2000      	movs	r0, #0
}
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004e68:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8004e6c:	e7fa      	b.n	8004e64 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8004e6e:	2001      	movs	r0, #1
 8004e70:	e7f9      	b.n	8004e66 <HAL_SDRAM_SendCommand+0x32>

08004e72 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004e72:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004e74:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8004e78:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	b2d8      	uxtb	r0, r3
 8004e7e:	d00d      	beq.n	8004e9c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004e80:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	b2dd      	uxtb	r5, r3
 8004e88:	d109      	bne.n	8004e9e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e8a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004e8c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e8e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004e92:	f000 facd 	bl	8005430 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004e96:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004e98:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8004e9c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	e7fc      	b.n	8004e9c <HAL_SDRAM_ProgramRefreshRate+0x2a>

08004ea2 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d133      	bne.n	8004f14 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	2302      	movs	r3, #2
 8004eae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eb2:	6803      	ldr	r3, [r0, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebc:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <HAL_TIM_Base_Start_IT+0x74>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01a      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x54>
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d017      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x54>
 8004ec8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d013      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x54>
 8004ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00f      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x54>
 8004ed8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x54>
 8004ee0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x54>
 8004ee8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x54>
 8004ef0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d107      	bne.n	8004f08 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef8:	6899      	ldr	r1, [r3, #8]
 8004efa:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <HAL_TIM_Base_Start_IT+0x78>)
 8004efc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efe:	2a06      	cmp	r2, #6
 8004f00:	d006      	beq.n	8004f10 <HAL_TIM_Base_Start_IT+0x6c>
 8004f02:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004f06:	d003      	beq.n	8004f10 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f10:	2000      	movs	r0, #0
}
 8004f12:	4770      	bx	lr
    return HAL_ERROR;
 8004f14:	2001      	movs	r0, #1
 8004f16:	4770      	bx	lr
 8004f18:	40010000 	.word	0x40010000
 8004f1c:	00010007 	.word	0x00010007

08004f20 <HAL_TIM_OC_DelayElapsedCallback>:
 8004f20:	4770      	bx	lr

08004f22 <HAL_TIM_IC_CaptureCallback>:
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004f24:	4770      	bx	lr

08004f26 <HAL_TIM_TriggerCallback>:
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f28:	6803      	ldr	r3, [r0, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	0791      	lsls	r1, r2, #30
{
 8004f2e:	b510      	push	{r4, lr}
 8004f30:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f32:	d50f      	bpl.n	8004f54 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	0792      	lsls	r2, r2, #30
 8004f38:	d50c      	bpl.n	8004f54 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f3a:	f06f 0202 	mvn.w	r2, #2
 8004f3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f40:	2201      	movs	r2, #1
 8004f42:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	0799      	lsls	r1, r3, #30
 8004f48:	f000 8085 	beq.w	8005056 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f4c:	f7ff ffe9 	bl	8004f22 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f50:	2300      	movs	r3, #0
 8004f52:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	0752      	lsls	r2, r2, #29
 8004f5a:	d510      	bpl.n	8004f7e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	0750      	lsls	r0, r2, #29
 8004f60:	d50d      	bpl.n	8004f7e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f62:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004f74:	d075      	beq.n	8005062 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f76:	f7ff ffd4 	bl	8004f22 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	0711      	lsls	r1, r2, #28
 8004f84:	d50f      	bpl.n	8004fa6 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	0712      	lsls	r2, r2, #28
 8004f8a:	d50c      	bpl.n	8004fa6 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f8c:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f94:	2204      	movs	r2, #4
 8004f96:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	079b      	lsls	r3, r3, #30
 8004f9c:	d067      	beq.n	800506e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	f7ff ffc0 	bl	8004f22 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	06d0      	lsls	r0, r2, #27
 8004fac:	d510      	bpl.n	8004fd0 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	06d1      	lsls	r1, r2, #27
 8004fb2:	d50d      	bpl.n	8004fd0 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fb4:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004fc6:	d058      	beq.n	800507a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc8:	f7ff ffab 	bl	8004f22 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	07d2      	lsls	r2, r2, #31
 8004fd6:	d508      	bpl.n	8004fea <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	07d0      	lsls	r0, r2, #31
 8004fdc:	d505      	bpl.n	8004fea <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fde:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fe4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe6:	f7fc f87b 	bl	80010e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	0611      	lsls	r1, r2, #24
 8004ff0:	d508      	bpl.n	8005004 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	0612      	lsls	r2, r2, #24
 8004ff6:	d505      	bpl.n	8005004 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ffc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ffe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005000:	f000 f8d9 	bl	80051b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	05d0      	lsls	r0, r2, #23
 800500a:	d508      	bpl.n	800501e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	0611      	lsls	r1, r2, #24
 8005010:	d505      	bpl.n	800501e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005012:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005016:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005018:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800501a:	f000 f8cd 	bl	80051b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	0652      	lsls	r2, r2, #25
 8005024:	d508      	bpl.n	8005038 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	0650      	lsls	r0, r2, #25
 800502a:	d505      	bpl.n	8005038 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800502c:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005030:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005032:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005034:	f7ff ff77 	bl	8004f26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	0691      	lsls	r1, r2, #26
 800503e:	d522      	bpl.n	8005086 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	0692      	lsls	r2, r2, #26
 8005044:	d51f      	bpl.n	8005086 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005046:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800504a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800504c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800504e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005052:	f000 b8af 	b.w	80051b4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	f7ff ff63 	bl	8004f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505a:	4620      	mov	r0, r4
 800505c:	f7ff ff62 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
 8005060:	e776      	b.n	8004f50 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005062:	f7ff ff5d 	bl	8004f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005066:	4620      	mov	r0, r4
 8005068:	f7ff ff5c 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
 800506c:	e785      	b.n	8004f7a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	f7ff ff57 	bl	8004f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005072:	4620      	mov	r0, r4
 8005074:	f7ff ff56 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
 8005078:	e793      	b.n	8004fa2 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800507a:	f7ff ff51 	bl	8004f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507e:	4620      	mov	r0, r4
 8005080:	f7ff ff50 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
 8005084:	e7a2      	b.n	8004fcc <HAL_TIM_IRQHandler+0xa4>
}
 8005086:	bd10      	pop	{r4, pc}

08005088 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005088:	4a30      	ldr	r2, [pc, #192]	; (800514c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800508a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800508c:	4290      	cmp	r0, r2
 800508e:	d012      	beq.n	80050b6 <TIM_Base_SetConfig+0x2e>
 8005090:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005094:	d00f      	beq.n	80050b6 <TIM_Base_SetConfig+0x2e>
 8005096:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800509a:	4290      	cmp	r0, r2
 800509c:	d00b      	beq.n	80050b6 <TIM_Base_SetConfig+0x2e>
 800509e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050a2:	4290      	cmp	r0, r2
 80050a4:	d007      	beq.n	80050b6 <TIM_Base_SetConfig+0x2e>
 80050a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050aa:	4290      	cmp	r0, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_Base_SetConfig+0x2e>
 80050ae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80050b2:	4290      	cmp	r0, r2
 80050b4:	d119      	bne.n	80050ea <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80050b6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80050bc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050be:	4a23      	ldr	r2, [pc, #140]	; (800514c <TIM_Base_SetConfig+0xc4>)
 80050c0:	4290      	cmp	r0, r2
 80050c2:	d029      	beq.n	8005118 <TIM_Base_SetConfig+0x90>
 80050c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80050c8:	d026      	beq.n	8005118 <TIM_Base_SetConfig+0x90>
 80050ca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80050ce:	4290      	cmp	r0, r2
 80050d0:	d022      	beq.n	8005118 <TIM_Base_SetConfig+0x90>
 80050d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050d6:	4290      	cmp	r0, r2
 80050d8:	d01e      	beq.n	8005118 <TIM_Base_SetConfig+0x90>
 80050da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050de:	4290      	cmp	r0, r2
 80050e0:	d01a      	beq.n	8005118 <TIM_Base_SetConfig+0x90>
 80050e2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80050e6:	4290      	cmp	r0, r2
 80050e8:	d016      	beq.n	8005118 <TIM_Base_SetConfig+0x90>
 80050ea:	4a19      	ldr	r2, [pc, #100]	; (8005150 <TIM_Base_SetConfig+0xc8>)
 80050ec:	4290      	cmp	r0, r2
 80050ee:	d013      	beq.n	8005118 <TIM_Base_SetConfig+0x90>
 80050f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050f4:	4290      	cmp	r0, r2
 80050f6:	d00f      	beq.n	8005118 <TIM_Base_SetConfig+0x90>
 80050f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050fc:	4290      	cmp	r0, r2
 80050fe:	d00b      	beq.n	8005118 <TIM_Base_SetConfig+0x90>
 8005100:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005104:	4290      	cmp	r0, r2
 8005106:	d007      	beq.n	8005118 <TIM_Base_SetConfig+0x90>
 8005108:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800510c:	4290      	cmp	r0, r2
 800510e:	d003      	beq.n	8005118 <TIM_Base_SetConfig+0x90>
 8005110:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005114:	4290      	cmp	r0, r2
 8005116:	d103      	bne.n	8005120 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511c:	68ca      	ldr	r2, [r1, #12]
 800511e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005120:	694a      	ldr	r2, [r1, #20]
 8005122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005126:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005128:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800512a:	688b      	ldr	r3, [r1, #8]
 800512c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800512e:	680b      	ldr	r3, [r1, #0]
 8005130:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <TIM_Base_SetConfig+0xc4>)
 8005134:	4298      	cmp	r0, r3
 8005136:	d003      	beq.n	8005140 <TIM_Base_SetConfig+0xb8>
 8005138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800513c:	4298      	cmp	r0, r3
 800513e:	d101      	bne.n	8005144 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005140:	690b      	ldr	r3, [r1, #16]
 8005142:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005144:	2301      	movs	r3, #1
 8005146:	6143      	str	r3, [r0, #20]
}
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40010000 	.word	0x40010000
 8005150:	40014000 	.word	0x40014000

08005154 <HAL_TIM_Base_Init>:
{
 8005154:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005156:	4604      	mov	r4, r0
 8005158:	b350      	cbz	r0, 80051b0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800515a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800515e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005162:	b91b      	cbnz	r3, 800516c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005164:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005168:	f7ff fe9b 	bl	8004ea2 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800516e:	6820      	ldr	r0, [r4, #0]
 8005170:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8005172:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005176:	f7ff ff87 	bl	8005088 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800517a:	2301      	movs	r3, #1
  return HAL_OK;
 800517c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800517e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005182:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005186:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800518a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800518e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005192:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800519a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800519e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051a2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80051a6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80051aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80051ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80051b0:	2001      	movs	r0, #1
 80051b2:	e7fc      	b.n	80051ae <HAL_TIM_Base_Init+0x5a>

080051b4 <HAL_TIMEx_CommutCallback>:
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIMEx_BreakCallback>:
 80051b6:	4770      	bx	lr

080051b8 <HAL_TIMEx_Break2Callback>:
 80051b8:	4770      	bx	lr

080051ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051be:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80051c2:	4604      	mov	r4, r0
 80051c4:	460e      	mov	r6, r1
 80051c6:	4615      	mov	r5, r2
 80051c8:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	69d3      	ldr	r3, [r2, #28]
 80051ce:	ea36 0303 	bics.w	r3, r6, r3
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	42ab      	cmp	r3, r5
 80051da:	d001      	beq.n	80051e0 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80051dc:	2000      	movs	r0, #0
 80051de:	e025      	b.n	800522c <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 80051e0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80051e4:	d0f2      	beq.n	80051cc <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e6:	f7fd fc29 	bl	8002a3c <HAL_GetTick>
 80051ea:	1bc0      	subs	r0, r0, r7
 80051ec:	4540      	cmp	r0, r8
 80051ee:	6820      	ldr	r0, [r4, #0]
 80051f0:	d802      	bhi.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x3e>
 80051f2:	f1b8 0f00 	cmp.w	r8, #0
 80051f6:	d11b      	bne.n	8005230 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	e840 3200 	strex	r2, r3, [r0]
 8005204:	2a00      	cmp	r2, #0
 8005206:	d1f7      	bne.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	f100 0308 	add.w	r3, r0, #8
 800520c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005210:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	f100 0108 	add.w	r1, r0, #8
 8005218:	e841 3200 	strex	r2, r3, [r1]
 800521c:	2a00      	cmp	r2, #0
 800521e:	d1f3      	bne.n	8005208 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8005220:	2320      	movs	r3, #32
 8005222:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005224:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8005226:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8005228:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
}
 800522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005230:	6803      	ldr	r3, [r0, #0]
 8005232:	075a      	lsls	r2, r3, #29
 8005234:	d5c9      	bpl.n	80051ca <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005236:	69c3      	ldr	r3, [r0, #28]
 8005238:	051b      	lsls	r3, r3, #20
 800523a:	d5c6      	bpl.n	80051ca <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800523c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005240:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005246:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524a:	e840 3200 	strex	r2, r3, [r0]
 800524e:	2a00      	cmp	r2, #0
 8005250:	d1f7      	bne.n	8005242 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	f100 0308 	add.w	r3, r0, #8
 8005256:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	f100 0108 	add.w	r1, r0, #8
 8005262:	e841 3200 	strex	r2, r3, [r1]
 8005266:	2a00      	cmp	r2, #0
 8005268:	d1f3      	bne.n	8005252 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 800526a:	2320      	movs	r3, #32
 800526c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800526e:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005270:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8005274:	e7d7      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0x6c>

08005276 <HAL_UART_Transmit>:
{
 8005276:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800527a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800527c:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800527e:	4604      	mov	r4, r0
 8005280:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8005282:	2b20      	cmp	r3, #32
{
 8005284:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005286:	d14e      	bne.n	8005326 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8005288:	2900      	cmp	r1, #0
 800528a:	d04a      	beq.n	8005322 <HAL_UART_Transmit+0xac>
 800528c:	2a00      	cmp	r2, #0
 800528e:	d048      	beq.n	8005322 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8005290:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005294:	2b01      	cmp	r3, #1
 8005296:	d046      	beq.n	8005326 <HAL_UART_Transmit+0xb0>
 8005298:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529a:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800529c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052a0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a2:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052a6:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80052a8:	f7fd fbc8 	bl	8002a3c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ac:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80052ae:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 80052b0:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 80052b8:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052bc:	d103      	bne.n	80052c6 <HAL_UART_Transmit+0x50>
 80052be:	6922      	ldr	r2, [r4, #16]
 80052c0:	b90a      	cbnz	r2, 80052c6 <HAL_UART_Transmit+0x50>
 80052c2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80052c4:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80052c6:	2200      	movs	r2, #0
 80052c8:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80052cc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052d0:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80052d4:	b292      	uxth	r2, r2
 80052d6:	b93a      	cbnz	r2, 80052e8 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052d8:	2140      	movs	r1, #64	; 0x40
 80052da:	4620      	mov	r0, r4
 80052dc:	f7ff ff6d 	bl	80051ba <UART_WaitOnFlagUntilTimeout>
 80052e0:	b950      	cbnz	r0, 80052f8 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80052e2:	2320      	movs	r3, #32
 80052e4:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80052e6:	e008      	b.n	80052fa <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052e8:	2200      	movs	r2, #0
 80052ea:	2180      	movs	r1, #128	; 0x80
 80052ec:	4620      	mov	r0, r4
 80052ee:	9303      	str	r3, [sp, #12]
 80052f0:	f7ff ff63 	bl	80051ba <UART_WaitOnFlagUntilTimeout>
 80052f4:	9b03      	ldr	r3, [sp, #12]
 80052f6:	b118      	cbz	r0, 8005300 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80052f8:	2003      	movs	r0, #3
}
 80052fa:	b004      	add	sp, #16
 80052fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005300:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8005302:	b95e      	cbnz	r6, 800531c <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005304:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005308:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800530c:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800530e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005312:	3a01      	subs	r2, #1
 8005314:	b292      	uxth	r2, r2
 8005316:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800531a:	e7d7      	b.n	80052cc <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800531c:	f816 2b01 	ldrb.w	r2, [r6], #1
 8005320:	e7f4      	b.n	800530c <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8005322:	2001      	movs	r0, #1
 8005324:	e7e9      	b.n	80052fa <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8005326:	2002      	movs	r0, #2
 8005328:	e7e7      	b.n	80052fa <HAL_UART_Transmit+0x84>

0800532a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800532a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800532e:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005330:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8005334:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8005338:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800533c:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8005340:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8005344:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005346:	b9a2      	cbnz	r2, 8005372 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005348:	ea43 0209 	orr.w	r2, r3, r9
 800534c:	6801      	ldr	r1, [r0, #0]
 800534e:	432a      	orrs	r2, r5
 8005350:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8005354:	ea42 0308 	orr.w	r3, r2, r8
 8005358:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800535c:	ea43 030e 	orr.w	r3, r3, lr
 8005360:	ea43 030c 	orr.w	r3, r3, ip
 8005364:	433b      	orrs	r3, r7
 8005366:	4333      	orrs	r3, r6
 8005368:	430b      	orrs	r3, r1
 800536a:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800536c:	2000      	movs	r0, #0
 800536e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005372:	6802      	ldr	r2, [r0, #0]
 8005374:	ea43 0309 	orr.w	r3, r3, r9
 8005378:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800537c:	4313      	orrs	r3, r2
 800537e:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005380:	ea45 0308 	orr.w	r3, r5, r8
 8005384:	6842      	ldr	r2, [r0, #4]
 8005386:	ea43 030e 	orr.w	r3, r3, lr
 800538a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800538e:	ea43 030c 	orr.w	r3, r3, ip
 8005392:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005396:	433b      	orrs	r3, r7
 8005398:	4333      	orrs	r3, r6
 800539a:	4313      	orrs	r3, r2
 800539c:	6043      	str	r3, [r0, #4]
 800539e:	e7e5      	b.n	800536c <FMC_SDRAM_Init+0x42>

080053a0 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80053a0:	68cb      	ldr	r3, [r1, #12]
 80053a2:	f103 3cff 	add.w	ip, r3, #4294967295
 80053a6:	694b      	ldr	r3, [r1, #20]
{
 80053a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80053aa:	3b01      	subs	r3, #1
 80053ac:	680f      	ldr	r7, [r1, #0]
 80053ae:	684c      	ldr	r4, [r1, #4]
 80053b0:	688e      	ldr	r6, [r1, #8]
 80053b2:	051b      	lsls	r3, r3, #20
 80053b4:	690d      	ldr	r5, [r1, #16]
 80053b6:	3c01      	subs	r4, #1
 80053b8:	6989      	ldr	r1, [r1, #24]
 80053ba:	3e01      	subs	r6, #1
 80053bc:	3d01      	subs	r5, #1
 80053be:	3f01      	subs	r7, #1
 80053c0:	3901      	subs	r1, #1
 80053c2:	0124      	lsls	r4, r4, #4
 80053c4:	0236      	lsls	r6, r6, #8
 80053c6:	042d      	lsls	r5, r5, #16
 80053c8:	0609      	lsls	r1, r1, #24
 80053ca:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80053ce:	b95a      	cbnz	r2, 80053e8 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80053d0:	433b      	orrs	r3, r7
 80053d2:	6882      	ldr	r2, [r0, #8]
 80053d4:	4323      	orrs	r3, r4
 80053d6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80053da:	4333      	orrs	r3, r6
 80053dc:	432b      	orrs	r3, r5
 80053de:	430b      	orrs	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80053e4:	2000      	movs	r0, #0
 80053e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80053e8:	6882      	ldr	r2, [r0, #8]
 80053ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053ee:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80053f2:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80053f4:	ea44 0306 	orr.w	r3, r4, r6
 80053f8:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80053fa:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80053fc:	68c2      	ldr	r2, [r0, #12]
 80053fe:	432b      	orrs	r3, r5
 8005400:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8005404:	430b      	orrs	r3, r1
 8005406:	4313      	orrs	r3, r2
 8005408:	60c3      	str	r3, [r0, #12]
 800540a:	e7eb      	b.n	80053e4 <FMC_SDRAM_Timing_Init+0x44>

0800540c <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800540c:	6902      	ldr	r2, [r0, #16]
{
 800540e:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005410:	e9d1 3400 	ldrd	r3, r4, [r1]
 8005414:	0d92      	lsrs	r2, r2, #22
 8005416:	4323      	orrs	r3, r4
 8005418:	68cc      	ldr	r4, [r1, #12]
 800541a:	0592      	lsls	r2, r2, #22
 800541c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8005420:	4313      	orrs	r3, r2
 8005422:	688a      	ldr	r2, [r1, #8]
 8005424:	3a01      	subs	r2, #1
 8005426:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800542a:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800542c:	2000      	movs	r0, #0
 800542e:	bd10      	pop	{r4, pc}

08005430 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005430:	6943      	ldr	r3, [r0, #20]
 8005432:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005436:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800543a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800543e:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8005440:	2000      	movs	r0, #0
 8005442:	4770      	bx	lr

08005444 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005444:	b084      	sub	sp, #16
 8005446:	b510      	push	{r4, lr}
 8005448:	ac03      	add	r4, sp, #12
 800544a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800544e:	460b      	mov	r3, r1
 8005450:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005452:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8005454:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8005456:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005458:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 800545c:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 800545e:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005460:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8005464:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8005466:	9907      	ldr	r1, [sp, #28]
 8005468:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800546a:	9908      	ldr	r1, [sp, #32]
 800546c:	430b      	orrs	r3, r1

  return HAL_OK;
}
 800546e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005472:	4313      	orrs	r3, r2
}
 8005474:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005476:	6043      	str	r3, [r0, #4]
}
 8005478:	2000      	movs	r0, #0
 800547a:	4770      	bx	lr

0800547c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800547c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8005480:	4770      	bx	lr

08005482 <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005482:	680b      	ldr	r3, [r1, #0]
 8005484:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8005488:	2000      	movs	r0, #0
 800548a:	4770      	bx	lr

0800548c <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800548c:	2303      	movs	r3, #3
 800548e:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8005490:	2000      	movs	r0, #0
 8005492:	4770      	bx	lr

08005494 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005494:	6800      	ldr	r0, [r0, #0]
}
 8005496:	f000 0003 	and.w	r0, r0, #3
 800549a:	4770      	bx	lr

0800549c <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800549c:	680b      	ldr	r3, [r1, #0]
{
 800549e:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 80054a0:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80054a2:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80054a4:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80054a8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80054ac:	4323      	orrs	r3, r4
                       Command->Response         |\
 80054ae:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 80054b0:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80054b2:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 80054b6:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 80054b8:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 80054be:	2000      	movs	r0, #0
 80054c0:	bd10      	pop	{r4, pc}

080054c2 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80054c2:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 80054c4:	5840      	ldr	r0, [r0, r1]
}  
 80054c6:	4770      	bx	lr

080054c8 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80054c8:	680b      	ldr	r3, [r1, #0]
{
 80054ca:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 80054cc:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80054ce:	684b      	ldr	r3, [r1, #4]
 80054d0:	6283      	str	r3, [r0, #40]	; 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80054d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054d4:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80054d8:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054dc:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80054de:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 80054e0:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 80054e2:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80054e4:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80054e6:	4313      	orrs	r3, r2
 80054e8:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 80054ea:	2000      	movs	r0, #0
 80054ec:	bd10      	pop	{r4, pc}
	...

080054f0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80054f0:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80054f2:	2300      	movs	r3, #0
{
 80054f4:	b086      	sub	sp, #24
 80054f6:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054f8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80054fa:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054fe:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005506:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005508:	f7ff ffc8 	bl	800549c <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <SDMMC_CmdGoIdleState+0x48>)
 800550e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	fbb3 f3f2 	udiv	r3, r3, r2
 8005518:	f241 3288 	movw	r2, #5000	; 0x1388
 800551c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800551e:	3b01      	subs	r3, #1
 8005520:	d307      	bcc.n	8005532 <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005522:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005524:	0612      	lsls	r2, r2, #24
 8005526:	d5fa      	bpl.n	800551e <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005528:	23c5      	movs	r3, #197	; 0xc5
  
  return SDMMC_ERROR_NONE;
 800552a:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800552c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800552e:	b006      	add	sp, #24
 8005530:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8005532:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8005536:	e7fa      	b.n	800552e <SDMMC_CmdGoIdleState+0x3e>
 8005538:	20000f50 	.word	0x20000f50

0800553c <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800553c:	4b45      	ldr	r3, [pc, #276]	; (8005654 <SDMMC_GetCmdResp1+0x118>)
{
 800553e:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005540:	681b      	ldr	r3, [r3, #0]
{
 8005542:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005544:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005548:	fbb3 f3f0 	udiv	r3, r3, r0
 800554c:	435a      	muls	r2, r3
    if (count-- == 0U)
 800554e:	2a00      	cmp	r2, #0
 8005550:	d049      	beq.n	80055e6 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 8005552:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005554:	f013 0f45 	tst.w	r3, #69	; 0x45
 8005558:	d007      	beq.n	800556a <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800555a:	051b      	lsls	r3, r3, #20
 800555c:	d405      	bmi.n	800556a <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800555e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005560:	0758      	lsls	r0, r3, #29
 8005562:	d504      	bpl.n	800556e <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005564:	2004      	movs	r0, #4
 8005566:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005568:	bd10      	pop	{r4, pc}
 800556a:	3a01      	subs	r2, #1
 800556c:	e7ef      	b.n	800554e <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800556e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005570:	f010 0001 	ands.w	r0, r0, #1
 8005574:	d002      	beq.n	800557c <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005576:	2301      	movs	r3, #1
 8005578:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800557a:	e7f5      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800557c:	23c5      	movs	r3, #197	; 0xc5
 800557e:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8005580:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005582:	b2db      	uxtb	r3, r3
 8005584:	4299      	cmp	r1, r3
 8005586:	d131      	bne.n	80055ec <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8005588:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800558a:	4833      	ldr	r0, [pc, #204]	; (8005658 <SDMMC_GetCmdResp1+0x11c>)
 800558c:	4018      	ands	r0, r3
 800558e:	2800      	cmp	r0, #0
 8005590:	d0ea      	beq.n	8005568 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005592:	2b00      	cmp	r3, #0
 8005594:	db2c      	blt.n	80055f0 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005596:	005a      	lsls	r2, r3, #1
 8005598:	d42d      	bmi.n	80055f6 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800559a:	009c      	lsls	r4, r3, #2
 800559c:	d42d      	bmi.n	80055fa <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800559e:	00d9      	lsls	r1, r3, #3
 80055a0:	d42d      	bmi.n	80055fe <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80055a2:	011a      	lsls	r2, r3, #4
 80055a4:	d42e      	bmi.n	8005604 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80055a6:	015c      	lsls	r4, r3, #5
 80055a8:	d42f      	bmi.n	800560a <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80055aa:	01d9      	lsls	r1, r3, #7
 80055ac:	d430      	bmi.n	8005610 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80055ae:	021a      	lsls	r2, r3, #8
 80055b0:	d431      	bmi.n	8005616 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80055b2:	025c      	lsls	r4, r3, #9
 80055b4:	d432      	bmi.n	800561c <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80055b6:	0299      	lsls	r1, r3, #10
 80055b8:	d433      	bmi.n	8005622 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80055ba:	02da      	lsls	r2, r3, #11
 80055bc:	d434      	bmi.n	8005628 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80055be:	035c      	lsls	r4, r3, #13
 80055c0:	d435      	bmi.n	800562e <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80055c2:	0399      	lsls	r1, r3, #14
 80055c4:	d436      	bmi.n	8005634 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80055c6:	03da      	lsls	r2, r3, #15
 80055c8:	d437      	bmi.n	800563a <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80055ca:	041c      	lsls	r4, r3, #16
 80055cc:	d438      	bmi.n	8005640 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80055ce:	0459      	lsls	r1, r3, #17
 80055d0:	d439      	bmi.n	8005646 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80055d2:	049a      	lsls	r2, r3, #18
 80055d4:	d43a      	bmi.n	800564c <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80055d6:	f013 0f08 	tst.w	r3, #8
 80055da:	bf14      	ite	ne
 80055dc:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80055e0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80055e4:	e7c0      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80055e6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80055ea:	e7bd      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055ec:	2001      	movs	r0, #1
 80055ee:	e7bb      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80055f0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80055f4:	e7b8      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80055f6:	2040      	movs	r0, #64	; 0x40
 80055f8:	e7b6      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80055fa:	2080      	movs	r0, #128	; 0x80
 80055fc:	e7b4      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80055fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005602:	e7b1      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005604:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005608:	e7ae      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800560a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800560e:	e7ab      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005610:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005614:	e7a8      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005616:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800561a:	e7a5      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800561c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005620:	e7a2      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005622:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005626:	e79f      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8005628:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800562c:	e79c      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800562e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005632:	e799      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005634:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005638:	e796      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800563a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800563e:	e793      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005640:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005644:	e790      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005646:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800564a:	e78d      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 800564c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8005650:	e78a      	b.n	8005568 <SDMMC_GetCmdResp1+0x2c>
 8005652:	bf00      	nop
 8005654:	20000f50 	.word	0x20000f50
 8005658:	fdffe008 	.word	0xfdffe008

0800565c <SDMMC_CmdBlockLength>:
{
 800565c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800565e:	2340      	movs	r3, #64	; 0x40
{
 8005660:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005662:	2510      	movs	r5, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005664:	2200      	movs	r2, #0
{
 8005666:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005668:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800566a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800566c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005674:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005678:	f7ff ff10 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800567c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005680:	4629      	mov	r1, r5
 8005682:	4620      	mov	r0, r4
 8005684:	f7ff ff5a 	bl	800553c <SDMMC_GetCmdResp1>
}
 8005688:	b007      	add	sp, #28
 800568a:	bd30      	pop	{r4, r5, pc}

0800568c <SDMMC_CmdReadSingleBlock>:
{
 800568c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800568e:	2340      	movs	r3, #64	; 0x40
{
 8005690:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005692:	2511      	movs	r5, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005694:	2200      	movs	r2, #0
{
 8005696:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005698:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800569a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800569c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056a8:	f7ff fef8 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80056ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b0:	4629      	mov	r1, r5
 80056b2:	4620      	mov	r0, r4
 80056b4:	f7ff ff42 	bl	800553c <SDMMC_GetCmdResp1>
}
 80056b8:	b007      	add	sp, #28
 80056ba:	bd30      	pop	{r4, r5, pc}

080056bc <SDMMC_CmdReadMultiBlock>:
{
 80056bc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056be:	2340      	movs	r3, #64	; 0x40
{
 80056c0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056c2:	2512      	movs	r5, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056c4:	2200      	movs	r2, #0
{
 80056c6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80056c8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056ca:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056cc:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056d8:	f7ff fee0 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80056dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e0:	4629      	mov	r1, r5
 80056e2:	4620      	mov	r0, r4
 80056e4:	f7ff ff2a 	bl	800553c <SDMMC_GetCmdResp1>
}
 80056e8:	b007      	add	sp, #28
 80056ea:	bd30      	pop	{r4, r5, pc}

080056ec <SDMMC_CmdWriteSingleBlock>:
{
 80056ec:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056ee:	2340      	movs	r3, #64	; 0x40
{
 80056f0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056f2:	2518      	movs	r5, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056f4:	2200      	movs	r2, #0
{
 80056f6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80056f8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056fa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056fc:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005704:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005708:	f7ff fec8 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800570c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005710:	4629      	mov	r1, r5
 8005712:	4620      	mov	r0, r4
 8005714:	f7ff ff12 	bl	800553c <SDMMC_GetCmdResp1>
}
 8005718:	b007      	add	sp, #28
 800571a:	bd30      	pop	{r4, r5, pc}

0800571c <SDMMC_CmdWriteMultiBlock>:
{
 800571c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800571e:	2340      	movs	r3, #64	; 0x40
{
 8005720:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005722:	2519      	movs	r5, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005724:	2200      	movs	r2, #0
{
 8005726:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005728:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800572a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800572c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005734:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005738:	f7ff feb0 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800573c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005740:	4629      	mov	r1, r5
 8005742:	4620      	mov	r0, r4
 8005744:	f7ff fefa 	bl	800553c <SDMMC_GetCmdResp1>
}
 8005748:	b007      	add	sp, #28
 800574a:	bd30      	pop	{r4, r5, pc}

0800574c <SDMMC_CmdStopTransfer>:
{
 800574c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800574e:	2300      	movs	r3, #0
{
 8005750:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005752:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005754:	2240      	movs	r2, #64	; 0x40
{
 8005756:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005758:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800575a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800575e:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005766:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005768:	f7ff fe98 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800576c:	4a03      	ldr	r2, [pc, #12]	; (800577c <SDMMC_CmdStopTransfer+0x30>)
 800576e:	4629      	mov	r1, r5
 8005770:	4620      	mov	r0, r4
 8005772:	f7ff fee3 	bl	800553c <SDMMC_GetCmdResp1>
}
 8005776:	b007      	add	sp, #28
 8005778:	bd30      	pop	{r4, r5, pc}
 800577a:	bf00      	nop
 800577c:	05f5e100 	.word	0x05f5e100

08005780 <SDMMC_CmdSelDesel>:
{
 8005780:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005782:	2340      	movs	r3, #64	; 0x40
{
 8005784:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005786:	2507      	movs	r5, #7
{
 8005788:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800578a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800578c:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800578e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005790:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005798:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800579c:	f7ff fe7e 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80057a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a4:	4629      	mov	r1, r5
 80057a6:	4620      	mov	r0, r4
 80057a8:	f7ff fec8 	bl	800553c <SDMMC_GetCmdResp1>
}
 80057ac:	b007      	add	sp, #28
 80057ae:	bd30      	pop	{r4, r5, pc}

080057b0 <SDMMC_CmdAppCommand>:
{
 80057b0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057b2:	2340      	movs	r3, #64	; 0x40
{
 80057b4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057b6:	2537      	movs	r5, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057b8:	2200      	movs	r2, #0
{
 80057ba:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80057bc:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057be:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057c0:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057cc:	f7ff fe66 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80057d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d4:	4629      	mov	r1, r5
 80057d6:	4620      	mov	r0, r4
 80057d8:	f7ff feb0 	bl	800553c <SDMMC_GetCmdResp1>
}
 80057dc:	b007      	add	sp, #28
 80057de:	bd30      	pop	{r4, r5, pc}

080057e0 <SDMMC_CmdBusWidth>:
{
 80057e0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057e2:	2340      	movs	r3, #64	; 0x40
{
 80057e4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057e6:	2506      	movs	r5, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057e8:	2200      	movs	r2, #0
{
 80057ea:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80057ec:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057ee:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057f0:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057fc:	f7ff fe4e 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005800:	f241 3288 	movw	r2, #5000	; 0x1388
 8005804:	4629      	mov	r1, r5
 8005806:	4620      	mov	r0, r4
 8005808:	f7ff fe98 	bl	800553c <SDMMC_GetCmdResp1>
}
 800580c:	b007      	add	sp, #28
 800580e:	bd30      	pop	{r4, r5, pc}

08005810 <SDMMC_CmdSendSCR>:
{
 8005810:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005812:	2300      	movs	r3, #0
{
 8005814:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005816:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005818:	2240      	movs	r2, #64	; 0x40
{
 800581a:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800581c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800581e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005822:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800582a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800582c:	f7ff fe36 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005830:	f241 3288 	movw	r2, #5000	; 0x1388
 8005834:	4629      	mov	r1, r5
 8005836:	4620      	mov	r0, r4
 8005838:	f7ff fe80 	bl	800553c <SDMMC_GetCmdResp1>
}
 800583c:	b007      	add	sp, #28
 800583e:	bd30      	pop	{r4, r5, pc}

08005840 <SDMMC_CmdSendStatus>:
{
 8005840:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005842:	2340      	movs	r3, #64	; 0x40
{
 8005844:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005846:	250d      	movs	r5, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005848:	2200      	movs	r2, #0
{
 800584a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800584c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800584e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005850:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005858:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800585c:	f7ff fe1e 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005860:	f241 3288 	movw	r2, #5000	; 0x1388
 8005864:	4629      	mov	r1, r5
 8005866:	4620      	mov	r0, r4
 8005868:	f7ff fe68 	bl	800553c <SDMMC_GetCmdResp1>
}
 800586c:	b007      	add	sp, #28
 800586e:	bd30      	pop	{r4, r5, pc}

08005870 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005870:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <SDMMC_GetCmdResp2+0x48>)
 8005872:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8005876:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	fbb3 f3f1 	udiv	r3, r3, r1
 800587e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005882:	434b      	muls	r3, r1
    if (count-- == 0U)
 8005884:	3b01      	subs	r3, #1
 8005886:	d313      	bcc.n	80058b0 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDMMCx->STA;
 8005888:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800588a:	f011 0f45 	tst.w	r1, #69	; 0x45
 800588e:	d0f9      	beq.n	8005884 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005890:	0509      	lsls	r1, r1, #20
 8005892:	d4f7      	bmi.n	8005884 <SDMMC_GetCmdResp2+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005894:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005896:	075b      	lsls	r3, r3, #29
 8005898:	d502      	bpl.n	80058a0 <SDMMC_GetCmdResp2+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800589a:	2004      	movs	r0, #4
 800589c:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800589e:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80058a0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80058a2:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80058aa:	23c5      	moveq	r3, #197	; 0xc5
 80058ac:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80058ae:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80058b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	20000f50 	.word	0x20000f50

080058bc <SDMMC_CmdSendCID>:
{
 80058bc:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80058be:	2300      	movs	r3, #0
{
 80058c0:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80058c2:	2202      	movs	r2, #2
{
 80058c4:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058c6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80058c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80058cc:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058ce:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058d6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058d8:	f7ff fde0 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80058dc:	4620      	mov	r0, r4
 80058de:	f7ff ffc7 	bl	8005870 <SDMMC_GetCmdResp2>
}
 80058e2:	b006      	add	sp, #24
 80058e4:	bd10      	pop	{r4, pc}

080058e6 <SDMMC_CmdSendCSD>:
{
 80058e6:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80058e8:	2209      	movs	r2, #9
{
 80058ea:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80058ec:	23c0      	movs	r3, #192	; 0xc0
{
 80058ee:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80058f0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058f2:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80058f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058fc:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005900:	a901      	add	r1, sp, #4
 8005902:	f7ff fdcb 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005906:	4620      	mov	r0, r4
 8005908:	f7ff ffb2 	bl	8005870 <SDMMC_GetCmdResp2>
}
 800590c:	b006      	add	sp, #24
 800590e:	bd10      	pop	{r4, pc}

08005910 <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005910:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <SDMMC_GetCmdResp3+0x40>)
 8005912:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8005916:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	fbb3 f3f1 	udiv	r3, r3, r1
 800591e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005922:	434b      	muls	r3, r1
    if (count-- == 0U)
 8005924:	3b01      	subs	r3, #1
 8005926:	d30f      	bcc.n	8005948 <SDMMC_GetCmdResp3+0x38>
    sta_reg = SDMMCx->STA;
 8005928:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800592a:	f011 0f45 	tst.w	r1, #69	; 0x45
 800592e:	d0f9      	beq.n	8005924 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005930:	0509      	lsls	r1, r1, #20
 8005932:	d4f7      	bmi.n	8005924 <SDMMC_GetCmdResp3+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005934:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8005936:	f010 0004 	ands.w	r0, r0, #4
 800593a:	d002      	beq.n	8005942 <SDMMC_GetCmdResp3+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800593c:	2004      	movs	r0, #4
 800593e:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005940:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005942:	23c5      	movs	r3, #197	; 0xc5
 8005944:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005946:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005948:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000f50 	.word	0x20000f50

08005954 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005954:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005958:	2229      	movs	r2, #41	; 0x29
 800595a:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800595c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
{
 8005960:	b510      	push	{r4, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	4604      	mov	r4, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005966:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800596a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800596c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005970:	2100      	movs	r1, #0
 8005972:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005976:	a901      	add	r1, sp, #4
 8005978:	f7ff fd90 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800597c:	4620      	mov	r0, r4
 800597e:	f7ff ffc7 	bl	8005910 <SDMMC_GetCmdResp3>
}
 8005982:	b006      	add	sp, #24
 8005984:	bd10      	pop	{r4, pc}
	...

08005988 <SDMMC_GetCmdResp6>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005988:	4b1f      	ldr	r3, [pc, #124]	; (8005a08 <SDMMC_GetCmdResp6+0x80>)
{
 800598a:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800598c:	681b      	ldr	r3, [r3, #0]
{
 800598e:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005990:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005994:	fbb3 f3f0 	udiv	r3, r3, r0
 8005998:	f241 3088 	movw	r0, #5000	; 0x1388
 800599c:	4343      	muls	r3, r0
    if (count-- == 0U)
 800599e:	3b01      	subs	r3, #1
 80059a0:	d329      	bcc.n	80059f6 <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDMMCx->STA;
 80059a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80059a4:	f010 0f45 	tst.w	r0, #69	; 0x45
 80059a8:	d0f9      	beq.n	800599e <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059aa:	0500      	lsls	r0, r0, #20
 80059ac:	d4f7      	bmi.n	800599e <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059b0:	0758      	lsls	r0, r3, #29
 80059b2:	d502      	bpl.n	80059ba <SDMMC_GetCmdResp6+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059b4:	2004      	movs	r0, #4
 80059b6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80059b8:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80059bc:	f010 0001 	ands.w	r0, r0, #1
 80059c0:	d002      	beq.n	80059c8 <SDMMC_GetCmdResp6+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059c2:	2301      	movs	r3, #1
 80059c4:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059c6:	e7f7      	b.n	80059b8 <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDMMCx->RESPCMD);
 80059c8:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	4299      	cmp	r1, r3
 80059ce:	d115      	bne.n	80059fc <SDMMC_GetCmdResp6+0x74>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80059d0:	23c5      	movs	r3, #197	; 0xc5
 80059d2:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 80059d4:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80059d6:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 80059da:	d102      	bne.n	80059e2 <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80059dc:	0c1b      	lsrs	r3, r3, #16
 80059de:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 80059e0:	e7ea      	b.n	80059b8 <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80059e2:	045a      	lsls	r2, r3, #17
 80059e4:	d40c      	bmi.n	8005a00 <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80059e6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80059ea:	bf14      	ite	ne
 80059ec:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80059f0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80059f4:	e7e0      	b.n	80059b8 <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80059f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80059fa:	e7dd      	b.n	80059b8 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059fc:	2001      	movs	r0, #1
 80059fe:	e7db      	b.n	80059b8 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005a04:	e7d8      	b.n	80059b8 <SDMMC_GetCmdResp6+0x30>
 8005a06:	bf00      	nop
 8005a08:	20000f50 	.word	0x20000f50

08005a0c <SDMMC_CmdSetRelAdd>:
{
 8005a0c:	b530      	push	{r4, r5, lr}
 8005a0e:	b089      	sub	sp, #36	; 0x24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005a10:	2300      	movs	r3, #0
 8005a12:	2503      	movs	r5, #3
{
 8005a14:	4604      	mov	r4, r0
 8005a16:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a18:	2140      	movs	r1, #64	; 0x40
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005a1a:	e9cd 3503 	strd	r3, r5, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a1e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a26:	a903      	add	r1, sp, #12
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a28:	9307      	str	r3, [sp, #28]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a2a:	f7ff fd37 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005a2e:	9a01      	ldr	r2, [sp, #4]
 8005a30:	4629      	mov	r1, r5
 8005a32:	4620      	mov	r0, r4
 8005a34:	f7ff ffa8 	bl	8005988 <SDMMC_GetCmdResp6>
}
 8005a38:	b009      	add	sp, #36	; 0x24
 8005a3a:	bd30      	pop	{r4, r5, pc}

08005a3c <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a3c:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <SDMMC_GetCmdResp7+0x50>)
 8005a3e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8005a42:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a4a:	f241 3188 	movw	r1, #5000	; 0x1388
 8005a4e:	434b      	muls	r3, r1
    if (count-- == 0U)
 8005a50:	3b01      	subs	r3, #1
 8005a52:	d317      	bcc.n	8005a84 <SDMMC_GetCmdResp7+0x48>
    sta_reg = SDMMCx->STA;
 8005a54:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005a56:	f011 0f45 	tst.w	r1, #69	; 0x45
 8005a5a:	d0f9      	beq.n	8005a50 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a5c:	0508      	lsls	r0, r1, #20
 8005a5e:	d4f7      	bmi.n	8005a50 <SDMMC_GetCmdResp7+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005a60:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005a62:	0759      	lsls	r1, r3, #29
 8005a64:	d502      	bpl.n	8005a6c <SDMMC_GetCmdResp7+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005a66:	2004      	movs	r0, #4
 8005a68:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a6a:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005a6c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8005a6e:	f010 0001 	ands.w	r0, r0, #1
 8005a72:	d002      	beq.n	8005a7a <SDMMC_GetCmdResp7+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005a74:	2301      	movs	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005a76:	6393      	str	r3, [r2, #56]	; 0x38
 8005a78:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005a7a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005a7c:	065b      	lsls	r3, r3, #25
 8005a7e:	d503      	bpl.n	8005a88 <SDMMC_GetCmdResp7+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005a80:	2340      	movs	r3, #64	; 0x40
 8005a82:	e7f8      	b.n	8005a76 <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 8005a84:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000f50 	.word	0x20000f50

08005a90 <SDMMC_CmdOperCond>:
{
 8005a90:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005a92:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
{
 8005a96:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005a98:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a9a:	2140      	movs	r1, #64	; 0x40
{
 8005a9c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005a9e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005aac:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005aae:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ab0:	f7ff fcf4 	bl	800549c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f7ff ffc1 	bl	8005a3c <SDMMC_GetCmdResp7>
}
 8005aba:	b006      	add	sp, #24
 8005abc:	bd10      	pop	{r4, pc}
	...

08005ac0 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005ac0:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <SD_ioctl+0x50>)
{
 8005ac2:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005ac4:	781c      	ldrb	r4, [r3, #0]
{
 8005ac6:	b089      	sub	sp, #36	; 0x24
 8005ac8:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005aca:	f014 0401 	ands.w	r4, r4, #1
 8005ace:	d11b      	bne.n	8005b08 <SD_ioctl+0x48>

  switch (cmd)
 8005ad0:	2903      	cmp	r1, #3
 8005ad2:	d803      	bhi.n	8005adc <SD_ioctl+0x1c>
 8005ad4:	e8df f001 	tbb	[pc, r1]
 8005ad8:	120c061a 	.word	0x120c061a
 8005adc:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 8005ade:	4620      	mov	r0, r4
 8005ae0:	b009      	add	sp, #36	; 0x24
 8005ae2:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8005ae4:	4668      	mov	r0, sp
 8005ae6:	f7fc fe1d 	bl	8002724 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005aea:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005aec:	602b      	str	r3, [r5, #0]
    break;
 8005aee:	e7f6      	b.n	8005ade <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8005af0:	4668      	mov	r0, sp
 8005af2:	f7fc fe17 	bl	8002724 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005af6:	9b07      	ldr	r3, [sp, #28]
 8005af8:	802b      	strh	r3, [r5, #0]
    break;
 8005afa:	e7f0      	b.n	8005ade <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8005afc:	4668      	mov	r0, sp
 8005afe:	f7fc fe11 	bl	8002724 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005b02:	9b07      	ldr	r3, [sp, #28]
 8005b04:	0a5b      	lsrs	r3, r3, #9
 8005b06:	e7f1      	b.n	8005aec <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005b08:	2403      	movs	r4, #3
 8005b0a:	e7e8      	b.n	8005ade <SD_ioctl+0x1e>
    res = RES_OK;
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	e7e6      	b.n	8005ade <SD_ioctl+0x1e>
 8005b10:	20000f5c 	.word	0x20000f5c

08005b14 <SD_read>:
{
 8005b14:	b508      	push	{r3, lr}
 8005b16:	4608      	mov	r0, r1
 8005b18:	4611      	mov	r1, r2
 8005b1a:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b20:	f7fc fcd6 	bl	80024d0 <BSP_SD_ReadBlocks>
 8005b24:	b920      	cbnz	r0, 8005b30 <SD_read+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005b26:	f7fc fdf3 	bl	8002710 <BSP_SD_GetCardState>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d1fb      	bne.n	8005b26 <SD_read+0x12>
}
 8005b2e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005b30:	2001      	movs	r0, #1
 8005b32:	e7fc      	b.n	8005b2e <SD_read+0x1a>

08005b34 <SD_status>:
{
 8005b34:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8005b36:	2301      	movs	r3, #1
 8005b38:	4c05      	ldr	r4, [pc, #20]	; (8005b50 <SD_status+0x1c>)
 8005b3a:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8005b3c:	f7fc fde8 	bl	8002710 <BSP_SD_GetCardState>
 8005b40:	b918      	cbnz	r0, 8005b4a <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8005b42:	7823      	ldrb	r3, [r4, #0]
 8005b44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005b48:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005b4a:	7820      	ldrb	r0, [r4, #0]
}
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000f5c 	.word	0x20000f5c

08005b54 <SD_write>:
{
 8005b54:	b508      	push	{r3, lr}
 8005b56:	4608      	mov	r0, r1
 8005b58:	4611      	mov	r1, r2
 8005b5a:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b60:	f7fc fcc6 	bl	80024f0 <BSP_SD_WriteBlocks>
 8005b64:	b920      	cbnz	r0, 8005b70 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005b66:	f7fc fdd3 	bl	8002710 <BSP_SD_GetCardState>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d1fb      	bne.n	8005b66 <SD_write+0x12>
}
 8005b6e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005b70:	2001      	movs	r0, #1
 8005b72:	e7fc      	b.n	8005b6e <SD_write+0x1a>

08005b74 <SD_initialize>:
{
 8005b74:	b538      	push	{r3, r4, r5, lr}
  Stat = STA_NOINIT;
 8005b76:	4c09      	ldr	r4, [pc, #36]	; (8005b9c <SD_initialize+0x28>)
 8005b78:	2501      	movs	r5, #1
 8005b7a:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_Init() == MSD_OK)
 8005b7c:	f7fc fd9c 	bl	80026b8 <BSP_SD_Init>
 8005b80:	b950      	cbnz	r0, 8005b98 <SD_initialize+0x24>
  Stat = STA_NOINIT;
 8005b82:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8005b84:	f7fc fdc4 	bl	8002710 <BSP_SD_GetCardState>
 8005b88:	b918      	cbnz	r0, 8005b92 <SD_initialize+0x1e>
    Stat &= ~STA_NOINIT;
 8005b8a:	7823      	ldrb	r3, [r4, #0]
 8005b8c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005b90:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005b92:	7823      	ldrb	r3, [r4, #0]
 8005b94:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8005b96:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005b98:	7820      	ldrb	r0, [r4, #0]
}
 8005b9a:	bd38      	pop	{r3, r4, r5, pc}
 8005b9c:	20000f5c 	.word	0x20000f5c

08005ba0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <disk_status+0x10>)
 8005ba2:	181a      	adds	r2, r3, r0
 8005ba4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	7a10      	ldrb	r0, [r2, #8]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	4718      	bx	r3
 8005bb0:	20010aa4 	.word	0x20010aa4

08005bb4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <disk_initialize+0x1c>)
 8005bb6:	5c1a      	ldrb	r2, [r3, r0]
 8005bb8:	b942      	cbnz	r2, 8005bcc <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8005bba:	2201      	movs	r2, #1
 8005bbc:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005bbe:	181a      	adds	r2, r3, r0
 8005bc0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005bc4:	7a10      	ldrb	r0, [r2, #8]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4718      	bx	r3
  }
  return stat;
}
 8005bcc:	2000      	movs	r0, #0
 8005bce:	4770      	bx	lr
 8005bd0:	20010aa4 	.word	0x20010aa4

08005bd4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005bd4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005bd6:	4c05      	ldr	r4, [pc, #20]	; (8005bec <disk_read+0x18>)
 8005bd8:	1825      	adds	r5, r4, r0
 8005bda:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8005bde:	6860      	ldr	r0, [r4, #4]
 8005be0:	6884      	ldr	r4, [r0, #8]
 8005be2:	7a28      	ldrb	r0, [r5, #8]
 8005be4:	46a4      	mov	ip, r4
  return res;
}
 8005be6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005be8:	4760      	bx	ip
 8005bea:	bf00      	nop
 8005bec:	20010aa4 	.word	0x20010aa4

08005bf0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005bf0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005bf2:	4c05      	ldr	r4, [pc, #20]	; (8005c08 <disk_write+0x18>)
 8005bf4:	1825      	adds	r5, r4, r0
 8005bf6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8005bfa:	6860      	ldr	r0, [r4, #4]
 8005bfc:	68c4      	ldr	r4, [r0, #12]
 8005bfe:	7a28      	ldrb	r0, [r5, #8]
 8005c00:	46a4      	mov	ip, r4
  return res;
}
 8005c02:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c04:	4760      	bx	ip
 8005c06:	bf00      	nop
 8005c08:	20010aa4 	.word	0x20010aa4

08005c0c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <disk_ioctl+0x18>)
{
 8005c0e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c10:	181c      	adds	r4, r3, r0
 8005c12:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	7a20      	ldrb	r0, [r4, #8]
 8005c1a:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8005c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c20:	4718      	bx	r3
 8005c22:	bf00      	nop
 8005c24:	20010aa4 	.word	0x20010aa4

08005c28 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8005c28:	6800      	ldr	r0, [r0, #0]
 8005c2a:	4770      	bx	lr

08005c2c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8005c2c:	0a0b      	lsrs	r3, r1, #8
 8005c2e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c30:	7043      	strb	r3, [r0, #1]
 8005c32:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8005c34:	0e09      	lsrs	r1, r1, #24
 8005c36:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8005c38:	70c1      	strb	r1, [r0, #3]
}
 8005c3a:	4770      	bx	lr

08005c3c <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8005c3c:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8005c3e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8005c42:	4290      	cmp	r0, r2
 8005c44:	d1fb      	bne.n	8005c3e <mem_set+0x2>
}
 8005c46:	4770      	bx	lr

08005c48 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8005c48:	4a1b      	ldr	r2, [pc, #108]	; (8005cb8 <chk_lock+0x70>)
 8005c4a:	6813      	ldr	r3, [r2, #0]
{
 8005c4c:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8005c4e:	b163      	cbz	r3, 8005c6a <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c50:	6804      	ldr	r4, [r0, #0]
 8005c52:	429c      	cmp	r4, r3
 8005c54:	d107      	bne.n	8005c66 <chk_lock+0x1e>
 8005c56:	6854      	ldr	r4, [r2, #4]
 8005c58:	6883      	ldr	r3, [r0, #8]
 8005c5a:	429c      	cmp	r4, r3
 8005c5c:	d103      	bne.n	8005c66 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 8005c5e:	6894      	ldr	r4, [r2, #8]
 8005c60:	6943      	ldr	r3, [r0, #20]
 8005c62:	429c      	cmp	r4, r3
 8005c64:	d020      	beq.n	8005ca8 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c66:	2400      	movs	r4, #0
 8005c68:	e000      	b.n	8005c6c <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8005c6a:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8005c6c:	6913      	ldr	r3, [r2, #16]
 8005c6e:	b1cb      	cbz	r3, 8005ca4 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c70:	6805      	ldr	r5, [r0, #0]
 8005c72:	42ab      	cmp	r3, r5
 8005c74:	d107      	bne.n	8005c86 <chk_lock+0x3e>
 8005c76:	6955      	ldr	r5, [r2, #20]
 8005c78:	6883      	ldr	r3, [r0, #8]
 8005c7a:	429d      	cmp	r5, r3
 8005c7c:	d103      	bne.n	8005c86 <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 8005c7e:	6995      	ldr	r5, [r2, #24]
 8005c80:	6943      	ldr	r3, [r0, #20]
 8005c82:	429d      	cmp	r5, r3
 8005c84:	d015      	beq.n	8005cb2 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005c86:	b96c      	cbnz	r4, 8005ca4 <chk_lock+0x5c>
 8005c88:	2902      	cmp	r1, #2
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2000      	moveq	r0, #0
 8005c8e:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8005c90:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005c92:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005c96:	899b      	ldrh	r3, [r3, #12]
 8005c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c9c:	bf14      	ite	ne
 8005c9e:	2000      	movne	r0, #0
 8005ca0:	2010      	moveq	r0, #16
 8005ca2:	e7f5      	b.n	8005c90 <chk_lock+0x48>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e7f3      	b.n	8005c90 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ca8:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005caa:	2900      	cmp	r1, #0
 8005cac:	d0f1      	beq.n	8005c92 <chk_lock+0x4a>
 8005cae:	2010      	movs	r0, #16
 8005cb0:	e7ee      	b.n	8005c90 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e7f9      	b.n	8005caa <chk_lock+0x62>
 8005cb6:	bf00      	nop
 8005cb8:	20010a80 	.word	0x20010a80

08005cbc <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8005cbc:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <inc_lock+0x80>)
{
 8005cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8005cc0:	6813      	ldr	r3, [r2, #0]
 8005cc2:	6806      	ldr	r6, [r0, #0]
 8005cc4:	429e      	cmp	r6, r3
 8005cc6:	d107      	bne.n	8005cd8 <inc_lock+0x1c>
 8005cc8:	6855      	ldr	r5, [r2, #4]
 8005cca:	6884      	ldr	r4, [r0, #8]
 8005ccc:	42a5      	cmp	r5, r4
 8005cce:	d103      	bne.n	8005cd8 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8005cd0:	6945      	ldr	r5, [r0, #20]
 8005cd2:	6894      	ldr	r4, [r2, #8]
 8005cd4:	42a5      	cmp	r5, r4
 8005cd6:	d022      	beq.n	8005d1e <inc_lock+0x62>
		if (Files[i].fs == dp->obj.fs &&
 8005cd8:	6914      	ldr	r4, [r2, #16]
 8005cda:	42b4      	cmp	r4, r6
 8005cdc:	d107      	bne.n	8005cee <inc_lock+0x32>
 8005cde:	6957      	ldr	r7, [r2, #20]
 8005ce0:	6885      	ldr	r5, [r0, #8]
 8005ce2:	42af      	cmp	r7, r5
 8005ce4:	d103      	bne.n	8005cee <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 8005ce6:	6997      	ldr	r7, [r2, #24]
 8005ce8:	6945      	ldr	r5, [r0, #20]
 8005cea:	42af      	cmp	r7, r5
 8005cec:	d021      	beq.n	8005d32 <inc_lock+0x76>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cee:	b10b      	cbz	r3, 8005cf4 <inc_lock+0x38>
 8005cf0:	bb0c      	cbnz	r4, 8005d36 <inc_lock+0x7a>
 8005cf2:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8005cf4:	011d      	lsls	r5, r3, #4
 8005cf6:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 8005cfa:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 8005cfc:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8005cfe:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 8005d00:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 8005d02:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8005d04:	2000      	movs	r0, #0
 8005d06:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d08:	b981      	cbnz	r1, 8005d2c <inc_lock+0x70>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d0a:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8005d0e:	8989      	ldrh	r1, [r1, #12]
 8005d10:	3101      	adds	r1, #1
 8005d12:	b289      	uxth	r1, r1
 8005d14:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 8005d18:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d1a:	8191      	strh	r1, [r2, #12]
}
 8005d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d1e:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d0f2      	beq.n	8005d0a <inc_lock+0x4e>
 8005d24:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8005d28:	8989      	ldrh	r1, [r1, #12]
 8005d2a:	b921      	cbnz	r1, 8005d36 <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d30:	e7f0      	b.n	8005d14 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d32:	2301      	movs	r3, #1
 8005d34:	e7f4      	b.n	8005d20 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005d36:	2000      	movs	r0, #0
 8005d38:	e7f0      	b.n	8005d1c <inc_lock+0x60>
 8005d3a:	bf00      	nop
 8005d3c:	20010a80 	.word	0x20010a80

08005d40 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d40:	3801      	subs	r0, #1
 8005d42:	2801      	cmp	r0, #1
 8005d44:	d815      	bhi.n	8005d72 <dec_lock+0x32>
		n = Files[i].ctr;
 8005d46:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <dec_lock+0x38>)
 8005d48:	0101      	lsls	r1, r0, #4
 8005d4a:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8005d4e:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d54:	d104      	bne.n	8005d60 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8005d56:	2300      	movs	r3, #0
 8005d58:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	5050      	str	r0, [r2, r1]
 8005d5e:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0fa      	beq.n	8005d5a <dec_lock+0x1a>
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8005d68:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f5      	beq.n	8005d5a <dec_lock+0x1a>
		res = FR_OK;
 8005d6e:	2000      	movs	r0, #0
 8005d70:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005d72:	2002      	movs	r0, #2
	}
	return res;
}
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20010a80 	.word	0x20010a80

08005d7c <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d7c:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <clear_lock+0x18>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4290      	cmp	r0, r2
 8005d82:	bf04      	itt	eq
 8005d84:	2200      	moveq	r2, #0
 8005d86:	601a      	streq	r2, [r3, #0]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	4290      	cmp	r0, r2
 8005d8c:	bf04      	itt	eq
 8005d8e:	2200      	moveq	r2, #0
 8005d90:	611a      	streq	r2, [r3, #16]
	}
}
 8005d92:	4770      	bx	lr
 8005d94:	20010a80 	.word	0x20010a80

08005d98 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005d98:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 8005d9a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005d9c:	3b02      	subs	r3, #2
 8005d9e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8005da0:	bf83      	ittte	hi
 8005da2:	8943      	ldrhhi	r3, [r0, #10]
 8005da4:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 8005da6:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005daa:	2000      	movls	r0, #0
}
 8005dac:	4770      	bx	lr

08005dae <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005dae:	6802      	ldr	r2, [r0, #0]
 8005db0:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005db2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005db4:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005db6:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005db8:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005dbc:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005dbe:	b130      	cbz	r0, 8005dce <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8005dc0:	4281      	cmp	r1, r0
 8005dc2:	d302      	bcc.n	8005dca <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005dc4:	1a09      	subs	r1, r1, r0
 8005dc6:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005dc8:	e7f8      	b.n	8005dbc <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8005dca:	6858      	ldr	r0, [r3, #4]
 8005dcc:	4408      	add	r0, r1
}
 8005dce:	4770      	bx	lr

08005dd0 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8005dd0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005dd4:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8005dd6:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
 8005dd8:	7803      	ldrb	r3, [r0, #0]
 8005dda:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005ddc:	bf01      	itttt	eq
 8005dde:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8005de0:	750a      	strbeq	r2, [r1, #20]
 8005de2:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8005de4:	754a      	strbeq	r2, [r1, #21]
	}
}
 8005de6:	4770      	bx	lr

08005de8 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005de8:	6802      	ldr	r2, [r0, #0]
{
 8005dea:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8005dec:	b152      	cbz	r2, 8005e04 <get_ldnumber+0x1c>
 8005dee:	4611      	mov	r1, r2
 8005df0:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005df6:	2c20      	cmp	r4, #32
 8005df8:	d90c      	bls.n	8005e14 <get_ldnumber+0x2c>
 8005dfa:	2c3a      	cmp	r4, #58	; 0x3a
 8005dfc:	d1f8      	bne.n	8005df0 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8005dfe:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005e00:	428b      	cmp	r3, r1
 8005e02:	d002      	beq.n	8005e0a <get_ldnumber+0x22>
	int vol = -1;
 8005e04:	f04f 30ff 	mov.w	r0, #4294967295
 8005e08:	e005      	b.n	8005e16 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005e0a:	7812      	ldrb	r2, [r2, #0]
 8005e0c:	2a30      	cmp	r2, #48	; 0x30
 8005e0e:	d1f9      	bne.n	8005e04 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 8005e10:	3301      	adds	r3, #1
 8005e12:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005e14:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8005e16:	bd10      	pop	{r4, pc}

08005e18 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005e18:	3801      	subs	r0, #1
 8005e1a:	440a      	add	r2, r1
			*d++ = *s++;
 8005e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8005e20:	4291      	cmp	r1, r2
			*d++ = *s++;
 8005e22:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8005e26:	d1f9      	bne.n	8005e1c <mem_cpy.part.0+0x4>
}
 8005e28:	4770      	bx	lr

08005e2a <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8005e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 8005e2e:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e30:	f100 0834 	add.w	r8, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8005e34:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e36:	2301      	movs	r3, #1
 8005e38:	4632      	mov	r2, r6
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	7840      	ldrb	r0, [r0, #1]
 8005e3e:	f7ff fed7 	bl	8005bf0 <disk_write>
 8005e42:	4605      	mov	r5, r0
 8005e44:	b9a8      	cbnz	r0, 8005e72 <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e48:	69e2      	ldr	r2, [r4, #28]
 8005e4a:	1af3      	subs	r3, r6, r3
			fs->wflag = 0;
 8005e4c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d202      	bcs.n	8005e58 <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e52:	78a7      	ldrb	r7, [r4, #2]
 8005e54:	2f01      	cmp	r7, #1
 8005e56:	d802      	bhi.n	8005e5e <sync_window.part.0+0x34>
}
 8005e58:	4628      	mov	r0, r5
 8005e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
 8005e5e:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e60:	4641      	mov	r1, r8
 8005e62:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e64:	3f01      	subs	r7, #1
					wsect += fs->fsize;
 8005e66:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4632      	mov	r2, r6
 8005e6c:	f7ff fec0 	bl	8005bf0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e70:	e7f0      	b.n	8005e54 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
 8005e72:	2501      	movs	r5, #1
 8005e74:	e7f0      	b.n	8005e58 <sync_window.part.0+0x2e>

08005e76 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e76:	78c3      	ldrb	r3, [r0, #3]
 8005e78:	b10b      	cbz	r3, 8005e7e <sync_window+0x8>
 8005e7a:	f7ff bfd6 	b.w	8005e2a <sync_window.part.0>
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	4770      	bx	lr

08005e82 <move_window>:
{
 8005e82:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e84:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8005e86:	4605      	mov	r5, r0
 8005e88:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e8a:	428b      	cmp	r3, r1
 8005e8c:	d010      	beq.n	8005eb0 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 8005e8e:	f7ff fff2 	bl	8005e76 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e92:	b960      	cbnz	r0, 8005eae <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e94:	4622      	mov	r2, r4
 8005e96:	2301      	movs	r3, #1
 8005e98:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8005e9c:	7868      	ldrb	r0, [r5, #1]
 8005e9e:	f7ff fe99 	bl	8005bd4 <disk_read>
				res = FR_DISK_ERR;
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	bf1c      	itt	ne
 8005ea6:	f04f 34ff 	movne.w	r4, #4294967295
 8005eaa:	2001      	movne	r0, #1
			fs->winsect = sector;
 8005eac:	632c      	str	r4, [r5, #48]	; 0x30
}
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	e7fc      	b.n	8005eae <move_window+0x2c>

08005eb4 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005eb4:	2300      	movs	r3, #0
{
 8005eb6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005eb8:	70c3      	strb	r3, [r0, #3]
 8005eba:	f04f 33ff 	mov.w	r3, #4294967295
{
 8005ebe:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005ec0:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005ec2:	f7ff ffde 	bl	8005e82 <move_window>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	bb18      	cbnz	r0, 8005f12 <check_fs+0x5e>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005eca:	f8b4 1232 	ldrh.w	r1, [r4, #562]	; 0x232
 8005ece:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005ed2:	4291      	cmp	r1, r2
 8005ed4:	d11f      	bne.n	8005f16 <check_fs+0x62>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005ed6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005eda:	2ae9      	cmp	r2, #233	; 0xe9
 8005edc:	d005      	beq.n	8005eea <check_fs+0x36>
 8005ede:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005ee0:	490f      	ldr	r1, [pc, #60]	; (8005f20 <check_fs+0x6c>)
 8005ee2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8005ee6:	428a      	cmp	r2, r1
 8005ee8:	d117      	bne.n	8005f1a <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005eea:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8005eee:	4a0d      	ldr	r2, [pc, #52]	; (8005f24 <check_fs+0x70>)
 8005ef0:	f7ff fe9a 	bl	8005c28 <ld_dword>
 8005ef4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005ef8:	4290      	cmp	r0, r2
 8005efa:	d008      	beq.n	8005f0e <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005efc:	f102 524c 	add.w	r2, r2, #855638016	; 0x33000000
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005f00:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8005f04:	f7ff fe90 	bl	8005c28 <ld_dword>
	return 2;
 8005f08:	4290      	cmp	r0, r2
 8005f0a:	bf18      	it	ne
 8005f0c:	2302      	movne	r3, #2
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005f12:	2304      	movs	r3, #4
 8005f14:	e7fb      	b.n	8005f0e <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005f16:	2303      	movs	r3, #3
 8005f18:	e7f9      	b.n	8005f0e <check_fs+0x5a>
	return 2;
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e7f7      	b.n	8005f0e <check_fs+0x5a>
 8005f1e:	bf00      	nop
 8005f20:	009000eb 	.word	0x009000eb
 8005f24:	00544146 	.word	0x00544146

08005f28 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005f28:	2901      	cmp	r1, #1
{
 8005f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005f34:	d974      	bls.n	8006020 <put_fat+0xf8>
 8005f36:	6983      	ldr	r3, [r0, #24]
 8005f38:	428b      	cmp	r3, r1
 8005f3a:	d971      	bls.n	8006020 <put_fat+0xf8>
		switch (fs->fs_type) {
 8005f3c:	7803      	ldrb	r3, [r0, #0]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d040      	beq.n	8005fc4 <put_fat+0x9c>
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d051      	beq.n	8005fea <put_fat+0xc2>
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d16a      	bne.n	8006020 <put_fat+0xf8>
			bc = (UINT)clst; bc += bc / 2;
 8005f4a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f4e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8005f50:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8005f54:	f7ff ff95 	bl	8005e82 <move_window>
 8005f58:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 8005f5a:	bb40      	cbnz	r0, 8005fae <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f5c:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 8005f60:	f106 0934 	add.w	r9, r6, #52	; 0x34
 8005f64:	f108 0a01 	add.w	sl, r8, #1
 8005f68:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f6c:	bf08      	it	eq
 8005f6e:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f70:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f72:	bf1f      	itttt	ne
 8005f74:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8005f78:	f003 020f 	andne.w	r2, r3, #15
 8005f7c:	013b      	lslne	r3, r7, #4
 8005f7e:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8005f82:	bf18      	it	ne
 8005f84:	4313      	orrne	r3, r2
 8005f86:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8005f8a:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f8c:	6a71      	ldr	r1, [r6, #36]	; 0x24
			fs->wflag = 1;
 8005f8e:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f90:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8005f94:	f7ff ff75 	bl	8005e82 <move_window>
			if (res != FR_OK) break;
 8005f98:	4605      	mov	r5, r0
 8005f9a:	b940      	cbnz	r0, 8005fae <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 8005f9c:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005fa0:	b144      	cbz	r4, 8005fb4 <put_fat+0x8c>
 8005fa2:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8005fa6:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8005faa:	2301      	movs	r3, #1
 8005fac:	70f3      	strb	r3, [r6, #3]
}
 8005fae:	4628      	mov	r0, r5
 8005fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005fb4:	f819 300a 	ldrb.w	r3, [r9, sl]
 8005fb8:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8005fbc:	f023 030f 	bic.w	r3, r3, #15
 8005fc0:	431f      	orrs	r7, r3
 8005fc2:	e7f0      	b.n	8005fa6 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005fc4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8005fc6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005fca:	f7ff ff5a 	bl	8005e82 <move_window>
			if (res != FR_OK) break;
 8005fce:	4605      	mov	r5, r0
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d1ec      	bne.n	8005fae <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005fd4:	0064      	lsls	r4, r4, #1
 8005fd6:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8005fda:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8005fde:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005fe0:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8005fe2:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8005fe6:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 8005fe8:	e7df      	b.n	8005faa <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005fea:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8005fec:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005ff0:	f7ff ff47 	bl	8005e82 <move_window>
			if (res != FR_OK) break;
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d1d9      	bne.n	8005fae <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005ffa:	00a4      	lsls	r4, r4, #2
 8005ffc:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8006000:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8006004:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8006008:	441c      	add	r4, r3
 800600a:	4620      	mov	r0, r4
 800600c:	f7ff fe0c 	bl	8005c28 <ld_dword>
 8006010:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006014:	ea47 0100 	orr.w	r1, r7, r0
 8006018:	4620      	mov	r0, r4
 800601a:	f7ff fe07 	bl	8005c2c <st_dword>
 800601e:	e7c4      	b.n	8005faa <put_fat+0x82>
		switch (fs->fs_type) {
 8006020:	2502      	movs	r5, #2
 8006022:	e7c4      	b.n	8005fae <put_fat+0x86>

08006024 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006024:	b140      	cbz	r0, 8006038 <unlock_fs+0x14>
 8006026:	f1a1 030b 	sub.w	r3, r1, #11
 800602a:	2b01      	cmp	r3, #1
 800602c:	d904      	bls.n	8006038 <unlock_fs+0x14>
 800602e:	290f      	cmp	r1, #15
 8006030:	d002      	beq.n	8006038 <unlock_fs+0x14>
		ff_rel_grant(fs->sobj);
 8006032:	68c0      	ldr	r0, [r0, #12]
 8006034:	f000 bedd 	b.w	8006df2 <ff_rel_grant>
}
 8006038:	4770      	bx	lr

0800603a <sync_fs>:
{
 800603a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603c:	4604      	mov	r4, r0
	res = sync_window(fs);
 800603e:	f7ff ff1a 	bl	8005e76 <sync_window>
 8006042:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8006044:	2800      	cmp	r0, #0
 8006046:	d142      	bne.n	80060ce <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006048:	7823      	ldrb	r3, [r4, #0]
 800604a:	2b03      	cmp	r3, #3
 800604c:	d137      	bne.n	80060be <sync_fs+0x84>
 800604e:	7927      	ldrb	r7, [r4, #4]
 8006050:	2f01      	cmp	r7, #1
 8006052:	d134      	bne.n	80060be <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8006054:	f104 0634 	add.w	r6, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8006058:	2355      	movs	r3, #85	; 0x55
			mem_set(fs->win, 0, SS(fs));
 800605a:	4601      	mov	r1, r0
 800605c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006060:	4630      	mov	r0, r6
 8006062:	f7ff fdeb 	bl	8005c3c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8006066:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 800606a:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
 800606c:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800606e:	2172      	movs	r1, #114	; 0x72
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006070:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
 8006074:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8006078:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 800607a:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 800607e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8006082:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8006086:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 8006088:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 800608c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8006090:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 8006094:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
	*ptr++ = (BYTE)val; val >>= 8;
 8006098:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800609c:	6961      	ldr	r1, [r4, #20]
 800609e:	f7ff fdc5 	bl	8005c2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80060a2:	6921      	ldr	r1, [r4, #16]
 80060a4:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80060a8:	f7ff fdc0 	bl	8005c2c <st_dword>
			fs->winsect = fs->volbase + 1;
 80060ac:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80060ae:	463b      	mov	r3, r7
 80060b0:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 80060b2:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80060b4:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 80060b6:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80060b8:	f7ff fd9a 	bl	8005bf0 <disk_write>
			fs->fsi_flag = 0;
 80060bc:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80060be:	2200      	movs	r2, #0
 80060c0:	7860      	ldrb	r0, [r4, #1]
 80060c2:	4611      	mov	r1, r2
 80060c4:	f7ff fda2 	bl	8005c0c <disk_ioctl>
	res = sync_window(fs);
 80060c8:	3800      	subs	r0, #0
 80060ca:	bf18      	it	ne
 80060cc:	2001      	movne	r0, #1
}
 80060ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80060d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80060d4:	2300      	movs	r3, #0
{
 80060d6:	460f      	mov	r7, r1
 80060d8:	4615      	mov	r5, r2
	*rfs = 0;
 80060da:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80060dc:	f7ff fe84 	bl	8005de8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80060e0:	1e06      	subs	r6, r0, #0
 80060e2:	f2c0 811a 	blt.w	800631a <find_volume+0x24a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80060e6:	4b91      	ldr	r3, [pc, #580]	; (800632c <find_volume+0x25c>)
 80060e8:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80060ec:	2c00      	cmp	r4, #0
 80060ee:	f000 8116 	beq.w	800631e <find_volume+0x24e>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80060f2:	68e0      	ldr	r0, [r4, #12]
 80060f4:	f000 fe74 	bl	8006de0 <ff_req_grant>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	f000 8112 	beq.w	8006322 <find_volume+0x252>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80060fe:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006100:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006104:	7823      	ldrb	r3, [r4, #0]
 8006106:	b16b      	cbz	r3, 8006124 <find_volume+0x54>
		stat = disk_status(fs->drv);
 8006108:	7860      	ldrb	r0, [r4, #1]
 800610a:	f7ff fd49 	bl	8005ba0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800610e:	07c1      	lsls	r1, r0, #31
 8006110:	d408      	bmi.n	8006124 <find_volume+0x54>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006112:	b11d      	cbz	r5, 800611c <find_volume+0x4c>
 8006114:	f010 0504 	ands.w	r5, r0, #4
 8006118:	d000      	beq.n	800611c <find_volume+0x4c>
				return FR_WRITE_PROTECTED;
 800611a:	250a      	movs	r5, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800611c:	4628      	mov	r0, r5
 800611e:	b004      	add	sp, #16
 8006120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8006124:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006126:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8006128:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800612a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800612c:	f7ff fd42 	bl	8005bb4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006130:	07c2      	lsls	r2, r0, #31
 8006132:	f100 80f8 	bmi.w	8006326 <find_volume+0x256>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006136:	b10d      	cbz	r5, 800613c <find_volume+0x6c>
 8006138:	0743      	lsls	r3, r0, #29
 800613a:	d4ee      	bmi.n	800611a <find_volume+0x4a>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800613c:	2100      	movs	r1, #0
 800613e:	4620      	mov	r0, r4
 8006140:	f7ff feb8 	bl	8005eb4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006144:	2802      	cmp	r0, #2
 8006146:	f040 80cd 	bne.w	80062e4 <find_volume+0x214>
 800614a:	466f      	mov	r7, sp
 800614c:	f504 73fd 	add.w	r3, r4, #506	; 0x1fa
 8006150:	f204 213a 	addw	r1, r4, #570	; 0x23a
 8006154:	463a      	mov	r2, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006156:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 800615a:	b110      	cbz	r0, 8006162 <find_volume+0x92>
 800615c:	4618      	mov	r0, r3
 800615e:	f7ff fd63 	bl	8005c28 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006162:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006164:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006168:	428b      	cmp	r3, r1
 800616a:	d1f4      	bne.n	8006156 <find_volume+0x86>
 800616c:	2500      	movs	r5, #0
			bsect = br[i];
 800616e:	f857 6b04 	ldr.w	r6, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006172:	2e00      	cmp	r6, #0
 8006174:	f000 80ad 	beq.w	80062d2 <find_volume+0x202>
 8006178:	4631      	mov	r1, r6
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff fe9a 	bl	8005eb4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006180:	2801      	cmp	r0, #1
 8006182:	f200 80a7 	bhi.w	80062d4 <find_volume+0x204>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006186:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
 800618a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800618e:	f040 80ad 	bne.w	80062ec <find_volume+0x21c>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006192:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006196:	b921      	cbnz	r1, 80061a2 <find_volume+0xd2>
 8006198:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800619c:	f7ff fd44 	bl	8005c28 <ld_dword>
 80061a0:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80061a2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
		fs->fsize = fasize;
 80061a6:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80061a8:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80061aa:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	f200 809d 	bhi.w	80062ec <find_volume+0x21c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80061b2:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 80061b6:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80061b8:	2d00      	cmp	r5, #0
 80061ba:	f000 8097 	beq.w	80062ec <find_volume+0x21c>
 80061be:	1e6b      	subs	r3, r5, #1
 80061c0:	422b      	tst	r3, r5
 80061c2:	f040 8093 	bne.w	80062ec <find_volume+0x21c>
	rv = ptr[1];
 80061c6:	f8b4 8045 	ldrh.w	r8, [r4, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80061ca:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80061ce:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80061d2:	f040 808b 	bne.w	80062ec <find_volume+0x21c>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80061d6:	f8b4 0047 	ldrh.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80061da:	b918      	cbnz	r0, 80061e4 <find_volume+0x114>
 80061dc:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80061e0:	f7ff fd22 	bl	8005c28 <ld_dword>
	rv = ptr[1];
 80061e4:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80061e8:	2f00      	cmp	r7, #0
 80061ea:	d07f      	beq.n	80062ec <find_volume+0x21c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80061ec:	fb01 fc02 	mul.w	ip, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80061f0:	eb07 1218 	add.w	r2, r7, r8, lsr #4
 80061f4:	eb02 0e0c 	add.w	lr, r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80061f8:	4570      	cmp	r0, lr
 80061fa:	d377      	bcc.n	80062ec <find_volume+0x21c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80061fc:	eba0 020e 	sub.w	r2, r0, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006200:	42aa      	cmp	r2, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006202:	fbb2 f3f5 	udiv	r3, r2, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006206:	d371      	bcc.n	80062ec <find_volume+0x21c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006208:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800620c:	4293      	cmp	r3, r2
 800620e:	d871      	bhi.n	80062f4 <find_volume+0x224>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006210:	f640 75f5 	movw	r5, #4085	; 0xff5
 8006214:	42ab      	cmp	r3, r5
 8006216:	bf8c      	ite	hi
 8006218:	2502      	movhi	r5, #2
 800621a:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800621c:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800621e:	4437      	add	r7, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8006220:	eb0e 0206 	add.w	r2, lr, r6
		if (fmt == FS_FAT32) {
 8006224:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006226:	61a3      	str	r3, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006228:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800622a:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800622c:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800622e:	d163      	bne.n	80062f8 <find_volume+0x228>
	rv = rv << 8 | ptr[0];
 8006230:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006234:	ea52 0208 	orrs.w	r2, r2, r8
 8006238:	d158      	bne.n	80062ec <find_volume+0x21c>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800623a:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800623c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8006240:	f7ff fcf2 	bl	8005c28 <ld_dword>
 8006244:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006246:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800624a:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800624e:	d34d      	bcc.n	80062ec <find_volume+0x21c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006250:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006254:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006256:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800625a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800625e:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006260:	d12b      	bne.n	80062ba <find_volume+0x1ea>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006262:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8006266:	2b01      	cmp	r3, #1
 8006268:	d127      	bne.n	80062ba <find_volume+0x1ea>
			&& move_window(fs, bsect + 1) == FR_OK)
 800626a:	1c71      	adds	r1, r6, #1
 800626c:	4620      	mov	r0, r4
 800626e:	f7ff fe08 	bl	8005e82 <move_window>
 8006272:	bb10      	cbnz	r0, 80062ba <find_volume+0x1ea>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006274:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 8006278:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
 800627c:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800627e:	429a      	cmp	r2, r3
 8006280:	d11b      	bne.n	80062ba <find_volume+0x1ea>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006282:	4b2b      	ldr	r3, [pc, #172]	; (8006330 <find_volume+0x260>)
 8006284:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8006288:	f7ff fcce 	bl	8005c28 <ld_dword>
 800628c:	4298      	cmp	r0, r3
 800628e:	d114      	bne.n	80062ba <find_volume+0x1ea>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006290:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8006294:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8006298:	f7ff fcc6 	bl	8005c28 <ld_dword>
 800629c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80062a0:	3320      	adds	r3, #32
 80062a2:	4298      	cmp	r0, r3
 80062a4:	d109      	bne.n	80062ba <find_volume+0x1ea>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80062a6:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80062aa:	f7ff fcbd 	bl	8005c28 <ld_dword>
 80062ae:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80062b0:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80062b4:	f7ff fcb8 	bl	8005c28 <ld_dword>
 80062b8:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 80062ba:	4a1e      	ldr	r2, [pc, #120]	; (8006334 <find_volume+0x264>)
	clear_lock(fs);
 80062bc:	4620      	mov	r0, r4
	fs->fs_type = fmt;		/* FAT sub-type */
 80062be:	7025      	strb	r5, [r4, #0]
	return FR_OK;
 80062c0:	2500      	movs	r5, #0
	fs->id = ++Fsid;		/* File system mount ID */
 80062c2:	8813      	ldrh	r3, [r2, #0]
 80062c4:	3301      	adds	r3, #1
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	80e3      	strh	r3, [r4, #6]
 80062ca:	8013      	strh	r3, [r2, #0]
	clear_lock(fs);
 80062cc:	f7ff fd56 	bl	8005d7c <clear_lock>
	return FR_OK;
 80062d0:	e724      	b.n	800611c <find_volume+0x4c>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80062d2:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80062d4:	3501      	adds	r5, #1
 80062d6:	2d04      	cmp	r5, #4
 80062d8:	f47f af49 	bne.w	800616e <find_volume+0x9e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80062dc:	2804      	cmp	r0, #4
 80062de:	d105      	bne.n	80062ec <find_volume+0x21c>
 80062e0:	2501      	movs	r5, #1
 80062e2:	e71b      	b.n	800611c <find_volume+0x4c>
 80062e4:	2804      	cmp	r0, #4
 80062e6:	d0fb      	beq.n	80062e0 <find_volume+0x210>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80062e8:	2801      	cmp	r0, #1
 80062ea:	d901      	bls.n	80062f0 <find_volume+0x220>
 80062ec:	250d      	movs	r5, #13
 80062ee:	e715      	b.n	800611c <find_volume+0x4c>
	bsect = 0;
 80062f0:	2600      	movs	r6, #0
 80062f2:	e748      	b.n	8006186 <find_volume+0xb6>
		fmt = FS_FAT32;
 80062f4:	2503      	movs	r5, #3
 80062f6:	e791      	b.n	800621c <find_volume+0x14c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80062f8:	f1b8 0f00 	cmp.w	r8, #0
 80062fc:	d0f6      	beq.n	80062ec <find_volume+0x21c>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80062fe:	2d02      	cmp	r5, #2
 8006300:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006304:	4467      	add	r7, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006306:	bf1a      	itte	ne
 8006308:	18d2      	addne	r2, r2, r3
 800630a:	f003 0301 	andne.w	r3, r3, #1
 800630e:	4613      	moveq	r3, r2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006310:	62a7      	str	r7, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006312:	bf18      	it	ne
 8006314:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8006318:	e795      	b.n	8006246 <find_volume+0x176>
	if (vol < 0) return FR_INVALID_DRIVE;
 800631a:	250b      	movs	r5, #11
 800631c:	e6fe      	b.n	800611c <find_volume+0x4c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800631e:	250c      	movs	r5, #12
 8006320:	e6fc      	b.n	800611c <find_volume+0x4c>
	ENTER_FF(fs);						/* Lock the volume */
 8006322:	250f      	movs	r5, #15
 8006324:	e6fa      	b.n	800611c <find_volume+0x4c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006326:	2503      	movs	r5, #3
 8006328:	e6f8      	b.n	800611c <find_volume+0x4c>
 800632a:	bf00      	nop
 800632c:	20010a7c 	.word	0x20010a7c
 8006330:	41615252 	.word	0x41615252
 8006334:	20010aa0 	.word	0x20010aa0

08006338 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8006338:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800633a:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800633c:	bf04      	itt	eq
 800633e:	8a8a      	ldrheq	r2, [r1, #20]
 8006340:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8006344:	4618      	mov	r0, r3
 8006346:	4770      	bx	lr

08006348 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006348:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800634a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634c:	4606      	mov	r6, r0
 800634e:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006350:	d94e      	bls.n	80063f0 <get_fat.isra.0+0xa8>
 8006352:	6983      	ldr	r3, [r0, #24]
 8006354:	4299      	cmp	r1, r3
 8006356:	d24b      	bcs.n	80063f0 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 8006358:	7803      	ldrb	r3, [r0, #0]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d029      	beq.n	80063b2 <get_fat.isra.0+0x6a>
 800635e:	2b03      	cmp	r3, #3
 8006360:	d034      	beq.n	80063cc <get_fat.isra.0+0x84>
 8006362:	2b01      	cmp	r3, #1
 8006364:	d144      	bne.n	80063f0 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 8006366:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800636a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800636c:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8006370:	f7ff fd87 	bl	8005e82 <move_window>
 8006374:	b110      	cbz	r0, 800637c <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006376:	f04f 30ff 	mov.w	r0, #4294967295
}
 800637a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800637c:	1c6f      	adds	r7, r5, #1
 800637e:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006382:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8006384:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 8006386:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006388:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800638c:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006390:	f7ff fd77 	bl	8005e82 <move_window>
 8006394:	2800      	cmp	r0, #0
 8006396:	d1ee      	bne.n	8006376 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006398:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800639c:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800639e:	443e      	add	r6, r7
 80063a0:	f896 0034 	ldrb.w	r0, [r6, #52]	; 0x34
 80063a4:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80063a8:	bf4c      	ite	mi
 80063aa:	0900      	lsrmi	r0, r0, #4
 80063ac:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80063b0:	e7e3      	b.n	800637a <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063b2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80063b4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80063b8:	f7ff fd63 	bl	8005e82 <move_window>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d1da      	bne.n	8006376 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80063c0:	0064      	lsls	r4, r4, #1
 80063c2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80063c6:	4426      	add	r6, r4
 80063c8:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
			break;
 80063ca:	e7d6      	b.n	800637a <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80063cc:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80063ce:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80063d2:	f7ff fd56 	bl	8005e82 <move_window>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d1cd      	bne.n	8006376 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80063da:	00a4      	lsls	r4, r4, #2
 80063dc:	f106 0034 	add.w	r0, r6, #52	; 0x34
 80063e0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80063e4:	4420      	add	r0, r4
 80063e6:	f7ff fc1f 	bl	8005c28 <ld_dword>
 80063ea:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80063ee:	e7c4      	b.n	800637a <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 80063f0:	2001      	movs	r0, #1
	return val;
 80063f2:	e7c2      	b.n	800637a <get_fat.isra.0+0x32>

080063f4 <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80063f4:	b538      	push	{r3, r4, r5, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80063f6:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 80063f8:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80063fa:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80063fc:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80063fe:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006400:	b99a      	cbnz	r2, 800642a <dir_sdi.constprop.0+0x36>
 8006402:	782b      	ldrb	r3, [r5, #0]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <dir_sdi.constprop.0+0x18>
		clst = fs->dirbase;
 8006408:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800640a:	b96b      	cbnz	r3, 8006428 <dir_sdi.constprop.0+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800640c:	892b      	ldrh	r3, [r5, #8]
 800640e:	b90b      	cbnz	r3, 8006414 <dir_sdi.constprop.0+0x20>
 8006410:	2002      	movs	r0, #2
}
 8006412:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8006414:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006416:	61e3      	str	r3, [r4, #28]
	if (!dp->sect) return FR_INT_ERR;
 8006418:	69e3      	ldr	r3, [r4, #28]
	dp->clust = clst;					/* Current cluster# */
 800641a:	61a2      	str	r2, [r4, #24]
	if (!dp->sect) return FR_INT_ERR;
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0f7      	beq.n	8006410 <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006420:	3534      	adds	r5, #52	; 0x34
	return FR_OK;
 8006422:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006424:	6225      	str	r5, [r4, #32]
	return FR_OK;
 8006426:	e7f4      	b.n	8006412 <dir_sdi.constprop.0+0x1e>
 8006428:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800642a:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800642c:	b963      	cbnz	r3, 8006448 <dir_sdi.constprop.0+0x54>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800642e:	4611      	mov	r1, r2
 8006430:	6820      	ldr	r0, [r4, #0]
 8006432:	f7ff ff89 	bl	8006348 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006436:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006438:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800643a:	d00b      	beq.n	8006454 <dir_sdi.constprop.0+0x60>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800643c:	2801      	cmp	r0, #1
 800643e:	d9e7      	bls.n	8006410 <dir_sdi.constprop.0+0x1c>
 8006440:	69ab      	ldr	r3, [r5, #24]
 8006442:	4298      	cmp	r0, r3
 8006444:	d3f3      	bcc.n	800642e <dir_sdi.constprop.0+0x3a>
 8006446:	e7e3      	b.n	8006410 <dir_sdi.constprop.0+0x1c>
		dp->sect = clust2sect(fs, clst);
 8006448:	4611      	mov	r1, r2
 800644a:	4628      	mov	r0, r5
 800644c:	f7ff fca4 	bl	8005d98 <clust2sect>
 8006450:	61e0      	str	r0, [r4, #28]
 8006452:	e7e1      	b.n	8006418 <dir_sdi.constprop.0+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006454:	2001      	movs	r0, #1
 8006456:	e7dc      	b.n	8006412 <dir_sdi.constprop.0+0x1e>

08006458 <remove_chain>:
{
 8006458:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800645a:	460c      	mov	r4, r1
 800645c:	4606      	mov	r6, r0
 800645e:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
 8006460:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006462:	2c01      	cmp	r4, #1
 8006464:	d92c      	bls.n	80064c0 <remove_chain+0x68>
 8006466:	69ab      	ldr	r3, [r5, #24]
 8006468:	42a3      	cmp	r3, r4
 800646a:	d929      	bls.n	80064c0 <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800646c:	b12a      	cbz	r2, 800647a <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800646e:	f04f 32ff 	mov.w	r2, #4294967295
 8006472:	4628      	mov	r0, r5
 8006474:	f7ff fd58 	bl	8005f28 <put_fat>
		if (res != FR_OK) return res;
 8006478:	b940      	cbnz	r0, 800648c <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800647a:	4621      	mov	r1, r4
 800647c:	6830      	ldr	r0, [r6, #0]
 800647e:	9401      	str	r4, [sp, #4]
 8006480:	f7ff ff62 	bl	8006348 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006484:	9901      	ldr	r1, [sp, #4]
 8006486:	4604      	mov	r4, r0
 8006488:	b910      	cbnz	r0, 8006490 <remove_chain+0x38>
	return FR_OK;
 800648a:	2000      	movs	r0, #0
}
 800648c:	b002      	add	sp, #8
 800648e:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006490:	2801      	cmp	r0, #1
 8006492:	d015      	beq.n	80064c0 <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d015      	beq.n	80064c4 <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006498:	2200      	movs	r2, #0
 800649a:	4628      	mov	r0, r5
 800649c:	f7ff fd44 	bl	8005f28 <put_fat>
			if (res != FR_OK) return res;
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d1f3      	bne.n	800648c <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80064a4:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 80064a8:	1e91      	subs	r1, r2, #2
 80064aa:	428b      	cmp	r3, r1
 80064ac:	d205      	bcs.n	80064ba <remove_chain+0x62>
			fs->free_clst++;
 80064ae:	3301      	adds	r3, #1
 80064b0:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 80064b2:	792b      	ldrb	r3, [r5, #4]
 80064b4:	f043 0301 	orr.w	r3, r3, #1
 80064b8:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80064ba:	42a2      	cmp	r2, r4
 80064bc:	d8dd      	bhi.n	800647a <remove_chain+0x22>
 80064be:	e7e4      	b.n	800648a <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80064c0:	2002      	movs	r0, #2
 80064c2:	e7e3      	b.n	800648c <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80064c4:	2001      	movs	r0, #1
 80064c6:	e7e1      	b.n	800648c <remove_chain+0x34>

080064c8 <create_chain>:
{
 80064c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064cc:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 80064ce:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80064d0:	460f      	mov	r7, r1
 80064d2:	b971      	cbnz	r1, 80064f2 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80064d4:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80064d6:	b1ee      	cbz	r6, 8006514 <create_chain+0x4c>
 80064d8:	69ab      	ldr	r3, [r5, #24]
 80064da:	42b3      	cmp	r3, r6
 80064dc:	bf98      	it	ls
 80064de:	2601      	movls	r6, #1
		ncl = scl;	/* Start cluster */
 80064e0:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 80064e2:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80064e4:	69ab      	ldr	r3, [r5, #24]
 80064e6:	42a3      	cmp	r3, r4
 80064e8:	d817      	bhi.n	800651a <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 80064ea:	2e01      	cmp	r6, #1
 80064ec:	d814      	bhi.n	8006518 <create_chain+0x50>
 80064ee:	2400      	movs	r4, #0
 80064f0:	e006      	b.n	8006500 <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80064f2:	4628      	mov	r0, r5
 80064f4:	f7ff ff28 	bl	8006348 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80064f8:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80064fa:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80064fc:	d803      	bhi.n	8006506 <create_chain+0x3e>
 80064fe:	2401      	movs	r4, #1
}
 8006500:	4620      	mov	r0, r4
 8006502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006506:	1c43      	adds	r3, r0, #1
 8006508:	d030      	beq.n	800656c <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800650a:	69ab      	ldr	r3, [r5, #24]
 800650c:	4283      	cmp	r3, r0
 800650e:	d8f7      	bhi.n	8006500 <create_chain+0x38>
 8006510:	463e      	mov	r6, r7
 8006512:	e7e5      	b.n	80064e0 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006514:	2601      	movs	r6, #1
 8006516:	e7e3      	b.n	80064e0 <create_chain+0x18>
				ncl = 2;
 8006518:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800651a:	4621      	mov	r1, r4
 800651c:	f8d8 0000 	ldr.w	r0, [r8]
 8006520:	f7ff ff12 	bl	8006348 <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 8006524:	b130      	cbz	r0, 8006534 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006526:	2801      	cmp	r0, #1
 8006528:	d0e9      	beq.n	80064fe <create_chain+0x36>
 800652a:	3001      	adds	r0, #1
 800652c:	d01e      	beq.n	800656c <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 800652e:	42b4      	cmp	r4, r6
 8006530:	d1d7      	bne.n	80064e2 <create_chain+0x1a>
 8006532:	e7dc      	b.n	80064ee <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006534:	f04f 32ff 	mov.w	r2, #4294967295
 8006538:	4621      	mov	r1, r4
 800653a:	4628      	mov	r0, r5
 800653c:	f7ff fcf4 	bl	8005f28 <put_fat>
		if (res == FR_OK && clst != 0) {
 8006540:	b990      	cbnz	r0, 8006568 <create_chain+0xa0>
 8006542:	b957      	cbnz	r7, 800655a <create_chain+0x92>
		fs->last_clst = ncl;
 8006544:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006546:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800654a:	3a02      	subs	r2, #2
 800654c:	4293      	cmp	r3, r2
 800654e:	d910      	bls.n	8006572 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8006550:	792b      	ldrb	r3, [r5, #4]
 8006552:	f043 0301 	orr.w	r3, r3, #1
 8006556:	712b      	strb	r3, [r5, #4]
 8006558:	e7d2      	b.n	8006500 <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800655a:	4622      	mov	r2, r4
 800655c:	4639      	mov	r1, r7
 800655e:	4628      	mov	r0, r5
 8006560:	f7ff fce2 	bl	8005f28 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006564:	2800      	cmp	r0, #0
 8006566:	d0ed      	beq.n	8006544 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006568:	2801      	cmp	r0, #1
 800656a:	d1c8      	bne.n	80064fe <create_chain+0x36>
 800656c:	f04f 34ff 	mov.w	r4, #4294967295
 8006570:	e7c6      	b.n	8006500 <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006572:	3b01      	subs	r3, #1
 8006574:	616b      	str	r3, [r5, #20]
 8006576:	e7eb      	b.n	8006550 <create_chain+0x88>

08006578 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006578:	6943      	ldr	r3, [r0, #20]
{
 800657a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800657e:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006582:	69c3      	ldr	r3, [r0, #28]
{
 8006584:	4605      	mov	r5, r0
 8006586:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006588:	b193      	cbz	r3, 80065b0 <dir_next+0x38>
 800658a:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 800658e:	d20f      	bcs.n	80065b0 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006590:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8006594:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006596:	f1b9 0f00 	cmp.w	r9, #0
 800659a:	d14d      	bne.n	8006638 <dir_next+0xc0>
		dp->sect++;				/* Next sector */
 800659c:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800659e:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 80065a0:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80065a2:	b939      	cbnz	r1, 80065b4 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80065a4:	8923      	ldrh	r3, [r4, #8]
 80065a6:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 80065aa:	d845      	bhi.n	8006638 <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 80065ac:	2300      	movs	r3, #0
 80065ae:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80065b0:	2004      	movs	r0, #4
 80065b2:	e00b      	b.n	80065cc <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80065b4:	8967      	ldrh	r7, [r4, #10]
 80065b6:	3f01      	subs	r7, #1
 80065b8:	ea17 2758 	ands.w	r7, r7, r8, lsr #9
 80065bc:	d13c      	bne.n	8006638 <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80065be:	4620      	mov	r0, r4
 80065c0:	f7ff fec2 	bl	8006348 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80065c4:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80065c6:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80065c8:	d802      	bhi.n	80065d0 <dir_next+0x58>
 80065ca:	2002      	movs	r0, #2
}
 80065cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80065d0:	1c42      	adds	r2, r0, #1
 80065d2:	d101      	bne.n	80065d8 <dir_next+0x60>
 80065d4:	2001      	movs	r0, #1
 80065d6:	e7f9      	b.n	80065cc <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80065d8:	69a3      	ldr	r3, [r4, #24]
 80065da:	4283      	cmp	r3, r0
 80065dc:	d826      	bhi.n	800662c <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 80065de:	f1ba 0f00 	cmp.w	sl, #0
 80065e2:	d0e3      	beq.n	80065ac <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80065e4:	69a9      	ldr	r1, [r5, #24]
 80065e6:	4628      	mov	r0, r5
 80065e8:	f7ff ff6e 	bl	80064c8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80065ec:	4606      	mov	r6, r0
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d035      	beq.n	800665e <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80065f2:	2801      	cmp	r0, #1
 80065f4:	d0e9      	beq.n	80065ca <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	d0ec      	beq.n	80065d4 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7ff fc3b 	bl	8005e76 <sync_window>
 8006600:	4601      	mov	r1, r0
 8006602:	2800      	cmp	r0, #0
 8006604:	d1e6      	bne.n	80065d4 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006606:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800660a:	f44f 7200 	mov.w	r2, #512	; 0x200
						fs->wflag = 1;
 800660e:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006612:	f7ff fb13 	bl	8005c3c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006616:	4631      	mov	r1, r6
 8006618:	4620      	mov	r0, r4
 800661a:	f7ff fbbd 	bl	8005d98 <clust2sect>
 800661e:	6320      	str	r0, [r4, #48]	; 0x30
 8006620:	8963      	ldrh	r3, [r4, #10]
 8006622:	429f      	cmp	r7, r3
 8006624:	d30f      	bcc.n	8006646 <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 8006626:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006628:	1bdb      	subs	r3, r3, r7
 800662a:	6323      	str	r3, [r4, #48]	; 0x30
				dp->sect = clust2sect(fs, clst);
 800662c:	4631      	mov	r1, r6
 800662e:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 8006630:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8006632:	f7ff fbb1 	bl	8005d98 <clust2sect>
 8006636:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006638:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
 800663a:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800663c:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006640:	444c      	add	r4, r9
 8006642:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8006644:	e7c2      	b.n	80065cc <dir_next+0x54>
						fs->wflag = 1;
 8006646:	4620      	mov	r0, r4
 8006648:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800664c:	f7ff fbed 	bl	8005e2a <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006650:	2800      	cmp	r0, #0
 8006652:	d1bf      	bne.n	80065d4 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006654:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006656:	3701      	adds	r7, #1
 8006658:	3301      	adds	r3, #1
 800665a:	6323      	str	r3, [r4, #48]	; 0x30
 800665c:	e7e0      	b.n	8006620 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800665e:	2007      	movs	r0, #7
 8006660:	e7b4      	b.n	80065cc <dir_next+0x54>
	...

08006664 <follow_path>:
{
 8006664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006668:	4681      	mov	r9, r0
	FATFS *fs = obj->fs;
 800666a:	6806      	ldr	r6, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800666c:	460c      	mov	r4, r1
 800666e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006672:	2b2f      	cmp	r3, #47	; 0x2f
 8006674:	d0fa      	beq.n	800666c <follow_path+0x8>
 8006676:	2b5c      	cmp	r3, #92	; 0x5c
 8006678:	d0f8      	beq.n	800666c <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 800667a:	2300      	movs	r3, #0
 800667c:	f8c9 3008 	str.w	r3, [r9, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006680:	7823      	ldrb	r3, [r4, #0]
 8006682:	2b1f      	cmp	r3, #31
 8006684:	d95a      	bls.n	800673c <follow_path+0xd8>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006686:	4f54      	ldr	r7, [pc, #336]	; (80067d8 <follow_path+0x174>)
	p = *path; sfn = dp->fn;
 8006688:	f109 0524 	add.w	r5, r9, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800668c:	220b      	movs	r2, #11
 800668e:	2120      	movs	r1, #32
 8006690:	f1c4 0802 	rsb	r8, r4, #2
 8006694:	4628      	mov	r0, r5
 8006696:	f7ff fad1 	bl	8005c3c <mem_set>
	si = i = 0; ni = 8;
 800669a:	f104 3cff 	add.w	ip, r4, #4294967295
 800669e:	2200      	movs	r2, #0
 80066a0:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 80066a2:	eb08 010c 	add.w	r1, r8, ip
 80066a6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d908      	bls.n	80066c0 <follow_path+0x5c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80066ae:	2b2f      	cmp	r3, #47	; 0x2f
 80066b0:	d001      	beq.n	80066b6 <follow_path+0x52>
 80066b2:	2b5c      	cmp	r3, #92	; 0x5c
 80066b4:	d14c      	bne.n	8006750 <follow_path+0xec>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80066b6:	5c60      	ldrb	r0, [r4, r1]
 80066b8:	282f      	cmp	r0, #47	; 0x2f
 80066ba:	d047      	beq.n	800674c <follow_path+0xe8>
 80066bc:	285c      	cmp	r0, #92	; 0x5c
 80066be:	d045      	beq.n	800674c <follow_path+0xe8>
	*path = p + si;						/* Return pointer to the next segment */
 80066c0:	440c      	add	r4, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	d053      	beq.n	800676e <follow_path+0x10a>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80066c6:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80066ca:	4648      	mov	r0, r9
	FATFS *fs = dp->obj.fs;
 80066cc:	f8d9 8000 	ldr.w	r8, [r9]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80066d0:	2ae5      	cmp	r2, #229	; 0xe5
 80066d2:	bf04      	itt	eq
 80066d4:	2205      	moveq	r2, #5
 80066d6:	f889 2024 	strbeq.w	r2, [r9, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80066da:	2b21      	cmp	r3, #33	; 0x21
 80066dc:	bf34      	ite	cc
 80066de:	2304      	movcc	r3, #4
 80066e0:	2300      	movcs	r3, #0
 80066e2:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80066e6:	f7ff fe85 	bl	80063f4 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d143      	bne.n	8006776 <follow_path+0x112>
		res = move_window(fs, dp->sect);
 80066ee:	f8d9 101c 	ldr.w	r1, [r9, #28]
 80066f2:	4640      	mov	r0, r8
 80066f4:	f7ff fbc5 	bl	8005e82 <move_window>
		if (res != FR_OK) break;
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d13c      	bne.n	8006776 <follow_path+0x112>
		c = dp->dir[DIR_Name];
 80066fc:	f8d9 2020 	ldr.w	r2, [r9, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006700:	7813      	ldrb	r3, [r2, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d042      	beq.n	800678c <follow_path+0x128>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006706:	7ad3      	ldrb	r3, [r2, #11]
 8006708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800670c:	f889 3006 	strb.w	r3, [r9, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006710:	7ad3      	ldrb	r3, [r2, #11]
 8006712:	f013 0008 	ands.w	r0, r3, #8
 8006716:	d10c      	bne.n	8006732 <follow_path+0xce>
 8006718:	f102 0c0b 	add.w	ip, r2, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800671c:	4629      	mov	r1, r5
		r = *d++ - *s++;
 800671e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006722:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 8006726:	4594      	cmp	ip, r2
		r = *d++ - *s++;
 8006728:	eba3 030e 	sub.w	r3, r3, lr
	} while (--cnt && r == 0);
 800672c:	d021      	beq.n	8006772 <follow_path+0x10e>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0f5      	beq.n	800671e <follow_path+0xba>
		res = dir_next(dp, 0);	/* Next entry */
 8006732:	2100      	movs	r1, #0
 8006734:	4648      	mov	r0, r9
 8006736:	f7ff ff1f 	bl	8006578 <dir_next>
 800673a:	e7d6      	b.n	80066ea <follow_path+0x86>
		dp->fn[NSFLAG] = NS_NONAME;
 800673c:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800673e:	4648      	mov	r0, r9
		dp->fn[NSFLAG] = NS_NONAME;
 8006740:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
}
 8006744:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8006748:	f7ff be54 	b.w	80063f4 <dir_sdi.constprop.0>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800674c:	3101      	adds	r1, #1
 800674e:	e7b2      	b.n	80066b6 <follow_path+0x52>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006750:	2b2e      	cmp	r3, #46	; 0x2e
 8006752:	d032      	beq.n	80067ba <follow_path+0x156>
 8006754:	4290      	cmp	r0, r2
 8006756:	d90a      	bls.n	800676e <follow_path+0x10a>
		if (c >= 0x80) {				/* Extended character? */
 8006758:	0619      	lsls	r1, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800675a:	f8df e080 	ldr.w	lr, [pc, #128]	; 80067dc <follow_path+0x178>
 800675e:	bf44      	itt	mi
 8006760:	3b80      	submi	r3, #128	; 0x80
 8006762:	5cfb      	ldrbmi	r3, [r7, r3]
	while (*str && *str != chr) str++;
 8006764:	f81e 1b01 	ldrb.w	r1, [lr], #1
 8006768:	b361      	cbz	r1, 80067c4 <follow_path+0x160>
 800676a:	428b      	cmp	r3, r1
 800676c:	d1fa      	bne.n	8006764 <follow_path+0x100>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800676e:	2006      	movs	r0, #6
	return res;
 8006770:	e00a      	b.n	8006788 <follow_path+0x124>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1dd      	bne.n	8006732 <follow_path+0xce>
			ns = dp->fn[NSFLAG];
 8006776:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800677a:	b148      	cbz	r0, 8006790 <follow_path+0x12c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800677c:	2804      	cmp	r0, #4
 800677e:	d103      	bne.n	8006788 <follow_path+0x124>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006780:	f013 0f04 	tst.w	r3, #4
 8006784:	bf08      	it	eq
 8006786:	2005      	moveq	r0, #5
}
 8006788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800678c:	2004      	movs	r0, #4
 800678e:	e7f2      	b.n	8006776 <follow_path+0x112>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006790:	075a      	lsls	r2, r3, #29
 8006792:	d4f9      	bmi.n	8006788 <follow_path+0x124>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006794:	f899 3006 	ldrb.w	r3, [r9, #6]
 8006798:	06db      	lsls	r3, r3, #27
 800679a:	d50c      	bpl.n	80067b6 <follow_path+0x152>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800679c:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80067a0:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80067a4:	7830      	ldrb	r0, [r6, #0]
 80067a6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80067aa:	4419      	add	r1, r3
 80067ac:	f7ff fdc4 	bl	8006338 <ld_clust.isra.0>
 80067b0:	f8c9 0008 	str.w	r0, [r9, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067b4:	e768      	b.n	8006688 <follow_path+0x24>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80067b6:	2005      	movs	r0, #5
 80067b8:	e7e6      	b.n	8006788 <follow_path+0x124>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80067ba:	280b      	cmp	r0, #11
 80067bc:	d0d7      	beq.n	800676e <follow_path+0x10a>
			i = 8; ni = 11;				/* Goto extension */
 80067be:	2208      	movs	r2, #8
 80067c0:	200b      	movs	r0, #11
 80067c2:	e76e      	b.n	80066a2 <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80067c4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80067c8:	2919      	cmp	r1, #25
 80067ca:	d801      	bhi.n	80067d0 <follow_path+0x16c>
 80067cc:	3b20      	subs	r3, #32
 80067ce:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 80067d0:	54ab      	strb	r3, [r5, r2]
 80067d2:	3201      	adds	r2, #1
 80067d4:	e765      	b.n	80066a2 <follow_path+0x3e>
 80067d6:	bf00      	nop
 80067d8:	080f9803 	.word	0x080f9803
 80067dc:	080f97f4 	.word	0x080f97f4

080067e0 <dir_register>:
{
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80067e4:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 80067e6:	f7ff fe05 	bl	80063f4 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 80067ea:	4604      	mov	r4, r0
 80067ec:	bb28      	cbnz	r0, 800683a <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 80067ee:	69e9      	ldr	r1, [r5, #28]
 80067f0:	4630      	mov	r0, r6
 80067f2:	f7ff fb46 	bl	8005e82 <move_window>
			if (res != FR_OK) break;
 80067f6:	4604      	mov	r4, r0
 80067f8:	b9f8      	cbnz	r0, 800683a <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80067fa:	6a2b      	ldr	r3, [r5, #32]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2be5      	cmp	r3, #229	; 0xe5
 8006800:	d114      	bne.n	800682c <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8006802:	69e9      	ldr	r1, [r5, #28]
 8006804:	4630      	mov	r0, r6
 8006806:	f7ff fb3c 	bl	8005e82 <move_window>
		if (res == FR_OK) {
 800680a:	4604      	mov	r4, r0
 800680c:	b960      	cbnz	r0, 8006828 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800680e:	4601      	mov	r1, r0
 8006810:	2220      	movs	r2, #32
 8006812:	6a28      	ldr	r0, [r5, #32]
 8006814:	f7ff fa12 	bl	8005c3c <mem_set>
	if (cnt) {
 8006818:	220b      	movs	r2, #11
 800681a:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800681e:	6a28      	ldr	r0, [r5, #32]
 8006820:	f7ff fafa 	bl	8005e18 <mem_cpy.part.0>
			fs->wflag = 1;
 8006824:	2301      	movs	r3, #1
 8006826:	70f3      	strb	r3, [r6, #3]
}
 8006828:	4620      	mov	r0, r4
 800682a:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0e8      	beq.n	8006802 <dir_register+0x22>
			res = dir_next(dp, 1);
 8006830:	2101      	movs	r1, #1
 8006832:	4628      	mov	r0, r5
 8006834:	f7ff fea0 	bl	8006578 <dir_next>
 8006838:	e7d7      	b.n	80067ea <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800683a:	2c04      	cmp	r4, #4
 800683c:	bf08      	it	eq
 800683e:	2407      	moveq	r4, #7
 8006840:	e7f2      	b.n	8006828 <dir_register+0x48>

08006842 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006842:	b538      	push	{r3, r4, r5, lr}
 8006844:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006846:	4604      	mov	r4, r0
 8006848:	b1f0      	cbz	r0, 8006888 <validate+0x46>
 800684a:	6803      	ldr	r3, [r0, #0]
 800684c:	b1db      	cbz	r3, 8006886 <validate+0x44>
 800684e:	781a      	ldrb	r2, [r3, #0]
 8006850:	b1b2      	cbz	r2, 8006880 <validate+0x3e>
 8006852:	8881      	ldrh	r1, [r0, #4]
 8006854:	88da      	ldrh	r2, [r3, #6]
 8006856:	4291      	cmp	r1, r2
 8006858:	d112      	bne.n	8006880 <validate+0x3e>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800685a:	68d8      	ldr	r0, [r3, #12]
 800685c:	f000 fac0 	bl	8006de0 <ff_req_grant>
 8006860:	4603      	mov	r3, r0
 8006862:	b198      	cbz	r0, 800688c <validate+0x4a>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	7858      	ldrb	r0, [r3, #1]
 8006868:	f7ff f99a 	bl	8005ba0 <disk_status>
 800686c:	f010 0001 	ands.w	r0, r0, #1
 8006870:	d102      	bne.n	8006878 <validate+0x36>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006872:	6824      	ldr	r4, [r4, #0]
 8006874:	602c      	str	r4, [r5, #0]
	return res;
}
 8006876:	bd38      	pop	{r3, r4, r5, pc}
				unlock_fs(obj->fs, FR_OK);
 8006878:	2100      	movs	r1, #0
 800687a:	6820      	ldr	r0, [r4, #0]
 800687c:	f7ff fbd2 	bl	8006024 <unlock_fs>
	FRESULT res = FR_INVALID_OBJECT;
 8006880:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006882:	2400      	movs	r4, #0
 8006884:	e7f6      	b.n	8006874 <validate+0x32>
 8006886:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8006888:	2009      	movs	r0, #9
 800688a:	e7f3      	b.n	8006874 <validate+0x32>
			res = FR_TIMEOUT;
 800688c:	200f      	movs	r0, #15
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800688e:	461c      	mov	r4, r3
 8006890:	e7f0      	b.n	8006874 <validate+0x32>
	...

08006894 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006896:	b085      	sub	sp, #20
 8006898:	4616      	mov	r6, r2
 800689a:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800689e:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 80068a0:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80068a2:	f7ff faa1 	bl	8005de8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80068a6:	1e05      	subs	r5, r0, #0
 80068a8:	db2d      	blt.n	8006906 <f_mount+0x72>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80068aa:	4f19      	ldr	r7, [pc, #100]	; (8006910 <f_mount+0x7c>)
 80068ac:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]

	if (cfs) {
 80068b0:	b164      	cbz	r4, 80068cc <f_mount+0x38>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80068b2:	4620      	mov	r0, r4
 80068b4:	f7ff fa62 	bl	8005d7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80068b8:	68e0      	ldr	r0, [r4, #12]
 80068ba:	f000 fa8c 	bl	8006dd6 <ff_del_syncobj>
 80068be:	b918      	cbnz	r0, 80068c8 <f_mount+0x34>
 80068c0:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80068c2:	4620      	mov	r0, r4
 80068c4:	b005      	add	sp, #20
 80068c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 80068c8:	2300      	movs	r3, #0
 80068ca:	7023      	strb	r3, [r4, #0]
	if (fs) {
 80068cc:	9901      	ldr	r1, [sp, #4]
 80068ce:	b989      	cbnz	r1, 80068f4 <f_mount+0x60>
	FatFs[vol] = fs;					/* Register new fs object */
 80068d0:	9c01      	ldr	r4, [sp, #4]
 80068d2:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80068d6:	2c00      	cmp	r4, #0
 80068d8:	d0f3      	beq.n	80068c2 <f_mount+0x2e>
 80068da:	2e01      	cmp	r6, #1
 80068dc:	d115      	bne.n	800690a <f_mount+0x76>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80068de:	a901      	add	r1, sp, #4
 80068e0:	2200      	movs	r2, #0
 80068e2:	4668      	mov	r0, sp
 80068e4:	f7ff fbf4 	bl	80060d0 <find_volume>
 80068e8:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 80068ea:	4601      	mov	r1, r0
 80068ec:	9801      	ldr	r0, [sp, #4]
 80068ee:	f7ff fb99 	bl	8006024 <unlock_fs>
 80068f2:	e7e6      	b.n	80068c2 <f_mount+0x2e>
		fs->fs_type = 0;				/* Clear new fs object */
 80068f4:	2300      	movs	r3, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80068f6:	b2e8      	uxtb	r0, r5
		fs->fs_type = 0;				/* Clear new fs object */
 80068f8:	f801 3b0c 	strb.w	r3, [r1], #12
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80068fc:	f000 fa5f 	bl	8006dbe <ff_cre_syncobj>
 8006900:	2800      	cmp	r0, #0
 8006902:	d1e5      	bne.n	80068d0 <f_mount+0x3c>
 8006904:	e7dc      	b.n	80068c0 <f_mount+0x2c>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006906:	240b      	movs	r4, #11
 8006908:	e7db      	b.n	80068c2 <f_mount+0x2e>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800690a:	2400      	movs	r4, #0
 800690c:	e7d9      	b.n	80068c2 <f_mount+0x2e>
 800690e:	bf00      	nop
 8006910:	20010a7c 	.word	0x20010a7c

08006914 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006918:	b090      	sub	sp, #64	; 0x40
 800691a:	4617      	mov	r7, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800691c:	4604      	mov	r4, r0
{
 800691e:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8006920:	2800      	cmp	r0, #0
 8006922:	f000 80f6 	beq.w	8006b12 <f_open+0x1fe>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006926:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800692a:	a903      	add	r1, sp, #12
 800692c:	a801      	add	r0, sp, #4
 800692e:	462a      	mov	r2, r5
 8006930:	f7ff fbce 	bl	80060d0 <find_volume>
	if (res == FR_OK) {
 8006934:	4606      	mov	r6, r0
 8006936:	2800      	cmp	r0, #0
 8006938:	d15c      	bne.n	80069f4 <f_open+0xe0>
		dj.obj.fs = fs;
 800693a:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800693c:	a804      	add	r0, sp, #16
 800693e:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8006940:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006942:	f7ff fe8f 	bl	8006664 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006946:	b958      	cbnz	r0, 8006960 <f_open+0x4c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006948:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800694c:	2b00      	cmp	r3, #0
 800694e:	db5c      	blt.n	8006a0a <f_open+0xf6>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006950:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8006954:	a804      	add	r0, sp, #16
 8006956:	bf14      	ite	ne
 8006958:	2101      	movne	r1, #1
 800695a:	2100      	moveq	r1, #0
 800695c:	f7ff f974 	bl	8005c48 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006960:	f017 0f1c 	tst.w	r7, #28
 8006964:	d071      	beq.n	8006a4a <f_open+0x136>
			if (res != FR_OK) {					/* No file, create new */
 8006966:	2800      	cmp	r0, #0
 8006968:	d051      	beq.n	8006a0e <f_open+0xfa>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800696a:	2804      	cmp	r0, #4
 800696c:	d142      	bne.n	80069f4 <f_open+0xe0>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800696e:	4b6a      	ldr	r3, [pc, #424]	; (8006b18 <f_open+0x204>)
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	b11a      	cbz	r2, 800697c <f_open+0x68>
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f040 80c5 	bne.w	8006b06 <f_open+0x1f2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800697c:	a804      	add	r0, sp, #16
 800697e:	f7ff ff2f 	bl	80067e0 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006982:	2800      	cmp	r0, #0
 8006984:	d136      	bne.n	80069f4 <f_open+0xe0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006986:	f045 0508 	orr.w	r5, r5, #8
				dw = GET_FATTIME();
 800698a:	f7fa ff63 	bl	8001854 <get_fattime>
 800698e:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006990:	9000      	str	r0, [sp, #0]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006992:	2220      	movs	r2, #32
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006994:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006996:	300e      	adds	r0, #14
 8006998:	f7ff f948 	bl	8005c2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800699c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800699e:	9900      	ldr	r1, [sp, #0]
 80069a0:	3016      	adds	r0, #22
 80069a2:	f7ff f943 	bl	8005c2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80069a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80069a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80069ac:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80069ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069b0:	f898 0000 	ldrb.w	r0, [r8]
 80069b4:	f7ff fcc0 	bl	8006338 <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80069b8:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80069ba:	4607      	mov	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80069bc:	4640      	mov	r0, r8
 80069be:	f7ff fa07 	bl	8005dd0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80069c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80069c4:	2200      	movs	r2, #0
					fs->wflag = 1;
 80069c6:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80069c8:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80069ca:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80069cc:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80069ce:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 80069d0:	9b03      	ldr	r3, [sp, #12]
 80069d2:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80069d4:	b327      	cbz	r7, 8006a20 <f_open+0x10c>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 80069d6:	4639      	mov	r1, r7
 80069d8:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 80069da:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 80069de:	f7ff fd3b 	bl	8006458 <remove_chain>
						if (res == FR_OK) {
 80069e2:	b938      	cbnz	r0, 80069f4 <f_open+0xe0>
							res = move_window(fs, dw);
 80069e4:	4641      	mov	r1, r8
 80069e6:	9803      	ldr	r0, [sp, #12]
 80069e8:	f7ff fa4b 	bl	8005e82 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80069ec:	3f01      	subs	r7, #1
 80069ee:	9b03      	ldr	r3, [sp, #12]
 80069f0:	611f      	str	r7, [r3, #16]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 80069f2:	b1a8      	cbz	r0, 8006a20 <f_open+0x10c>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80069f4:	2300      	movs	r3, #0
 80069f6:	4606      	mov	r6, r0
 80069f8:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
 80069fa:	4631      	mov	r1, r6
 80069fc:	9803      	ldr	r0, [sp, #12]
 80069fe:	f7ff fb11 	bl	8006024 <unlock_fs>
}
 8006a02:	4630      	mov	r0, r6
 8006a04:	b010      	add	sp, #64	; 0x40
 8006a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				res = FR_INVALID_NAME;
 8006a0a:	2006      	movs	r0, #6
 8006a0c:	e7a8      	b.n	8006960 <f_open+0x4c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006a0e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006a12:	f013 0f11 	tst.w	r3, #17
 8006a16:	d122      	bne.n	8006a5e <f_open+0x14a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006a18:	077b      	lsls	r3, r7, #29
 8006a1a:	d476      	bmi.n	8006b0a <f_open+0x1f6>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006a1c:	073f      	lsls	r7, r7, #28
 8006a1e:	d4b4      	bmi.n	800698a <f_open+0x76>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006a20:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006a22:	9b03      	ldr	r3, [sp, #12]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a24:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				mode |= FA_MODIFIED;
 8006a28:	bf48      	it	mi
 8006a2a:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006a2e:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a30:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8006a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a36:	bf14      	ite	ne
 8006a38:	2101      	movne	r1, #1
 8006a3a:	2100      	moveq	r1, #0
			fp->dir_ptr = dj.dir;
 8006a3c:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a3e:	f7ff f93d 	bl	8005cbc <inc_lock>
 8006a42:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006a44:	b968      	cbnz	r0, 8006a62 <f_open+0x14e>
 8006a46:	2002      	movs	r0, #2
 8006a48:	e7d4      	b.n	80069f4 <f_open+0xe0>
			if (res == FR_OK) {					/* Following succeeded */
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d1d2      	bne.n	80069f4 <f_open+0xe0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006a4e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006a52:	06d8      	lsls	r0, r3, #27
 8006a54:	d45b      	bmi.n	8006b0e <f_open+0x1fa>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006a56:	07ba      	lsls	r2, r7, #30
 8006a58:	d5e2      	bpl.n	8006a20 <f_open+0x10c>
 8006a5a:	07df      	lsls	r7, r3, #31
 8006a5c:	d5e0      	bpl.n	8006a20 <f_open+0x10c>
					res = FR_DENIED;
 8006a5e:	2007      	movs	r0, #7
 8006a60:	e7c8      	b.n	80069f4 <f_open+0xe0>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006a62:	9f03      	ldr	r7, [sp, #12]
 8006a64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a66:	7838      	ldrb	r0, [r7, #0]
 8006a68:	f7ff fc66 	bl	8006338 <ld_clust.isra.0>
 8006a6c:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006a6e:	f101 001c 	add.w	r0, r1, #28
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006a72:	2100      	movs	r1, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006a74:	f7ff f8d8 	bl	8005c28 <ld_dword>
			fp->obj.id = fs->id;
 8006a78:	88fb      	ldrh	r3, [r7, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006a7a:	6027      	str	r7, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006a7c:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8006a80:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006a84:	60e0      	str	r0, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006a86:	62e1      	str	r1, [r4, #44]	; 0x2c
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006a88:	4638      	mov	r0, r7
			fp->obj.id = fs->id;
 8006a8a:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 8006a8c:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8006a8e:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006a90:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006a92:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006a94:	f7ff f8d2 	bl	8005c3c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006a98:	06aa      	lsls	r2, r5, #26
 8006a9a:	d5ae      	bpl.n	80069fa <f_open+0xe6>
 8006a9c:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8006aa0:	f1b8 0f00 	cmp.w	r8, #0
 8006aa4:	d0a9      	beq.n	80069fa <f_open+0xe6>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006aa6:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006aa8:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006aaa:	895d      	ldrh	r5, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006aac:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006ab0:	026d      	lsls	r5, r5, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ab2:	4545      	cmp	r5, r8
 8006ab4:	d319      	bcc.n	8006aea <f_open+0x1d6>
 8006ab6:	2000      	movs	r0, #0
				fp->clust = clst;
 8006ab8:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d19a      	bne.n	80069f4 <f_open+0xe0>
 8006abe:	f3c8 0308 	ubfx	r3, r8, #0, #9
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d099      	beq.n	80069fa <f_open+0xe6>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006ac6:	9d03      	ldr	r5, [sp, #12]
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f7ff f965 	bl	8005d98 <clust2sect>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d0b9      	beq.n	8006a46 <f_open+0x132>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006ad2:	eb00 2258 	add.w	r2, r0, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4639      	mov	r1, r7
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006ada:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006adc:	7868      	ldrb	r0, [r5, #1]
 8006ade:	f7ff f879 	bl	8005bd4 <disk_read>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d089      	beq.n	80069fa <f_open+0xe6>
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	e784      	b.n	80069f4 <f_open+0xe0>
					clst = get_fat(&fp->obj, clst);
 8006aea:	6820      	ldr	r0, [r4, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006aec:	eba8 0805 	sub.w	r8, r8, r5
					clst = get_fat(&fp->obj, clst);
 8006af0:	f7ff fc2a 	bl	8006348 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8006af4:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8006af6:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8006af8:	d903      	bls.n	8006b02 <f_open+0x1ee>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	d1d9      	bne.n	8006ab2 <f_open+0x19e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006afe:	2001      	movs	r0, #1
 8006b00:	e7da      	b.n	8006ab8 <f_open+0x1a4>
					if (clst <= 1) res = FR_INT_ERR;
 8006b02:	2002      	movs	r0, #2
 8006b04:	e7d8      	b.n	8006ab8 <f_open+0x1a4>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006b06:	2012      	movs	r0, #18
 8006b08:	e774      	b.n	80069f4 <f_open+0xe0>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006b0a:	2008      	movs	r0, #8
 8006b0c:	e772      	b.n	80069f4 <f_open+0xe0>
					res = FR_NO_FILE;
 8006b0e:	2004      	movs	r0, #4
 8006b10:	e770      	b.n	80069f4 <f_open+0xe0>
	if (!fp) return FR_INVALID_OBJECT;
 8006b12:	2609      	movs	r6, #9
 8006b14:	e775      	b.n	8006a02 <f_open+0xee>
 8006b16:	bf00      	nop
 8006b18:	20010a80 	.word	0x20010a80

08006b1c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b20:	4699      	mov	r9, r3
 8006b22:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8006b24:	2300      	movs	r3, #0
{
 8006b26:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006b28:	a903      	add	r1, sp, #12
{
 8006b2a:	4604      	mov	r4, r0
	*br = 0;	/* Clear read byte counter */
 8006b2c:	f8c9 3000 	str.w	r3, [r9]
{
 8006b30:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006b32:	f7ff fe86 	bl	8006842 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006b36:	4605      	mov	r5, r0
 8006b38:	b908      	cbnz	r0, 8006b3e <f_read+0x22>
 8006b3a:	7d65      	ldrb	r5, [r4, #21]
 8006b3c:	b125      	cbz	r5, 8006b48 <f_read+0x2c>
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006b3e:	4629      	mov	r1, r5
 8006b40:	9803      	ldr	r0, [sp, #12]
 8006b42:	f7ff fa6f 	bl	8006024 <unlock_fs>
 8006b46:	e008      	b.n	8006b5a <f_read+0x3e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006b48:	7d25      	ldrb	r5, [r4, #20]
 8006b4a:	f015 0501 	ands.w	r5, r5, #1
 8006b4e:	d108      	bne.n	8006b62 <f_read+0x46>
 8006b50:	2507      	movs	r5, #7
 8006b52:	2107      	movs	r1, #7
 8006b54:	9803      	ldr	r0, [sp, #12]
 8006b56:	f7ff fa65 	bl	8006024 <unlock_fs>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	b005      	add	sp, #20
 8006b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	remain = fp->obj.objsize - fp->fptr;
 8006b62:	68e2      	ldr	r2, [r4, #12]
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006b64:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	remain = fp->obj.objsize - fp->fptr;
 8006b68:	69a3      	ldr	r3, [r4, #24]
 8006b6a:	1ad2      	subs	r2, r2, r3
 8006b6c:	4296      	cmp	r6, r2
 8006b6e:	bf28      	it	cs
 8006b70:	4616      	movcs	r6, r2
	for ( ;  btr;								/* Repeat until all data read */
 8006b72:	b92e      	cbnz	r6, 8006b80 <f_read+0x64>
	LEAVE_FF(fs, FR_OK);
 8006b74:	4631      	mov	r1, r6
 8006b76:	9803      	ldr	r0, [sp, #12]
 8006b78:	4635      	mov	r5, r6
 8006b7a:	f7ff fa53 	bl	8006024 <unlock_fs>
 8006b7e:	e7ec      	b.n	8006b5a <f_read+0x3e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006b80:	69a1      	ldr	r1, [r4, #24]
 8006b82:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d17e      	bne.n	8006c88 <f_read+0x16c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	895b      	ldrh	r3, [r3, #10]
 8006b8e:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8006b90:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	d117      	bne.n	8006bc8 <f_read+0xac>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006b98:	b929      	cbnz	r1, 8006ba6 <f_read+0x8a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006b9a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006b9c:	2801      	cmp	r0, #1
 8006b9e:	d80d      	bhi.n	8006bbc <f_read+0xa0>
 8006ba0:	2502      	movs	r5, #2
 8006ba2:	7565      	strb	r5, [r4, #21]
 8006ba4:	e7cb      	b.n	8006b3e <f_read+0x22>
					if (fp->cltbl) {
 8006ba6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006ba8:	b11b      	cbz	r3, 8006bb2 <f_read+0x96>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006baa:	4620      	mov	r0, r4
 8006bac:	f7ff f8ff 	bl	8005dae <clmt_clust>
 8006bb0:	e7f4      	b.n	8006b9c <f_read+0x80>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006bb2:	69e1      	ldr	r1, [r4, #28]
 8006bb4:	6820      	ldr	r0, [r4, #0]
 8006bb6:	f7ff fbc7 	bl	8006348 <get_fat.isra.0>
 8006bba:	e7ef      	b.n	8006b9c <f_read+0x80>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	d102      	bne.n	8006bc6 <f_read+0xaa>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	7561      	strb	r1, [r4, #21]
 8006bc4:	e7bc      	b.n	8006b40 <f_read+0x24>
				fp->clust = clst;				/* Update current cluster */
 8006bc6:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006bc8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006bcc:	69e1      	ldr	r1, [r4, #28]
 8006bce:	4650      	mov	r0, sl
 8006bd0:	f7ff f8e2 	bl	8005d98 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006bd4:	b920      	cbnz	r0, 8006be0 <f_read+0xc4>
 8006bd6:	2502      	movs	r5, #2
 8006bd8:	4650      	mov	r0, sl
 8006bda:	4629      	mov	r1, r5
 8006bdc:	7565      	strb	r5, [r4, #21]
 8006bde:	e7b0      	b.n	8006b42 <f_read+0x26>
			sect += csect;
 8006be0:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006be2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8006be6:	eb03 0700 	add.w	r7, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006bea:	d330      	bcc.n	8006c4e <f_read+0x132>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006bec:	9901      	ldr	r1, [sp, #4]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006bee:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006bf0:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8006bf4:	eb01 2156 	add.w	r1, r1, r6, lsr #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bf8:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006bfc:	4291      	cmp	r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bfe:	4641      	mov	r1, r8
					cc = fs->csize - csect;
 8006c00:	bf84      	itt	hi
 8006c02:	9b01      	ldrhi	r3, [sp, #4]
 8006c04:	1ad3      	subhi	r3, r2, r3
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c06:	463a      	mov	r2, r7
 8006c08:	9301      	str	r3, [sp, #4]
 8006c0a:	f7fe ffe3 	bl	8005bd4 <disk_read>
 8006c0e:	9b01      	ldr	r3, [sp, #4]
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d1d5      	bne.n	8006bc0 <f_read+0xa4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006c14:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8006c18:	2a00      	cmp	r2, #0
 8006c1a:	da0c      	bge.n	8006c36 <f_read+0x11a>
 8006c1c:	6a20      	ldr	r0, [r4, #32]
 8006c1e:	1bc0      	subs	r0, r0, r7
 8006c20:	4298      	cmp	r0, r3
 8006c22:	d208      	bcs.n	8006c36 <f_read+0x11a>
 8006c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c28:	4659      	mov	r1, fp
 8006c2a:	eb08 2040 	add.w	r0, r8, r0, lsl #9
 8006c2e:	9301      	str	r3, [sp, #4]
	if (cnt) {
 8006c30:	f7ff f8f2 	bl	8005e18 <mem_cpy.part.0>
 8006c34:	9b01      	ldr	r3, [sp, #4]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006c36:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006c38:	69a3      	ldr	r3, [r4, #24]
 8006c3a:	44b8      	add	r8, r7
 8006c3c:	1bf6      	subs	r6, r6, r7
 8006c3e:	443b      	add	r3, r7
 8006c40:	61a3      	str	r3, [r4, #24]
 8006c42:	f8d9 3000 	ldr.w	r3, [r9]
 8006c46:	443b      	add	r3, r7
 8006c48:	f8c9 3000 	str.w	r3, [r9]
 8006c4c:	e791      	b.n	8006b72 <f_read+0x56>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006c4e:	6a22      	ldr	r2, [r4, #32]
 8006c50:	42ba      	cmp	r2, r7
 8006c52:	d018      	beq.n	8006c86 <f_read+0x16a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006c54:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	da0b      	bge.n	8006c74 <f_read+0x158>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4659      	mov	r1, fp
 8006c60:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8006c64:	f7fe ffc4 	bl	8005bf0 <disk_write>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d1a9      	bne.n	8006bc0 <f_read+0xa4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006c6c:	7d23      	ldrb	r3, [r4, #20]
 8006c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c72:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006c74:	9803      	ldr	r0, [sp, #12]
 8006c76:	2301      	movs	r3, #1
 8006c78:	463a      	mov	r2, r7
 8006c7a:	4659      	mov	r1, fp
 8006c7c:	7840      	ldrb	r0, [r0, #1]
 8006c7e:	f7fe ffa9 	bl	8005bd4 <disk_read>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d19c      	bne.n	8006bc0 <f_read+0xa4>
			fp->sect = sect;
 8006c86:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006c88:	69a1      	ldr	r1, [r4, #24]
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006c90:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006c94:	4459      	add	r1, fp
 8006c96:	42b7      	cmp	r7, r6
 8006c98:	bf28      	it	cs
 8006c9a:	4637      	movcs	r7, r6
	if (cnt) {
 8006c9c:	463a      	mov	r2, r7
 8006c9e:	f7ff f8bb 	bl	8005e18 <mem_cpy.part.0>
}
 8006ca2:	e7c9      	b.n	8006c38 <f_read+0x11c>

08006ca4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006ca6:	a901      	add	r1, sp, #4
{
 8006ca8:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006caa:	f7ff fdca 	bl	8006842 <validate>
	if (res == FR_OK) {
 8006cae:	4604      	mov	r4, r0
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d143      	bne.n	8006d3c <f_sync+0x98>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006cb4:	7d2b      	ldrb	r3, [r5, #20]
 8006cb6:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 8006cba:	d03f      	beq.n	8006d3c <f_sync+0x98>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006cbc:	061b      	lsls	r3, r3, #24
 8006cbe:	d514      	bpl.n	8006cea <f_sync+0x46>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006cc0:	9801      	ldr	r0, [sp, #4]
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	6a2a      	ldr	r2, [r5, #32]
 8006cc6:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8006cca:	7840      	ldrb	r0, [r0, #1]
 8006ccc:	f7fe ff90 	bl	8005bf0 <disk_write>
 8006cd0:	b138      	cbz	r0, 8006ce2 <f_sync+0x3e>
 8006cd2:	2401      	movs	r4, #1
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	9801      	ldr	r0, [sp, #4]
 8006cd8:	f7ff f9a4 	bl	8006024 <unlock_fs>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8006cdc:	4620      	mov	r0, r4
 8006cde:	b003      	add	sp, #12
 8006ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->flag &= (BYTE)~FA_DIRTY;
 8006ce2:	7d2b      	ldrb	r3, [r5, #20]
 8006ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce8:	752b      	strb	r3, [r5, #20]
			tm = GET_FATTIME();				/* Modified time */
 8006cea:	f7fa fdb3 	bl	8001854 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8006cee:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8006cf0:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8006cf2:	9801      	ldr	r0, [sp, #4]
 8006cf4:	f7ff f8c5 	bl	8005e82 <move_window>
				if (res == FR_OK) {
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	b9f8      	cbnz	r0, 8006d3c <f_sync+0x98>
					dir = fp->dir_ptr;
 8006cfc:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006cfe:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006d00:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006d02:	f043 0320 	orr.w	r3, r3, #32
 8006d06:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006d08:	68aa      	ldr	r2, [r5, #8]
 8006d0a:	6828      	ldr	r0, [r5, #0]
 8006d0c:	f7ff f860 	bl	8005dd0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006d10:	68e9      	ldr	r1, [r5, #12]
 8006d12:	f106 001c 	add.w	r0, r6, #28
 8006d16:	f7fe ff89 	bl	8005c2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	f106 0016 	add.w	r0, r6, #22
 8006d20:	f7fe ff84 	bl	8005c2c <st_dword>
					fs->wflag = 1;
 8006d24:	2301      	movs	r3, #1
 8006d26:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d28:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 8006d2a:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 8006d2c:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006d2e:	f7ff f984 	bl	800603a <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006d32:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006d34:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d3a:	752b      	strb	r3, [r5, #20]
	LEAVE_FF(fs, res);
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	9801      	ldr	r0, [sp, #4]
 8006d40:	f7ff f970 	bl	8006024 <unlock_fs>
 8006d44:	e7ca      	b.n	8006cdc <f_sync+0x38>

08006d46 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006d46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d48:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006d4a:	f7ff ffab 	bl	8006ca4 <f_sync>
	if (res == FR_OK)
 8006d4e:	4604      	mov	r4, r0
 8006d50:	b978      	cbnz	r0, 8006d72 <f_close+0x2c>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006d52:	a901      	add	r1, sp, #4
 8006d54:	4628      	mov	r0, r5
 8006d56:	f7ff fd74 	bl	8006842 <validate>
		if (res == FR_OK) {
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	b948      	cbnz	r0, 8006d72 <f_close+0x2c>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006d5e:	6928      	ldr	r0, [r5, #16]
 8006d60:	f7fe ffee 	bl	8005d40 <dec_lock>
			if (res == FR_OK)
 8006d64:	4604      	mov	r4, r0
 8006d66:	b900      	cbnz	r0, 8006d6a <f_close+0x24>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006d68:	6028      	str	r0, [r5, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	9801      	ldr	r0, [sp, #4]
 8006d6e:	f7ff f959 	bl	8006024 <unlock_fs>
#endif
		}
	}
	return res;
}
 8006d72:	4620      	mov	r0, r4
 8006d74:	b003      	add	sp, #12
 8006d76:	bd30      	pop	{r4, r5, pc}

08006d78 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006d78:	4b0e      	ldr	r3, [pc, #56]	; (8006db4 <FATFS_LinkDriverEx+0x3c>)
{
 8006d7a:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8006d7c:	7a5c      	ldrb	r4, [r3, #9]
{
 8006d7e:	4605      	mov	r5, r0
  if(disk.nbr < _VOLUMES)
 8006d80:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8006d84:	b9a4      	cbnz	r4, 8006db0 <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006d86:	7a5c      	ldrb	r4, [r3, #9]
 8006d88:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8006d8a:	7a5c      	ldrb	r4, [r3, #9]
 8006d8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d90:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8006d92:	7a5c      	ldrb	r4, [r3, #9]
 8006d94:	441c      	add	r4, r3
 8006d96:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8006d98:	7a5a      	ldrb	r2, [r3, #9]
 8006d9a:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8006d9c:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8006d9e:	b2e4      	uxtb	r4, r4
 8006da0:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8006da2:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8006da4:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8006da6:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006da8:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8006daa:	70c8      	strb	r0, [r1, #3]
    path[2] = '/';
 8006dac:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 8006dae:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8006db0:	2001      	movs	r0, #1
 8006db2:	e7fc      	b.n	8006dae <FATFS_LinkDriverEx+0x36>
 8006db4:	20010aa4 	.word	0x20010aa4

08006db8 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8006db8:	2200      	movs	r2, #0
 8006dba:	f7ff bfdd 	b.w	8006d78 <FATFS_LinkDriverEx>

08006dbe <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8006dbe:	b510      	push	{r4, lr}
 8006dc0:	460c      	mov	r4, r1

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	f000 f816 	bl	8006df8 <osSemaphoreNew>
 8006dcc:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 8006dce:	3800      	subs	r0, #0
 8006dd0:	bf18      	it	ne
 8006dd2:	2001      	movne	r0, #1
 8006dd4:	bd10      	pop	{r4, pc}

08006dd6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8006dd6:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8006dd8:	f000 f8d4 	bl	8006f84 <osSemaphoreDelete>
#endif
    return 1;
}
 8006ddc:	2001      	movs	r0, #1
 8006dde:	bd08      	pop	{r3, pc}

08006de0 <ff_req_grant>:
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8006de0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
 8006de4:	b508      	push	{r3, lr}
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8006de6:	f000 f85d 	bl	8006ea4 <osSemaphoreAcquire>
  {
    ret = 1;
  }

  return ret;
}
 8006dea:	fab0 f080 	clz	r0, r0
 8006dee:	0940      	lsrs	r0, r0, #5
 8006df0:	bd08      	pop	{r3, pc}

08006df2 <ff_rel_grant>:
)
{
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8006df2:	f000 b891 	b.w	8006f18 <osSemaphoreRelease>
	...

08006df8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006df8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dfa:	460e      	mov	r6, r1
 8006dfc:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dfe:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006e02:	b11b      	cbz	r3, 8006e0c <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8006e04:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006e06:	4620      	mov	r0, r4
 8006e08:	b002      	add	sp, #8
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e0c:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006e10:	b913      	cbnz	r3, 8006e18 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e12:	f3ef 8311 	mrs	r3, BASEPRI
 8006e16:	b11b      	cbz	r3, 8006e20 <osSemaphoreNew+0x28>
 8006e18:	4b21      	ldr	r3, [pc, #132]	; (8006ea0 <osSemaphoreNew+0xa8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d0f1      	beq.n	8006e04 <osSemaphoreNew+0xc>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d0ef      	beq.n	8006e04 <osSemaphoreNew+0xc>
 8006e24:	42b0      	cmp	r0, r6
 8006e26:	d3ed      	bcc.n	8006e04 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8006e28:	b1ed      	cbz	r5, 8006e66 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e2a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006e2e:	b1c3      	cbz	r3, 8006e62 <osSemaphoreNew+0x6a>
 8006e30:	2a4f      	cmp	r2, #79	; 0x4f
 8006e32:	d9e7      	bls.n	8006e04 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8006e34:	2801      	cmp	r0, #1
 8006e36:	d129      	bne.n	8006e8c <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006e38:	2203      	movs	r2, #3
 8006e3a:	9200      	str	r2, [sp, #0]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4611      	mov	r1, r2
 8006e40:	f000 fbdc 	bl	80075fc <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8006e44:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d0dc      	beq.n	8006e04 <osSemaphoreNew+0xc>
 8006e4a:	b1ce      	cbz	r6, 8006e80 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	461a      	mov	r2, r3
 8006e50:	4619      	mov	r1, r3
 8006e52:	f000 fc58 	bl	8007706 <xQueueGenericSend>
 8006e56:	2801      	cmp	r0, #1
 8006e58:	d012      	beq.n	8006e80 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 feb0 	bl	8007bc0 <vQueueDelete>
 8006e60:	e7d0      	b.n	8006e04 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006e62:	2a00      	cmp	r2, #0
 8006e64:	d1ce      	bne.n	8006e04 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8006e66:	2801      	cmp	r0, #1
 8006e68:	d104      	bne.n	8006e74 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f000 fbd9 	bl	8007624 <xQueueGenericCreate>
 8006e72:	e7e7      	b.n	8006e44 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006e74:	4631      	mov	r1, r6
 8006e76:	f000 fc24 	bl	80076c2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d0c1      	beq.n	8006e04 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8006e80:	b95d      	cbnz	r5, 8006e9a <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 8006e82:	4629      	mov	r1, r5
 8006e84:	4620      	mov	r0, r4
 8006e86:	f000 fe75 	bl	8007b74 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8006e8a:	e7bc      	b.n	8006e06 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	4631      	mov	r1, r6
 8006e90:	f000 fbf1 	bl	8007676 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8006e94:	4604      	mov	r4, r0
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d0b4      	beq.n	8006e04 <osSemaphoreNew+0xc>
          name = attr->name;
 8006e9a:	682d      	ldr	r5, [r5, #0]
 8006e9c:	e7f1      	b.n	8006e82 <osSemaphoreNew+0x8a>
 8006e9e:	bf00      	nop
 8006ea0:	20010ab0 	.word	0x20010ab0

08006ea4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006ea4:	b513      	push	{r0, r1, r4, lr}
 8006ea6:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006ea8:	b918      	cbnz	r0, 8006eb2 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 8006eaa:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8006eae:	b002      	add	sp, #8
 8006eb0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eb2:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 8006eb6:	b163      	cbz	r3, 8006ed2 <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 8006eb8:	2c00      	cmp	r4, #0
 8006eba:	d1f6      	bne.n	8006eaa <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006ebc:	aa01      	add	r2, sp, #4
 8006ebe:	4621      	mov	r1, r4
      yield = pdFALSE;
 8006ec0:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006ec2:	f000 fe02 	bl	8007aca <xQueueReceiveFromISR>
 8006ec6:	2801      	cmp	r0, #1
 8006ec8:	d113      	bne.n	8006ef2 <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 8006eca:	9b01      	ldr	r3, [sp, #4]
 8006ecc:	b9a3      	cbnz	r3, 8006ef8 <osSemaphoreAcquire+0x54>
  stat = osOK;
 8006ece:	2000      	movs	r0, #0
 8006ed0:	e7ed      	b.n	8006eae <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed2:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8006ed6:	b913      	cbnz	r3, 8006ede <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ed8:	f3ef 8311 	mrs	r3, BASEPRI
 8006edc:	b11b      	cbz	r3, 8006ee6 <osSemaphoreAcquire+0x42>
 8006ede:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <osSemaphoreAcquire+0x70>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d0e8      	beq.n	8006eb8 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	f000 fd24 	bl	8007934 <xQueueSemaphoreTake>
 8006eec:	2801      	cmp	r0, #1
 8006eee:	d0ee      	beq.n	8006ece <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 8006ef0:	b96c      	cbnz	r4, 8006f0e <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 8006ef2:	f06f 0002 	mvn.w	r0, #2
 8006ef6:	e7da      	b.n	8006eae <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8006ef8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f00:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	e7df      	b.n	8006ece <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 8006f0e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8006f12:	e7cc      	b.n	8006eae <osSemaphoreAcquire+0xa>
 8006f14:	20010ab0 	.word	0x20010ab0

08006f18 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006f18:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006f1a:	b370      	cbz	r0, 8006f7a <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f1c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006f20:	b14b      	cbz	r3, 8006f36 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 8006f22:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006f24:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8006f26:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006f28:	f000 fca8 	bl	800787c <xQueueGiveFromISR>
 8006f2c:	2801      	cmp	r0, #1
 8006f2e:	d014      	beq.n	8006f5a <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8006f30:	f06f 0002 	mvn.w	r0, #2
 8006f34:	e014      	b.n	8006f60 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f36:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8006f3a:	b913      	cbnz	r3, 8006f42 <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8006f40:	b11b      	cbz	r3, 8006f4a <osSemaphoreRelease+0x32>
 8006f42:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <osSemaphoreRelease+0x68>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d0eb      	beq.n	8006f22 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4619      	mov	r1, r3
 8006f50:	f000 fbd9 	bl	8007706 <xQueueGenericSend>
 8006f54:	2801      	cmp	r0, #1
 8006f56:	d002      	beq.n	8006f5e <osSemaphoreRelease+0x46>
 8006f58:	e7ea      	b.n	8006f30 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 8006f5a:	9b01      	ldr	r3, [sp, #4]
 8006f5c:	b913      	cbnz	r3, 8006f64 <osSemaphoreRelease+0x4c>
  stat = osOK;
 8006f5e:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8006f60:	b002      	add	sp, #8
 8006f62:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8006f64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	e7f1      	b.n	8006f5e <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8006f7a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006f7e:	e7ef      	b.n	8006f60 <osSemaphoreRelease+0x48>
 8006f80:	20010ab0 	.word	0x20010ab0

08006f84 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006f84:	b507      	push	{r0, r1, r2, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f86:	f3ef 8305 	mrs	r3, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006f8a:	b123      	cbz	r3, 8006f96 <osSemaphoreDelete+0x12>
    stat = osErrorISR;
 8006f8c:	f06f 0005 	mvn.w	r0, #5
#else
  stat = osError;
#endif

  return (stat);
}
 8006f90:	b003      	add	sp, #12
 8006f92:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f96:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006f9a:	b913      	cbnz	r3, 8006fa2 <osSemaphoreDelete+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa0:	b11b      	cbz	r3, 8006faa <osSemaphoreDelete+0x26>
 8006fa2:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <osSemaphoreDelete+0x40>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d0f0      	beq.n	8006f8c <osSemaphoreDelete+0x8>
  else if (hSemaphore == NULL) {
 8006faa:	b138      	cbz	r0, 8006fbc <osSemaphoreDelete+0x38>
    vQueueUnregisterQueue (hSemaphore);
 8006fac:	9001      	str	r0, [sp, #4]
 8006fae:	f000 fdf3 	bl	8007b98 <vQueueUnregisterQueue>
    vSemaphoreDelete (hSemaphore);
 8006fb2:	9801      	ldr	r0, [sp, #4]
 8006fb4:	f000 fe04 	bl	8007bc0 <vQueueDelete>
    stat = osOK;
 8006fb8:	2000      	movs	r0, #0
 8006fba:	e7e9      	b.n	8006f90 <osSemaphoreDelete+0xc>
    stat = osErrorParameter;
 8006fbc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006fc0:	e7e6      	b.n	8006f90 <osSemaphoreDelete+0xc>
 8006fc2:	bf00      	nop
 8006fc4:	20010ab0 	.word	0x20010ab0

08006fc8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fc8:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <prvInsertBlockIntoFreeList+0x40>)
{
 8006fca:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fcc:	461a      	mov	r2, r3
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4283      	cmp	r3, r0
 8006fd2:	d3fb      	bcc.n	8006fcc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fd4:	6854      	ldr	r4, [r2, #4]
 8006fd6:	1911      	adds	r1, r2, r4
 8006fd8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fda:	bf01      	itttt	eq
 8006fdc:	6841      	ldreq	r1, [r0, #4]
 8006fde:	4610      	moveq	r0, r2
 8006fe0:	1909      	addeq	r1, r1, r4
 8006fe2:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fe4:	6844      	ldr	r4, [r0, #4]
 8006fe6:	1901      	adds	r1, r0, r4
 8006fe8:	428b      	cmp	r3, r1
 8006fea:	d107      	bne.n	8006ffc <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fec:	4907      	ldr	r1, [pc, #28]	; (800700c <prvInsertBlockIntoFreeList+0x44>)
 8006fee:	6809      	ldr	r1, [r1, #0]
 8006ff0:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ff2:	bf1f      	itttt	ne
 8006ff4:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ff6:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ff8:	1909      	addne	r1, r1, r4
 8006ffa:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ffc:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ffe:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007000:	bf18      	it	ne
 8007002:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007004:	bd10      	pop	{r4, pc}
 8007006:	bf00      	nop
 8007008:	20022fbc 	.word	0x20022fbc
 800700c:	20010ab4 	.word	0x20010ab4

08007010 <pvPortMalloc>:
{
 8007010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8007014:	4f41      	ldr	r7, [pc, #260]	; (800711c <pvPortMalloc+0x10c>)
{
 8007016:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007018:	f000 fe36 	bl	8007c88 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800701c:	4840      	ldr	r0, [pc, #256]	; (8007120 <pvPortMalloc+0x110>)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	b9f3      	cbnz	r3, 8007060 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8007022:	4940      	ldr	r1, [pc, #256]	; (8007124 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8007024:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007026:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007028:	4d3f      	ldr	r5, [pc, #252]	; (8007128 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800702a:	bf1b      	ittet	ne
 800702c:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800702e:	4a3f      	ldrne	r2, [pc, #252]	; (800712c <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007030:	4a3f      	ldreq	r2, [pc, #252]	; (8007130 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007032:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007036:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007038:	bf18      	it	ne
 800703a:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800703c:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800703e:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 8007040:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007042:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8007046:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800704a:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800704c:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800704e:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007052:	4a38      	ldr	r2, [pc, #224]	; (8007134 <pvPortMalloc+0x124>)
 8007054:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007056:	4a38      	ldr	r2, [pc, #224]	; (8007138 <pvPortMalloc+0x128>)
 8007058:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800705a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800705e:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007060:	f8d0 8000 	ldr.w	r8, [r0]
 8007064:	ea18 0f04 	tst.w	r8, r4
 8007068:	d152      	bne.n	8007110 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800706a:	2c00      	cmp	r4, #0
 800706c:	d041      	beq.n	80070f2 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800706e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007072:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007074:	bf1c      	itt	ne
 8007076:	f023 0307 	bicne.w	r3, r3, #7
 800707a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800707c:	2b00      	cmp	r3, #0
 800707e:	d047      	beq.n	8007110 <pvPortMalloc+0x100>
 8007080:	4c2d      	ldr	r4, [pc, #180]	; (8007138 <pvPortMalloc+0x128>)
 8007082:	6826      	ldr	r6, [r4, #0]
 8007084:	429e      	cmp	r6, r3
 8007086:	d343      	bcc.n	8007110 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8007088:	4a27      	ldr	r2, [pc, #156]	; (8007128 <pvPortMalloc+0x118>)
 800708a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800708c:	6869      	ldr	r1, [r5, #4]
 800708e:	4299      	cmp	r1, r3
 8007090:	d201      	bcs.n	8007096 <pvPortMalloc+0x86>
 8007092:	6828      	ldr	r0, [r5, #0]
 8007094:	b9b0      	cbnz	r0, 80070c4 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 8007096:	6838      	ldr	r0, [r7, #0]
 8007098:	42a8      	cmp	r0, r5
 800709a:	d039      	beq.n	8007110 <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800709c:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800709e:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070a0:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070a2:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070a4:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070a6:	d914      	bls.n	80070d2 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070a8:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070aa:	0742      	lsls	r2, r0, #29
 80070ac:	d00d      	beq.n	80070ca <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	b672      	cpsid	i
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	b662      	cpsie	i
 80070c2:	e7fe      	b.n	80070c2 <pvPortMalloc+0xb2>
 80070c4:	462a      	mov	r2, r5
 80070c6:	4605      	mov	r5, r0
 80070c8:	e7e0      	b.n	800708c <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070ca:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070cc:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070ce:	f7ff ff7b 	bl	8006fc8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070d2:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070d4:	4917      	ldr	r1, [pc, #92]	; (8007134 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070d6:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070d8:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070dc:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070de:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070e0:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070e4:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070e6:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070e8:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070ec:	bf38      	it	cc
 80070ee:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80070f0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80070f2:	f000 fe69 	bl	8007dc8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070f6:	0763      	lsls	r3, r4, #29
 80070f8:	d00c      	beq.n	8007114 <pvPortMalloc+0x104>
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	b672      	cpsid	i
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	b662      	cpsie	i
 800710e:	e7fe      	b.n	800710e <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8007110:	2400      	movs	r4, #0
 8007112:	e7ee      	b.n	80070f2 <pvPortMalloc+0xe2>
}
 8007114:	4620      	mov	r0, r4
 8007116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800711a:	bf00      	nop
 800711c:	20010ab4 	.word	0x20010ab4
 8007120:	20022fb0 	.word	0x20022fb0
 8007124:	20010ab8 	.word	0x20010ab8
 8007128:	20022fbc 	.word	0x20022fbc
 800712c:	20022fb0 	.word	0x20022fb0
 8007130:	000124f8 	.word	0x000124f8
 8007134:	20022fb8 	.word	0x20022fb8
 8007138:	20022fb4 	.word	0x20022fb4

0800713c <vPortFree>:
{
 800713c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800713e:	4604      	mov	r4, r0
 8007140:	2800      	cmp	r0, #0
 8007142:	d032      	beq.n	80071aa <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007144:	4a19      	ldr	r2, [pc, #100]	; (80071ac <vPortFree+0x70>)
 8007146:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800714a:	6812      	ldr	r2, [r2, #0]
 800714c:	4213      	tst	r3, r2
 800714e:	d10a      	bne.n	8007166 <vPortFree+0x2a>
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	b672      	cpsid	i
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	b662      	cpsie	i
 8007164:	e7fe      	b.n	8007164 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007166:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800716a:	b151      	cbz	r1, 8007182 <vPortFree+0x46>
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	b672      	cpsid	i
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	b662      	cpsie	i
 8007180:	e7fe      	b.n	8007180 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007182:	ea23 0302 	bic.w	r3, r3, r2
 8007186:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800718a:	f000 fd7d 	bl	8007c88 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800718e:	4a08      	ldr	r2, [pc, #32]	; (80071b0 <vPortFree+0x74>)
 8007190:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007194:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007198:	6811      	ldr	r1, [r2, #0]
 800719a:	440b      	add	r3, r1
 800719c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800719e:	f7ff ff13 	bl	8006fc8 <prvInsertBlockIntoFreeList>
}
 80071a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80071a6:	f000 be0f 	b.w	8007dc8 <xTaskResumeAll>
}
 80071aa:	bd10      	pop	{r4, pc}
 80071ac:	20022fb0 	.word	0x20022fb0
 80071b0:	20022fb4 	.word	0x20022fb4

080071b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071b8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071bc:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071be:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071c8:	4770      	bx	lr

080071ca <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80071ca:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071cc:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80071ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071d0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071d6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80071d8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80071da:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80071dc:	3301      	adds	r3, #1
 80071de:	6003      	str	r3, [r0, #0]
}
 80071e0:	4770      	bx	lr

080071e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071e2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071e4:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071e6:	1c63      	adds	r3, r4, #1
 80071e8:	d10a      	bne.n	8007200 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071ea:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071f0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071f2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80071f4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80071f6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80071f8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80071fa:	3301      	adds	r3, #1
 80071fc:	6003      	str	r3, [r0, #0]
}
 80071fe:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007200:	f100 0208 	add.w	r2, r0, #8
 8007204:	4613      	mov	r3, r2
 8007206:	6852      	ldr	r2, [r2, #4]
 8007208:	6815      	ldr	r5, [r2, #0]
 800720a:	42a5      	cmp	r5, r4
 800720c:	d9fa      	bls.n	8007204 <vListInsert+0x22>
 800720e:	e7ed      	b.n	80071ec <vListInsert+0xa>

08007210 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007210:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007212:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007216:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007218:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800721a:	6859      	ldr	r1, [r3, #4]
 800721c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800721e:	bf08      	it	eq
 8007220:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007222:	2200      	movs	r2, #0
 8007224:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	3a01      	subs	r2, #1
 800722a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800722c:	6818      	ldr	r0, [r3, #0]
}
 800722e:	4770      	bx	lr

08007230 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007230:	4b07      	ldr	r3, [pc, #28]	; (8007250 <pxCurrentTCBConst2>)
 8007232:	6819      	ldr	r1, [r3, #0]
 8007234:	6808      	ldr	r0, [r1, #0]
 8007236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723a:	f380 8809 	msr	PSP, r0
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f04f 0000 	mov.w	r0, #0
 8007246:	f380 8811 	msr	BASEPRI, r0
 800724a:	4770      	bx	lr
 800724c:	f3af 8000 	nop.w

08007250 <pxCurrentTCBConst2>:
 8007250:	2002300c 	.word	0x2002300c

08007254 <vPortEnterCritical>:
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	b672      	cpsid	i
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007268:	4a0b      	ldr	r2, [pc, #44]	; (8007298 <vPortEnterCritical+0x44>)
 800726a:	6813      	ldr	r3, [r2, #0]
 800726c:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800726e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007272:	d110      	bne.n	8007296 <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007274:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007278:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800727c:	b2db      	uxtb	r3, r3
 800727e:	b153      	cbz	r3, 8007296 <vPortEnterCritical+0x42>
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	b672      	cpsid	i
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	b662      	cpsie	i
 8007294:	e7fe      	b.n	8007294 <vPortEnterCritical+0x40>
	}
}
 8007296:	4770      	bx	lr
 8007298:	20000f60 	.word	0x20000f60

0800729c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800729c:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <vPortExitCritical+0x28>)
 800729e:	6813      	ldr	r3, [r2, #0]
 80072a0:	b953      	cbnz	r3, 80072b8 <vPortExitCritical+0x1c>
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	b672      	cpsid	i
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	b662      	cpsie	i
 80072b6:	e7fe      	b.n	80072b6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80072b8:	3b01      	subs	r3, #1
 80072ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072bc:	b90b      	cbnz	r3, 80072c2 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072be:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80072c2:	4770      	bx	lr
 80072c4:	20000f60 	.word	0x20000f60
	...

080072d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072d0:	f3ef 8009 	mrs	r0, PSP
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	4b15      	ldr	r3, [pc, #84]	; (8007330 <pxCurrentTCBConst>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	f01e 0f10 	tst.w	lr, #16
 80072e0:	bf08      	it	eq
 80072e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ea:	6010      	str	r0, [r2, #0]
 80072ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072f4:	b672      	cpsid	i
 80072f6:	f380 8811 	msr	BASEPRI, r0
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	b662      	cpsie	i
 8007304:	f000 fde2 	bl	8007ecc <vTaskSwitchContext>
 8007308:	f04f 0000 	mov.w	r0, #0
 800730c:	f380 8811 	msr	BASEPRI, r0
 8007310:	bc09      	pop	{r0, r3}
 8007312:	6819      	ldr	r1, [r3, #0]
 8007314:	6808      	ldr	r0, [r1, #0]
 8007316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731a:	f01e 0f10 	tst.w	lr, #16
 800731e:	bf08      	it	eq
 8007320:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007324:	f380 8809 	msr	PSP, r0
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop

08007330 <pxCurrentTCBConst>:
 8007330:	2002300c 	.word	0x2002300c

08007334 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007334:	b508      	push	{r3, lr}
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733a:	b672      	cpsid	i
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800734a:	f000 fca5 	bl	8007c98 <xTaskIncrementTick>
 800734e:	b128      	cbz	r0, 800735c <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007350:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007358:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800735c:	2300      	movs	r3, #0
 800735e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007362:	bd08      	pop	{r3, pc}

08007364 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007364:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007368:	2b0f      	cmp	r3, #15
 800736a:	d910      	bls.n	800738e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800736c:	4a13      	ldr	r2, [pc, #76]	; (80073bc <vPortValidateInterruptPriority+0x58>)
 800736e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007370:	4a13      	ldr	r2, [pc, #76]	; (80073c0 <vPortValidateInterruptPriority+0x5c>)
 8007372:	7812      	ldrb	r2, [r2, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d90a      	bls.n	800738e <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	b672      	cpsid	i
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	b662      	cpsie	i
 800738c:	e7fe      	b.n	800738c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800738e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007392:	4a0c      	ldr	r2, [pc, #48]	; (80073c4 <vPortValidateInterruptPriority+0x60>)
 8007394:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007398:	6812      	ldr	r2, [r2, #0]
 800739a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800739e:	4293      	cmp	r3, r2
 80073a0:	d90a      	bls.n	80073b8 <vPortValidateInterruptPriority+0x54>
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	b672      	cpsid	i
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	b662      	cpsie	i
 80073b6:	e7fe      	b.n	80073b6 <vPortValidateInterruptPriority+0x52>
	}
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	e000e3f0 	.word	0xe000e3f0
 80073c0:	20022fc4 	.word	0x20022fc4
 80073c4:	20022fc8 	.word	0x20022fc8

080073c8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073c8:	b510      	push	{r4, lr}
 80073ca:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073cc:	f7ff ff42 	bl	8007254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073d0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80073d2:	f7ff ff63 	bl	800729c <vPortExitCritical>

	return xReturn;
}
 80073d6:	fab4 f084 	clz	r0, r4
 80073da:	0940      	lsrs	r0, r0, #5
 80073dc:	bd10      	pop	{r4, pc}

080073de <prvCopyDataToQueue>:
{
 80073de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e0:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80073e4:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073e6:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073e8:	b952      	cbnz	r2, 8007400 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073ea:	6807      	ldr	r7, [r0, #0]
 80073ec:	bb47      	cbnz	r7, 8007440 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073ee:	6880      	ldr	r0, [r0, #8]
 80073f0:	f000 feba 	bl	8008168 <xTaskPriorityDisinherit>
 80073f4:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073f6:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073f8:	3601      	adds	r6, #1
}
 80073fa:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073fc:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80073fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007400:	b965      	cbnz	r5, 800741c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007402:	6840      	ldr	r0, [r0, #4]
 8007404:	f012 f94a 	bl	801969c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007408:	6863      	ldr	r3, [r4, #4]
 800740a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800740c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800740e:	68a2      	ldr	r2, [r4, #8]
 8007410:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007412:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007414:	d3f0      	bcc.n	80073f8 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	6063      	str	r3, [r4, #4]
 800741a:	e7ed      	b.n	80073f8 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800741c:	68c0      	ldr	r0, [r0, #12]
 800741e:	f012 f93d 	bl	801969c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007422:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007424:	68e3      	ldr	r3, [r4, #12]
 8007426:	4251      	negs	r1, r2
 8007428:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800742e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007430:	bf3e      	ittt	cc
 8007432:	68a3      	ldrcc	r3, [r4, #8]
 8007434:	185b      	addcc	r3, r3, r1
 8007436:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007438:	2d02      	cmp	r5, #2
 800743a:	d101      	bne.n	8007440 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800743c:	b116      	cbz	r6, 8007444 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800743e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8007440:	2500      	movs	r5, #0
 8007442:	e7d9      	b.n	80073f8 <prvCopyDataToQueue+0x1a>
 8007444:	4635      	mov	r5, r6
 8007446:	e7d7      	b.n	80073f8 <prvCopyDataToQueue+0x1a>

08007448 <prvCopyDataFromQueue>:
{
 8007448:	4603      	mov	r3, r0
 800744a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800744c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800744e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007450:	b162      	cbz	r2, 800746c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007452:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007454:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007456:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007458:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800745a:	60dc      	str	r4, [r3, #12]
}
 800745c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007460:	bf24      	itt	cs
 8007462:	6819      	ldrcs	r1, [r3, #0]
 8007464:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007466:	68d9      	ldr	r1, [r3, #12]
 8007468:	f012 b918 	b.w	801969c <memcpy>
}
 800746c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007470:	4770      	bx	lr

08007472 <prvUnlockQueue>:
{
 8007472:	b570      	push	{r4, r5, r6, lr}
 8007474:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007476:	f7ff feed 	bl	8007254 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800747a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800747e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007482:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007484:	2d00      	cmp	r5, #0
 8007486:	dc14      	bgt.n	80074b2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007488:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800748a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800748e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007492:	f7ff ff03 	bl	800729c <vPortExitCritical>
	taskENTER_CRITICAL();
 8007496:	f7ff fedd 	bl	8007254 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800749a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800749e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074a0:	2d00      	cmp	r5, #0
 80074a2:	dc12      	bgt.n	80074ca <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80074a4:	23ff      	movs	r3, #255	; 0xff
 80074a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80074aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80074ae:	f7ff bef5 	b.w	800729c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0e7      	beq.n	8007488 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074b8:	4630      	mov	r0, r6
 80074ba:	f000 fd6d 	bl	8007f98 <xTaskRemoveFromEventList>
 80074be:	b108      	cbz	r0, 80074c4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80074c0:	f000 fdfc 	bl	80080bc <vTaskMissedYield>
			--cTxLock;
 80074c4:	3d01      	subs	r5, #1
 80074c6:	b26d      	sxtb	r5, r5
 80074c8:	e7dc      	b.n	8007484 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0e9      	beq.n	80074a4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074d0:	4630      	mov	r0, r6
 80074d2:	f000 fd61 	bl	8007f98 <xTaskRemoveFromEventList>
 80074d6:	b108      	cbz	r0, 80074dc <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80074d8:	f000 fdf0 	bl	80080bc <vTaskMissedYield>
				--cRxLock;
 80074dc:	3d01      	subs	r5, #1
 80074de:	b26d      	sxtb	r5, r5
 80074e0:	e7de      	b.n	80074a0 <prvUnlockQueue+0x2e>

080074e2 <xQueueGenericReset>:
{
 80074e2:	b538      	push	{r3, r4, r5, lr}
 80074e4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80074e6:	4604      	mov	r4, r0
 80074e8:	b950      	cbnz	r0, 8007500 <xQueueGenericReset+0x1e>
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	b672      	cpsid	i
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	b662      	cpsie	i
 80074fe:	e7fe      	b.n	80074fe <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8007500:	f7ff fea8 	bl	8007254 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800750a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800750c:	434b      	muls	r3, r1
 800750e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007510:	1a5b      	subs	r3, r3, r1
 8007512:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007514:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007516:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007518:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800751a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800751c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800751e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007526:	b9a5      	cbnz	r5, 8007552 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	b173      	cbz	r3, 800754a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800752c:	f104 0010 	add.w	r0, r4, #16
 8007530:	f000 fd32 	bl	8007f98 <xTaskRemoveFromEventList>
 8007534:	b148      	cbz	r0, 800754a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8007536:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800753a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800754a:	f7ff fea7 	bl	800729c <vPortExitCritical>
}
 800754e:	2001      	movs	r0, #1
 8007550:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007552:	f104 0010 	add.w	r0, r4, #16
 8007556:	f7ff fe2d 	bl	80071b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800755a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800755e:	f7ff fe29 	bl	80071b4 <vListInitialise>
 8007562:	e7f2      	b.n	800754a <xQueueGenericReset+0x68>

08007564 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 8007564:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 8007566:	461c      	mov	r4, r3
 8007568:	b953      	cbnz	r3, 8007580 <xQueueGenericCreateStatic.part.0+0x1c>
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	b672      	cpsid	i
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	b662      	cpsie	i
 800757e:	e7fe      	b.n	800757e <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007580:	b15a      	cbz	r2, 800759a <xQueueGenericCreateStatic.part.0+0x36>
 8007582:	b9b1      	cbnz	r1, 80075b2 <xQueueGenericCreateStatic.part.0+0x4e>
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	b672      	cpsid	i
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	b662      	cpsie	i
 8007598:	e7fe      	b.n	8007598 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800759a:	b151      	cbz	r1, 80075b2 <xQueueGenericCreateStatic.part.0+0x4e>
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	b672      	cpsid	i
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	b662      	cpsie	i
 80075b0:	e7fe      	b.n	80075b0 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80075b2:	2350      	movs	r3, #80	; 0x50
 80075b4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80075b6:	9b01      	ldr	r3, [sp, #4]
 80075b8:	2b50      	cmp	r3, #80	; 0x50
 80075ba:	d00a      	beq.n	80075d2 <xQueueGenericCreateStatic.part.0+0x6e>
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	b672      	cpsid	i
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	b662      	cpsie	i
 80075d0:	e7fe      	b.n	80075d0 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80075d2:	2900      	cmp	r1, #0
 80075d4:	bf08      	it	eq
 80075d6:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075d8:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075da:	2301      	movs	r3, #1
 80075dc:	6022      	str	r2, [r4, #0]
 80075de:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80075e2:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075e6:	4619      	mov	r1, r3
 80075e8:	4620      	mov	r0, r4
 80075ea:	f7ff ff7a 	bl	80074e2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80075ee:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 80075f2:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80075f4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 80075f8:	b002      	add	sp, #8
 80075fa:	bd10      	pop	{r4, pc}

080075fc <xQueueGenericCreateStatic>:
	{
 80075fc:	b410      	push	{r4}
 80075fe:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007602:	b950      	cbnz	r0, 800761a <xQueueGenericCreateStatic+0x1e>
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	b672      	cpsid	i
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	b662      	cpsie	i
 8007618:	e7fe      	b.n	8007618 <xQueueGenericCreateStatic+0x1c>
 800761a:	9401      	str	r4, [sp, #4]
	}
 800761c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007620:	f7ff bfa0 	b.w	8007564 <xQueueGenericCreateStatic.part.0>

08007624 <xQueueGenericCreate>:
	{
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	460d      	mov	r5, r1
 8007628:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800762a:	4606      	mov	r6, r0
 800762c:	b950      	cbnz	r0, 8007644 <xQueueGenericCreate+0x20>
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	b672      	cpsid	i
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	b662      	cpsie	i
 8007642:	e7fe      	b.n	8007642 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007644:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007646:	3050      	adds	r0, #80	; 0x50
 8007648:	f7ff fce2 	bl	8007010 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800764c:	4604      	mov	r4, r0
 800764e:	b170      	cbz	r0, 800766e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007650:	2300      	movs	r3, #0
 8007652:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007656:	b165      	cbz	r5, 8007672 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007658:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800765c:	2101      	movs	r1, #1
 800765e:	4620      	mov	r0, r4
 8007660:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8007662:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007666:	f7ff ff3c 	bl	80074e2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800766a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800766e:	4620      	mov	r0, r4
 8007670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007672:	4603      	mov	r3, r0
 8007674:	e7f2      	b.n	800765c <xQueueGenericCreate+0x38>

08007676 <xQueueCreateCountingSemaphoreStatic>:
	{
 8007676:	b513      	push	{r0, r1, r4, lr}
 8007678:	4613      	mov	r3, r2
 800767a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800767c:	b950      	cbnz	r0, 8007694 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	b672      	cpsid	i
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	b662      	cpsie	i
 8007692:	e7fe      	b.n	8007692 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007694:	4288      	cmp	r0, r1
 8007696:	d20a      	bcs.n	80076ae <xQueueCreateCountingSemaphoreStatic+0x38>
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	b672      	cpsid	i
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	b662      	cpsie	i
 80076ac:	e7fe      	b.n	80076ac <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80076ae:	2202      	movs	r2, #2
 80076b0:	9200      	str	r2, [sp, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	4611      	mov	r1, r2
 80076b6:	f7ff ffa1 	bl	80075fc <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80076ba:	b100      	cbz	r0, 80076be <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80076bc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80076be:	b002      	add	sp, #8
 80076c0:	bd10      	pop	{r4, pc}

080076c2 <xQueueCreateCountingSemaphore>:
	{
 80076c2:	b510      	push	{r4, lr}
 80076c4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80076c6:	b950      	cbnz	r0, 80076de <xQueueCreateCountingSemaphore+0x1c>
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	b672      	cpsid	i
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	b662      	cpsie	i
 80076dc:	e7fe      	b.n	80076dc <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80076de:	4288      	cmp	r0, r1
 80076e0:	d20a      	bcs.n	80076f8 <xQueueCreateCountingSemaphore+0x36>
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	b672      	cpsid	i
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	b662      	cpsie	i
 80076f6:	e7fe      	b.n	80076f6 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80076f8:	2202      	movs	r2, #2
 80076fa:	2100      	movs	r1, #0
 80076fc:	f7ff ff92 	bl	8007624 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007700:	b100      	cbz	r0, 8007704 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007702:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007704:	bd10      	pop	{r4, pc}

08007706 <xQueueGenericSend>:
{
 8007706:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800770a:	b085      	sub	sp, #20
 800770c:	4688      	mov	r8, r1
 800770e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007710:	4604      	mov	r4, r0
{
 8007712:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007714:	b950      	cbnz	r0, 800772c <xQueueGenericSend+0x26>
 8007716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771a:	b672      	cpsid	i
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	b662      	cpsie	i
 800772a:	e7fe      	b.n	800772a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800772c:	b961      	cbnz	r1, 8007748 <xQueueGenericSend+0x42>
 800772e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007730:	b153      	cbz	r3, 8007748 <xQueueGenericSend+0x42>
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	b672      	cpsid	i
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	b662      	cpsie	i
 8007746:	e7fe      	b.n	8007746 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007748:	2f02      	cmp	r7, #2
 800774a:	d10d      	bne.n	8007768 <xQueueGenericSend+0x62>
 800774c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800774e:	2b01      	cmp	r3, #1
 8007750:	d00a      	beq.n	8007768 <xQueueGenericSend+0x62>
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	b672      	cpsid	i
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	b662      	cpsie	i
 8007766:	e7fe      	b.n	8007766 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007768:	f000 fcae 	bl	80080c8 <xTaskGetSchedulerState>
 800776c:	4606      	mov	r6, r0
 800776e:	b960      	cbnz	r0, 800778a <xQueueGenericSend+0x84>
 8007770:	9b01      	ldr	r3, [sp, #4]
 8007772:	b15b      	cbz	r3, 800778c <xQueueGenericSend+0x86>
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	b672      	cpsid	i
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	b662      	cpsie	i
 8007788:	e7fe      	b.n	8007788 <xQueueGenericSend+0x82>
 800778a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800778c:	f04f 0900 	mov.w	r9, #0
 8007790:	e037      	b.n	8007802 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007792:	9d01      	ldr	r5, [sp, #4]
 8007794:	b91d      	cbnz	r5, 800779e <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8007796:	f7ff fd81 	bl	800729c <vPortExitCritical>
			return errQUEUE_FULL;
 800779a:	2000      	movs	r0, #0
 800779c:	e052      	b.n	8007844 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800779e:	b916      	cbnz	r6, 80077a6 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077a0:	a802      	add	r0, sp, #8
 80077a2:	f000 fc3f 	bl	8008024 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80077a6:	f7ff fd79 	bl	800729c <vPortExitCritical>
		vTaskSuspendAll();
 80077aa:	f000 fa6d 	bl	8007c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077ae:	f7ff fd51 	bl	8007254 <vPortEnterCritical>
 80077b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80077b6:	2bff      	cmp	r3, #255	; 0xff
 80077b8:	d101      	bne.n	80077be <xQueueGenericSend+0xb8>
 80077ba:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80077be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80077c2:	2bff      	cmp	r3, #255	; 0xff
 80077c4:	d101      	bne.n	80077ca <xQueueGenericSend+0xc4>
 80077c6:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80077ca:	f7ff fd67 	bl	800729c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077ce:	a901      	add	r1, sp, #4
 80077d0:	a802      	add	r0, sp, #8
 80077d2:	f000 fc33 	bl	800803c <xTaskCheckForTimeOut>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d14a      	bne.n	8007870 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077da:	f7ff fd3b 	bl	8007254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80077e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d131      	bne.n	800784a <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80077e6:	f7ff fd59 	bl	800729c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077ea:	9901      	ldr	r1, [sp, #4]
 80077ec:	f104 0010 	add.w	r0, r4, #16
 80077f0:	f000 fbb6 	bl	8007f60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077f4:	4620      	mov	r0, r4
 80077f6:	f7ff fe3c 	bl	8007472 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077fa:	f000 fae5 	bl	8007dc8 <xTaskResumeAll>
 80077fe:	b360      	cbz	r0, 800785a <xQueueGenericSend+0x154>
 8007800:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007802:	f7ff fd27 	bl	8007254 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007806:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007808:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800780a:	429a      	cmp	r2, r3
 800780c:	d301      	bcc.n	8007812 <xQueueGenericSend+0x10c>
 800780e:	2f02      	cmp	r7, #2
 8007810:	d1bf      	bne.n	8007792 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007812:	463a      	mov	r2, r7
 8007814:	4641      	mov	r1, r8
 8007816:	4620      	mov	r0, r4
 8007818:	f7ff fde1 	bl	80073de <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800781c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800781e:	b11b      	cbz	r3, 8007828 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007820:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007824:	f000 fbb8 	bl	8007f98 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007828:	b148      	cbz	r0, 800783e <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800782a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800782e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007832:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800783e:	f7ff fd2d 	bl	800729c <vPortExitCritical>
				return pdPASS;
 8007842:	2001      	movs	r0, #1
}
 8007844:	b005      	add	sp, #20
 8007846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800784a:	f7ff fd27 	bl	800729c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800784e:	4620      	mov	r0, r4
 8007850:	f7ff fe0f 	bl	8007472 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007854:	f000 fab8 	bl	8007dc8 <xTaskResumeAll>
 8007858:	e7d2      	b.n	8007800 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800785a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800785e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007862:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	e7c7      	b.n	8007800 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 8007870:	4620      	mov	r0, r4
 8007872:	f7ff fdfe 	bl	8007472 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007876:	f000 faa7 	bl	8007dc8 <xTaskResumeAll>
 800787a:	e78e      	b.n	800779a <xQueueGenericSend+0x94>

0800787c <xQueueGiveFromISR>:
{
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007880:	4604      	mov	r4, r0
 8007882:	b950      	cbnz	r0, 800789a <xQueueGiveFromISR+0x1e>
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	b672      	cpsid	i
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	b662      	cpsie	i
 8007898:	e7fe      	b.n	8007898 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800789a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800789c:	b153      	cbz	r3, 80078b4 <xQueueGiveFromISR+0x38>
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	b672      	cpsid	i
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	b662      	cpsie	i
 80078b2:	e7fe      	b.n	80078b2 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80078b4:	6803      	ldr	r3, [r0, #0]
 80078b6:	b963      	cbnz	r3, 80078d2 <xQueueGiveFromISR+0x56>
 80078b8:	6883      	ldr	r3, [r0, #8]
 80078ba:	b153      	cbz	r3, 80078d2 <xQueueGiveFromISR+0x56>
 80078bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c0:	b672      	cpsid	i
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	b662      	cpsie	i
 80078d0:	e7fe      	b.n	80078d0 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078d2:	f7ff fd47 	bl	8007364 <vPortValidateInterruptPriority>
	__asm volatile
 80078d6:	f3ef 8611 	mrs	r6, BASEPRI
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	b672      	cpsid	i
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80078f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d91c      	bls.n	8007930 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80078f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078fa:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80078fc:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80078fe:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007900:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8007902:	d110      	bne.n	8007926 <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007906:	b90b      	cbnz	r3, 800790c <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8007908:	2001      	movs	r0, #1
 800790a:	e009      	b.n	8007920 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800790c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007910:	f000 fb42 	bl	8007f98 <xTaskRemoveFromEventList>
 8007914:	2800      	cmp	r0, #0
 8007916:	d0f7      	beq.n	8007908 <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007918:	2d00      	cmp	r5, #0
 800791a:	d0f5      	beq.n	8007908 <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800791c:	2001      	movs	r0, #1
 800791e:	6028      	str	r0, [r5, #0]
	__asm volatile
 8007920:	f386 8811 	msr	BASEPRI, r6
}
 8007924:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007926:	3301      	adds	r3, #1
 8007928:	b25b      	sxtb	r3, r3
 800792a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800792e:	e7eb      	b.n	8007908 <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8007930:	2000      	movs	r0, #0
 8007932:	e7f5      	b.n	8007920 <xQueueGiveFromISR+0xa4>

08007934 <xQueueSemaphoreTake>:
{
 8007934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007936:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8007938:	4604      	mov	r4, r0
{
 800793a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800793c:	b950      	cbnz	r0, 8007954 <xQueueSemaphoreTake+0x20>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	b672      	cpsid	i
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	b662      	cpsie	i
 8007952:	e7fe      	b.n	8007952 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007954:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007956:	b155      	cbz	r5, 800796e <xQueueSemaphoreTake+0x3a>
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	b672      	cpsid	i
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	b662      	cpsie	i
 800796c:	e7fe      	b.n	800796c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800796e:	f000 fbab 	bl	80080c8 <xTaskGetSchedulerState>
 8007972:	4606      	mov	r6, r0
 8007974:	b960      	cbnz	r0, 8007990 <xQueueSemaphoreTake+0x5c>
 8007976:	9b01      	ldr	r3, [sp, #4]
 8007978:	b16b      	cbz	r3, 8007996 <xQueueSemaphoreTake+0x62>
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	b672      	cpsid	i
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	b662      	cpsie	i
 800798e:	e7fe      	b.n	800798e <xQueueSemaphoreTake+0x5a>
 8007990:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007992:	2700      	movs	r7, #0
 8007994:	e055      	b.n	8007a42 <xQueueSemaphoreTake+0x10e>
 8007996:	4605      	mov	r5, r0
 8007998:	e7fb      	b.n	8007992 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800799a:	9b01      	ldr	r3, [sp, #4]
 800799c:	b973      	cbnz	r3, 80079bc <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800799e:	b155      	cbz	r5, 80079b6 <xQueueSemaphoreTake+0x82>
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	b672      	cpsid	i
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	b662      	cpsie	i
 80079b4:	e7fe      	b.n	80079b4 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 80079b6:	f7ff fc71 	bl	800729c <vPortExitCritical>
					return errQUEUE_EMPTY;
 80079ba:	e062      	b.n	8007a82 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 80079bc:	b916      	cbnz	r6, 80079c4 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079be:	a802      	add	r0, sp, #8
 80079c0:	f000 fb30 	bl	8008024 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80079c4:	f7ff fc6a 	bl	800729c <vPortExitCritical>
		vTaskSuspendAll();
 80079c8:	f000 f95e 	bl	8007c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079cc:	f7ff fc42 	bl	8007254 <vPortEnterCritical>
 80079d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80079d4:	2bff      	cmp	r3, #255	; 0xff
 80079d6:	d101      	bne.n	80079dc <xQueueSemaphoreTake+0xa8>
 80079d8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80079dc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80079e0:	2bff      	cmp	r3, #255	; 0xff
 80079e2:	d101      	bne.n	80079e8 <xQueueSemaphoreTake+0xb4>
 80079e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079e8:	f7ff fc58 	bl	800729c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079ec:	a901      	add	r1, sp, #4
 80079ee:	a802      	add	r0, sp, #8
 80079f0:	f000 fb24 	bl	800803c <xTaskCheckForTimeOut>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d14d      	bne.n	8007a94 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079f8:	4620      	mov	r0, r4
 80079fa:	f7ff fce5 	bl	80073c8 <prvIsQueueEmpty>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d042      	beq.n	8007a88 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	b93b      	cbnz	r3, 8007a16 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8007a06:	f7ff fc25 	bl	8007254 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a0a:	68a0      	ldr	r0, [r4, #8]
 8007a0c:	f000 fb6c 	bl	80080e8 <xTaskPriorityInherit>
 8007a10:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007a12:	f7ff fc43 	bl	800729c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a16:	9901      	ldr	r1, [sp, #4]
 8007a18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007a1c:	f000 faa0 	bl	8007f60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a20:	4620      	mov	r0, r4
 8007a22:	f7ff fd26 	bl	8007472 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a26:	f000 f9cf 	bl	8007dc8 <xTaskResumeAll>
 8007a2a:	b948      	cbnz	r0, 8007a40 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 8007a2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007a42:	f7ff fc07 	bl	8007254 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0a6      	beq.n	800799a <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	b913      	cbnz	r3, 8007a5a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a54:	f000 fc26 	bl	80082a4 <pvTaskIncrementMutexHeldCount>
 8007a58:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	b173      	cbz	r3, 8007a7c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a5e:	f104 0010 	add.w	r0, r4, #16
 8007a62:	f000 fa99 	bl	8007f98 <xTaskRemoveFromEventList>
 8007a66:	b148      	cbz	r0, 8007a7c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8007a68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a70:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8007a7c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8007a7e:	f7ff fc0d 	bl	800729c <vPortExitCritical>
}
 8007a82:	4628      	mov	r0, r5
 8007a84:	b005      	add	sp, #20
 8007a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f7ff fcf2 	bl	8007472 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a8e:	f000 f99b 	bl	8007dc8 <xTaskResumeAll>
 8007a92:	e7d5      	b.n	8007a40 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 8007a94:	4620      	mov	r0, r4
 8007a96:	f7ff fcec 	bl	8007472 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a9a:	f000 f995 	bl	8007dc8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f7ff fc92 	bl	80073c8 <prvIsQueueEmpty>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d0cb      	beq.n	8007a40 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	d0ea      	beq.n	8007a82 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 8007aac:	f7ff fbd2 	bl	8007254 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007ab0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ab2:	b119      	cbz	r1, 8007abc <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007ab4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007ab6:	6819      	ldr	r1, [r3, #0]
 8007ab8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007abc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8007abe:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ac0:	f000 fb9a 	bl	80081f8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007ac4:	f7ff fbea 	bl	800729c <vPortExitCritical>
 8007ac8:	e7db      	b.n	8007a82 <xQueueSemaphoreTake+0x14e>

08007aca <xQueueReceiveFromISR>:
{
 8007aca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ace:	4689      	mov	r9, r1
 8007ad0:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	b950      	cbnz	r0, 8007aec <xQueueReceiveFromISR+0x22>
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	b672      	cpsid	i
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	b662      	cpsie	i
 8007aea:	e7fe      	b.n	8007aea <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aec:	b961      	cbnz	r1, 8007b08 <xQueueReceiveFromISR+0x3e>
 8007aee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007af0:	b153      	cbz	r3, 8007b08 <xQueueReceiveFromISR+0x3e>
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	b672      	cpsid	i
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	b662      	cpsie	i
 8007b06:	e7fe      	b.n	8007b06 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b08:	f7ff fc2c 	bl	8007364 <vPortValidateInterruptPriority>
	__asm volatile
 8007b0c:	f3ef 8711 	mrs	r7, BASEPRI
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	b672      	cpsid	i
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b24:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b26:	b31c      	cbz	r4, 8007b70 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b28:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b30:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b32:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b34:	f7ff fc88 	bl	8007448 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b38:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8007b3a:	1c73      	adds	r3, r6, #1
 8007b3c:	d113      	bne.n	8007b66 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b3e:	692b      	ldr	r3, [r5, #16]
 8007b40:	b90b      	cbnz	r3, 8007b46 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8007b42:	2001      	movs	r0, #1
 8007b44:	e00b      	b.n	8007b5e <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b46:	f105 0010 	add.w	r0, r5, #16
 8007b4a:	f000 fa25 	bl	8007f98 <xTaskRemoveFromEventList>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d0f7      	beq.n	8007b42 <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8007b52:	f1b8 0f00 	cmp.w	r8, #0
 8007b56:	d0f4      	beq.n	8007b42 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b58:	2001      	movs	r0, #1
 8007b5a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8007b5e:	f387 8811 	msr	BASEPRI, r7
}
 8007b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b66:	3601      	adds	r6, #1
 8007b68:	b276      	sxtb	r6, r6
 8007b6a:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8007b6e:	e7e8      	b.n	8007b42 <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8007b70:	4620      	mov	r0, r4
 8007b72:	e7f4      	b.n	8007b5e <xQueueReceiveFromISR+0x94>

08007b74 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b74:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b76:	4a07      	ldr	r2, [pc, #28]	; (8007b94 <vQueueAddToRegistry+0x20>)
	{
 8007b78:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b7a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8007b7e:	b92c      	cbnz	r4, 8007b8c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b88:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b8a:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d1f3      	bne.n	8007b7a <vQueueAddToRegistry+0x6>
 8007b92:	e7fa      	b.n	8007b8a <vQueueAddToRegistry+0x16>
 8007b94:	20022fcc 	.word	0x20022fcc

08007b98 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b98:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007b9a:	4a08      	ldr	r2, [pc, #32]	; (8007bbc <vQueueUnregisterQueue+0x24>)
	{
 8007b9c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007b9e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007ba2:	684c      	ldr	r4, [r1, #4]
 8007ba4:	4284      	cmp	r4, r0
 8007ba6:	d104      	bne.n	8007bb2 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007ba8:	2000      	movs	r0, #0
 8007baa:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007bae:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007bb0:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d1f2      	bne.n	8007b9e <vQueueUnregisterQueue+0x6>
 8007bb8:	e7fa      	b.n	8007bb0 <vQueueUnregisterQueue+0x18>
 8007bba:	bf00      	nop
 8007bbc:	20022fcc 	.word	0x20022fcc

08007bc0 <vQueueDelete>:
{
 8007bc0:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	b950      	cbnz	r0, 8007bdc <vQueueDelete+0x1c>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	b672      	cpsid	i
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	b662      	cpsie	i
 8007bda:	e7fe      	b.n	8007bda <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8007bdc:	f7ff ffdc 	bl	8007b98 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007be0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007be4:	b923      	cbnz	r3, 8007bf0 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 8007be6:	4620      	mov	r0, r4
}
 8007be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8007bec:	f7ff baa6 	b.w	800713c <vPortFree>
}
 8007bf0:	bd10      	pop	{r4, pc}
	...

08007bf4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bf6:	4b15      	ldr	r3, [pc, #84]	; (8007c4c <prvAddCurrentTaskToDelayedList+0x58>)
{
 8007bf8:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bfa:	4e15      	ldr	r6, [pc, #84]	; (8007c50 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8007bfc:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8007bfe:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c00:	6830      	ldr	r0, [r6, #0]
 8007c02:	3004      	adds	r0, #4
 8007c04:	f7ff fb04 	bl	8007210 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c08:	1c63      	adds	r3, r4, #1
 8007c0a:	d107      	bne.n	8007c1c <prvAddCurrentTaskToDelayedList+0x28>
 8007c0c:	b137      	cbz	r7, 8007c1c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c0e:	6831      	ldr	r1, [r6, #0]
 8007c10:	4810      	ldr	r0, [pc, #64]	; (8007c54 <prvAddCurrentTaskToDelayedList+0x60>)
 8007c12:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c18:	f7ff bad7 	b.w	80071ca <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c1c:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c1e:	6833      	ldr	r3, [r6, #0]
 8007c20:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c22:	d307      	bcc.n	8007c34 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c24:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <prvAddCurrentTaskToDelayedList+0x64>)
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	6831      	ldr	r1, [r6, #0]
}
 8007c2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c2e:	3104      	adds	r1, #4
 8007c30:	f7ff bad7 	b.w	80071e2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c34:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <prvAddCurrentTaskToDelayedList+0x68>)
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	6831      	ldr	r1, [r6, #0]
 8007c3a:	3104      	adds	r1, #4
 8007c3c:	f7ff fad1 	bl	80071e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c40:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	42a2      	cmp	r2, r4
 8007c46:	d900      	bls.n	8007c4a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8007c48:	601c      	str	r4, [r3, #0]
}
 8007c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c4c:	200234bc 	.word	0x200234bc
 8007c50:	2002300c 	.word	0x2002300c
 8007c54:	200234a8 	.word	0x200234a8
 8007c58:	20023014 	.word	0x20023014
 8007c5c:	20023010 	.word	0x20023010
 8007c60:	20023488 	.word	0x20023488

08007c64 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c64:	4a06      	ldr	r2, [pc, #24]	; (8007c80 <prvResetNextTaskUnblockTime+0x1c>)
 8007c66:	6813      	ldr	r3, [r2, #0]
 8007c68:	6819      	ldr	r1, [r3, #0]
 8007c6a:	4b06      	ldr	r3, [pc, #24]	; (8007c84 <prvResetNextTaskUnblockTime+0x20>)
 8007c6c:	b919      	cbnz	r1, 8007c76 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c6e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c72:	601a      	str	r2, [r3, #0]
}
 8007c74:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c76:	6812      	ldr	r2, [r2, #0]
 8007c78:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c7a:	68d2      	ldr	r2, [r2, #12]
 8007c7c:	6852      	ldr	r2, [r2, #4]
 8007c7e:	e7f8      	b.n	8007c72 <prvResetNextTaskUnblockTime+0xe>
 8007c80:	20023010 	.word	0x20023010
 8007c84:	20023488 	.word	0x20023488

08007c88 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007c88:	4a02      	ldr	r2, [pc, #8]	; (8007c94 <vTaskSuspendAll+0xc>)
 8007c8a:	6813      	ldr	r3, [r2, #0]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	6013      	str	r3, [r2, #0]
}
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	20023480 	.word	0x20023480

08007c98 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c98:	4b40      	ldr	r3, [pc, #256]	; (8007d9c <xTaskIncrementTick+0x104>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
{
 8007c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d174      	bne.n	8007d8e <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ca4:	4b3e      	ldr	r3, [pc, #248]	; (8007da0 <xTaskIncrementTick+0x108>)
 8007ca6:	681d      	ldr	r5, [r3, #0]
 8007ca8:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007caa:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cac:	b9cd      	cbnz	r5, 8007ce2 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8007cae:	4b3d      	ldr	r3, [pc, #244]	; (8007da4 <xTaskIncrementTick+0x10c>)
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	6812      	ldr	r2, [r2, #0]
 8007cb4:	b152      	cbz	r2, 8007ccc <xTaskIncrementTick+0x34>
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	b672      	cpsid	i
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	b662      	cpsie	i
 8007cca:	e7fe      	b.n	8007cca <xTaskIncrementTick+0x32>
 8007ccc:	4a36      	ldr	r2, [pc, #216]	; (8007da8 <xTaskIncrementTick+0x110>)
 8007cce:	6819      	ldr	r1, [r3, #0]
 8007cd0:	6810      	ldr	r0, [r2, #0]
 8007cd2:	6018      	str	r0, [r3, #0]
 8007cd4:	6011      	str	r1, [r2, #0]
 8007cd6:	4a35      	ldr	r2, [pc, #212]	; (8007dac <xTaskIncrementTick+0x114>)
 8007cd8:	6813      	ldr	r3, [r2, #0]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	f7ff ffc1 	bl	8007c64 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ce2:	4e33      	ldr	r6, [pc, #204]	; (8007db0 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8007ce4:	2400      	movs	r4, #0
 8007ce6:	4f33      	ldr	r7, [pc, #204]	; (8007db4 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ce8:	6833      	ldr	r3, [r6, #0]
 8007cea:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8007dc0 <xTaskIncrementTick+0x128>
 8007cee:	42ab      	cmp	r3, r5
 8007cf0:	d911      	bls.n	8007d16 <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cf2:	f8d8 3000 	ldr.w	r3, [r8]
 8007cf6:	2214      	movs	r2, #20
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	4353      	muls	r3, r2
 8007cfc:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	bf28      	it	cs
 8007d02:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8007d04:	4b2c      	ldr	r3, [pc, #176]	; (8007db8 <xTaskIncrementTick+0x120>)
 8007d06:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8007d08:	2b00      	cmp	r3, #0
}
 8007d0a:	bf0c      	ite	eq
 8007d0c:	4620      	moveq	r0, r4
 8007d0e:	2001      	movne	r0, #1
 8007d10:	b003      	add	sp, #12
 8007d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d16:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007da4 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8007d1a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8007dc4 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d1e:	f8d9 3000 	ldr.w	r3, [r9]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	b91b      	cbnz	r3, 8007d2e <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d26:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2a:	6033      	str	r3, [r6, #0]
					break;
 8007d2c:	e7e1      	b.n	8007cf2 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d2e:	f8d9 3000 	ldr.w	r3, [r9]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d38:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8007d3c:	4295      	cmp	r5, r2
 8007d3e:	d201      	bcs.n	8007d44 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8007d40:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d42:	e7d6      	b.n	8007cf2 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d44:	f10b 0104 	add.w	r1, fp, #4
 8007d48:	4608      	mov	r0, r1
 8007d4a:	9101      	str	r1, [sp, #4]
 8007d4c:	f7ff fa60 	bl	8007210 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d50:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8007d54:	9901      	ldr	r1, [sp, #4]
 8007d56:	b122      	cbz	r2, 8007d62 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d58:	f10b 0018 	add.w	r0, fp, #24
 8007d5c:	f7ff fa58 	bl	8007210 <uxListRemove>
 8007d60:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8007d62:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8007d66:	f8da 2000 	ldr.w	r2, [sl]
 8007d6a:	4290      	cmp	r0, r2
 8007d6c:	d901      	bls.n	8007d72 <xTaskIncrementTick+0xda>
 8007d6e:	f8ca 0000 	str.w	r0, [sl]
 8007d72:	2314      	movs	r3, #20
 8007d74:	fb03 7000 	mla	r0, r3, r0, r7
 8007d78:	f7ff fa27 	bl	80071ca <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d7c:	f8d8 1000 	ldr.w	r1, [r8]
 8007d80:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8007d84:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8007d86:	429a      	cmp	r2, r3
 8007d88:	bf28      	it	cs
 8007d8a:	2401      	movcs	r4, #1
 8007d8c:	e7c7      	b.n	8007d1e <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8007d8e:	4a0b      	ldr	r2, [pc, #44]	; (8007dbc <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8007d90:	2400      	movs	r4, #0
		++uxPendedTicks;
 8007d92:	6813      	ldr	r3, [r2, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	6013      	str	r3, [r2, #0]
 8007d98:	e7b4      	b.n	8007d04 <xTaskIncrementTick+0x6c>
 8007d9a:	bf00      	nop
 8007d9c:	20023480 	.word	0x20023480
 8007da0:	200234bc 	.word	0x200234bc
 8007da4:	20023010 	.word	0x20023010
 8007da8:	20023014 	.word	0x20023014
 8007dac:	2002348c 	.word	0x2002348c
 8007db0:	20023488 	.word	0x20023488
 8007db4:	20023018 	.word	0x20023018
 8007db8:	200234c0 	.word	0x200234c0
 8007dbc:	2002347c 	.word	0x2002347c
 8007dc0:	2002300c 	.word	0x2002300c
 8007dc4:	20023484 	.word	0x20023484

08007dc8 <xTaskResumeAll>:
{
 8007dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8007dca:	4c32      	ldr	r4, [pc, #200]	; (8007e94 <xTaskResumeAll+0xcc>)
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	b953      	cbnz	r3, 8007de6 <xTaskResumeAll+0x1e>
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	b672      	cpsid	i
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	b662      	cpsie	i
 8007de4:	e7fe      	b.n	8007de4 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8007de6:	f7ff fa35 	bl	8007254 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007df0:	6824      	ldr	r4, [r4, #0]
 8007df2:	b12c      	cbz	r4, 8007e00 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8007df4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007df6:	f7ff fa51 	bl	800729c <vPortExitCritical>
}
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	b003      	add	sp, #12
 8007dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e00:	4b25      	ldr	r3, [pc, #148]	; (8007e98 <xTaskResumeAll+0xd0>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0f5      	beq.n	8007df4 <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e08:	4d24      	ldr	r5, [pc, #144]	; (8007e9c <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8007e0a:	4e25      	ldr	r6, [pc, #148]	; (8007ea0 <xTaskResumeAll+0xd8>)
 8007e0c:	4f25      	ldr	r7, [pc, #148]	; (8007ea4 <xTaskResumeAll+0xdc>)
 8007e0e:	e01e      	b.n	8007e4e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e10:	68eb      	ldr	r3, [r5, #12]
 8007e12:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e14:	f104 0018 	add.w	r0, r4, #24
 8007e18:	f7ff f9fa 	bl	8007210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e1c:	1d21      	adds	r1, r4, #4
 8007e1e:	4608      	mov	r0, r1
 8007e20:	9101      	str	r1, [sp, #4]
 8007e22:	f7ff f9f5 	bl	8007210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e28:	6832      	ldr	r2, [r6, #0]
 8007e2a:	9901      	ldr	r1, [sp, #4]
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d900      	bls.n	8007e32 <xTaskResumeAll+0x6a>
 8007e30:	6033      	str	r3, [r6, #0]
 8007e32:	2014      	movs	r0, #20
 8007e34:	fb00 7003 	mla	r0, r0, r3, r7
 8007e38:	f7ff f9c7 	bl	80071ca <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ea8 <xTaskResumeAll+0xe0>)
 8007e3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d302      	bcc.n	8007e4e <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 8007e48:	4b18      	ldr	r3, [pc, #96]	; (8007eac <xTaskResumeAll+0xe4>)
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e4e:	682b      	ldr	r3, [r5, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1dd      	bne.n	8007e10 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8007e54:	b10c      	cbz	r4, 8007e5a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8007e56:	f7ff ff05 	bl	8007c64 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e5a:	4d15      	ldr	r5, [pc, #84]	; (8007eb0 <xTaskResumeAll+0xe8>)
 8007e5c:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e5e:	b144      	cbz	r4, 8007e72 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 8007e60:	4e12      	ldr	r6, [pc, #72]	; (8007eac <xTaskResumeAll+0xe4>)
 8007e62:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007e64:	f7ff ff18 	bl	8007c98 <xTaskIncrementTick>
 8007e68:	b100      	cbz	r0, 8007e6c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8007e6a:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e6c:	3c01      	subs	r4, #1
 8007e6e:	d1f9      	bne.n	8007e64 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 8007e70:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007e72:	4b0e      	ldr	r3, [pc, #56]	; (8007eac <xTaskResumeAll+0xe4>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0bc      	beq.n	8007df4 <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 8007e7a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e82:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007e8e:	2401      	movs	r4, #1
 8007e90:	e7b1      	b.n	8007df6 <xTaskResumeAll+0x2e>
 8007e92:	bf00      	nop
 8007e94:	20023480 	.word	0x20023480
 8007e98:	20023478 	.word	0x20023478
 8007e9c:	20023490 	.word	0x20023490
 8007ea0:	20023484 	.word	0x20023484
 8007ea4:	20023018 	.word	0x20023018
 8007ea8:	2002300c 	.word	0x2002300c
 8007eac:	200234c0 	.word	0x200234c0
 8007eb0:	2002347c 	.word	0x2002347c

08007eb4 <xTaskCallApplicationTaskHook>:
	{
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	4608      	mov	r0, r1
		if( xTask == NULL )
 8007eb8:	b90b      	cbnz	r3, 8007ebe <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8007eba:	4b03      	ldr	r3, [pc, #12]	; (8007ec8 <xTaskCallApplicationTaskHook+0x14>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8007ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec0:	b103      	cbz	r3, 8007ec4 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8007ec2:	4718      	bx	r3
	}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	4770      	bx	lr
 8007ec8:	2002300c 	.word	0x2002300c

08007ecc <vTaskSwitchContext>:
{
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ece:	4b1e      	ldr	r3, [pc, #120]	; (8007f48 <vTaskSwitchContext+0x7c>)
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	4b1e      	ldr	r3, [pc, #120]	; (8007f4c <vTaskSwitchContext+0x80>)
 8007ed4:	b112      	cbz	r2, 8007edc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
}
 8007eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8007edc:	4c1c      	ldr	r4, [pc, #112]	; (8007f50 <vTaskSwitchContext+0x84>)
 8007ede:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee0:	4e1c      	ldr	r6, [pc, #112]	; (8007f54 <vTaskSwitchContext+0x88>)
 8007ee2:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 8007ee4:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8007ee6:	6820      	ldr	r0, [r4, #0]
 8007ee8:	f7ff ffe4 	bl	8007eb4 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eec:	6832      	ldr	r2, [r6, #0]
 8007eee:	491a      	ldr	r1, [pc, #104]	; (8007f58 <vTaskSwitchContext+0x8c>)
 8007ef0:	fb07 f302 	mul.w	r3, r7, r2
 8007ef4:	58cd      	ldr	r5, [r1, r3]
 8007ef6:	18c8      	adds	r0, r1, r3
 8007ef8:	b1c5      	cbz	r5, 8007f2c <vTaskSwitchContext+0x60>
 8007efa:	6845      	ldr	r5, [r0, #4]
 8007efc:	3308      	adds	r3, #8
 8007efe:	686d      	ldr	r5, [r5, #4]
 8007f00:	440b      	add	r3, r1
 8007f02:	429d      	cmp	r5, r3
 8007f04:	6045      	str	r5, [r0, #4]
 8007f06:	bf04      	itt	eq
 8007f08:	686b      	ldreq	r3, [r5, #4]
 8007f0a:	6043      	streq	r3, [r0, #4]
 8007f0c:	2314      	movs	r3, #20
 8007f0e:	fb03 1102 	mla	r1, r3, r2, r1
 8007f12:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8007f14:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 8007f1c:	6820      	ldr	r0, [r4, #0]
 8007f1e:	f7ff ffc9 	bl	8007eb4 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	4a0d      	ldr	r2, [pc, #52]	; (8007f5c <vTaskSwitchContext+0x90>)
 8007f26:	3358      	adds	r3, #88	; 0x58
 8007f28:	6013      	str	r3, [r2, #0]
}
 8007f2a:	e7d6      	b.n	8007eda <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2c:	b952      	cbnz	r2, 8007f44 <vTaskSwitchContext+0x78>
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	b672      	cpsid	i
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	b662      	cpsie	i
 8007f42:	e7fe      	b.n	8007f42 <vTaskSwitchContext+0x76>
 8007f44:	3a01      	subs	r2, #1
 8007f46:	e7d3      	b.n	8007ef0 <vTaskSwitchContext+0x24>
 8007f48:	20023480 	.word	0x20023480
 8007f4c:	200234c0 	.word	0x200234c0
 8007f50:	2002300c 	.word	0x2002300c
 8007f54:	20023484 	.word	0x20023484
 8007f58:	20023018 	.word	0x20023018
 8007f5c:	20000f64 	.word	0x20000f64

08007f60 <vTaskPlaceOnEventList>:
{
 8007f60:	b510      	push	{r4, lr}
 8007f62:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8007f64:	b950      	cbnz	r0, 8007f7c <vTaskPlaceOnEventList+0x1c>
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	b672      	cpsid	i
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	b662      	cpsie	i
 8007f7a:	e7fe      	b.n	8007f7a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <vTaskPlaceOnEventList+0x34>)
 8007f7e:	6819      	ldr	r1, [r3, #0]
 8007f80:	3118      	adds	r1, #24
 8007f82:	f7ff f92e 	bl	80071e2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f86:	4620      	mov	r0, r4
 8007f88:	2101      	movs	r1, #1
}
 8007f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f8e:	f7ff be31 	b.w	8007bf4 <prvAddCurrentTaskToDelayedList>
 8007f92:	bf00      	nop
 8007f94:	2002300c 	.word	0x2002300c

08007f98 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f98:	68c3      	ldr	r3, [r0, #12]
{
 8007f9a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f9c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007f9e:	b954      	cbnz	r4, 8007fb6 <xTaskRemoveFromEventList+0x1e>
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	b672      	cpsid	i
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	b662      	cpsie	i
 8007fb4:	e7fe      	b.n	8007fb4 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fb6:	f104 0118 	add.w	r1, r4, #24
 8007fba:	4608      	mov	r0, r1
 8007fbc:	9101      	str	r1, [sp, #4]
 8007fbe:	f7ff f927 	bl	8007210 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fc2:	4b12      	ldr	r3, [pc, #72]	; (800800c <xTaskRemoveFromEventList+0x74>)
 8007fc4:	9901      	ldr	r1, [sp, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	b9e3      	cbnz	r3, 8008004 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fca:	1d21      	adds	r1, r4, #4
 8007fcc:	4608      	mov	r0, r1
 8007fce:	9101      	str	r1, [sp, #4]
 8007fd0:	f7ff f91e 	bl	8007210 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007fd4:	4a0e      	ldr	r2, [pc, #56]	; (8008010 <xTaskRemoveFromEventList+0x78>)
 8007fd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007fd8:	6810      	ldr	r0, [r2, #0]
 8007fda:	9901      	ldr	r1, [sp, #4]
 8007fdc:	4283      	cmp	r3, r0
 8007fde:	d900      	bls.n	8007fe2 <xTaskRemoveFromEventList+0x4a>
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	4a0c      	ldr	r2, [pc, #48]	; (8008014 <xTaskRemoveFromEventList+0x7c>)
 8007fe4:	2014      	movs	r0, #20
 8007fe6:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fea:	f7ff f8ee 	bl	80071ca <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fee:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <xTaskRemoveFromEventList+0x80>)
 8007ff0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d906      	bls.n	8008008 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 8007ffa:	2001      	movs	r0, #1
 8007ffc:	4b07      	ldr	r3, [pc, #28]	; (800801c <xTaskRemoveFromEventList+0x84>)
 8007ffe:	6018      	str	r0, [r3, #0]
}
 8008000:	b002      	add	sp, #8
 8008002:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008004:	4806      	ldr	r0, [pc, #24]	; (8008020 <xTaskRemoveFromEventList+0x88>)
 8008006:	e7f0      	b.n	8007fea <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 8008008:	2000      	movs	r0, #0
	return xReturn;
 800800a:	e7f9      	b.n	8008000 <xTaskRemoveFromEventList+0x68>
 800800c:	20023480 	.word	0x20023480
 8008010:	20023484 	.word	0x20023484
 8008014:	20023018 	.word	0x20023018
 8008018:	2002300c 	.word	0x2002300c
 800801c:	200234c0 	.word	0x200234c0
 8008020:	20023490 	.word	0x20023490

08008024 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008024:	4b03      	ldr	r3, [pc, #12]	; (8008034 <vTaskInternalSetTimeOutState+0x10>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800802a:	4b03      	ldr	r3, [pc, #12]	; (8008038 <vTaskInternalSetTimeOutState+0x14>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6043      	str	r3, [r0, #4]
}
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	2002348c 	.word	0x2002348c
 8008038:	200234bc 	.word	0x200234bc

0800803c <xTaskCheckForTimeOut>:
{
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008040:	4605      	mov	r5, r0
 8008042:	b950      	cbnz	r0, 800805a <xTaskCheckForTimeOut+0x1e>
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	b672      	cpsid	i
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	b662      	cpsie	i
 8008058:	e7fe      	b.n	8008058 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800805a:	b951      	cbnz	r1, 8008072 <xTaskCheckForTimeOut+0x36>
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	b672      	cpsid	i
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	b662      	cpsie	i
 8008070:	e7fe      	b.n	8008070 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8008072:	f7ff f8ef 	bl	8007254 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008076:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <xTaskCheckForTimeOut+0x78>)
 8008078:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	1c5a      	adds	r2, r3, #1
 800807e:	d010      	beq.n	80080a2 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008080:	480d      	ldr	r0, [pc, #52]	; (80080b8 <xTaskCheckForTimeOut+0x7c>)
 8008082:	682e      	ldr	r6, [r5, #0]
 8008084:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008086:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008088:	4286      	cmp	r6, r0
 800808a:	d001      	beq.n	8008090 <xTaskCheckForTimeOut+0x54>
 800808c:	428a      	cmp	r2, r1
 800808e:	d90f      	bls.n	80080b0 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008090:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008092:	4283      	cmp	r3, r0
 8008094:	d90a      	bls.n	80080ac <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8008096:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008098:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800809a:	4413      	add	r3, r2
 800809c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800809e:	f7ff ffc1 	bl	8008024 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80080a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80080a4:	f7ff f8fa 	bl	800729c <vPortExitCritical>
}
 80080a8:	4620      	mov	r0, r4
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80080b0:	2401      	movs	r4, #1
 80080b2:	e7f7      	b.n	80080a4 <xTaskCheckForTimeOut+0x68>
 80080b4:	200234bc 	.word	0x200234bc
 80080b8:	2002348c 	.word	0x2002348c

080080bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80080bc:	4b01      	ldr	r3, [pc, #4]	; (80080c4 <vTaskMissedYield+0x8>)
 80080be:	2201      	movs	r2, #1
 80080c0:	601a      	str	r2, [r3, #0]
}
 80080c2:	4770      	bx	lr
 80080c4:	200234c0 	.word	0x200234c0

080080c8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80080c8:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <xTaskGetSchedulerState+0x18>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	b133      	cbz	r3, 80080dc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <xTaskGetSchedulerState+0x1c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	bf0c      	ite	eq
 80080d6:	2002      	moveq	r0, #2
 80080d8:	2000      	movne	r0, #0
 80080da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080dc:	2001      	movs	r0, #1
	}
 80080de:	4770      	bx	lr
 80080e0:	200234a4 	.word	0x200234a4
 80080e4:	20023480 	.word	0x20023480

080080e8 <xTaskPriorityInherit>:
	{
 80080e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80080ea:	4604      	mov	r4, r0
 80080ec:	b340      	cbz	r0, 8008140 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80080ee:	4d1b      	ldr	r5, [pc, #108]	; (800815c <xTaskPriorityInherit+0x74>)
 80080f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80080f2:	682a      	ldr	r2, [r5, #0]
 80080f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d228      	bcs.n	800814c <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080fa:	6982      	ldr	r2, [r0, #24]
 80080fc:	2a00      	cmp	r2, #0
 80080fe:	db04      	blt.n	800810a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008100:	682a      	ldr	r2, [r5, #0]
 8008102:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008104:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008108:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800810a:	2214      	movs	r2, #20
 800810c:	4e14      	ldr	r6, [pc, #80]	; (8008160 <xTaskPriorityInherit+0x78>)
 800810e:	fb02 6303 	mla	r3, r2, r3, r6
 8008112:	6962      	ldr	r2, [r4, #20]
 8008114:	429a      	cmp	r2, r3
 8008116:	d115      	bne.n	8008144 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008118:	1d21      	adds	r1, r4, #4
 800811a:	4608      	mov	r0, r1
 800811c:	9101      	str	r1, [sp, #4]
 800811e:	f7ff f877 	bl	8007210 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008122:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008124:	4a0f      	ldr	r2, [pc, #60]	; (8008164 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008128:	6810      	ldr	r0, [r2, #0]
 800812a:	9901      	ldr	r1, [sp, #4]
 800812c:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800812e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008130:	d900      	bls.n	8008134 <xTaskPriorityInherit+0x4c>
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	2014      	movs	r0, #20
 8008136:	fb00 6003 	mla	r0, r0, r3, r6
 800813a:	f7ff f846 	bl	80071ca <vListInsertEnd>
				xReturn = pdTRUE;
 800813e:	2001      	movs	r0, #1
	}
 8008140:	b002      	add	sp, #8
 8008142:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	62e3      	str	r3, [r4, #44]	; 0x2c
 800814a:	e7f8      	b.n	800813e <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800814c:	682b      	ldr	r3, [r5, #0]
 800814e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008150:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008152:	42a0      	cmp	r0, r4
 8008154:	bf2c      	ite	cs
 8008156:	2000      	movcs	r0, #0
 8008158:	2001      	movcc	r0, #1
 800815a:	e7f1      	b.n	8008140 <xTaskPriorityInherit+0x58>
 800815c:	2002300c 	.word	0x2002300c
 8008160:	20023018 	.word	0x20023018
 8008164:	20023484 	.word	0x20023484

08008168 <xTaskPriorityDisinherit>:
	{
 8008168:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800816a:	b910      	cbnz	r0, 8008172 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800816c:	2000      	movs	r0, #0
	}
 800816e:	b002      	add	sp, #8
 8008170:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008172:	4b1e      	ldr	r3, [pc, #120]	; (80081ec <xTaskPriorityDisinherit+0x84>)
 8008174:	681c      	ldr	r4, [r3, #0]
 8008176:	4284      	cmp	r4, r0
 8008178:	d00a      	beq.n	8008190 <xTaskPriorityDisinherit+0x28>
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	b672      	cpsid	i
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	b662      	cpsie	i
 800818e:	e7fe      	b.n	800818e <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8008190:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008192:	b953      	cbnz	r3, 80081aa <xTaskPriorityDisinherit+0x42>
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	b672      	cpsid	i
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	b662      	cpsie	i
 80081a8:	e7fe      	b.n	80081a8 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80081ac:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081ae:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80081b0:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081b2:	4291      	cmp	r1, r2
 80081b4:	d0da      	beq.n	800816c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1d8      	bne.n	800816c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081ba:	1d21      	adds	r1, r4, #4
 80081bc:	4608      	mov	r0, r1
 80081be:	9101      	str	r1, [sp, #4]
 80081c0:	f7ff f826 	bl	8007210 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 80081c6:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081cc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ce:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80081d0:	4a07      	ldr	r2, [pc, #28]	; (80081f0 <xTaskPriorityDisinherit+0x88>)
 80081d2:	6810      	ldr	r0, [r2, #0]
 80081d4:	4283      	cmp	r3, r0
 80081d6:	d900      	bls.n	80081da <xTaskPriorityDisinherit+0x72>
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	4a06      	ldr	r2, [pc, #24]	; (80081f4 <xTaskPriorityDisinherit+0x8c>)
 80081dc:	2014      	movs	r0, #20
 80081de:	fb00 2003 	mla	r0, r0, r3, r2
 80081e2:	f7fe fff2 	bl	80071ca <vListInsertEnd>
					xReturn = pdTRUE;
 80081e6:	2001      	movs	r0, #1
		return xReturn;
 80081e8:	e7c1      	b.n	800816e <xTaskPriorityDisinherit+0x6>
 80081ea:	bf00      	nop
 80081ec:	2002300c 	.word	0x2002300c
 80081f0:	20023484 	.word	0x20023484
 80081f4:	20023018 	.word	0x20023018

080081f8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80081f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80081fa:	4604      	mov	r4, r0
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d048      	beq.n	8008292 <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 8008200:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008202:	b952      	cbnz	r2, 800821a <vTaskPriorityDisinheritAfterTimeout+0x22>
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	b672      	cpsid	i
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	b662      	cpsie	i
 8008218:	e7fe      	b.n	8008218 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800821a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800821c:	4299      	cmp	r1, r3
 800821e:	bf38      	it	cc
 8008220:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008222:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008224:	428b      	cmp	r3, r1
 8008226:	d034      	beq.n	8008292 <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008228:	2a01      	cmp	r2, #1
 800822a:	d132      	bne.n	8008292 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 800822c:	4a1a      	ldr	r2, [pc, #104]	; (8008298 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	4282      	cmp	r2, r0
 8008232:	d10a      	bne.n	800824a <vTaskPriorityDisinheritAfterTimeout+0x52>
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	b672      	cpsid	i
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	b662      	cpsie	i
 8008248:	e7fe      	b.n	8008248 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800824a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800824c:	4d13      	ldr	r5, [pc, #76]	; (800829c <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800824e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008250:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8008254:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008256:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800825a:	bfa8      	it	ge
 800825c:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008260:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008262:	bfa8      	it	ge
 8008264:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008266:	429a      	cmp	r2, r3
 8008268:	d113      	bne.n	8008292 <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800826a:	1d01      	adds	r1, r0, #4
 800826c:	4608      	mov	r0, r1
 800826e:	9101      	str	r1, [sp, #4]
 8008270:	f7fe ffce 	bl	8007210 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008274:	4a0a      	ldr	r2, [pc, #40]	; (80082a0 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8008276:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008278:	6810      	ldr	r0, [r2, #0]
 800827a:	9901      	ldr	r1, [sp, #4]
 800827c:	4283      	cmp	r3, r0
 800827e:	d900      	bls.n	8008282 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8008280:	6013      	str	r3, [r2, #0]
 8008282:	2014      	movs	r0, #20
 8008284:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8008288:	b003      	add	sp, #12
 800828a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800828e:	f7fe bf9c 	b.w	80071ca <vListInsertEnd>
	}
 8008292:	b003      	add	sp, #12
 8008294:	bd30      	pop	{r4, r5, pc}
 8008296:	bf00      	nop
 8008298:	2002300c 	.word	0x2002300c
 800829c:	20023018 	.word	0x20023018
 80082a0:	20023484 	.word	0x20023484

080082a4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80082a4:	4b04      	ldr	r3, [pc, #16]	; (80082b8 <pvTaskIncrementMutexHeldCount+0x14>)
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	b11a      	cbz	r2, 80082b2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80082aa:	6819      	ldr	r1, [r3, #0]
 80082ac:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80082ae:	3201      	adds	r2, #1
 80082b0:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 80082b2:	6818      	ldr	r0, [r3, #0]
	}
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	2002300c 	.word	0x2002300c

080082bc <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 80082bc:	6843      	ldr	r3, [r0, #4]
{
 80082be:	b510      	push	{r4, lr}
 80082c0:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 80082c2:	b14b      	cbz	r3, 80082d8 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2101      	movs	r1, #1
 80082c8:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 80082ca:	6923      	ldr	r3, [r4, #16]
 80082cc:	b12b      	cbz	r3, 80082da <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 80082ce:	23c8      	movs	r3, #200	; 0xc8
 80082d0:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 80082d8:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 80082da:	2364      	movs	r3, #100	; 0x64
 80082dc:	6163      	str	r3, [r4, #20]
 80082de:	e7fb      	b.n	80082d8 <jpeg_abort+0x1c>

080082e0 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 80082e0:	6843      	ldr	r3, [r0, #4]
{
 80082e2:	b510      	push	{r4, lr}
 80082e4:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 80082e6:	b10b      	cbz	r3, 80082ec <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 80082ec:	2300      	movs	r3, #0
 80082ee:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 80082f0:	6163      	str	r3, [r4, #20]
}
 80082f2:	bd10      	pop	{r4, pc}

080082f4 <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 80082f4:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 80082f6:	6843      	ldr	r3, [r0, #4]
 80082f8:	2284      	movs	r2, #132	; 0x84
 80082fa:	2100      	movs	r1, #0
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8008300:	2200      	movs	r2, #0
 8008302:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 8008306:	bd08      	pop	{r3, pc}

08008308 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8008308:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 800830a:	6843      	ldr	r3, [r0, #4]
 800830c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008310:	2100      	movs	r1, #0
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8008316:	2200      	movs	r2, #0
 8008318:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 800831c:	bd08      	pop	{r3, pc}

0800831e <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800831e:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 8008320:	2950      	cmp	r1, #80	; 0x50
{
 8008322:	b570      	push	{r4, r5, r6, lr}
 8008324:	4604      	mov	r4, r0
 8008326:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8008328:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 800832a:	d007      	beq.n	800833c <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 800832c:	6803      	ldr	r3, [r0, #0]
 800832e:	260d      	movs	r6, #13
 8008330:	2250      	movs	r2, #80	; 0x50
 8008332:	61d9      	str	r1, [r3, #28]
 8008334:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 800833c:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 8008340:	d009      	beq.n	8008356 <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	2116      	movs	r1, #22
 8008346:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800834a:	4620      	mov	r0, r4
 800834c:	61dd      	str	r5, [r3, #28]
 800834e:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 8008356:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800835a:	2100      	movs	r1, #0
 800835c:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 800835e:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 8008360:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 8008362:	f011 f9a9 	bl	80196b8 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 8008366:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 8008368:	4620      	mov	r0, r4
    cinfo->err = err;
 800836a:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 800836c:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 800836e:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 8008370:	f00b fec8 	bl	8014104 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 8008374:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 8008376:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 8008378:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 800837a:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800837c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8008380:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8008384:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8008388:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800838c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8008390:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8008394:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8008398:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 800839c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 80083a0:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 80083a4:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 80083a8:	f005 f8d6 	bl	800d558 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 80083ac:	4620      	mov	r0, r4
 80083ae:	f003 fdd9 	bl	800bf64 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 80083b2:	23c8      	movs	r3, #200	; 0xc8
 80083b4:	6163      	str	r3, [r4, #20]
}
 80083b6:	bd70      	pop	{r4, r5, r6, pc}

080083b8 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 80083b8:	f7ff bf92 	b.w	80082e0 <jpeg_destroy>

080083bc <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 80083bc:	6942      	ldr	r2, [r0, #20]
 80083be:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 80083c2:	b570      	push	{r4, r5, r6, lr}
 80083c4:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 80083c6:	2b0a      	cmp	r3, #10
 80083c8:	f200 80a5 	bhi.w	8008516 <jpeg_consume_input+0x15a>
 80083cc:	e8df f003 	tbb	[pc, r3]
 80083d0:	9dab1006 	.word	0x9dab1006
 80083d4:	9d9d9d9d 	.word	0x9d9d9d9d
 80083d8:	a39d      	.short	0xa39d
 80083da:	9d          	.byte	0x9d
 80083db:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 80083dc:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 80083e4:	69a3      	ldr	r3, [r4, #24]
 80083e6:	4620      	mov	r0, r4
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 80083ec:	23c9      	movs	r3, #201	; 0xc9
 80083ee:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80083f0:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80083f4:	4620      	mov	r0, r4
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 80083fa:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80083fc:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 80083fe:	d146      	bne.n	800848e <jpeg_consume_input+0xd2>
  switch (cinfo->num_components) {
 8008400:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008402:	2d03      	cmp	r5, #3
 8008404:	d007      	beq.n	8008416 <jpeg_consume_input+0x5a>
 8008406:	2d04      	cmp	r5, #4
 8008408:	d064      	beq.n	80084d4 <jpeg_consume_input+0x118>
 800840a:	2d01      	cmp	r5, #1
 800840c:	d17b      	bne.n	8008506 <jpeg_consume_input+0x14a>
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 800840e:	f240 1301 	movw	r3, #257	; 0x101
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8008412:	8523      	strh	r3, [r4, #40]	; 0x28
    break;
 8008414:	e01c      	b.n	8008450 <jpeg_consume_input+0x94>
    if (cinfo->saw_JFIF_marker) {
 8008416:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800841a:	b10b      	cbz	r3, 8008420 <jpeg_consume_input+0x64>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800841c:	2303      	movs	r3, #3
 800841e:	e056      	b.n	80084ce <jpeg_consume_input+0x112>
    } else if (cinfo->saw_Adobe_marker) {
 8008420:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8008424:	2b00      	cmp	r3, #0
 8008426:	d034      	beq.n	8008492 <jpeg_consume_input+0xd6>
      switch (cinfo->Adobe_transform) {
 8008428:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 800842c:	2a00      	cmp	r2, #0
 800842e:	d04d      	beq.n	80084cc <jpeg_consume_input+0x110>
 8008430:	2a01      	cmp	r2, #1
 8008432:	d008      	beq.n	8008446 <jpeg_consume_input+0x8a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	2174      	movs	r1, #116	; 0x74
 8008438:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 800843a:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f04f 31ff 	mov.w	r1, #4294967295
 8008444:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8008446:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_RGB;
 800844a:	2302      	movs	r3, #2
    cinfo->out_color_space = JCS_CMYK;
 800844c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 8008450:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->output_gamma = 1.0;
 8008454:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 8008456:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 8008458:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 800845c:	4b33      	ldr	r3, [pc, #204]	; (800852c <jpeg_consume_input+0x170>)
  cinfo->dither_mode = JDITHER_FS;
 800845e:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 8008462:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 8008466:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 8008468:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 800846a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 800846e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 8008472:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 8008474:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 8008476:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 800847a:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 800847c:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 8008480:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 8008484:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 8008488:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 800848a:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 800848c:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 800848e:	4630      	mov	r0, r6
 8008490:	bd70      	pop	{r4, r5, r6, pc}
      int cid0 = cinfo->comp_info[0].component_id;
 8008492:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8008496:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 8008498:	6d99      	ldr	r1, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800849a:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 800849c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 80084a0:	d10e      	bne.n	80084c0 <jpeg_consume_input+0x104>
 80084a2:	2902      	cmp	r1, #2
 80084a4:	d101      	bne.n	80084aa <jpeg_consume_input+0xee>
 80084a6:	2a03      	cmp	r2, #3
 80084a8:	d0b8      	beq.n	800841c <jpeg_consume_input+0x60>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	621a      	str	r2, [r3, #32]
 80084ae:	2271      	movs	r2, #113	; 0x71
 80084b0:	e9c3 0106 	strd	r0, r1, [r3, #24]
 80084b4:	615a      	str	r2, [r3, #20]
 80084b6:	2101      	movs	r1, #1
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	4620      	mov	r0, r4
 80084bc:	4798      	blx	r3
 80084be:	e7ad      	b.n	800841c <jpeg_consume_input+0x60>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 80084c0:	2852      	cmp	r0, #82	; 0x52
 80084c2:	d1f2      	bne.n	80084aa <jpeg_consume_input+0xee>
 80084c4:	2947      	cmp	r1, #71	; 0x47
 80084c6:	d1f0      	bne.n	80084aa <jpeg_consume_input+0xee>
 80084c8:	2a42      	cmp	r2, #66	; 0x42
 80084ca:	d1ee      	bne.n	80084aa <jpeg_consume_input+0xee>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 80084cc:	2302      	movs	r3, #2
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 80084ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80084d2:	e7ba      	b.n	800844a <jpeg_consume_input+0x8e>
    if (cinfo->saw_Adobe_marker) {
 80084d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80084d8:	b193      	cbz	r3, 8008500 <jpeg_consume_input+0x144>
      switch (cinfo->Adobe_transform) {
 80084da:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 80084de:	b17a      	cbz	r2, 8008500 <jpeg_consume_input+0x144>
 80084e0:	2a02      	cmp	r2, #2
 80084e2:	d008      	beq.n	80084f6 <jpeg_consume_input+0x13a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	2174      	movs	r1, #116	; 0x74
 80084e8:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 80084ea:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f04f 31ff 	mov.w	r1, #4294967295
 80084f4:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 80084f6:	2305      	movs	r3, #5
 80084f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_CMYK;
 80084fc:	2304      	movs	r3, #4
 80084fe:	e7a5      	b.n	800844c <jpeg_consume_input+0x90>
      cinfo->jpeg_color_space = JCS_CMYK;
 8008500:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 8008504:	e7fa      	b.n	80084fc <jpeg_consume_input+0x140>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8008506:	2300      	movs	r3, #0
 8008508:	e783      	b.n	8008412 <jpeg_consume_input+0x56>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800850a:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 800850e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8008516:	6803      	ldr	r3, [r0, #0]
 8008518:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 800851a:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800851c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4798      	blx	r3
 8008524:	e7b3      	b.n	800848e <jpeg_consume_input+0xd2>
  switch (cinfo->global_state) {
 8008526:	2601      	movs	r6, #1
  return retcode;
 8008528:	e7b1      	b.n	800848e <jpeg_consume_input+0xd2>
 800852a:	bf00      	nop
 800852c:	3ff00000 	.word	0x3ff00000

08008530 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 8008530:	6942      	ldr	r2, [r0, #20]
 8008532:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 8008536:	2b01      	cmp	r3, #1
{
 8008538:	b570      	push	{r4, r5, r6, lr}
 800853a:	4604      	mov	r4, r0
 800853c:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 800853e:	d905      	bls.n	800854c <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8008540:	6803      	ldr	r3, [r0, #0]
 8008542:	2115      	movs	r1, #21
 8008544:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 800854c:	4620      	mov	r0, r4
 800854e:	f7ff ff35 	bl	80083bc <jpeg_consume_input>
  switch (retcode) {
 8008552:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 8008554:	4605      	mov	r5, r0
  switch (retcode) {
 8008556:	d00b      	beq.n	8008570 <jpeg_read_header+0x40>
 8008558:	2802      	cmp	r0, #2
 800855a:	d109      	bne.n	8008570 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 800855c:	b12e      	cbz	r6, 800856a <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	2235      	movs	r2, #53	; 0x35
 8008562:	4620      	mov	r0, r4
 8008564:	615a      	str	r2, [r3, #20]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 800856a:	4620      	mov	r0, r4
 800856c:	f7ff fea6 	bl	80082bc <jpeg_abort>
}
 8008570:	4628      	mov	r0, r5
 8008572:	bd70      	pop	{r4, r5, r6, pc}

08008574 <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8008574:	6943      	ldr	r3, [r0, #20]
 8008576:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 800857a:	2a01      	cmp	r2, #1
{
 800857c:	b510      	push	{r4, lr}
 800857e:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8008580:	d81f      	bhi.n	80085c2 <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 8008582:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008584:	bb0a      	cbnz	r2, 80085ca <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 8008586:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800858a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800858c:	429a      	cmp	r2, r3
 800858e:	d204      	bcs.n	800859a <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 8008590:	6803      	ldr	r3, [r0, #0]
 8008592:	2245      	movs	r2, #69	; 0x45
 8008594:	615a      	str	r2, [r3, #20]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 800859a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800859e:	4620      	mov	r0, r4
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 80085a4:	23d2      	movs	r3, #210	; 0xd2
 80085a6:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 80085a8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80085ac:	695a      	ldr	r2, [r3, #20]
 80085ae:	b1a2      	cbz	r2, 80085da <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 80085b0:	69a3      	ldr	r3, [r4, #24]
 80085b2:	4620      	mov	r0, r4
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 80085b8:	4620      	mov	r0, r4
 80085ba:	f7ff fe7f 	bl	80082bc <jpeg_abort>
  return TRUE;
 80085be:	2001      	movs	r0, #1
 80085c0:	e010      	b.n	80085e4 <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 80085c2:	2bcf      	cmp	r3, #207	; 0xcf
 80085c4:	d0ee      	beq.n	80085a4 <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 80085c6:	2bd2      	cmp	r3, #210	; 0xd2
 80085c8:	d0ee      	beq.n	80085a8 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80085ca:	6822      	ldr	r2, [r4, #0]
 80085cc:	2115      	movs	r1, #21
 80085ce:	4620      	mov	r0, r4
 80085d0:	e9c2 1305 	strd	r1, r3, [r2, #20]
 80085d4:	6813      	ldr	r3, [r2, #0]
 80085d6:	4798      	blx	r3
 80085d8:	e7e6      	b.n	80085a8 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4620      	mov	r0, r4
 80085de:	4798      	blx	r3
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1e1      	bne.n	80085a8 <jpeg_finish_decompress+0x34>
}
 80085e4:	bd10      	pop	{r4, pc}

080085e6 <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 80085e6:	6943      	ldr	r3, [r0, #20]
 80085e8:	2bcc      	cmp	r3, #204	; 0xcc
{
 80085ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ee:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 80085f0:	d008      	beq.n	8008604 <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 80085f2:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4798      	blx	r3
    cinfo->output_scanline = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 8008600:	23cc      	movs	r3, #204	; 0xcc
 8008602:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8008604:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8008608:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 800860a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	b9f3      	cbnz	r3, 8008650 <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8008612:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 8008614:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8008616:	2b00      	cmp	r3, #0
 8008618:	bf14      	ite	ne
 800861a:	23ce      	movne	r3, #206	; 0xce
 800861c:	23cd      	moveq	r3, #205	; 0xcd
 800861e:	6163      	str	r3, [r4, #20]
}
 8008620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 8008624:	68a3      	ldr	r3, [r4, #8]
 8008626:	b123      	cbz	r3, 8008632 <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8008628:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 800862a:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8008632:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8008636:	462a      	mov	r2, r5
 8008638:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 800863a:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800863e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8008642:	2300      	movs	r3, #0
 8008644:	4619      	mov	r1, r3
 8008646:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 8008648:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800864c:	42bb      	cmp	r3, r7
 800864e:	d011      	beq.n	8008674 <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 8008650:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8008654:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8008656:	4291      	cmp	r1, r2
 8008658:	d3e4      	bcc.n	8008624 <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 800865a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800865e:	4620      	mov	r0, r4
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8008664:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8008668:	4620      	mov	r0, r4
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800866e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8008672:	e7ca      	b.n	800860a <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 8008674:	2000      	movs	r0, #0
 8008676:	e7d3      	b.n	8008620 <output_pass_setup+0x3a>

08008678 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 8008678:	6943      	ldr	r3, [r0, #20]
 800867a:	2bca      	cmp	r3, #202	; 0xca
{
 800867c:	b510      	push	{r4, lr}
 800867e:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 8008680:	d109      	bne.n	8008696 <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 8008682:	f005 f913 	bl	800d8ac <jinit_master_decompress>
    if (cinfo->buffered_image) {
 8008686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008688:	b11b      	cbz	r3, 8008692 <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 800868a:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 800868c:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 800868e:	6163      	str	r3, [r4, #20]
}
 8008690:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 8008692:	23cb      	movs	r3, #203	; 0xcb
 8008694:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 8008696:	6962      	ldr	r2, [r4, #20]
 8008698:	2acb      	cmp	r2, #203	; 0xcb
 800869a:	d12c      	bne.n	80086f6 <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 800869c:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	b1fb      	cbz	r3, 80086e4 <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 80086a4:	68a3      	ldr	r3, [r4, #8]
 80086a6:	b113      	cbz	r3, 80086ae <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4620      	mov	r0, r4
 80086ac:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80086ae:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80086b2:	4620      	mov	r0, r4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d0e9      	beq.n	8008690 <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 80086bc:	2802      	cmp	r0, #2
 80086be:	d011      	beq.n	80086e4 <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 80086c0:	68a3      	ldr	r3, [r4, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0ee      	beq.n	80086a4 <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 80086c6:	f020 0002 	bic.w	r0, r0, #2
 80086ca:	2801      	cmp	r0, #1
 80086cc:	d1ea      	bne.n	80086a4 <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	6899      	ldr	r1, [r3, #8]
 80086d2:	3201      	adds	r2, #1
 80086d4:	428a      	cmp	r2, r1
 80086d6:	605a      	str	r2, [r3, #4]
 80086d8:	dbe4      	blt.n	80086a4 <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 80086da:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 80086de:	440a      	add	r2, r1
 80086e0:	609a      	str	r2, [r3, #8]
 80086e2:	e7df      	b.n	80086a4 <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 80086e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80086e8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 80086ec:	4620      	mov	r0, r4
}
 80086ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 80086f2:	f7ff bf78 	b.w	80085e6 <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 80086f6:	2acc      	cmp	r2, #204	; 0xcc
 80086f8:	d0f8      	beq.n	80086ec <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	2115      	movs	r1, #21
 80086fe:	4620      	mov	r0, r4
 8008700:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4798      	blx	r3
 8008708:	e7f0      	b.n	80086ec <jpeg_start_decompress+0x74>

0800870a <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 800870a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800870c:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 800870e:	6942      	ldr	r2, [r0, #20]
{
 8008710:	4604      	mov	r4, r0
 8008712:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 8008714:	2acd      	cmp	r2, #205	; 0xcd
 8008716:	d005      	beq.n	8008724 <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8008718:	6803      	ldr	r3, [r0, #0]
 800871a:	2115      	movs	r1, #21
 800871c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 8008724:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008728:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800872a:	429a      	cmp	r2, r3
 800872c:	d30a      	bcc.n	8008744 <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	227e      	movs	r2, #126	; 0x7e
 8008732:	4620      	mov	r0, r4
 8008734:	f04f 31ff 	mov.w	r1, #4294967295
 8008738:	615a      	str	r2, [r3, #20]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	4798      	blx	r3
    return 0;
 800873e:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 8008740:	b003      	add	sp, #12
 8008742:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 8008744:	68a0      	ldr	r0, [r4, #8]
 8008746:	b120      	cbz	r0, 8008752 <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8008748:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800874c:	6803      	ldr	r3, [r0, #0]
 800874e:	4620      	mov	r0, r4
 8008750:	4798      	blx	r3
  row_ctr = 0;
 8008752:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8008754:	4620      	mov	r0, r4
 8008756:	aa01      	add	r2, sp, #4
 8008758:	4629      	mov	r1, r5
  row_ctr = 0;
 800875a:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800875c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8008760:	685f      	ldr	r7, [r3, #4]
 8008762:	4633      	mov	r3, r6
 8008764:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 8008766:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800876a:	9801      	ldr	r0, [sp, #4]
 800876c:	4403      	add	r3, r0
 800876e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 8008772:	e7e5      	b.n	8008740 <jpeg_read_scanlines+0x36>

08008774 <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 8008774:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 8008776:	6984      	ldr	r4, [r0, #24]
{
 8008778:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 800877a:	6863      	ldr	r3, [r4, #4]
 800877c:	b943      	cbnz	r3, 8008790 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 800877e:	68e3      	ldr	r3, [r4, #12]
 8008780:	4798      	blx	r3
 8008782:	b928      	cbnz	r0, 8008790 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	2219      	movs	r2, #25
 8008788:	4628      	mov	r0, r5
 800878a:	615a      	str	r2, [r3, #20]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4798      	blx	r3
  src->bytes_in_buffer--;
 8008790:	6863      	ldr	r3, [r4, #4]
 8008792:	3b01      	subs	r3, #1
 8008794:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	6022      	str	r2, [r4, #0]
}
 800879c:	7818      	ldrb	r0, [r3, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}

080087a0 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 80087a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a4:	4680      	mov	r8, r0
 80087a6:	460e      	mov	r6, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 80087a8:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 80087ac:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 80087b0:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
  while (e->a < 0x8000L) {
 80087b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80087b8:	db20      	blt.n	80087fc <arith_decode+0x5c>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 80087ba:	7830      	ldrb	r0, [r6, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 80087bc:	4b2e      	ldr	r3, [pc, #184]	; (8008878 <arith_decode+0xd8>)
 80087be:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 80087c2:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 80087c6:	68a5      	ldr	r5, [r4, #8]
  temp = e->a - qe;
 80087c8:	eba2 4227 	sub.w	r2, r2, r7, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 80087cc:	ea4f 2e27 	mov.w	lr, r7, asr #8
  temp <<= e->ct;
 80087d0:	fa02 f101 	lsl.w	r1, r2, r1
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 80087d4:	ea4f 4c27 	mov.w	ip, r7, asr #16
  e->a = temp;
 80087d8:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 80087da:	428d      	cmp	r5, r1
 80087dc:	db3c      	blt.n	8008858 <arith_decode+0xb8>
    e->c -= temp;
 80087de:	1a69      	subs	r1, r5, r1
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 80087e0:	4594      	cmp	ip, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 80087e2:	f020 057f 	bic.w	r5, r0, #127	; 0x7f
      e->a = qe;
 80087e6:	f8c4 c00c 	str.w	ip, [r4, #12]
    e->c -= temp;
 80087ea:	60a1      	str	r1, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 80087ec:	b26d      	sxtb	r5, r5
    if (e->a < qe) {
 80087ee:	dd2e      	ble.n	800884e <arith_decode+0xae>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 80087f0:	ea85 050e 	eor.w	r5, r5, lr
 80087f4:	7035      	strb	r5, [r6, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 80087f6:	09c0      	lsrs	r0, r0, #7
 80087f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (--e->ct < 0) {
 80087fc:	3901      	subs	r1, #1
 80087fe:	2900      	cmp	r1, #0
 8008800:	6121      	str	r1, [r4, #16]
 8008802:	da1a      	bge.n	800883a <arith_decode+0x9a>
      if (cinfo->unread_marker)
 8008804:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 8008808:	b96b      	cbnz	r3, 8008826 <arith_decode+0x86>
	data = get_byte(cinfo);	/* read next input byte */
 800880a:	4640      	mov	r0, r8
 800880c:	f7ff ffb2 	bl	8008774 <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 8008810:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 8008812:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 8008814:	d108      	bne.n	8008828 <arith_decode+0x88>
	  do data = get_byte(cinfo);
 8008816:	4640      	mov	r0, r8
 8008818:	f7ff ffac 	bl	8008774 <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 800881c:	28ff      	cmp	r0, #255	; 0xff
 800881e:	d0fa      	beq.n	8008816 <arith_decode+0x76>
	  if (data == 0)
 8008820:	b110      	cbz	r0, 8008828 <arith_decode+0x88>
	    cinfo->unread_marker = data;
 8008822:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 8008826:	2500      	movs	r5, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 8008828:	68a0      	ldr	r0, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800882a:	6923      	ldr	r3, [r4, #16]
      e->c = (e->c << 8) | data; /* insert data into C register */
 800882c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8008830:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 8008834:	60a5      	str	r5, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8008836:	d404      	bmi.n	8008842 <arith_decode+0xa2>
 8008838:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 800883a:	68e3      	ldr	r3, [r4, #12]
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	60e3      	str	r3, [r4, #12]
 8008840:	e7b6      	b.n	80087b0 <arith_decode+0x10>
	if (++e->ct == 0)
 8008842:	3309      	adds	r3, #9
 8008844:	6123      	str	r3, [r4, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1f7      	bne.n	800883a <arith_decode+0x9a>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800884a:	60e7      	str	r7, [r4, #12]
 800884c:	e7f5      	b.n	800883a <arith_decode+0x9a>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800884e:	407d      	eors	r5, r7
 8008850:	7035      	strb	r5, [r6, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 8008852:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 8008856:	e7ce      	b.n	80087f6 <arith_decode+0x56>
  } else if (e->a < 0x8000L) {
 8008858:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800885c:	dacb      	bge.n	80087f6 <arith_decode+0x56>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800885e:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 8008862:	4594      	cmp	ip, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8008864:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 8008866:	dd02      	ble.n	800886e <arith_decode+0xce>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8008868:	407b      	eors	r3, r7
 800886a:	7033      	strb	r3, [r6, #0]
 800886c:	e7f1      	b.n	8008852 <arith_decode+0xb2>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800886e:	ea83 030e 	eor.w	r3, r3, lr
 8008872:	7033      	strb	r3, [r6, #0]
 8008874:	e7bf      	b.n	80087f6 <arith_decode+0x56>
 8008876:	bf00      	nop
 8008878:	080f9884 	.word	0x080f9884

0800887c <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800887c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 8008880:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8008884:	f500 71aa 	add.w	r1, r0, #340	; 0x154
{
 8008888:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800888a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800888e:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 8008892:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 808a 	beq.w	80089ae <start_pass+0x132>
    if (cinfo->Ss == 0) {
 800889a:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 800889e:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 80088a2:	b95a      	cbnz	r2, 80088bc <start_pass+0x40>
      if (cinfo->Se != 0)
 80088a4:	b1a1      	cbz	r1, 80088d0 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	2611      	movs	r6, #17
 80088aa:	e9c3 1707 	strd	r1, r7, [r3, #28]
 80088ae:	e9c3 6205 	strd	r6, r2, [r3, #20]
 80088b2:	6258      	str	r0, [r3, #36]	; 0x24
 80088b4:	4620      	mov	r0, r4
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4798      	blx	r3
 80088ba:	e00f      	b.n	80088dc <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 80088bc:	428a      	cmp	r2, r1
 80088be:	dcf2      	bgt.n	80088a6 <start_pass+0x2a>
 80088c0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80088c4:	428b      	cmp	r3, r1
 80088c6:	dbee      	blt.n	80088a6 <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 80088c8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d1ea      	bne.n	80088a6 <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 80088d0:	b117      	cbz	r7, 80088d8 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 80088d2:	1e7b      	subs	r3, r7, #1
 80088d4:	4283      	cmp	r3, r0
 80088d6:	d1e6      	bne.n	80088a6 <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 80088d8:	280d      	cmp	r0, #13
 80088da:	dce4      	bgt.n	80088a6 <start_pass+0x2a>
 80088dc:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 80088e0:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 80088e4:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80088e8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 80088ec:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80088f0:	454b      	cmp	r3, r9
 80088f2:	dc1d      	bgt.n	8008930 <start_pass+0xb4>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 80088f4:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d153      	bne.n	80089a4 <start_pass+0x128>
      if (cinfo->Ss == 0)
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	d14f      	bne.n	80089a0 <start_pass+0x124>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 8008900:	4b63      	ldr	r3, [pc, #396]	; (8008a90 <start_pass+0x214>)
{
 8008902:	f04f 0800 	mov.w	r8, #0
 8008906:	f105 0914 	add.w	r9, r5, #20
 800890a:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800890c:	46c2      	mov	sl, r8
    entropy->pub.decode_mcu = decode_mcu;
 800890e:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008910:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8008914:	4543      	cmp	r3, r8
 8008916:	dc63      	bgt.n	80089e0 <start_pass+0x164>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 8008918:	2300      	movs	r3, #0
  entropy->a = 0;
 800891a:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800891e:	f06f 030f 	mvn.w	r3, #15
 8008922:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 8008924:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8008928:	636b      	str	r3, [r5, #52]	; 0x34
}
 800892a:	b003      	add	sp, #12
 800892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8008930:	f85a 3b04 	ldr.w	r3, [sl], #4
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8008934:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8008938:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800893a:	0230      	lsls	r0, r6, #8
 800893c:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8008940:	b162      	cbz	r2, 800895c <start_pass+0xe0>
 8008942:	580a      	ldr	r2, [r1, r0]
 8008944:	2a00      	cmp	r2, #0
 8008946:	da09      	bge.n	800895c <start_pass+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8008948:	6822      	ldr	r2, [r4, #0]
 800894a:	2300      	movs	r3, #0
 800894c:	f04f 31ff 	mov.w	r1, #4294967295
 8008950:	4620      	mov	r0, r4
 8008952:	61d3      	str	r3, [r2, #28]
 8008954:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8008958:	6852      	ldr	r2, [r2, #4]
 800895a:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800895c:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 8008960:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 8008964:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 8008968:	42ba      	cmp	r2, r7
 800896a:	da02      	bge.n	8008972 <start_pass+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800896c:	f109 0901 	add.w	r9, r9, #1
 8008970:	e7ba      	b.n	80088e8 <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8008972:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 8008976:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800897a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 800897e:	4291      	cmp	r1, r2
 8008980:	d008      	beq.n	8008994 <start_pass+0x118>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 8008982:	6822      	ldr	r2, [r4, #0]
 8008984:	f04f 31ff 	mov.w	r1, #4294967295
 8008988:	4620      	mov	r0, r4
 800898a:	61d7      	str	r7, [r2, #28]
 800898c:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8008990:	6852      	ldr	r2, [r2, #4]
 8008992:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 8008994:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8008998:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800899a:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800899e:	e7e1      	b.n	8008964 <start_pass+0xe8>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 80089a0:	4b3c      	ldr	r3, [pc, #240]	; (8008a94 <start_pass+0x218>)
 80089a2:	e7ae      	b.n	8008902 <start_pass+0x86>
      if (cinfo->Ss == 0)
 80089a4:	b90a      	cbnz	r2, 80089aa <start_pass+0x12e>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 80089a6:	4b3c      	ldr	r3, [pc, #240]	; (8008a98 <start_pass+0x21c>)
 80089a8:	e7ab      	b.n	8008902 <start_pass+0x86>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 80089aa:	4b3c      	ldr	r3, [pc, #240]	; (8008a9c <start_pass+0x220>)
 80089ac:	e7a9      	b.n	8008902 <start_pass+0x86>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 80089ae:	b96a      	cbnz	r2, 80089cc <start_pass+0x150>
 80089b0:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 80089b4:	b953      	cbnz	r3, 80089cc <start_pass+0x150>
 80089b6:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 80089ba:	b93b      	cbnz	r3, 80089cc <start_pass+0x150>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 80089bc:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 80089c0:	2b3f      	cmp	r3, #63	; 0x3f
 80089c2:	dc0b      	bgt.n	80089dc <start_pass+0x160>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 80089c4:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d007      	beq.n	80089dc <start_pass+0x160>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	227d      	movs	r2, #125	; 0x7d
 80089d0:	f04f 31ff 	mov.w	r1, #4294967295
 80089d4:	4620      	mov	r0, r4
 80089d6:	615a      	str	r2, [r3, #20]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 80089dc:	4b30      	ldr	r3, [pc, #192]	; (8008aa0 <start_pass+0x224>)
 80089de:	e790      	b.n	8008902 <start_pass+0x86>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 80089e0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 80089e4:	f856 bb04 	ldr.w	fp, [r6], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 80089e8:	b133      	cbz	r3, 80089f8 <start_pass+0x17c>
 80089ea:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 80089ee:	bb43      	cbnz	r3, 8008a42 <start_pass+0x1c6>
 80089f0:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d13a      	bne.n	8008a6e <start_pass+0x1f2>
      tbl = compptr->dc_tbl_no;
 80089f8:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 80089fc:	2f0f      	cmp	r7, #15
 80089fe:	d906      	bls.n	8008a0e <start_pass+0x192>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	2232      	movs	r2, #50	; 0x32
 8008a04:	4620      	mov	r0, r4
 8008a06:	e9c3 2705 	strd	r2, r7, [r3, #20]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 8008a0e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8008a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a14:	b933      	cbnz	r3, 8008a24 <start_pass+0x1a8>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8008a16:	6863      	ldr	r3, [r4, #4]
 8008a18:	2240      	movs	r2, #64	; 0x40
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4798      	blx	r3
 8008a22:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 8008a24:	2240      	movs	r2, #64	; 0x40
 8008a26:	2100      	movs	r1, #0
 8008a28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a2a:	f010 fe45 	bl	80196b8 <memset>
      entropy->last_dc_val[ci] = 0;
 8008a2e:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 8008a32:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8008a36:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008a3a:	b9eb      	cbnz	r3, 8008a78 <start_pass+0x1fc>
 8008a3c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8008a40:	b1ab      	cbz	r3, 8008a6e <start_pass+0x1f2>
      tbl = compptr->ac_tbl_no;
 8008a42:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8008a46:	2f0f      	cmp	r7, #15
 8008a48:	d819      	bhi.n	8008a7e <start_pass+0x202>
      if (entropy->ac_stats[tbl] == NULL)
 8008a4a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8008a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a50:	b93b      	cbnz	r3, 8008a62 <start_pass+0x1e6>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8008a52:	6863      	ldr	r3, [r4, #4]
 8008a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a58:	2101      	movs	r1, #1
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4798      	blx	r3
 8008a60:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8008a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a66:	2100      	movs	r1, #0
 8008a68:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8008a6a:	f010 fe25 	bl	80196b8 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008a6e:	f108 0801 	add.w	r8, r8, #1
 8008a72:	f109 0904 	add.w	r9, r9, #4
 8008a76:	e74b      	b.n	8008910 <start_pass+0x94>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8008a78:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8008a7c:	e7e0      	b.n	8008a40 <start_pass+0x1c4>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	2232      	movs	r2, #50	; 0x32
 8008a82:	4620      	mov	r0, r4
 8008a84:	e9c3 2705 	strd	r2, r7, [r3, #20]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4798      	blx	r3
 8008a8c:	e7dd      	b.n	8008a4a <start_pass+0x1ce>
 8008a8e:	bf00      	nop
 8008a90:	08009047 	.word	0x08009047
 8008a94:	08008f13 	.word	0x08008f13
 8008a98:	08008ec1 	.word	0x08008ec1
 8008a9c:	08008d9b 	.word	0x08008d9b
 8008aa0:	08008b47 	.word	0x08008b47

08008aa4 <process_restart>:
{
 8008aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8008aa8:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 8008aac:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	4798      	blx	r3
 8008ab2:	b928      	cbnz	r0, 8008ac0 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	2219      	movs	r2, #25
 8008ab8:	4620      	mov	r0, r4
 8008aba:	615a      	str	r2, [r3, #20]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4798      	blx	r3
{
 8008ac0:	2600      	movs	r6, #0
 8008ac2:	f105 0714 	add.w	r7, r5, #20
 8008ac6:	f504 78aa 	add.w	r8, r4, #340	; 0x154
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8008aca:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008acc:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8008ad0:	42b3      	cmp	r3, r6
 8008ad2:	dc0a      	bgt.n	8008aea <process_restart+0x46>
  entropy->c = 0;
 8008ad4:	2300      	movs	r3, #0
  entropy->a = 0;
 8008ad6:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 8008ada:	f06f 030f 	mvn.w	r3, #15
 8008ade:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 8008ae0:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8008ae4:	636b      	str	r3, [r5, #52]	; 0x34
}
 8008ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8008aea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 8008aee:	f858 ab04 	ldr.w	sl, [r8], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8008af2:	b12b      	cbz	r3, 8008b00 <process_restart+0x5c>
 8008af4:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8008af8:	b9ab      	cbnz	r3, 8008b26 <process_restart+0x82>
 8008afa:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8008afe:	b9e3      	cbnz	r3, 8008b3a <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 8008b00:	f8da 3014 	ldr.w	r3, [sl, #20]
 8008b04:	2240      	movs	r2, #64	; 0x40
 8008b06:	2100      	movs	r1, #0
 8008b08:	330e      	adds	r3, #14
 8008b0a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8008b0e:	f010 fdd3 	bl	80196b8 <memset>
      entropy->last_dc_val[ci] = 0;
 8008b12:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 8008b16:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8008b1a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008b1e:	b97b      	cbnz	r3, 8008b40 <process_restart+0x9c>
 8008b20:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8008b24:	b14b      	cbz	r3, 8008b3a <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8008b26:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b2e:	2100      	movs	r1, #0
 8008b30:	331e      	adds	r3, #30
 8008b32:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8008b36:	f010 fdbf 	bl	80196b8 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	3704      	adds	r7, #4
 8008b3e:	e7c5      	b.n	8008acc <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8008b40:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8008b44:	e7ee      	b.n	8008b24 <process_restart+0x80>

08008b46 <decode_mcu>:
{
 8008b46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 8008b4a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8008b4e:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8008b50:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 8008b54:	ed2d 8b02 	vpush	{d8}
 8008b58:	b087      	sub	sp, #28
 8008b5a:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 8008b5c:	b133      	cbz	r3, 8008b6c <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 8008b5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008b60:	b90b      	cbnz	r3, 8008b66 <decode_mcu+0x20>
      process_restart(cinfo);
 8008b62:	f7ff ff9f 	bl	8008aa4 <process_restart>
    entropy->restarts_to_go--;
 8008b66:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8008b6c:	692b      	ldr	r3, [r5, #16]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	f000 809f 	beq.w	8008cb2 <decode_mcu+0x16c>
  natural_order = cinfo->natural_order;
 8008b74:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008b78:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 8008b7a:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008b7c:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8008b80:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8008b82:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 8008b86:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008b8a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8008b8e:	42bb      	cmp	r3, r7
 8008b90:	f340 808f 	ble.w	8008cb2 <decode_mcu+0x16c>
    block = MCU_data[blkn];
 8008b94:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 8008b96:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 8008b98:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 8008b9a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8008b9e:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 8008ba0:	f852 3b04 	ldr.w	r3, [r2], #4
 8008ba4:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 8008ba6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008baa:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8008bae:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8008bb2:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 8008bb6:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 8008bb8:	6952      	ldr	r2, [r2, #20]
 8008bba:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 8008bbe:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8008bc0:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 8008bc4:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	f7ff fdea 	bl	80087a0 <arith_decode>
 8008bcc:	bb68      	cbnz	r0, 8008c2a <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 8008bce:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 8008bd2:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008bd6:	9a00      	ldr	r2, [sp, #0]
 8008bd8:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 8008bda:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f000 80c4 	beq.w	8008d6c <decode_mcu+0x226>
    tbl = compptr->ac_tbl_no;
 8008be4:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 8008be6:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 8008be8:	699b      	ldr	r3, [r3, #24]
    k = 0;
 8008bea:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8008bee:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 8008bf2:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8008bf6:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8008bfa:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 8008bfc:	eb03 0901 	add.w	r9, r3, r1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8008c00:	4649      	mov	r1, r9
 8008c02:	f7ff fdcd 	bl	80087a0 <arith_decode>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f040 80b0 	bne.w	8008d6c <decode_mcu+0x226>
	if (arith_decode(cinfo, st + 1)) break;
 8008c0c:	f109 0101 	add.w	r1, r9, #1
 8008c10:	4620      	mov	r0, r4
	k++;
 8008c12:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 8008c14:	f7ff fdc4 	bl	80087a0 <arith_decode>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d16e      	bne.n	8008cfa <decode_mcu+0x1b4>
	if (k >= cinfo->lim_Se) {
 8008c1c:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 8008c20:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 8008c24:	42b2      	cmp	r2, r6
 8008c26:	dcf1      	bgt.n	8008c0c <decode_mcu+0xc6>
 8008c28:	e038      	b.n	8008c9c <decode_mcu+0x156>
      sign = arith_decode(cinfo, st + 1);
 8008c2a:	1c71      	adds	r1, r6, #1
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f7ff fdb7 	bl	80087a0 <arith_decode>
      st += 2; st += sign;
 8008c32:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 8008c34:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 8008c36:	4620      	mov	r0, r4
      st += 2; st += sign;
 8008c38:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 8008c3c:	4651      	mov	r1, sl
 8008c3e:	f7ff fdaf 	bl	80087a0 <arith_decode>
 8008c42:	4606      	mov	r6, r0
 8008c44:	b140      	cbz	r0, 8008c58 <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 8008c46:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8008c4a:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 8008c4e:	4651      	mov	r1, sl
 8008c50:	4620      	mov	r0, r4
 8008c52:	f7ff fda5 	bl	80087a0 <arith_decode>
 8008c56:	b9e8      	cbnz	r0, 8008c94 <decode_mcu+0x14e>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8008c58:	9b02      	ldr	r3, [sp, #8]
 8008c5a:	4423      	add	r3, r4
 8008c5c:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8008c60:	4699      	mov	r9, r3
 8008c62:	2301      	movs	r3, #1
 8008c64:	fa03 f202 	lsl.w	r2, r3, r2
 8008c68:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 8008c6c:	da2a      	bge.n	8008cc4 <decode_mcu+0x17e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8008c6e:	2200      	movs	r2, #0
      st += 14;
 8008c70:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 8008c74:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8008c76:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 8008c7a:	1076      	asrs	r6, r6, #1
 8008c7c:	d130      	bne.n	8008ce0 <decode_mcu+0x19a>
      v += 1; if (sign) v = -v;
 8008c7e:	f1b8 0f00 	cmp.w	r8, #0
 8008c82:	d137      	bne.n	8008cf4 <decode_mcu+0x1ae>
 8008c84:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 8008c88:	f8db 2014 	ldr.w	r2, [fp, #20]
 8008c8c:	444a      	add	r2, r9
 8008c8e:	f8cb 2014 	str.w	r2, [fp, #20]
 8008c92:	e79e      	b.n	8008bd2 <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 8008c94:	0076      	lsls	r6, r6, #1
 8008c96:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8008c9a:	d110      	bne.n	8008cbe <decode_mcu+0x178>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	2275      	movs	r2, #117	; 0x75
 8008ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	615a      	str	r2, [r3, #20]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 8008cac:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb0:	612b      	str	r3, [r5, #16]
}
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	b007      	add	sp, #28
 8008cb6:	ecbd 8b02 	vpop	{d8}
 8008cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 8008cbe:	f10a 0a01 	add.w	sl, sl, #1
 8008cc2:	e7c4      	b.n	8008c4e <decode_mcu+0x108>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8008cc4:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 8008cc8:	2301      	movs	r3, #1
 8008cca:	fa03 f202 	lsl.w	r2, r3, r2
 8008cce:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8008cd2:	bfcc      	ite	gt
 8008cd4:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8008cd8:	f108 0201 	addle.w	r2, r8, #1
 8008cdc:	0092      	lsls	r2, r2, #2
 8008cde:	e7c7      	b.n	8008c70 <decode_mcu+0x12a>
	if (arith_decode(cinfo, st)) v |= m;
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	9102      	str	r1, [sp, #8]
 8008ce4:	f7ff fd5c 	bl	80087a0 <arith_decode>
 8008ce8:	9902      	ldr	r1, [sp, #8]
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d0c5      	beq.n	8008c7a <decode_mcu+0x134>
 8008cee:	ea49 0906 	orr.w	r9, r9, r6
 8008cf2:	e7c2      	b.n	8008c7a <decode_mcu+0x134>
      v += 1; if (sign) v = -v;
 8008cf4:	ea6f 0909 	mvn.w	r9, r9
 8008cf8:	e7c6      	b.n	8008c88 <decode_mcu+0x142>
      st += 2;
 8008cfa:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8008cfe:	ee18 1a10 	vmov	r1, s16
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7ff fd4c 	bl	80087a0 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 8008d08:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8008d0a:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7ff fd47 	bl	80087a0 <arith_decode>
 8008d12:	4680      	mov	r8, r0
 8008d14:	b1a8      	cbz	r0, 8008d42 <decode_mcu+0x1fc>
	if (arith_decode(cinfo, st)) {
 8008d16:	4649      	mov	r1, r9
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f7ff fd41 	bl	80087a0 <arith_decode>
 8008d1e:	b180      	cbz	r0, 8008d42 <decode_mcu+0x1fc>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8008d20:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 8008d24:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 8008d28:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8008d2c:	42b1      	cmp	r1, r6
 8008d2e:	bfac      	ite	ge
 8008d30:	21bd      	movge	r1, #189	; 0xbd
 8008d32:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 8008d34:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 8008d38:	4649      	mov	r1, r9
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f7ff fd30 	bl	80087a0 <arith_decode>
 8008d40:	b9b0      	cbnz	r0, 8008d70 <decode_mcu+0x22a>
      st += 14;
 8008d42:	f109 010e 	add.w	r1, r9, #14
      v = m;
 8008d46:	46c1      	mov	r9, r8
      while (m >>= 1)
 8008d48:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008d4c:	d118      	bne.n	8008d80 <decode_mcu+0x23a>
      v += 1; if (sign) v = -v;
 8008d4e:	9b01      	ldr	r3, [sp, #4]
 8008d50:	bb03      	cbnz	r3, 8008d94 <decode_mcu+0x24e>
 8008d52:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 8008d56:	9b04      	ldr	r3, [sp, #16]
 8008d58:	9900      	ldr	r1, [sp, #0]
 8008d5a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8008d5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 8008d62:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8008d66:	42b3      	cmp	r3, r6
 8008d68:	f73f af43 	bgt.w	8008bf2 <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008d6c:	3701      	adds	r7, #1
 8008d6e:	e70c      	b.n	8008b8a <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 8008d70:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8008d74:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 8008d78:	d090      	beq.n	8008c9c <decode_mcu+0x156>
	    st += 1;
 8008d7a:	f109 0901 	add.w	r9, r9, #1
 8008d7e:	e7db      	b.n	8008d38 <decode_mcu+0x1f2>
	if (arith_decode(cinfo, st)) v |= m;
 8008d80:	4620      	mov	r0, r4
 8008d82:	9102      	str	r1, [sp, #8]
 8008d84:	f7ff fd0c 	bl	80087a0 <arith_decode>
 8008d88:	9902      	ldr	r1, [sp, #8]
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d0dc      	beq.n	8008d48 <decode_mcu+0x202>
 8008d8e:	ea49 0908 	orr.w	r9, r9, r8
 8008d92:	e7d9      	b.n	8008d48 <decode_mcu+0x202>
      v += 1; if (sign) v = -v;
 8008d94:	ea6f 0209 	mvn.w	r2, r9
 8008d98:	e7dd      	b.n	8008d56 <decode_mcu+0x210>

08008d9a <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 8008d9a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8008d9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da2:	4604      	mov	r4, r0
 8008da4:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8008da6:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 8008daa:	ed2d 8b02 	vpush	{d8}
 8008dae:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 8008db0:	b133      	cbz	r3, 8008dc0 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 8008db2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008db4:	b90b      	cbnz	r3, 8008dba <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 8008db6:	f7ff fe75 	bl	8008aa4 <process_restart>
    entropy->restarts_to_go--;
 8008dba:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8008dc0:	6933      	ldr	r3, [r6, #16]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	d076      	beq.n	8008eb4 <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8008dc6:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8008dca:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8008dcc:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 8008dd0:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8008dd4:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8008dd6:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 8008dda:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8008dde:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 8008de0:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8008de4:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8008de8:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8008dea:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 8008dec:	2f00      	cmp	r7, #0
 8008dee:	dc37      	bgt.n	8008e60 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8008df0:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8008df4:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8008df8:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 8008dfa:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 8008dfe:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8008e02:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 8008e06:	42ab      	cmp	r3, r5
 8008e08:	db54      	blt.n	8008eb4 <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8008e0a:	1e6b      	subs	r3, r5, #1
 8008e0c:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 8008e0e:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8008e10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008e14:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8008e18:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 8008e1c:	dd05      	ble.n	8008e2a <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8008e1e:	4651      	mov	r1, sl
 8008e20:	4620      	mov	r0, r4
 8008e22:	f7ff fcbd 	bl	80087a0 <arith_decode>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d144      	bne.n	8008eb4 <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 8008e2a:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 8008e2e:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 8008e30:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 8008e34:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 8008e38:	b1d1      	cbz	r1, 8008e70 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 8008e3a:	f10a 0102 	add.w	r1, sl, #2
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f7ff fcae 	bl	80087a0 <arith_decode>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d0dc      	beq.n	8008e02 <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 8008e48:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 8008e4c:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 8008e50:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 8008e52:	bfb4      	ite	lt
 8008e54:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 8008e56:	9a01      	ldrge	r2, [sp, #4]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f8a8 3000 	strh.w	r3, [r8]
 8008e5e:	e7d0      	b.n	8008e02 <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 8008e60:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008e64:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1c1      	bne.n	8008df0 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 8008e6c:	3f01      	subs	r7, #1
 8008e6e:	e7bd      	b.n	8008dec <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 8008e70:	f10a 0101 	add.w	r1, sl, #1
 8008e74:	4620      	mov	r0, r4
 8008e76:	f7ff fc93 	bl	80087a0 <arith_decode>
 8008e7a:	b150      	cbz	r0, 8008e92 <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 8008e7c:	ee18 1a10 	vmov	r1, s16
 8008e80:	4620      	mov	r0, r4
 8008e82:	f7ff fc8d 	bl	80087a0 <arith_decode>
	  *thiscoef = m1;
 8008e86:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	bf18      	it	ne
 8008e8e:	4613      	movne	r3, r2
 8008e90:	e7e3      	b.n	8008e5a <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 8008e92:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 8008e96:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 8008e9a:	42aa      	cmp	r2, r5
 8008e9c:	dac5      	bge.n	8008e2a <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	2275      	movs	r2, #117	; 0x75
 8008ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	615a      	str	r2, [r3, #20]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 8008eae:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb2:	6133      	str	r3, [r6, #16]
}
 8008eb4:	2001      	movs	r0, #1
 8008eb6:	b005      	add	sp, #20
 8008eb8:	ecbd 8b02 	vpop	{d8}
 8008ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ec0 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 8008ec0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8008ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec8:	4604      	mov	r4, r0
 8008eca:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8008ecc:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8008ed0:	b133      	cbz	r3, 8008ee0 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 8008ed2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008ed4:	b90b      	cbnz	r3, 8008eda <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 8008ed6:	f7ff fde5 	bl	8008aa4 <process_restart>
    entropy->restarts_to_go--;
 8008eda:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008edc:	3b01      	subs	r3, #1
 8008ede:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8008ee0:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8008ee4:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 8008ee6:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008ee8:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8008eea:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008eec:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8008ef0:	42ab      	cmp	r3, r5
 8008ef2:	dc02      	bgt.n	8008efa <decode_mcu_DC_refine+0x3a>
}
 8008ef4:	2001      	movs	r0, #1
 8008ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 8008efa:	4631      	mov	r1, r6
 8008efc:	4620      	mov	r0, r4
 8008efe:	f7ff fc4f 	bl	80087a0 <arith_decode>
 8008f02:	b120      	cbz	r0, 8008f0e <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 8008f04:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8008f08:	8813      	ldrh	r3, [r2, #0]
 8008f0a:	433b      	orrs	r3, r7
 8008f0c:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008f0e:	3501      	adds	r5, #1
 8008f10:	e7ec      	b.n	8008eec <decode_mcu_DC_refine+0x2c>

08008f12 <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 8008f12:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8008f16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	b087      	sub	sp, #28
 8008f1e:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8008f20:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8008f24:	b133      	cbz	r3, 8008f34 <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 8008f26:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008f28:	b90b      	cbnz	r3, 8008f2e <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 8008f2a:	f7ff fdbb 	bl	8008aa4 <process_restart>
    entropy->restarts_to_go--;
 8008f2e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008f30:	3b01      	subs	r3, #1
 8008f32:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8008f34:	6933      	ldr	r3, [r6, #16]
 8008f36:	3301      	adds	r3, #1
 8008f38:	d01d      	beq.n	8008f76 <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 8008f3a:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 8008f3c:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 8008f40:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 8008f44:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8008f46:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8008f4a:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 8008f54:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8008f56:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 8008f5a:	42ab      	cmp	r3, r5
 8008f5c:	db0b      	blt.n	8008f76 <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8008f5e:	1e69      	subs	r1, r5, #1
 8008f60:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 8008f64:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8008f66:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008f6a:	eb03 0801 	add.w	r8, r3, r1
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 8008f6e:	4641      	mov	r1, r8
 8008f70:	f7ff fc16 	bl	80087a0 <arith_decode>
 8008f74:	b1b0      	cbz	r0, 8008fa4 <decode_mcu_AC_first+0x92>
}
 8008f76:	2001      	movs	r0, #1
 8008f78:	b007      	add	sp, #28
 8008f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 8008f7e:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 8008f80:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 8008f84:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 8008f88:	42aa      	cmp	r2, r5
 8008f8a:	da0b      	bge.n	8008fa4 <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8008f8c:	6823      	ldr	r3, [r4, #0]
 8008f8e:	2275      	movs	r2, #117	; 0x75
 8008f90:	f04f 31ff 	mov.w	r1, #4294967295
 8008f94:	4620      	mov	r0, r4
 8008f96:	615a      	str	r2, [r3, #20]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8008f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa0:	6133      	str	r3, [r6, #16]
	    return TRUE;
 8008fa2:	e7e8      	b.n	8008f76 <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 8008fa4:	f108 0101 	add.w	r1, r8, #1
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f7ff fbf9 	bl	80087a0 <arith_decode>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d0e5      	beq.n	8008f7e <decode_mcu_AC_first+0x6c>
    st += 2;
 8008fb2:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 8008fb6:	4659      	mov	r1, fp
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f7ff fbf1 	bl	80087a0 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 8008fbe:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 8008fc0:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7ff fbec 	bl	80087a0 <arith_decode>
 8008fc8:	4607      	mov	r7, r0
 8008fca:	b1b0      	cbz	r0, 8008ffa <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 8008fcc:	4641      	mov	r1, r8
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f7ff fbe6 	bl	80087a0 <arith_decode>
 8008fd4:	b188      	cbz	r0, 8008ffa <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8008fd6:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 8008fd8:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 8008fda:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8008fde:	18e1      	adds	r1, r4, r3
 8008fe0:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 8008fe4:	42a9      	cmp	r1, r5
 8008fe6:	bfac      	ite	ge
 8008fe8:	21bd      	movge	r1, #189	; 0xbd
 8008fea:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 8008fec:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 8008ff0:	4641      	mov	r1, r8
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f7ff fbd4 	bl	80087a0 <arith_decode>
 8008ff8:	b988      	cbnz	r0, 800901e <decode_mcu_AC_first+0x10c>
    st += 14;
 8008ffa:	f108 010e 	add.w	r1, r8, #14
    v = m;
 8008ffe:	463a      	mov	r2, r7
    while (m >>= 1)
 8009000:	107f      	asrs	r7, r7, #1
 8009002:	d113      	bne.n	800902c <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	b9e3      	cbnz	r3, 8009042 <decode_mcu_AC_first+0x130>
 8009008:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800900a:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 800900e:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8009012:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 8009014:	408a      	lsls	r2, r1
 8009016:	9902      	ldr	r1, [sp, #8]
 8009018:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800901c:	e79b      	b.n	8008f56 <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 800901e:	007f      	lsls	r7, r7, #1
 8009020:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 8009024:	d0b2      	beq.n	8008f8c <decode_mcu_AC_first+0x7a>
	  st += 1;
 8009026:	f108 0801 	add.w	r8, r8, #1
 800902a:	e7e1      	b.n	8008ff0 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 800902c:	4620      	mov	r0, r4
 800902e:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009032:	f7ff fbb5 	bl	80087a0 <arith_decode>
 8009036:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800903a:	2800      	cmp	r0, #0
 800903c:	d0e0      	beq.n	8009000 <decode_mcu_AC_first+0xee>
 800903e:	433a      	orrs	r2, r7
 8009040:	e7de      	b.n	8009000 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 8009042:	43d2      	mvns	r2, r2
 8009044:	e7e1      	b.n	800900a <decode_mcu_AC_first+0xf8>

08009046 <decode_mcu_DC_first>:
{
 8009046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800904a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800904e:	b085      	sub	sp, #20
 8009050:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009052:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 8009056:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 8009058:	b133      	cbz	r3, 8009068 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800905a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800905c:	b90b      	cbnz	r3, 8009062 <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800905e:	f7ff fd21 	bl	8008aa4 <process_restart>
    entropy->restarts_to_go--;
 8009062:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009064:	3b01      	subs	r3, #1
 8009066:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009068:	6933      	ldr	r3, [r6, #16]
 800906a:	3301      	adds	r3, #1
 800906c:	d073      	beq.n	8009156 <decode_mcu_DC_first+0x110>
 800906e:	f504 73b8 	add.w	r3, r4, #368	; 0x170
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009072:	f04f 0800 	mov.w	r8, #0
 8009076:	9301      	str	r3, [sp, #4]
 8009078:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800907c:	4543      	cmp	r3, r8
 800907e:	dd6a      	ble.n	8009156 <decode_mcu_DC_first+0x110>
    block = MCU_data[blkn];
 8009080:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 8009082:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 8009084:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 8009086:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800908a:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800908c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009090:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 8009092:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009096:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 800909a:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800909e:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 80090a2:	6952      	ldr	r2, [r2, #20]
 80090a4:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 80090a8:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 80090aa:	f8d9 5038 	ldr.w	r5, [r9, #56]	; 0x38
 80090ae:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 80090b0:	4629      	mov	r1, r5
 80090b2:	f7ff fb75 	bl	80087a0 <arith_decode>
 80090b6:	b958      	cbnz	r0, 80090d0 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 80090b8:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 80090bc:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80090c0:	f108 0801 	add.w	r8, r8, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 80090c4:	f8da 3014 	ldr.w	r3, [sl, #20]
 80090c8:	4093      	lsls	r3, r2
 80090ca:	9a02      	ldr	r2, [sp, #8]
 80090cc:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80090ce:	e7d3      	b.n	8009078 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 80090d0:	1c69      	adds	r1, r5, #1
 80090d2:	4620      	mov	r0, r4
 80090d4:	f7ff fb64 	bl	80087a0 <arith_decode>
      st += 2; st += sign;
 80090d8:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 80090da:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 80090dc:	4620      	mov	r0, r4
      st += 2; st += sign;
 80090de:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 80090e2:	4659      	mov	r1, fp
 80090e4:	f7ff fb5c 	bl	80087a0 <arith_decode>
 80090e8:	4605      	mov	r5, r0
 80090ea:	b140      	cbz	r0, 80090fe <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 80090ec:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 80090f0:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 80090f4:	4659      	mov	r1, fp
 80090f6:	4620      	mov	r0, r4
 80090f8:	f7ff fb52 	bl	80087a0 <arith_decode>
 80090fc:	b9e0      	cbnz	r0, 8009138 <decode_mcu_DC_first+0xf2>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 80090fe:	9b00      	ldr	r3, [sp, #0]
 8009100:	4423      	add	r3, r4
 8009102:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8009106:	4699      	mov	r9, r3
 8009108:	2301      	movs	r3, #1
 800910a:	fa03 f202 	lsl.w	r2, r3, r2
 800910e:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 8009112:	da27      	bge.n	8009164 <decode_mcu_DC_first+0x11e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8009114:	2300      	movs	r3, #0
 8009116:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      st += 14;
 800911a:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800911e:	46a9      	mov	r9, r5
 8009120:	106d      	asrs	r5, r5, #1
 8009122:	d12d      	bne.n	8009180 <decode_mcu_DC_first+0x13a>
      v += 1; if (sign) v = -v;
 8009124:	2f00      	cmp	r7, #0
 8009126:	d135      	bne.n	8009194 <decode_mcu_DC_first+0x14e>
 8009128:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800912c:	f8da 2014 	ldr.w	r2, [sl, #20]
 8009130:	444a      	add	r2, r9
 8009132:	f8ca 2014 	str.w	r2, [sl, #20]
 8009136:	e7c1      	b.n	80090bc <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 8009138:	006d      	lsls	r5, r5, #1
 800913a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800913e:	d10e      	bne.n	800915e <decode_mcu_DC_first+0x118>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	2275      	movs	r2, #117	; 0x75
 8009144:	f04f 31ff 	mov.w	r1, #4294967295
 8009148:	4620      	mov	r0, r4
 800914a:	615a      	str	r2, [r3, #20]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8009150:	f04f 33ff 	mov.w	r3, #4294967295
 8009154:	6133      	str	r3, [r6, #16]
}
 8009156:	2001      	movs	r0, #1
 8009158:	b005      	add	sp, #20
 800915a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800915e:	f10b 0b01 	add.w	fp, fp, #1
 8009162:	e7c7      	b.n	80090f4 <decode_mcu_DC_first+0xae>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8009164:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 8009168:	2301      	movs	r3, #1
 800916a:	fa03 f202 	lsl.w	r2, r3, r2
 800916e:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8009172:	bfcc      	ite	gt
 8009174:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8009176:	1c7a      	addle	r2, r7, #1
 8009178:	0092      	lsls	r2, r2, #2
 800917a:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 800917e:	e7cc      	b.n	800911a <decode_mcu_DC_first+0xd4>
	if (arith_decode(cinfo, st)) v |= m;
 8009180:	4620      	mov	r0, r4
 8009182:	9100      	str	r1, [sp, #0]
 8009184:	f7ff fb0c 	bl	80087a0 <arith_decode>
 8009188:	9900      	ldr	r1, [sp, #0]
 800918a:	2800      	cmp	r0, #0
 800918c:	d0c8      	beq.n	8009120 <decode_mcu_DC_first+0xda>
 800918e:	ea49 0905 	orr.w	r9, r9, r5
 8009192:	e7c5      	b.n	8009120 <decode_mcu_DC_first+0xda>
      v += 1; if (sign) v = -v;
 8009194:	ea6f 0909 	mvn.w	r9, r9
 8009198:	e7c8      	b.n	800912c <decode_mcu_DC_first+0xe6>
	...

0800919c <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800919c:	6843      	ldr	r3, [r0, #4]
 800919e:	22bc      	movs	r2, #188	; 0xbc
 80091a0:	2101      	movs	r1, #1
 80091a2:	681b      	ldr	r3, [r3, #0]
{
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80091a8:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 80091aa:	4b14      	ldr	r3, [pc, #80]	; (80091fc <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80091ac:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 80091ae:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 80091b2:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 80091b4:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 80091b8:	2100      	movs	r1, #0
 80091ba:	f010 fa7d 	bl	80196b8 <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 80091be:	2371      	movs	r3, #113	; 0x71
 80091c0:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 80091c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80091c8:	b17b      	cbz	r3, 80091ea <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80091ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80091cc:	2101      	movs	r1, #1
 80091ce:	6863      	ldr	r3, [r4, #4]
 80091d0:	4620      	mov	r0, r4
 80091d2:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 80091d4:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4798      	blx	r3
 80091da:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 80091dc:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 80091e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091e2:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 80091e6:	42ab      	cmp	r3, r5
 80091e8:	dc00      	bgt.n	80091ec <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 80091ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091f0:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 80091f2:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 80091f4:	f010 fa60 	bl	80196b8 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 80091f8:	e7f2      	b.n	80091e0 <jinit_arith_decoder+0x44>
 80091fa:	bf00      	nop
 80091fc:	0800887d 	.word	0x0800887d

08009200 <init_source>:

  /* We reset the empty-input-file flag for each image,
   * but we don't clear the input buffer.
   * This is correct behavior for reading a series of images from one source.
   */
  src->start_of_file = TRUE;
 8009200:	6983      	ldr	r3, [r0, #24]
 8009202:	2201      	movs	r2, #1
 8009204:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009206:	4770      	bx	lr

08009208 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 8009208:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800920a:	1e0c      	subs	r4, r1, #0
{
 800920c:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800920e:	dd08      	ble.n	8009222 <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 8009210:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 8009212:	6869      	ldr	r1, [r5, #4]
 8009214:	42a1      	cmp	r1, r4
 8009216:	db05      	blt.n	8009224 <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 8009218:	682b      	ldr	r3, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800921a:	1b09      	subs	r1, r1, r4
    src->next_input_byte += (size_t) num_bytes;
 800921c:	4423      	add	r3, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800921e:	6069      	str	r1, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 8009220:	602b      	str	r3, [r5, #0]
  }
}
 8009222:	bd70      	pop	{r4, r5, r6, pc}
      (void) (*src->fill_input_buffer) (cinfo);
 8009224:	68eb      	ldr	r3, [r5, #12]
 8009226:	4630      	mov	r0, r6
      num_bytes -= (long) src->bytes_in_buffer;
 8009228:	1a64      	subs	r4, r4, r1
      (void) (*src->fill_input_buffer) (cinfo);
 800922a:	4798      	blx	r3
 800922c:	e7f1      	b.n	8009212 <skip_input_data+0xa>

0800922e <fill_input_buffer>:
{
 800922e:	b538      	push	{r3, r4, r5, lr}
  my_src_ptr src = (my_src_ptr) cinfo->src;
 8009230:	6984      	ldr	r4, [r0, #24]
{
 8009232:	4605      	mov	r5, r0
  nbytes = JFREAD(src->infile, src->buffer, INPUT_BUF_SIZE);
 8009234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009238:	e9d4 0107 	ldrd	r0, r1, [r4, #28]
 800923c:	f7f7 fea6 	bl	8000f8c <read_file>
  if (nbytes <= 0) {
 8009240:	b9b0      	cbnz	r0, 8009270 <fill_input_buffer+0x42>
    if (src->start_of_file)	/* Treat empty input file as fatal error */
 8009242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009244:	b12b      	cbz	r3, 8009252 <fill_input_buffer+0x24>
      ERREXIT(cinfo, JERR_INPUT_EMPTY);
 8009246:	682b      	ldr	r3, [r5, #0]
 8009248:	222b      	movs	r2, #43	; 0x2b
 800924a:	4628      	mov	r0, r5
 800924c:	615a      	str	r2, [r3, #20]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4798      	blx	r3
    WARNMS(cinfo, JWRN_JPEG_EOF);
 8009252:	682b      	ldr	r3, [r5, #0]
 8009254:	227b      	movs	r2, #123	; 0x7b
 8009256:	4628      	mov	r0, r5
 8009258:	f04f 31ff 	mov.w	r1, #4294967295
 800925c:	615a      	str	r2, [r3, #20]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	4798      	blx	r3
    src->buffer[0] = (JOCTET) 0xFF;
 8009262:	6a23      	ldr	r3, [r4, #32]
 8009264:	22ff      	movs	r2, #255	; 0xff
    nbytes = 2;
 8009266:	2002      	movs	r0, #2
    src->buffer[0] = (JOCTET) 0xFF;
 8009268:	701a      	strb	r2, [r3, #0]
    src->buffer[1] = (JOCTET) JPEG_EOI;
 800926a:	22d9      	movs	r2, #217	; 0xd9
 800926c:	6a23      	ldr	r3, [r4, #32]
 800926e:	705a      	strb	r2, [r3, #1]
  src->pub.next_input_byte = src->buffer;
 8009270:	6a23      	ldr	r3, [r4, #32]
  src->pub.bytes_in_buffer = nbytes;
 8009272:	e9c4 3000 	strd	r3, r0, [r4]
  src->start_of_file = FALSE;
 8009276:	2300      	movs	r3, #0
}
 8009278:	2001      	movs	r0, #1
  src->start_of_file = FALSE;
 800927a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800927c:	bd38      	pop	{r3, r4, r5, pc}

0800927e <term_source>:
 800927e:	4770      	bx	lr

08009280 <jpeg_stdio_src>:
 * for closing it after finishing decompression.
 */
#ifdef JFILE
GLOBAL(void)
jpeg_stdio_src (j_decompress_ptr cinfo, JFILE * infile)
{
 8009280:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009282:	460e      	mov	r6, r1
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 8009284:	6981      	ldr	r1, [r0, #24]
{
 8009286:	4604      	mov	r4, r0
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 8009288:	b971      	cbnz	r1, 80092a8 <jpeg_stdio_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800928a:	6843      	ldr	r3, [r0, #4]
 800928c:	2228      	movs	r2, #40	; 0x28
 800928e:	9101      	str	r1, [sp, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4798      	blx	r3
				  SIZEOF(my_source_mgr));
    src = (my_src_ptr) cinfo->src;
    src->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8009294:	6863      	ldr	r3, [r4, #4]
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8009296:	4605      	mov	r5, r0
    cinfo->src = (struct jpeg_source_mgr *)
 8009298:	61a0      	str	r0, [r4, #24]
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80092a0:	9901      	ldr	r1, [sp, #4]
 80092a2:	4620      	mov	r0, r4
 80092a4:	4798      	blx	r3
    src->buffer = (JOCTET *)
 80092a6:	6228      	str	r0, [r5, #32]
				  INPUT_BUF_SIZE * SIZEOF(JOCTET));
  }

  src = (my_src_ptr) cinfo->src;
 80092a8:	69a3      	ldr	r3, [r4, #24]
  src->pub.init_source = init_source;
 80092aa:	4a08      	ldr	r2, [pc, #32]	; (80092cc <jpeg_stdio_src+0x4c>)
 80092ac:	609a      	str	r2, [r3, #8]
  src->pub.fill_input_buffer = fill_input_buffer;
 80092ae:	4a08      	ldr	r2, [pc, #32]	; (80092d0 <jpeg_stdio_src+0x50>)
 80092b0:	60da      	str	r2, [r3, #12]
  src->pub.skip_input_data = skip_input_data;
 80092b2:	4a08      	ldr	r2, [pc, #32]	; (80092d4 <jpeg_stdio_src+0x54>)
 80092b4:	611a      	str	r2, [r3, #16]
  src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
 80092b6:	4a08      	ldr	r2, [pc, #32]	; (80092d8 <jpeg_stdio_src+0x58>)
 80092b8:	615a      	str	r2, [r3, #20]
  src->pub.term_source = term_source;
 80092ba:	4a08      	ldr	r2, [pc, #32]	; (80092dc <jpeg_stdio_src+0x5c>)
  src->infile = infile;
 80092bc:	e9c3 2606 	strd	r2, r6, [r3, #24]
  src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
 80092c0:	2200      	movs	r2, #0
  src->pub.next_input_byte = NULL; /* until buffer loaded */
 80092c2:	e9c3 2200 	strd	r2, r2, [r3]
}
 80092c6:	b002      	add	sp, #8
 80092c8:	bd70      	pop	{r4, r5, r6, pc}
 80092ca:	bf00      	nop
 80092cc:	08009201 	.word	0x08009201
 80092d0:	0800922f 	.word	0x0800922f
 80092d4:	08009209 	.word	0x08009209
 80092d8:	0800d4b9 	.word	0x0800d4b9
 80092dc:	0800927f 	.word	0x0800927f

080092e0 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 80092e0:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 80092e4:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 80092e8:	2a01      	cmp	r2, #1
 80092ea:	dd05      	ble.n	80092f8 <start_iMCU_row+0x18>
    coef->MCU_rows_per_iMCU_row = 1;
 80092ec:	2201      	movs	r2, #1
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 80092ee:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 80092f0:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 80092f2:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 80092f6:	4770      	bx	lr
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 80092f8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 80092fc:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 8009300:	3a01      	subs	r2, #1
 8009302:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8009306:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 8009308:	bf34      	ite	cc
 800930a:	68ca      	ldrcc	r2, [r1, #12]
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800930c:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
 800930e:	e7ee      	b.n	80092ee <start_iMCU_row+0xe>

08009310 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 8009310:	2200      	movs	r2, #0
 8009312:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 8009316:	f7ff bfe3 	b.w	80092e0 <start_iMCU_row>

0800931a <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800931a:	2000      	movs	r0, #0
 800931c:	4770      	bx	lr

0800931e <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800931e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009322:	f500 7baa 	add.w	fp, r0, #340	; 0x154
 8009326:	b08f      	sub	sp, #60	; 0x3c
 8009328:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800932a:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800932e:	465f      	mov	r7, fp
 8009330:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8009332:	f04f 0801 	mov.w	r8, #1
 8009336:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800933a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800933e:	42b3      	cmp	r3, r6
 8009340:	dc13      	bgt.n	800936a <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8009342:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 8009344:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8009348:	69eb      	ldr	r3, [r5, #28]
 800934a:	42b3      	cmp	r3, r6
 800934c:	dc22      	bgt.n	8009394 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800934e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009352:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8009356:	3301      	adds	r3, #1
 8009358:	4293      	cmp	r3, r2
 800935a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800935e:	d270      	bcs.n	8009442 <consume_data+0x124>
    start_iMCU_row(cinfo);
 8009360:	4620      	mov	r0, r4
 8009362:	f7ff ffbd 	bl	80092e0 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 8009366:	2003      	movs	r0, #3
 8009368:	e044      	b.n	80093f4 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800936a:	f857 1b04 	ldr.w	r1, [r7], #4
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800936e:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 8009370:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8009372:	6849      	ldr	r1, [r1, #4]
 8009374:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009378:	3112      	adds	r1, #18
 800937a:	f8cd 8000 	str.w	r8, [sp]
 800937e:	435a      	muls	r2, r3
 8009380:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8009384:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8009388:	4620      	mov	r0, r4
 800938a:	47d0      	blx	sl
 800938c:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009390:	3601      	adds	r6, #1
 8009392:	e7d2      	b.n	800933a <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 8009394:	00b3      	lsls	r3, r6, #2
 8009396:	696f      	ldr	r7, [r5, #20]
 8009398:	9308      	str	r3, [sp, #32]
 800939a:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800939e:	42bb      	cmp	r3, r7
 80093a0:	f04f 0300 	mov.w	r3, #0
 80093a4:	d94a      	bls.n	800943c <consume_data+0x11e>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80093a6:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 80093aa:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 80093ac:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80093ae:	9206      	str	r2, [sp, #24]
 80093b0:	e013      	b.n	80093da <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 80093b2:	f85a 2b04 	ldr.w	r2, [sl], #4
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80093b6:	f04f 0c00 	mov.w	ip, #0
 80093ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093be:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
 80093c2:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 80093c4:	fb07 f20e 	mul.w	r2, r7, lr
 80093c8:	01d2      	lsls	r2, r2, #7
 80093ca:	9204      	str	r2, [sp, #16]
 80093cc:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 80093d0:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80093d2:	9a05      	ldr	r2, [sp, #20]
 80093d4:	4562      	cmp	r2, ip
 80093d6:	dc10      	bgt.n	80093fa <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80093d8:	3301      	adds	r3, #1
 80093da:	9a06      	ldr	r2, [sp, #24]
 80093dc:	429a      	cmp	r2, r3
 80093de:	dce8      	bgt.n	80093b2 <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 80093e0:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 80093e4:	f105 0120 	add.w	r1, r5, #32
 80093e8:	4620      	mov	r0, r4
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	4798      	blx	r3
 80093ee:	bb18      	cbnz	r0, 8009438 <consume_data+0x11a>
	coef->MCU_ctr = MCU_col_num;
 80093f0:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 80093f4:	b00f      	add	sp, #60	; 0x3c
 80093f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 80093fa:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 80093fe:	9904      	ldr	r1, [sp, #16]
 8009400:	f852 2008 	ldr.w	r2, [r2, r8]
 8009404:	440a      	add	r2, r1
 8009406:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 8009408:	9a03      	ldr	r2, [sp, #12]
 800940a:	f102 0108 	add.w	r1, r2, #8
 800940e:	2200      	movs	r2, #0
 8009410:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8009414:	9807      	ldr	r0, [sp, #28]
 8009416:	4596      	cmp	lr, r2
 8009418:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 800941c:	dc08      	bgt.n	8009430 <consume_data+0x112>
 800941e:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8009420:	f10c 0c01 	add.w	ip, ip, #1
 8009424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009426:	f108 0804 	add.w	r8, r8, #4
 800942a:	4411      	add	r1, r2
 800942c:	9103      	str	r1, [sp, #12]
 800942e:	e7d0      	b.n	80093d2 <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 8009430:	3201      	adds	r2, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 8009432:	f841 0b04 	str.w	r0, [r1], #4
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 8009436:	e7ed      	b.n	8009414 <consume_data+0xf6>
	 MCU_col_num++) {
 8009438:	3701      	adds	r7, #1
 800943a:	e7ae      	b.n	800939a <consume_data+0x7c>
       yoffset++) {
 800943c:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800943e:	616b      	str	r3, [r5, #20]
       yoffset++) {
 8009440:	e782      	b.n	8009348 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 8009442:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009446:	4620      	mov	r0, r4
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800944c:	2004      	movs	r0, #4
 800944e:	e7d1      	b.n	80093f4 <consume_data+0xd6>

08009450 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	4604      	mov	r4, r0
 8009456:	b089      	sub	sp, #36	; 0x24
 8009458:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800945a:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800945e:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 8009462:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009466:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800946a:	429a      	cmp	r2, r3
 800946c:	db1d      	blt.n	80094aa <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800946e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 8009472:	d103      	bne.n	800947c <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 8009474:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009478:	429a      	cmp	r2, r3
 800947a:	d916      	bls.n	80094aa <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800947c:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800947e:	2600      	movs	r6, #0
 8009480:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8009484:	9303      	str	r3, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 8009486:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800948a:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800948c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800948e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009492:	42b3      	cmp	r3, r6
 8009494:	dc13      	bgt.n	80094be <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 8009496:	1c50      	adds	r0, r2, #1
 8009498:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800949c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 80094a0:	4290      	cmp	r0, r2
 80094a2:	bf2c      	ite	cs
 80094a4:	2004      	movcs	r0, #4
 80094a6:	2003      	movcc	r0, #3
 80094a8:	e006      	b.n	80094b8 <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 80094aa:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80094ae:	4620      	mov	r0, r4
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4798      	blx	r3
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d1d4      	bne.n	8009462 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 80094b8:	b009      	add	sp, #36	; 0x24
 80094ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 80094be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80094c0:	b913      	cbnz	r3, 80094c8 <decompress_data+0x78>
       ci++, compptr++) {
 80094c2:	3601      	adds	r6, #1
 80094c4:	3558      	adds	r5, #88	; 0x58
 80094c6:	e7e1      	b.n	800948c <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 80094c8:	6861      	ldr	r1, [r4, #4]
 80094ca:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 80094cc:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 80094ce:	9000      	str	r0, [sp, #0]
 80094d0:	4620      	mov	r0, r4
 80094d2:	6a0f      	ldr	r7, [r1, #32]
 80094d4:	435a      	muls	r2, r3
 80094d6:	9906      	ldr	r1, [sp, #24]
 80094d8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80094dc:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 80094de:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80094e2:	9a03      	ldr	r2, [sp, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 80094e4:	9004      	str	r0, [sp, #16]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	68eb      	ldr	r3, [r5, #12]
 80094ea:	d221      	bcs.n	8009530 <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 80094ec:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 80094ee:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 80094f2:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 80094f4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	461f      	mov	r7, r3
    output_ptr = output_buf[ci];
 80094fc:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 8009500:	9202      	str	r2, [sp, #8]
 8009502:	9a02      	ldr	r2, [sp, #8]
 8009504:	4552      	cmp	r2, sl
 8009506:	dadc      	bge.n	80094c2 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 8009508:	9a04      	ldr	r2, [sp, #16]
      output_col = 0;
 800950a:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800950e:	9902      	ldr	r1, [sp, #8]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 8009510:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 8009512:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009516:	9205      	str	r2, [sp, #20]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 8009518:	69e9      	ldr	r1, [r5, #28]
 800951a:	9a05      	ldr	r2, [sp, #20]
 800951c:	4541      	cmp	r1, r8
 800951e:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 8009522:	d80f      	bhi.n	8009544 <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 8009524:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009526:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800952a:	9a02      	ldr	r2, [sp, #8]
 800952c:	3201      	adds	r2, #1
 800952e:	e7e7      	b.n	8009500 <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 8009530:	6a2a      	ldr	r2, [r5, #32]
 8009532:	fbb2 f1f3 	udiv	r1, r2, r3
 8009536:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800953a:	f1ba 0f00 	cmp.w	sl, #0
 800953e:	bf08      	it	eq
 8009540:	469a      	moveq	sl, r3
 8009542:	e7d4      	b.n	80094ee <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 8009544:	f8cd 9000 	str.w	r9, [sp]
 8009548:	4629      	mov	r1, r5
 800954a:	9307      	str	r3, [sp, #28]
 800954c:	4620      	mov	r0, r4
 800954e:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 8009550:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 8009552:	f108 0801 	add.w	r8, r8, #1
 8009556:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 8009558:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800955a:	e7dd      	b.n	8009518 <decompress_data+0xc8>

0800955c <start_output_pass>:
{
 800955c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8009560:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 8009564:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 8009566:	692b      	ldr	r3, [r5, #16]
 8009568:	b323      	cbz	r3, 80095b4 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800956a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800956c:	2b00      	cmp	r3, #0
 800956e:	d04b      	beq.n	8009608 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 8009570:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d047      	beq.n	8009608 <start_output_pass+0xac>
 8009578:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d043      	beq.n	8009608 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 8009580:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009582:	b93b      	cbnz	r3, 8009594 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009584:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009586:	2118      	movs	r1, #24
 8009588:	6843      	ldr	r3, [r0, #4]
 800958a:	434a      	muls	r2, r1
 800958c:	2101      	movs	r1, #1
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 8009592:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009594:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 8009596:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800959a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800959e:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 80095a2:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80095a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80095a6:	fb0e c703 	mla	r7, lr, r3, ip
 80095aa:	4293      	cmp	r3, r2
 80095ac:	db07      	blt.n	80095be <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 80095ae:	b359      	cbz	r1, 8009608 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 80095b0:	4b16      	ldr	r3, [pc, #88]	; (800960c <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 80095b2:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 80095b4:	2300      	movs	r3, #0
 80095b6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 80095ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 80095be:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80095c0:	b312      	cbz	r2, 8009608 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 80095c2:	8816      	ldrh	r6, [r2, #0]
 80095c4:	b306      	cbz	r6, 8009608 <start_output_pass+0xac>
 80095c6:	8856      	ldrh	r6, [r2, #2]
 80095c8:	b1f6      	cbz	r6, 8009608 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 80095ca:	8a16      	ldrh	r6, [r2, #16]
 80095cc:	b1e6      	cbz	r6, 8009608 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 80095ce:	8c16      	ldrh	r6, [r2, #32]
 80095d0:	b1d6      	cbz	r6, 8009608 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 80095d2:	8a56      	ldrh	r6, [r2, #18]
 80095d4:	b1c6      	cbz	r6, 8009608 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 80095d6:	8892      	ldrh	r2, [r2, #4]
 80095d8:	b1b2      	cbz	r2, 8009608 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 80095da:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 80095de:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 80095e0:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 80095e2:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 80095e6:	2a00      	cmp	r2, #0
 80095e8:	db0e      	blt.n	8009608 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 80095ea:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 80095ec:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 80095f0:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 80095f2:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 80095f6:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 80095fa:	bf18      	it	ne
 80095fc:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 80095fe:	2a06      	cmp	r2, #6
 8009600:	d1f4      	bne.n	80095ec <start_output_pass+0x90>
       ci++, compptr++) {
 8009602:	3301      	adds	r3, #1
 8009604:	3058      	adds	r0, #88	; 0x58
 8009606:	e7cd      	b.n	80095a4 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 8009608:	4b01      	ldr	r3, [pc, #4]	; (8009610 <start_output_pass+0xb4>)
 800960a:	e7d2      	b.n	80095b2 <start_output_pass+0x56>
 800960c:	08009793 	.word	0x08009793
 8009610:	08009451 	.word	0x08009451

08009614 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 8009614:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800961c:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800961e:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 8009622:	4604      	mov	r4, r0
 8009624:	ed2d 8b02 	vpush	{d8}
 8009628:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800962a:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800962c:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 8009630:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8009632:	3b01      	subs	r3, #1
 8009634:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8009636:	69ab      	ldr	r3, [r5, #24]
 8009638:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800963a:	f105 0320 	add.w	r3, r5, #32
 800963e:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8009642:	69eb      	ldr	r3, [r5, #28]
 8009644:	9a03      	ldr	r2, [sp, #12]
 8009646:	4293      	cmp	r3, r2
 8009648:	dc13      	bgt.n	8009672 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800964a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800964e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 8009652:	3301      	adds	r3, #1
 8009654:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 8009658:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800965c:	3301      	adds	r3, #1
 800965e:	4293      	cmp	r3, r2
 8009660:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8009664:	f080 808e 	bcs.w	8009784 <decompress_onepass+0x170>
    start_iMCU_row(cinfo);
 8009668:	4620      	mov	r0, r4
 800966a:	f7ff fe39 	bl	80092e0 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800966e:	2003      	movs	r0, #3
 8009670:	e02a      	b.n	80096c8 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 8009672:	696f      	ldr	r7, [r5, #20]
 8009674:	9b08      	ldr	r3, [sp, #32]
 8009676:	429f      	cmp	r7, r3
 8009678:	d905      	bls.n	8009686 <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800967e:	9b03      	ldr	r3, [sp, #12]
 8009680:	3301      	adds	r3, #1
 8009682:	9303      	str	r3, [sp, #12]
 8009684:	e7dd      	b.n	8009642 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 8009686:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800968a:	b133      	cbz	r3, 800969a <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800968c:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 8009690:	2100      	movs	r1, #0
 8009692:	6a28      	ldr	r0, [r5, #32]
 8009694:	01d2      	lsls	r2, r2, #7
 8009696:	f010 f80f 	bl	80196b8 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800969a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800969e:	ee18 1a10 	vmov	r1, s16
 80096a2:	4620      	mov	r0, r4
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	4798      	blx	r3
 80096a8:	b158      	cbz	r0, 80096c2 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80096aa:	f04f 0b00 	mov.w	fp, #0
 80096ae:	f504 73aa 	add.w	r3, r4, #340	; 0x154
      blkn = 0;			/* index of current DCT block within MCU */
 80096b2:	46da      	mov	sl, fp
 80096b4:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80096b6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80096ba:	455b      	cmp	r3, fp
 80096bc:	dc09      	bgt.n	80096d2 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 80096be:	3701      	adds	r7, #1
 80096c0:	e7d8      	b.n	8009674 <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 80096c2:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 80096c4:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 80096c8:	b00f      	add	sp, #60	; 0x3c
 80096ca:	ecbd 8b02 	vpop	{d8}
 80096ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 80096d2:	9b05      	ldr	r3, [sp, #20]
 80096d4:	f853 1b04 	ldr.w	r1, [r3], #4
 80096d8:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 80096da:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80096dc:	b923      	cbnz	r3, 80096e8 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 80096de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096e0:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80096e2:	f10b 0b01 	add.w	fp, fp, #1
 80096e6:	e7e6      	b.n	80096b6 <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 80096e8:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80096ea:	f04f 0800 	mov.w	r8, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 80096ee:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 80096f2:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 80096f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 80096fc:	9b08      	ldr	r3, [sp, #32]
 80096fe:	429f      	cmp	r7, r3
 8009700:	bf34      	ite	cc
 8009702:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 8009704:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 8009706:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 8009708:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800970a:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800970c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800970e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8009712:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 8009716:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8009718:	437a      	muls	r2, r7
 800971a:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800971c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800971e:	4542      	cmp	r2, r8
 8009720:	dddf      	ble.n	80096e2 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 8009722:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009726:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009728:	4282      	cmp	r2, r0
 800972a:	d304      	bcc.n	8009736 <decompress_onepass+0x122>
 800972c:	9a03      	ldr	r2, [sp, #12]
 800972e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8009730:	4442      	add	r2, r8
 8009732:	4290      	cmp	r0, r2
 8009734:	dd0b      	ble.n	800974e <decompress_onepass+0x13a>
 8009736:	f10a 0908 	add.w	r9, sl, #8
 800973a:	eb05 0289 	add.w	r2, r5, r9, lsl #2
{
 800973e:	f04f 0900 	mov.w	r9, #0
 8009742:	9207      	str	r2, [sp, #28]
 8009744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009746:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 8009748:	9a06      	ldr	r2, [sp, #24]
 800974a:	4591      	cmp	r9, r2
 800974c:	db07      	blt.n	800975e <decompress_onepass+0x14a>
	  blkn += compptr->MCU_width;
 800974e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8009750:	f108 0801 	add.w	r8, r8, #1
	  blkn += compptr->MCU_width;
 8009754:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 8009756:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8009758:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800975c:	e7de      	b.n	800971c <decompress_onepass+0x108>
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800975e:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 8009760:	f109 0901 	add.w	r9, r9, #1
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 8009764:	f850 2b04 	ldr.w	r2, [r0], #4
 8009768:	9007      	str	r0, [sp, #28]
	      (*inverse_DCT) (cinfo, compptr,
 800976a:	9804      	ldr	r0, [sp, #16]
 800976c:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 8009770:	9000      	str	r0, [sp, #0]
 8009772:	4620      	mov	r0, r4
 8009774:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 8009776:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009778:	9b04      	ldr	r3, [sp, #16]
 800977a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800977c:	4413      	add	r3, r2
 800977e:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 8009780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009782:	e7e1      	b.n	8009748 <decompress_onepass+0x134>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 8009784:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009788:	4620      	mov	r0, r4
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800978e:	2004      	movs	r0, #4
 8009790:	e79a      	b.n	80096c8 <decompress_onepass+0xb4>

08009792 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 8009792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8009796:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800979a:	b0c5      	sub	sp, #276	; 0x114
 800979c:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800979e:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 80097a2:	9122      	str	r1, [sp, #136]	; 0x88
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 80097a4:	931e      	str	r3, [sp, #120]	; 0x78
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 80097a6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80097aa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80097ae:	428b      	cmp	r3, r1
 80097b0:	dc03      	bgt.n	80097ba <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 80097b2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 80097b6:	6950      	ldr	r0, [r2, #20]
 80097b8:	b1a8      	cbz	r0, 80097e6 <decompress_smooth_data+0x54>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 80097ba:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80097bc:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 80097c0:	9320      	str	r3, [sp, #128]	; 0x80
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80097c2:	2300      	movs	r3, #0
 80097c4:	9303      	str	r3, [sp, #12]
 80097c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097c8:	9903      	ldr	r1, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 80097ca:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80097ce:	428b      	cmp	r3, r1
 80097d0:	dc1e      	bgt.n	8009810 <decompress_smooth_data+0x7e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 80097d2:	3201      	adds	r2, #1
 80097d4:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 80097d8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 80097dc:	4282      	cmp	r2, r0
 80097de:	bf2c      	ite	cs
 80097e0:	2004      	movcs	r0, #4
 80097e2:	2003      	movcc	r0, #3
 80097e4:	e011      	b.n	800980a <decompress_smooth_data+0x78>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 80097e6:	428b      	cmp	r3, r1
 80097e8:	d10a      	bne.n	8009800 <decompress_smooth_data+0x6e>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 80097ea:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 80097ee:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80097f2:	2900      	cmp	r1, #0
 80097f4:	bf08      	it	eq
 80097f6:	3301      	addeq	r3, #1
 80097f8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80097fc:	4299      	cmp	r1, r3
 80097fe:	d8dc      	bhi.n	80097ba <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 8009800:	6813      	ldr	r3, [r2, #0]
 8009802:	4620      	mov	r0, r4
 8009804:	4798      	blx	r3
 8009806:	2800      	cmp	r0, #0
 8009808:	d1cd      	bne.n	80097a6 <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800980a:	b045      	add	sp, #276	; 0x114
 800980c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 8009810:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009812:	b923      	cbnz	r3, 800981e <decompress_smooth_data+0x8c>
       ci++, compptr++) {
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	3558      	adds	r5, #88	; 0x58
 8009818:	3301      	adds	r3, #1
 800981a:	9303      	str	r3, [sp, #12]
 800981c:	e7d3      	b.n	80097c6 <decompress_smooth_data+0x34>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800981e:	9b20      	ldr	r3, [sp, #128]	; 0x80
      block_rows = compptr->v_samp_factor;
 8009820:	68e8      	ldr	r0, [r5, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 8009822:	4293      	cmp	r3, r2
 8009824:	f240 815a 	bls.w	8009adc <decompress_smooth_data+0x34a>
      access_rows = block_rows * 2; /* this and next iMCU row */
 8009828:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800982a:	4681      	mov	r9, r0
      last_row = FALSE;
 800982c:	2100      	movs	r1, #0
      last_row = TRUE;
 800982e:	910f      	str	r1, [sp, #60]	; 0x3c
      buffer = (*cinfo->mem->access_virt_barray)
 8009830:	6861      	ldr	r1, [r4, #4]
 8009832:	9e03      	ldr	r6, [sp, #12]
 8009834:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8009838:	991e      	ldr	r1, [sp, #120]	; 0x78
 800983a:	3148      	adds	r1, #72	; 0x48
 800983c:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 8009840:	2a00      	cmp	r2, #0
 8009842:	f000 8159 	beq.w	8009af8 <decompress_smooth_data+0x366>
      buffer = (*cinfo->mem->access_virt_barray)
 8009846:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 8009848:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800984a:	4403      	add	r3, r0
 800984c:	4342      	muls	r2, r0
 800984e:	4620      	mov	r0, r4
 8009850:	9600      	str	r6, [sp, #0]
 8009852:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 8009854:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 8009856:	961d      	str	r6, [sp, #116]	; 0x74
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 8009858:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800985c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800985e:	2218      	movs	r2, #24
 8009860:	9903      	ldr	r1, [sp, #12]
 8009862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 8009864:	9f03      	ldr	r7, [sp, #12]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 8009866:	fb02 3301 	mla	r3, r2, r1, r3
 800986a:	9305      	str	r3, [sp, #20]
    quanttbl = compptr->quant_table;
 800986c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800986e:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 8009870:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 8009874:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 8009878:	8c1e      	ldrh	r6, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800987a:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800987c:	9206      	str	r2, [sp, #24]
    Q02 = quanttbl->quantval[Q02_POS];
 800987e:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 8009880:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8009884:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	9321      	str	r3, [sp, #132]	; 0x84
    output_ptr = output_buf[ci];
 800988c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800988e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8009892:	930e      	str	r3, [sp, #56]	; 0x38
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 8009894:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 8009898:	9313      	str	r3, [sp, #76]	; 0x4c
 800989a:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800989e:	9314      	str	r3, [sp, #80]	; 0x50
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 80098a0:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 80098a4:	9315      	str	r3, [sp, #84]	; 0x54
 80098a6:	ea4f 230c 	mov.w	r3, ip, lsl #8
 80098aa:	9316      	str	r3, [sp, #88]	; 0x58
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 80098ac:	01f3      	lsls	r3, r6, #7
 80098ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80098b0:	0233      	lsls	r3, r6, #8
 80098b2:	9318      	str	r3, [sp, #96]	; 0x60
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 80098b4:	01cb      	lsls	r3, r1, #7
 80098b6:	9319      	str	r3, [sp, #100]	; 0x64
 80098b8:	020b      	lsls	r3, r1, #8
 80098ba:	931a      	str	r3, [sp, #104]	; 0x68
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 80098bc:	01d3      	lsls	r3, r2, #7
 80098be:	931b      	str	r3, [sp, #108]	; 0x6c
 80098c0:	0213      	lsls	r3, r2, #8
 80098c2:	931c      	str	r3, [sp, #112]	; 0x70
 80098c4:	1f03      	subs	r3, r0, #4
 80098c6:	930d      	str	r3, [sp, #52]	; 0x34
    for (block_row = 0; block_row < block_rows; block_row++) {
 80098c8:	2300      	movs	r3, #0
 80098ca:	9304      	str	r3, [sp, #16]
      if (last_row && block_row == block_rows-1)
 80098cc:	f109 33ff 	add.w	r3, r9, #4294967295
 80098d0:	9323      	str	r3, [sp, #140]	; 0x8c
    for (block_row = 0; block_row < block_rows; block_row++) {
 80098d2:	9b04      	ldr	r3, [sp, #16]
 80098d4:	454b      	cmp	r3, r9
 80098d6:	da9d      	bge.n	8009814 <decompress_smooth_data+0x82>
      buffer_ptr = buffer[block_row];
 80098d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098da:	f853 8f04 	ldr.w	r8, [r3, #4]!
 80098de:	930d      	str	r3, [sp, #52]	; 0x34
      if (first_row && block_row == 0)
 80098e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098e2:	b11b      	cbz	r3, 80098ec <decompress_smooth_data+0x15a>
 80098e4:	9b04      	ldr	r3, [sp, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 810c 	beq.w	8009b04 <decompress_smooth_data+0x372>
	prev_block_row = buffer[block_row-1];
 80098ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098ee:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80098f2:	9307      	str	r3, [sp, #28]
      if (last_row && block_row == block_rows-1)
 80098f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098f6:	b123      	cbz	r3, 8009902 <decompress_smooth_data+0x170>
 80098f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098fa:	9a04      	ldr	r2, [sp, #16]
 80098fc:	4293      	cmp	r3, r2
 80098fe:	f000 8104 	beq.w	8009b0a <decompress_smooth_data+0x378>
	next_block_row = buffer[block_row+1];
 8009902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	9308      	str	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 8009908:	9b07      	ldr	r3, [sp, #28]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800990a:	2601      	movs	r6, #1
      last_block_column = compptr->width_in_blocks - 1;
 800990c:	69ea      	ldr	r2, [r5, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800990e:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 8009912:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 8009914:	9312      	str	r3, [sp, #72]	; 0x48
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 8009916:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800991a:	921f      	str	r2, [sp, #124]	; 0x7c
      output_col = 0;
 800991c:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800991e:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 8009920:	9b08      	ldr	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 8009922:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 8009926:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800992a:	46ba      	mov	sl, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800992c:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800992e:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 8009932:	2201      	movs	r2, #1
 8009934:	a924      	add	r1, sp, #144	; 0x90
 8009936:	4640      	mov	r0, r8
 8009938:	930a      	str	r3, [sp, #40]	; 0x28
 800993a:	f00b fe0e 	bl	801555a <jcopy_block_row>
	if (block_num < last_block_column) {
 800993e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009942:	4293      	cmp	r3, r2
 8009944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009946:	f240 80ea 	bls.w	8009b1e <decompress_smooth_data+0x38c>
	  DC3 = (int) prev_block_row[1][0];
 800994a:	9a07      	ldr	r2, [sp, #28]
 800994c:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 8009950:	9210      	str	r2, [sp, #64]	; 0x40
	  DC6 = (int) buffer_ptr[1][0];
 8009952:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	; 0x80
 8009956:	920a      	str	r2, [sp, #40]	; 0x28
	  DC9 = (int) next_block_row[1][0];
 8009958:	9a08      	ldr	r2, [sp, #32]
 800995a:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800995e:	9211      	str	r2, [sp, #68]	; 0x44
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 8009960:	9a05      	ldr	r2, [sp, #20]
 8009962:	6851      	ldr	r1, [r2, #4]
 8009964:	b1c1      	cbz	r1, 8009998 <decompress_smooth_data+0x206>
 8009966:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800996a:	b9aa      	cbnz	r2, 8009998 <decompress_smooth_data+0x206>
	  num = 36 * Q00 * (DC4 - DC6);
 800996c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800996e:	1a3a      	subs	r2, r7, r0
 8009970:	9806      	ldr	r0, [sp, #24]
 8009972:	4342      	muls	r2, r0
	  if (num >= 0) {
 8009974:	2024      	movs	r0, #36	; 0x24
 8009976:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 8009978:	9813      	ldr	r0, [sp, #76]	; 0x4c
	  if (num >= 0) {
 800997a:	f100 80d7 	bmi.w	8009b2c <decompress_smooth_data+0x39a>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800997e:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009980:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 8009982:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009984:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009988:	dd04      	ble.n	8009994 <decompress_smooth_data+0x202>
 800998a:	fa06 f101 	lsl.w	r1, r6, r1
 800998e:	4291      	cmp	r1, r2
 8009990:	dc00      	bgt.n	8009994 <decompress_smooth_data+0x202>
	      pred = (1<<Al)-1;
 8009992:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 8009994:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 8009998:	9a05      	ldr	r2, [sp, #20]
 800999a:	6891      	ldr	r1, [r2, #8]
 800999c:	b1c9      	cbz	r1, 80099d2 <decompress_smooth_data+0x240>
 800999e:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 80099a2:	b9b2      	cbnz	r2, 80099d2 <decompress_smooth_data+0x240>
	  num = 36 * Q00 * (DC2 - DC8);
 80099a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099a6:	9806      	ldr	r0, [sp, #24]
 80099a8:	ebab 0202 	sub.w	r2, fp, r2
 80099ac:	4342      	muls	r2, r0
	  if (num >= 0) {
 80099ae:	2024      	movs	r0, #36	; 0x24
 80099b0:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 80099b2:	9815      	ldr	r0, [sp, #84]	; 0x54
	  if (num >= 0) {
 80099b4:	f100 80c8 	bmi.w	8009b48 <decompress_smooth_data+0x3b6>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 80099b8:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 80099ba:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 80099bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80099be:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 80099c2:	dd04      	ble.n	80099ce <decompress_smooth_data+0x23c>
 80099c4:	fa06 f101 	lsl.w	r1, r6, r1
 80099c8:	4291      	cmp	r1, r2
 80099ca:	dc00      	bgt.n	80099ce <decompress_smooth_data+0x23c>
	      pred = (1<<Al)-1;
 80099cc:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 80099ce:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 80099d2:	9a05      	ldr	r2, [sp, #20]
 80099d4:	68d1      	ldr	r1, [r2, #12]
 80099d6:	b1d1      	cbz	r1, 8009a0e <decompress_smooth_data+0x27c>
 80099d8:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 80099dc:	b9ba      	cbnz	r2, 8009a0e <decompress_smooth_data+0x27c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 80099de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099e0:	9806      	ldr	r0, [sp, #24]
 80099e2:	445a      	add	r2, fp
 80099e4:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 80099e8:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 80099ea:	9817      	ldr	r0, [sp, #92]	; 0x5c
	  if (num >= 0) {
 80099ec:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 80099f0:	f100 80b8 	bmi.w	8009b64 <decompress_smooth_data+0x3d2>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 80099f4:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 80099f6:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 80099f8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80099fa:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 80099fe:	dd04      	ble.n	8009a0a <decompress_smooth_data+0x278>
 8009a00:	fa06 f101 	lsl.w	r1, r6, r1
 8009a04:	4291      	cmp	r1, r2
 8009a06:	dc00      	bgt.n	8009a0a <decompress_smooth_data+0x278>
	      pred = (1<<Al)-1;
 8009a08:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 8009a0a:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 8009a0e:	9a05      	ldr	r2, [sp, #20]
 8009a10:	6912      	ldr	r2, [r2, #16]
 8009a12:	b1e2      	cbz	r2, 8009a4e <decompress_smooth_data+0x2bc>
 8009a14:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 8009a18:	b9c9      	cbnz	r1, 8009a4e <decompress_smooth_data+0x2bc>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 8009a1a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009a1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a1e:	1a09      	subs	r1, r1, r0
 8009a20:	1acb      	subs	r3, r1, r3
 8009a22:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009a24:	440b      	add	r3, r1
 8009a26:	9906      	ldr	r1, [sp, #24]
 8009a28:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 8009a2a:	9919      	ldr	r1, [sp, #100]	; 0x64
	  if (num >= 0) {
 8009a2c:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 8009a30:	f100 80a6 	bmi.w	8009b80 <decompress_smooth_data+0x3ee>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 8009a34:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 8009a36:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 8009a38:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a3a:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 8009a3e:	dd04      	ble.n	8009a4a <decompress_smooth_data+0x2b8>
 8009a40:	fa06 f202 	lsl.w	r2, r6, r2
 8009a44:	429a      	cmp	r2, r3
 8009a46:	dc00      	bgt.n	8009a4a <decompress_smooth_data+0x2b8>
	      pred = (1<<Al)-1;
 8009a48:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 8009a4a:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 8009a4e:	9b05      	ldr	r3, [sp, #20]
 8009a50:	695a      	ldr	r2, [r3, #20]
 8009a52:	b1da      	cbz	r2, 8009a8c <decompress_smooth_data+0x2fa>
 8009a54:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8009a58:	b9c3      	cbnz	r3, 8009a8c <decompress_smooth_data+0x2fa>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 8009a5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a5c:	463b      	mov	r3, r7
 8009a5e:	440b      	add	r3, r1
 8009a60:	9906      	ldr	r1, [sp, #24]
 8009a62:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 8009a66:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 8009a68:	991b      	ldr	r1, [sp, #108]	; 0x6c
	  if (num >= 0) {
 8009a6a:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 8009a6e:	f100 8095 	bmi.w	8009b9c <decompress_smooth_data+0x40a>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 8009a72:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 8009a74:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 8009a76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a78:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 8009a7c:	dd04      	ble.n	8009a88 <decompress_smooth_data+0x2f6>
 8009a7e:	fa06 f202 	lsl.w	r2, r6, r2
 8009a82:	429a      	cmp	r2, r3
 8009a84:	dc00      	bgt.n	8009a88 <decompress_smooth_data+0x2f6>
	      pred = (1<<Al)-1;
 8009a86:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 8009a88:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 8009a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a8e:	aa24      	add	r2, sp, #144	; 0x90
 8009a90:	4629      	mov	r1, r5
 8009a92:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	4620      	mov	r0, r4
 8009a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buffer_ptr++, prev_block_row++, next_block_row++;
 8009a9a:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 8009a9e:	47b8      	blx	r7
	buffer_ptr++, prev_block_row++, next_block_row++;
 8009aa0:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 8009aa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009aa4:	4657      	mov	r7, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 8009aa6:	3380      	adds	r3, #128	; 0x80
 8009aa8:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8009aac:	9307      	str	r3, [sp, #28]
 8009aae:	9b08      	ldr	r3, [sp, #32]
 8009ab0:	3380      	adds	r3, #128	; 0x80
 8009ab2:	9308      	str	r3, [sp, #32]
	output_col += compptr->DCT_h_scaled_size;
 8009ab4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ab6:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 8009ab8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	output_col += compptr->DCT_h_scaled_size;
 8009aba:	930b      	str	r3, [sp, #44]	; 0x2c
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 8009abc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009abe:	3301      	adds	r3, #1
 8009ac0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ac2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac6:	428a      	cmp	r2, r1
 8009ac8:	d222      	bcs.n	8009b10 <decompress_smooth_data+0x37e>
      output_ptr += compptr->DCT_v_scaled_size;
 8009aca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009acc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009ace:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ad2:	930e      	str	r3, [sp, #56]	; 0x38
    for (block_row = 0; block_row < block_rows; block_row++) {
 8009ad4:	9b04      	ldr	r3, [sp, #16]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	9304      	str	r3, [sp, #16]
 8009ada:	e6fa      	b.n	80098d2 <decompress_smooth_data+0x140>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 8009adc:	6a2b      	ldr	r3, [r5, #32]
 8009ade:	fbb3 f1f0 	udiv	r1, r3, r0
 8009ae2:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 8009ae6:	f1b9 0f00 	cmp.w	r9, #0
 8009aea:	d103      	bne.n	8009af4 <decompress_smooth_data+0x362>
 8009aec:	4603      	mov	r3, r0
 8009aee:	4681      	mov	r9, r0
      last_row = TRUE;
 8009af0:	2101      	movs	r1, #1
 8009af2:	e69c      	b.n	800982e <decompress_smooth_data+0x9c>
 8009af4:	464b      	mov	r3, r9
 8009af6:	e7fb      	b.n	8009af0 <decompress_smooth_data+0x35e>
      buffer = (*cinfo->mem->access_virt_barray)
 8009af8:	4620      	mov	r0, r4
 8009afa:	9200      	str	r2, [sp, #0]
 8009afc:	47c0      	blx	r8
      first_row = TRUE;
 8009afe:	2301      	movs	r3, #1
 8009b00:	931d      	str	r3, [sp, #116]	; 0x74
 8009b02:	e6ab      	b.n	800985c <decompress_smooth_data+0xca>
      buffer_ptr = buffer[block_row];
 8009b04:	f8cd 801c 	str.w	r8, [sp, #28]
 8009b08:	e6f4      	b.n	80098f4 <decompress_smooth_data+0x162>
 8009b0a:	f8cd 8020 	str.w	r8, [sp, #32]
 8009b0e:	e6fb      	b.n	8009908 <decompress_smooth_data+0x176>
	DC7 = DC8; DC8 = DC9;
 8009b10:	9a11      	ldr	r2, [sp, #68]	; 0x44
	DC4 = DC5; DC5 = DC6;
 8009b12:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	DC1 = DC2; DC2 = DC3;
 8009b16:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	DC7 = DC8; DC8 = DC9;
 8009b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b1c:	e709      	b.n	8009932 <decompress_smooth_data+0x1a0>
 8009b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b20:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009b24:	9211      	str	r2, [sp, #68]	; 0x44
 8009b26:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8009b2a:	e719      	b.n	8009960 <decompress_smooth_data+0x1ce>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 8009b2c:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 8009b2e:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 8009b30:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009b32:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009b36:	dd05      	ble.n	8009b44 <decompress_smooth_data+0x3b2>
 8009b38:	fa06 f101 	lsl.w	r1, r6, r1
 8009b3c:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 8009b3e:	bfd8      	it	le
 8009b40:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 8009b44:	4252      	negs	r2, r2
 8009b46:	e725      	b.n	8009994 <decompress_smooth_data+0x202>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 8009b48:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 8009b4a:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 8009b4c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009b4e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009b52:	dd05      	ble.n	8009b60 <decompress_smooth_data+0x3ce>
 8009b54:	fa06 f101 	lsl.w	r1, r6, r1
 8009b58:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 8009b5a:	bfd8      	it	le
 8009b5c:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 8009b60:	4252      	negs	r2, r2
 8009b62:	e734      	b.n	80099ce <decompress_smooth_data+0x23c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 8009b64:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 8009b66:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 8009b68:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009b6a:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 8009b6e:	dd05      	ble.n	8009b7c <decompress_smooth_data+0x3ea>
 8009b70:	fa06 f101 	lsl.w	r1, r6, r1
 8009b74:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 8009b76:	bfd8      	it	le
 8009b78:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 8009b7c:	4252      	negs	r2, r2
 8009b7e:	e744      	b.n	8009a0a <decompress_smooth_data+0x278>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 8009b80:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 8009b82:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 8009b84:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009b86:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 8009b8a:	dd05      	ble.n	8009b98 <decompress_smooth_data+0x406>
 8009b8c:	fa06 f202 	lsl.w	r2, r6, r2
 8009b90:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 8009b92:	bfd8      	it	le
 8009b94:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 8009b98:	425b      	negs	r3, r3
 8009b9a:	e756      	b.n	8009a4a <decompress_smooth_data+0x2b8>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 8009b9c:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 8009b9e:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 8009ba0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009ba2:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 8009ba6:	dd05      	ble.n	8009bb4 <decompress_smooth_data+0x422>
 8009ba8:	fa06 f202 	lsl.w	r2, r6, r2
 8009bac:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 8009bae:	bfd8      	it	le
 8009bb0:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 8009bb4:	425b      	negs	r3, r3
 8009bb6:	e767      	b.n	8009a88 <decompress_smooth_data+0x2f6>

08009bb8 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009bb8:	6843      	ldr	r3, [r0, #4]
 8009bba:	2274      	movs	r2, #116	; 0x74
{
 8009bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009bc0:	681b      	ldr	r3, [r3, #0]
{
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009bc6:	2101      	movs	r1, #1
{
 8009bc8:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009bca:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 8009bcc:	4b2c      	ldr	r3, [pc, #176]	; (8009c80 <jinit_d_coef_controller+0xc8>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 8009bce:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 8009bd0:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009bd4:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 8009bd6:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 8009bd8:	f100 0948 	add.w	r9, r0, #72	; 0x48
 8009bdc:	4b29      	ldr	r3, [pc, #164]	; (8009c84 <jinit_d_coef_controller+0xcc>)
  coef->coef_bits_latch = NULL;
 8009bde:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 8009be0:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 8009be2:	b37e      	cbz	r6, 8009c44 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009be4:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 8009be8:	46ca      	mov	sl, r9
 8009bea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bec:	42bb      	cmp	r3, r7
 8009bee:	dc07      	bgt.n	8009c00 <jinit_d_coef_controller+0x48>
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 8009bf0:	4b25      	ldr	r3, [pc, #148]	; (8009c88 <jinit_d_coef_controller+0xd0>)
 8009bf2:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_data;
 8009bf4:	4b25      	ldr	r3, [pc, #148]	; (8009c8c <jinit_d_coef_controller+0xd4>)
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 8009bf6:	e9c4 3903 	strd	r3, r9, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 8009bfa:	b005      	add	sp, #20
 8009bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 8009c00:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 8009c04:	f8d6 800c 	ldr.w	r8, [r6, #12]
      if (cinfo->progressive_mode)
 8009c08:	b10b      	cbz	r3, 8009c0e <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 8009c0a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 8009c0e:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 8009c10:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8009c12:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 8009c14:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8009c16:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 8009c1a:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8009c1e:	f00b fc82 	bl	8015526 <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 8009c22:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8009c26:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 8009c28:	f856 0c38 	ldr.w	r0, [r6, #-56]
 8009c2c:	f00b fc7b 	bl	8015526 <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 8009c30:	2201      	movs	r2, #1
 8009c32:	9b03      	ldr	r3, [sp, #12]
 8009c34:	4611      	mov	r1, r2
 8009c36:	e9cd 0800 	strd	r0, r8, [sp]
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	47d8      	blx	fp
 8009c3e:	f84a 0b04 	str.w	r0, [sl], #4
	 ci++, compptr++) {
 8009c42:	e7d2      	b.n	8009bea <jinit_d_coef_controller+0x32>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009c44:	686b      	ldr	r3, [r5, #4]
 8009c46:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 8009c52:	f104 0320 	add.w	r3, r4, #32
 8009c56:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 8009c58:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 8009c5c:	454b      	cmp	r3, r9
 8009c5e:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8009c62:	d1f9      	bne.n	8009c58 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 8009c64:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 8009c68:	b919      	cbnz	r1, 8009c72 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 8009c6a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8009c6e:	f00f fd23 	bl	80196b8 <memset>
    coef->pub.consume_data = dummy_consume_data;
 8009c72:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <jinit_d_coef_controller+0xd8>)
 8009c74:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_onepass;
 8009c76:	4b07      	ldr	r3, [pc, #28]	; (8009c94 <jinit_d_coef_controller+0xdc>)
 8009c78:	60e3      	str	r3, [r4, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6123      	str	r3, [r4, #16]
}
 8009c7e:	e7bc      	b.n	8009bfa <jinit_d_coef_controller+0x42>
 8009c80:	08009311 	.word	0x08009311
 8009c84:	0800955d 	.word	0x0800955d
 8009c88:	0800931f 	.word	0x0800931f
 8009c8c:	08009451 	.word	0x08009451
 8009c90:	0800931b 	.word	0x0800931b
 8009c94:	08009615 	.word	0x08009615

08009c98 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009c98:	6843      	ldr	r3, [r0, #4]
 8009c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	681b      	ldr	r3, [r3, #0]
{
 8009ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca6:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8009ca8:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009cac:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009cb2:	6863      	ldr	r3, [r4, #4]
 8009cb4:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 8009cb6:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009cb8:	4620      	mov	r0, r4
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009cbe:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 8009cc0:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2101      	movs	r1, #1
 8009cca:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8009ccc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8009d4c <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009cd0:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009cd2:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 8009cd4:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8009ce0:	4f17      	ldr	r7, [pc, #92]	; (8009d40 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009ce2:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8009ce4:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 8009ce6:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8009ce8:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8009cea:	f8df e064 	ldr.w	lr, [pc, #100]	; 8009d50 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8009cee:	4915      	ldr	r1, [pc, #84]	; (8009d44 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 8009cf0:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8009cf4:	4d14      	ldr	r5, [pc, #80]	; (8009d48 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8009cf6:	fb08 e203 	mla	r2, r8, r3, lr
 8009cfa:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 8009cfc:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8009d00:	fb07 f203 	mul.w	r2, r7, r3
 8009d04:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 8009d08:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 8009d0c:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 8009d0e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8009d12:	fb05 f203 	mul.w	r2, r5, r3
 8009d16:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 8009d1a:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 8009d1e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8009d22:	fb01 f203 	mul.w	r2, r1, r3
 8009d26:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 8009d2a:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 8009d2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8009d32:	3301      	adds	r3, #1
 8009d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d38:	d1dd      	bne.n	8009cf6 <build_ycc_rgb_table+0x5e>
  }
}
 8009d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d3e:	bf00      	nop
 8009d40:	0001c5a2 	.word	0x0001c5a2
 8009d44:	ffffa7e6 	.word	0xffffa7e6
 8009d48:	ffff492e 	.word	0xffff492e
 8009d4c:	000166e9 	.word	0x000166e9
 8009d50:	ff4d0b80 	.word	0xff4d0b80

08009d54 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 8009d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8009d58:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 8009d5c:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8009d5e:	6f05      	ldr	r5, [r0, #112]	; 0x70
 8009d60:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8009d64:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 8009d68:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8009d6c:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 8009d6e:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 8009d70:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 8009d72:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 8009d76:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 8009d78:	6920      	ldr	r0, [r4, #16]
 8009d7a:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 8009d7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d7e:	3a01      	subs	r2, #1
 8009d80:	9210      	str	r2, [sp, #64]	; 0x40
 8009d82:	d502      	bpl.n	8009d8a <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 8009d84:	b007      	add	sp, #28
 8009d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 8009d8a:	9a05      	ldr	r2, [sp, #20]
 8009d8c:	680c      	ldr	r4, [r1, #0]
 8009d8e:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 8009d90:	f853 0b04 	ldr.w	r0, [r3], #4
 8009d94:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 8009d98:	684c      	ldr	r4, [r1, #4]
 8009d9a:	5964      	ldr	r4, [r4, r5]
 8009d9c:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 8009da0:	688c      	ldr	r4, [r1, #8]
 8009da2:	5967      	ldr	r7, [r4, r5]
 8009da4:	9c01      	ldr	r4, [sp, #4]
 8009da6:	3f01      	subs	r7, #1
 8009da8:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 8009dac:	45d0      	cmp	r8, sl
 8009dae:	f100 0003 	add.w	r0, r0, #3
 8009db2:	d0e3      	beq.n	8009d7c <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8009db4:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 8009db8:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8009dbc:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 8009dbe:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8009dc2:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 8009dc6:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8009dc8:	fa0f fb8b 	sxth.w	fp, fp
 8009dcc:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8009dce:	5d65      	ldrb	r5, [r4, r5]
 8009dd0:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8009dd4:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 8009dd8:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 8009ddc:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 8009dde:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8009de0:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 8009de2:	5d65      	ldrb	r5, [r4, r5]
 8009de4:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 8009de8:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 8009dec:	5d64      	ldrb	r4, [r4, r5]
 8009dee:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 8009df2:	e7db      	b.n	8009dac <ycc_rgb_convert+0x58>

08009df4 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 8009df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 8009df8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 8009dfc:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 8009e00:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 8009e02:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8009e04:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 8009e06:	3d01      	subs	r5, #1
 8009e08:	d501      	bpl.n	8009e0e <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 8009e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 8009e0e:	189c      	adds	r4, r3, r2
 8009e10:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 8009e12:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 8009e16:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 8009e1a:	6848      	ldr	r0, [r1, #4]
 8009e1c:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 8009e20:	6888      	ldr	r0, [r1, #8]
 8009e22:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 8009e26:	2000      	movs	r0, #0
 8009e28:	42b8      	cmp	r0, r7
 8009e2a:	d0ec      	beq.n	8009e06 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 8009e2c:	f81e 4000 	ldrb.w	r4, [lr, r0]
 8009e30:	f81c b000 	ldrb.w	fp, [ip, r0]
 8009e34:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8009e38:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 8009e3c:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 8009e40:	4454      	add	r4, sl
 8009e42:	f818 a000 	ldrb.w	sl, [r8, r0]
 8009e46:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 8009e4a:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 8009e4e:	4454      	add	r4, sl
		 >> SCALEBITS);
 8009e50:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 8009e52:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 8009e56:	3001      	adds	r0, #1
 8009e58:	e7e6      	b.n	8009e28 <rgb_gray_convert+0x34>

08009e5a <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 8009e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5e:	9d06      	ldr	r5, [sp, #24]
 8009e60:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8009e64:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 8009e66:	3d01      	subs	r5, #1
 8009e68:	d501      	bpl.n	8009e6e <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 8009e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 8009e6e:	1898      	adds	r0, r3, r2
 8009e70:	680c      	ldr	r4, [r1, #0]
 8009e72:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 8009e74:	684c      	ldr	r4, [r1, #4]
 8009e76:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 8009e7a:	688c      	ldr	r4, [r1, #8]
 8009e7c:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 8009e80:	2000      	movs	r0, #0
 8009e82:	f853 4b04 	ldr.w	r4, [r3], #4
 8009e86:	42b0      	cmp	r0, r6
 8009e88:	f104 0403 	add.w	r4, r4, #3
 8009e8c:	d0eb      	beq.n	8009e66 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 8009e8e:	f817 8000 	ldrb.w	r8, [r7, r0]
 8009e92:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 8009e96:	f81c 8000 	ldrb.w	r8, [ip, r0]
 8009e9a:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 8009e9e:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 8009ea2:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 8009ea4:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 8009ea8:	e7ed      	b.n	8009e86 <rgb_convert+0x2c>

08009eaa <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 8009eaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009eae:	9e07      	ldr	r6, [sp, #28]
 8009eb0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 8009eb4:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 8009eb6:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 8009eba:	3e01      	subs	r6, #1
 8009ebc:	d418      	bmi.n	8009ef0 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 8009ebe:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	e00a      	b.n	8009edc <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 8009ec6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8009eca:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 8009ece:	681c      	ldr	r4, [r3, #0]
 8009ed0:	eb05 080e 	add.w	r8, r5, lr
 8009ed4:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 8009ed6:	4545      	cmp	r5, r8
 8009ed8:	d104      	bne.n	8009ee4 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 8009eda:	3001      	adds	r0, #1
 8009edc:	42b8      	cmp	r0, r7
 8009ede:	dbf2      	blt.n	8009ec6 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	e7ea      	b.n	8009eba <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 8009ee4:	f815 9b01 	ldrb.w	r9, [r5], #1
 8009ee8:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 8009eec:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 8009eee:	e7f2      	b.n	8009ed6 <null_convert+0x2c>
  }
}
 8009ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009ef4 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 8009ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef6:	9d05      	ldr	r5, [sp, #20]
 8009ef8:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8009efc:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 8009efe:	3d01      	subs	r5, #1
 8009f00:	d500      	bpl.n	8009f04 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 8009f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 8009f04:	6808      	ldr	r0, [r1, #0]
 8009f06:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 8009f08:	f853 0b04 	ldr.w	r0, [r3], #4
 8009f0c:	58a4      	ldr	r4, [r4, r2]
 8009f0e:	eb04 0c07 	add.w	ip, r4, r7
 8009f12:	4564      	cmp	r4, ip
 8009f14:	f100 0003 	add.w	r0, r0, #3
 8009f18:	d0f1      	beq.n	8009efe <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 8009f1a:	f814 6b01 	ldrb.w	r6, [r4], #1
 8009f1e:	f800 6c03 	strb.w	r6, [r0, #-3]
 8009f22:	f800 6c02 	strb.w	r6, [r0, #-2]
 8009f26:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 8009f2a:	e7f2      	b.n	8009f12 <gray_rgb_convert+0x1e>

08009f2c <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 8009f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8009f30:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 8009f34:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8009f36:	6f05      	ldr	r5, [r0, #112]	; 0x70
 8009f38:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8009f3c:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 8009f40:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 8009f44:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 8009f46:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 8009f4a:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 8009f4c:	6920      	ldr	r0, [r4, #16]
 8009f4e:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 8009f50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f52:	3a01      	subs	r2, #1
 8009f54:	9210      	str	r2, [sp, #64]	; 0x40
 8009f56:	d502      	bpl.n	8009f5e <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 8009f58:	b007      	add	sp, #28
 8009f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 8009f5e:	eb03 0008 	add.w	r0, r3, r8
 8009f62:	680a      	ldr	r2, [r1, #0]
 8009f64:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f68:	5812      	ldr	r2, [r2, r0]
 8009f6a:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 8009f6c:	684a      	ldr	r2, [r1, #4]
 8009f6e:	5812      	ldr	r2, [r2, r0]
 8009f70:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 8009f72:	688a      	ldr	r2, [r1, #8]
 8009f74:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 8009f78:	68ca      	ldr	r2, [r1, #12]
 8009f7a:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 8009f7e:	2200      	movs	r2, #0
 8009f80:	9800      	ldr	r0, [sp, #0]
 8009f82:	3504      	adds	r5, #4
 8009f84:	4282      	cmp	r2, r0
 8009f86:	d0e3      	beq.n	8009f50 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 8009f88:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 8009f8c:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 8009f8e:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 8009f90:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 8009f94:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 8009f96:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8009f9a:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 8009f9e:	4404      	add	r4, r0
 8009fa0:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 8009fa4:	5d34      	ldrb	r4, [r6, r4]
 8009fa6:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8009faa:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 8009fae:	9405      	str	r4, [sp, #20]
 8009fb0:	9c02      	ldr	r4, [sp, #8]
 8009fb2:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8009fb6:	9c05      	ldr	r4, [sp, #20]
 8009fb8:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 8009fba:	eb00 4424 	add.w	r4, r0, r4, asr #16
 8009fbe:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 8009fc2:	5d34      	ldrb	r4, [r6, r4]
 8009fc4:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 8009fc8:	9c01      	ldr	r4, [sp, #4]
 8009fca:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 8009fce:	4420      	add	r0, r4
 8009fd0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8009fd4:	5c30      	ldrb	r0, [r6, r0]
 8009fd6:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 8009fda:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 8009fde:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 8009fe0:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 8009fe4:	e7cc      	b.n	8009f80 <ycck_cmyk_convert+0x54>

08009fe6 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 8009fe6:	4770      	bx	lr

08009fe8 <grayscale_convert>:
{
 8009fe8:	b513      	push	{r0, r1, r4, lr}
 8009fea:	460c      	mov	r4, r1
 8009fec:	4611      	mov	r1, r2
 8009fee:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 8009ff0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8009ff2:	6820      	ldr	r0, [r4, #0]
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	9b04      	ldr	r3, [sp, #16]
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f00b fa9b 	bl	8015536 <jcopy_sample_rows>
}
 800a000:	b002      	add	sp, #8
 800a002:	bd10      	pop	{r4, pc}

0800a004 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a004:	6843      	ldr	r3, [r0, #4]
 800a006:	221c      	movs	r2, #28
 800a008:	2101      	movs	r1, #1
 800a00a:	681b      	ldr	r3, [r3, #0]
{
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a010:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800a012:	4b4a      	ldr	r3, [pc, #296]	; (800a13c <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a014:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800a016:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800a01a:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800a01c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a020:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a022:	2b03      	cmp	r3, #3
 800a024:	d821      	bhi.n	800a06a <jinit_color_deconverter+0x66>
 800a026:	2b01      	cmp	r3, #1
 800a028:	d82d      	bhi.n	800a086 <jinit_color_deconverter+0x82>
 800a02a:	d023      	beq.n	800a074 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800a02c:	2a00      	cmp	r2, #0
 800a02e:	dd23      	ble.n	800a078 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800a030:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800a034:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 800a038:	2902      	cmp	r1, #2
 800a03a:	d055      	beq.n	800a0e8 <jinit_color_deconverter+0xe4>
 800a03c:	2904      	cmp	r1, #4
 800a03e:	d066      	beq.n	800a10e <jinit_color_deconverter+0x10a>
 800a040:	2901      	cmp	r1, #1
 800a042:	d16d      	bne.n	800a120 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800a044:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800a048:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800a04a:	2a01      	cmp	r2, #1
 800a04c:	d124      	bne.n	800a098 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800a04e:	4b3c      	ldr	r3, [pc, #240]	; (800a140 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800a050:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800a052:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800a054:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800a056:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800a058:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800a05a:	4299      	cmp	r1, r3
 800a05c:	dc15      	bgt.n	800a08a <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800a05e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a060:	2b00      	cmp	r3, #0
 800a062:	d169      	bne.n	800a138 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800a064:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a066:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800a068:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800a06a:	3b04      	subs	r3, #4
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d8dd      	bhi.n	800a02c <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800a070:	2a04      	cmp	r2, #4
 800a072:	e000      	b.n	800a076 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800a074:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800a076:	d0db      	beq.n	800a030 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	220b      	movs	r2, #11
 800a07c:	4620      	mov	r0, r4
 800a07e:	615a      	str	r2, [r3, #20]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4798      	blx	r3
 800a084:	e7d4      	b.n	800a030 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800a086:	2a03      	cmp	r2, #3
 800a088:	e7f5      	b.n	800a076 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800a08a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800a08e:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800a092:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800a094:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800a096:	e7e0      	b.n	800a05a <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d146      	bne.n	800a12a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800a09c:	4b29      	ldr	r3, [pc, #164]	; (800a144 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a09e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800a0a2:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800a0a4:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800a0a8:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a0aa:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800a0ac:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800a0b4:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800a0b6:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800a0b8:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800a0bc:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800a0be:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800a0c2:	fb06 f203 	mul.w	r2, r6, r3
 800a0c6:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800a0ca:	fb05 f203 	mul.w	r2, r5, r3
 800a0ce:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800a0d2:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800a0d6:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800a0d8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800a0dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800a0e0:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800a0e4:	d1ed      	bne.n	800a0c2 <jinit_color_deconverter+0xbe>
 800a0e6:	e7ba      	b.n	800a05e <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800a0e8:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800a0ea:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800a0ec:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800a0ee:	d105      	bne.n	800a0fc <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800a0f0:	4b15      	ldr	r3, [pc, #84]	; (800a148 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800a0f2:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800a0f4:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800a0f6:	f7ff fdcf 	bl	8009c98 <build_ycc_rgb_table>
 800a0fa:	e7b0      	b.n	800a05e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d102      	bne.n	800a106 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800a100:	4b12      	ldr	r3, [pc, #72]	; (800a14c <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800a102:	606b      	str	r3, [r5, #4]
 800a104:	e7ab      	b.n	800a05e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800a106:	2b02      	cmp	r3, #2
 800a108:	d10f      	bne.n	800a12a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800a10a:	4b11      	ldr	r3, [pc, #68]	; (800a150 <jinit_color_deconverter+0x14c>)
 800a10c:	e7f9      	b.n	800a102 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800a10e:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800a110:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800a112:	d101      	bne.n	800a118 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800a114:	4b0f      	ldr	r3, [pc, #60]	; (800a154 <jinit_color_deconverter+0x150>)
 800a116:	e7ec      	b.n	800a0f2 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800a118:	2b04      	cmp	r3, #4
 800a11a:	d106      	bne.n	800a12a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800a11c:	4b0e      	ldr	r3, [pc, #56]	; (800a158 <jinit_color_deconverter+0x154>)
 800a11e:	e7f0      	b.n	800a102 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800a120:	4299      	cmp	r1, r3
 800a122:	d102      	bne.n	800a12a <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800a124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a126:	67a3      	str	r3, [r4, #120]	; 0x78
 800a128:	e7f8      	b.n	800a11c <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	221c      	movs	r2, #28
 800a12e:	4620      	mov	r0, r4
 800a130:	615a      	str	r2, [r3, #20]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4798      	blx	r3
 800a136:	e792      	b.n	800a05e <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800a138:	2301      	movs	r3, #1
 800a13a:	e794      	b.n	800a066 <jinit_color_deconverter+0x62>
 800a13c:	08009fe7 	.word	0x08009fe7
 800a140:	08009fe9 	.word	0x08009fe9
 800a144:	08009df5 	.word	0x08009df5
 800a148:	08009d55 	.word	0x08009d55
 800a14c:	08009ef5 	.word	0x08009ef5
 800a150:	08009e5b 	.word	0x08009e5b
 800a154:	08009f2d 	.word	0x08009f2d
 800a158:	08009eab 	.word	0x08009eab

0800a15c <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800a164:	2500      	movs	r5, #0
{
 800a166:	4607      	mov	r7, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a168:	f8d0 a0d8 	ldr.w	sl, [r0, #216]	; 0xd8
 800a16c:	f103 0804 	add.w	r8, r3, #4
  int method = 0;
 800a170:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a172:	46ab      	mov	fp, r5
{
 800a174:	ed2d 8b04 	vpush	{d8-d9}
 800a178:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	455b      	cmp	r3, fp
 800a17e:	dc04      	bgt.n	800a18a <start_pass+0x2e>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800a180:	b007      	add	sp, #28
 800a182:	ecbd 8b04 	vpop	{d8-d9}
 800a186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a18a:	e9da 1209 	ldrd	r1, r2, [sl, #36]	; 0x24
 800a18e:	f240 700e 	movw	r0, #1806	; 0x70e
 800a192:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800a196:	4283      	cmp	r3, r0
 800a198:	f000 80d9 	beq.w	800a34e <start_pass+0x1f2>
 800a19c:	dc5a      	bgt.n	800a254 <start_pass+0xf8>
 800a19e:	f240 4004 	movw	r0, #1028	; 0x404
 800a1a2:	4283      	cmp	r3, r0
 800a1a4:	f000 80d6 	beq.w	800a354 <start_pass+0x1f8>
 800a1a8:	dc2f      	bgt.n	800a20a <start_pass+0xae>
 800a1aa:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800a1ae:	f000 80d3 	beq.w	800a358 <start_pass+0x1fc>
 800a1b2:	dc1a      	bgt.n	800a1ea <start_pass+0x8e>
 800a1b4:	f240 2001 	movw	r0, #513	; 0x201
 800a1b8:	4283      	cmp	r3, r0
 800a1ba:	f000 80cf 	beq.w	800a35c <start_pass+0x200>
 800a1be:	dc0e      	bgt.n	800a1de <start_pass+0x82>
 800a1c0:	f240 1001 	movw	r0, #257	; 0x101
 800a1c4:	4283      	cmp	r3, r0
 800a1c6:	f000 80cb 	beq.w	800a360 <start_pass+0x204>
 800a1ca:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800a1ce:	f000 80c9 	beq.w	800a364 <start_pass+0x208>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2007      	movs	r0, #7
 800a1d6:	61da      	str	r2, [r3, #28]
 800a1d8:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800a1dc:	e0b3      	b.n	800a346 <start_pass+0x1ea>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a1de:	f240 2002 	movw	r0, #514	; 0x202
 800a1e2:	4283      	cmp	r3, r0
 800a1e4:	d1f5      	bne.n	800a1d2 <start_pass+0x76>
 800a1e6:	4d9e      	ldr	r5, [pc, #632]	; (800a460 <start_pass+0x304>)
 800a1e8:	e0b2      	b.n	800a350 <start_pass+0x1f4>
 800a1ea:	f240 3006 	movw	r0, #774	; 0x306
 800a1ee:	4283      	cmp	r3, r0
 800a1f0:	f000 80ba 	beq.w	800a368 <start_pass+0x20c>
 800a1f4:	f240 4002 	movw	r0, #1026	; 0x402
 800a1f8:	4283      	cmp	r3, r0
 800a1fa:	f000 80b7 	beq.w	800a36c <start_pass+0x210>
 800a1fe:	f240 3003 	movw	r0, #771	; 0x303
 800a202:	4283      	cmp	r3, r0
 800a204:	d1e5      	bne.n	800a1d2 <start_pass+0x76>
      method_ptr = jpeg_idct_3x3;
 800a206:	4d97      	ldr	r5, [pc, #604]	; (800a464 <start_pass+0x308>)
 800a208:	e0a2      	b.n	800a350 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a20a:	f240 6003 	movw	r0, #1539	; 0x603
 800a20e:	4283      	cmp	r3, r0
 800a210:	f000 80ae 	beq.w	800a370 <start_pass+0x214>
 800a214:	dc0e      	bgt.n	800a234 <start_pass+0xd8>
 800a216:	f240 5005 	movw	r0, #1285	; 0x505
 800a21a:	4283      	cmp	r3, r0
 800a21c:	f000 80aa 	beq.w	800a374 <start_pass+0x218>
 800a220:	f240 500a 	movw	r0, #1290	; 0x50a
 800a224:	4283      	cmp	r3, r0
 800a226:	f000 80a7 	beq.w	800a378 <start_pass+0x21c>
 800a22a:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800a22e:	d1d0      	bne.n	800a1d2 <start_pass+0x76>
      method_ptr = jpeg_idct_4x8;
 800a230:	4d8d      	ldr	r5, [pc, #564]	; (800a468 <start_pass+0x30c>)
 800a232:	e08d      	b.n	800a350 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a234:	f240 600c 	movw	r0, #1548	; 0x60c
 800a238:	4283      	cmp	r3, r0
 800a23a:	f000 809f 	beq.w	800a37c <start_pass+0x220>
 800a23e:	f240 7007 	movw	r0, #1799	; 0x707
 800a242:	4283      	cmp	r3, r0
 800a244:	f000 809c 	beq.w	800a380 <start_pass+0x224>
 800a248:	f240 6006 	movw	r0, #1542	; 0x606
 800a24c:	4283      	cmp	r3, r0
 800a24e:	d1c0      	bne.n	800a1d2 <start_pass+0x76>
      method_ptr = jpeg_idct_6x6;
 800a250:	4d86      	ldr	r5, [pc, #536]	; (800a46c <start_pass+0x310>)
 800a252:	e07d      	b.n	800a350 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a254:	f640 4006 	movw	r0, #3078	; 0xc06
 800a258:	4283      	cmp	r3, r0
 800a25a:	f000 8093 	beq.w	800a384 <start_pass+0x228>
 800a25e:	dc21      	bgt.n	800a2a4 <start_pass+0x148>
 800a260:	f640 1009 	movw	r0, #2313	; 0x909
 800a264:	4283      	cmp	r3, r0
 800a266:	f000 808f 	beq.w	800a388 <start_pass+0x22c>
 800a26a:	dc0d      	bgt.n	800a288 <start_pass+0x12c>
 800a26c:	f640 0008 	movw	r0, #2056	; 0x808
 800a270:	4283      	cmp	r3, r0
 800a272:	d039      	beq.n	800a2e8 <start_pass+0x18c>
 800a274:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800a278:	f000 8088 	beq.w	800a38c <start_pass+0x230>
 800a27c:	f640 0004 	movw	r0, #2052	; 0x804
 800a280:	4283      	cmp	r3, r0
 800a282:	d1a6      	bne.n	800a1d2 <start_pass+0x76>
      method_ptr = jpeg_idct_8x4;
 800a284:	4d7a      	ldr	r5, [pc, #488]	; (800a470 <start_pass+0x314>)
 800a286:	e063      	b.n	800a350 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a288:	f640 200a 	movw	r0, #2570	; 0xa0a
 800a28c:	4283      	cmp	r3, r0
 800a28e:	d07f      	beq.n	800a390 <start_pass+0x234>
 800a290:	f640 300b 	movw	r0, #2827	; 0xb0b
 800a294:	4283      	cmp	r3, r0
 800a296:	d07d      	beq.n	800a394 <start_pass+0x238>
 800a298:	f640 2005 	movw	r0, #2565	; 0xa05
 800a29c:	4283      	cmp	r3, r0
 800a29e:	d198      	bne.n	800a1d2 <start_pass+0x76>
      method_ptr = jpeg_idct_10x5;
 800a2a0:	4d74      	ldr	r5, [pc, #464]	; (800a474 <start_pass+0x318>)
 800a2a2:	e055      	b.n	800a350 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a2a4:	f640 600e 	movw	r0, #3598	; 0xe0e
 800a2a8:	4283      	cmp	r3, r0
 800a2aa:	d075      	beq.n	800a398 <start_pass+0x23c>
 800a2ac:	dc0d      	bgt.n	800a2ca <start_pass+0x16e>
 800a2ae:	f640 500d 	movw	r0, #3341	; 0xd0d
 800a2b2:	4283      	cmp	r3, r0
 800a2b4:	d072      	beq.n	800a39c <start_pass+0x240>
 800a2b6:	f640 6007 	movw	r0, #3591	; 0xe07
 800a2ba:	4283      	cmp	r3, r0
 800a2bc:	d070      	beq.n	800a3a0 <start_pass+0x244>
 800a2be:	f640 400c 	movw	r0, #3084	; 0xc0c
 800a2c2:	4283      	cmp	r3, r0
 800a2c4:	d185      	bne.n	800a1d2 <start_pass+0x76>
      method_ptr = jpeg_idct_12x12;
 800a2c6:	4d6c      	ldr	r5, [pc, #432]	; (800a478 <start_pass+0x31c>)
 800a2c8:	e042      	b.n	800a350 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800a2ca:	f241 0008 	movw	r0, #4104	; 0x1008
 800a2ce:	4283      	cmp	r3, r0
 800a2d0:	d068      	beq.n	800a3a4 <start_pass+0x248>
 800a2d2:	f241 0010 	movw	r0, #4112	; 0x1010
 800a2d6:	4283      	cmp	r3, r0
 800a2d8:	d066      	beq.n	800a3a8 <start_pass+0x24c>
 800a2da:	f640 700f 	movw	r0, #3855	; 0xf0f
 800a2de:	4283      	cmp	r3, r0
 800a2e0:	f47f af77 	bne.w	800a1d2 <start_pass+0x76>
      method_ptr = jpeg_idct_15x15;
 800a2e4:	4d65      	ldr	r5, [pc, #404]	; (800a47c <start_pass+0x320>)
 800a2e6:	e033      	b.n	800a350 <start_pass+0x1f4>
      switch (cinfo->dct_method) {
 800a2e8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d827      	bhi.n	800a340 <start_pass+0x1e4>
 800a2f0:	461c      	mov	r4, r3
 800a2f2:	4b63      	ldr	r3, [pc, #396]	; (800a480 <start_pass+0x324>)
 800a2f4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800a2f8:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800a2fc:	f848 5b04 	str.w	r5, [r8], #4
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800a300:	b1cb      	cbz	r3, 800a336 <start_pass+0x1da>
 800a302:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800a306:	42a3      	cmp	r3, r4
 800a308:	d015      	beq.n	800a336 <start_pass+0x1da>
    qtbl = compptr->quant_table;
 800a30a:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800a30e:	b196      	cbz	r6, 800a336 <start_pass+0x1da>
    switch (method) {
 800a310:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800a312:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    switch (method) {
 800a316:	d049      	beq.n	800a3ac <start_pass+0x250>
 800a318:	2c02      	cmp	r4, #2
 800a31a:	d05a      	beq.n	800a3d2 <start_pass+0x276>
 800a31c:	2c00      	cmp	r4, #0
 800a31e:	f040 8098 	bne.w	800a452 <start_pass+0x2f6>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800a322:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800a326:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800a328:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800a32c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800a330:	3301      	adds	r3, #1
 800a332:	2b40      	cmp	r3, #64	; 0x40
 800a334:	d1f8      	bne.n	800a328 <start_pass+0x1cc>
       ci++, compptr++) {
 800a336:	f10b 0b01 	add.w	fp, fp, #1
 800a33a:	f10a 0a58 	add.w	sl, sl, #88	; 0x58
 800a33e:	e71c      	b.n	800a17a <start_pass+0x1e>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2231      	movs	r2, #49	; 0x31
 800a344:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4638      	mov	r0, r7
 800a34a:	4798      	blx	r3
      break;
 800a34c:	e7d4      	b.n	800a2f8 <start_pass+0x19c>
      method_ptr = jpeg_idct_7x14;
 800a34e:	4d4d      	ldr	r5, [pc, #308]	; (800a484 <start_pass+0x328>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800a350:	2400      	movs	r4, #0
 800a352:	e7d1      	b.n	800a2f8 <start_pass+0x19c>
      method_ptr = jpeg_idct_4x4;
 800a354:	4d4c      	ldr	r5, [pc, #304]	; (800a488 <start_pass+0x32c>)
 800a356:	e7fb      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x4;
 800a358:	4d4c      	ldr	r5, [pc, #304]	; (800a48c <start_pass+0x330>)
 800a35a:	e7f9      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x1;
 800a35c:	4d4c      	ldr	r5, [pc, #304]	; (800a490 <start_pass+0x334>)
 800a35e:	e7f7      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x1;
 800a360:	4d4c      	ldr	r5, [pc, #304]	; (800a494 <start_pass+0x338>)
 800a362:	e7f5      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x2;
 800a364:	4d4c      	ldr	r5, [pc, #304]	; (800a498 <start_pass+0x33c>)
 800a366:	e7f3      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_3x6;
 800a368:	4d4c      	ldr	r5, [pc, #304]	; (800a49c <start_pass+0x340>)
 800a36a:	e7f1      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_4x2;
 800a36c:	4d4c      	ldr	r5, [pc, #304]	; (800a4a0 <start_pass+0x344>)
 800a36e:	e7ef      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x3;
 800a370:	4d4c      	ldr	r5, [pc, #304]	; (800a4a4 <start_pass+0x348>)
 800a372:	e7ed      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x5;
 800a374:	4d4c      	ldr	r5, [pc, #304]	; (800a4a8 <start_pass+0x34c>)
 800a376:	e7eb      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x10;
 800a378:	4d4c      	ldr	r5, [pc, #304]	; (800a4ac <start_pass+0x350>)
 800a37a:	e7e9      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x12;
 800a37c:	4d4c      	ldr	r5, [pc, #304]	; (800a4b0 <start_pass+0x354>)
 800a37e:	e7e7      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_7x7;
 800a380:	4d4c      	ldr	r5, [pc, #304]	; (800a4b4 <start_pass+0x358>)
 800a382:	e7e5      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_12x6;
 800a384:	4d4c      	ldr	r5, [pc, #304]	; (800a4b8 <start_pass+0x35c>)
 800a386:	e7e3      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_9x9;
 800a388:	4d4c      	ldr	r5, [pc, #304]	; (800a4bc <start_pass+0x360>)
 800a38a:	e7e1      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_8x16;
 800a38c:	4d4c      	ldr	r5, [pc, #304]	; (800a4c0 <start_pass+0x364>)
 800a38e:	e7df      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_10x10;
 800a390:	4d4c      	ldr	r5, [pc, #304]	; (800a4c4 <start_pass+0x368>)
 800a392:	e7dd      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_11x11;
 800a394:	4d4c      	ldr	r5, [pc, #304]	; (800a4c8 <start_pass+0x36c>)
 800a396:	e7db      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x14;
 800a398:	4d4c      	ldr	r5, [pc, #304]	; (800a4cc <start_pass+0x370>)
 800a39a:	e7d9      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_13x13;
 800a39c:	4d4c      	ldr	r5, [pc, #304]	; (800a4d0 <start_pass+0x374>)
 800a39e:	e7d7      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x7;
 800a3a0:	4d4c      	ldr	r5, [pc, #304]	; (800a4d4 <start_pass+0x378>)
 800a3a2:	e7d5      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x8;
 800a3a4:	4d4c      	ldr	r5, [pc, #304]	; (800a4d8 <start_pass+0x37c>)
 800a3a6:	e7d3      	b.n	800a350 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x16;
 800a3a8:	4d4c      	ldr	r5, [pc, #304]	; (800a4dc <start_pass+0x380>)
 800a3aa:	e7d1      	b.n	800a350 <start_pass+0x1f4>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800a3ac:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	494b      	ldr	r1, [pc, #300]	; (800a4e0 <start_pass+0x384>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800a3b4:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 800a3b8:	f931 cb02 	ldrsh.w	ip, [r1], #2
 800a3bc:	fb0c f303 	mul.w	r3, ip, r3
 800a3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c4:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800a3c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800a3ca:	3201      	adds	r2, #1
 800a3cc:	2a40      	cmp	r2, #64	; 0x40
 800a3ce:	d1f1      	bne.n	800a3b4 <start_pass+0x258>
 800a3d0:	e7b1      	b.n	800a336 <start_pass+0x1da>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800a3d2:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
	i = 0;
 800a3d6:	f04f 0900 	mov.w	r9, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800a3da:	9304      	str	r3, [sp, #16]
 800a3dc:	4b41      	ldr	r3, [pc, #260]	; (800a4e4 <start_pass+0x388>)
 800a3de:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	ecb3 7b02 	vldmia	r3!, {d7}
 800a3e6:	9303      	str	r3, [sp, #12]
 800a3e8:	eeb0 8a47 	vmov.f32	s16, s14
 800a3ec:	eef0 8a67 	vmov.f32	s17, s15
 800a3f0:	9b04      	ldr	r3, [sp, #16]
 800a3f2:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800a3f6:	9301      	str	r3, [sp, #4]
 800a3f8:	4b3a      	ldr	r3, [pc, #232]	; (800a4e4 <start_pass+0x388>)
 800a3fa:	9302      	str	r3, [sp, #8]
 800a3fc:	f106 0310 	add.w	r3, r6, #16
 800a400:	9305      	str	r3, [sp, #20]
 800a402:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800a404:	f836 0b02 	ldrh.w	r0, [r6], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800a408:	ecb3 7b02 	vldmia	r3!, {d7}
 800a40c:	eeb0 9a47 	vmov.f32	s18, s14
 800a410:	eef0 9a67 	vmov.f32	s19, s15
 800a414:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800a416:	f7f6 f895 	bl	8000544 <__aeabi_ui2d>
 800a41a:	ec53 2b18 	vmov	r2, r3, d8
 800a41e:	f7f6 f90b 	bl	8000638 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800a422:	ec53 2b19 	vmov	r2, r3, d9
 800a426:	f7f6 f907 	bl	8000638 <__aeabi_dmul>
 800a42a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a42e:	2200      	movs	r2, #0
 800a430:	f7f6 f902 	bl	8000638 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800a434:	f7f6 fbd8 	bl	8000be8 <__aeabi_d2f>
 800a438:	9b01      	ldr	r3, [sp, #4]
 800a43a:	f843 0b04 	str.w	r0, [r3], #4
 800a43e:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800a440:	9b05      	ldr	r3, [sp, #20]
 800a442:	429e      	cmp	r6, r3
 800a444:	d1dd      	bne.n	800a402 <start_pass+0x2a6>
	    i++;
 800a446:	f109 0908 	add.w	r9, r9, #8
	for (row = 0; row < DCTSIZE; row++) {
 800a44a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800a44e:	d1c7      	bne.n	800a3e0 <start_pass+0x284>
 800a450:	e771      	b.n	800a336 <start_pass+0x1da>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2231      	movs	r2, #49	; 0x31
 800a456:	4638      	mov	r0, r7
 800a458:	615a      	str	r2, [r3, #20]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4798      	blx	r3
      break;
 800a45e:	e76a      	b.n	800a336 <start_pass+0x1da>
 800a460:	0800f619 	.word	0x0800f619
 800a464:	0800f525 	.word	0x0800f525
 800a468:	08013495 	.word	0x08013495
 800a46c:	0800f0c5 	.word	0x0800f0c5
 800a470:	080123ed 	.word	0x080123ed
 800a474:	080121a5 	.word	0x080121a5
 800a478:	08010071 	.word	0x08010071
 800a47c:	08010d45 	.word	0x08010d45
 800a480:	080f9a4c 	.word	0x080f9a4c
 800a484:	08012c29 	.word	0x08012c29
 800a488:	0800f3f9 	.word	0x0800f3f9
 800a48c:	080137fd 	.word	0x080137fd
 800a490:	0801280d 	.word	0x0801280d
 800a494:	0800f691 	.word	0x0800f691
 800a498:	080138d5 	.word	0x080138d5
 800a49c:	080136b1 	.word	0x080136b1
 800a4a0:	0801273d 	.word	0x0801273d
 800a4a4:	080125e1 	.word	0x080125e1
 800a4a8:	0800f275 	.word	0x0800f275
 800a4ac:	08013261 	.word	0x08013261
 800a4b0:	08012fa1 	.word	0x08012fa1
 800a4b4:	0800ee1d 	.word	0x0800ee1d
 800a4b8:	08011ed9 	.word	0x08011ed9
 800a4bc:	0800f6b5 	.word	0x0800f6b5
 800a4c0:	08012845 	.word	0x08012845
 800a4c4:	0800f981 	.word	0x0800f981
 800a4c8:	0800fc79 	.word	0x0800fc79
 800a4cc:	080108f1 	.word	0x080108f1
 800a4d0:	0801042d 	.word	0x0801042d
 800a4d4:	08011b59 	.word	0x08011b59
 800a4d8:	08011711 	.word	0x08011711
 800a4dc:	080111d9 	.word	0x080111d9
 800a4e0:	080f9a98 	.word	0x080f9a98
 800a4e4:	080f9a58 	.word	0x080f9a58

0800a4e8 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a4ea:	6843      	ldr	r3, [r0, #4]
{
 800a4ec:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a4ee:	2254      	movs	r2, #84	; 0x54
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a4f4:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a4f6:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800a4f8:	4b0f      	ldr	r3, [pc, #60]	; (800a538 <jinit_inverse_dct+0x50>)
 800a4fa:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a4fc:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800a500:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800a504:	f844 3b2c 	str.w	r3, [r4], #44
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a508:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a50a:	42b3      	cmp	r3, r6
 800a50c:	dc00      	bgt.n	800a510 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800a50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a510:	686b      	ldr	r3, [r5, #4]
 800a512:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a516:	2101      	movs	r1, #1
 800a518:	4628      	mov	r0, r5
 800a51a:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800a51c:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a51e:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800a520:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800a524:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800a526:	2100      	movs	r1, #0
 800a528:	f00f f8c6 	bl	80196b8 <memset>
    idct->cur_method[ci] = -1;
 800a52c:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800a530:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800a532:	f844 3b04 	str.w	r3, [r4], #4
       ci++, compptr++) {
 800a536:	e7e7      	b.n	800a508 <jinit_inverse_dct+0x20>
 800a538:	0800a15d 	.word	0x0800a15d

0800a53c <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800a53c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800a540:	6905      	ldr	r5, [r0, #16]
{
 800a542:	4607      	mov	r7, r0
 800a544:	4688      	mov	r8, r1
 800a546:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800a548:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800a54c:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800a54e:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800a552:	f1bb 0f00 	cmp.w	fp, #0
 800a556:	d042      	beq.n	800a5de <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800a558:	454e      	cmp	r6, r9
 800a55a:	da42      	bge.n	800a5e2 <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800a55c:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a562:	b95b      	cbnz	r3, 800a57c <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	2278      	movs	r2, #120	; 0x78
 800a568:	f04f 31ff 	mov.w	r1, #4294967295
 800a56c:	4628      	mov	r0, r5
 800a56e:	615a      	str	r2, [r3, #20]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800a574:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800a578:	2201      	movs	r2, #1
 800a57a:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800a57c:	f1c6 0619 	rsb	r6, r6, #25
 800a580:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800a584:	2619      	movs	r6, #25
 800a586:	e02c      	b.n	800a5e2 <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800a588:	f1ba 0f00 	cmp.w	sl, #0
 800a58c:	d107      	bne.n	800a59e <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800a58e:	69ab      	ldr	r3, [r5, #24]
 800a590:	4628      	mov	r0, r5
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	4798      	blx	r3
 800a596:	b350      	cbz	r0, 800a5ee <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800a598:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800a59a:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800a59e:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800a5a2:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800a5a6:	2aff      	cmp	r2, #255	; 0xff
 800a5a8:	d116      	bne.n	800a5d8 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800a5aa:	f1ba 0f00 	cmp.w	sl, #0
 800a5ae:	d109      	bne.n	800a5c4 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800a5b0:	69ab      	ldr	r3, [r5, #24]
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	9201      	str	r2, [sp, #4]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	4798      	blx	r3
 800a5ba:	b1c0      	cbz	r0, 800a5ee <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800a5bc:	69ab      	ldr	r3, [r5, #24]
 800a5be:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800a5c0:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800a5c4:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800a5c8:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800a5cc:	2bff      	cmp	r3, #255	; 0xff
 800a5ce:	d0ec      	beq.n	800a5aa <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800a5d0:	b113      	cbz	r3, 800a5d8 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800a5d2:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800a5d6:	e7bf      	b.n	800a558 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800a5d8:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800a5dc:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800a5de:	2e18      	cmp	r6, #24
 800a5e0:	ddd2      	ble.n	800a588 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800a5e2:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800a5e6:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800a5ea:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800a5ee:	4658      	mov	r0, fp
 800a5f0:	b003      	add	sp, #12
 800a5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a5f8 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800a5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fa:	9d06      	ldr	r5, [sp, #24]
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	468c      	mov	ip, r1
 800a600:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800a602:	4295      	cmp	r5, r2
{
 800a604:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800a606:	dd08      	ble.n	800a61a <jpeg_huff_decode+0x22>
 800a608:	462b      	mov	r3, r5
 800a60a:	f7ff ff97 	bl	800a53c <jpeg_fill_bit_buffer>
 800a60e:	b910      	cbnz	r0, 800a616 <jpeg_huff_decode+0x1e>
 800a610:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800a614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800a616:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800a61a:	1b62      	subs	r2, r4, r5
 800a61c:	4b1a      	ldr	r3, [pc, #104]	; (800a688 <jpeg_huff_decode+0x90>)
 800a61e:	fa4c f002 	asr.w	r0, ip, r2
 800a622:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a626:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800a628:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800a62c:	4283      	cmp	r3, r0
 800a62e:	db0d      	blt.n	800a64c <jpeg_huff_decode+0x54>
  if (l > 16) {
 800a630:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800a632:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800a636:	dd1e      	ble.n	800a676 <jpeg_huff_decode+0x7e>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800a638:	6930      	ldr	r0, [r6, #16]
 800a63a:	2279      	movs	r2, #121	; 0x79
 800a63c:	f04f 31ff 	mov.w	r1, #4294967295
 800a640:	6803      	ldr	r3, [r0, #0]
 800a642:	615a      	str	r2, [r3, #20]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800a648:	2000      	movs	r0, #0
 800a64a:	e7e3      	b.n	800a614 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800a64c:	2a00      	cmp	r2, #0
    code <<= 1;
 800a64e:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800a652:	dc08      	bgt.n	800a666 <jpeg_huff_decode+0x6e>
 800a654:	2301      	movs	r3, #1
 800a656:	4661      	mov	r1, ip
 800a658:	4630      	mov	r0, r6
 800a65a:	f7ff ff6f 	bl	800a53c <jpeg_fill_bit_buffer>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d0d6      	beq.n	800a610 <jpeg_huff_decode+0x18>
 800a662:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800a666:	3a01      	subs	r2, #1
    l++;
 800a668:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800a66a:	fa4c f002 	asr.w	r0, ip, r2
 800a66e:	f000 0001 	and.w	r0, r0, #1
 800a672:	4320      	orrs	r0, r4
    l++;
 800a674:	e7d8      	b.n	800a628 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800a676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a67a:	3512      	adds	r5, #18
 800a67c:	4418      	add	r0, r3
 800a67e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800a682:	4410      	add	r0, r2
 800a684:	7c40      	ldrb	r0, [r0, #17]
 800a686:	e7c5      	b.n	800a614 <jpeg_huff_decode+0x1c>
 800a688:	080f9b18 	.word	0x080f9b18

0800a68c <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800a68c:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800a68e:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800a692:	2600      	movs	r6, #0
{
 800a694:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800a696:	68eb      	ldr	r3, [r5, #12]
 800a698:	6991      	ldr	r1, [r2, #24]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	bfb8      	it	lt
 800a69e:	3307      	addlt	r3, #7
 800a6a0:	eb01 03e3 	add.w	r3, r1, r3, asr #3
 800a6a4:	6193      	str	r3, [r2, #24]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a6a6:	6893      	ldr	r3, [r2, #8]
  entropy->bitstate.bits_left = 0;
 800a6a8:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a6aa:	4798      	blx	r3
 800a6ac:	b190      	cbz	r0, 800a6d4 <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800a6ae:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	f105 0014 	add.w	r0, r5, #20
 800a6b8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800a6bc:	0092      	lsls	r2, r2, #2
 800a6be:	f00e fffb 	bl	80196b8 <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800a6c2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800a6c6:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800a6c8:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800a6ca:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800a6ce:	b903      	cbnz	r3, 800a6d2 <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 800a6d0:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800a6d2:	2001      	movs	r0, #1
}
 800a6d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6d8 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800a6dc:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800a6e0:	b091      	sub	sp, #68	; 0x44
 800a6e2:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800a6e4:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800a6e8:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800a6ea:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800a6ee:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800a6f0:	b933      	cbnz	r3, 800a700 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800a6f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a6f4:	b17e      	cbz	r6, 800a716 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800a6f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800a6f8:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800a6fe:	e007      	b.n	800a710 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800a700:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1f5      	bne.n	800a6f2 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800a706:	f7ff ffc1 	bl	800a68c <process_restart>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d1f1      	bne.n	800a6f2 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800a70e:	2000      	movs	r0, #0
}
 800a710:	b011      	add	sp, #68	; 0x44
 800a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a716:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800a718:	f104 0810 	add.w	r8, r4, #16
 800a71c:	af0b      	add	r7, sp, #44	; 0x2c
 800a71e:	f505 79b8 	add.w	r9, r5, #368	; 0x170
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	f104 0b10 	add.w	fp, r4, #16
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	9206      	str	r2, [sp, #24]
 800a72c:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800a72e:	f8df a118 	ldr.w	sl, [pc, #280]	; 800a848 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a732:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800a734:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a738:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800a73c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a73e:	f8d8 3000 	ldr.w	r3, [r8]
 800a742:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a744:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800a748:	42b3      	cmp	r3, r6
 800a74a:	dc0d      	bgt.n	800a768 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a74c:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800a74e:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a750:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800a752:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	9a07      	ldr	r2, [sp, #28]
 800a758:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800a75a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a75c:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800a760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a762:	6833      	ldr	r3, [r6, #0]
 800a764:	602b      	str	r3, [r5, #0]
 800a766:	e7c6      	b.n	800a6f6 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800a768:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800a76a:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800a76e:	f859 7b04 	ldr.w	r7, [r9], #4
      block = MCU_data[blkn];
 800a772:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800a776:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800a778:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800a77c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a786:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800a78a:	dc0c      	bgt.n	800a7a6 <decode_mcu_DC_first+0xce>
 800a78c:	2300      	movs	r3, #0
 800a78e:	4662      	mov	r2, ip
 800a790:	4671      	mov	r1, lr
 800a792:	a806      	add	r0, sp, #24
 800a794:	f7ff fed2 	bl	800a53c <jpeg_fill_bit_buffer>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d0b8      	beq.n	800a70e <decode_mcu_DC_first+0x36>
 800a79c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800a7a0:	f1bc 0f07 	cmp.w	ip, #7
 800a7a4:	dd3e      	ble.n	800a824 <decode_mcu_DC_first+0x14c>
 800a7a6:	f1ac 0308 	sub.w	r3, ip, #8
 800a7aa:	fa4e f303 	asr.w	r3, lr, r3
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800a7b4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800a7b8:	2a00      	cmp	r2, #0
 800a7ba:	d042      	beq.n	800a842 <decode_mcu_DC_first+0x16a>
 800a7bc:	4443      	add	r3, r8
 800a7be:	ebac 0c02 	sub.w	ip, ip, r2
 800a7c2:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800a7c6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ca:	d01b      	beq.n	800a804 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800a7cc:	45e0      	cmp	r8, ip
 800a7ce:	dd09      	ble.n	800a7e4 <decode_mcu_DC_first+0x10c>
 800a7d0:	4643      	mov	r3, r8
 800a7d2:	4662      	mov	r2, ip
 800a7d4:	4671      	mov	r1, lr
 800a7d6:	a806      	add	r0, sp, #24
 800a7d8:	f7ff feb0 	bl	800a53c <jpeg_fill_bit_buffer>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d096      	beq.n	800a70e <decode_mcu_DC_first+0x36>
 800a7e0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800a7e4:	ebac 0c08 	sub.w	ip, ip, r8
 800a7e8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800a7ec:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800a7f0:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800a7f4:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800a7f8:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800a7fa:	4299      	cmp	r1, r3
 800a7fc:	bfac      	ite	ge
 800a7fe:	eba3 0802 	subge.w	r8, r3, r2
 800a802:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800a804:	ab10      	add	r3, sp, #64	; 0x40
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a806:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800a808:	eb03 0787 	add.w	r7, r3, r7, lsl #2
      (*block)[0] = (JCOEF) (s << Al);
 800a80c:	9b03      	ldr	r3, [sp, #12]
      s += state.last_dc_val[ci];
 800a80e:	f857 0c10 	ldr.w	r0, [r7, #-16]
 800a812:	4440      	add	r0, r8
      (*block)[0] = (JCOEF) (s << Al);
 800a814:	fa00 f803 	lsl.w	r8, r0, r3
 800a818:	9b04      	ldr	r3, [sp, #16]
      state.last_dc_val[ci] = s;
 800a81a:	f847 0c10 	str.w	r0, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800a81e:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a822:	e78f      	b.n	800a744 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800a824:	2301      	movs	r3, #1
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	4662      	mov	r2, ip
 800a82a:	4643      	mov	r3, r8
 800a82c:	4671      	mov	r1, lr
 800a82e:	a806      	add	r0, sp, #24
 800a830:	f7ff fee2 	bl	800a5f8 <jpeg_huff_decode>
 800a834:	f1b0 0800 	subs.w	r8, r0, #0
 800a838:	f6ff af69 	blt.w	800a70e <decode_mcu_DC_first+0x36>
 800a83c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800a840:	e7c1      	b.n	800a7c6 <decode_mcu_DC_first+0xee>
 800a842:	2309      	movs	r3, #9
 800a844:	e7ef      	b.n	800a826 <decode_mcu_DC_first+0x14e>
 800a846:	bf00      	nop
 800a848:	080f9b18 	.word	0x080f9b18

0800a84c <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800a84c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	4607      	mov	r7, r0
 800a856:	b08d      	sub	sp, #52	; 0x34
 800a858:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800a85a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a85e:	b933      	cbnz	r3, 800a86e <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800a860:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a862:	b17b      	cbz	r3, 800a884 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800a864:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800a866:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800a868:	3b01      	subs	r3, #1
 800a86a:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800a86c:	e007      	b.n	800a87e <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800a86e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1f5      	bne.n	800a860 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800a874:	f7ff ff0a 	bl	800a68c <process_restart>
 800a878:	2800      	cmp	r0, #0
 800a87a:	d1f1      	bne.n	800a860 <decode_mcu_AC_first+0x14>
	return FALSE;
 800a87c:	2000      	movs	r0, #0
}
 800a87e:	b00d      	add	sp, #52	; 0x34
 800a880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800a884:	692e      	ldr	r6, [r5, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800a886:	b116      	cbz	r6, 800a88e <decode_mcu_AC_first+0x42>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800a888:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800a88a:	612e      	str	r6, [r5, #16]
 800a88c:	e7ea      	b.n	800a864 <decode_mcu_AC_first+0x18>
    Se = cinfo->Se;
 800a88e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    natural_order = cinfo->natural_order;
 800a892:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Se = cinfo->Se;
 800a896:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800a898:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
      tbl = entropy->ac_derived_tbl;
 800a89c:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
    Al = cinfo->Al;
 800a8a0:	9304      	str	r3, [sp, #16]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a8a2:	69bb      	ldr	r3, [r7, #24]
      for (k = cinfo->Ss; k <= Se; k++) {
 800a8a4:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	9207      	str	r2, [sp, #28]
 800a8ae:	9308      	str	r3, [sp, #32]
	  r = GET_BITS(s);
 800a8b0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800a9a8 <decode_mcu_AC_first+0x15c>
      block = MCU_data[0];
 800a8b4:	6823      	ldr	r3, [r4, #0]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a8b6:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800a8b8:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a8ba:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800a8be:	9b03      	ldr	r3, [sp, #12]
 800a8c0:	4598      	cmp	r8, r3
 800a8c2:	dc69      	bgt.n	800a998 <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800a8c4:	2a07      	cmp	r2, #7
 800a8c6:	dc09      	bgt.n	800a8dc <decode_mcu_AC_first+0x90>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	a807      	add	r0, sp, #28
 800a8cc:	f7ff fe36 	bl	800a53c <jpeg_fill_bit_buffer>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d0d3      	beq.n	800a87c <decode_mcu_AC_first+0x30>
 800a8d4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800a8d8:	2a07      	cmp	r2, #7
 800a8da:	dd33      	ble.n	800a944 <decode_mcu_AC_first+0xf8>
 800a8dc:	f1a2 0308 	sub.w	r3, r2, #8
 800a8e0:	fa41 f303 	asr.w	r3, r1, r3
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a8ea:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800a8ee:	b3a0      	cbz	r0, 800a95a <decode_mcu_AC_first+0x10e>
 800a8f0:	444b      	add	r3, r9
 800a8f2:	1a12      	subs	r2, r2, r0
 800a8f4:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800a8f8:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800a8fc:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800a900:	d02d      	beq.n	800a95e <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800a902:	42a2      	cmp	r2, r4
	  k += r;
 800a904:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800a906:	da07      	bge.n	800a918 <decode_mcu_AC_first+0xcc>
 800a908:	4623      	mov	r3, r4
 800a90a:	a807      	add	r0, sp, #28
 800a90c:	f7ff fe16 	bl	800a53c <jpeg_fill_bit_buffer>
 800a910:	2800      	cmp	r0, #0
 800a912:	d0b3      	beq.n	800a87c <decode_mcu_AC_first+0x30>
 800a914:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800a918:	1b12      	subs	r2, r2, r4
 800a91a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800a91e:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800a920:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800a924:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800a928:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800a92a:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800a92c:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800a92e:	bfa8      	it	ge
 800a930:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800a932:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800a936:	40a3      	lsls	r3, r4
 800a938:	9c05      	ldr	r4, [sp, #20]
 800a93a:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800a93e:	f108 0801 	add.w	r8, r8, #1
 800a942:	e7bc      	b.n	800a8be <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800a944:	2301      	movs	r3, #1
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	a807      	add	r0, sp, #28
 800a94a:	464b      	mov	r3, r9
 800a94c:	f7ff fe54 	bl	800a5f8 <jpeg_huff_decode>
 800a950:	2800      	cmp	r0, #0
 800a952:	db93      	blt.n	800a87c <decode_mcu_AC_first+0x30>
 800a954:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800a958:	e7ce      	b.n	800a8f8 <decode_mcu_AC_first+0xac>
 800a95a:	2309      	movs	r3, #9
 800a95c:	e7f3      	b.n	800a946 <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 800a95e:	2b0f      	cmp	r3, #15
 800a960:	d102      	bne.n	800a968 <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800a962:	f108 080f 	add.w	r8, r8, #15
 800a966:	e7ea      	b.n	800a93e <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 800a968:	2601      	movs	r6, #1
 800a96a:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800a96c:	b19b      	cbz	r3, 800a996 <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800a96e:	429a      	cmp	r2, r3
 800a970:	da09      	bge.n	800a986 <decode_mcu_AC_first+0x13a>
 800a972:	a807      	add	r0, sp, #28
 800a974:	9303      	str	r3, [sp, #12]
 800a976:	f7ff fde1 	bl	800a53c <jpeg_fill_bit_buffer>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	f43f af7e 	beq.w	800a87c <decode_mcu_AC_first+0x30>
 800a980:	9b03      	ldr	r3, [sp, #12]
 800a982:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800a986:	1ad2      	subs	r2, r2, r3
 800a988:	4807      	ldr	r0, [pc, #28]	; (800a9a8 <decode_mcu_AC_first+0x15c>)
 800a98a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800a98e:	fa41 f302 	asr.w	r3, r1, r2
 800a992:	4003      	ands	r3, r0
	      EOBRUN += r;
 800a994:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800a996:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	9807      	ldr	r0, [sp, #28]
 800a99c:	6018      	str	r0, [r3, #0]
 800a99e:	9808      	ldr	r0, [sp, #32]
 800a9a0:	6058      	str	r0, [r3, #4]
 800a9a2:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800a9a6:	e770      	b.n	800a88a <decode_mcu_AC_first+0x3e>
 800a9a8:	080f9b18 	.word	0x080f9b18

0800a9ac <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800a9ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800a9b0:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800a9b4:	2701      	movs	r7, #1
{   
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800a9ba:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800a9bc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800a9c0:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800a9c2:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a9c6:	b9c3      	cbnz	r3, 800a9fa <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a9c8:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a9ca:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a9cc:	9405      	str	r4, [sp, #20]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	9201      	str	r2, [sp, #4]
 800a9d4:	9302      	str	r3, [sp, #8]
 800a9d6:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a9da:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a9de:	42b3      	cmp	r3, r6
 800a9e0:	dc16      	bgt.n	800aa10 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a9e2:	69a3      	ldr	r3, [r4, #24]
 800a9e4:	9801      	ldr	r0, [sp, #4]
 800a9e6:	6018      	str	r0, [r3, #0]
 800a9e8:	9802      	ldr	r0, [sp, #8]
 800a9ea:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800a9ec:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800a9ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a9f0:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a9f2:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800a9f6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800a9f8:	e007      	b.n	800aa0a <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800a9fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e3      	bne.n	800a9c8 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800aa00:	f7ff fe44 	bl	800a68c <process_restart>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d1df      	bne.n	800a9c8 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800aa08:	2000      	movs	r0, #0
}
 800aa0a:	b007      	add	sp, #28
 800aa0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800aa10:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800aa12:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800aa16:	dc07      	bgt.n	800aa28 <decode_mcu_DC_refine+0x7c>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	a801      	add	r0, sp, #4
 800aa1c:	f7ff fd8e 	bl	800a53c <jpeg_fill_bit_buffer>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d0f1      	beq.n	800aa08 <decode_mcu_DC_refine+0x5c>
 800aa24:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800aa28:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800aa2a:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800aa2c:	fa41 f302 	asr.w	r3, r1, r2
 800aa30:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800aa32:	bf42      	ittt	mi
 800aa34:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800aa38:	433b      	orrmi	r3, r7
 800aa3a:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800aa3e:	e7cc      	b.n	800a9da <decode_mcu_DC_refine+0x2e>

0800aa40 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800aa40:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800aa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa48:	4606      	mov	r6, r0
 800aa4a:	b0d1      	sub	sp, #324	; 0x144
 800aa4c:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800aa4e:	f8d0 81d0 	ldr.w	r8, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800aa52:	b95b      	cbnz	r3, 800aa6c <decode_mcu_AC_refine+0x2c>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800aa54:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 800aa58:	f1bb 0f00 	cmp.w	fp, #0
 800aa5c:	d012      	beq.n	800aa84 <decode_mcu_AC_refine+0x44>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800aa5e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

  return TRUE;
 800aa62:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800aa64:	3b01      	subs	r3, #1
 800aa66:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  return TRUE;
 800aa6a:	e008      	b.n	800aa7e <decode_mcu_AC_refine+0x3e>
    if (entropy->restarts_to_go == 0)
 800aa6c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1ef      	bne.n	800aa54 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800aa74:	f7ff fe0a 	bl	800a68c <process_restart>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d1eb      	bne.n	800aa54 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800aa7c:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800aa7e:	b051      	add	sp, #324	; 0x144
 800aa80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800aa84:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800aa88:	2201      	movs	r2, #1
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aa8a:	ad0b      	add	r5, sp, #44	; 0x2c
    block = MCU_data[0];
 800aa8c:	f8d7 9000 	ldr.w	r9, [r7]
    Se = cinfo->Se;
 800aa90:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800aa92:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    k = cinfo->Ss;
 800aa96:	f8d6 7198 	ldr.w	r7, [r6, #408]	; 0x198
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800aa9a:	409a      	lsls	r2, r3
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aa9c:	612e      	str	r6, [r5, #16]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800aa9e:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800aaa0:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa4:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa8:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800aaaa:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
 800aaae:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aab0:	69b3      	ldr	r3, [r6, #24]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	602a      	str	r2, [r5, #0]
 800aab8:	606b      	str	r3, [r5, #4]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800aaba:	f8d8 3010 	ldr.w	r3, [r8, #16]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aabe:	e9d8 4202 	ldrd	r4, r2, [r8, #8]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800aac2:	9302      	str	r3, [sp, #8]
    if (EOBRUN == 0) {
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f040 80bf 	bne.w	800ac48 <decode_mcu_AC_refine+0x208>
    tbl = entropy->ac_derived_tbl;
 800aaca:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800aace:	9309      	str	r3, [sp, #36]	; 0x24
      for (; k <= Se; k++) {
 800aad0:	9b06      	ldr	r3, [sp, #24]
 800aad2:	429f      	cmp	r7, r3
 800aad4:	dd0a      	ble.n	800aaec <decode_mcu_AC_refine+0xac>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800aad6:	69b3      	ldr	r3, [r6, #24]
 800aad8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aada:	6019      	str	r1, [r3, #0]
 800aadc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aade:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800aae0:	9b02      	ldr	r3, [sp, #8]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800aae2:	e9c8 4202 	strd	r4, r2, [r8, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800aae6:	f8c8 3010 	str.w	r3, [r8, #16]
 800aaea:	e7b8      	b.n	800aa5e <decode_mcu_AC_refine+0x1e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800aaec:	2a07      	cmp	r2, #7
 800aaee:	dc0a      	bgt.n	800ab06 <decode_mcu_AC_refine+0xc6>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f7ff fd21 	bl	800a53c <jpeg_fill_bit_buffer>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d06e      	beq.n	800abdc <decode_mcu_AC_refine+0x19c>
 800aafe:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800ab02:	2a07      	cmp	r2, #7
 800ab04:	dd61      	ble.n	800abca <decode_mcu_AC_refine+0x18a>
 800ab06:	f1a2 0308 	sub.w	r3, r2, #8
 800ab0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab0c:	fa44 f303 	asr.w	r3, r4, r3
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ab16:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800ab1a:	2900      	cmp	r1, #0
 800ab1c:	d06b      	beq.n	800abf6 <decode_mcu_AC_refine+0x1b6>
 800ab1e:	4403      	add	r3, r0
 800ab20:	1a52      	subs	r2, r2, r1
 800ab22:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800ab26:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800ab2a:	ea4f 1a20 	mov.w	sl, r0, asr #4
	if (s) {
 800ab2e:	9304      	str	r3, [sp, #16]
 800ab30:	d066      	beq.n	800ac00 <decode_mcu_AC_refine+0x1c0>
	  if (s != 1)		/* size of new coef should always be 1 */
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d009      	beq.n	800ab4a <decode_mcu_AC_refine+0x10a>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800ab36:	6833      	ldr	r3, [r6, #0]
 800ab38:	2179      	movs	r1, #121	; 0x79
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	9204      	str	r2, [sp, #16]
 800ab3e:	6159      	str	r1, [r3, #20]
 800ab40:	f04f 31ff 	mov.w	r1, #4294967295
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	4798      	blx	r3
 800ab48:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800ab4a:	2a00      	cmp	r2, #0
 800ab4c:	dc08      	bgt.n	800ab60 <decode_mcu_AC_refine+0x120>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	4621      	mov	r1, r4
 800ab52:	4628      	mov	r0, r5
 800ab54:	f7ff fcf2 	bl	800a53c <jpeg_fill_bit_buffer>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d03f      	beq.n	800abdc <decode_mcu_AC_refine+0x19c>
 800ab5c:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	  if (GET_BITS(1))
 800ab60:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800ab62:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800ab64:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800ab68:	f013 0f01 	tst.w	r3, #1
 800ab6c:	9b03      	ldr	r3, [sp, #12]
 800ab6e:	bf08      	it	eq
 800ab70:	460b      	moveq	r3, r1
 800ab72:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800ab74:	9b08      	ldr	r3, [sp, #32]
 800ab76:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800ab7a:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800ab7c:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d068      	beq.n	800ac56 <decode_mcu_AC_refine+0x216>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800ab84:	2a00      	cmp	r2, #0
 800ab86:	dc07      	bgt.n	800ab98 <decode_mcu_AC_refine+0x158>
 800ab88:	2301      	movs	r3, #1
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	f7ff fcd5 	bl	800a53c <jpeg_fill_bit_buffer>
 800ab92:	b318      	cbz	r0, 800abdc <decode_mcu_AC_refine+0x19c>
 800ab94:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	    if (GET_BITS(1)) {
 800ab98:	3a01      	subs	r2, #1
 800ab9a:	fa44 f302 	asr.w	r3, r4, r2
 800ab9e:	07d9      	lsls	r1, r3, #31
 800aba0:	d50e      	bpl.n	800abc0 <decode_mcu_AC_refine+0x180>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800aba2:	9b05      	ldr	r3, [sp, #20]
 800aba4:	f939 1013 	ldrsh.w	r1, [r9, r3, lsl #1]
 800aba8:	9b03      	ldr	r3, [sp, #12]
 800abaa:	4219      	tst	r1, r3
 800abac:	d108      	bne.n	800abc0 <decode_mcu_AC_refine+0x180>
		if (*thiscoef >= 0)
 800abae:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800abb0:	b28b      	uxth	r3, r1
 800abb2:	bfac      	ite	ge
 800abb4:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800abb6:	9907      	ldrlt	r1, [sp, #28]
 800abb8:	440b      	add	r3, r1
 800abba:	9905      	ldr	r1, [sp, #20]
 800abbc:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
	  k++;
 800abc0:	3701      	adds	r7, #1
	} while (k <= Se);
 800abc2:	9b06      	ldr	r3, [sp, #24]
 800abc4:	42bb      	cmp	r3, r7
 800abc6:	dad5      	bge.n	800ab74 <decode_mcu_AC_refine+0x134>
 800abc8:	e048      	b.n	800ac5c <decode_mcu_AC_refine+0x21c>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800abca:	2301      	movs	r3, #1
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	4621      	mov	r1, r4
 800abd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd2:	4628      	mov	r0, r5
 800abd4:	f7ff fd10 	bl	800a5f8 <jpeg_huff_decode>
 800abd8:	2800      	cmp	r0, #0
 800abda:	da0e      	bge.n	800abfa <decode_mcu_AC_refine+0x1ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800abdc:	ab10      	add	r3, sp, #64	; 0x40
 800abde:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800abe0:	f1bb 0f00 	cmp.w	fp, #0
 800abe4:	f43f af4a 	beq.w	800aa7c <decode_mcu_AC_refine+0x3c>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800abe8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800abec:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 800abf0:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
 800abf4:	e7f4      	b.n	800abe0 <decode_mcu_AC_refine+0x1a0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800abf6:	2309      	movs	r3, #9
 800abf8:	e7e8      	b.n	800abcc <decode_mcu_AC_refine+0x18c>
 800abfa:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800abfe:	e792      	b.n	800ab26 <decode_mcu_AC_refine+0xe6>
	  if (r != 15) {
 800ac00:	f1ba 0f0f 	cmp.w	sl, #15
 800ac04:	d0b6      	beq.n	800ab74 <decode_mcu_AC_refine+0x134>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800ac06:	2301      	movs	r3, #1
 800ac08:	fa03 f30a 	lsl.w	r3, r3, sl
 800ac0c:	9302      	str	r3, [sp, #8]
	    if (r) {
 800ac0e:	f1ba 0f00 	cmp.w	sl, #0
 800ac12:	d015      	beq.n	800ac40 <decode_mcu_AC_refine+0x200>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800ac14:	4552      	cmp	r2, sl
 800ac16:	da08      	bge.n	800ac2a <decode_mcu_AC_refine+0x1ea>
 800ac18:	4653      	mov	r3, sl
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	a80b      	add	r0, sp, #44	; 0x2c
 800ac1e:	f7ff fc8d 	bl	800a53c <jpeg_fill_bit_buffer>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d0da      	beq.n	800abdc <decode_mcu_AC_refine+0x19c>
 800ac26:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800ac2a:	4b26      	ldr	r3, [pc, #152]	; (800acc4 <decode_mcu_AC_refine+0x284>)
 800ac2c:	eba2 020a 	sub.w	r2, r2, sl
 800ac30:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800ac34:	fa44 f302 	asr.w	r3, r4, r2
 800ac38:	400b      	ands	r3, r1
	      EOBRUN += r;
 800ac3a:	9902      	ldr	r1, [sp, #8]
 800ac3c:	4419      	add	r1, r3
 800ac3e:	9102      	str	r1, [sp, #8]
    if (EOBRUN > 0) {
 800ac40:	9b02      	ldr	r3, [sp, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f43f af47 	beq.w	800aad6 <decode_mcu_AC_refine+0x96>
      for (; k <= Se; k++) {
 800ac48:	9b06      	ldr	r3, [sp, #24]
 800ac4a:	429f      	cmp	r7, r3
 800ac4c:	dd15      	ble.n	800ac7a <decode_mcu_AC_refine+0x23a>
      EOBRUN--;
 800ac4e:	9b02      	ldr	r3, [sp, #8]
 800ac50:	3b01      	subs	r3, #1
 800ac52:	9302      	str	r3, [sp, #8]
 800ac54:	e73f      	b.n	800aad6 <decode_mcu_AC_refine+0x96>
	    if (--r < 0)
 800ac56:	f1ba 0a01 	subs.w	sl, sl, #1
 800ac5a:	d2b1      	bcs.n	800abc0 <decode_mcu_AC_refine+0x180>
	if (s) {
 800ac5c:	9b04      	ldr	r3, [sp, #16]
 800ac5e:	b153      	cbz	r3, 800ac76 <decode_mcu_AC_refine+0x236>
	  int pos = natural_order[k];
 800ac60:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800ac62:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800ac64:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800ac68:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800ac6c:	a910      	add	r1, sp, #64	; 0x40
 800ac6e:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
 800ac72:	f10b 0b01 	add.w	fp, fp, #1
      for (; k <= Se; k++) {
 800ac76:	3701      	adds	r7, #1
 800ac78:	e72a      	b.n	800aad0 <decode_mcu_AC_refine+0x90>
	thiscoef = *block + natural_order[k];
 800ac7a:	9b08      	ldr	r3, [sp, #32]
 800ac7c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (*thiscoef != 0) {
 800ac80:	f939 3015 	ldrsh.w	r3, [r9, r5, lsl #1]
 800ac84:	b1e3      	cbz	r3, 800acc0 <decode_mcu_AC_refine+0x280>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800ac86:	2a00      	cmp	r2, #0
 800ac88:	dc08      	bgt.n	800ac9c <decode_mcu_AC_refine+0x25c>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	a80b      	add	r0, sp, #44	; 0x2c
 800ac90:	f7ff fc54 	bl	800a53c <jpeg_fill_bit_buffer>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d0a1      	beq.n	800abdc <decode_mcu_AC_refine+0x19c>
 800ac98:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800ac9c:	3a01      	subs	r2, #1
 800ac9e:	fa44 f302 	asr.w	r3, r4, r2
 800aca2:	07db      	lsls	r3, r3, #31
 800aca4:	d50c      	bpl.n	800acc0 <decode_mcu_AC_refine+0x280>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800aca6:	f939 1015 	ldrsh.w	r1, [r9, r5, lsl #1]
 800acaa:	9b03      	ldr	r3, [sp, #12]
 800acac:	4219      	tst	r1, r3
 800acae:	d107      	bne.n	800acc0 <decode_mcu_AC_refine+0x280>
	      if (*thiscoef >= 0)
 800acb0:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800acb2:	b28b      	uxth	r3, r1
 800acb4:	bfac      	ite	ge
 800acb6:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800acb8:	9907      	ldrlt	r1, [sp, #28]
 800acba:	440b      	add	r3, r1
 800acbc:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
      for (; k <= Se; k++) {
 800acc0:	3701      	adds	r7, #1
 800acc2:	e7c1      	b.n	800ac48 <decode_mcu_AC_refine+0x208>
 800acc4:	080f9b18 	.word	0x080f9b18

0800acc8 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800accc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800acd0:	b093      	sub	sp, #76	; 0x4c
 800acd2:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800acd4:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800acd8:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800acda:	b933      	cbnz	r3, 800acea <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800acdc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800acde:	b17f      	cbz	r7, 800ad00 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800ace0:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800ace2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800ace4:	3b01      	subs	r3, #1
 800ace6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800ace8:	e007      	b.n	800acfa <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800acea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1f5      	bne.n	800acdc <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800acf0:	f7ff fccc 	bl	800a68c <process_restart>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d1f1      	bne.n	800acdc <decode_mcu_sub+0x14>
	return FALSE;
 800acf8:	2000      	movs	r0, #0
}
 800acfa:	b013      	add	sp, #76	; 0x4c
 800acfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800ad00:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800ad04:	f105 0810 	add.w	r8, r5, #16
 800ad08:	ac0d      	add	r4, sp, #52	; 0x34
 800ad0a:	f105 0960 	add.w	r9, r5, #96	; 0x60
    natural_order = cinfo->natural_order;
 800ad0e:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800ad10:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800ad14:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800afb4 <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800ad18:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800ad1a:	69b3      	ldr	r3, [r6, #24]
 800ad1c:	960c      	str	r6, [sp, #48]	; 0x30
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	9208      	str	r2, [sp, #32]
 800ad24:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800ad26:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800ad2a:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800ad2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad30:	f8d8 3000 	ldr.w	r3, [r8]
 800ad34:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ad36:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800ad3a:	42bb      	cmp	r3, r7
 800ad3c:	dc0e      	bgt.n	800ad5c <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ad3e:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800ad40:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ad42:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800ad44:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad4c:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800ad4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ad50:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800ad54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad56:	6833      	ldr	r3, [r6, #0]
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	e7c1      	b.n	800ace0 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800ad5c:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800ad5e:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800ad62:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800ad66:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800ad6a:	dc0c      	bgt.n	800ad86 <decode_mcu_sub+0xbe>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4662      	mov	r2, ip
 800ad70:	4671      	mov	r1, lr
 800ad72:	a808      	add	r0, sp, #32
 800ad74:	f7ff fbe2 	bl	800a53c <jpeg_fill_bit_buffer>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d0bd      	beq.n	800acf8 <decode_mcu_sub+0x30>
 800ad7c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800ad80:	f1bc 0f07 	cmp.w	ip, #7
 800ad84:	dd4a      	ble.n	800ae1c <decode_mcu_sub+0x154>
 800ad86:	f1ac 0308 	sub.w	r3, ip, #8
 800ad8a:	fa4e f303 	asr.w	r3, lr, r3
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800ad94:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	d04d      	beq.n	800ae38 <decode_mcu_sub+0x170>
 800ad9c:	4423      	add	r3, r4
 800ad9e:	ebac 0c02 	sub.w	ip, ip, r2
 800ada2:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800ada6:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800adaa:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800adae:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 80a0 	beq.w	800aef6 <decode_mcu_sub+0x22e>
	if (s) {
 800adb6:	b1cc      	cbz	r4, 800adec <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800adb8:	45a4      	cmp	ip, r4
 800adba:	da09      	bge.n	800add0 <decode_mcu_sub+0x108>
 800adbc:	4623      	mov	r3, r4
 800adbe:	4662      	mov	r2, ip
 800adc0:	4671      	mov	r1, lr
 800adc2:	a808      	add	r0, sp, #32
 800adc4:	f7ff fbba 	bl	800a53c <jpeg_fill_bit_buffer>
 800adc8:	2800      	cmp	r0, #0
 800adca:	d095      	beq.n	800acf8 <decode_mcu_sub+0x30>
 800adcc:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800add0:	ebac 0c04 	sub.w	ip, ip, r4
 800add4:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800add8:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800adda:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800adde:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800ade2:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800ade4:	4299      	cmp	r1, r3
 800ade6:	bfac      	ite	ge
 800ade8:	1a9c      	subge	r4, r3, r2
 800adea:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800adec:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800adf0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800adf4:	ab12      	add	r3, sp, #72	; 0x48
 800adf6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800adfa:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800adfe:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800ae00:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800ae04:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800ae08:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800ae0a:	9b03      	ldr	r3, [sp, #12]
 800ae0c:	429c      	cmp	r4, r3
 800ae0e:	db15      	blt.n	800ae3c <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800ae10:	9b05      	ldr	r3, [sp, #20]
 800ae12:	429c      	cmp	r4, r3
 800ae14:	f340 8081 	ble.w	800af1a <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ae18:	3701      	adds	r7, #1
 800ae1a:	e78c      	b.n	800ad36 <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	4662      	mov	r2, ip
 800ae22:	4623      	mov	r3, r4
 800ae24:	4671      	mov	r1, lr
 800ae26:	a808      	add	r0, sp, #32
 800ae28:	f7ff fbe6 	bl	800a5f8 <jpeg_huff_decode>
 800ae2c:	1e04      	subs	r4, r0, #0
 800ae2e:	f6ff af63 	blt.w	800acf8 <decode_mcu_sub+0x30>
 800ae32:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800ae36:	e7b6      	b.n	800ada6 <decode_mcu_sub+0xde>
 800ae38:	2309      	movs	r3, #9
 800ae3a:	e7f0      	b.n	800ae1e <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800ae3c:	f1bc 0f07 	cmp.w	ip, #7
 800ae40:	dc0d      	bgt.n	800ae5e <decode_mcu_sub+0x196>
 800ae42:	2300      	movs	r3, #0
 800ae44:	4662      	mov	r2, ip
 800ae46:	4671      	mov	r1, lr
 800ae48:	a808      	add	r0, sp, #32
 800ae4a:	f7ff fb77 	bl	800a53c <jpeg_fill_bit_buffer>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	f43f af52 	beq.w	800acf8 <decode_mcu_sub+0x30>
 800ae54:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800ae58:	f1bc 0f07 	cmp.w	ip, #7
 800ae5c:	dd37      	ble.n	800aece <decode_mcu_sub+0x206>
 800ae5e:	f1ac 0308 	sub.w	r3, ip, #8
 800ae62:	fa4e f303 	asr.w	r3, lr, r3
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800ae6c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800ae70:	2a00      	cmp	r2, #0
 800ae72:	d03a      	beq.n	800aeea <decode_mcu_sub+0x222>
 800ae74:	4443      	add	r3, r8
 800ae76:	ebac 0c02 	sub.w	ip, ip, r2
 800ae7a:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800ae7e:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800ae82:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800ae86:	d032      	beq.n	800aeee <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ae88:	459c      	cmp	ip, r3
	    k += r;
 800ae8a:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ae8c:	da0b      	bge.n	800aea6 <decode_mcu_sub+0x1de>
 800ae8e:	4662      	mov	r2, ip
 800ae90:	4671      	mov	r1, lr
 800ae92:	a808      	add	r0, sp, #32
 800ae94:	9307      	str	r3, [sp, #28]
 800ae96:	f7ff fb51 	bl	800a53c <jpeg_fill_bit_buffer>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	f43f af2c 	beq.w	800acf8 <decode_mcu_sub+0x30>
 800aea0:	9b07      	ldr	r3, [sp, #28]
 800aea2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800aea6:	ebac 0c03 	sub.w	ip, ip, r3
 800aeaa:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800aeae:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800aeb0:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800aeb4:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800aeb8:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800aeba:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800aebc:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800aebe:	bfa8      	it	ge
 800aec0:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800aec2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800aec6:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800aeca:	3401      	adds	r4, #1
 800aecc:	e79d      	b.n	800ae0a <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800aece:	2301      	movs	r3, #1
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	4662      	mov	r2, ip
 800aed4:	4643      	mov	r3, r8
 800aed6:	4671      	mov	r1, lr
 800aed8:	a808      	add	r0, sp, #32
 800aeda:	f7ff fb8d 	bl	800a5f8 <jpeg_huff_decode>
 800aede:	2800      	cmp	r0, #0
 800aee0:	f6ff af0a 	blt.w	800acf8 <decode_mcu_sub+0x30>
 800aee4:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800aee8:	e7c9      	b.n	800ae7e <decode_mcu_sub+0x1b6>
 800aeea:	2309      	movs	r3, #9
 800aeec:	e7f0      	b.n	800aed0 <decode_mcu_sub+0x208>
	    if (r != 15)
 800aeee:	2a0f      	cmp	r2, #15
 800aef0:	d192      	bne.n	800ae18 <decode_mcu_sub+0x150>
	    k += 15;
 800aef2:	340f      	adds	r4, #15
 800aef4:	e7e9      	b.n	800aeca <decode_mcu_sub+0x202>
	if (s) {
 800aef6:	b174      	cbz	r4, 800af16 <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800aef8:	45a4      	cmp	ip, r4
 800aefa:	da0a      	bge.n	800af12 <decode_mcu_sub+0x24a>
 800aefc:	4623      	mov	r3, r4
 800aefe:	4662      	mov	r2, ip
 800af00:	4671      	mov	r1, lr
 800af02:	a808      	add	r0, sp, #32
 800af04:	f7ff fb1a 	bl	800a53c <jpeg_fill_bit_buffer>
 800af08:	2800      	cmp	r0, #0
 800af0a:	f43f aef5 	beq.w	800acf8 <decode_mcu_sub+0x30>
 800af0e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800af12:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800af16:	2401      	movs	r4, #1
 800af18:	e77a      	b.n	800ae10 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800af1a:	f1bc 0f07 	cmp.w	ip, #7
 800af1e:	dc0d      	bgt.n	800af3c <decode_mcu_sub+0x274>
 800af20:	2300      	movs	r3, #0
 800af22:	4662      	mov	r2, ip
 800af24:	4671      	mov	r1, lr
 800af26:	a808      	add	r0, sp, #32
 800af28:	f7ff fb08 	bl	800a53c <jpeg_fill_bit_buffer>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	f43f aee3 	beq.w	800acf8 <decode_mcu_sub+0x30>
 800af32:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800af36:	f1bc 0f07 	cmp.w	ip, #7
 800af3a:	dd25      	ble.n	800af88 <decode_mcu_sub+0x2c0>
 800af3c:	f1ac 0308 	sub.w	r3, ip, #8
 800af40:	fa4e f303 	asr.w	r3, lr, r3
 800af44:	b2db      	uxtb	r3, r3
 800af46:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800af4a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800af4e:	b34a      	cbz	r2, 800afa4 <decode_mcu_sub+0x2dc>
 800af50:	4443      	add	r3, r8
 800af52:	ebac 0c02 	sub.w	ip, ip, r2
 800af56:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800af5a:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800af5e:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800af62:	d021      	beq.n	800afa8 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800af64:	45dc      	cmp	ip, fp
	  k += r;
 800af66:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800af68:	da0a      	bge.n	800af80 <decode_mcu_sub+0x2b8>
 800af6a:	465b      	mov	r3, fp
 800af6c:	4662      	mov	r2, ip
 800af6e:	4671      	mov	r1, lr
 800af70:	a808      	add	r0, sp, #32
 800af72:	f7ff fae3 	bl	800a53c <jpeg_fill_bit_buffer>
 800af76:	2800      	cmp	r0, #0
 800af78:	f43f aebe 	beq.w	800acf8 <decode_mcu_sub+0x30>
 800af7c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800af80:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800af84:	3401      	adds	r4, #1
 800af86:	e743      	b.n	800ae10 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800af88:	2301      	movs	r3, #1
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	4662      	mov	r2, ip
 800af8e:	4643      	mov	r3, r8
 800af90:	4671      	mov	r1, lr
 800af92:	a808      	add	r0, sp, #32
 800af94:	f7ff fb30 	bl	800a5f8 <jpeg_huff_decode>
 800af98:	2800      	cmp	r0, #0
 800af9a:	f6ff aead 	blt.w	800acf8 <decode_mcu_sub+0x30>
 800af9e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800afa2:	e7da      	b.n	800af5a <decode_mcu_sub+0x292>
 800afa4:	2309      	movs	r3, #9
 800afa6:	e7f0      	b.n	800af8a <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800afa8:	2b0f      	cmp	r3, #15
 800afaa:	f47f af35 	bne.w	800ae18 <decode_mcu_sub+0x150>
	  k += 15;
 800afae:	340f      	adds	r4, #15
 800afb0:	e7e8      	b.n	800af84 <decode_mcu_sub+0x2bc>
 800afb2:	bf00      	nop
 800afb4:	080f9b18 	.word	0x080f9b18

0800afb8 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800afb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800afbc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800afc0:	b091      	sub	sp, #68	; 0x44
 800afc2:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800afc4:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800afc8:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800afca:	b933      	cbnz	r3, 800afda <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800afcc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800afce:	b17f      	cbz	r7, 800aff0 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800afd0:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800afd2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800afd4:	3b01      	subs	r3, #1
 800afd6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800afd8:	e007      	b.n	800afea <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800afda:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1f5      	bne.n	800afcc <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800afe0:	f7ff fb54 	bl	800a68c <process_restart>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d1f1      	bne.n	800afcc <decode_mcu+0x14>
	return FALSE;
 800afe8:	2000      	movs	r0, #0
}
 800afea:	b011      	add	sp, #68	; 0x44
 800afec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aff0:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800aff2:	f105 0810 	add.w	r8, r5, #16
 800aff6:	ac0b      	add	r4, sp, #44	; 0x2c
 800aff8:	f105 0960 	add.w	r9, r5, #96	; 0x60
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	9206      	str	r2, [sp, #24]
 800b002:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800b004:	f8df a290 	ldr.w	sl, [pc, #656]	; 800b298 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b008:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800b00a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b00e:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800b012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b014:	f8d8 3000 	ldr.w	r3, [r8]
 800b018:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b01a:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800b01e:	42bb      	cmp	r3, r7
 800b020:	dc0e      	bgt.n	800b040 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b022:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b024:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b026:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b028:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	9a07      	ldr	r2, [sp, #28]
 800b030:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800b032:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b034:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800b038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b03a:	6833      	ldr	r3, [r6, #0]
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	e7c7      	b.n	800afd0 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800b040:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800b042:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800b046:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800b04a:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800b04e:	dc0c      	bgt.n	800b06a <decode_mcu+0xb2>
 800b050:	2300      	movs	r3, #0
 800b052:	4662      	mov	r2, ip
 800b054:	4671      	mov	r1, lr
 800b056:	a806      	add	r0, sp, #24
 800b058:	f7ff fa70 	bl	800a53c <jpeg_fill_bit_buffer>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d0c3      	beq.n	800afe8 <decode_mcu+0x30>
 800b060:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b064:	f1bc 0f07 	cmp.w	ip, #7
 800b068:	dd49      	ble.n	800b0fe <decode_mcu+0x146>
 800b06a:	f1ac 0308 	sub.w	r3, ip, #8
 800b06e:	fa4e f303 	asr.w	r3, lr, r3
 800b072:	b2db      	uxtb	r3, r3
 800b074:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b078:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b07c:	2a00      	cmp	r2, #0
 800b07e:	d04c      	beq.n	800b11a <decode_mcu+0x162>
 800b080:	4423      	add	r3, r4
 800b082:	ebac 0c02 	sub.w	ip, ip, r2
 800b086:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800b08a:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800b08e:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800b092:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800b094:	2b00      	cmp	r3, #0
 800b096:	f000 809f 	beq.w	800b1d8 <decode_mcu+0x220>
	if (s) {
 800b09a:	b1cc      	cbz	r4, 800b0d0 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b09c:	45a4      	cmp	ip, r4
 800b09e:	da09      	bge.n	800b0b4 <decode_mcu+0xfc>
 800b0a0:	4623      	mov	r3, r4
 800b0a2:	4662      	mov	r2, ip
 800b0a4:	4671      	mov	r1, lr
 800b0a6:	a806      	add	r0, sp, #24
 800b0a8:	f7ff fa48 	bl	800a53c <jpeg_fill_bit_buffer>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d09b      	beq.n	800afe8 <decode_mcu+0x30>
 800b0b0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800b0b4:	ebac 0c04 	sub.w	ip, ip, r4
 800b0b8:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800b0bc:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800b0be:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800b0c2:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800b0c6:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	bfac      	ite	ge
 800b0cc:	1a9c      	subge	r4, r3, r2
 800b0ce:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800b0d0:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800b0d4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800b0d8:	ab10      	add	r3, sp, #64	; 0x40
 800b0da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b0de:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800b0e2:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800b0e4:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800b0e8:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800b0ec:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	db14      	blt.n	800b11e <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800b0f4:	2c3f      	cmp	r4, #63	; 0x3f
 800b0f6:	f340 8081 	ble.w	800b1fc <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b0fa:	3701      	adds	r7, #1
 800b0fc:	e78d      	b.n	800b01a <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800b0fe:	2301      	movs	r3, #1
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	4662      	mov	r2, ip
 800b104:	4623      	mov	r3, r4
 800b106:	4671      	mov	r1, lr
 800b108:	a806      	add	r0, sp, #24
 800b10a:	f7ff fa75 	bl	800a5f8 <jpeg_huff_decode>
 800b10e:	1e04      	subs	r4, r0, #0
 800b110:	f6ff af6a 	blt.w	800afe8 <decode_mcu+0x30>
 800b114:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b118:	e7b7      	b.n	800b08a <decode_mcu+0xd2>
 800b11a:	2309      	movs	r3, #9
 800b11c:	e7f0      	b.n	800b100 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800b11e:	f1bc 0f07 	cmp.w	ip, #7
 800b122:	dc0d      	bgt.n	800b140 <decode_mcu+0x188>
 800b124:	2300      	movs	r3, #0
 800b126:	4662      	mov	r2, ip
 800b128:	4671      	mov	r1, lr
 800b12a:	a806      	add	r0, sp, #24
 800b12c:	f7ff fa06 	bl	800a53c <jpeg_fill_bit_buffer>
 800b130:	2800      	cmp	r0, #0
 800b132:	f43f af59 	beq.w	800afe8 <decode_mcu+0x30>
 800b136:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b13a:	f1bc 0f07 	cmp.w	ip, #7
 800b13e:	dd37      	ble.n	800b1b0 <decode_mcu+0x1f8>
 800b140:	f1ac 0308 	sub.w	r3, ip, #8
 800b144:	fa4e f303 	asr.w	r3, lr, r3
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b14e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800b152:	2a00      	cmp	r2, #0
 800b154:	d03a      	beq.n	800b1cc <decode_mcu+0x214>
 800b156:	4443      	add	r3, r8
 800b158:	ebac 0c02 	sub.w	ip, ip, r2
 800b15c:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800b160:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800b164:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800b168:	d032      	beq.n	800b1d0 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b16a:	459c      	cmp	ip, r3
	    k += r;
 800b16c:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b16e:	da0b      	bge.n	800b188 <decode_mcu+0x1d0>
 800b170:	4662      	mov	r2, ip
 800b172:	4671      	mov	r1, lr
 800b174:	a806      	add	r0, sp, #24
 800b176:	9305      	str	r3, [sp, #20]
 800b178:	f7ff f9e0 	bl	800a53c <jpeg_fill_bit_buffer>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	f43f af33 	beq.w	800afe8 <decode_mcu+0x30>
 800b182:	9b05      	ldr	r3, [sp, #20]
 800b184:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800b188:	ebac 0c03 	sub.w	ip, ip, r3
 800b18c:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800b190:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800b192:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800b196:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800b19a:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800b19c:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800b19e:	4b3d      	ldr	r3, [pc, #244]	; (800b294 <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800b1a0:	bfa8      	it	ge
 800b1a2:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800b1a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b1a8:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800b1ac:	3401      	adds	r4, #1
 800b1ae:	e79e      	b.n	800b0ee <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	4662      	mov	r2, ip
 800b1b6:	4643      	mov	r3, r8
 800b1b8:	4671      	mov	r1, lr
 800b1ba:	a806      	add	r0, sp, #24
 800b1bc:	f7ff fa1c 	bl	800a5f8 <jpeg_huff_decode>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	f6ff af11 	blt.w	800afe8 <decode_mcu+0x30>
 800b1c6:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b1ca:	e7c9      	b.n	800b160 <decode_mcu+0x1a8>
 800b1cc:	2309      	movs	r3, #9
 800b1ce:	e7f0      	b.n	800b1b2 <decode_mcu+0x1fa>
	    if (r != 15)
 800b1d0:	2a0f      	cmp	r2, #15
 800b1d2:	d192      	bne.n	800b0fa <decode_mcu+0x142>
	    k += 15;
 800b1d4:	340f      	adds	r4, #15
 800b1d6:	e7e9      	b.n	800b1ac <decode_mcu+0x1f4>
	if (s) {
 800b1d8:	b174      	cbz	r4, 800b1f8 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b1da:	45a4      	cmp	ip, r4
 800b1dc:	da0a      	bge.n	800b1f4 <decode_mcu+0x23c>
 800b1de:	4623      	mov	r3, r4
 800b1e0:	4662      	mov	r2, ip
 800b1e2:	4671      	mov	r1, lr
 800b1e4:	a806      	add	r0, sp, #24
 800b1e6:	f7ff f9a9 	bl	800a53c <jpeg_fill_bit_buffer>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	f43f aefc 	beq.w	800afe8 <decode_mcu+0x30>
 800b1f0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800b1f4:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800b1f8:	2401      	movs	r4, #1
 800b1fa:	e77b      	b.n	800b0f4 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800b1fc:	f1bc 0f07 	cmp.w	ip, #7
 800b200:	dc0d      	bgt.n	800b21e <decode_mcu+0x266>
 800b202:	2300      	movs	r3, #0
 800b204:	4662      	mov	r2, ip
 800b206:	4671      	mov	r1, lr
 800b208:	a806      	add	r0, sp, #24
 800b20a:	f7ff f997 	bl	800a53c <jpeg_fill_bit_buffer>
 800b20e:	2800      	cmp	r0, #0
 800b210:	f43f aeea 	beq.w	800afe8 <decode_mcu+0x30>
 800b214:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b218:	f1bc 0f07 	cmp.w	ip, #7
 800b21c:	dd25      	ble.n	800b26a <decode_mcu+0x2b2>
 800b21e:	f1ac 0308 	sub.w	r3, ip, #8
 800b222:	fa4e f303 	asr.w	r3, lr, r3
 800b226:	b2db      	uxtb	r3, r3
 800b228:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b22c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800b230:	b34a      	cbz	r2, 800b286 <decode_mcu+0x2ce>
 800b232:	4443      	add	r3, r8
 800b234:	ebac 0c02 	sub.w	ip, ip, r2
 800b238:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800b23c:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800b240:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800b244:	d021      	beq.n	800b28a <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b246:	45dc      	cmp	ip, fp
	  k += r;
 800b248:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b24a:	da0a      	bge.n	800b262 <decode_mcu+0x2aa>
 800b24c:	465b      	mov	r3, fp
 800b24e:	4662      	mov	r2, ip
 800b250:	4671      	mov	r1, lr
 800b252:	a806      	add	r0, sp, #24
 800b254:	f7ff f972 	bl	800a53c <jpeg_fill_bit_buffer>
 800b258:	2800      	cmp	r0, #0
 800b25a:	f43f aec5 	beq.w	800afe8 <decode_mcu+0x30>
 800b25e:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800b262:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800b266:	3401      	adds	r4, #1
 800b268:	e744      	b.n	800b0f4 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800b26a:	2301      	movs	r3, #1
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	4662      	mov	r2, ip
 800b270:	4643      	mov	r3, r8
 800b272:	4671      	mov	r1, lr
 800b274:	a806      	add	r0, sp, #24
 800b276:	f7ff f9bf 	bl	800a5f8 <jpeg_huff_decode>
 800b27a:	2800      	cmp	r0, #0
 800b27c:	f6ff aeb4 	blt.w	800afe8 <decode_mcu+0x30>
 800b280:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b284:	e7da      	b.n	800b23c <decode_mcu+0x284>
 800b286:	2309      	movs	r3, #9
 800b288:	e7f0      	b.n	800b26c <decode_mcu+0x2b4>
	  if (r != 15)
 800b28a:	2b0f      	cmp	r3, #15
 800b28c:	f47f af35 	bne.w	800b0fa <decode_mcu+0x142>
	  k += 15;
 800b290:	340f      	adds	r4, #15
 800b292:	e7e8      	b.n	800b266 <decode_mcu+0x2ae>
 800b294:	080fb3f0 	.word	0x080fb3f0
 800b298:	080f9b18 	.word	0x080f9b18

0800b29c <jpeg_make_d_derived_tbl>:
{
 800b29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800b2a0:	2a03      	cmp	r2, #3
{
 800b2a2:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	4616      	mov	r6, r2
 800b2aa:	461f      	mov	r7, r3
 800b2ac:	9103      	str	r1, [sp, #12]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800b2ae:	d905      	bls.n	800b2bc <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800b2b0:	6803      	ldr	r3, [r0, #0]
 800b2b2:	2234      	movs	r2, #52	; 0x34
 800b2b4:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d044      	beq.n	800b34c <jpeg_make_d_derived_tbl+0xb0>
 800b2c2:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b2c6:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800b2ca:	b935      	cbnz	r5, 800b2da <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800b2cc:	6823      	ldr	r3, [r4, #0]
 800b2ce:	2234      	movs	r2, #52	; 0x34
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4798      	blx	r3
  if (*pdtbl == NULL)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	b93b      	cbnz	r3, 800b2ee <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b2de:	6863      	ldr	r3, [r4, #4]
 800b2e0:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800b2ec:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800b2ee:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800b2f2:	2601      	movs	r6, #1
  p = 0;
 800b2f4:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800b2f6:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800b2fa:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800b2fe:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800b302:	46ba      	mov	sl, r7
 800b304:	444f      	add	r7, r9
 800b306:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800b30a:	dd05      	ble.n	800b318 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	4620      	mov	r0, r4
 800b310:	f8c3 b014 	str.w	fp, [r3, #20]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4798      	blx	r3
 800b318:	f10a 0318 	add.w	r3, sl, #24
 800b31c:	446b      	add	r3, sp
    while (i--)
 800b31e:	f1b9 0901 	subs.w	r9, r9, #1
 800b322:	d218      	bcs.n	800b356 <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 800b324:	3601      	adds	r6, #1
 800b326:	2e11      	cmp	r6, #17
 800b328:	d1e9      	bne.n	800b2fe <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800b32a:	2200      	movs	r2, #0
 800b32c:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800b32e:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800b332:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800b336:	55da      	strb	r2, [r3, r7]
  p = 0;
 800b338:	4691      	mov	r9, r2
  si = huffsize[0];
 800b33a:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 800b33e:	ab06      	add	r3, sp, #24
 800b340:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b344:	b313      	cbz	r3, 800b38c <jpeg_make_d_derived_tbl+0xf0>
 800b346:	4649      	mov	r1, r9
 800b348:	1a52      	subs	r2, r2, r1
 800b34a:	e00a      	b.n	800b362 <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800b34c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b350:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800b354:	e7b9      	b.n	800b2ca <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800b356:	f803 6b01 	strb.w	r6, [r3], #1
 800b35a:	e7e0      	b.n	800b31e <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800b35c:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800b360:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800b362:	a806      	add	r0, sp, #24
 800b364:	1853      	adds	r3, r2, r1
 800b366:	4689      	mov	r9, r1
 800b368:	5c40      	ldrb	r0, [r0, r1]
 800b36a:	42b0      	cmp	r0, r6
 800b36c:	d0f6      	beq.n	800b35c <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 800b36e:	fa0b f206 	lsl.w	r2, fp, r6
 800b372:	429a      	cmp	r2, r3
 800b374:	dc07      	bgt.n	800b386 <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800b376:	6822      	ldr	r2, [r4, #0]
 800b378:	2109      	movs	r1, #9
 800b37a:	4620      	mov	r0, r4
 800b37c:	9301      	str	r3, [sp, #4]
 800b37e:	6151      	str	r1, [r2, #20]
 800b380:	6812      	ldr	r2, [r2, #0]
 800b382:	4790      	blx	r2
 800b384:	9b01      	ldr	r3, [sp, #4]
    code <<= 1;
 800b386:	005a      	lsls	r2, r3, #1
    si++;
 800b388:	3601      	adds	r6, #1
 800b38a:	e7d8      	b.n	800b33e <jpeg_make_d_derived_tbl+0xa2>
 800b38c:	1c68      	adds	r0, r5, #1
 800b38e:	f108 0204 	add.w	r2, r8, #4
 800b392:	f108 0c44 	add.w	ip, r8, #68	; 0x44
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800b396:	f04f 3eff 	mov.w	lr, #4294967295
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800b39a:	ae47      	add	r6, sp, #284	; 0x11c
    if (htbl->bits[l]) {
 800b39c:	f810 9b01 	ldrb.w	r9, [r0], #1
 800b3a0:	f1b9 0f00 	cmp.w	r9, #0
 800b3a4:	d029      	beq.n	800b3fa <jpeg_make_d_derived_tbl+0x15e>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800b3a6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800b3aa:	1a59      	subs	r1, r3, r1
      p += htbl->bits[l];
 800b3ac:	444b      	add	r3, r9
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800b3ae:	6491      	str	r1, [r2, #72]	; 0x48
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800b3b0:	1e59      	subs	r1, r3, #1
 800b3b2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800b3b6:	6011      	str	r1, [r2, #0]
  for (l = 1; l <= 16; l++) {
 800b3b8:	3204      	adds	r2, #4
 800b3ba:	4594      	cmp	ip, r2
 800b3bc:	d1ee      	bne.n	800b39c <jpeg_make_d_derived_tbl+0x100>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800b3be:	4b2d      	ldr	r3, [pc, #180]	; (800b474 <jpeg_make_d_derived_tbl+0x1d8>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800b3c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800b3ca:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800b3ce:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800b3d0:	f00e f972 	bl	80196b8 <memset>
  p = 0;
 800b3d4:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800b3d8:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800b3da:	5daa      	ldrb	r2, [r5, r6]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800b3dc:	2101      	movs	r1, #1
 800b3de:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800b3e0:	9201      	str	r2, [sp, #4]
 800b3e2:	f1c6 0208 	rsb	r2, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800b3e6:	fa01 fb02 	lsl.w	fp, r1, r2
 800b3ea:	9202      	str	r2, [sp, #8]
 800b3ec:	9a01      	ldr	r2, [sp, #4]
 800b3ee:	4452      	add	r2, sl
 800b3f0:	9204      	str	r2, [sp, #16]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800b3f2:	f105 0211 	add.w	r2, r5, #17
 800b3f6:	9205      	str	r2, [sp, #20]
 800b3f8:	e020      	b.n	800b43c <jpeg_make_d_derived_tbl+0x1a0>
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800b3fa:	f8c2 e000 	str.w	lr, [r2]
 800b3fe:	e7db      	b.n	800b3b8 <jpeg_make_d_derived_tbl+0x11c>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800b400:	9a02      	ldr	r2, [sp, #8]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800b402:	46dc      	mov	ip, fp
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800b404:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800b408:	4090      	lsls	r0, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800b40a:	9a05      	ldr	r2, [sp, #20]
 800b40c:	f812 1009 	ldrb.w	r1, [r2, r9]
 800b410:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800b414:	eb08 0282 	add.w	r2, r8, r2, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800b418:	f1bc 0c01 	subs.w	ip, ip, #1
	dtbl->look_nbits[lookbits] = l;
 800b41c:	f842 6b04 	str.w	r6, [r2], #4
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800b420:	d1fa      	bne.n	800b418 <jpeg_make_d_derived_tbl+0x17c>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800b422:	f1bb 0f00 	cmp.w	fp, #0
 800b426:	f500 6092 	add.w	r0, r0, #1168	; 0x490
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800b42a:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800b42e:	bfcc      	ite	gt
 800b430:	465a      	movgt	r2, fp
 800b432:	2201      	movle	r2, #1
 800b434:	4440      	add	r0, r8
 800b436:	f00e f93f 	bl	80196b8 <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800b43a:	ab47      	add	r3, sp, #284	; 0x11c
 800b43c:	9a04      	ldr	r2, [sp, #16]
 800b43e:	4591      	cmp	r9, r2
 800b440:	d1de      	bne.n	800b400 <jpeg_make_d_derived_tbl+0x164>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800b442:	3601      	adds	r6, #1
 800b444:	9a01      	ldr	r2, [sp, #4]
 800b446:	2e09      	cmp	r6, #9
 800b448:	4492      	add	sl, r2
 800b44a:	d1c6      	bne.n	800b3da <jpeg_make_d_derived_tbl+0x13e>
  if (isDC) {
 800b44c:	9b03      	ldr	r3, [sp, #12]
 800b44e:	b11b      	cbz	r3, 800b458 <jpeg_make_d_derived_tbl+0x1bc>
 800b450:	3511      	adds	r5, #17
 800b452:	442f      	add	r7, r5
    for (i = 0; i < numsymbols; i++) {
 800b454:	42af      	cmp	r7, r5
 800b456:	d103      	bne.n	800b460 <jpeg_make_d_derived_tbl+0x1c4>
}
 800b458:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800b45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int sym = htbl->huffval[i];
 800b460:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (sym < 0 || sym > 15)
 800b464:	2b0f      	cmp	r3, #15
 800b466:	d9f5      	bls.n	800b454 <jpeg_make_d_derived_tbl+0x1b8>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800b468:	6823      	ldr	r3, [r4, #0]
 800b46a:	4620      	mov	r0, r4
 800b46c:	615e      	str	r6, [r3, #20]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800b472:	e7ef      	b.n	800b454 <jpeg_make_d_derived_tbl+0x1b8>
 800b474:	000fffff 	.word	0x000fffff

0800b478 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800b478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800b47c:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800b480:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b482:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800b486:	f500 74aa 	add.w	r4, r0, #340	; 0x154
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800b48a:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 800b48e:	2d00      	cmp	r5, #0
 800b490:	f000 80b1 	beq.w	800b5f6 <start_pass_huff_decoder+0x17e>
    if (cinfo->Ss == 0) {
 800b494:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800b498:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800b49c:	b962      	cbnz	r2, 800b4b8 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800b49e:	b1a9      	cbz	r1, 800b4cc <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800b4a0:	f8da 3000 	ldr.w	r3, [sl]
 800b4a4:	2711      	movs	r7, #17
 800b4a6:	4650      	mov	r0, sl
 800b4a8:	625d      	str	r5, [r3, #36]	; 0x24
 800b4aa:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800b4ae:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4798      	blx	r3
 800b4b6:	e00f      	b.n	800b4d8 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800b4b8:	428a      	cmp	r2, r1
 800b4ba:	dcf1      	bgt.n	800b4a0 <start_pass_huff_decoder+0x28>
 800b4bc:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800b4c0:	428b      	cmp	r3, r1
 800b4c2:	dbed      	blt.n	800b4a0 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800b4c4:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d1e9      	bne.n	800b4a0 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800b4cc:	b116      	cbz	r6, 800b4d4 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800b4ce:	1e73      	subs	r3, r6, #1
 800b4d0:	42ab      	cmp	r3, r5
 800b4d2:	d1e5      	bne.n	800b4a0 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800b4d4:	2d0d      	cmp	r5, #13
 800b4d6:	dce3      	bgt.n	800b4a0 <start_pass_huff_decoder+0x28>
{
 800b4d8:	46a1      	mov	r9, r4
 800b4da:	2700      	movs	r7, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b4dc:	f8da 2150 	ldr.w	r2, [sl, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800b4e0:	f8da 3198 	ldr.w	r3, [sl, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b4e4:	42ba      	cmp	r2, r7
 800b4e6:	dc1e      	bgt.n	800b526 <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800b4e8:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800b4ec:	2a00      	cmp	r2, #0
 800b4ee:	d158      	bne.n	800b5a2 <start_pass_huff_decoder+0x12a>
      if (cinfo->Ss == 0)
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d154      	bne.n	800b59e <start_pass_huff_decoder+0x126>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800b4f4:	4bbb      	ldr	r3, [pc, #748]	; (800b7e4 <start_pass_huff_decoder+0x36c>)
{
 800b4f6:	2600      	movs	r6, #0
 800b4f8:	f10b 0714 	add.w	r7, fp, #20
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800b4fc:	f8cb 3004 	str.w	r3, [fp, #4]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800b500:	46b0      	mov	r8, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b502:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800b506:	42b3      	cmp	r3, r6
 800b508:	dc50      	bgt.n	800b5ac <start_pass_huff_decoder+0x134>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800b50a:	2300      	movs	r3, #0
 800b50c:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800b510:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800b512:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800b516:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800b51a:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800b51e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800b522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800b526:	f859 2b04 	ldr.w	r2, [r9], #4
 800b52a:	f8d2 8004 	ldr.w	r8, [r2, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800b52e:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 800b532:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800b536:	eb02 2608 	add.w	r6, r2, r8, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800b53a:	b173      	cbz	r3, 800b55a <start_pass_huff_decoder+0xe2>
 800b53c:	5853      	ldr	r3, [r2, r1]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	da0b      	bge.n	800b55a <start_pass_huff_decoder+0xe2>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800b542:	f8da 3000 	ldr.w	r3, [sl]
 800b546:	2276      	movs	r2, #118	; 0x76
 800b548:	f04f 31ff 	mov.w	r1, #4294967295
 800b54c:	4650      	mov	r0, sl
 800b54e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800b552:	2200      	movs	r2, #0
 800b554:	61da      	str	r2, [r3, #28]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b55a:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800b55e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800b562:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800b566:	42ab      	cmp	r3, r5
 800b568:	da01      	bge.n	800b56e <start_pass_huff_decoder+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b56a:	3701      	adds	r7, #1
 800b56c:	e7b6      	b.n	800b4dc <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800b56e:	6833      	ldr	r3, [r6, #0]
	if (cinfo->Ah != expected)
 800b570:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800b574:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800b578:	429a      	cmp	r2, r3
 800b57a:	d00a      	beq.n	800b592 <start_pass_huff_decoder+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800b57c:	f8da 3000 	ldr.w	r3, [sl]
 800b580:	2276      	movs	r2, #118	; 0x76
 800b582:	f04f 31ff 	mov.w	r1, #4294967295
 800b586:	4650      	mov	r0, sl
 800b588:	61dd      	str	r5, [r3, #28]
 800b58a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800b592:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b596:	3501      	adds	r5, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800b598:	f846 3b04 	str.w	r3, [r6], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b59c:	e7e1      	b.n	800b562 <start_pass_huff_decoder+0xea>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800b59e:	4b92      	ldr	r3, [pc, #584]	; (800b7e8 <start_pass_huff_decoder+0x370>)
 800b5a0:	e7a9      	b.n	800b4f6 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0)
 800b5a2:	b90b      	cbnz	r3, 800b5a8 <start_pass_huff_decoder+0x130>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800b5a4:	4b91      	ldr	r3, [pc, #580]	; (800b7ec <start_pass_huff_decoder+0x374>)
 800b5a6:	e7a6      	b.n	800b4f6 <start_pass_huff_decoder+0x7e>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800b5a8:	4b91      	ldr	r3, [pc, #580]	; (800b7f0 <start_pass_huff_decoder+0x378>)
 800b5aa:	e7a4      	b.n	800b4f6 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800b5ac:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800b5b0:	f854 3b04 	ldr.w	r3, [r4], #4
      if (cinfo->Ss == 0) {
 800b5b4:	b97a      	cbnz	r2, 800b5d6 <start_pass_huff_decoder+0x15e>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800b5b6:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800b5ba:	b942      	cbnz	r2, 800b5ce <start_pass_huff_decoder+0x156>
	  tbl = compptr->dc_tbl_no;
 800b5bc:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800b5be:	2101      	movs	r1, #1
 800b5c0:	4650      	mov	r0, sl
 800b5c2:	f102 030b 	add.w	r3, r2, #11
 800b5c6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800b5ca:	f7ff fe67 	bl	800b29c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b5ce:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800b5d0:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b5d4:	e795      	b.n	800b502 <start_pass_huff_decoder+0x8a>
	tbl = compptr->ac_tbl_no;
 800b5d6:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800b5d8:	2100      	movs	r1, #0
 800b5da:	4650      	mov	r0, sl
 800b5dc:	f105 030b 	add.w	r3, r5, #11
 800b5e0:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800b5e2:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800b5e6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800b5ea:	f7ff fe57 	bl	800b29c <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800b5ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b5f0:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800b5f4:	e7eb      	b.n	800b5ce <start_pass_huff_decoder+0x156>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800b5f6:	b982      	cbnz	r2, 800b61a <start_pass_huff_decoder+0x1a2>
 800b5f8:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800b5fc:	b96b      	cbnz	r3, 800b61a <start_pass_huff_decoder+0x1a2>
 800b5fe:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800b602:	b953      	cbnz	r3, 800b61a <start_pass_huff_decoder+0x1a2>
 800b604:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 800b608:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800b60c:	b90a      	cbnz	r2, 800b612 <start_pass_huff_decoder+0x19a>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800b60e:	2b3f      	cmp	r3, #63	; 0x3f
 800b610:	dc0c      	bgt.n	800b62c <start_pass_huff_decoder+0x1b4>
 800b612:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800b616:	429a      	cmp	r2, r3
 800b618:	d008      	beq.n	800b62c <start_pass_huff_decoder+0x1b4>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800b61a:	f8da 3000 	ldr.w	r3, [sl]
 800b61e:	227d      	movs	r2, #125	; 0x7d
 800b620:	f04f 31ff 	mov.w	r1, #4294967295
 800b624:	4650      	mov	r0, sl
 800b626:	615a      	str	r2, [r3, #20]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800b62c:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800b630:	2600      	movs	r6, #0
 800b632:	4b70      	ldr	r3, [pc, #448]	; (800b7f4 <start_pass_huff_decoder+0x37c>)
 800b634:	f10b 0714 	add.w	r7, fp, #20
 800b638:	4a6f      	ldr	r2, [pc, #444]	; (800b7f8 <start_pass_huff_decoder+0x380>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800b63a:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800b63c:	293f      	cmp	r1, #63	; 0x3f
 800b63e:	bf08      	it	eq
 800b640:	4613      	moveq	r3, r2
 800b642:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b646:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800b64a:	42b3      	cmp	r3, r6
 800b64c:	dc3c      	bgt.n	800b6c8 <start_pass_huff_decoder+0x250>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b64e:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800b652:	f10b 0160 	add.w	r1, fp, #96	; 0x60
 800b656:	f50a 76b8 	add.w	r6, sl, #368	; 0x170
 800b65a:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800b65e:	4f67      	ldr	r7, [pc, #412]	; (800b7fc <start_pass_huff_decoder+0x384>)
	  entropy->coef_limit[blkn] = 1;
 800b660:	f04f 0801 	mov.w	r8, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b664:	42a8      	cmp	r0, r5
 800b666:	f77f af53 	ble.w	800b510 <start_pass_huff_decoder+0x98>
      ci = cinfo->MCU_membership[blkn];
 800b66a:	f856 3b04 	ldr.w	r3, [r6], #4
      compptr = cinfo->cur_comp_info[ci];
 800b66e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800b672:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800b676:	6953      	ldr	r3, [r2, #20]
 800b678:	3310      	adds	r3, #16
 800b67a:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800b67e:	f841 3b04 	str.w	r3, [r1], #4
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800b682:	6993      	ldr	r3, [r2, #24]
 800b684:	3314      	adds	r3, #20
 800b686:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800b68a:	624b      	str	r3, [r1, #36]	; 0x24
      if (compptr->component_needed) {
 800b68c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d052      	beq.n	800b738 <start_pass_huff_decoder+0x2c0>
	switch (cinfo->lim_Se) {
 800b692:	f8da 41b0 	ldr.w	r4, [sl, #432]	; 0x1b0
 800b696:	2c0f      	cmp	r4, #15
	i = compptr->DCT_h_scaled_size;
 800b698:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800b69c:	d075      	beq.n	800b78a <start_pass_huff_decoder+0x312>
 800b69e:	dc30      	bgt.n	800b702 <start_pass_huff_decoder+0x28a>
 800b6a0:	2c03      	cmp	r4, #3
 800b6a2:	d04f      	beq.n	800b744 <start_pass_huff_decoder+0x2cc>
 800b6a4:	2c08      	cmp	r4, #8
 800b6a6:	d05d      	beq.n	800b764 <start_pass_huff_decoder+0x2ec>
 800b6a8:	2c00      	cmp	r4, #0
 800b6aa:	d047      	beq.n	800b73c <start_pass_huff_decoder+0x2c4>
	  if (ci <= 0 || ci > 8) ci = 8;
 800b6ac:	1e5c      	subs	r4, r3, #1
 800b6ae:	2c08      	cmp	r4, #8
	  if (i <= 0 || i > 8) i = 8;
 800b6b0:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800b6b4:	bf28      	it	cs
 800b6b6:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800b6b8:	2c08      	cmp	r4, #8
 800b6ba:	bf28      	it	cs
 800b6bc:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800b6be:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b6c2:	4b4f      	ldr	r3, [pc, #316]	; (800b800 <start_pass_huff_decoder+0x388>)
 800b6c4:	3a09      	subs	r2, #9
 800b6c6:	e04a      	b.n	800b75e <start_pass_huff_decoder+0x2e6>
      compptr = cinfo->cur_comp_info[ci];
 800b6c8:	f854 9b04 	ldr.w	r9, [r4], #4
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800b6d0:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800b6d4:	f102 0310 	add.w	r3, r2, #16
 800b6d8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800b6dc:	f7ff fdde 	bl	800b29c <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800b6e0:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800b6e4:	b14b      	cbz	r3, 800b6fa <start_pass_huff_decoder+0x282>
	tbl = compptr->ac_tbl_no;
 800b6e6:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	4650      	mov	r0, sl
 800b6ee:	f102 0314 	add.w	r3, r2, #20
 800b6f2:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800b6f6:	f7ff fdd1 	bl	800b29c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b6fa:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800b6fc:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b700:	e7a1      	b.n	800b646 <start_pass_huff_decoder+0x1ce>
	switch (cinfo->lim_Se) {
 800b702:	2c23      	cmp	r4, #35	; 0x23
 800b704:	f103 3eff 	add.w	lr, r3, #4294967295
 800b708:	f102 39ff 	add.w	r9, r2, #4294967295
 800b70c:	d04b      	beq.n	800b7a6 <start_pass_huff_decoder+0x32e>
 800b70e:	2c30      	cmp	r4, #48	; 0x30
 800b710:	d057      	beq.n	800b7c2 <start_pass_huff_decoder+0x34a>
 800b712:	2c18      	cmp	r4, #24
 800b714:	d1ca      	bne.n	800b6ac <start_pass_huff_decoder+0x234>
	  if (ci <= 0 || ci > 5) ci = 5;
 800b716:	f1be 0f05 	cmp.w	lr, #5
 800b71a:	bf28      	it	cs
 800b71c:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800b71e:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800b722:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800b726:	bf28      	it	cs
 800b728:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800b72a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b72e:	3a01      	subs	r2, #1
 800b730:	4413      	add	r3, r2
 800b732:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800b736:	3301      	adds	r3, #1
	entropy->coef_limit[blkn] = 0;
 800b738:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b73a:	e001      	b.n	800b740 <start_pass_huff_decoder+0x2c8>
	  entropy->coef_limit[blkn] = 1;
 800b73c:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b740:	3501      	adds	r5, #1
 800b742:	e78f      	b.n	800b664 <start_pass_huff_decoder+0x1ec>
	  if (ci <= 0 || ci > 2) ci = 2;
 800b744:	1e5c      	subs	r4, r3, #1
 800b746:	2c02      	cmp	r4, #2
	  if (i <= 0 || i > 2) i = 2;
 800b748:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800b74c:	bf28      	it	cs
 800b74e:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800b750:	2c02      	cmp	r4, #2
 800b752:	bf28      	it	cs
 800b754:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800b756:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800b75a:	4b2a      	ldr	r3, [pc, #168]	; (800b804 <start_pass_huff_decoder+0x38c>)
 800b75c:	3a03      	subs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800b75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b762:	e7e8      	b.n	800b736 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 3) ci = 3;
 800b764:	1e5c      	subs	r4, r3, #1
 800b766:	2c03      	cmp	r4, #3
	  if (i <= 0 || i > 3) i = 3;
 800b768:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800b76c:	bf28      	it	cs
 800b76e:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800b770:	2c03      	cmp	r4, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800b772:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800b776:	bf28      	it	cs
 800b778:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800b77a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b77e:	3a01      	subs	r2, #1
 800b780:	4413      	add	r3, r2
 800b782:	4a21      	ldr	r2, [pc, #132]	; (800b808 <start_pass_huff_decoder+0x390>)
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800b784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b788:	e7d5      	b.n	800b736 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 4) ci = 4;
 800b78a:	1e5c      	subs	r4, r3, #1
 800b78c:	2c04      	cmp	r4, #4
	  if (i <= 0 || i > 4) i = 4;
 800b78e:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800b792:	bf28      	it	cs
 800b794:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800b796:	2c04      	cmp	r4, #4
 800b798:	bf28      	it	cs
 800b79a:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800b79c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b7a0:	4b1a      	ldr	r3, [pc, #104]	; (800b80c <start_pass_huff_decoder+0x394>)
 800b7a2:	3a05      	subs	r2, #5
 800b7a4:	e7db      	b.n	800b75e <start_pass_huff_decoder+0x2e6>
	  if (ci <= 0 || ci > 6) ci = 6;
 800b7a6:	f1be 0f06 	cmp.w	lr, #6
 800b7aa:	bf28      	it	cs
 800b7ac:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800b7ae:	f1b9 0f06 	cmp.w	r9, #6
 800b7b2:	bf28      	it	cs
 800b7b4:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	3a01      	subs	r2, #1
 800b7ba:	fb0c 2303 	mla	r3, ip, r3, r2
 800b7be:	4a14      	ldr	r2, [pc, #80]	; (800b810 <start_pass_huff_decoder+0x398>)
 800b7c0:	e7e0      	b.n	800b784 <start_pass_huff_decoder+0x30c>
	  if (ci <= 0 || ci > 7) ci = 7;
 800b7c2:	f1be 0f07 	cmp.w	lr, #7
 800b7c6:	bf28      	it	cs
 800b7c8:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800b7ca:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800b7ce:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800b7d2:	bf28      	it	cs
 800b7d4:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800b7d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b7da:	3a01      	subs	r2, #1
 800b7dc:	4413      	add	r3, r2
 800b7de:	4a0d      	ldr	r2, [pc, #52]	; (800b814 <start_pass_huff_decoder+0x39c>)
 800b7e0:	e7d0      	b.n	800b784 <start_pass_huff_decoder+0x30c>
 800b7e2:	bf00      	nop
 800b7e4:	0800a6d9 	.word	0x0800a6d9
 800b7e8:	0800a84d 	.word	0x0800a84d
 800b7ec:	0800a9ad 	.word	0x0800a9ad
 800b7f0:	0800aa41 	.word	0x0800aa41
 800b7f4:	0800acc9 	.word	0x0800acc9
 800b7f8:	0800afb9 	.word	0x0800afb9
 800b7fc:	080f9ccc 	.word	0x080f9ccc
 800b800:	080f9b58 	.word	0x080f9b58
 800b804:	080f9c58 	.word	0x080f9c58
 800b808:	080f9c68 	.word	0x080f9c68
 800b80c:	080f9c8c 	.word	0x080f9c8c
 800b810:	080f9d30 	.word	0x080f9d30
 800b814:	080f9dc0 	.word	0x080f9dc0

0800b818 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800b818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b81a:	6843      	ldr	r3, [r0, #4]
 800b81c:	22d8      	movs	r2, #216	; 0xd8
 800b81e:	2101      	movs	r1, #1
{
 800b820:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800b826:	4b17      	ldr	r3, [pc, #92]	; (800b884 <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800b828:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b82c:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800b82e:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800b830:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800b834:	b943      	cbnz	r3, 800b848 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800b836:	6503      	str	r3, [r0, #80]	; 0x50
 800b838:	6403      	str	r3, [r0, #64]	; 0x40
 800b83a:	6543      	str	r3, [r0, #84]	; 0x54
 800b83c:	6443      	str	r3, [r0, #68]	; 0x44
 800b83e:	6583      	str	r3, [r0, #88]	; 0x58
 800b840:	6483      	str	r3, [r0, #72]	; 0x48
 800b842:	65c3      	str	r3, [r0, #92]	; 0x5c
 800b844:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800b846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b848:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b84a:	2101      	movs	r1, #1
 800b84c:	686b      	ldr	r3, [r5, #4]
 800b84e:	4628      	mov	r0, r5
 800b850:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800b852:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4798      	blx	r3
 800b858:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800b85a:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800b85e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b860:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800b864:	42b3      	cmp	r3, r6
 800b866:	dc05      	bgt.n	800b874 <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 800b868:	2300      	movs	r3, #0
 800b86a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800b86e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800b872:	e7e8      	b.n	800b846 <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800b874:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b878:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800b87a:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800b87c:	f00d ff1c 	bl	80196b8 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800b880:	e7ed      	b.n	800b85e <jinit_huff_decoder+0x46>
 800b882:	bf00      	nop
 800b884:	0800b479 	.word	0x0800b479

0800b888 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800b888:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800b88c:	4a01      	ldr	r2, [pc, #4]	; (800b894 <finish_input_pass+0xc>)
 800b88e:	601a      	str	r2, [r3, #0]
}
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	0800ba51 	.word	0x0800ba51

0800b898 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800b898:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800b89a:	4a0a      	ldr	r2, [pc, #40]	; (800b8c4 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800b89c:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800b89e:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800b8a2:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800b8a4:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800b8a6:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800b8a8:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800b8ac:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800b8ae:	6803      	ldr	r3, [r0, #0]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800b8b4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800b8be:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800b8c2:	bd38      	pop	{r3, r4, r5, pc}
 800b8c4:	0800ba51 	.word	0x0800ba51

0800b8c8 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800b8c8:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800b8cc:	2a01      	cmp	r2, #1
{
 800b8ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	f500 76aa 	add.w	r6, r0, #340	; 0x154
  if (cinfo->comps_in_scan == 1) {
 800b8d8:	d135      	bne.n	800b946 <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800b8da:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800b8de:	69d9      	ldr	r1, [r3, #28]
 800b8e0:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800b8e4:	6a19      	ldr	r1, [r3, #32]
 800b8e6:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800b8ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 800b8ec:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800b8ee:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800b8f2:	68d8      	ldr	r0, [r3, #12]
 800b8f4:	fbb1 f5f0 	udiv	r5, r1, r0
 800b8f8:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800b8fc:	2900      	cmp	r1, #0
 800b8fe:	bf08      	it	eq
 800b900:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800b902:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800b906:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800b908:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800b90a:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800b90e:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800b912:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b914:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800b916:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b91a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b91e:	429f      	cmp	r7, r3
 800b920:	db71      	blt.n	800ba06 <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800b922:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800b926:	4620      	mov	r0, r4
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800b92c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800b930:	4620      	mov	r0, r4
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800b936:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800b93a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800b93e:	6852      	ldr	r2, [r2, #4]
 800b940:	601a      	str	r2, [r3, #0]
}
 800b942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800b946:	1e53      	subs	r3, r2, #1
 800b948:	2b03      	cmp	r3, #3
 800b94a:	d907      	bls.n	800b95c <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800b94c:	6803      	ldr	r3, [r0, #0]
 800b94e:	211b      	movs	r1, #27
 800b950:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800b954:	2204      	movs	r2, #4
 800b956:	61da      	str	r2, [r3, #28]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800b95c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800b960:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800b962:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800b966:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800b968:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800b96a:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800b96e:	4359      	muls	r1, r3
 800b970:	f009 fdd4 	bl	801551c <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800b974:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800b978:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800b97c:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800b980:	4359      	muls	r1, r3
 800b982:	6a20      	ldr	r0, [r4, #32]
 800b984:	f009 fdca 	bl	801551c <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800b988:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800b98c:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b990:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b994:	429d      	cmp	r5, r3
 800b996:	dabc      	bge.n	800b912 <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800b998:	f858 3b04 	ldr.w	r3, [r8], #4
      compptr->MCU_width = compptr->h_samp_factor;
 800b99c:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800b99e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800b9a0:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800b9a2:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800b9a4:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800b9a8:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800b9aa:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800b9ac:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800b9ae:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800b9b0:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800b9b2:	fbb2 fcf1 	udiv	ip, r2, r1
 800b9b6:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800b9ba:	2a00      	cmp	r2, #0
 800b9bc:	bf08      	it	eq
 800b9be:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800b9c0:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800b9c2:	6a1a      	ldr	r2, [r3, #32]
 800b9c4:	fbb2 f1f0 	udiv	r1, r2, r0
 800b9c8:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800b9cc:	2a00      	cmp	r2, #0
 800b9ce:	bf08      	it	eq
 800b9d0:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800b9d2:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800b9d4:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800b9d8:	443b      	add	r3, r7
 800b9da:	2b0a      	cmp	r3, #10
 800b9dc:	dd05      	ble.n	800b9ea <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800b9de:	6823      	ldr	r3, [r4, #0]
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	f8c3 9014 	str.w	r9, [r3, #20]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4798      	blx	r3
      while (mcublks-- > 0) {
 800b9ea:	2f00      	cmp	r7, #0
 800b9ec:	dc01      	bgt.n	800b9f2 <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b9ee:	3501      	adds	r5, #1
 800b9f0:	e7ce      	b.n	800b990 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800b9f2:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800b9f6:	3f01      	subs	r7, #1
 800b9f8:	1c5a      	adds	r2, r3, #1
 800b9fa:	335c      	adds	r3, #92	; 0x5c
 800b9fc:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800ba00:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800ba04:	e7f1      	b.n	800b9ea <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800ba06:	f859 6b04 	ldr.w	r6, [r9], #4
    if (compptr->quant_table != NULL)
 800ba0a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ba0c:	b9eb      	cbnz	r3, 800ba4a <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800ba0e:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800ba10:	2a03      	cmp	r2, #3
 800ba12:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800ba16:	d803      	bhi.n	800ba20 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800ba18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	b92b      	cbnz	r3, 800ba2c <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	4620      	mov	r0, r4
 800ba24:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ba2c:	6863      	ldr	r3, [r4, #4]
 800ba2e:	2284      	movs	r2, #132	; 0x84
 800ba30:	2101      	movs	r1, #1
 800ba32:	4620      	mov	r0, r4
 800ba34:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800ba36:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ba3a:	4798      	blx	r3
 800ba3c:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800ba3e:	2284      	movs	r2, #132	; 0x84
 800ba40:	6869      	ldr	r1, [r5, #4]
 800ba42:	f00d fe2b 	bl	801969c <memcpy>
    compptr->quant_table = qtbl;
 800ba46:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ba4a:	3701      	adds	r7, #1
 800ba4c:	e765      	b.n	800b91a <start_input_pass+0x52>
	...

0800ba50 <consume_markers>:
{
 800ba50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800ba54:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800ba58:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800ba5a:	6973      	ldr	r3, [r6, #20]
 800ba5c:	b9eb      	cbnz	r3, 800ba9a <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800ba5e:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800ba62:	4db0      	ldr	r5, [pc, #704]	; (800bd24 <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800ba64:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ba68:	4620      	mov	r0, r4
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	4798      	blx	r3
    switch (val) {
 800ba6e:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800ba70:	4607      	mov	r7, r0
    switch (val) {
 800ba72:	d016      	beq.n	800baa2 <consume_markers+0x52>
 800ba74:	2802      	cmp	r0, #2
 800ba76:	d111      	bne.n	800ba9c <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800ba7c:	69b3      	ldr	r3, [r6, #24]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 8174 	beq.w	800bd6c <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 800ba84:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	b133      	cbz	r3, 800ba9a <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800ba8c:	6823      	ldr	r3, [r4, #0]
 800ba8e:	223d      	movs	r2, #61	; 0x3d
 800ba90:	4620      	mov	r0, r4
 800ba92:	615a      	str	r2, [r3, #20]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4798      	blx	r3
 800ba98:	e000      	b.n	800ba9c <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800ba9a:	2702      	movs	r7, #2
}
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800baa2:	69b3      	ldr	r3, [r6, #24]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f000 8150 	beq.w	800bd4a <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 800baaa:	2b01      	cmp	r3, #1
 800baac:	f040 80d8 	bne.w	800bc60 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800bab0:	6a22      	ldr	r2, [r4, #32]
 800bab2:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800bab6:	429a      	cmp	r2, r3
 800bab8:	dc02      	bgt.n	800bac0 <consume_markers+0x70>
 800baba:	69e2      	ldr	r2, [r4, #28]
 800babc:	429a      	cmp	r2, r3
 800babe:	dd08      	ble.n	800bad2 <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	212a      	movs	r1, #42	; 0x2a
 800bac4:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800bac8:	4620      	mov	r0, r4
 800baca:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800bad2:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800bad6:	2a08      	cmp	r2, #8
 800bad8:	d006      	beq.n	800bae8 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	2110      	movs	r1, #16
 800bade:	4620      	mov	r0, r4
 800bae0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800bae8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800baea:	2a0a      	cmp	r2, #10
 800baec:	dd08      	ble.n	800bb00 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800baee:	6823      	ldr	r3, [r4, #0]
 800baf0:	211b      	movs	r1, #27
 800baf2:	4620      	mov	r0, r4
 800baf4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800baf8:	220a      	movs	r2, #10
 800bafa:	61da      	str	r2, [r3, #28]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bb00:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800bb04:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800bb08:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800bb0c:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bb10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb12:	459a      	cmp	sl, r3
 800bb14:	db0d      	blt.n	800bb32 <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800bb16:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800bb1a:	b92b      	cbnz	r3, 800bb28 <consume_markers+0xd8>
 800bb1c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800bb20:	b383      	cbz	r3, 800bb84 <consume_markers+0x134>
 800bb22:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800bb26:	b36b      	cbz	r3, 800bb84 <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800bb28:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800bb2a:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800bb2e:	233f      	movs	r3, #63	; 0x3f
 800bb30:	e071      	b.n	800bc16 <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800bb32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb36:	3b01      	subs	r3, #1
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d804      	bhi.n	800bb46 <consume_markers+0xf6>
 800bb3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb40:	3b01      	subs	r3, #1
 800bb42:	2b03      	cmp	r3, #3
 800bb44:	d905      	bls.n	800bb52 <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800bb46:	6823      	ldr	r3, [r4, #0]
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f8c3 b014 	str.w	fp, [r3, #20]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800bb52:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800bb56:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800bb5a:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800bb5e:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800bb62:	429a      	cmp	r2, r3
 800bb64:	bfac      	ite	ge
 800bb66:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800bb6a:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800bb6e:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800bb72:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	bfac      	ite	ge
 800bb7a:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800bb7e:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800bb82:	e7c5      	b.n	800bb10 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800bb84:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800bb88:	2b50      	cmp	r3, #80	; 0x50
 800bb8a:	f000 808a 	beq.w	800bca2 <consume_markers+0x252>
 800bb8e:	dc2b      	bgt.n	800bbe8 <consume_markers+0x198>
 800bb90:	2b18      	cmp	r3, #24
 800bb92:	d078      	beq.n	800bc86 <consume_markers+0x236>
 800bb94:	dc1d      	bgt.n	800bbd2 <consume_markers+0x182>
 800bb96:	2b08      	cmp	r3, #8
 800bb98:	d070      	beq.n	800bc7c <consume_markers+0x22c>
 800bb9a:	dc13      	bgt.n	800bbc4 <consume_markers+0x174>
 800bb9c:	b3bb      	cbz	r3, 800bc0e <consume_markers+0x1be>
 800bb9e:	2b03      	cmp	r3, #3
 800bba0:	d065      	beq.n	800bc6e <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800bba2:	6822      	ldr	r2, [r4, #0]
 800bba4:	2111      	movs	r1, #17
 800bba6:	4620      	mov	r0, r4
 800bba8:	6151      	str	r1, [r2, #20]
 800bbaa:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800bbae:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800bbb2:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800bbb6:	6213      	str	r3, [r2, #32]
 800bbb8:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800bbbc:	6253      	str	r3, [r2, #36]	; 0x24
 800bbbe:	6813      	ldr	r3, [r2, #0]
 800bbc0:	4798      	blx	r3
      break;
 800bbc2:	e02a      	b.n	800bc1a <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800bbc4:	2b0f      	cmp	r3, #15
 800bbc6:	d1ec      	bne.n	800bba2 <consume_markers+0x152>
      cinfo->block_size = 4;
 800bbc8:	2204      	movs	r2, #4
 800bbca:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800bbce:	4a56      	ldr	r2, [pc, #344]	; (800bd28 <consume_markers+0x2d8>)
 800bbd0:	e051      	b.n	800bc76 <consume_markers+0x226>
    switch (cinfo->Se) {
 800bbd2:	2b30      	cmp	r3, #48	; 0x30
 800bbd4:	d05c      	beq.n	800bc90 <consume_markers+0x240>
 800bbd6:	2b3f      	cmp	r3, #63	; 0x3f
 800bbd8:	d05f      	beq.n	800bc9a <consume_markers+0x24a>
 800bbda:	2b23      	cmp	r3, #35	; 0x23
 800bbdc:	d1e1      	bne.n	800bba2 <consume_markers+0x152>
      cinfo->block_size = 6;
 800bbde:	2206      	movs	r2, #6
 800bbe0:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800bbe4:	4a51      	ldr	r2, [pc, #324]	; (800bd2c <consume_markers+0x2dc>)
 800bbe6:	e046      	b.n	800bc76 <consume_markers+0x226>
    switch (cinfo->Se) {
 800bbe8:	2ba8      	cmp	r3, #168	; 0xa8
 800bbea:	d060      	beq.n	800bcae <consume_markers+0x25e>
 800bbec:	dc07      	bgt.n	800bbfe <consume_markers+0x1ae>
 800bbee:	2b78      	cmp	r3, #120	; 0x78
 800bbf0:	d059      	beq.n	800bca6 <consume_markers+0x256>
 800bbf2:	2b8f      	cmp	r3, #143	; 0x8f
 800bbf4:	d059      	beq.n	800bcaa <consume_markers+0x25a>
 800bbf6:	2b63      	cmp	r3, #99	; 0x63
 800bbf8:	d1d3      	bne.n	800bba2 <consume_markers+0x152>
      cinfo->block_size = 10;
 800bbfa:	230a      	movs	r3, #10
 800bbfc:	e795      	b.n	800bb2a <consume_markers+0xda>
    switch (cinfo->Se) {
 800bbfe:	2be0      	cmp	r3, #224	; 0xe0
 800bc00:	d057      	beq.n	800bcb2 <consume_markers+0x262>
 800bc02:	2bff      	cmp	r3, #255	; 0xff
 800bc04:	d057      	beq.n	800bcb6 <consume_markers+0x266>
 800bc06:	2bc3      	cmp	r3, #195	; 0xc3
 800bc08:	d1cb      	bne.n	800bba2 <consume_markers+0x152>
      cinfo->block_size = 14;
 800bc0a:	230e      	movs	r3, #14
 800bc0c:	e78d      	b.n	800bb2a <consume_markers+0xda>
      cinfo->block_size = 1;
 800bc0e:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800bc12:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800bc16:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bc1a:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800bc1e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bc22:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800bc26:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800bc28:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bc2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800bc2e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bc32:	459a      	cmp	sl, r3
 800bc34:	db41      	blt.n	800bcba <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800bc36:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800bc3a:	6a20      	ldr	r0, [r4, #32]
 800bc3c:	4359      	muls	r1, r3
 800bc3e:	f009 fc6d 	bl	801551c <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800bc42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc44:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800bc48:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800bc52:	db03      	blt.n	800bc5c <consume_markers+0x20c>
 800bc54:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	d071      	beq.n	800bd40 <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800bc5c:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800bc60:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d16d      	bne.n	800bd44 <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 800bc68:	2302      	movs	r3, #2
 800bc6a:	61b3      	str	r3, [r6, #24]
	  break;
 800bc6c:	e6fa      	b.n	800ba64 <consume_markers+0x14>
      cinfo->block_size = 2;
 800bc6e:	2202      	movs	r2, #2
 800bc70:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800bc74:	4a2e      	ldr	r2, [pc, #184]	; (800bd30 <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 800bc76:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800bc7a:	e7cc      	b.n	800bc16 <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800bc7c:	2203      	movs	r2, #3
 800bc7e:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800bc82:	4a2c      	ldr	r2, [pc, #176]	; (800bd34 <consume_markers+0x2e4>)
 800bc84:	e7f7      	b.n	800bc76 <consume_markers+0x226>
      cinfo->block_size = 5;
 800bc86:	2205      	movs	r2, #5
 800bc88:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800bc8c:	4a2a      	ldr	r2, [pc, #168]	; (800bd38 <consume_markers+0x2e8>)
 800bc8e:	e7f2      	b.n	800bc76 <consume_markers+0x226>
      cinfo->block_size = 7;
 800bc90:	2207      	movs	r2, #7
 800bc92:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800bc96:	4a29      	ldr	r2, [pc, #164]	; (800bd3c <consume_markers+0x2ec>)
 800bc98:	e7ed      	b.n	800bc76 <consume_markers+0x226>
      cinfo->block_size = 8;
 800bc9a:	2208      	movs	r2, #8
 800bc9c:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800bca0:	e7b7      	b.n	800bc12 <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800bca2:	2309      	movs	r3, #9
 800bca4:	e741      	b.n	800bb2a <consume_markers+0xda>
      cinfo->block_size = 11;
 800bca6:	230b      	movs	r3, #11
 800bca8:	e73f      	b.n	800bb2a <consume_markers+0xda>
      cinfo->block_size = 12;
 800bcaa:	230c      	movs	r3, #12
 800bcac:	e73d      	b.n	800bb2a <consume_markers+0xda>
      cinfo->block_size = 13;
 800bcae:	230d      	movs	r3, #13
 800bcb0:	e73b      	b.n	800bb2a <consume_markers+0xda>
      cinfo->block_size = 15;
 800bcb2:	230f      	movs	r3, #15
 800bcb4:	e739      	b.n	800bb2a <consume_markers+0xda>
      cinfo->block_size = 16;
 800bcb6:	2310      	movs	r3, #16
 800bcb8:	e737      	b.n	800bb2a <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800bcba:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800bcbe:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800bcc2:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800bcc6:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800bcca:	69e3      	ldr	r3, [r4, #28]
 800bccc:	4351      	muls	r1, r2
 800bcce:	4358      	muls	r0, r3
 800bcd0:	f009 fc24 	bl	801551c <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800bcd4:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800bcd8:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800bcdc:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800bce0:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800bce2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800bce6:	4358      	muls	r0, r3
 800bce8:	4351      	muls	r1, r2
 800bcea:	f009 fc17 	bl	801551c <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800bcee:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800bcf2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800bcf6:	69e3      	ldr	r3, [r4, #28]
 800bcf8:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800bcfc:	4358      	muls	r0, r3
 800bcfe:	f009 fc0d 	bl	801551c <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800bd02:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800bd06:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800bd0a:	6a23      	ldr	r3, [r4, #32]
 800bd0c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800bd10:	4358      	muls	r0, r3
 800bd12:	f009 fc03 	bl	801551c <jdiv_round_up>
    compptr->quant_table = NULL;
 800bd16:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800bd1a:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800bd1e:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800bd22:	e783      	b.n	800bc2c <consume_markers+0x1dc>
 800bd24:	080fb3f0 	.word	0x080fb3f0
 800bd28:	080fb5e4 	.word	0x080fb5e4
 800bd2c:	080fb708 	.word	0x080fb708
 800bd30:	080fb530 	.word	0x080fb530
 800bd34:	080fb580 	.word	0x080fb580
 800bd38:	080fb664 	.word	0x080fb664
 800bd3c:	080fb7d8 	.word	0x080fb7d8
    cinfo->inputctl->has_multiple_scans = FALSE;
 800bd40:	611a      	str	r2, [r3, #16]
 800bd42:	e78d      	b.n	800bc60 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	61b3      	str	r3, [r6, #24]
 800bd48:	e6a8      	b.n	800ba9c <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 800bd4a:	6933      	ldr	r3, [r6, #16]
 800bd4c:	b92b      	cbnz	r3, 800bd5a <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	2224      	movs	r2, #36	; 0x24
 800bd52:	4620      	mov	r0, r4
 800bd54:	615a      	str	r2, [r3, #20]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800bd5a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f43f ae80 	beq.w	800ba64 <consume_markers+0x14>
	start_input_pass(cinfo);
 800bd64:	4620      	mov	r0, r4
 800bd66:	f7ff fdaf 	bl	800b8c8 <start_input_pass>
 800bd6a:	e697      	b.n	800ba9c <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800bd6c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bd70:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800bd74:	429a      	cmp	r2, r3
 800bd76:	f77f ae90 	ble.w	800ba9a <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800bd7a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800bd7e:	e68d      	b.n	800ba9c <consume_markers+0x4c>

0800bd80 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800bd80:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800bd84:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800bd86:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bd88:	434a      	muls	r2, r1
 800bd8a:	429a      	cmp	r2, r3
{
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800bd90:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800bd92:	d80c      	bhi.n	800bdae <jpeg_core_output_dimensions+0x2e>
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800bd94:	f009 fbc2 	bl	801551c <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800bd98:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800bd9c:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800bd9e:	6a20      	ldr	r0, [r4, #32]
 800bda0:	f009 fbbc 	bl	801551c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 1;
 800bda4:	2301      	movs	r3, #1
    cinfo->output_height = (JDIMENSION)
 800bda6:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 16;
 800bda8:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 800bdac:	e059      	b.n	800be62 <jpeg_core_output_dimensions+0xe2>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800bdae:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800bdb2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800bdb6:	d80c      	bhi.n	800bdd2 <jpeg_core_output_dimensions+0x52>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800bdb8:	0040      	lsls	r0, r0, #1
 800bdba:	f009 fbaf 	bl	801551c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800bdbe:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800bdc0:	6a20      	ldr	r0, [r4, #32]
 800bdc2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800bdc6:	0040      	lsls	r0, r0, #1
 800bdc8:	f009 fba8 	bl	801551c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 2;
 800bdcc:	2302      	movs	r3, #2
    cinfo->output_height = (JDIMENSION)
 800bdce:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800bdd0:	e7ea      	b.n	800bda8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800bdd2:	441d      	add	r5, r3
 800bdd4:	42aa      	cmp	r2, r5
 800bdd6:	d80e      	bhi.n	800bdf6 <jpeg_core_output_dimensions+0x76>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800bdd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800bddc:	f009 fb9e 	bl	801551c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800bde0:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800bde2:	6a20      	ldr	r0, [r4, #32]
 800bde4:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800bde8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800bdec:	f009 fb96 	bl	801551c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 3;
 800bdf0:	2303      	movs	r3, #3
    cinfo->output_height = (JDIMENSION)
 800bdf2:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800bdf4:	e7d8      	b.n	800bda8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800bdf6:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800bdfa:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800bdfe:	d80c      	bhi.n	800be1a <jpeg_core_output_dimensions+0x9a>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800be00:	0080      	lsls	r0, r0, #2
 800be02:	f009 fb8b 	bl	801551c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800be06:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800be08:	6a20      	ldr	r0, [r4, #32]
 800be0a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800be0e:	0080      	lsls	r0, r0, #2
 800be10:	f009 fb84 	bl	801551c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 4;
 800be14:	2304      	movs	r3, #4
    cinfo->output_height = (JDIMENSION)
 800be16:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800be18:	e7c6      	b.n	800bda8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800be1a:	441d      	add	r5, r3
 800be1c:	42aa      	cmp	r2, r5
 800be1e:	d80e      	bhi.n	800be3e <jpeg_core_output_dimensions+0xbe>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800be20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800be24:	f009 fb7a 	bl	801551c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800be28:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800be2a:	6a20      	ldr	r0, [r4, #32]
 800be2c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800be30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800be34:	f009 fb72 	bl	801551c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 5;
 800be38:	2305      	movs	r3, #5
    cinfo->output_height = (JDIMENSION)
 800be3a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800be3c:	e7b4      	b.n	800bda8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800be3e:	2506      	movs	r5, #6
 800be40:	fb05 f603 	mul.w	r6, r5, r3
 800be44:	42b2      	cmp	r2, r6
 800be46:	d813      	bhi.n	800be70 <jpeg_core_output_dimensions+0xf0>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800be48:	4368      	muls	r0, r5
 800be4a:	f009 fb67 	bl	801551c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800be4e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800be50:	6a20      	ldr	r0, [r4, #32]
 800be52:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800be56:	4368      	muls	r0, r5
 800be58:	f009 fb60 	bl	801551c <jdiv_round_up>
    cinfo->output_height = (JDIMENSION)
 800be5c:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 14;
 800be5e:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800be62:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800be66:	2200      	movs	r2, #0
 800be68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800be6a:	4291      	cmp	r1, r2
 800be6c:	dc6f      	bgt.n	800bf4e <jpeg_core_output_dimensions+0x1ce>
}
 800be6e:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800be70:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800be74:	00dd      	lsls	r5, r3, #3
 800be76:	42b2      	cmp	r2, r6
 800be78:	d80e      	bhi.n	800be98 <jpeg_core_output_dimensions+0x118>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800be7a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800be7e:	f009 fb4d 	bl	801551c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800be82:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800be84:	6a20      	ldr	r0, [r4, #32]
 800be86:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800be8a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800be8e:	f009 fb45 	bl	801551c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 7;
 800be92:	2307      	movs	r3, #7
    cinfo->output_height = (JDIMENSION)
 800be94:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800be96:	e787      	b.n	800bda8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800be98:	42aa      	cmp	r2, r5
 800be9a:	d80c      	bhi.n	800beb6 <jpeg_core_output_dimensions+0x136>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800be9c:	00c0      	lsls	r0, r0, #3
 800be9e:	f009 fb3d 	bl	801551c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800bea2:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800bea4:	6a20      	ldr	r0, [r4, #32]
 800bea6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800beaa:	00c0      	lsls	r0, r0, #3
 800beac:	f009 fb36 	bl	801551c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 8;
 800beb0:	2308      	movs	r3, #8
    cinfo->output_height = (JDIMENSION)
 800beb2:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800beb4:	e778      	b.n	800bda8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800beb6:	441d      	add	r5, r3
 800beb8:	42aa      	cmp	r2, r5
 800beba:	d80e      	bhi.n	800beda <jpeg_core_output_dimensions+0x15a>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800bebc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800bec0:	f009 fb2c 	bl	801551c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800bec4:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800bec6:	6a20      	ldr	r0, [r4, #32]
 800bec8:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800becc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800bed0:	f009 fb24 	bl	801551c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 9;
 800bed4:	2309      	movs	r3, #9
    cinfo->output_height = (JDIMENSION)
 800bed6:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800bed8:	e766      	b.n	800bda8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800beda:	250a      	movs	r5, #10
 800bedc:	fb05 f603 	mul.w	r6, r5, r3
 800bee0:	42b2      	cmp	r2, r6
 800bee2:	d9b1      	bls.n	800be48 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800bee4:	250b      	movs	r5, #11
 800bee6:	fb05 f603 	mul.w	r6, r5, r3
 800beea:	42b2      	cmp	r2, r6
 800beec:	d9ac      	bls.n	800be48 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800beee:	250c      	movs	r5, #12
 800bef0:	fb05 f603 	mul.w	r6, r5, r3
 800bef4:	42b2      	cmp	r2, r6
 800bef6:	d9a7      	bls.n	800be48 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800bef8:	250d      	movs	r5, #13
 800befa:	fb05 f603 	mul.w	r6, r5, r3
 800befe:	42b2      	cmp	r2, r6
 800bf00:	d9a2      	bls.n	800be48 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800bf02:	250e      	movs	r5, #14
 800bf04:	fb05 f603 	mul.w	r6, r5, r3
 800bf08:	42b2      	cmp	r2, r6
 800bf0a:	d99d      	bls.n	800be48 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800bf0c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800bf10:	429a      	cmp	r2, r3
 800bf12:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800bf16:	d80d      	bhi.n	800bf34 <jpeg_core_output_dimensions+0x1b4>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800bf18:	1a18      	subs	r0, r3, r0
 800bf1a:	f009 faff 	bl	801551c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800bf1e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800bf20:	6a20      	ldr	r0, [r4, #32]
 800bf22:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800bf26:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800bf2a:	f009 faf7 	bl	801551c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 15;
 800bf2e:	230f      	movs	r3, #15
    cinfo->output_height = (JDIMENSION)
 800bf30:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800bf32:	e739      	b.n	800bda8 <jpeg_core_output_dimensions+0x28>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800bf34:	4618      	mov	r0, r3
 800bf36:	f009 faf1 	bl	801551c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800bf3a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800bf3c:	6a20      	ldr	r0, [r4, #32]
 800bf3e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800bf42:	0100      	lsls	r0, r0, #4
 800bf44:	f009 faea 	bl	801551c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 16;
 800bf48:	2310      	movs	r3, #16
    cinfo->output_height = (JDIMENSION)
 800bf4a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800bf4c:	e72c      	b.n	800bda8 <jpeg_core_output_dimensions+0x28>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800bf4e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800bf52:	3201      	adds	r2, #1
 800bf54:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800bf56:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800bf5a:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800bf5e:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800bf62:	e782      	b.n	800be6a <jpeg_core_output_dimensions+0xea>

0800bf64 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800bf64:	6843      	ldr	r3, [r0, #4]
 800bf66:	221c      	movs	r2, #28
 800bf68:	2100      	movs	r1, #0
 800bf6a:	681b      	ldr	r3, [r3, #0]
{
 800bf6c:	b510      	push	{r4, lr}
 800bf6e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800bf70:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800bf72:	4b08      	ldr	r3, [pc, #32]	; (800bf94 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800bf74:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800bf78:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800bf7a:	4b07      	ldr	r3, [pc, #28]	; (800bf98 <jinit_input_controller+0x34>)
 800bf7c:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800bf7e:	4b07      	ldr	r3, [pc, #28]	; (800bf9c <jinit_input_controller+0x38>)
 800bf80:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800bf82:	4b07      	ldr	r3, [pc, #28]	; (800bfa0 <jinit_input_controller+0x3c>)
 800bf84:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800bf86:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800bf88:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	6183      	str	r3, [r0, #24]
}
 800bf90:	bd10      	pop	{r4, pc}
 800bf92:	bf00      	nop
 800bf94:	0800ba51 	.word	0x0800ba51
 800bf98:	0800b899 	.word	0x0800b899
 800bf9c:	0800b8c9 	.word	0x0800b8c9
 800bfa0:	0800b889 	.word	0x0800b889

0800bfa4 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800bfa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800bfa8:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800bfac:	4602      	mov	r2, r0

  switch (pass_mode) {
 800bfae:	b149      	cbz	r1, 800bfc4 <start_pass_main+0x20>
 800bfb0:	2902      	cmp	r1, #2
 800bfb2:	d070      	beq.n	800c096 <start_pass_main+0xf2>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800bfb4:	6803      	ldr	r3, [r0, #0]
 800bfb6:	2203      	movs	r2, #3
 800bfb8:	615a      	str	r2, [r3, #20]
 800bfba:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 800bfbc:	b003      	add	sp, #12
 800bfbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800bfc2:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800bfc4:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800bfc8:	6880      	ldr	r0, [r0, #8]
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d060      	beq.n	800c090 <start_pass_main+0xec>
  int M = cinfo->min_DCT_v_scaled_size;
 800bfce:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
 800bfd2:	f103 0e08 	add.w	lr, r3, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bfd6:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800bfda:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800bfdc:	482f      	ldr	r0, [pc, #188]	; (800c09c <start_pass_main+0xf8>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bfde:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800bfe0:	1cba      	adds	r2, r7, #2
      main->pub.process_data = process_data_context_main;
 800bfe2:	6058      	str	r0, [r3, #4]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800bfe4:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bfe6:	9a00      	ldr	r2, [sp, #0]
 800bfe8:	4291      	cmp	r1, r2
 800bfea:	db09      	blt.n	800c000 <start_pass_main+0x5c>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800bfec:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800bfee:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800bff2:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800bff4:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800bff6:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800bffa:	b003      	add	sp, #12
 800bffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c000:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800c002:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800c004:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c006:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800c008:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800c00a:	f85e 4b04 	ldr.w	r4, [lr], #4
    xbuf0 = main->xbuffer[0][ci];
 800c00e:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800c012:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c014:	fb92 f2f7 	sdiv	r2, r2, r7
    xbuf1 = main->xbuffer[1][ci];
 800c018:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800c01c:	fb02 f905 	mul.w	r9, r2, r5
 800c020:	2500      	movs	r5, #0
 800c022:	454d      	cmp	r5, r9
 800c024:	db1c      	blt.n	800c060 <start_pass_main+0xbc>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800c026:	fb02 fb07 	mul.w	fp, r2, r7
 800c02a:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800c02e:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800c032:	fb05 b502 	mla	r5, r5, r2, fp
 800c036:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800c03a:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800c03e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800c042:	2400      	movs	r4, #0
 800c044:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800c048:	4554      	cmp	r4, sl
 800c04a:	db11      	blt.n	800c070 <start_pass_main+0xcc>
 800c04c:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800c050:	2400      	movs	r4, #0
 800c052:	fb00 c502 	mla	r5, r0, r2, ip
 800c056:	42a2      	cmp	r2, r4
 800c058:	dc14      	bgt.n	800c084 <start_pass_main+0xe0>
       ci++, compptr++) {
 800c05a:	3101      	adds	r1, #1
 800c05c:	3658      	adds	r6, #88	; 0x58
 800c05e:	e7c2      	b.n	800bfe6 <start_pass_main+0x42>
      xbuf0[i] = xbuf1[i] = buf[i];
 800c060:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800c064:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800c068:	f84c 8025 	str.w	r8, [ip, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800c06c:	3501      	adds	r5, #1
 800c06e:	e7d8      	b.n	800c022 <start_pass_main+0x7e>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800c070:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800c074:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800c076:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800c07a:	f855 bb04 	ldr.w	fp, [r5], #4
 800c07e:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800c082:	e7e1      	b.n	800c048 <start_pass_main+0xa4>
      xbuf0[i - rgroup] = xbuf0[0];
 800c084:	f8dc 0000 	ldr.w	r0, [ip]
 800c088:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800c08c:	3401      	adds	r4, #1
 800c08e:	e7e2      	b.n	800c056 <start_pass_main+0xb2>
      main->pub.process_data = process_data_simple_main;
 800c090:	4a03      	ldr	r2, [pc, #12]	; (800c0a0 <start_pass_main+0xfc>)
 800c092:	605a      	str	r2, [r3, #4]
 800c094:	e7ae      	b.n	800bff4 <start_pass_main+0x50>
    main->pub.process_data = process_data_crank_post;
 800c096:	4a03      	ldr	r2, [pc, #12]	; (800c0a4 <start_pass_main+0x100>)
 800c098:	605a      	str	r2, [r3, #4]
    break;
 800c09a:	e7ae      	b.n	800bffa <start_pass_main+0x56>
 800c09c:	0800c101 	.word	0x0800c101
 800c0a0:	0800c0a9 	.word	0x0800c0a9
 800c0a4:	0800c2f5 	.word	0x0800c2f5

0800c0a8 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800c0a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800c0ac:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800c0b0:	4698      	mov	r8, r3
 800c0b2:	460e      	mov	r6, r1
 800c0b4:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800c0b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800c0bc:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800c0c0:	b943      	cbnz	r3, 800c0d4 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800c0c2:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800c0c6:	9105      	str	r1, [sp, #20]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	4798      	blx	r3
 800c0cc:	b1a8      	cbz	r0, 800c0fa <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	9905      	ldr	r1, [sp, #20]
 800c0d2:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800c0d4:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800c0d8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800c0dc:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	9600      	str	r6, [sp, #0]
 800c0e4:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800c0e8:	685e      	ldr	r6, [r3, #4]
 800c0ea:	464b      	mov	r3, r9
 800c0ec:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800c0ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0f0:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800c0f2:	bf24      	itt	cs
 800c0f4:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800c0f6:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800c0fa:	b007      	add	sp, #28
 800c0fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c100 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800c100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800c104:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800c108:	4698      	mov	r8, r3
 800c10a:	b08b      	sub	sp, #44	; 0x2c
 800c10c:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800c10e:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800c110:	4689      	mov	r9, r1
 800c112:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800c114:	b973      	cbnz	r3, 800c134 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800c116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c118:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800c11c:	330e      	adds	r3, #14
 800c11e:	68d2      	ldr	r2, [r2, #12]
 800c120:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800c124:	4790      	blx	r2
 800c126:	2800      	cmp	r0, #0
 800c128:	d05a      	beq.n	800c1e0 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800c12a:	2301      	movs	r3, #1
 800c12c:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800c12e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c130:	3301      	adds	r3, #1
 800c132:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800c134:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c136:	2b01      	cmp	r3, #1
 800c138:	d011      	beq.n	800c15e <process_data_context_main+0x5e>
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d036      	beq.n	800c1ac <process_data_context_main+0xac>
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d14e      	bne.n	800c1e0 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800c142:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800c146:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800c148:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800c14a:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800c14e:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800c150:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800c152:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800c156:	429a      	cmp	r2, r3
 800c158:	d045      	beq.n	800c1e6 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800c15a:	2301      	movs	r3, #1
 800c15c:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800c15e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c160:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800c164:	4628      	mov	r0, r5
 800c166:	f103 010e 	add.w	r1, r3, #14
 800c16a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800c16e:	f8cd 9000 	str.w	r9, [sp]
 800c172:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800c176:	685e      	ldr	r6, [r3, #4]
 800c178:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800c17c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c17e:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800c180:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c182:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c184:	429a      	cmp	r2, r3
 800c186:	d32b      	bcc.n	800c1e0 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800c188:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800c18a:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d063      	beq.n	800c25a <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800c192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c194:	f083 0301 	eor.w	r3, r3, #1
 800c198:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800c19a:	2300      	movs	r3, #0
 800c19c:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800c19e:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800c1a0:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800c1a2:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800c1a4:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800c1a6:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800c1a8:	6463      	str	r3, [r4, #68]	; 0x44
 800c1aa:	e019      	b.n	800c1e0 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800c1ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1ae:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f103 010e 	add.w	r1, r3, #14
 800c1b8:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800c1bc:	f8cd 9000 	str.w	r9, [sp]
 800c1c0:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800c1c4:	685e      	ldr	r6, [r3, #4]
 800c1c6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800c1ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c1cc:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800c1ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c1d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d304      	bcc.n	800c1e0 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	4543      	cmp	r3, r8
 800c1de:	d3b0      	bcc.n	800c142 <process_data_context_main+0x42>
  }
}
 800c1e0:	b00b      	add	sp, #44	; 0x2c
 800c1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c1e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800c1e8:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800c1ec:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c1f0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800c1f4:	9206      	str	r2, [sp, #24]
 800c1f6:	9a06      	ldr	r2, [sp, #24]
 800c1f8:	4296      	cmp	r6, r2
 800c1fa:	daae      	bge.n	800c15a <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800c1fc:	68d8      	ldr	r0, [r3, #12]
 800c1fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c200:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800c202:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c204:	fbb0 fbf2 	udiv	fp, r0, r2
 800c208:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800c20c:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800c210:	2800      	cmp	r0, #0
 800c212:	bf08      	it	eq
 800c214:	4610      	moveq	r0, r2
    if (ci == 0) {
 800c216:	b926      	cbnz	r6, 800c222 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800c218:	1e42      	subs	r2, r0, #1
 800c21a:	fb92 f2fa 	sdiv	r2, r2, sl
 800c21e:	3201      	adds	r2, #1
 800c220:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800c222:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800c224:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800c226:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800c22a:	320e      	adds	r2, #14
 800c22c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c230:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800c234:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800c238:	2200      	movs	r2, #0
 800c23a:	4658      	mov	r0, fp
 800c23c:	3004      	adds	r0, #4
 800c23e:	9205      	str	r2, [sp, #20]
 800c240:	9a05      	ldr	r2, [sp, #20]
 800c242:	4552      	cmp	r2, sl
 800c244:	db02      	blt.n	800c24c <process_data_context_main+0x14c>
       ci++, compptr++) {
 800c246:	3601      	adds	r6, #1
 800c248:	3358      	adds	r3, #88	; 0x58
 800c24a:	e7d4      	b.n	800c1f6 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800c24c:	f8db 2000 	ldr.w	r2, [fp]
 800c250:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800c254:	9a05      	ldr	r2, [sp, #20]
 800c256:	3201      	adds	r2, #1
 800c258:	e7f1      	b.n	800c23e <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c25a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800c25e:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c262:	9305      	str	r3, [sp, #20]
 800c264:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c266:	2500      	movs	r5, #0
 800c268:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800c26a:	1c43      	adds	r3, r0, #1
 800c26c:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c26e:	9b08      	ldr	r3, [sp, #32]
 800c270:	429d      	cmp	r5, r3
 800c272:	da8e      	bge.n	800c192 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c274:	9b05      	ldr	r3, [sp, #20]
 800c276:	68da      	ldr	r2, [r3, #12]
 800c278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c27a:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800c27c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c280:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800c284:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800c288:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800c28c:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800c290:	9b07      	ldr	r3, [sp, #28]
 800c292:	4353      	muls	r3, r2
 800c294:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800c298:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800c29c:	4413      	add	r3, r2
 800c29e:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800c2a6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800c2aa:	461e      	mov	r6, r3
 800c2ac:	f06f 0303 	mvn.w	r3, #3
 800c2b0:	fb03 fe02 	mul.w	lr, r3, r2
 800c2b4:	eb07 030e 	add.w	r3, r7, lr
 800c2b8:	44e6      	add	lr, ip
 800c2ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c2bc:	428a      	cmp	r2, r1
 800c2be:	dc04      	bgt.n	800c2ca <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800c2c0:	9b05      	ldr	r3, [sp, #20]
 800c2c2:	3501      	adds	r5, #1
 800c2c4:	3358      	adds	r3, #88	; 0x58
 800c2c6:	9305      	str	r3, [sp, #20]
 800c2c8:	e7d1      	b.n	800c26e <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800c2ca:	9b06      	ldr	r3, [sp, #24]
 800c2cc:	f853 bb04 	ldr.w	fp, [r3], #4
 800c2d0:	9306      	str	r3, [sp, #24]
 800c2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2d4:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800c2d8:	f85a bb04 	ldr.w	fp, [sl], #4
 800c2dc:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800c2e0:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800c2e4:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800c2e8:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800c2ec:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800c2ee:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800c2f2:	e7e3      	b.n	800c2bc <process_data_context_main+0x1bc>

0800c2f4 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800c2f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800c2f6:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800c2fa:	9100      	str	r1, [sp, #0]
 800c2fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800c300:	2300      	movs	r3, #0
 800c302:	6864      	ldr	r4, [r4, #4]
 800c304:	461a      	mov	r2, r3
 800c306:	4619      	mov	r1, r3
 800c308:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800c30a:	b004      	add	sp, #16
 800c30c:	bd10      	pop	{r4, pc}
	...

0800c310 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800c310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c314:	6843      	ldr	r3, [r0, #4]
{
 800c316:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c318:	2250      	movs	r2, #80	; 0x50
 800c31a:	2101      	movs	r1, #1
 800c31c:	681b      	ldr	r3, [r3, #0]
{
 800c31e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c320:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800c322:	4b3a      	ldr	r3, [pc, #232]	; (800c40c <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800c324:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c328:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800c32a:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800c32c:	b12d      	cbz	r5, 800c33a <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	2203      	movs	r2, #3
 800c332:	4620      	mov	r0, r4
 800c334:	615a      	str	r2, [r3, #20]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800c33a:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800c33e:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	b31b      	cbz	r3, 800c38e <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800c346:	2d01      	cmp	r5, #1
 800c348:	dc05      	bgt.n	800c356 <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	2230      	movs	r2, #48	; 0x30
 800c34e:	4620      	mov	r0, r4
 800c350:	615a      	str	r2, [r3, #20]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c356:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c358:	2101      	movs	r1, #1
 800c35a:	6863      	ldr	r3, [r4, #4]
 800c35c:	4620      	mov	r0, r4
 800c35e:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800c360:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c364:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c366:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800c36a:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c36e:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800c370:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800c372:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800c374:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800c378:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c37c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800c380:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c382:	6a63      	ldr	r3, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800c384:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c388:	4598      	cmp	r8, r3
 800c38a:	db0a      	blt.n	800c3a2 <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800c38c:	1c85      	adds	r5, r0, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c38e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800c392:	3608      	adds	r6, #8
 800c394:	f04f 0800 	mov.w	r8, #0
 800c398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c39a:	4543      	cmp	r3, r8
 800c39c:	dc1d      	bgt.n	800c3da <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800c39e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c3a2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3a4:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c3a6:	68eb      	ldr	r3, [r5, #12]
       ci++, compptr++) {
 800c3a8:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c3aa:	4353      	muls	r3, r2
 800c3ac:	fb93 fbf0 	sdiv	fp, r3, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3b0:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800c3b2:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c3be:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800c3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800c3c2:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800c3c6:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800c3ca:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800c3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800c3d4:	f108 0801 	add.w	r8, r8, #1
 800c3d8:	e7d3      	b.n	800c382 <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c3da:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800c3dc:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c3e0:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800c3e2:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800c3e4:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c3e8:	4353      	muls	r3, r2
 800c3ea:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800c3ee:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800c3f0:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800c3f4:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800c3f8:	436b      	muls	r3, r5
 800c3fa:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800c3fe:	4620      	mov	r0, r4
 800c400:	434a      	muls	r2, r1
 800c402:	2101      	movs	r1, #1
 800c404:	47c8      	blx	r9
 800c406:	f846 0b04 	str.w	r0, [r6], #4
       ci++, compptr++) {
 800c40a:	e7c5      	b.n	800c398 <jinit_d_main_controller+0x88>
 800c40c:	0800bfa5 	.word	0x0800bfa5

0800c410 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800c410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800c414:	6986      	ldr	r6, [r0, #24]
{
 800c416:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800c418:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800c41c:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800c420:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800c424:	b93d      	cbnz	r5, 800c436 <get_sof+0x26>
 800c426:	68f3      	ldr	r3, [r6, #12]
 800c428:	4798      	blx	r3
 800c42a:	b910      	cbnz	r0, 800c432 <get_sof+0x22>
 800c42c:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800c42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c432:	e9d6 c500 	ldrd	ip, r5, [r6]
 800c436:	1e6b      	subs	r3, r5, #1
 800c438:	f89c 7000 	ldrb.w	r7, [ip]
 800c43c:	f000 8088 	beq.w	800c550 <get_sof+0x140>
 800c440:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800c444:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c446:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800c44a:	f000 808a 	beq.w	800c562 <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c44e:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800c450:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800c452:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800c454:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800c458:	f000 808c 	beq.w	800c574 <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800c45c:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800c45e:	782a      	ldrb	r2, [r5, #0]
 800c460:	3b01      	subs	r3, #1
 800c462:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c466:	6222      	str	r2, [r4, #32]
 800c468:	f000 808d 	beq.w	800c586 <get_sof+0x176>
 800c46c:	3501      	adds	r5, #1
 800c46e:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800c470:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800c472:	6a22      	ldr	r2, [r4, #32]
 800c474:	440a      	add	r2, r1
 800c476:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800c478:	f000 808e 	beq.w	800c598 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800c47c:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800c47e:	782a      	ldrb	r2, [r5, #0]
 800c480:	3b01      	subs	r3, #1
 800c482:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c486:	61e2      	str	r2, [r4, #28]
 800c488:	f000 808f 	beq.w	800c5aa <get_sof+0x19a>
 800c48c:	3501      	adds	r5, #1
 800c48e:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800c490:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800c492:	69e2      	ldr	r2, [r4, #28]
 800c494:	440a      	add	r2, r1
 800c496:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800c498:	f000 8090 	beq.w	800c5bc <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800c49c:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800c49e:	f103 39ff 	add.w	r9, r3, #4294967295
 800c4a2:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800c4a6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800c4aa:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800c4ac:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c4b2:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800c4b6:	619a      	str	r2, [r3, #24]
  length -= 8;
 800c4b8:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800c4bc:	69e2      	ldr	r2, [r4, #28]
 800c4be:	61da      	str	r2, [r3, #28]
 800c4c0:	6a22      	ldr	r2, [r4, #32]
 800c4c2:	621a      	str	r2, [r3, #32]
 800c4c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c4c6:	625a      	str	r2, [r3, #36]	; 0x24
 800c4c8:	2266      	movs	r2, #102	; 0x66
 800c4ca:	615a      	str	r2, [r3, #20]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800c4d0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	b12b      	cbz	r3, 800c4e4 <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	223c      	movs	r2, #60	; 0x3c
 800c4dc:	4620      	mov	r0, r4
 800c4de:	615a      	str	r2, [r3, #20]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800c4e4:	6a23      	ldr	r3, [r4, #32]
 800c4e6:	b123      	cbz	r3, 800c4f2 <get_sof+0xe2>
 800c4e8:	69e3      	ldr	r3, [r4, #28]
 800c4ea:	b113      	cbz	r3, 800c4f2 <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800c4ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	dc05      	bgt.n	800c4fe <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	2221      	movs	r2, #33	; 0x21
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	615a      	str	r2, [r3, #20]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800c4fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c500:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c504:	4543      	cmp	r3, r8
 800c506:	d005      	beq.n	800c514 <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800c508:	6823      	ldr	r3, [r4, #0]
 800c50a:	220c      	movs	r2, #12
 800c50c:	4620      	mov	r0, r4
 800c50e:	615a      	str	r2, [r3, #20]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800c514:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800c518:	b94b      	cbnz	r3, 800c52e <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800c51a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c51c:	2158      	movs	r1, #88	; 0x58
 800c51e:	6863      	ldr	r3, [r4, #4]
 800c520:	4620      	mov	r0, r4
 800c522:	434a      	muls	r2, r1
 800c524:	2101      	movs	r1, #1
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4798      	blx	r3
 800c52a:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c52e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800c532:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800c536:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c53a:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c53c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c53e:	4543      	cmp	r3, r8
 800c540:	dc45      	bgt.n	800c5ce <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 800c542:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800c546:	2001      	movs	r0, #1
 800c548:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800c54a:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800c54e:	e76e      	b.n	800c42e <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c550:	68f3      	ldr	r3, [r6, #12]
 800c552:	4620      	mov	r0, r4
 800c554:	4798      	blx	r3
 800c556:	2800      	cmp	r0, #0
 800c558:	f43f af68 	beq.w	800c42c <get_sof+0x1c>
 800c55c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c560:	e770      	b.n	800c444 <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800c562:	68f3      	ldr	r3, [r6, #12]
 800c564:	4620      	mov	r0, r4
 800c566:	4798      	blx	r3
 800c568:	2800      	cmp	r0, #0
 800c56a:	f43f af5f 	beq.w	800c42c <get_sof+0x1c>
 800c56e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c572:	e76d      	b.n	800c450 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800c574:	68f3      	ldr	r3, [r6, #12]
 800c576:	4620      	mov	r0, r4
 800c578:	4798      	blx	r3
 800c57a:	2800      	cmp	r0, #0
 800c57c:	f43f af56 	beq.w	800c42c <get_sof+0x1c>
 800c580:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c584:	e76b      	b.n	800c45e <get_sof+0x4e>
 800c586:	68f3      	ldr	r3, [r6, #12]
 800c588:	4620      	mov	r0, r4
 800c58a:	4798      	blx	r3
 800c58c:	2800      	cmp	r0, #0
 800c58e:	f43f af4d 	beq.w	800c42c <get_sof+0x1c>
 800c592:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c596:	e76a      	b.n	800c46e <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800c598:	68f3      	ldr	r3, [r6, #12]
 800c59a:	4620      	mov	r0, r4
 800c59c:	4798      	blx	r3
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	f43f af44 	beq.w	800c42c <get_sof+0x1c>
 800c5a4:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c5a8:	e769      	b.n	800c47e <get_sof+0x6e>
 800c5aa:	68f3      	ldr	r3, [r6, #12]
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	4798      	blx	r3
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	f43f af3b 	beq.w	800c42c <get_sof+0x1c>
 800c5b6:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c5ba:	e768      	b.n	800c48e <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800c5bc:	68f3      	ldr	r3, [r6, #12]
 800c5be:	4620      	mov	r0, r4
 800c5c0:	4798      	blx	r3
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	f43f af32 	beq.w	800c42c <get_sof+0x1c>
 800c5c8:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c5cc:	e767      	b.n	800c49e <get_sof+0x8e>
    compptr->component_index = ci;
 800c5ce:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800c5d2:	f1b9 0f00 	cmp.w	r9, #0
 800c5d6:	d107      	bne.n	800c5e8 <get_sof+0x1d8>
 800c5d8:	68f3      	ldr	r3, [r6, #12]
 800c5da:	4620      	mov	r0, r4
 800c5dc:	4798      	blx	r3
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	f43f af24 	beq.w	800c42c <get_sof+0x1c>
 800c5e4:	e9d6 5900 	ldrd	r5, r9, [r6]
 800c5e8:	782b      	ldrb	r3, [r5, #0]
 800c5ea:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800c5ee:	f1b9 0301 	subs.w	r3, r9, #1
 800c5f2:	d029      	beq.n	800c648 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800c5f4:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800c5f6:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800c5f8:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800c5fa:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800c5fe:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800c602:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800c606:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800c60a:	d026      	beq.n	800c65a <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800c60c:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800c60e:	f103 39ff 	add.w	r9, r3, #4294967295
 800c612:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800c616:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800c61a:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800c61c:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800c620:	4620      	mov	r0, r4
 800c622:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800c624:	f108 0801 	add.w	r8, r8, #1
 800c628:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800c62a:	619a      	str	r2, [r3, #24]
 800c62c:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800c630:	61da      	str	r2, [r3, #28]
 800c632:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800c636:	621a      	str	r2, [r3, #32]
 800c638:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800c63c:	f8c3 a014 	str.w	sl, [r3, #20]
 800c640:	625a      	str	r2, [r3, #36]	; 0x24
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	4798      	blx	r3
       ci++, compptr++) {
 800c646:	e779      	b.n	800c53c <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 800c648:	68f3      	ldr	r3, [r6, #12]
 800c64a:	4620      	mov	r0, r4
 800c64c:	4798      	blx	r3
 800c64e:	2800      	cmp	r0, #0
 800c650:	f43f aeec 	beq.w	800c42c <get_sof+0x1c>
 800c654:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c658:	e7cd      	b.n	800c5f6 <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800c65a:	68f3      	ldr	r3, [r6, #12]
 800c65c:	4620      	mov	r0, r4
 800c65e:	4798      	blx	r3
 800c660:	2800      	cmp	r0, #0
 800c662:	f43f aee3 	beq.w	800c42c <get_sof+0x1c>
 800c666:	e9d6 5300 	ldrd	r5, r3, [r6]
 800c66a:	e7d0      	b.n	800c60e <get_sof+0x1fe>

0800c66c <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800c66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800c670:	2a0d      	cmp	r2, #13
{
 800c672:	460c      	mov	r4, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800c674:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800c676:	eb02 0603 	add.w	r6, r2, r3
{
 800c67a:	4605      	mov	r5, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800c67c:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800c67e:	d96d      	bls.n	800c75c <examine_app0+0xf0>
 800c680:	7822      	ldrb	r2, [r4, #0]
 800c682:	2a4a      	cmp	r2, #74	; 0x4a
 800c684:	f040 808f 	bne.w	800c7a6 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800c688:	7862      	ldrb	r2, [r4, #1]
 800c68a:	2a46      	cmp	r2, #70	; 0x46
 800c68c:	f040 808b 	bne.w	800c7a6 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800c690:	78a2      	ldrb	r2, [r4, #2]
 800c692:	2a49      	cmp	r2, #73	; 0x49
 800c694:	d16a      	bne.n	800c76c <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800c696:	78e2      	ldrb	r2, [r4, #3]
 800c698:	2a46      	cmp	r2, #70	; 0x46
 800c69a:	d167      	bne.n	800c76c <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800c69c:	7922      	ldrb	r2, [r4, #4]
 800c69e:	2a00      	cmp	r2, #0
 800c6a0:	d164      	bne.n	800c76c <examine_app0+0x100>
    cinfo->saw_JFIF_marker = TRUE;
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800c6a8:	7962      	ldrb	r2, [r4, #5]
 800c6aa:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    if (cinfo->JFIF_major_version != 1)
 800c6ae:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800c6b0:	f894 c006 	ldrb.w	ip, [r4, #6]
 800c6b4:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800c6b8:	79e7      	ldrb	r7, [r4, #7]
 800c6ba:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800c6be:	f894 e008 	ldrb.w	lr, [r4, #8]
 800c6c2:	7a67      	ldrb	r7, [r4, #9]
 800c6c4:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800c6c8:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800c6cc:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800c6d0:	7ae7      	ldrb	r7, [r4, #11]
 800c6d2:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800c6d6:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800c6da:	d007      	beq.n	800c6ec <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800c6dc:	277a      	movs	r7, #122	; 0x7a
 800c6de:	f8c1 c01c 	str.w	ip, [r1, #28]
 800c6e2:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800c6e6:	f04f 31ff 	mov.w	r1, #4294967295
 800c6ea:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800c6ec:	682b      	ldr	r3, [r5, #0]
 800c6ee:	2101      	movs	r1, #1
 800c6f0:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	619a      	str	r2, [r3, #24]
 800c6f8:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800c6fc:	61da      	str	r2, [r3, #28]
 800c6fe:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800c702:	621a      	str	r2, [r3, #32]
 800c704:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800c708:	625a      	str	r2, [r3, #36]	; 0x24
 800c70a:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800c70e:	629a      	str	r2, [r3, #40]	; 0x28
 800c710:	2259      	movs	r2, #89	; 0x59
 800c712:	615a      	str	r2, [r3, #20]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800c718:	7b22      	ldrb	r2, [r4, #12]
 800c71a:	7b63      	ldrb	r3, [r4, #13]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	d00a      	beq.n	800c736 <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800c720:	682b      	ldr	r3, [r5, #0]
 800c722:	225c      	movs	r2, #92	; 0x5c
 800c724:	2101      	movs	r1, #1
 800c726:	4628      	mov	r0, r5
 800c728:	615a      	str	r2, [r3, #20]
 800c72a:	7b22      	ldrb	r2, [r4, #12]
 800c72c:	619a      	str	r2, [r3, #24]
 800c72e:	7b62      	ldrb	r2, [r4, #13]
 800c730:	61da      	str	r2, [r3, #28]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800c736:	7b22      	ldrb	r2, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800c738:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800c73a:	7b63      	ldrb	r3, [r4, #13]
 800c73c:	fb12 f203 	smulbb	r2, r2, r3
 800c740:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (totallen !=
 800c744:	42b2      	cmp	r2, r6
 800c746:	d030      	beq.n	800c7aa <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800c748:	682a      	ldr	r2, [r5, #0]
 800c74a:	235a      	movs	r3, #90	; 0x5a
 800c74c:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800c750:	6853      	ldr	r3, [r2, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800c752:	4628      	mov	r0, r5
 800c754:	2101      	movs	r1, #1
  }
}
 800c756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800c75a:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800c75c:	2a05      	cmp	r2, #5
 800c75e:	d922      	bls.n	800c7a6 <examine_app0+0x13a>
 800c760:	7822      	ldrb	r2, [r4, #0]
 800c762:	2a4a      	cmp	r2, #74	; 0x4a
 800c764:	d11f      	bne.n	800c7a6 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800c766:	7862      	ldrb	r2, [r4, #1]
 800c768:	2a46      	cmp	r2, #70	; 0x46
 800c76a:	d11c      	bne.n	800c7a6 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800c76c:	78a2      	ldrb	r2, [r4, #2]
 800c76e:	2a58      	cmp	r2, #88	; 0x58
 800c770:	d119      	bne.n	800c7a6 <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800c772:	78e2      	ldrb	r2, [r4, #3]
 800c774:	2a58      	cmp	r2, #88	; 0x58
 800c776:	d116      	bne.n	800c7a6 <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800c778:	7922      	ldrb	r2, [r4, #4]
 800c77a:	b9a2      	cbnz	r2, 800c7a6 <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800c77c:	7962      	ldrb	r2, [r4, #5]
 800c77e:	2a11      	cmp	r2, #17
 800c780:	d007      	beq.n	800c792 <examine_app0+0x126>
 800c782:	2a13      	cmp	r2, #19
 800c784:	d007      	beq.n	800c796 <examine_app0+0x12a>
 800c786:	2a10      	cmp	r2, #16
 800c788:	d107      	bne.n	800c79a <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800c78a:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800c78c:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800c790:	e7df      	b.n	800c752 <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800c792:	226f      	movs	r2, #111	; 0x6f
 800c794:	e7fa      	b.n	800c78c <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800c796:	2270      	movs	r2, #112	; 0x70
 800c798:	e7f8      	b.n	800c78c <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800c79a:	225b      	movs	r2, #91	; 0x5b
 800c79c:	614a      	str	r2, [r1, #20]
 800c79e:	7962      	ldrb	r2, [r4, #5]
 800c7a0:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800c7a4:	e7d5      	b.n	800c752 <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800c7a6:	224f      	movs	r2, #79	; 0x4f
 800c7a8:	e7f0      	b.n	800c78c <examine_app0+0x120>
}
 800c7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c7ae <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800c7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800c7b2:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800c7b4:	6804      	ldr	r4, [r0, #0]
{
 800c7b6:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800c7b8:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800c7ba:	d92b      	bls.n	800c814 <examine_app14+0x66>
 800c7bc:	780f      	ldrb	r7, [r1, #0]
 800c7be:	2f41      	cmp	r7, #65	; 0x41
 800c7c0:	d128      	bne.n	800c814 <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800c7c2:	784f      	ldrb	r7, [r1, #1]
 800c7c4:	2f64      	cmp	r7, #100	; 0x64
 800c7c6:	d125      	bne.n	800c814 <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800c7c8:	788f      	ldrb	r7, [r1, #2]
 800c7ca:	2f6f      	cmp	r7, #111	; 0x6f
 800c7cc:	d122      	bne.n	800c814 <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800c7ce:	78cf      	ldrb	r7, [r1, #3]
 800c7d0:	2f62      	cmp	r7, #98	; 0x62
 800c7d2:	d11f      	bne.n	800c814 <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800c7d4:	790f      	ldrb	r7, [r1, #4]
 800c7d6:	2f65      	cmp	r7, #101	; 0x65
 800c7d8:	d11c      	bne.n	800c814 <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800c7da:	79cb      	ldrb	r3, [r1, #7]
 800c7dc:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800c7de:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800c7e0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800c7e4:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800c7e6:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800c7ea:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800c7ee:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800c7f0:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800c7f2:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800c7f6:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800c7fa:	234e      	movs	r3, #78	; 0x4e
 800c7fc:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800c800:	6163      	str	r3, [r4, #20]
 800c802:	2101      	movs	r1, #1
 800c804:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800c806:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800c808:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800c80c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800c810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800c814:	2150      	movs	r1, #80	; 0x50
 800c816:	4413      	add	r3, r2
 800c818:	4628      	mov	r0, r5
 800c81a:	6161      	str	r1, [r4, #20]
 800c81c:	2101      	movs	r1, #1
 800c81e:	61a3      	str	r3, [r4, #24]
 800c820:	4633      	mov	r3, r6
}
 800c822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800c826:	4718      	bx	r3

0800c828 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800c828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800c82c:	6986      	ldr	r6, [r0, #24]
{
 800c82e:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800c830:	6877      	ldr	r7, [r6, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800c832:	b39f      	cbz	r7, 800c89c <get_interesting_appn+0x74>
  INPUT_VARS(cinfo);
 800c834:	6834      	ldr	r4, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c836:	7825      	ldrb	r5, [r4, #0]
 800c838:	3f01      	subs	r7, #1
 800c83a:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800c83e:	d037      	beq.n	800c8b0 <get_interesting_appn+0x88>
 800c840:	3401      	adds	r4, #1
 800c842:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c846:	3f01      	subs	r7, #1
 800c848:	444d      	add	r5, r9
  length -= 2;
 800c84a:	3d02      	subs	r5, #2

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 800c84c:	2d0d      	cmp	r5, #13
 800c84e:	dc37      	bgt.n	800c8c0 <get_interesting_appn+0x98>
    numtoread = APPN_DATA_LEN;
  else if (length > 0)
 800c850:	2d00      	cmp	r5, #0
 800c852:	dd38      	ble.n	800c8c6 <get_interesting_appn+0x9e>
    numtoread = (unsigned int) length;
 800c854:	46a9      	mov	r9, r5
  else
    numtoread = 0;
  for (i = 0; i < numtoread; i++)
 800c856:	f04f 0a00 	mov.w	sl, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800c85a:	b92f      	cbnz	r7, 800c868 <get_interesting_appn+0x40>
 800c85c:	68f3      	ldr	r3, [r6, #12]
 800c85e:	4640      	mov	r0, r8
 800c860:	4798      	blx	r3
 800c862:	b1f0      	cbz	r0, 800c8a2 <get_interesting_appn+0x7a>
 800c864:	e9d6 4700 	ldrd	r4, r7, [r6]
 800c868:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c86c:	3f01      	subs	r7, #1
 800c86e:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800c872:	f10a 0a01 	add.w	sl, sl, #1
 800c876:	45d1      	cmp	r9, sl
 800c878:	d1ef      	bne.n	800c85a <get_interesting_appn+0x32>
  length -= numtoread;

  /* process it */
  switch (cinfo->unread_marker) {
 800c87a:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
  length -= numtoread;
 800c87e:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800c882:	2ae0      	cmp	r2, #224	; 0xe0
 800c884:	d022      	beq.n	800c8cc <get_interesting_appn+0xa4>
 800c886:	2aee      	cmp	r2, #238	; 0xee
 800c888:	d032      	beq.n	800c8f0 <get_interesting_appn+0xc8>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
    break;
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800c88a:	f8d8 3000 	ldr.w	r3, [r8]
 800c88e:	2146      	movs	r1, #70	; 0x46
 800c890:	4640      	mov	r0, r8
 800c892:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4798      	blx	r3
    break;
 800c89a:	e01d      	b.n	800c8d8 <get_interesting_appn+0xb0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c89c:	68f3      	ldr	r3, [r6, #12]
 800c89e:	4798      	blx	r3
 800c8a0:	b918      	cbnz	r0, 800c8aa <get_interesting_appn+0x82>
 800c8a2:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800c8a4:	b004      	add	sp, #16
 800c8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c8aa:	e9d6 4700 	ldrd	r4, r7, [r6]
 800c8ae:	e7c2      	b.n	800c836 <get_interesting_appn+0xe>
 800c8b0:	68f3      	ldr	r3, [r6, #12]
 800c8b2:	4640      	mov	r0, r8
 800c8b4:	4798      	blx	r3
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d0f3      	beq.n	800c8a2 <get_interesting_appn+0x7a>
 800c8ba:	e9d6 4700 	ldrd	r4, r7, [r6]
 800c8be:	e7c0      	b.n	800c842 <get_interesting_appn+0x1a>
    numtoread = APPN_DATA_LEN;
 800c8c0:	f04f 090e 	mov.w	r9, #14
 800c8c4:	e7c7      	b.n	800c856 <get_interesting_appn+0x2e>
    numtoread = 0;
 800c8c6:	f04f 0900 	mov.w	r9, #0
 800c8ca:	e7d6      	b.n	800c87a <get_interesting_appn+0x52>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800c8cc:	462b      	mov	r3, r5
 800c8ce:	464a      	mov	r2, r9
 800c8d0:	4669      	mov	r1, sp
 800c8d2:	4640      	mov	r0, r8
 800c8d4:	f7ff feca 	bl	800c66c <examine_app0>
  if (length > 0)
 800c8d8:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800c8da:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800c8de:	dd05      	ble.n	800c8ec <get_interesting_appn+0xc4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800c8e0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	4640      	mov	r0, r8
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	4798      	blx	r3
  return TRUE;
 800c8ec:	2001      	movs	r0, #1
 800c8ee:	e7d9      	b.n	800c8a4 <get_interesting_appn+0x7c>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800c8f0:	462b      	mov	r3, r5
 800c8f2:	464a      	mov	r2, r9
 800c8f4:	4669      	mov	r1, sp
 800c8f6:	4640      	mov	r0, r8
 800c8f8:	f7ff ff59 	bl	800c7ae <examine_app14>
    break;
 800c8fc:	e7ec      	b.n	800c8d8 <get_interesting_appn+0xb0>

0800c8fe <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800c8fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800c902:	6984      	ldr	r4, [r0, #24]
{
 800c904:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800c906:	6863      	ldr	r3, [r4, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800c908:	b31b      	cbz	r3, 800c952 <skip_variable+0x54>
  INPUT_VARS(cinfo);
 800c90a:	6825      	ldr	r5, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c90c:	782e      	ldrb	r6, [r5, #0]
 800c90e:	f1b3 0801 	subs.w	r8, r3, #1
 800c912:	ea4f 2906 	mov.w	r9, r6, lsl #8
 800c916:	d025      	beq.n	800c964 <skip_variable+0x66>
 800c918:	3501      	adds	r5, #1
 800c91a:	f815 6b01 	ldrb.w	r6, [r5], #1
  length -= 2;
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800c91e:	235d      	movs	r3, #93	; 0x5d
 800c920:	683a      	ldr	r2, [r7, #0]
 800c922:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c924:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800c926:	4638      	mov	r0, r7
 800c928:	6153      	str	r3, [r2, #20]
  length -= 2;
 800c92a:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800c92c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800c930:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800c934:	6853      	ldr	r3, [r2, #4]
 800c936:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c938:	f108 33ff 	add.w	r3, r8, #4294967295

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
 800c93c:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800c93e:	6025      	str	r5, [r4, #0]
 800c940:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800c942:	dd04      	ble.n	800c94e <skip_variable+0x50>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	4631      	mov	r1, r6
 800c948:	4638      	mov	r0, r7
 800c94a:	691b      	ldr	r3, [r3, #16]
 800c94c:	4798      	blx	r3

  return TRUE;
 800c94e:	2001      	movs	r0, #1
 800c950:	e003      	b.n	800c95a <skip_variable+0x5c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c952:	68e3      	ldr	r3, [r4, #12]
 800c954:	4798      	blx	r3
 800c956:	b910      	cbnz	r0, 800c95e <skip_variable+0x60>
 800c958:	2000      	movs	r0, #0
}
 800c95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800c95e:	e9d4 5300 	ldrd	r5, r3, [r4]
 800c962:	e7d3      	b.n	800c90c <skip_variable+0xe>
 800c964:	68e3      	ldr	r3, [r4, #12]
 800c966:	4638      	mov	r0, r7
 800c968:	4798      	blx	r3
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d0f4      	beq.n	800c958 <skip_variable+0x5a>
 800c96e:	e9d4 5800 	ldrd	r5, r8, [r4]
 800c972:	e7d2      	b.n	800c91a <skip_variable+0x1c>

0800c974 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800c974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800c978:	6986      	ldr	r6, [r0, #24]
{
 800c97a:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800c97c:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800c980:	b987      	cbnz	r7, 800c9a4 <next_marker+0x30>
 800c982:	68f3      	ldr	r3, [r6, #12]
 800c984:	4640      	mov	r0, r8
 800c986:	4798      	blx	r3
 800c988:	b950      	cbnz	r0, 800c9a0 <next_marker+0x2c>
 800c98a:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800c98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800c990:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800c994:	6993      	ldr	r3, [r2, #24]
 800c996:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800c998:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800c99a:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800c99e:	e7ef      	b.n	800c980 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800c9a0:	e9d6 4700 	ldrd	r4, r7, [r6]
 800c9a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9a8:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800c9aa:	2bff      	cmp	r3, #255	; 0xff
 800c9ac:	d1f0      	bne.n	800c990 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800c9ae:	b937      	cbnz	r7, 800c9be <next_marker+0x4a>
 800c9b0:	68f3      	ldr	r3, [r6, #12]
 800c9b2:	4640      	mov	r0, r8
 800c9b4:	4798      	blx	r3
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d0e7      	beq.n	800c98a <next_marker+0x16>
 800c9ba:	e9d6 4700 	ldrd	r4, r7, [r6]
 800c9be:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c9c2:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800c9c4:	2dff      	cmp	r5, #255	; 0xff
 800c9c6:	d0f2      	beq.n	800c9ae <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800c9c8:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800c9cc:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800c9ce:	b90d      	cbnz	r5, 800c9d4 <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800c9d0:	3302      	adds	r3, #2
 800c9d2:	e7e1      	b.n	800c998 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800c9d4:	b173      	cbz	r3, 800c9f4 <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800c9d6:	f8d8 2000 	ldr.w	r2, [r8]
 800c9da:	2177      	movs	r1, #119	; 0x77
 800c9dc:	4640      	mov	r0, r8
 800c9de:	61d5      	str	r5, [r2, #28]
 800c9e0:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800c9e4:	6853      	ldr	r3, [r2, #4]
 800c9e6:	f04f 31ff 	mov.w	r1, #4294967295
 800c9ea:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800c9ec:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800c9f4:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800c9f8:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800c9fa:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800c9fe:	e7c5      	b.n	800c98c <next_marker+0x18>

0800ca00 <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800ca00:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800ca04:	b510      	push	{r4, lr}
 800ca06:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800ca08:	b1e3      	cbz	r3, 800ca44 <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800ca0a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800ca0e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800ca12:	6959      	ldr	r1, [r3, #20]
 800ca14:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d119      	bne.n	800ca50 <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800ca1c:	6823      	ldr	r3, [r4, #0]
 800ca1e:	2264      	movs	r2, #100	; 0x64
 800ca20:	4620      	mov	r0, r4
 800ca22:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	2103      	movs	r1, #3
 800ca2a:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800ca32:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800ca36:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800ca38:	6953      	ldr	r3, [r2, #20]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	f003 0307 	and.w	r3, r3, #7
 800ca40:	6153      	str	r3, [r2, #20]
  return TRUE;
 800ca42:	e004      	b.n	800ca4e <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800ca44:	f7ff ff96 	bl	800c974 <next_marker>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d1de      	bne.n	800ca0a <read_restart_marker+0xa>
      return FALSE;
 800ca4c:	2000      	movs	r0, #0
}
 800ca4e:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800ca50:	69a3      	ldr	r3, [r4, #24]
 800ca52:	4620      	mov	r0, r4
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	4798      	blx	r3
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d1ea      	bne.n	800ca32 <read_restart_marker+0x32>
 800ca5c:	e7f6      	b.n	800ca4c <read_restart_marker+0x4c>

0800ca5e <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800ca5e:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800ca60:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800ca64:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800ca68:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800ca6c:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800ca70:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800ca72:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800ca76:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800ca7a:	4770      	bx	lr

0800ca7c <get_dht>:
{
 800ca7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800ca80:	6987      	ldr	r7, [r0, #24]
{
 800ca82:	b0c9      	sub	sp, #292	; 0x124
 800ca84:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800ca86:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ca88:	b1fe      	cbz	r6, 800caca <get_dht+0x4e>
  INPUT_VARS(cinfo);
 800ca8a:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ca8c:	f894 9000 	ldrb.w	r9, [r4]
 800ca90:	3e01      	subs	r6, #1
 800ca92:	ea4f 2809 	mov.w	r8, r9, lsl #8
 800ca96:	d022      	beq.n	800cade <get_dht+0x62>
 800ca98:	3401      	adds	r4, #1
 800ca9a:	f814 9b01 	ldrb.w	r9, [r4], #1
 800ca9e:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800caa0:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800caa4:	44c1      	add	r9, r8
  length -= 2;
 800caa6:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800caaa:	f1b9 0f10 	cmp.w	r9, #16
 800caae:	dc1e      	bgt.n	800caee <get_dht+0x72>
  if (length != 0)
 800cab0:	f1b9 0f00 	cmp.w	r9, #0
 800cab4:	d005      	beq.n	800cac2 <get_dht+0x46>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800cab6:	682b      	ldr	r3, [r5, #0]
 800cab8:	220c      	movs	r2, #12
 800caba:	4628      	mov	r0, r5
 800cabc:	615a      	str	r2, [r3, #20]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4798      	blx	r3
  return TRUE;
 800cac2:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800cac4:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800cac8:	e003      	b.n	800cad2 <get_dht+0x56>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	4798      	blx	r3
 800cace:	b918      	cbnz	r0, 800cad8 <get_dht+0x5c>
 800cad0:	2000      	movs	r0, #0
}
 800cad2:	b049      	add	sp, #292	; 0x124
 800cad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cad8:	e9d7 4600 	ldrd	r4, r6, [r7]
 800cadc:	e7d6      	b.n	800ca8c <get_dht+0x10>
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	4628      	mov	r0, r5
 800cae2:	4798      	blx	r3
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d0f3      	beq.n	800cad0 <get_dht+0x54>
 800cae8:	e9d7 4600 	ldrd	r4, r6, [r7]
 800caec:	e7d5      	b.n	800ca9a <get_dht+0x1e>
    INPUT_BYTE(cinfo, index, return FALSE);
 800caee:	b936      	cbnz	r6, 800cafe <get_dht+0x82>
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	4628      	mov	r0, r5
 800caf4:	4790      	blx	r2
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d0ea      	beq.n	800cad0 <get_dht+0x54>
 800cafa:	e9d7 4600 	ldrd	r4, r6, [r7]
 800cafe:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800cb02:	2152      	movs	r1, #82	; 0x52
 800cb04:	682a      	ldr	r2, [r5, #0]
 800cb06:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800cb08:	f8cd 8000 	str.w	r8, [sp]
 800cb0c:	3e01      	subs	r6, #1
    count = 0;
 800cb0e:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800cb12:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800cb16:	6852      	ldr	r2, [r2, #4]
 800cb18:	2101      	movs	r1, #1
 800cb1a:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800cb1c:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800cb1e:	b946      	cbnz	r6, 800cb32 <get_dht+0xb6>
 800cb20:	68f9      	ldr	r1, [r7, #12]
 800cb22:	4628      	mov	r0, r5
 800cb24:	9201      	str	r2, [sp, #4]
 800cb26:	4788      	blx	r1
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d0d1      	beq.n	800cad0 <get_dht+0x54>
 800cb2c:	9a01      	ldr	r2, [sp, #4]
 800cb2e:	e9d7 4600 	ldrd	r4, r6, [r7]
 800cb32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb36:	3e01      	subs	r6, #1
 800cb38:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800cb3c:	3201      	adds	r2, #1
      count += bits[i];
 800cb3e:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800cb40:	2a11      	cmp	r2, #17
 800cb42:	d1ec      	bne.n	800cb1e <get_dht+0xa2>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800cb44:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800cb46:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800cb4a:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800cb4e:	f04f 0958 	mov.w	r9, #88	; 0x58
 800cb52:	4628      	mov	r0, r5
    length -= 1 + 16;
 800cb54:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800cb56:	6191      	str	r1, [r2, #24]
 800cb58:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800cb5c:	f8c2 9014 	str.w	r9, [r2, #20]
 800cb60:	61d1      	str	r1, [r2, #28]
 800cb62:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800cb66:	6211      	str	r1, [r2, #32]
 800cb68:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800cb6c:	6251      	str	r1, [r2, #36]	; 0x24
 800cb6e:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800cb72:	6291      	str	r1, [r2, #40]	; 0x28
 800cb74:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800cb78:	62d1      	str	r1, [r2, #44]	; 0x2c
 800cb7a:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800cb7e:	6311      	str	r1, [r2, #48]	; 0x30
 800cb80:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800cb84:	6351      	str	r1, [r2, #52]	; 0x34
 800cb86:	2102      	movs	r1, #2
 800cb88:	6852      	ldr	r2, [r2, #4]
 800cb8a:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800cb8c:	682a      	ldr	r2, [r5, #0]
 800cb8e:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800cb92:	4628      	mov	r0, r5
 800cb94:	f8c2 9014 	str.w	r9, [r2, #20]
 800cb98:	6191      	str	r1, [r2, #24]
 800cb9a:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800cb9e:	61d1      	str	r1, [r2, #28]
 800cba0:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800cba4:	6211      	str	r1, [r2, #32]
 800cba6:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800cbaa:	6251      	str	r1, [r2, #36]	; 0x24
 800cbac:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800cbb0:	6291      	str	r1, [r2, #40]	; 0x28
 800cbb2:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800cbb6:	62d1      	str	r1, [r2, #44]	; 0x2c
 800cbb8:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800cbbc:	6311      	str	r1, [r2, #48]	; 0x30
 800cbbe:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800cbc2:	6351      	str	r1, [r2, #52]	; 0x34
 800cbc4:	2102      	movs	r1, #2
 800cbc6:	6852      	ldr	r2, [r2, #4]
 800cbc8:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800cbca:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800cbce:	dc02      	bgt.n	800cbd6 <get_dht+0x15a>
 800cbd0:	9b01      	ldr	r3, [sp, #4]
 800cbd2:	4553      	cmp	r3, sl
 800cbd4:	da05      	bge.n	800cbe2 <get_dht+0x166>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800cbd6:	682a      	ldr	r2, [r5, #0]
 800cbd8:	2109      	movs	r1, #9
 800cbda:	4628      	mov	r0, r5
 800cbdc:	6151      	str	r1, [r2, #20]
 800cbde:	6812      	ldr	r2, [r2, #0]
 800cbe0:	4790      	blx	r2
 800cbe2:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800cbe6:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800cbe8:	45d1      	cmp	r9, sl
 800cbea:	d13f      	bne.n	800cc6c <get_dht+0x1f0>
    if (index & 0x10) {		/* AC table definition */
 800cbec:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800cbf0:	9b01      	ldr	r3, [sp, #4]
 800cbf2:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800cbf6:	bf17      	itett	ne
 800cbf8:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800cbfc:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800cc00:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800cc04:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800cc06:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800cc08:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800cc0c:	2b03      	cmp	r3, #3
 800cc0e:	d906      	bls.n	800cc1e <get_dht+0x1a2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800cc10:	682a      	ldr	r2, [r5, #0]
 800cc12:	211f      	movs	r1, #31
 800cc14:	4628      	mov	r0, r5
 800cc16:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800cc1a:	6812      	ldr	r2, [r2, #0]
 800cc1c:	4790      	blx	r2
    if (*htblptr == NULL)
 800cc1e:	f8d8 2000 	ldr.w	r2, [r8]
 800cc22:	b922      	cbnz	r2, 800cc2e <get_dht+0x1b2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800cc24:	4628      	mov	r0, r5
 800cc26:	f7fb fb6f 	bl	8008308 <jpeg_alloc_huff_table>
 800cc2a:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800cc2e:	2200      	movs	r2, #0
 800cc30:	46de      	mov	lr, fp
 800cc32:	f10d 0a1c 	add.w	sl, sp, #28
 800cc36:	f88b 2000 	strb.w	r2, [fp]
 800cc3a:	f8d8 2000 	ldr.w	r2, [r8]
 800cc3e:	46f4      	mov	ip, lr
 800cc40:	3208      	adds	r2, #8
 800cc42:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800cc46:	45d4      	cmp	ip, sl
 800cc48:	f842 0c08 	str.w	r0, [r2, #-8]
 800cc4c:	f842 1c04 	str.w	r1, [r2, #-4]
 800cc50:	46e6      	mov	lr, ip
 800cc52:	d1f4      	bne.n	800cc3e <get_dht+0x1c2>
 800cc54:	f89c 1000 	ldrb.w	r1, [ip]
 800cc58:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800cc5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc5e:	f8d8 0000 	ldr.w	r0, [r8]
 800cc62:	a908      	add	r1, sp, #32
 800cc64:	3011      	adds	r0, #17
 800cc66:	f00c fd19 	bl	801969c <memcpy>
 800cc6a:	e71e      	b.n	800caaa <get_dht+0x2e>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800cc6c:	b946      	cbnz	r6, 800cc80 <get_dht+0x204>
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	4628      	mov	r0, r5
 800cc72:	4790      	blx	r2
 800cc74:	2800      	cmp	r0, #0
 800cc76:	f43f af2b 	beq.w	800cad0 <get_dht+0x54>
 800cc7a:	a908      	add	r1, sp, #32
 800cc7c:	e9d7 4600 	ldrd	r4, r6, [r7]
 800cc80:	f814 2b01 	ldrb.w	r2, [r4], #1
 800cc84:	3e01      	subs	r6, #1
 800cc86:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800cc8a:	f109 0901 	add.w	r9, r9, #1
 800cc8e:	e7ab      	b.n	800cbe8 <get_dht+0x16c>

0800cc90 <read_markers>:
{
 800cc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc94:	4604      	mov	r4, r0
 800cc96:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800cc98:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800cc9c:	bb2b      	cbnz	r3, 800ccea <read_markers+0x5a>
      if (! cinfo->marker->saw_SOI) {
 800cc9e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d17c      	bne.n	800cda2 <read_markers+0x112>
  INPUT_VARS(cinfo);
 800cca8:	69a7      	ldr	r7, [r4, #24]
 800ccaa:	687b      	ldr	r3, [r7, #4]
  INPUT_BYTE(cinfo, c, return FALSE);
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d06a      	beq.n	800cd86 <read_markers+0xf6>
  INPUT_VARS(cinfo);
 800ccb0:	683d      	ldr	r5, [r7, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800ccb2:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800ccb4:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800ccb8:	d06c      	beq.n	800cd94 <read_markers+0x104>
  INPUT_BYTE(cinfo, c, return FALSE);
 800ccba:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800ccbc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800ccc0:	f103 36ff 	add.w	r6, r3, #4294967295
 800ccc4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800ccc8:	d102      	bne.n	800ccd0 <read_markers+0x40>
 800ccca:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800ccce:	d008      	beq.n	800cce2 <read_markers+0x52>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	2237      	movs	r2, #55	; 0x37
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f8c3 901c 	str.w	r9, [r3, #28]
 800ccda:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800cce2:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800cce6:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800ccea:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	f000 83c3 	beq.w	800d47a <read_markers+0x7ea>
 800ccf4:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800ccf8:	2a3e      	cmp	r2, #62	; 0x3e
 800ccfa:	f200 83cb 	bhi.w	800d494 <read_markers+0x804>
 800ccfe:	2a3e      	cmp	r2, #62	; 0x3e
 800cd00:	f200 83c8 	bhi.w	800d494 <read_markers+0x804>
 800cd04:	e8df f012 	tbh	[pc, r2, lsl #1]
 800cd08:	009b0092 	.word	0x009b0092
 800cd0c:	00a7009e 	.word	0x00a7009e
 800cd10:	00a70239 	.word	0x00a70239
 800cd14:	00a700a7 	.word	0x00a700a7
 800cd18:	00a200a7 	.word	0x00a200a7
 800cd1c:	00a700a4 	.word	0x00a700a4
 800cd20:	00a701bf 	.word	0x00a701bf
 800cd24:	00a700a7 	.word	0x00a700a7
 800cd28:	03b903b9 	.word	0x03b903b9
 800cd2c:	03b903b9 	.word	0x03b903b9
 800cd30:	03b903b9 	.word	0x03b903b9
 800cd34:	03b903b9 	.word	0x03b903b9
 800cd38:	01b30054 	.word	0x01b30054
 800cd3c:	023d00af 	.word	0x023d00af
 800cd40:	035b03c2 	.word	0x035b03c2
 800cd44:	03c603c6 	.word	0x03c603c6
 800cd48:	03ad03ad 	.word	0x03ad03ad
 800cd4c:	03ad03ad 	.word	0x03ad03ad
 800cd50:	03ad03ad 	.word	0x03ad03ad
 800cd54:	03ad03ad 	.word	0x03ad03ad
 800cd58:	03ad03ad 	.word	0x03ad03ad
 800cd5c:	03ad03ad 	.word	0x03ad03ad
 800cd60:	03ad03ad 	.word	0x03ad03ad
 800cd64:	03ad03ad 	.word	0x03ad03ad
 800cd68:	03c603c6 	.word	0x03c603c6
 800cd6c:	03c603c6 	.word	0x03c603c6
 800cd70:	03c603c6 	.word	0x03c603c6
 800cd74:	03c603c6 	.word	0x03c603c6
 800cd78:	03c603c6 	.word	0x03c603c6
 800cd7c:	03c603c6 	.word	0x03c603c6
 800cd80:	03c603c6 	.word	0x03c603c6
 800cd84:	03b5      	.short	0x03b5
  INPUT_BYTE(cinfo, c, return FALSE);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	4620      	mov	r0, r4
 800cd8a:	4798      	blx	r3
 800cd8c:	b170      	cbz	r0, 800cdac <read_markers+0x11c>
 800cd8e:	e9d7 5300 	ldrd	r5, r3, [r7]
 800cd92:	e78e      	b.n	800ccb2 <read_markers+0x22>
  INPUT_BYTE(cinfo, c2, return FALSE);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	4620      	mov	r0, r4
 800cd98:	4798      	blx	r3
 800cd9a:	b138      	cbz	r0, 800cdac <read_markers+0x11c>
 800cd9c:	e9d7 5300 	ldrd	r5, r3, [r7]
 800cda0:	e78c      	b.n	800ccbc <read_markers+0x2c>
	if (! next_marker(cinfo))
 800cda2:	4620      	mov	r0, r4
 800cda4:	f7ff fde6 	bl	800c974 <next_marker>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d19e      	bne.n	800ccea <read_markers+0x5a>
	  return JPEG_SUSPENDED;
 800cdac:	2000      	movs	r0, #0
 800cdae:	e0e9      	b.n	800cf84 <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800cdb0:	6823      	ldr	r3, [r4, #0]
 800cdb2:	2268      	movs	r2, #104	; 0x68
 800cdb4:	2101      	movs	r1, #1
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	615a      	str	r2, [r3, #20]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800cdbe:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	b12b      	cbz	r3, 800cdd2 <read_markers+0x142>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800cdc6:	6823      	ldr	r3, [r4, #0]
 800cdc8:	223f      	movs	r2, #63	; 0x3f
 800cdca:	4620      	mov	r0, r4
 800cdcc:	615a      	str	r2, [r3, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800cdd2:	2210      	movs	r2, #16
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800cdda:	f00c fc6d 	bl	80196b8 <memset>
    cinfo->arith_dc_U[i] = 1;
 800cdde:	2210      	movs	r2, #16
 800cde0:	2101      	movs	r1, #1
 800cde2:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800cde6:	f00c fc67 	bl	80196b8 <memset>
    cinfo->arith_ac_K[i] = 5;
 800cdea:	2210      	movs	r2, #16
 800cdec:	2105      	movs	r1, #5
 800cdee:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800cdf2:	f00c fc61 	bl	80196b8 <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800cdf6:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800cdfa:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800cdfc:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800ce00:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800ce04:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800ce08:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 800ce0c:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800ce10:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800ce14:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800ce18:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ce22:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800ce2a:	e735      	b.n	800cc98 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	2101      	movs	r1, #1
 800ce30:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800ce32:	4620      	mov	r0, r4
 800ce34:	f7ff faec 	bl	800c410 <get_sof>
      if (! skip_variable(cinfo))
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d1f3      	bne.n	800ce24 <read_markers+0x194>
 800ce3c:	e7b6      	b.n	800cdac <read_markers+0x11c>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800ce3e:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800ce40:	2200      	movs	r2, #0
 800ce42:	e001      	b.n	800ce48 <read_markers+0x1b8>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800ce44:	2300      	movs	r3, #0
 800ce46:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800ce48:	2100      	movs	r1, #0
 800ce4a:	e7f2      	b.n	800ce32 <read_markers+0x1a2>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	e7f7      	b.n	800ce40 <read_markers+0x1b0>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800ce50:	2301      	movs	r3, #1
 800ce52:	461a      	mov	r2, r3
 800ce54:	e7f8      	b.n	800ce48 <read_markers+0x1b8>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800ce56:	6822      	ldr	r2, [r4, #0]
 800ce58:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800ce60:	6813      	ldr	r3, [r2, #0]
 800ce62:	4798      	blx	r3
      break;
 800ce64:	e7de      	b.n	800ce24 <read_markers+0x194>
  if (! cinfo->marker->saw_SOF)
 800ce66:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800ce6a:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800ce6c:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800ce6e:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800ce72:	b92b      	cbnz	r3, 800ce80 <read_markers+0x1f0>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800ce74:	6823      	ldr	r3, [r4, #0]
 800ce76:	2240      	movs	r2, #64	; 0x40
 800ce78:	4620      	mov	r0, r4
 800ce7a:	615a      	str	r2, [r3, #20]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ce80:	b936      	cbnz	r6, 800ce90 <read_markers+0x200>
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	4620      	mov	r0, r4
 800ce86:	4798      	blx	r3
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d08f      	beq.n	800cdac <read_markers+0x11c>
 800ce8c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ce90:	f895 8000 	ldrb.w	r8, [r5]
 800ce94:	3e01      	subs	r6, #1
 800ce96:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800ce9a:	d076      	beq.n	800cf8a <read_markers+0x2fa>
 800ce9c:	3501      	adds	r5, #1
 800ce9e:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800cea0:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cea2:	4498      	add	r8, r3
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800cea4:	d07a      	beq.n	800cf9c <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cea6:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800cea8:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800ceac:	2269      	movs	r2, #105	; 0x69
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	2101      	movs	r1, #1
 800ceb2:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800ceb4:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800ceb6:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800cebe:	f109 0303 	add.w	r3, r9, #3
 800cec2:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800cec6:	d108      	bne.n	800ceda <read_markers+0x24a>
 800cec8:	f1b9 0f04 	cmp.w	r9, #4
 800cecc:	dc05      	bgt.n	800ceda <read_markers+0x24a>
 800cece:	f1b9 0f00 	cmp.w	r9, #0
 800ced2:	d108      	bne.n	800cee6 <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 800ced4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800ced8:	b92b      	cbnz	r3, 800cee6 <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800ceda:	6823      	ldr	r3, [r4, #0]
 800cedc:	220c      	movs	r2, #12
 800cede:	4620      	mov	r0, r4
 800cee0:	615a      	str	r2, [r3, #20]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800cee6:	f504 73aa 	add.w	r3, r4, #340	; 0x154
  for (i = 0; i < n; i++) {
 800ceea:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800ceee:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800cef2:	9301      	str	r3, [sp, #4]
 800cef4:	45d1      	cmp	r9, sl
 800cef6:	dc5a      	bgt.n	800cfae <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 800cef8:	b93e      	cbnz	r6, 800cf0a <read_markers+0x27a>
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	4620      	mov	r0, r4
 800cefe:	4798      	blx	r3
 800cf00:	2800      	cmp	r0, #0
 800cf02:	f43f af53 	beq.w	800cdac <read_markers+0x11c>
 800cf06:	e9d7 5600 	ldrd	r5, r6, [r7]
 800cf0a:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800cf0c:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800cf0e:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800cf12:	f000 809a 	beq.w	800d04a <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 800cf16:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800cf18:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800cf1a:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800cf1c:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800cf20:	f000 809c 	beq.w	800d05c <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 800cf24:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800cf26:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800cf2a:	2101      	movs	r1, #1
 800cf2c:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800cf2e:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800cf30:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800cf32:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800cf36:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800cf3a:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800cf3e:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	619a      	str	r2, [r3, #24]
 800cf46:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800cf4a:	61da      	str	r2, [r3, #28]
 800cf4c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800cf50:	621a      	str	r2, [r3, #32]
 800cf52:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800cf56:	625a      	str	r2, [r3, #36]	; 0x24
 800cf58:	226b      	movs	r2, #107	; 0x6b
 800cf5a:	615a      	str	r2, [r3, #20]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800cf60:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800cf64:	2200      	movs	r2, #0
 800cf66:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800cf68:	f1b9 0f00 	cmp.w	r9, #0
 800cf6c:	d004      	beq.n	800cf78 <read_markers+0x2e8>
 800cf6e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800cf72:	3301      	adds	r3, #1
 800cf74:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800cf78:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800cf7a:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800cf7c:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800cf80:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800cf84:	b005      	add	sp, #20
 800cf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	4798      	blx	r3
 800cf90:	2800      	cmp	r0, #0
 800cf92:	f43f af0b 	beq.w	800cdac <read_markers+0x11c>
 800cf96:	e9d7 5600 	ldrd	r5, r6, [r7]
 800cf9a:	e780      	b.n	800ce9e <read_markers+0x20e>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	4798      	blx	r3
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	f43f af02 	beq.w	800cdac <read_markers+0x11c>
 800cfa8:	e9d7 5600 	ldrd	r5, r6, [r7]
 800cfac:	e77c      	b.n	800cea8 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800cfae:	b93e      	cbnz	r6, 800cfc0 <read_markers+0x330>
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	4798      	blx	r3
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	f43f aef8 	beq.w	800cdac <read_markers+0x11c>
 800cfbc:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800cfc0:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800cfc2:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800cfc6:	d02f      	beq.n	800d028 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800cfc8:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800cfca:	3e01      	subs	r6, #1
 800cfcc:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cfd0:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cfd8:	4290      	cmp	r0, r2
 800cfda:	db2e      	blt.n	800d03a <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800cfdc:	6821      	ldr	r1, [r4, #0]
 800cfde:	4620      	mov	r0, r4
 800cfe0:	9302      	str	r3, [sp, #8]
 800cfe2:	2304      	movs	r3, #4
 800cfe4:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800cfe8:	6809      	ldr	r1, [r1, #0]
 800cfea:	4788      	blx	r1
 800cfec:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800cfee:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800cff0:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800cff2:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800cff6:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800cff8:	f842 8b04 	str.w	r8, [r2], #4
  for (i = 0; i < n; i++) {
 800cffc:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800d000:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800d004:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800d006:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800d00a:	f8c1 b018 	str.w	fp, [r1, #24]
 800d00e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800d012:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800d014:	61cb      	str	r3, [r1, #28]
 800d016:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d01a:	620b      	str	r3, [r1, #32]
 800d01c:	236a      	movs	r3, #106	; 0x6a
 800d01e:	614b      	str	r3, [r1, #20]
 800d020:	684b      	ldr	r3, [r1, #4]
 800d022:	2101      	movs	r1, #1
 800d024:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800d026:	e765      	b.n	800cef4 <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	4620      	mov	r0, r4
 800d02c:	4798      	blx	r3
 800d02e:	2800      	cmp	r0, #0
 800d030:	f43f aebc 	beq.w	800cdac <read_markers+0x11c>
 800d034:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d038:	e7c7      	b.n	800cfca <read_markers+0x33a>
      if (cc == compptr->component_id)
 800d03a:	f8d8 1000 	ldr.w	r1, [r8]
 800d03e:	458b      	cmp	fp, r1
 800d040:	d0d5      	beq.n	800cfee <read_markers+0x35e>
	 ci++, compptr++) {
 800d042:	3001      	adds	r0, #1
 800d044:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800d048:	e7c6      	b.n	800cfd8 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	4620      	mov	r0, r4
 800d04e:	4798      	blx	r3
 800d050:	2800      	cmp	r0, #0
 800d052:	f43f aeab 	beq.w	800cdac <read_markers+0x11c>
 800d056:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d05a:	e75d      	b.n	800cf18 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	4620      	mov	r0, r4
 800d060:	4798      	blx	r3
 800d062:	2800      	cmp	r0, #0
 800d064:	f43f aea2 	beq.w	800cdac <read_markers+0x11c>
 800d068:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d06c:	e75b      	b.n	800cf26 <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	2257      	movs	r2, #87	; 0x57
 800d072:	4620      	mov	r0, r4
 800d074:	2101      	movs	r1, #1
 800d076:	615a      	str	r2, [r3, #20]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800d07c:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800d07e:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800d080:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800d084:	e77e      	b.n	800cf84 <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 800d086:	69a7      	ldr	r7, [r4, #24]
 800d088:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d08a:	b1e6      	cbz	r6, 800d0c6 <read_markers+0x436>
  INPUT_VARS(cinfo);
 800d08c:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d08e:	f895 9000 	ldrb.w	r9, [r5]
 800d092:	3e01      	subs	r6, #1
 800d094:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800d098:	d01e      	beq.n	800d0d8 <read_markers+0x448>
 800d09a:	3501      	adds	r5, #1
 800d09c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d0a0:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800d0a2:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d0a6:	4499      	add	r9, r3
  length -= 2;
 800d0a8:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800d0ac:	f1b9 0f00 	cmp.w	r9, #0
 800d0b0:	dc1b      	bgt.n	800d0ea <read_markers+0x45a>
  if (length != 0)
 800d0b2:	d005      	beq.n	800d0c0 <read_markers+0x430>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d0b4:	6823      	ldr	r3, [r4, #0]
 800d0b6:	220c      	movs	r2, #12
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	615a      	str	r2, [r3, #20]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800d0c0:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800d0c2:	607e      	str	r6, [r7, #4]
  return TRUE;
 800d0c4:	e6ae      	b.n	800ce24 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	4798      	blx	r3
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	f43f ae6d 	beq.w	800cdac <read_markers+0x11c>
 800d0d2:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d0d6:	e7da      	b.n	800d08e <read_markers+0x3fe>
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	4620      	mov	r0, r4
 800d0dc:	4798      	blx	r3
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	f43f ae64 	beq.w	800cdac <read_markers+0x11c>
 800d0e4:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d0e8:	e7d8      	b.n	800d09c <read_markers+0x40c>
    INPUT_BYTE(cinfo, index, return FALSE);
 800d0ea:	b93e      	cbnz	r6, 800d0fc <read_markers+0x46c>
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	4798      	blx	r3
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	f43f ae5a 	beq.w	800cdac <read_markers+0x11c>
 800d0f8:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800d0fc:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800d0fe:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800d102:	d01f      	beq.n	800d144 <read_markers+0x4b4>
    INPUT_BYTE(cinfo, index, return FALSE);
 800d104:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800d106:	6822      	ldr	r2, [r4, #0]
 800d108:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800d10a:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800d10e:	2101      	movs	r1, #1
 800d110:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800d112:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800d114:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800d118:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800d11c:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800d120:	6852      	ldr	r2, [r2, #4]
 800d122:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800d124:	f1b8 0f1f 	cmp.w	r8, #31
 800d128:	d905      	bls.n	800d136 <read_markers+0x4a6>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800d12a:	6822      	ldr	r2, [r4, #0]
 800d12c:	4620      	mov	r0, r4
 800d12e:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800d132:	6812      	ldr	r2, [r2, #0]
 800d134:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800d136:	f1b8 0f0f 	cmp.w	r8, #15
 800d13a:	44a0      	add	r8, r4
 800d13c:	dd0b      	ble.n	800d156 <read_markers+0x4c6>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800d13e:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800d142:	e7b3      	b.n	800d0ac <read_markers+0x41c>
    INPUT_BYTE(cinfo, val, return FALSE);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	4620      	mov	r0, r4
 800d148:	4798      	blx	r3
 800d14a:	2800      	cmp	r0, #0
 800d14c:	f43f ae2e 	beq.w	800cdac <read_markers+0x11c>
 800d150:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d154:	e7d7      	b.n	800d106 <read_markers+0x476>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800d156:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800d15a:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800d15e:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800d160:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800d164:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800d168:	d9a0      	bls.n	800d0ac <read_markers+0x41c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800d16a:	6822      	ldr	r2, [r4, #0]
 800d16c:	211e      	movs	r1, #30
 800d16e:	4620      	mov	r0, r4
 800d170:	6813      	ldr	r3, [r2, #0]
 800d172:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800d176:	4798      	blx	r3
 800d178:	e798      	b.n	800d0ac <read_markers+0x41c>
      if (! get_dht(cinfo))
 800d17a:	4620      	mov	r0, r4
 800d17c:	f7ff fc7e 	bl	800ca7c <get_dht>
 800d180:	e65a      	b.n	800ce38 <read_markers+0x1a8>
  INPUT_VARS(cinfo);
 800d182:	69a6      	ldr	r6, [r4, #24]
 800d184:	6873      	ldr	r3, [r6, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d186:	b1db      	cbz	r3, 800d1c0 <read_markers+0x530>
  INPUT_VARS(cinfo);
 800d188:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d18a:	f895 8000 	ldrb.w	r8, [r5]
 800d18e:	3b01      	subs	r3, #1
 800d190:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800d194:	d01d      	beq.n	800d1d2 <read_markers+0x542>
 800d196:	3501      	adds	r5, #1
 800d198:	f815 8b01 	ldrb.w	r8, [r5], #1
 800d19c:	f103 3aff 	add.w	sl, r3, #4294967295
 800d1a0:	44b8      	add	r8, r7
  length -= 2;
 800d1a2:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800d1a6:	f1b8 0f00 	cmp.w	r8, #0
 800d1aa:	dc1b      	bgt.n	800d1e4 <read_markers+0x554>
  if (length != 0)
 800d1ac:	d005      	beq.n	800d1ba <read_markers+0x52a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d1ae:	6822      	ldr	r2, [r4, #0]
 800d1b0:	210c      	movs	r1, #12
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	6151      	str	r1, [r2, #20]
 800d1b6:	6812      	ldr	r2, [r2, #0]
 800d1b8:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800d1ba:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800d1be:	e631      	b.n	800ce24 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d1c0:	68f3      	ldr	r3, [r6, #12]
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	4798      	blx	r3
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	f43f adf0 	beq.w	800cdac <read_markers+0x11c>
 800d1cc:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d1d0:	e7db      	b.n	800d18a <read_markers+0x4fa>
 800d1d2:	68f3      	ldr	r3, [r6, #12]
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	4798      	blx	r3
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	f43f ade7 	beq.w	800cdac <read_markers+0x11c>
 800d1de:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d1e2:	e7d9      	b.n	800d198 <read_markers+0x508>
    length--;
 800d1e4:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800d1e8:	f1ba 0f00 	cmp.w	sl, #0
 800d1ec:	d107      	bne.n	800d1fe <read_markers+0x56e>
 800d1ee:	68f3      	ldr	r3, [r6, #12]
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	4798      	blx	r3
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	f43f add9 	beq.w	800cdac <read_markers+0x11c>
 800d1fa:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800d1fe:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800d202:	2153      	movs	r1, #83	; 0x53
 800d204:	6822      	ldr	r2, [r4, #0]
 800d206:	4620      	mov	r0, r4
    prec = n >> 4;
 800d208:	ea4f 1329 	mov.w	r3, r9, asr #4
 800d20c:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800d210:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800d214:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800d216:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800d218:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800d21c:	6852      	ldr	r2, [r2, #4]
 800d21e:	2101      	movs	r1, #1
 800d220:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800d222:	f019 0f0c 	tst.w	r9, #12
 800d226:	d006      	beq.n	800d236 <read_markers+0x5a6>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800d228:	6822      	ldr	r2, [r4, #0]
 800d22a:	2120      	movs	r1, #32
 800d22c:	4620      	mov	r0, r4
 800d22e:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800d232:	6812      	ldr	r2, [r2, #0]
 800d234:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800d236:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800d23a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d23e:	b922      	cbnz	r2, 800d24a <read_markers+0x5ba>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800d240:	4620      	mov	r0, r4
 800d242:	f7fb f857 	bl	80082f4 <jpeg_alloc_quant_table>
 800d246:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800d24a:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800d24c:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800d250:	2b00      	cmp	r3, #0
 800d252:	d057      	beq.n	800d304 <read_markers+0x674>
      if (length < DCTSIZE2 * 2) {
 800d254:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800d258:	dc6c      	bgt.n	800d334 <read_markers+0x6a4>
 800d25a:	f1ab 0202 	sub.w	r2, fp, #2
 800d25e:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800d262:	2001      	movs	r0, #1
 800d264:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800d268:	4291      	cmp	r1, r2
 800d26a:	d1fb      	bne.n	800d264 <read_markers+0x5d4>
	count = length >> 1;
 800d26c:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800d270:	f1b9 0f19 	cmp.w	r9, #25
 800d274:	d062      	beq.n	800d33c <read_markers+0x6ac>
 800d276:	dc53      	bgt.n	800d320 <read_markers+0x690>
 800d278:	f1b9 0f09 	cmp.w	r9, #9
 800d27c:	d060      	beq.n	800d340 <read_markers+0x6b0>
 800d27e:	f1b9 0f10 	cmp.w	r9, #16
 800d282:	d05f      	beq.n	800d344 <read_markers+0x6b4>
    default:    natural_order = jpeg_natural_order;  break;
 800d284:	4f85      	ldr	r7, [pc, #532]	; (800d49c <read_markers+0x80c>)
 800d286:	4a86      	ldr	r2, [pc, #536]	; (800d4a0 <read_markers+0x810>)
 800d288:	f1b9 0f04 	cmp.w	r9, #4
 800d28c:	bf18      	it	ne
 800d28e:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800d290:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800d294:	9302      	str	r3, [sp, #8]
 800d296:	9b02      	ldr	r3, [sp, #8]
 800d298:	42bb      	cmp	r3, r7
 800d29a:	d157      	bne.n	800d34c <read_markers+0x6bc>
    if (cinfo->err->trace_level >= 2) {
 800d29c:	6822      	ldr	r2, [r4, #0]
 800d29e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d2a0:	2a01      	cmp	r2, #1
 800d2a2:	dd26      	ble.n	800d2f2 <read_markers+0x662>
 800d2a4:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800d2a8:	275f      	movs	r7, #95	; 0x5f
 800d2aa:	f8bb 1000 	ldrh.w	r1, [fp]
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800d2b2:	f10b 0b10 	add.w	fp, fp, #16
 800d2b6:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800d2b8:	6191      	str	r1, [r2, #24]
 800d2ba:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800d2be:	61d1      	str	r1, [r2, #28]
 800d2c0:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800d2c4:	6211      	str	r1, [r2, #32]
 800d2c6:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800d2ca:	6251      	str	r1, [r2, #36]	; 0x24
 800d2cc:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800d2d0:	6291      	str	r1, [r2, #40]	; 0x28
 800d2d2:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800d2d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 800d2d8:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800d2dc:	6311      	str	r1, [r2, #48]	; 0x30
 800d2de:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800d2e2:	6157      	str	r7, [r2, #20]
 800d2e4:	6351      	str	r1, [r2, #52]	; 0x34
 800d2e6:	2102      	movs	r1, #2
 800d2e8:	6852      	ldr	r2, [r2, #4]
 800d2ea:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800d2ec:	9b02      	ldr	r3, [sp, #8]
 800d2ee:	459b      	cmp	fp, r3
 800d2f0:	d1db      	bne.n	800d2aa <read_markers+0x61a>
    if (prec) length -= count;
 800d2f2:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800d2f4:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f43f af54 	beq.w	800d1a6 <read_markers+0x516>
 800d2fe:	eba8 0809 	sub.w	r8, r8, r9
 800d302:	e750      	b.n	800d1a6 <read_markers+0x516>
      if (length < DCTSIZE2) {
 800d304:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800d308:	dc14      	bgt.n	800d334 <read_markers+0x6a4>
 800d30a:	f1ab 0202 	sub.w	r2, fp, #2
 800d30e:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800d312:	2001      	movs	r0, #1
 800d314:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800d318:	4291      	cmp	r1, r2
 800d31a:	d1fb      	bne.n	800d314 <read_markers+0x684>
 800d31c:	46c1      	mov	r9, r8
 800d31e:	e7a7      	b.n	800d270 <read_markers+0x5e0>
    switch (count) {
 800d320:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800d324:	d010      	beq.n	800d348 <read_markers+0x6b8>
    default:    natural_order = jpeg_natural_order;  break;
 800d326:	4f5e      	ldr	r7, [pc, #376]	; (800d4a0 <read_markers+0x810>)
 800d328:	4b5e      	ldr	r3, [pc, #376]	; (800d4a4 <read_markers+0x814>)
 800d32a:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800d32e:	bf08      	it	eq
 800d330:	461f      	moveq	r7, r3
 800d332:	e7ad      	b.n	800d290 <read_markers+0x600>
	count = DCTSIZE2;
 800d334:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800d338:	4f59      	ldr	r7, [pc, #356]	; (800d4a0 <read_markers+0x810>)
 800d33a:	e7a9      	b.n	800d290 <read_markers+0x600>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800d33c:	4f5a      	ldr	r7, [pc, #360]	; (800d4a8 <read_markers+0x818>)
 800d33e:	e7a7      	b.n	800d290 <read_markers+0x600>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800d340:	4f5a      	ldr	r7, [pc, #360]	; (800d4ac <read_markers+0x81c>)
 800d342:	e7a5      	b.n	800d290 <read_markers+0x600>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800d344:	4f5a      	ldr	r7, [pc, #360]	; (800d4b0 <read_markers+0x820>)
 800d346:	e7a3      	b.n	800d290 <read_markers+0x600>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800d348:	4f5a      	ldr	r7, [pc, #360]	; (800d4b4 <read_markers+0x824>)
 800d34a:	e7a1      	b.n	800d290 <read_markers+0x600>
      if (prec)
 800d34c:	9b01      	ldr	r3, [sp, #4]
 800d34e:	b333      	cbz	r3, 800d39e <read_markers+0x70e>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d350:	f1ba 0f00 	cmp.w	sl, #0
 800d354:	d107      	bne.n	800d366 <read_markers+0x6d6>
 800d356:	68f3      	ldr	r3, [r6, #12]
 800d358:	4620      	mov	r0, r4
 800d35a:	4798      	blx	r3
 800d35c:	2800      	cmp	r0, #0
 800d35e:	f43f ad25 	beq.w	800cdac <read_markers+0x11c>
 800d362:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800d366:	782a      	ldrb	r2, [r5, #0]
 800d368:	f1ba 0301 	subs.w	r3, sl, #1
 800d36c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d370:	d00a      	beq.n	800d388 <read_markers+0x6f8>
 800d372:	3501      	adds	r5, #1
 800d374:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d378:	f103 3aff 	add.w	sl, r3, #4294967295
 800d37c:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800d37e:	f857 1b04 	ldr.w	r1, [r7], #4
 800d382:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800d386:	e786      	b.n	800d296 <read_markers+0x606>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d388:	68f3      	ldr	r3, [r6, #12]
 800d38a:	4620      	mov	r0, r4
 800d38c:	9203      	str	r2, [sp, #12]
 800d38e:	4798      	blx	r3
 800d390:	2800      	cmp	r0, #0
 800d392:	f43f ad0b 	beq.w	800cdac <read_markers+0x11c>
 800d396:	9a03      	ldr	r2, [sp, #12]
 800d398:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d39c:	e7ea      	b.n	800d374 <read_markers+0x6e4>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800d39e:	f1ba 0f00 	cmp.w	sl, #0
 800d3a2:	d107      	bne.n	800d3b4 <read_markers+0x724>
 800d3a4:	68f3      	ldr	r3, [r6, #12]
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	4798      	blx	r3
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	f43f acfe 	beq.w	800cdac <read_markers+0x11c>
 800d3b0:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800d3b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3b8:	f815 2b01 	ldrb.w	r2, [r5], #1
 800d3bc:	e7df      	b.n	800d37e <read_markers+0x6ee>
  INPUT_VARS(cinfo);
 800d3be:	69a7      	ldr	r7, [r4, #24]
 800d3c0:	687b      	ldr	r3, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d3c2:	b353      	cbz	r3, 800d41a <read_markers+0x78a>
  INPUT_VARS(cinfo);
 800d3c4:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d3c6:	782a      	ldrb	r2, [r5, #0]
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	ea4f 2802 	mov.w	r8, r2, lsl #8
 800d3ce:	d02d      	beq.n	800d42c <read_markers+0x79c>
 800d3d0:	3501      	adds	r5, #1
 800d3d2:	782a      	ldrb	r2, [r5, #0]
 800d3d4:	1e5e      	subs	r6, r3, #1
 800d3d6:	4442      	add	r2, r8
  if (length != 4)
 800d3d8:	2a04      	cmp	r2, #4
 800d3da:	d005      	beq.n	800d3e8 <read_markers+0x758>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d3dc:	6823      	ldr	r3, [r4, #0]
 800d3de:	220c      	movs	r2, #12
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	615a      	str	r2, [r3, #20]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d3e8:	b34e      	cbz	r6, 800d43e <read_markers+0x7ae>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d3ea:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d3ec:	f895 8000 	ldrb.w	r8, [r5]
 800d3f0:	3e01      	subs	r6, #1
 800d3f2:	ea4f 2908 	mov.w	r9, r8, lsl #8
 800d3f6:	d02b      	beq.n	800d450 <read_markers+0x7c0>
 800d3f8:	3501      	adds	r5, #1
 800d3fa:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800d3fe:	2254      	movs	r2, #84	; 0x54
 800d400:	6823      	ldr	r3, [r4, #0]
 800d402:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d404:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800d406:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d408:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800d40a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800d412:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800d416:	603d      	str	r5, [r7, #0]
 800d418:	e653      	b.n	800d0c2 <read_markers+0x432>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	4620      	mov	r0, r4
 800d41e:	4798      	blx	r3
 800d420:	2800      	cmp	r0, #0
 800d422:	f43f acc3 	beq.w	800cdac <read_markers+0x11c>
 800d426:	e9d7 5300 	ldrd	r5, r3, [r7]
 800d42a:	e7cc      	b.n	800d3c6 <read_markers+0x736>
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	4620      	mov	r0, r4
 800d430:	4798      	blx	r3
 800d432:	2800      	cmp	r0, #0
 800d434:	f43f acba 	beq.w	800cdac <read_markers+0x11c>
 800d438:	e9d7 5300 	ldrd	r5, r3, [r7]
 800d43c:	e7c9      	b.n	800d3d2 <read_markers+0x742>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	4620      	mov	r0, r4
 800d442:	4798      	blx	r3
 800d444:	2800      	cmp	r0, #0
 800d446:	f43f acb1 	beq.w	800cdac <read_markers+0x11c>
 800d44a:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d44e:	e7cd      	b.n	800d3ec <read_markers+0x75c>
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	4620      	mov	r0, r4
 800d454:	4798      	blx	r3
 800d456:	2800      	cmp	r0, #0
 800d458:	f43f aca8 	beq.w	800cdac <read_markers+0x11c>
 800d45c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800d460:	e7cb      	b.n	800d3fa <read_markers+0x76a>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800d462:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800d466:	3bd8      	subs	r3, #216	; 0xd8
 800d468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d46c:	4620      	mov	r0, r4
 800d46e:	4798      	blx	r3
 800d470:	e4e2      	b.n	800ce38 <read_markers+0x1a8>
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800d472:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d476:	69db      	ldr	r3, [r3, #28]
 800d478:	e7f8      	b.n	800d46c <read_markers+0x7dc>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800d47a:	6822      	ldr	r2, [r4, #0]
 800d47c:	215e      	movs	r1, #94	; 0x5e
 800d47e:	4620      	mov	r0, r4
 800d480:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800d484:	6853      	ldr	r3, [r2, #4]
 800d486:	2101      	movs	r1, #1
 800d488:	4798      	blx	r3
      break;
 800d48a:	e4cb      	b.n	800ce24 <read_markers+0x194>
      if (! skip_variable(cinfo))
 800d48c:	4620      	mov	r0, r4
 800d48e:	f7ff fa36 	bl	800c8fe <skip_variable>
 800d492:	e4d1      	b.n	800ce38 <read_markers+0x1a8>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800d494:	6822      	ldr	r2, [r4, #0]
 800d496:	2146      	movs	r1, #70	; 0x46
 800d498:	e4df      	b.n	800ce5a <read_markers+0x1ca>
 800d49a:	bf00      	nop
 800d49c:	080fb530 	.word	0x080fb530
 800d4a0:	080fb3f0 	.word	0x080fb3f0
 800d4a4:	080fb7d8 	.word	0x080fb7d8
 800d4a8:	080fb664 	.word	0x080fb664
 800d4ac:	080fb580 	.word	0x080fb580
 800d4b0:	080fb5e4 	.word	0x080fb5e4
 800d4b4:	080fb708 	.word	0x080fb708

0800d4b8 <jpeg_resync_to_restart>:
{
 800d4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4bc:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800d4be:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800d4c0:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800d4c4:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800d4c6:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800d4ca:	61d9      	str	r1, [r3, #28]
 800d4cc:	f04f 31ff 	mov.w	r1, #4294967295
{
 800d4d0:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800d4d2:	f008 0807 	and.w	r8, r8, #7
 800d4d6:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800d4da:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800d4e2:	2dbf      	cmp	r5, #191	; 0xbf
 800d4e4:	dd2e      	ble.n	800d544 <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800d4e6:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800d4ea:	2b07      	cmp	r3, #7
 800d4ec:	d828      	bhi.n	800d540 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800d4ee:	4545      	cmp	r5, r8
 800d4f0:	d026      	beq.n	800d540 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800d4f2:	1cbb      	adds	r3, r7, #2
 800d4f4:	f003 0307 	and.w	r3, r3, #7
 800d4f8:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800d4fa:	429d      	cmp	r5, r3
 800d4fc:	d020      	beq.n	800d540 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800d4fe:	1e7b      	subs	r3, r7, #1
 800d500:	f003 0307 	and.w	r3, r3, #7
 800d504:	33d0      	adds	r3, #208	; 0xd0
 800d506:	429d      	cmp	r5, r3
 800d508:	d01c      	beq.n	800d544 <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800d50a:	1ebc      	subs	r4, r7, #2
 800d50c:	f004 0407 	and.w	r4, r4, #7
 800d510:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800d512:	42a5      	cmp	r5, r4
 800d514:	bf14      	ite	ne
 800d516:	2401      	movne	r4, #1
 800d518:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800d51a:	6833      	ldr	r3, [r6, #0]
 800d51c:	2263      	movs	r2, #99	; 0x63
 800d51e:	2104      	movs	r1, #4
 800d520:	4630      	mov	r0, r6
 800d522:	61dc      	str	r4, [r3, #28]
 800d524:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	4798      	blx	r3
    switch (action) {
 800d52c:	2c02      	cmp	r4, #2
 800d52e:	d00b      	beq.n	800d548 <jpeg_resync_to_restart+0x90>
 800d530:	2c03      	cmp	r4, #3
 800d532:	d002      	beq.n	800d53a <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800d534:	2300      	movs	r3, #0
 800d536:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800d53a:	2001      	movs	r0, #1
}
 800d53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800d540:	2403      	movs	r4, #3
 800d542:	e7ea      	b.n	800d51a <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800d544:	2402      	movs	r4, #2
 800d546:	e7e8      	b.n	800d51a <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800d548:	4630      	mov	r0, r6
 800d54a:	f7ff fa13 	bl	800c974 <next_marker>
 800d54e:	2800      	cmp	r0, #0
 800d550:	d0f4      	beq.n	800d53c <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800d552:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800d556:	e7c4      	b.n	800d4e2 <jpeg_resync_to_restart+0x2a>

0800d558 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800d558:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d55a:	6843      	ldr	r3, [r0, #4]
 800d55c:	22ac      	movs	r2, #172	; 0xac
 800d55e:	2100      	movs	r1, #0
{
 800d560:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800d566:	4b11      	ldr	r3, [pc, #68]	; (800d5ac <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800d568:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d56c:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800d56e:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800d570:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800d574:	4b0e      	ldr	r3, [pc, #56]	; (800d5b0 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800d576:	4a0f      	ldr	r2, [pc, #60]	; (800d5b4 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800d578:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800d57a:	4b0f      	ldr	r3, [pc, #60]	; (800d5b8 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800d57c:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800d57e:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800d580:	2300      	movs	r3, #0
 800d582:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800d584:	f100 0320 	add.w	r3, r0, #32
    marker->process_APPn[i] = skip_variable;
 800d588:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < 16; i++) {
 800d58c:	4299      	cmp	r1, r3
 800d58e:	d1fb      	bne.n	800d588 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800d590:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800d594:	2240      	movs	r2, #64	; 0x40
 800d596:	2100      	movs	r1, #0
 800d598:	f00c f88e 	bl	80196b8 <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800d59c:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800d59e:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800d5a0:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800d5a2:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800d5a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800d5a8:	f7ff ba59 	b.w	800ca5e <reset_marker_reader>
 800d5ac:	0800ca5f 	.word	0x0800ca5f
 800d5b0:	0800cc91 	.word	0x0800cc91
 800d5b4:	0800c8ff 	.word	0x0800c8ff
 800d5b8:	0800ca01 	.word	0x0800ca01
 800d5bc:	0800c829 	.word	0x0800c829

0800d5c0 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800d5c0:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800d5c2:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800d5c6:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800d5c8:	68ab      	ldr	r3, [r5, #8]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d02a      	beq.n	800d624 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800d5ce:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800d5d0:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800d5d4:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800d5da:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800d5de:	2102      	movs	r1, #2
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800d5e6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800d5ea:	2102      	movs	r1, #2
 800d5ec:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800d5f2:	68a2      	ldr	r2, [r4, #8]
 800d5f4:	b1aa      	cbz	r2, 800d622 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800d5f6:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800d5f8:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800d5fa:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800d5fc:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800d5fe:	bf14      	ite	ne
 800d600:	2102      	movne	r1, #2
 800d602:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800d604:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800d606:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800d608:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800d60a:	b151      	cbz	r1, 800d622 <prepare_for_output_pass+0x62>
 800d60c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800d610:	6949      	ldr	r1, [r1, #20]
 800d612:	b931      	cbnz	r1, 800d622 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800d614:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800d616:	2900      	cmp	r1, #0
 800d618:	bf14      	ite	ne
 800d61a:	2102      	movne	r1, #2
 800d61c:	2101      	moveq	r1, #1
 800d61e:	440b      	add	r3, r1
 800d620:	6113      	str	r3, [r2, #16]
    }
  }
}
 800d622:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800d624:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800d626:	b16b      	cbz	r3, 800d644 <prepare_for_output_pass+0x84>
 800d628:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800d62c:	b953      	cbnz	r3, 800d644 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800d62e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d630:	2b00      	cmp	r3, #0
 800d632:	d037      	beq.n	800d6a4 <prepare_for_output_pass+0xe4>
 800d634:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d636:	2b00      	cmp	r3, #0
 800d638:	d034      	beq.n	800d6a4 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800d63a:	69ab      	ldr	r3, [r5, #24]
 800d63c:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800d640:	2301      	movs	r3, #1
 800d642:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800d644:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800d648:	4620      	mov	r0, r4
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800d64e:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800d652:	4620      	mov	r0, r4
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800d658:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d1c9      	bne.n	800d5f2 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800d65e:	692b      	ldr	r3, [r5, #16]
 800d660:	b923      	cbnz	r3, 800d66c <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800d662:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800d666:	4620      	mov	r0, r4
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800d66c:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800d670:	4620      	mov	r0, r4
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800d676:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d678:	b12b      	cbz	r3, 800d686 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800d67a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800d67e:	4620      	mov	r0, r4
 800d680:	68a9      	ldr	r1, [r5, #8]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800d686:	68aa      	ldr	r2, [r5, #8]
 800d688:	4620      	mov	r0, r4
 800d68a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800d68e:	2a00      	cmp	r2, #0
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	bf14      	ite	ne
 800d694:	2103      	movne	r1, #3
 800d696:	2100      	moveq	r1, #0
 800d698:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800d69a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800d69e:	2100      	movs	r1, #0
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	e7a4      	b.n	800d5ee <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800d6a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6a6:	b11b      	cbz	r3, 800d6b0 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800d6a8:	696b      	ldr	r3, [r5, #20]
 800d6aa:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800d6ae:	e7c9      	b.n	800d644 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800d6b0:	6823      	ldr	r3, [r4, #0]
 800d6b2:	222f      	movs	r2, #47	; 0x2f
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	615a      	str	r2, [r3, #20]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4798      	blx	r3
 800d6bc:	e7c2      	b.n	800d644 <prepare_for_output_pass+0x84>

0800d6be <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800d6be:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800d6c0:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800d6c2:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800d6c6:	b11a      	cbz	r2, 800d6d0 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800d6c8:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	4798      	blx	r3
  master->pass_number++;
 800d6d0:	68e3      	ldr	r3, [r4, #12]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	60e3      	str	r3, [r4, #12]
}
 800d6d6:	bd10      	pop	{r4, pc}

0800d6d8 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800d6d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800d6da:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d143      	bne.n	800d768 <use_merged_upsample+0x90>
 800d6e0:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 800d6e4:	2a00      	cmp	r2, #0
 800d6e6:	d141      	bne.n	800d76c <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800d6e8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800d6ec:	2b03      	cmp	r3, #3
 800d6ee:	d139      	bne.n	800d764 <use_merged_upsample+0x8c>
 800d6f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d6f2:	2b03      	cmp	r3, #3
 800d6f4:	d136      	bne.n	800d764 <use_merged_upsample+0x8c>
 800d6f6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d132      	bne.n	800d764 <use_merged_upsample+0x8c>
      cinfo->out_color_space != JCS_RGB ||
 800d6fe:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800d700:	2b03      	cmp	r3, #3
 800d702:	d12f      	bne.n	800d764 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800d704:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800d708:	6899      	ldr	r1, [r3, #8]
 800d70a:	2902      	cmp	r1, #2
 800d70c:	d12a      	bne.n	800d764 <use_merged_upsample+0x8c>
 800d70e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800d710:	2901      	cmp	r1, #1
 800d712:	d127      	bne.n	800d764 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800d714:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800d718:	2901      	cmp	r1, #1
 800d71a:	d123      	bne.n	800d764 <use_merged_upsample+0x8c>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800d71c:	68d9      	ldr	r1, [r3, #12]
 800d71e:	2902      	cmp	r1, #2
 800d720:	dc20      	bgt.n	800d764 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800d722:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800d724:	2901      	cmp	r1, #1
 800d726:	d11d      	bne.n	800d764 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800d728:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800d72c:	2901      	cmp	r1, #1
 800d72e:	d119      	bne.n	800d764 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800d730:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
 800d734:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d736:	42a1      	cmp	r1, r4
 800d738:	d114      	bne.n	800d764 <use_merged_upsample+0x8c>
 800d73a:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800d73c:	42a1      	cmp	r1, r4
 800d73e:	d111      	bne.n	800d764 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800d740:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800d744:	42a1      	cmp	r1, r4
 800d746:	d10d      	bne.n	800d764 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800d748:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800d74c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800d74e:	4281      	cmp	r1, r0
 800d750:	d108      	bne.n	800d764 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800d752:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d756:	4281      	cmp	r1, r0
 800d758:	d104      	bne.n	800d764 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800d75a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800d75e:	1a53      	subs	r3, r2, r1
 800d760:	425a      	negs	r2, r3
 800d762:	415a      	adcs	r2, r3
}
 800d764:	4610      	mov	r0, r2
 800d766:	bd10      	pop	{r4, pc}
    return FALSE;
 800d768:	2200      	movs	r2, #0
 800d76a:	e7fb      	b.n	800d764 <use_merged_upsample+0x8c>
 800d76c:	461a      	mov	r2, r3
 800d76e:	e7f9      	b.n	800d764 <use_merged_upsample+0x8c>

0800d770 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800d770:	6942      	ldr	r2, [r0, #20]
 800d772:	2aca      	cmp	r2, #202	; 0xca
{
 800d774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d778:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800d77a:	d005      	beq.n	800d788 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800d77c:	6803      	ldr	r3, [r0, #0]
 800d77e:	2115      	movs	r1, #21
 800d780:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800d788:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d78a:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800d78c:	f7fe faf8 	bl	800bd80 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d790:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800d794:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800d798:	462b      	mov	r3, r5
 800d79a:	45b4      	cmp	ip, r6
 800d79c:	dd6b      	ble.n	800d876 <jpeg_calc_output_dimensions+0x106>
 800d79e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800d7a0:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800d7a2:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800d7a6:	2a00      	cmp	r2, #0
 800d7a8:	bf14      	ite	ne
 800d7aa:	2708      	movne	r7, #8
 800d7ac:	2704      	moveq	r7, #4
 800d7ae:	e00a      	b.n	800d7c6 <jpeg_calc_output_dimensions+0x56>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800d7b0:	689a      	ldr	r2, [r3, #8]
 800d7b2:	f8d4 e138 	ldr.w	lr, [r4, #312]	; 0x138
 800d7b6:	434a      	muls	r2, r1
 800d7b8:	0052      	lsls	r2, r2, #1
 800d7ba:	fb9e f9f2 	sdiv	r9, lr, r2
 800d7be:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800d7c2:	b922      	cbnz	r2, 800d7ce <jpeg_calc_output_dimensions+0x5e>
      ssize = ssize * 2;
 800d7c4:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800d7c6:	fb01 f008 	mul.w	r0, r1, r8
 800d7ca:	42b8      	cmp	r0, r7
 800d7cc:	ddf0      	ble.n	800d7b0 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800d7ce:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800d7d0:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800d7d4:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
 800d7d8:	fb08 f109 	mul.w	r1, r8, r9
 800d7dc:	42b9      	cmp	r1, r7
 800d7de:	dd0b      	ble.n	800d7f8 <jpeg_calc_output_dimensions+0x88>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800d7e0:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800d7e4:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800d7e6:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800d7ea:	dc14      	bgt.n	800d816 <jpeg_calc_output_dimensions+0xa6>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800d7ec:	0042      	lsls	r2, r0, #1
 800d7ee:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800d7f2:	bfc8      	it	gt
 800d7f4:	629a      	strgt	r2, [r3, #40]	; 0x28
 800d7f6:	e00f      	b.n	800d818 <jpeg_calc_output_dimensions+0xa8>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800d7f8:	68da      	ldr	r2, [r3, #12]
 800d7fa:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800d7fe:	fb02 f208 	mul.w	r2, r2, r8
 800d802:	0052      	lsls	r2, r2, #1
 800d804:	fb9e faf2 	sdiv	sl, lr, r2
 800d808:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800d80c:	2a00      	cmp	r2, #0
 800d80e:	d1e7      	bne.n	800d7e0 <jpeg_calc_output_dimensions+0x70>
      ssize = ssize * 2;
 800d810:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d814:	e7e0      	b.n	800d7d8 <jpeg_calc_output_dimensions+0x68>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800d816:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800d818:	3601      	adds	r6, #1
 800d81a:	3358      	adds	r3, #88	; 0x58
 800d81c:	e7bd      	b.n	800d79a <jpeg_calc_output_dimensions+0x2a>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800d81e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
       ci++, compptr++) {
 800d820:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800d822:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800d824:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d826:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800d82a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800d82e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800d830:	69e3      	ldr	r3, [r4, #28]
 800d832:	4351      	muls	r1, r2
 800d834:	4358      	muls	r0, r3
 800d836:	f007 fe71 	bl	801551c <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800d83a:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800d83e:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800d842:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d846:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800d84a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800d84e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800d850:	6a23      	ldr	r3, [r4, #32]
 800d852:	4351      	muls	r1, r2
 800d854:	4358      	muls	r0, r3
 800d856:	f007 fe61 	bl	801551c <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800d85a:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d85e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d860:	42b2      	cmp	r2, r6
 800d862:	dcdc      	bgt.n	800d81e <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800d864:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800d868:	2b03      	cmp	r3, #3
 800d86a:	d806      	bhi.n	800d87a <jpeg_calc_output_dimensions+0x10a>
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d809      	bhi.n	800d884 <jpeg_calc_output_dimensions+0x114>
 800d870:	d009      	beq.n	800d886 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = cinfo->num_components;
 800d872:	67a2      	str	r2, [r4, #120]	; 0x78
    break;
 800d874:	e008      	b.n	800d888 <jpeg_calc_output_dimensions+0x118>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d876:	2600      	movs	r6, #0
 800d878:	e7f1      	b.n	800d85e <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800d87a:	3b04      	subs	r3, #4
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d8f8      	bhi.n	800d872 <jpeg_calc_output_dimensions+0x102>
    cinfo->out_color_components = 4;
 800d880:	2304      	movs	r3, #4
 800d882:	e000      	b.n	800d886 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800d884:	2303      	movs	r3, #3
    cinfo->out_color_components = 4;
 800d886:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800d888:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d88a:	b95b      	cbnz	r3, 800d8a4 <jpeg_calc_output_dimensions+0x134>
 800d88c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  if (use_merged_upsample(cinfo))
 800d88e:	4620      	mov	r0, r4
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800d890:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800d892:	f7ff ff21 	bl	800d6d8 <use_merged_upsample>
 800d896:	b138      	cbz	r0, 800d8a8 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800d898:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800d89c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800d8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	e7f2      	b.n	800d88e <jpeg_calc_output_dimensions+0x11e>
    cinfo->rec_outbuf_height = 1;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e7f7      	b.n	800d89c <jpeg_calc_output_dimensions+0x12c>

0800d8ac <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800d8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8ae:	6843      	ldr	r3, [r0, #4]
 800d8b0:	221c      	movs	r2, #28
 800d8b2:	2101      	movs	r1, #1
{
 800d8b4:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8b6:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800d8b8:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8ba:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800d8bc:	4b6d      	ldr	r3, [pc, #436]	; (800da74 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800d8be:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8c2:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800d8c4:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800d8c6:	4b6c      	ldr	r3, [pc, #432]	; (800da78 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 800d8c8:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800d8ca:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	f7ff ff4f 	bl	800d770 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8d2:	6863      	ldr	r3, [r4, #4]
 800d8d4:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800d8d8:	2101      	movs	r1, #1
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4620      	mov	r0, r4
 800d8de:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800d8e0:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d8e4:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800d8e6:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800d8e8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800d8ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8f0:	f00b fee2 	bl	80196b8 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800d8f4:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 800d8f8:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800d8fa:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800d8fe:	3101      	adds	r1, #1
 800d900:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d904:	d1f9      	bne.n	800d8fa <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 800d906:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800d90a:	21ff      	movs	r1, #255	; 0xff
 800d90c:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 800d910:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 800d912:	f00b fed1 	bl	80196b8 <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800d916:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800d91a:	2100      	movs	r1, #0
 800d91c:	f507 7060 	add.w	r0, r7, #896	; 0x380
 800d920:	f00b feca 	bl	80196b8 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800d924:	2280      	movs	r2, #128	; 0x80
 800d926:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800d92a:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 800d92e:	f00b feb5 	bl	801969c <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800d932:	4620      	mov	r0, r4
  master->pass_number = 0;
 800d934:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800d936:	f7ff fecf 	bl	800d6d8 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800d93a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800d93c:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800d93e:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800d942:	b1b3      	cbz	r3, 800d972 <jinit_master_decompress+0xc6>
 800d944:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d946:	b1a2      	cbz	r2, 800d972 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 800d948:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d166      	bne.n	800da1c <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 800d94e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d950:	2b03      	cmp	r3, #3
 800d952:	f04f 0301 	mov.w	r3, #1
 800d956:	d068      	beq.n	800da2a <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 800d958:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800d95a:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800d95c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800d960:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800d964:	4620      	mov	r0, r4
 800d966:	f006 fef1 	bl	801474c <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800d96a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800d96e:	616b      	str	r3, [r5, #20]
 800d970:	e062      	b.n	800da38 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 800d972:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800d976:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1e5      	bne.n	800d948 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 800d97c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d97e:	b94b      	cbnz	r3, 800d994 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 800d980:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800d982:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800d984:	2b00      	cmp	r3, #0
 800d986:	d069      	beq.n	800da5c <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800d988:	f000 fa1c 	bl	800ddc4 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800d98c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800d98e:	4620      	mov	r0, r4
 800d990:	f000 fb98 	bl	800e0c4 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800d994:	4620      	mov	r0, r4
 800d996:	f7fc fda7 	bl	800a4e8 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800d99a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800d99e:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d061      	beq.n	800da68 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 800d9a4:	f7fb fbfa 	bl	800919c <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800d9a8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800d9ac:	691b      	ldr	r3, [r3, #16]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d15d      	bne.n	800da6e <jinit_master_decompress+0x1c2>
 800d9b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d9b4:	3900      	subs	r1, #0
 800d9b6:	bf18      	it	ne
 800d9b8:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	f7fc f8fc 	bl	8009bb8 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800d9c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d9c2:	b911      	cbnz	r1, 800d9ca <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	f7fe fca3 	bl	800c310 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800d9ca:	6863      	ldr	r3, [r4, #4]
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800d9d2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800d9dc:	68a2      	ldr	r2, [r4, #8]
 800d9de:	b1e2      	cbz	r2, 800da1a <jinit_master_decompress+0x16e>
 800d9e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9e2:	b9d3      	cbnz	r3, 800da1a <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 800d9e4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	b1b3      	cbz	r3, 800da1a <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 800d9ec:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 800d9f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (cinfo->progressive_mode) {
 800d9f2:	b111      	cbz	r1, 800d9fa <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 800d9f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d9f8:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800d9fa:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 800d9fe:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800da00:	434b      	muls	r3, r1
    cinfo->progress->pass_counter = 0L;
 800da02:	6050      	str	r0, [r2, #4]
    cinfo->progress->completed_passes = 0;
 800da04:	e9c2 3002 	strd	r3, r0, [r2, #8]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800da08:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800da0a:	4283      	cmp	r3, r0
 800da0c:	bf14      	ite	ne
 800da0e:	2303      	movne	r3, #3
 800da10:	2302      	moveq	r3, #2
 800da12:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800da14:	68eb      	ldr	r3, [r5, #12]
 800da16:	3301      	adds	r3, #1
 800da18:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800da1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	2230      	movs	r2, #48	; 0x30
 800da20:	4620      	mov	r0, r4
 800da22:	615a      	str	r2, [r3, #20]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4798      	blx	r3
 800da28:	e791      	b.n	800d94e <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 800da2a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800da2e:	b17a      	cbz	r2, 800da50 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 800da30:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800da32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da34:	2b00      	cmp	r3, #0
 800da36:	d195      	bne.n	800d964 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800da38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800da3a:	b913      	cbnz	r3, 800da42 <jinit_master_decompress+0x196>
 800da3c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d09c      	beq.n	800d97c <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 800da42:	4620      	mov	r0, r4
 800da44:	f007 fcfe 	bl	8015444 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800da48:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800da4c:	61ab      	str	r3, [r5, #24]
 800da4e:	e795      	b.n	800d97c <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 800da50:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800da52:	b10a      	cbz	r2, 800da58 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 800da54:	66e3      	str	r3, [r4, #108]	; 0x6c
 800da56:	e7ec      	b.n	800da32 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 800da58:	6663      	str	r3, [r4, #100]	; 0x64
 800da5a:	e783      	b.n	800d964 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 800da5c:	f7fc fad2 	bl	800a004 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800da60:	4620      	mov	r0, r4
 800da62:	f000 fc4f 	bl	800e304 <jinit_upsampler>
 800da66:	e791      	b.n	800d98c <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 800da68:	f7fd fed6 	bl	800b818 <jinit_huff_decoder>
 800da6c:	e79c      	b.n	800d9a8 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800da6e:	2101      	movs	r1, #1
 800da70:	e7a3      	b.n	800d9ba <jinit_master_decompress+0x10e>
 800da72:	bf00      	nop
 800da74:	0800d5c1 	.word	0x0800d5c1
 800da78:	0800d6bf 	.word	0x0800d6bf

0800da7c <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800da7c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800da80:	2200      	movs	r2, #0
 800da82:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800da84:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800da86:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800da88:	4770      	bx	lr

0800da8a <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800da8a:	b570      	push	{r4, r5, r6, lr}
 800da8c:	9d05      	ldr	r5, [sp, #20]
 800da8e:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800da90:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800da94:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800da96:	68de      	ldr	r6, [r3, #12]
 800da98:	9b04      	ldr	r3, [sp, #16]
 800da9a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800da9e:	6822      	ldr	r2, [r4, #0]
 800daa0:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800daa2:	682b      	ldr	r3, [r5, #0]
 800daa4:	3301      	adds	r3, #1
 800daa6:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800daa8:	6823      	ldr	r3, [r4, #0]
 800daaa:	3301      	adds	r3, #1
 800daac:	6023      	str	r3, [r4, #0]
}
 800daae:	bd70      	pop	{r4, r5, r6, pc}

0800dab0 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800dab4:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800dab8:	b087      	sub	sp, #28
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800daba:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800dabe:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800dac0:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800dac4:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800dac6:	9600      	str	r6, [sp, #0]
  int * Cbbtab = upsample->Cb_b_tab;
 800dac8:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800daca:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800dace:	9601      	str	r6, [sp, #4]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800dad0:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800dad2:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800dad4:	9602      	str	r6, [sp, #8]
  inptr0 = input_buf[0][in_row_group_ctr];
 800dad6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800dada:	9503      	str	r5, [sp, #12]
  inptr1 = input_buf[1][in_row_group_ctr];
 800dadc:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800dade:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800dae0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800dae4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800dae8:	9903      	ldr	r1, [sp, #12]
 800daea:	9204      	str	r2, [sp, #16]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800daec:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800daee:	f8dd 9010 	ldr.w	r9, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800daf2:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800daf6:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800dafa:	9205      	str	r2, [sp, #20]
 800dafc:	9a05      	ldr	r2, [sp, #20]
 800dafe:	3306      	adds	r3, #6
 800db00:	3102      	adds	r1, #2
 800db02:	4295      	cmp	r5, r2
 800db04:	d128      	bne.n	800db58 <h2v1_merged_upsample+0xa8>
 800db06:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800db08:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800db0a:	fb03 f30e 	mul.w	r3, r3, lr
 800db0e:	07d2      	lsls	r2, r2, #31
 800db10:	eb0c 0103 	add.w	r1, ip, r3
 800db14:	d51d      	bpl.n	800db52 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800db16:	9a04      	ldr	r2, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800db18:	9802      	ldr	r0, [sp, #8]
    cred = Crrtab[cr];
 800db1a:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800db1e:	782a      	ldrb	r2, [r5, #0]
 800db20:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800db24:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800db28:	9f00      	ldr	r7, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800db2a:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 800db2c:	9d01      	ldr	r5, [sp, #4]
    outptr[RGB_RED] =   range_limit[y + cred];
 800db2e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cblue = Cbbtab[cb];
 800db32:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800db36:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 800db3a:	9a03      	ldr	r2, [sp, #12]
 800db3c:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800db40:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800db42:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800db44:	5dbe      	ldrb	r6, [r7, r6]
 800db46:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800db48:	5c80      	ldrb	r0, [r0, r2]
 800db4a:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800db4c:	5ca2      	ldrb	r2, [r4, r2]
 800db4e:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 800db52:	b007      	add	sp, #28
 800db54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800db58:	f819 ab01 	ldrb.w	sl, [r9], #1
 800db5c:	9a00      	ldr	r2, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800db5e:	f815 6b01 	ldrb.w	r6, [r5], #1
    cred = Crrtab[cr];
 800db62:	f852 b02a 	ldr.w	fp, [r2, sl, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800db66:	9a02      	ldr	r2, [sp, #8]
 800db68:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
 800db6c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    y  = GETJSAMPLE(*inptr0++);
 800db70:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800db74:	443a      	add	r2, r7
    cblue = Cbbtab[cb];
 800db76:	9f01      	ldr	r7, [sp, #4]
 800db78:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800db7c:	eb0b 0704 	add.w	r7, fp, r4
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800db80:	eb04 4222 	add.w	r2, r4, r2, asr #16
    outptr[RGB_RED] =   range_limit[y + cred];
 800db84:	f817 b00a 	ldrb.w	fp, [r7, sl]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800db88:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800db8a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800db8e:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800db92:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800db96:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800db9a:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 800db9e:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800dba2:	f817 700a 	ldrb.w	r7, [r7, sl]
 800dba6:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800dbaa:	f812 200a 	ldrb.w	r2, [r2, sl]
 800dbae:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800dbb2:	f816 200a 	ldrb.w	r2, [r6, sl]
 800dbb6:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800dbba:	e79f      	b.n	800dafc <h2v1_merged_upsample+0x4c>

0800dbbc <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800dbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800dbc0:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800dbc4:	b08b      	sub	sp, #44	; 0x2c
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800dbc6:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800dbca:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800dbcc:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800dbd0:	9603      	str	r6, [sp, #12]
  int * Cbbtab = upsample->Cb_b_tab;
 800dbd2:	696e      	ldr	r6, [r5, #20]
 800dbd4:	9604      	str	r6, [sp, #16]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800dbd6:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800dbd8:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800dbda:	9605      	str	r6, [sp, #20]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800dbdc:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800dbe0:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800dbe4:	686d      	ldr	r5, [r5, #4]
 800dbe6:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800dbe8:	9606      	str	r6, [sp, #24]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800dbea:	9507      	str	r5, [sp, #28]
  inptr1 = input_buf[1][in_row_group_ctr];
 800dbec:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800dbee:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800dbf0:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800dbf4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800dbf8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800dbfa:	9208      	str	r2, [sp, #32]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800dbfc:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800dc0a:	9109      	str	r1, [sp, #36]	; 0x24
  inptr2 = input_buf[2][in_row_group_ctr];
 800dc0c:	9908      	ldr	r1, [sp, #32]
  outptr0 = output_buf[0];
 800dc0e:	9200      	str	r2, [sp, #0]
  outptr1 = output_buf[1];
 800dc10:	9301      	str	r3, [sp, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800dc12:	9102      	str	r1, [sp, #8]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800dc14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc16:	3206      	adds	r2, #6
 800dc18:	3306      	adds	r3, #6
 800dc1a:	f10e 0e02 	add.w	lr, lr, #2
 800dc1e:	4588      	cmp	r8, r1
 800dc20:	f10c 0c02 	add.w	ip, ip, #2
 800dc24:	d13a      	bne.n	800dc9c <h2v2_merged_upsample+0xe0>
 800dc26:	2306      	movs	r3, #6
 800dc28:	9a00      	ldr	r2, [sp, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800dc2a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800dc2c:	437b      	muls	r3, r7
 800dc2e:	07c0      	lsls	r0, r0, #31
 800dc30:	eb02 0103 	add.w	r1, r2, r3
 800dc34:	9a01      	ldr	r2, [sp, #4]
 800dc36:	441a      	add	r2, r3
 800dc38:	d52d      	bpl.n	800dc96 <h2v2_merged_upsample+0xda>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800dc3a:	9808      	ldr	r0, [sp, #32]
 800dc3c:	9d03      	ldr	r5, [sp, #12]
 800dc3e:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dc40:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800dc44:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dc48:	9d05      	ldr	r5, [sp, #20]
 800dc4a:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 800dc4e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
 800dc52:	eb0e 0504 	add.w	r5, lr, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dc56:	4484      	add	ip, r0
    cblue = Cbbtab[cb];
 800dc58:	9804      	ldr	r0, [sp, #16]
 800dc5a:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800dc5e:	eb04 4c2c 	add.w	ip, r4, ip, asr #16
    y  = GETJSAMPLE(*inptr00);
 800dc62:	9806      	ldr	r0, [sp, #24]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800dc64:	4434      	add	r4, r6
    y  = GETJSAMPLE(*inptr00);
 800dc66:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800dc6a:	f815 e000 	ldrb.w	lr, [r5, r0]
 800dc6e:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800dc72:	f81c e000 	ldrb.w	lr, [ip, r0]
 800dc76:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800dc7a:	5c21      	ldrb	r1, [r4, r0]
 800dc7c:	9800      	ldr	r0, [sp, #0]
 800dc7e:	54c1      	strb	r1, [r0, r3]
    y  = GETJSAMPLE(*inptr01);
 800dc80:	9907      	ldr	r1, [sp, #28]
 800dc82:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800dc86:	5c68      	ldrb	r0, [r5, r1]
 800dc88:	7090      	strb	r0, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800dc8a:	f81c 0001 	ldrb.w	r0, [ip, r1]
 800dc8e:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800dc90:	5c62      	ldrb	r2, [r4, r1]
 800dc92:	9901      	ldr	r1, [sp, #4]
 800dc94:	54ca      	strb	r2, [r1, r3]
  }
}
 800dc96:	b00b      	add	sp, #44	; 0x2c
 800dc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800dc9c:	9902      	ldr	r1, [sp, #8]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dc9e:	f818 5b01 	ldrb.w	r5, [r8], #1
    cred = Crrtab[cr];
 800dca2:	f811 9b01 	ldrb.w	r9, [r1], #1
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dca6:	f85a 6025 	ldr.w	r6, [sl, r5, lsl #2]
    cred = Crrtab[cr];
 800dcaa:	9102      	str	r1, [sp, #8]
 800dcac:	9903      	ldr	r1, [sp, #12]
 800dcae:	f851 b029 	ldr.w	fp, [r1, r9, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dcb2:	9905      	ldr	r1, [sp, #20]
 800dcb4:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
    y  = GETJSAMPLE(*inptr00++);
 800dcb8:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dcbc:	4431      	add	r1, r6
    cblue = Cbbtab[cb];
 800dcbe:	9e04      	ldr	r6, [sp, #16]
 800dcc0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800dcc4:	eb0b 0604 	add.w	r6, fp, r4
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800dcc8:	eb04 4121 	add.w	r1, r4, r1, asr #16
    outptr0[RGB_RED] =   range_limit[y + cred];
 800dccc:	f816 b009 	ldrb.w	fp, [r6, r9]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800dcd0:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 800dcd2:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800dcd6:	f811 b009 	ldrb.w	fp, [r1, r9]
 800dcda:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800dcde:	f815 9009 	ldrb.w	r9, [r5, r9]
 800dce2:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 800dce6:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800dcea:	f816 b009 	ldrb.w	fp, [r6, r9]
 800dcee:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800dcf2:	f811 b009 	ldrb.w	fp, [r1, r9]
 800dcf6:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800dcfa:	f815 9009 	ldrb.w	r9, [r5, r9]
 800dcfe:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 800dd02:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800dd06:	f816 b009 	ldrb.w	fp, [r6, r9]
 800dd0a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800dd0e:	f811 b009 	ldrb.w	fp, [r1, r9]
 800dd12:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800dd16:	f815 9009 	ldrb.w	r9, [r5, r9]
 800dd1a:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 800dd1e:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800dd22:	f816 6009 	ldrb.w	r6, [r6, r9]
 800dd26:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800dd2a:	f811 1009 	ldrb.w	r1, [r1, r9]
 800dd2e:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800dd32:	f815 1009 	ldrb.w	r1, [r5, r9]
 800dd36:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800dd3a:	e76b      	b.n	800dc14 <h2v2_merged_upsample+0x58>

0800dd3c <merged_2v_upsample>:
{
 800dd3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800dd40:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800dd44:	4616      	mov	r6, r2
 800dd46:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800dd4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800dd4c:	f8d8 3000 	ldr.w	r3, [r8]
 800dd50:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 800dd54:	b1dd      	cbz	r5, 800dd8e <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800dd56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dd58:	2501      	movs	r5, #1
 800dd5a:	f104 0020 	add.w	r0, r4, #32
 800dd5e:	9301      	str	r3, [sp, #4]
 800dd60:	2300      	movs	r3, #0
 800dd62:	9500      	str	r5, [sp, #0]
 800dd64:	4619      	mov	r1, r3
 800dd66:	f007 fbe6 	bl	8015536 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800dd6e:	f8d8 3000 	ldr.w	r3, [r8]
 800dd72:	442b      	add	r3, r5
 800dd74:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800dd78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dd7a:	1b5b      	subs	r3, r3, r5
 800dd7c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800dd7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd80:	b913      	cbnz	r3, 800dd88 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800dd82:	6833      	ldr	r3, [r6, #0]
 800dd84:	3301      	adds	r3, #1
 800dd86:	6033      	str	r3, [r6, #0]
}
 800dd88:	b004      	add	sp, #16
 800dd8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800dd8e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800dd90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800dd92:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800dd94:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800dd98:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800dd9c:	bf28      	it	cs
 800dd9e:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800dda0:	9302      	str	r3, [sp, #8]
 800dda2:	42bd      	cmp	r5, r7
 800dda4:	bf28      	it	cs
 800dda6:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800dda8:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800ddaa:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800ddac:	bf17      	itett	ne
 800ddae:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800ddb0:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800ddb2:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800ddb4:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800ddb6:	bf0c      	ite	eq
 800ddb8:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800ddba:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800ddbc:	ab02      	add	r3, sp, #8
 800ddbe:	6832      	ldr	r2, [r6, #0]
 800ddc0:	47b8      	blx	r7
 800ddc2:	e7d4      	b.n	800dd6e <merged_2v_upsample+0x32>

0800ddc4 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ddc4:	6843      	ldr	r3, [r0, #4]
 800ddc6:	2230      	movs	r2, #48	; 0x30
 800ddc8:	2101      	movs	r1, #1
 800ddca:	681b      	ldr	r3, [r3, #0]
{
 800ddcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd0:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ddd2:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800ddd4:	4b37      	ldr	r3, [pc, #220]	; (800deb4 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ddd6:	4605      	mov	r5, r0
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800ddd8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800ddda:	6f22      	ldr	r2, [r4, #112]	; 0x70
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800dddc:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800dde0:	434a      	muls	r2, r1

  if (cinfo->max_v_samp_factor == 2) {
 800dde2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  upsample->pub.start_pass = start_pass_merged_upsample;
 800dde6:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800dde8:	2300      	movs	r3, #0
  if (cinfo->max_v_samp_factor == 2) {
 800ddea:	2902      	cmp	r1, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800ddec:	6282      	str	r2, [r0, #40]	; 0x28
  upsample->pub.need_context_rows = FALSE;
 800ddee:	6083      	str	r3, [r0, #8]
  if (cinfo->max_v_samp_factor == 2) {
 800ddf0:	d15a      	bne.n	800dea8 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800ddf2:	4b31      	ldr	r3, [pc, #196]	; (800deb8 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ddf4:	2101      	movs	r1, #1
    upsample->pub.upsample = merged_2v_upsample;
 800ddf6:	6043      	str	r3, [r0, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800ddf8:	4b30      	ldr	r3, [pc, #192]	; (800debc <jinit_merged_upsampler+0xf8>)
 800ddfa:	60c3      	str	r3, [r0, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	6863      	ldr	r3, [r4, #4]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	4798      	blx	r3
    upsample->spare_row = (JSAMPROW)
 800de04:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800de06:	6863      	ldr	r3, [r4, #4]
 800de08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800de0c:	2101      	movs	r1, #1
 800de0e:	4620      	mov	r0, r4
 800de10:	681b      	ldr	r3, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800de12:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800de16:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800de18:	6863      	ldr	r3, [r4, #4]
 800de1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800de1e:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800de20:	2101      	movs	r1, #1
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4620      	mov	r0, r4
 800de26:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800de28:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800de2a:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800de2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2101      	movs	r1, #1
 800de34:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800de36:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800ded4 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800de3a:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800de3c:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800de3e:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800de40:	2101      	movs	r1, #1
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4620      	mov	r0, r4
 800de46:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800de4a:	4f1d      	ldr	r7, [pc, #116]	; (800dec0 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800de4c:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800de4e:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800de50:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800de52:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800de54:	f8df e080 	ldr.w	lr, [pc, #128]	; 800ded8 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800de58:	491a      	ldr	r1, [pc, #104]	; (800dec4 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800de5a:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800de5e:	4d1a      	ldr	r5, [pc, #104]	; (800dec8 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800de60:	fb08 e203 	mla	r2, r8, r3, lr
 800de64:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800de66:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800de6a:	fb07 f203 	mul.w	r2, r7, r3
 800de6e:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800de72:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800de76:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800de78:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800de7c:	fb05 f203 	mul.w	r2, r5, r3
 800de80:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800de84:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800de88:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800de8c:	fb01 f203 	mul.w	r2, r1, r3
 800de90:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800de94:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800de98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800de9c:	3301      	adds	r3, #1
 800de9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dea2:	d1dd      	bne.n	800de60 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800dea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800dea8:	4a08      	ldr	r2, [pc, #32]	; (800decc <jinit_merged_upsampler+0x108>)
    upsample->spare_row = NULL;
 800deaa:	6203      	str	r3, [r0, #32]
    upsample->pub.upsample = merged_1v_upsample;
 800deac:	6042      	str	r2, [r0, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800deae:	4a08      	ldr	r2, [pc, #32]	; (800ded0 <jinit_merged_upsampler+0x10c>)
 800deb0:	60c2      	str	r2, [r0, #12]
    upsample->spare_row = NULL;
 800deb2:	e7a8      	b.n	800de06 <jinit_merged_upsampler+0x42>
 800deb4:	0800da7d 	.word	0x0800da7d
 800deb8:	0800dd3d 	.word	0x0800dd3d
 800debc:	0800dbbd 	.word	0x0800dbbd
 800dec0:	0001c5a2 	.word	0x0001c5a2
 800dec4:	ffffa7e6 	.word	0xffffa7e6
 800dec8:	ffff492e 	.word	0xffff492e
 800decc:	0800da8b 	.word	0x0800da8b
 800ded0:	0800dab1 	.word	0x0800dab1
 800ded4:	000166e9 	.word	0x000166e9
 800ded8:	ff4d0b80 	.word	0xff4d0b80

0800dedc <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800dedc:	2902      	cmp	r1, #2
{
 800dede:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800dee0:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800dee4:	d023      	beq.n	800df2e <start_pass_dpost+0x52>
 800dee6:	2903      	cmp	r1, #3
 800dee8:	d019      	beq.n	800df1e <start_pass_dpost+0x42>
 800deea:	2900      	cmp	r1, #0
 800deec:	d128      	bne.n	800df40 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800deee:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800def0:	b182      	cbz	r2, 800df14 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800def2:	4a16      	ldr	r2, [pc, #88]	; (800df4c <start_pass_dpost+0x70>)
 800def4:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800def6:	68e2      	ldr	r2, [r4, #12]
 800def8:	b93a      	cbnz	r2, 800df0a <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800defa:	6843      	ldr	r3, [r0, #4]
 800defc:	2101      	movs	r1, #1
 800defe:	9100      	str	r1, [sp, #0]
 800df00:	69dd      	ldr	r5, [r3, #28]
 800df02:	68a1      	ldr	r1, [r4, #8]
 800df04:	6923      	ldr	r3, [r4, #16]
 800df06:	47a8      	blx	r5
 800df08:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800df0a:	2300      	movs	r3, #0
 800df0c:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800df10:	b003      	add	sp, #12
 800df12:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800df14:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800df18:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800df1a:	6063      	str	r3, [r4, #4]
    break;
 800df1c:	e7f5      	b.n	800df0a <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800df1e:	68a2      	ldr	r2, [r4, #8]
 800df20:	b91a      	cbnz	r2, 800df2a <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800df22:	6803      	ldr	r3, [r0, #0]
 800df24:	6159      	str	r1, [r3, #20]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800df2a:	4b09      	ldr	r3, [pc, #36]	; (800df50 <start_pass_dpost+0x74>)
 800df2c:	e7f5      	b.n	800df1a <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800df2e:	68a2      	ldr	r2, [r4, #8]
 800df30:	b922      	cbnz	r2, 800df3c <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800df32:	6803      	ldr	r3, [r0, #0]
 800df34:	2203      	movs	r2, #3
 800df36:	615a      	str	r2, [r3, #20]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800df3c:	4b05      	ldr	r3, [pc, #20]	; (800df54 <start_pass_dpost+0x78>)
 800df3e:	e7ec      	b.n	800df1a <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800df40:	6803      	ldr	r3, [r0, #0]
 800df42:	2203      	movs	r2, #3
 800df44:	615a      	str	r2, [r3, #20]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4798      	blx	r3
    break;
 800df4a:	e7de      	b.n	800df0a <start_pass_dpost+0x2e>
 800df4c:	0800df59 	.word	0x0800df59
 800df50:	0800dfb9 	.word	0x0800dfb9
 800df54:	0800e047 	.word	0x0800e047

0800df58 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800df58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df5c:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800df5e:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800df62:	4604      	mov	r4, r0
 800df64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800df66:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800df68:	682f      	ldr	r7, [r5, #0]
 800df6a:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800df6c:	2700      	movs	r7, #0
 800df6e:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800df70:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800df74:	9705      	str	r7, [sp, #20]
 800df76:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df7a:	42be      	cmp	r6, r7
 800df7c:	bf94      	ite	ls
 800df7e:	9602      	strls	r6, [sp, #8]
 800df80:	9702      	strhi	r7, [sp, #8]
 800df82:	ae07      	add	r6, sp, #28
 800df84:	9601      	str	r6, [sp, #4]
 800df86:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800df8a:	9600      	str	r6, [sp, #0]
 800df8c:	9e05      	ldr	r6, [sp, #20]
 800df8e:	6876      	ldr	r6, [r6, #4]
 800df90:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800df92:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800df94:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800df98:	4620      	mov	r0, r4
 800df9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df9c:	685e      	ldr	r6, [r3, #4]
 800df9e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800dfa2:	9b07      	ldr	r3, [sp, #28]
 800dfa4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800dfa8:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800dfaa:	682b      	ldr	r3, [r5, #0]
 800dfac:	9a07      	ldr	r2, [sp, #28]
 800dfae:	4413      	add	r3, r2
 800dfb0:	602b      	str	r3, [r5, #0]
}
 800dfb2:	b008      	add	sp, #32
 800dfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dfb8 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800dfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800dfbc:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800dfc0:	b085      	sub	sp, #20
 800dfc2:	469a      	mov	sl, r3
 800dfc4:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800dfc6:	69a3      	ldr	r3, [r4, #24]
{
 800dfc8:	460e      	mov	r6, r1
 800dfca:	4691      	mov	r9, r2
 800dfcc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800dfd0:	b943      	cbnz	r3, 800dfe4 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800dfd2:	6843      	ldr	r3, [r0, #4]
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	9200      	str	r2, [sp, #0]
 800dfd8:	69df      	ldr	r7, [r3, #28]
 800dfda:	68a1      	ldr	r1, [r4, #8]
 800dfdc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800dfe0:	47b8      	blx	r7
 800dfe2:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800dfe4:	6922      	ldr	r2, [r4, #16]
 800dfe6:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800dfe8:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800dfea:	4628      	mov	r0, r5
 800dfec:	9202      	str	r2, [sp, #8]
 800dfee:	f104 0218 	add.w	r2, r4, #24
 800dff2:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800dff6:	9201      	str	r2, [sp, #4]
 800dff8:	68e2      	ldr	r2, [r4, #12]
 800dffa:	9200      	str	r2, [sp, #0]
 800dffc:	464a      	mov	r2, r9
 800dffe:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800e002:	4653      	mov	r3, sl
 800e004:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800e006:	69a6      	ldr	r6, [r4, #24]
 800e008:	42be      	cmp	r6, r7
 800e00a:	d910      	bls.n	800e02e <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800e00c:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800e010:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800e012:	68e1      	ldr	r1, [r4, #12]
 800e014:	2200      	movs	r2, #0
 800e016:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800e01a:	4628      	mov	r0, r5
 800e01c:	4633      	mov	r3, r6
 800e01e:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800e022:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800e024:	f8d8 3000 	ldr.w	r3, [r8]
 800e028:	4433      	add	r3, r6
 800e02a:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800e02e:	6922      	ldr	r2, [r4, #16]
 800e030:	69a3      	ldr	r3, [r4, #24]
 800e032:	4293      	cmp	r3, r2
 800e034:	d304      	bcc.n	800e040 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800e036:	6963      	ldr	r3, [r4, #20]
 800e038:	4413      	add	r3, r2
 800e03a:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800e03c:	2300      	movs	r3, #0
 800e03e:	61a3      	str	r3, [r4, #24]
  }
}
 800e040:	b005      	add	sp, #20
 800e042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e046 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800e046:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800e04a:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800e04e:	4607      	mov	r7, r0
 800e050:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800e052:	69a3      	ldr	r3, [r4, #24]
 800e054:	b93b      	cbnz	r3, 800e066 <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800e056:	6842      	ldr	r2, [r0, #4]
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	69d5      	ldr	r5, [r2, #28]
 800e05c:	68a1      	ldr	r1, [r4, #8]
 800e05e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e062:	47a8      	blx	r5
 800e064:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800e066:	6963      	ldr	r3, [r4, #20]
 800e068:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800e06a:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800e06c:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800e06e:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800e070:	6832      	ldr	r2, [r6, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800e072:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800e074:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e076:	429d      	cmp	r5, r3
 800e078:	bf28      	it	cs
 800e07a:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800e07c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e07e:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800e080:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e084:	429d      	cmp	r5, r3
 800e086:	bf28      	it	cs
 800e088:	461d      	movcs	r5, r3
 800e08a:	68e3      	ldr	r3, [r4, #12]
 800e08c:	9303      	str	r3, [sp, #12]
 800e08e:	9803      	ldr	r0, [sp, #12]
 800e090:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e094:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e098:	4638      	mov	r0, r7
 800e09a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800e09e:	462b      	mov	r3, r5
 800e0a0:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800e0a2:	6833      	ldr	r3, [r6, #0]
 800e0a4:	442b      	add	r3, r5
 800e0a6:	6033      	str	r3, [r6, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800e0a8:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800e0aa:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800e0ac:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800e0ae:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800e0b0:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800e0b2:	d304      	bcc.n	800e0be <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800e0b4:	6963      	ldr	r3, [r4, #20]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	61a3      	str	r3, [r4, #24]
  }
}
 800e0be:	b004      	add	sp, #16
 800e0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e0c4 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e0c4:	6843      	ldr	r3, [r0, #4]
 800e0c6:	221c      	movs	r2, #28
{
 800e0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e0ca:	681b      	ldr	r3, [r3, #0]
{
 800e0cc:	b085      	sub	sp, #20
 800e0ce:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e0d0:	2101      	movs	r1, #1
{
 800e0d2:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e0d4:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800e0d6:	4b15      	ldr	r3, [pc, #84]	; (800e12c <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800e0d8:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800e0da:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e0de:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800e0e0:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800e0e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800e0e4:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800e0e8:	b1bb      	cbz	r3, 800e11a <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800e0ea:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800e0ee:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800e0f0:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800e0f2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800e0f4:	6861      	ldr	r1, [r4, #4]
 800e0f6:	4342      	muls	r2, r0
    if (need_full_buffer) {
 800e0f8:	b18f      	cbz	r7, 800e11e <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800e0fa:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800e100:	9203      	str	r2, [sp, #12]
 800e102:	f007 fa10 	bl	8015526 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800e106:	692b      	ldr	r3, [r5, #16]
 800e108:	2101      	movs	r1, #1
 800e10a:	9a03      	ldr	r2, [sp, #12]
 800e10c:	e9cd 0300 	strd	r0, r3, [sp]
 800e110:	4613      	mov	r3, r2
 800e112:	4620      	mov	r0, r4
 800e114:	4632      	mov	r2, r6
 800e116:	47b8      	blx	r7
 800e118:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800e11a:	b005      	add	sp, #20
 800e11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800e11e:	688e      	ldr	r6, [r1, #8]
 800e120:	4620      	mov	r0, r4
 800e122:	2101      	movs	r1, #1
 800e124:	47b0      	blx	r6
 800e126:	60e8      	str	r0, [r5, #12]
}
 800e128:	e7f7      	b.n	800e11a <jinit_d_post_controller+0x56>
 800e12a:	bf00      	nop
 800e12c:	0800dedd 	.word	0x0800dedd

0800e130 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800e130:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e134:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800e138:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800e13a:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800e13c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800e13e:	4770      	bx	lr

0800e140 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e144:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800e148:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800e14a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 800e14e:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800e150:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800e152:	4683      	mov	fp, r0
 800e154:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800e156:	429a      	cmp	r2, r3
 800e158:	db10      	blt.n	800e17c <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e15a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800e15e:	2600      	movs	r6, #0
 800e160:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800e164:	9303      	str	r3, [sp, #12]
 800e166:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800e16a:	9a03      	ldr	r2, [sp, #12]
 800e16c:	fb0a 2106 	mla	r1, sl, r6, r2
 800e170:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800e174:	42b2      	cmp	r2, r6
 800e176:	dc32      	bgt.n	800e1de <sep_upsample+0x9e>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800e178:	2300      	movs	r3, #0
 800e17a:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800e17c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800e17e:	4658      	mov	r0, fp
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800e180:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e182:	f8db 613c 	ldr.w	r6, [fp, #316]	; 0x13c
  out_rows_avail -= *out_row_ctr;
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	9910      	ldr	r1, [sp, #64]	; 0x40
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800e18a:	eba6 0c02 	sub.w	ip, r6, r2
  out_rows_avail -= *out_row_ctr;
 800e18e:	1ace      	subs	r6, r1, r3
 800e190:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800e192:	428e      	cmp	r6, r1
 800e194:	bf28      	it	cs
 800e196:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800e198:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800e19c:	4566      	cmp	r6, ip
 800e19e:	bf28      	it	cs
 800e1a0:	4666      	movcs	r6, ip
 800e1a2:	9600      	str	r6, [sp, #0]
 800e1a4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800e1a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e1aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e1ae:	f104 010c 	add.w	r1, r4, #12
 800e1b2:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800e1b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4433      	add	r3, r6
 800e1bc:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800e1be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800e1c0:	1b9b      	subs	r3, r3, r6
 800e1c2:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800e1c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e1c6:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800e1c8:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800e1cc:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800e1ce:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800e1d0:	bfa2      	ittt	ge
 800e1d2:	682b      	ldrge	r3, [r5, #0]
 800e1d4:	3301      	addge	r3, #1
 800e1d6:	602b      	strge	r3, [r5, #0]
}
 800e1d8:	b005      	add	sp, #20
 800e1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800e1de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e1e0:	f103 0904 	add.w	r9, r3, #4
 800e1e4:	682a      	ldr	r2, [r5, #0]
 800e1e6:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800e1e8:	f853 0928 	ldr.w	r0, [r3], #-40
 800e1ec:	4607      	mov	r7, r0
 800e1ee:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800e1f2:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800e1f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e1f8:	4658      	mov	r0, fp
 800e1fa:	47b8      	blx	r7
	 ci++, compptr++) {
 800e1fc:	464b      	mov	r3, r9
 800e1fe:	e7b4      	b.n	800e16a <sep_upsample+0x2a>

0800e200 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800e200:	601a      	str	r2, [r3, #0]
}
 800e202:	4770      	bx	lr

0800e204 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800e204:	2200      	movs	r2, #0
 800e206:	601a      	str	r2, [r3, #0]
}
 800e208:	4770      	bx	lr

0800e20a <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800e20a:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800e20c:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800e20e:	2300      	movs	r3, #0
 800e210:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800e214:	4299      	cmp	r1, r3
 800e216:	dc00      	bgt.n	800e21a <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800e218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800e21a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800e21e:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800e220:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800e224:	440c      	add	r4, r1
    while (outptr < outend) {
 800e226:	42a1      	cmp	r1, r4
 800e228:	d301      	bcc.n	800e22e <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800e22a:	3301      	adds	r3, #1
 800e22c:	e7f0      	b.n	800e210 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800e22e:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800e232:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800e236:	f801 6c01 	strb.w	r6, [r1, #-1]
 800e23a:	e7f4      	b.n	800e226 <h2v1_upsample+0x1c>

0800e23c <int_upsample>:
{
 800e23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e240:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800e242:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e244:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 800e248:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 800e24a:	684b      	ldr	r3, [r1, #4]
 800e24c:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 800e24e:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 800e250:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 800e252:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800e256:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800e25a:	f108 33ff 	add.w	r3, r8, #4294967295
 800e25e:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 800e260:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800e264:	42a3      	cmp	r3, r4
 800e266:	dc02      	bgt.n	800e26e <int_upsample+0x32>
}
 800e268:	b005      	add	sp, #20
 800e26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 800e26e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800e272:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800e274:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800e278:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 800e27c:	454b      	cmp	r3, r9
 800e27e:	d30e      	bcc.n	800e29e <int_upsample+0x62>
    if (v_expand > 1) {
 800e280:	f1b8 0f01 	cmp.w	r8, #1
 800e284:	dd09      	ble.n	800e29a <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800e286:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800e288:	463a      	mov	r2, r7
 800e28a:	4621      	mov	r1, r4
 800e28c:	4638      	mov	r0, r7
 800e28e:	9301      	str	r3, [sp, #4]
 800e290:	9b03      	ldr	r3, [sp, #12]
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	1c63      	adds	r3, r4, #1
 800e296:	f007 f94e 	bl	8015536 <jcopy_sample_rows>
    outrow += v_expand;
 800e29a:	4444      	add	r4, r8
 800e29c:	e7e0      	b.n	800e260 <int_upsample+0x24>
	*outptr++ = invalue;
 800e29e:	4618      	mov	r0, r3
 800e2a0:	4652      	mov	r2, sl
 800e2a2:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800e2a6:	f00b fa07 	bl	80196b8 <memset>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	4453      	add	r3, sl
 800e2ae:	e7e5      	b.n	800e27c <int_upsample+0x40>

0800e2b0 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800e2b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800e2b8:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800e2ba:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800e2bc:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800e2c0:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800e2c4:	42a3      	cmp	r3, r4
 800e2c6:	dc02      	bgt.n	800e2ce <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800e2c8:	b002      	add	sp, #8
 800e2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800e2ce:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800e2d2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800e2d4:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800e2d8:	441a      	add	r2, r3
    while (outptr < outend) {
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d30a      	bcc.n	800e2f4 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800e2de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	4632      	mov	r2, r6
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	e9cd 8300 	strd	r8, r3, [sp]
 800e2ea:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800e2ec:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800e2ee:	f007 f922 	bl	8015536 <jcopy_sample_rows>
    outrow += 2;
 800e2f2:	e7e5      	b.n	800e2c0 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800e2f4:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800e2f8:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800e2fc:	f803 0c01 	strb.w	r0, [r3, #-1]
 800e300:	e7eb      	b.n	800e2da <h2v2_upsample+0x2a>
	...

0800e304 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800e304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e308:	6843      	ldr	r3, [r0, #4]
 800e30a:	22a0      	movs	r2, #160	; 0xa0
 800e30c:	2101      	movs	r1, #1
{
 800e30e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800e314:	4b3f      	ldr	r3, [pc, #252]	; (800e414 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800e316:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e31a:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800e31c:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800e31e:	4b3e      	ldr	r3, [pc, #248]	; (800e418 <jinit_upsampler+0x114>)
 800e320:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800e322:	2300      	movs	r3, #0
 800e324:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800e326:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800e32a:	b12b      	cbz	r3, 800e338 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800e32c:	6823      	ldr	r3, [r4, #0]
 800e32e:	221a      	movs	r2, #26
 800e330:	4620      	mov	r0, r4
 800e332:	615a      	str	r2, [r3, #20]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e338:	f105 060c 	add.w	r6, r5, #12
 800e33c:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800e340:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800e344:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800e348:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800e428 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e34c:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800e350:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e42c <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e354:	3574      	adds	r5, #116	; 0x74
 800e356:	eb05 0308 	add.w	r3, r5, r8
 800e35a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e35c:	429a      	cmp	r2, r3
 800e35e:	dc01      	bgt.n	800e364 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800e360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e366:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800e368:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e36c:	4343      	muls	r3, r0
 800e36e:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800e372:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 800e376:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e37a:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 800e37e:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800e382:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 800e384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e386:	b932      	cbnz	r2, 800e396 <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 800e388:	4b24      	ldr	r3, [pc, #144]	; (800e41c <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 800e38a:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 800e38c:	3758      	adds	r7, #88	; 0x58
 800e38e:	3604      	adds	r6, #4
 800e390:	f108 0801 	add.w	r8, r8, #1
 800e394:	e7df      	b.n	800e356 <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800e396:	fb0c f20e 	mul.w	r2, ip, lr
 800e39a:	fb92 f1f1 	sdiv	r1, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800e39e:	4559      	cmp	r1, fp
 800e3a0:	d103      	bne.n	800e3aa <jinit_upsampler+0xa6>
 800e3a2:	4283      	cmp	r3, r0
 800e3a4:	d101      	bne.n	800e3aa <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 800e3a6:	4b1e      	ldr	r3, [pc, #120]	; (800e420 <jinit_upsampler+0x11c>)
 800e3a8:	e7ef      	b.n	800e38a <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 800e3aa:	ebbb 0f41 	cmp.w	fp, r1, lsl #1
 800e3ae:	d119      	bne.n	800e3e4 <jinit_upsampler+0xe0>
 800e3b0:	4283      	cmp	r3, r0
 800e3b2:	d111      	bne.n	800e3d8 <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 800e3b4:	4b1b      	ldr	r3, [pc, #108]	; (800e424 <jinit_upsampler+0x120>)
 800e3b6:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800e3b8:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800e3ba:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800e3be:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800e3c0:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800e3c4:	f007 f8af 	bl	8015526 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800e3c8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800e3cc:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800e3ce:	2101      	movs	r1, #1
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	47d8      	blx	fp
 800e3d4:	6030      	str	r0, [r6, #0]
 800e3d6:	e7d9      	b.n	800e38c <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 800e3d8:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800e3dc:	d102      	bne.n	800e3e4 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 800e3de:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 800e3e2:	e7e9      	b.n	800e3b8 <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 800e3e4:	fb9b f2f1 	sdiv	r2, fp, r1
 800e3e8:	fb01 b112 	mls	r1, r1, r2, fp
 800e3ec:	b959      	cbnz	r1, 800e406 <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 800e3ee:	fb90 f1f3 	sdiv	r1, r0, r3
 800e3f2:	fb03 0311 	mls	r3, r3, r1, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 800e3f6:	b933      	cbnz	r3, 800e406 <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 800e3f8:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800e3fc:	f888 2000 	strb.w	r2, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800e400:	f888 100a 	strb.w	r1, [r8, #10]
    if (need_buffer) {
 800e404:	e7d8      	b.n	800e3b8 <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800e406:	6823      	ldr	r3, [r4, #0]
 800e408:	2227      	movs	r2, #39	; 0x27
 800e40a:	4620      	mov	r0, r4
 800e40c:	615a      	str	r2, [r3, #20]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4798      	blx	r3
    if (need_buffer) {
 800e412:	e7d1      	b.n	800e3b8 <jinit_upsampler+0xb4>
 800e414:	0800e131 	.word	0x0800e131
 800e418:	0800e141 	.word	0x0800e141
 800e41c:	0800e205 	.word	0x0800e205
 800e420:	0800e201 	.word	0x0800e201
 800e424:	0800e20b 	.word	0x0800e20b
 800e428:	0800e23d 	.word	0x0800e23d
 800e42c:	0800e2b1 	.word	0x0800e2b1

0800e430 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800e430:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800e432:	6803      	ldr	r3, [r0, #0]
{
 800e434:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	4669      	mov	r1, sp
 800e43a:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800e43c:	b033      	add	sp, #204	; 0xcc
 800e43e:	f85d fb04 	ldr.w	pc, [sp], #4

0800e442 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800e442:	2900      	cmp	r1, #0
{
 800e444:	4603      	mov	r3, r0
 800e446:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800e448:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800e44a:	da0b      	bge.n	800e464 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800e44c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e44e:	b112      	cbz	r2, 800e456 <emit_message+0x14>
 800e450:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800e452:	2a02      	cmp	r2, #2
 800e454:	dd02      	ble.n	800e45c <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800e456:	68a2      	ldr	r2, [r4, #8]
 800e458:	4618      	mov	r0, r3
 800e45a:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800e45c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e45e:	3301      	adds	r3, #1
 800e460:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800e462:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800e464:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e466:	428b      	cmp	r3, r1
 800e468:	dbfb      	blt.n	800e462 <emit_message+0x20>
      (*err->output_message) (cinfo);
 800e46a:	68a3      	ldr	r3, [r4, #8]
}
 800e46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800e470:	4718      	bx	r3

0800e472 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800e472:	6803      	ldr	r3, [r0, #0]
 800e474:	2200      	movs	r2, #0
 800e476:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800e478:	615a      	str	r2, [r3, #20]
}
 800e47a:	4770      	bx	lr

0800e47c <format_message>:
{
 800e47c:	4603      	mov	r3, r0
 800e47e:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800e480:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800e482:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800e484:	2b00      	cmp	r3, #0
{
 800e486:	b530      	push	{r4, r5, lr}
 800e488:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800e48a:	dd1f      	ble.n	800e4cc <format_message+0x50>
 800e48c:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800e48e:	4299      	cmp	r1, r3
 800e490:	db1c      	blt.n	800e4cc <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800e492:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800e494:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800e498:	b911      	cbnz	r1, 800e4a0 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800e49a:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800e49c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800e49e:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800e4a0:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800e4a2:	f813 4b01 	ldrb.w	r4, [r3], #1
 800e4a6:	b9fc      	cbnz	r4, 800e4e8 <format_message+0x6c>
    sprintf(buffer, msgtext,
 800e4a8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800e4aa:	9305      	str	r3, [sp, #20]
 800e4ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800e4ae:	9304      	str	r3, [sp, #16]
 800e4b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e4b2:	9303      	str	r3, [sp, #12]
 800e4b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800e4b6:	9302      	str	r3, [sp, #8]
 800e4b8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e4ba:	9301      	str	r3, [sp, #4]
 800e4bc:	6a13      	ldr	r3, [r2, #32]
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800e4c4:	f00b fee8 	bl	801a298 <siprintf>
}
 800e4c8:	b007      	add	sp, #28
 800e4ca:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800e4cc:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800e4ce:	2c00      	cmp	r4, #0
 800e4d0:	d0e3      	beq.n	800e49a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800e4d2:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800e4d4:	4299      	cmp	r1, r3
 800e4d6:	dce0      	bgt.n	800e49a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800e4d8:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 800e4dc:	429d      	cmp	r5, r3
 800e4de:	dbdc      	blt.n	800e49a <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800e4e0:	1a59      	subs	r1, r3, r1
 800e4e2:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800e4e6:	e7d7      	b.n	800e498 <format_message+0x1c>
    if (ch == '%') {
 800e4e8:	2c25      	cmp	r4, #37	; 0x25
 800e4ea:	d1da      	bne.n	800e4a2 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	2b73      	cmp	r3, #115	; 0x73
 800e4f0:	d1da      	bne.n	800e4a8 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800e4f2:	3218      	adds	r2, #24
}
 800e4f4:	b007      	add	sp, #28
 800e4f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800e4fa:	f00b becd 	b.w	801a298 <siprintf>

0800e4fe <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800e4fe:	6803      	ldr	r3, [r0, #0]
{
 800e500:	b510      	push	{r4, lr}
 800e502:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800e504:	689b      	ldr	r3, [r3, #8]
 800e506:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800e508:	4620      	mov	r0, r4
}
 800e50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800e50e:	f7f9 bee7 	b.w	80082e0 <jpeg_destroy>
	...

0800e514 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800e514:	4a0a      	ldr	r2, [pc, #40]	; (800e540 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800e516:	490b      	ldr	r1, [pc, #44]	; (800e544 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800e518:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800e51a:	4a0b      	ldr	r2, [pc, #44]	; (800e548 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800e51c:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800e51e:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 800e520:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800e522:	4a0a      	ldr	r2, [pc, #40]	; (800e54c <jpeg_std_error+0x38>)
 800e524:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800e526:	4a0a      	ldr	r2, [pc, #40]	; (800e550 <jpeg_std_error+0x3c>)
 800e528:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800e52a:	4a0a      	ldr	r2, [pc, #40]	; (800e554 <jpeg_std_error+0x40>)
 800e52c:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800e52e:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800e530:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800e534:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800e536:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800e53a:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 800e53e:	4770      	bx	lr
 800e540:	0800e4ff 	.word	0x0800e4ff
 800e544:	080fb0d4 	.word	0x080fb0d4
 800e548:	0800e443 	.word	0x0800e443
 800e54c:	0800e431 	.word	0x0800e431
 800e550:	0800e47d 	.word	0x0800e47d
 800e554:	0800e473 	.word	0x0800e473

0800e558 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800e558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800e55c:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 800e560:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800e562:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800e566:	3a02      	subs	r2, #2
 800e568:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 800e56c:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800e56e:	ed9f 5abd 	vldr	s10, [pc, #756]	; 800e864 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800e572:	ed9f 4abd 	vldr	s8, [pc, #756]	; 800e868 <jpeg_idct_float+0x310>
 800e576:	eddf 4abd 	vldr	s9, [pc, #756]	; 800e86c <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800e57a:	eddf 3abd 	vldr	s7, [pc, #756]	; 800e870 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800e57e:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 800e582:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800e584:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800e588:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 800e58c:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800e590:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800e594:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800e598:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800e59c:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 800e5a0:	ecbc 7a01 	vldmia	ip!, {s14}
 800e5a4:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800e5a8:	ea4e 0b09 	orr.w	fp, lr, r9
 800e5ac:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800e5b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800e5b4:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800e5b8:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800e5bc:	ea41 0b0b 	orr.w	fp, r1, fp
 800e5c0:	ea45 0b0b 	orr.w	fp, r5, fp
 800e5c4:	ea50 0b0b 	orrs.w	fp, r0, fp
 800e5c8:	f040 80c0 	bne.w	800e74c <jpeg_idct_float+0x1f4>
      wsptr[DCTSIZE*0] = dcval;
 800e5cc:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800e5d0:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 800e5d4:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800e5d8:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800e5dc:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800e5e0:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800e5e4:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800e5e8:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800e5ec:	45e2      	cmp	sl, ip
 800e5ee:	d1c6      	bne.n	800e57e <jpeg_idct_float+0x26>
 800e5f0:	1f1c      	subs	r4, r3, #4
 800e5f2:	f103 001c 	add.w	r0, r3, #28
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800e5f6:	466a      	mov	r2, sp
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800e5f8:	eddf 2a9e 	vldr	s5, [pc, #632]	; 800e874 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800e5fc:	eddf 4a99 	vldr	s9, [pc, #612]	; 800e864 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800e600:	ed9f 3a99 	vldr	s6, [pc, #612]	; 800e868 <jpeg_idct_float+0x310>
 800e604:	ed9f 4a99 	vldr	s8, [pc, #612]	; 800e86c <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800e608:	eddf 3a99 	vldr	s7, [pc, #612]	; 800e870 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800e60c:	edd2 5a00 	vldr	s11, [r2]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800e610:	3220      	adds	r2, #32
    tmp10 = z5 + wsptr[4];
 800e612:	ed52 7a04 	vldr	s15, [r2, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800e616:	ee75 5aa2 	vadd.f32	s11, s11, s5
    tmp13 = wsptr[2] + wsptr[6];
 800e61a:	ed52 6a02 	vldr	s13, [r2, #-8]
    z11 = wsptr[1] + wsptr[7];
 800e61e:	ed12 1a01 	vldr	s2, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 800e622:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 800e626:	ee37 5aa5 	vadd.f32	s10, s15, s11
    outptr = output_buf[ctr] + output_col;
 800e62a:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 800e62c:	ee75 5ae7 	vsub.f32	s11, s11, s15
    tmp13 = wsptr[2] + wsptr[6];
 800e630:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 800e634:	18e9      	adds	r1, r5, r3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800e636:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 800e638:	ee37 7aa6 	vadd.f32	s14, s15, s13
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800e63c:	42a0      	cmp	r0, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800e63e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e642:	eeb0 2a47 	vmov.f32	s4, s14
    tmp0 = tmp10 + tmp13;
 800e646:	ee35 6a07 	vadd.f32	s12, s10, s14
    tmp3 = tmp10 - tmp13;
 800e64a:	ee35 5a47 	vsub.f32	s10, s10, s14
    z13 = wsptr[5] + wsptr[3];
 800e64e:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800e652:	ee97 2aa4 	vfnms.f32	s4, s15, s9
    z13 = wsptr[5] + wsptr[3];
 800e656:	ed52 7a03 	vldr	s15, [r2, #-12]
 800e65a:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 800e65e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 800e662:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 800e666:	ee75 6a82 	vadd.f32	s13, s11, s4
    tmp2 = tmp11 - tmp12;
 800e66a:	ee75 5ac2 	vsub.f32	s11, s11, s4
    z11 = wsptr[1] + wsptr[7];
 800e66e:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 800e672:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 800e676:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800e67a:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800e67e:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800e682:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800e686:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800e68a:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800e68e:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 800e692:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 800e696:	eef0 1a67 	vmov.f32	s3, s15
 800e69a:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800e69e:	ee36 2a01 	vadd.f32	s4, s12, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800e6a2:	ee36 6a41 	vsub.f32	s12, s12, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800e6a6:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800e6aa:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tmp4 = tmp10 - tmp5;
 800e6ae:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800e6b2:	ee12 3a10 	vmov	r3, s4
 800e6b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6ba:	5cf3      	ldrb	r3, [r6, r3]
 800e6bc:	55eb      	strb	r3, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800e6be:	ee16 3a10 	vmov	r3, s12
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800e6c2:	ee36 6aa7 	vadd.f32	s12, s13, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800e6c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800e6ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800e6ce:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800e6d2:	5cf3      	ldrb	r3, [r6, r3]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800e6d4:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800e6d8:	71cb      	strb	r3, [r1, #7]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800e6da:	ee75 6aa1 	vadd.f32	s13, s11, s3
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800e6de:	ee16 3a10 	vmov	r3, s12
 800e6e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6e6:	5cf3      	ldrb	r3, [r6, r3]
 800e6e8:	704b      	strb	r3, [r1, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800e6ea:	ee17 3a90 	vmov	r3, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800e6ee:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800e6f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6f6:	5cf3      	ldrb	r3, [r6, r3]
 800e6f8:	718b      	strb	r3, [r1, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800e6fa:	ee17 3a90 	vmov	r3, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800e6fe:	ee75 7ae1 	vsub.f32	s15, s11, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800e702:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800e706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800e70a:	5cf3      	ldrb	r3, [r6, r3]
 800e70c:	708b      	strb	r3, [r1, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800e70e:	ee17 3a90 	vmov	r3, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800e712:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800e716:	ee35 7a47 	vsub.f32	s14, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800e71a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800e71e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800e722:	5cf3      	ldrb	r3, [r6, r3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800e724:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800e728:	714b      	strb	r3, [r1, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800e72a:	ee17 3a90 	vmov	r3, s15
 800e72e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e732:	5cf3      	ldrb	r3, [r6, r3]
 800e734:	70cb      	strb	r3, [r1, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800e736:	ee17 3a10 	vmov	r3, s14
 800e73a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e73e:	5cf3      	ldrb	r3, [r6, r3]
 800e740:	710b      	strb	r3, [r1, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800e742:	f47f af63 	bne.w	800e60c <jpeg_idct_float+0xb4>
  }
}
 800e746:	b041      	add	sp, #260	; 0x104
 800e748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800e74c:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800e750:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800e754:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800e758:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800e75c:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800e760:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800e764:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800e768:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800e76c:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800e770:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800e774:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800e778:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800e77c:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800e780:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 800e784:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800e788:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800e78c:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800e790:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800e794:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800e798:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800e79c:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 800e7a0:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800e7a4:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800e7a8:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 800e7ac:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 800e7b0:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800e7b4:	ee07 ea90 	vmov	s15, lr
 800e7b8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800e7bc:	ee07 8a90 	vmov	s15, r8
 800e7c0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800e7c4:	ee07 1a90 	vmov	s15, r1
 800e7c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7cc:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800e7d0:	ee07 0a10 	vmov	s14, r0
 800e7d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e7d8:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 800e7dc:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 800e7e0:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 800e7e4:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 800e7e8:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 800e7ec:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 800e7f0:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800e7f4:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800e7f8:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 800e7fc:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800e800:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800e804:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 800e808:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800e80c:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800e810:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 800e814:	eeb0 6a67 	vmov.f32	s12, s15
 800e818:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800e81c:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800e820:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800e824:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800e828:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800e82c:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800e830:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800e834:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 800e838:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800e83c:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800e840:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800e844:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800e848:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800e84c:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800e850:	ee33 7a47 	vsub.f32	s14, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800e854:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800e858:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800e85c:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
    wsptr++;
 800e860:	e6c4      	b.n	800e5ec <jpeg_idct_float+0x94>
 800e862:	bf00      	nop
 800e864:	3fb504f3 	.word	0x3fb504f3
 800e868:	3f8a8bd4 	.word	0x3f8a8bd4
 800e86c:	3fec835e 	.word	0x3fec835e
 800e870:	40273d75 	.word	0x40273d75
 800e874:	43008000 	.word	0x43008000

0800e878 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800e878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e87c:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 800e87e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800e880:	3a02      	subs	r2, #2
{
 800e882:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800e884:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800e888:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800e88c:	f105 0320 	add.w	r3, r5, #32
 800e890:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800e892:	ab04      	add	r3, sp, #16
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800e894:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800e898:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800e89a:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
 800e89e:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800e8a2:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 800e8a6:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800e8aa:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800e8ae:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800e8b2:	f855 0b04 	ldr.w	r0, [r5], #4
 800e8b6:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800e8ba:	9101      	str	r1, [sp, #4]
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800e8bc:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800e8be:	ea46 000c 	orr.w	r0, r6, ip
 800e8c2:	4338      	orrs	r0, r7
 800e8c4:	ea4a 0000 	orr.w	r0, sl, r0
 800e8c8:	4308      	orrs	r0, r1
 800e8ca:	ea4e 0000 	orr.w	r0, lr, r0
 800e8ce:	ea58 0100 	orrs.w	r1, r8, r0
 800e8d2:	d146      	bne.n	800e962 <jpeg_idct_ifast+0xea>
      wsptr[DCTSIZE*0] = dcval;
 800e8d4:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800e8d8:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 800e8da:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800e8dc:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800e8de:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800e8e0:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800e8e4:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800e8e8:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800e8ec:	9903      	ldr	r1, [sp, #12]
 800e8ee:	42a9      	cmp	r1, r5
 800e8f0:	d1d0      	bne.n	800e894 <jpeg_idct_ifast+0x1c>
 800e8f2:	9b02      	ldr	r3, [sp, #8]
 800e8f4:	f1a3 0b04 	sub.w	fp, r3, #4
 800e8f8:	331c      	adds	r3, #28
 800e8fa:	9302      	str	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800e8fc:	ab04      	add	r3, sp, #16
 800e8fe:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800e900:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800e902:	f85b af04 	ldr.w	sl, [fp, #4]!
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800e906:	9a00      	ldr	r2, [sp, #0]
    outptr = output_buf[ctr] + output_col;
 800e908:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800e90c:	9b00      	ldr	r3, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800e90e:	9d00      	ldr	r5, [sp, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800e910:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
 800e914:	68db      	ldr	r3, [r3, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800e916:	ea4e 0701 	orr.w	r7, lr, r1
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800e91a:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800e91e:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800e922:	431f      	orrs	r7, r3
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800e924:	9500      	str	r5, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800e926:	ea47 0708 	orr.w	r7, r7, r8
 800e92a:	e9d2 c206 	ldrd	ip, r2, [r2, #24]
 800e92e:	4327      	orrs	r7, r4
 800e930:	ea47 070c 	orr.w	r7, r7, ip
 800e934:	ea57 0502 	orrs.w	r5, r7, r2
 800e938:	d17e      	bne.n	800ea38 <jpeg_idct_ifast+0x1c0>
				  & RANGE_MASK];
 800e93a:	f3c6 1849 	ubfx	r8, r6, #5, #10
      
      outptr[0] = dcval;
 800e93e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800e940:	f819 3008 	ldrb.w	r3, [r9, r8]
      outptr[0] = dcval;
 800e944:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 800e948:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 800e94a:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 800e94c:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 800e94e:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 800e950:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 800e952:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 800e954:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800e956:	9b02      	ldr	r3, [sp, #8]
 800e958:	455b      	cmp	r3, fp
 800e95a:	d1d1      	bne.n	800e900 <jpeg_idct_ifast+0x88>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800e95c:	b045      	add	sp, #276	; 0x114
 800e95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800e962:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800e964:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800e968:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800e96c:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800e96e:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800e972:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800e976:	fb00 f00e 	mul.w	r0, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800e97a:	eb0a 0b04 	add.w	fp, sl, r4
    tmp11 = tmp0 - tmp2;
 800e97e:	eba4 040a 	sub.w	r4, r4, sl
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800e982:	eb0c 0a00 	add.w	sl, ip, r0
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800e986:	ebac 0000 	sub.w	r0, ip, r0
 800e98a:	4348      	muls	r0, r1
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800e98c:	eb0b 0e0a 	add.w	lr, fp, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800e990:	ebca 2020 	rsb	r0, sl, r0, asr #8
    tmp3 = tmp10 - tmp13;
 800e994:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp1 = tmp11 + tmp12;
 800e998:	eb04 0c00 	add.w	ip, r4, r0
    tmp2 = tmp11 - tmp12;
 800e99c:	1a21      	subs	r1, r4, r0
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800e99e:	69e8      	ldr	r0, [r5, #28]
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800e9a0:	f240 14d9 	movw	r4, #473	; 0x1d9
    tmp2 = tmp11 - tmp12;
 800e9a4:	9100      	str	r1, [sp, #0]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800e9a6:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800e9a8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800e9aa:	9901      	ldr	r1, [sp, #4]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800e9ac:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800e9ae:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800e9b2:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800e9b4:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800e9b8:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 800e9bc:	eb07 0b01 	add.w	fp, r7, r1
    z10 = tmp6 - tmp5;
 800e9c0:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 800e9c2:	eb06 0800 	add.w	r8, r6, r0
    z12 = tmp4 - tmp7;
 800e9c6:	1a36      	subs	r6, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800e9c8:	1988      	adds	r0, r1, r6
    tmp7 = z11 + z13;		/* phase 5 */
 800e9ca:	eb0b 0708 	add.w	r7, fp, r8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800e9ce:	eba8 0b0b 	sub.w	fp, r8, fp
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800e9d2:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800e9d4:	f46f 7427 	mvn.w	r4, #668	; 0x29c
 800e9d8:	4361      	muls	r1, r4
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800e9da:	f44f 74b5 	mov.w	r4, #362	; 0x16a
 800e9de:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800e9e2:	f240 1415 	movw	r4, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800e9e6:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800e9e8:	4366      	muls	r6, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800e9ea:	eb01 2120 	add.w	r1, r1, r0, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800e9ee:	1236      	asrs	r6, r6, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800e9f0:	1bc9      	subs	r1, r1, r7
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800e9f2:	eba6 2020 	sub.w	r0, r6, r0, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800e9f6:	eb0e 0607 	add.w	r6, lr, r7
    tmp5 = tmp11 - tmp6;
 800e9fa:	ebc1 2b2b 	rsb	fp, r1, fp, asr #8
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800e9fe:	ebae 0707 	sub.w	r7, lr, r7
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800ea02:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800ea06:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800ea0a:	ebac 0101 	sub.w	r1, ip, r1
    tmp4 = tmp10 + tmp5;
 800ea0e:	4458      	add	r0, fp
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800ea10:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800ea14:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800ea18:	9900      	ldr	r1, [sp, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800ea1a:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800ea1c:	4459      	add	r1, fp
 800ea1e:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800ea20:	9900      	ldr	r1, [sp, #0]
 800ea22:	eba1 040b 	sub.w	r4, r1, fp
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800ea26:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800ea2a:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800ea2e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800ea32:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800ea34:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 800ea36:	e759      	b.n	800e8ec <jpeg_idct_ifast+0x74>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 800ea38:	eb08 0706 	add.w	r7, r8, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800ea3c:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 800ea40:	eba6 0808 	sub.w	r8, r6, r8
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 800ea44:	eb01 060c 	add.w	r6, r1, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800ea48:	eba1 010c 	sub.w	r1, r1, ip
    tmp0 = tmp10 + tmp13;
 800ea4c:	eb07 0c06 	add.w	ip, r7, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800ea50:	4369      	muls	r1, r5
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800ea52:	191d      	adds	r5, r3, r4
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 800ea54:	1ae3      	subs	r3, r4, r3
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 800ea56:	eb0e 0402 	add.w	r4, lr, r2
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800ea5a:	ebc6 2121 	rsb	r1, r6, r1, asr #8
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 800ea5e:	ebae 0202 	sub.w	r2, lr, r2
    tmp3 = tmp10 - tmp13;
 800ea62:	1bbe      	subs	r6, r7, r6
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800ea64:	9501      	str	r5, [sp, #4]
    tmp1 = tmp11 + tmp12;
 800ea66:	eb08 0701 	add.w	r7, r8, r1
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800ea6a:	eb03 0e02 	add.w	lr, r3, r2
    tmp2 = tmp11 - tmp12;
 800ea6e:	eba8 0101 	sub.w	r1, r8, r1
    tmp7 = z11 + z13;		/* phase 5 */
 800ea72:	eb05 0804 	add.w	r8, r5, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800ea76:	f240 15d9 	movw	r5, #473	; 0x1d9
 800ea7a:	fb05 fe0e 	mul.w	lr, r5, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800ea7e:	f46f 7527 	mvn.w	r5, #668	; 0x29c
 800ea82:	436b      	muls	r3, r5
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800ea84:	9d01      	ldr	r5, [sp, #4]
 800ea86:	1b64      	subs	r4, r4, r5
 800ea88:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800ea8c:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800ea8e:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800ea90:	f240 1515 	movw	r5, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800ea94:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800ea98:	436a      	muls	r2, r5
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800ea9a:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800ea9c:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800eaa0:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 800eaa2:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800eaa6:	eba2 2e2e 	sub.w	lr, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800eaaa:	eb0c 0208 	add.w	r2, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800eaae:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 800eab2:	f3c2 1249 	ubfx	r2, r2, #5, #10
    tmp4 = tmp10 + tmp5;
 800eab6:	44a6      	add	lr, r4
			    & RANGE_MASK];
 800eab8:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800eabc:	f819 2002 	ldrb.w	r2, [r9, r2]
 800eac0:	f80a 2005 	strb.w	r2, [sl, r5]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800eac4:	f819 200c 	ldrb.w	r2, [r9, ip]
 800eac8:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800eaca:	18fa      	adds	r2, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800eacc:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 800eace:	f3c2 1249 	ubfx	r2, r2, #5, #10
			    & RANGE_MASK];
 800ead2:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800ead6:	f819 2002 	ldrb.w	r2, [r9, r2]
 800eada:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800eadc:	f819 3007 	ldrb.w	r3, [r9, r7]
 800eae0:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800eae2:	190b      	adds	r3, r1, r4
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800eae4:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 800eae6:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800eaea:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800eaee:	f819 3003 	ldrb.w	r3, [r9, r3]
 800eaf2:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800eaf4:	f819 3001 	ldrb.w	r3, [r9, r1]
 800eaf8:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800eafa:	eb06 030e 	add.w	r3, r6, lr
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800eafe:	eba6 0e0e 	sub.w	lr, r6, lr
			    & RANGE_MASK];
 800eb02:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800eb06:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800eb0a:	f819 3003 	ldrb.w	r3, [r9, r3]
 800eb0e:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800eb10:	f819 300e 	ldrb.w	r3, [r9, lr]
 800eb14:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800eb16:	e71e      	b.n	800e956 <jpeg_idct_ifast+0xde>

0800eb18 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800eb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1c:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800eb1e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800eb20:	3a02      	subs	r2, #2
{
 800eb22:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 800eb24:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800eb26:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800eb2a:	3380      	adds	r3, #128	; 0x80
 800eb2c:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800eb2e:	f105 0320 	add.w	r3, r5, #32
 800eb32:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800eb34:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800eb38:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800eb3a:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800eb3e:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 800eb42:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800eb46:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 800eb4a:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800eb4e:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800eb52:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb56:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 800eb5a:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800eb5c:	ea4a 030b 	orr.w	r3, sl, fp
 800eb60:	ea4e 0303 	orr.w	r3, lr, r3
 800eb64:	433b      	orrs	r3, r7
 800eb66:	ea48 0303 	orr.w	r3, r8, r3
 800eb6a:	4333      	orrs	r3, r6
 800eb6c:	ea59 0303 	orrs.w	r3, r9, r3
 800eb70:	d145      	bne.n	800ebfe <jpeg_idct_islow+0xe6>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800eb72:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 800eb74:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800eb78:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 800eb7a:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800eb7c:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800eb7e:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800eb80:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800eb84:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800eb88:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800eb8c:	9b05      	ldr	r3, [sp, #20]
 800eb8e:	42ab      	cmp	r3, r5
 800eb90:	d1d0      	bne.n	800eb34 <jpeg_idct_islow+0x1c>
 800eb92:	9b04      	ldr	r3, [sp, #16]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800eb94:	ad06      	add	r5, sp, #24
 800eb96:	f1a3 0904 	sub.w	r9, r3, #4
 800eb9a:	331c      	adds	r3, #28
 800eb9c:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800eb9e:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800eba2:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800eba4:	9302      	str	r3, [sp, #8]
 800eba6:	4413      	add	r3, r2
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800eba8:	f8d5 c01c 	ldr.w	ip, [r5, #28]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800ebac:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 800ebb0:	e9d5 e703 	ldrd	lr, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800ebb4:	ea4a 0200 	orr.w	r2, sl, r0
 800ebb8:	ea42 020e 	orr.w	r2, r2, lr
 800ebbc:	e9d5 8105 	ldrd	r8, r1, [r5, #20]
 800ebc0:	433a      	orrs	r2, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800ebc2:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800ebc6:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800ebca:	3610      	adds	r6, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800ebcc:	430a      	orrs	r2, r1
 800ebce:	ea52 020c 	orrs.w	r2, r2, ip
 800ebd2:	f040 8098 	bne.w	800ed06 <jpeg_idct_islow+0x1ee>
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800ebd6:	9901      	ldr	r1, [sp, #4]
				  & RANGE_MASK];
 800ebd8:	f3c6 1249 	ubfx	r2, r6, #5, #10

      outptr[0] = dcval;
 800ebdc:	9850      	ldr	r0, [sp, #320]	; 0x140
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800ebde:	5c8a      	ldrb	r2, [r1, r2]
      outptr[0] = dcval;
 800ebe0:	9902      	ldr	r1, [sp, #8]
 800ebe2:	540a      	strb	r2, [r1, r0]
      outptr[1] = dcval;
 800ebe4:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 800ebe6:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 800ebe8:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 800ebea:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 800ebec:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 800ebee:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 800ebf0:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800ebf2:	9b05      	ldr	r3, [sp, #20]
 800ebf4:	454b      	cmp	r3, r9
 800ebf6:	d1d2      	bne.n	800eb9e <jpeg_idct_islow+0x86>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800ebf8:	b047      	add	sp, #284	; 0x11c
 800ebfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ebfe:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800ec00:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800ec04:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800ec08:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800ec0a:	f241 1651 	movw	r6, #4433	; 0x1151
 800ec0e:	eb0b 0300 	add.w	r3, fp, r0
 800ec12:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800ec14:	f641 067e 	movw	r6, #6270	; 0x187e
 800ec18:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800ec1c:	4e7a      	ldr	r6, [pc, #488]	; (800ee08 <jpeg_idct_islow+0x2f0>)
 800ec1e:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 800ec22:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ec24:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 800ec26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ec2a:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 800ec2c:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 800ec30:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 800ec34:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 800ec38:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800ec3c:	69ec      	ldr	r4, [r5, #28]
    tmp11 = tmp1 + tmp3;
 800ec3e:	18f7      	adds	r7, r6, r3
    tmp13 = tmp0 - tmp2;
 800ec40:	9002      	str	r0, [sp, #8]
    tmp12 = tmp1 - tmp3;
 800ec42:	1b9b      	subs	r3, r3, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800ec44:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800ec48:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 800ec4c:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800ec4e:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800ec52:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800ec56:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800ec5a:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800ec5e:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800ec60:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 800ec64:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 800ec68:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800ec6c:	1930      	adds	r0, r6, r4
 800ec6e:	4358      	muls	r0, r3
    z2 += z1;
 800ec70:	4b66      	ldr	r3, [pc, #408]	; (800ee0c <jpeg_idct_islow+0x2f4>)
 800ec72:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 800ec76:	4b66      	ldr	r3, [pc, #408]	; (800ee10 <jpeg_idct_islow+0x2f8>)
 800ec78:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800ec7c:	eb09 040a 	add.w	r4, r9, sl
 800ec80:	4b64      	ldr	r3, [pc, #400]	; (800ee14 <jpeg_idct_islow+0x2fc>)
 800ec82:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 800ec84:	f640 138e 	movw	r3, #2446	; 0x98e
 800ec88:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 800ec8c:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 800ec8e:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 800ec92:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ec96:	4b60      	ldr	r3, [pc, #384]	; (800ee18 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 800ec98:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ec9c:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 800eca0:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800eca4:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800eca8:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 800ecaa:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 800ecac:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 800ecae:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 800ecb2:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 800ecb6:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800ecba:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800ecbe:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800ecc2:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800ecc4:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800ecc6:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800ecca:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800ecce:	eb07 040a 	add.w	r4, r7, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800ecd2:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800ecd6:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800ecd8:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800ecdc:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800ecde:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800ece0:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800ece2:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800ece4:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800ece6:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800ecea:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800ecec:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800ecee:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800ecf0:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800ecf2:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800ecf6:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 800ecf8:	9b02      	ldr	r3, [sp, #8]
 800ecfa:	eba3 0909 	sub.w	r9, r3, r9
 800ecfe:	ea4f 23e9 	mov.w	r3, r9, asr #11
 800ed02:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 800ed04:	e742      	b.n	800eb8c <jpeg_idct_islow+0x74>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800ed06:	1842      	adds	r2, r0, r1
 800ed08:	f241 1451 	movw	r4, #4433	; 0x1151
 800ed0c:	4362      	muls	r2, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800ed0e:	f641 047e 	movw	r4, #6270	; 0x187e
 800ed12:	fb04 2000 	mla	r0, r4, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800ed16:	4c3c      	ldr	r4, [pc, #240]	; (800ee08 <jpeg_idct_islow+0x2f0>)
 800ed18:	fb04 2101 	mla	r1, r4, r1, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 800ed1c:	19bc      	adds	r4, r7, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 800ed1e:	1bf2      	subs	r2, r6, r7
    tmp10 = tmp0 + tmp2;
 800ed20:	eb00 3744 	add.w	r7, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 800ed24:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 800ed28:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = tmp1 + tmp3;
 800ed2c:	eb01 3642 	add.w	r6, r1, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 800ed30:	9003      	str	r0, [sp, #12]
    tmp12 = tmp1 - tmp3;
 800ed32:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    z3 = tmp1 + tmp3;
 800ed36:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 800ed3a:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800ed3c:	f242 52a1 	movw	r2, #9633	; 0x25a1
 800ed40:	1821      	adds	r1, r4, r0
 800ed42:	4351      	muls	r1, r2
    z2 += z1;
 800ed44:	4a31      	ldr	r2, [pc, #196]	; (800ee0c <jpeg_idct_islow+0x2f4>)
 800ed46:	fb02 1404 	mla	r4, r2, r4, r1
    z3 += z1;
 800ed4a:	4a31      	ldr	r2, [pc, #196]	; (800ee10 <jpeg_idct_islow+0x2f8>)
 800ed4c:	fb02 1100 	mla	r1, r2, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800ed50:	eb0a 000c 	add.w	r0, sl, ip
 800ed54:	4a2f      	ldr	r2, [pc, #188]	; (800ee14 <jpeg_idct_islow+0x2fc>)
 800ed56:	4350      	muls	r0, r2
    tmp0 += z1 + z2;
 800ed58:	f640 128e 	movw	r2, #2446	; 0x98e
 800ed5c:	eb04 0b00 	add.w	fp, r4, r0
    tmp3 += z1 + z3;
 800ed60:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 800ed62:	fb02 bc0c 	mla	ip, r2, ip, fp
    tmp3 += z1 + z3;
 800ed66:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ed6a:	4a2b      	ldr	r2, [pc, #172]	; (800ee18 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 800ed6c:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ed70:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 800ed74:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ed78:	fb02 fa0a 	mul.w	sl, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ed7c:	9a01      	ldr	r2, [sp, #4]
    tmp1 += z1 + z3;
 800ed7e:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 800ed80:	4454      	add	r4, sl
 800ed82:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 800ed86:	fb0b 1b08 	mla	fp, fp, r8, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ed8a:	eb07 0800 	add.w	r8, r7, r0
    tmp2 += z1 + z2;
 800ed8e:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ed92:	9950      	ldr	r1, [sp, #320]	; 0x140
			    & RANGE_MASK];
 800ed94:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800ed98:	1a3f      	subs	r7, r7, r0
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800ed9a:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ed9e:	f812 e008 	ldrb.w	lr, [r2, r8]
			    & RANGE_MASK];
 800eda2:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800eda6:	9a02      	ldr	r2, [sp, #8]
			    & RANGE_MASK];
 800eda8:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800edac:	f802 e001 	strb.w	lr, [r2, r1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800edb0:	9a01      	ldr	r2, [sp, #4]
 800edb2:	5dd0      	ldrb	r0, [r2, r7]
 800edb4:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800edb6:	1930      	adds	r0, r6, r4
			    & RANGE_MASK];
 800edb8:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800edbc:	5c10      	ldrb	r0, [r2, r0]
 800edbe:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800edc0:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800edc4:	9a04      	ldr	r2, [sp, #16]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800edc6:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800edc8:	eb02 000b 	add.w	r0, r2, fp
 800edcc:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 800edce:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800edd2:	5c10      	ldrb	r0, [r2, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800edd4:	9a04      	ldr	r2, [sp, #16]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800edd6:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800edd8:	eba2 010b 	sub.w	r1, r2, fp
 800eddc:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 800edde:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800ede2:	5c52      	ldrb	r2, [r2, r1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800ede4:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800ede6:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800ede8:	9a03      	ldr	r2, [sp, #12]
 800edea:	4462      	add	r2, ip
			    & RANGE_MASK];
 800edec:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800edf0:	5c8a      	ldrb	r2, [r1, r2]
 800edf2:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 800edf4:	9a03      	ldr	r2, [sp, #12]
 800edf6:	eba2 0c0c 	sub.w	ip, r2, ip
			    & RANGE_MASK];
 800edfa:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 800edfe:	f811 200c 	ldrb.w	r2, [r1, ip]
 800ee02:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800ee04:	e6f5      	b.n	800ebf2 <jpeg_idct_islow+0xda>
 800ee06:	bf00      	nop
 800ee08:	ffffc4df 	.word	0xffffc4df
 800ee0c:	ffffc13b 	.word	0xffffc13b
 800ee10:	fffff384 	.word	0xfffff384
 800ee14:	ffffe333 	.word	0xffffe333
 800ee18:	ffffadfd 	.word	0xffffadfd

0800ee1c <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800ee1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee20:	b0b9      	sub	sp, #228	; 0xe4
 800ee22:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800ee24:	1e96      	subs	r6, r2, #2
 800ee26:	9304      	str	r3, [sp, #16]
 800ee28:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800ee2a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800ee2e:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800ee32:	3380      	adds	r3, #128	; 0x80
 800ee34:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800ee36:	f102 030c 	add.w	r3, r2, #12
 800ee3a:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ee3c:	f936 3f02 	ldrsh.w	r3, [r6, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800ee40:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ee44:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800ee48:	f10c 0c04 	add.w	ip, ip, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ee4c:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ee50:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ee52:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800ee56:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    tmp13 <<= CONST_BITS;
 800ee5a:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 800ee5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ee60:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ee62:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800ee64:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ee66:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800ee6a:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800ee6e:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 800ee72:	4353      	muls	r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800ee74:	ebae 0203 	sub.w	r2, lr, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
 800ee78:	eb04 0803 	add.w	r8, r4, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800ee7c:	fb01 f902 	mul.w	r9, r1, r2
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800ee80:	eba4 010e 	sub.w	r1, r4, lr
 800ee84:	f640 2212 	movw	r2, #2578	; 0xa12
 800ee88:	fb02 f701 	mul.w	r7, r2, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800ee8c:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800ee8e:	f642 01c6 	movw	r1, #10438	; 0x28c6
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800ee92:	eb09 0007 	add.w	r0, r9, r7
 800ee96:	4410      	add	r0, r2
 800ee98:	4a87      	ldr	r2, [pc, #540]	; (800f0b8 <jpeg_idct_7x7+0x29c>)
 800ee9a:	fb02 000e 	mla	r0, r2, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800ee9e:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
 800eea0:	ebae 0e08 	sub.w	lr, lr, r8
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800eea4:	fb01 2108 	mla	r1, r1, r8, r2
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800eea8:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800eeac:	f642 5841 	movw	r8, #11585	; 0x2d41
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800eeb0:	fb02 1203 	mla	r2, r2, r3, r1
 800eeb4:	eb02 0309 	add.w	r3, r2, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800eeb8:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	; 0x50

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800eebc:	f641 52ef 	movw	r2, #7663	; 0x1def
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800eec0:	9303      	str	r3, [sp, #12]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800eec2:	4b7e      	ldr	r3, [pc, #504]	; (800f0bc <jpeg_idct_7x7+0x2a0>)
 800eec4:	fb03 1104 	mla	r1, r3, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800eec8:	f9b6 4010 	ldrsh.w	r4, [r6, #16]
 800eecc:	6a2b      	ldr	r3, [r5, #32]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800eece:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800eed0:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800eed4:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800eed6:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 800eed8:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800eeda:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
 800eede:	fb07 f709 	mul.w	r7, r7, r9
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800eee2:	eb03 0904 	add.w	r9, r3, r4
 800eee6:	fb02 fb09 	mul.w	fp, r2, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800eeea:	eba3 0904 	sub.w	r9, r3, r4
 800eeee:	f240 5273 	movw	r2, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800eef2:	443b      	add	r3, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800eef4:	443c      	add	r4, r7
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800eef6:	fb02 f909 	mul.w	r9, r2, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800eefa:	4a71      	ldr	r2, [pc, #452]	; (800f0c0 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 800eefc:	ebab 0a09 	sub.w	sl, fp, r9
    tmp1 += tmp2;
 800ef00:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800ef02:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800ef06:	4354      	muls	r4, r2
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800ef08:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800ef0c:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 800ef10:	44a1      	add	r9, r4
    tmp0 += z2;
 800ef12:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800ef14:	fb0b 3707 	mla	r7, fp, r7, r3

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800ef18:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800ef1a:	443c      	add	r4, r7
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800ef1c:	4453      	add	r3, sl
 800ef1e:	12db      	asrs	r3, r3, #11
 800ef20:	f84c 3c04 	str.w	r3, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800ef24:	9b03      	ldr	r3, [sp, #12]
 800ef26:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800ef2a:	eb00 0309 	add.w	r3, r0, r9
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800ef2e:	eba0 0009 	sub.w	r0, r0, r9
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800ef32:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800ef34:	ea4f 22ea 	mov.w	r2, sl, asr #11
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800ef38:	f8cc 3018 	str.w	r3, [ip, #24]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800ef3c:	190b      	adds	r3, r1, r4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800ef3e:	1b0c      	subs	r4, r1, r4
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800ef40:	12c0      	asrs	r0, r0, #11
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800ef42:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800ef44:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800ef48:	12e4      	asrs	r4, r4, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800ef4a:	f8cc 0088 	str.w	r0, [ip, #136]	; 0x88
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800ef4e:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800ef52:	9b02      	ldr	r3, [sp, #8]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800ef54:	f8cc 406c 	str.w	r4, [ip, #108]	; 0x6c
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800ef58:	fb08 3e0e 	mla	lr, r8, lr, r3
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 800ef5c:	ea4f 23ee 	mov.w	r3, lr, asr #11
 800ef60:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 800ef64:	9b05      	ldr	r3, [sp, #20]
 800ef66:	42b3      	cmp	r3, r6
 800ef68:	f47f af68 	bne.w	800ee3c <jpeg_idct_7x7+0x20>
 800ef6c:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 800ef6e:	ac07      	add	r4, sp, #28
 800ef70:	f1a3 0904 	sub.w	r9, r3, #4
 800ef74:	3318      	adds	r3, #24
 800ef76:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800ef78:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 800ef7c:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 800ef7e:	9a42      	ldr	r2, [sp, #264]	; 0x108
    z3 = (INT32) wsptr[6];
 800ef80:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 800ef84:	189e      	adds	r6, r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800ef86:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 800ef8a:	9304      	str	r3, [sp, #16]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800ef8c:	1b51      	subs	r1, r2, r5
 800ef8e:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 800ef92:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 800ef96:	fb02 fe01 	mul.w	lr, r2, r1
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800ef9a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800ef9e:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp0 = z1 + z3;
 800efa2:	eb03 0805 	add.w	r8, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800efa6:	eba3 0c02 	sub.w	ip, r3, r2
 800efaa:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800efae:	3710      	adds	r7, #16
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800efb0:	4941      	ldr	r1, [pc, #260]	; (800f0b8 <jpeg_idct_7x7+0x29c>)
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 800efb2:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800efb6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 800efba:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 800efbe:	eb0e 000c 	add.w	r0, lr, ip
 800efc2:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 800efc6:	fb01 0002 	mla	r0, r1, r2, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800efca:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800efce:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 800efd2:	fb02 f208 	mul.w	r2, r2, r8
 800efd6:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800efda:	fb01 2105 	mla	r1, r1, r5, r2
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800efde:	4d37      	ldr	r5, [pc, #220]	; (800f0bc <jpeg_idct_7x7+0x2a0>)
 800efe0:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 800efe4:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800efe8:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 800efea:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800efee:	4463      	add	r3, ip
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800eff0:	eb02 050a 	add.w	r5, r2, sl
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 800eff4:	9102      	str	r1, [sp, #8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 800eff6:	9303      	str	r3, [sp, #12]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 800eff8:	f641 53ef 	movw	r3, #7663	; 0x1def
 800effc:	fb03 fb05 	mul.w	fp, r3, r5
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800f000:	eba2 050a 	sub.w	r5, r2, sl
 800f004:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800f008:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800f00a:	44f2      	add	sl, lr
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 800f00c:	435d      	muls	r5, r3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800f00e:	4b2c      	ldr	r3, [pc, #176]	; (800f0c0 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 800f010:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 800f014:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800f016:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 800f01a:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f01e:	9b01      	ldr	r3, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 800f020:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800f024:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 800f028:	4455      	add	r5, sl
    tmp0 += z2;
 800f02a:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 800f02c:	fb0b 220e 	mla	r2, fp, lr, r2
 800f030:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f032:	eb01 020c 	add.w	r2, r1, ip
 800f036:	9942      	ldr	r1, [sp, #264]	; 0x108
			    & RANGE_MASK];
 800f038:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f03c:	5c9a      	ldrb	r2, [r3, r2]
 800f03e:	9b04      	ldr	r3, [sp, #16]
 800f040:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f042:	9b02      	ldr	r3, [sp, #8]
 800f044:	eba3 0c0c 	sub.w	ip, r3, ip
 800f048:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 800f04a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f04e:	f813 200c 	ldrb.w	r2, [r3, ip]
 800f052:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f054:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f056:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 800f058:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 800f05c:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f060:	5c9a      	ldrb	r2, [r3, r2]
 800f062:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f064:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f066:	9b03      	ldr	r3, [sp, #12]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f068:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f06a:	eb03 020a 	add.w	r2, r3, sl
 800f06e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 800f070:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f074:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f076:	9b03      	ldr	r3, [sp, #12]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f078:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f07a:	eba3 0a0a 	sub.w	sl, r3, sl
 800f07e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 800f080:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f084:	f813 300a 	ldrb.w	r3, [r3, sl]
 800f088:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 800f08a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800f08e:	eba3 0808 	sub.w	r8, r3, r8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800f092:	f642 5341 	movw	r3, #11585	; 0x2d41
 800f096:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 800f09a:	9b01      	ldr	r3, [sp, #4]
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 800f09c:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 800f0a0:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 800f0a4:	f813 3008 	ldrb.w	r3, [r3, r8]
 800f0a8:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 800f0aa:	9b05      	ldr	r3, [sp, #20]
 800f0ac:	454b      	cmp	r3, r9
 800f0ae:	f47f af63 	bne.w	800ef78 <jpeg_idct_7x7+0x15c>
  }
}
 800f0b2:	b039      	add	sp, #228	; 0xe4
 800f0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b8:	ffffc515 	.word	0xffffc515
 800f0bc:	ffffb0f1 	.word	0xffffb0f1
 800f0c0:	ffffd3e1 	.word	0xffffd3e1

0800f0c4 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f0c8:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 800f0cc:	b0a7      	sub	sp, #156	; 0x9c
 800f0ce:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800f0d0:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f0d2:	3080      	adds	r0, #128	; 0x80
 800f0d4:	320a      	adds	r2, #10
 800f0d6:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800f0d8:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f0da:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800f0dc:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f0de:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800f0e2:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f0e6:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800f0ea:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f0ec:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f0f0:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f0f2:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f0f6:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f0fa:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 800f0fc:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800f0fe:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f102:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f106:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f10a:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800f10e:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 800f110:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 800f112:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f116:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800f118:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f11c:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800f120:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f122:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp10 = tmp1 + tmp0;
 800f124:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f128:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 = tmp1 - tmp0;
 800f12c:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f12e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f132:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f134:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800f138:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f13c:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800f140:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800f144:	eb02 0c08 	add.w	ip, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800f148:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 800f14c:	eba2 0909 	sub.w	r9, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800f150:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 800f154:	eba9 0808 	sub.w	r8, r9, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800f158:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 800f15c:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f160:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f164:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800f168:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f16c:	12d2      	asrs	r2, r2, #11
 800f16e:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f172:	ea4f 22ee 	mov.w	r2, lr, asr #11
 800f176:	677a      	str	r2, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 800f178:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 800f17c:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[6*1] = (int) (tmp11 + tmp1);
 800f180:	617a      	str	r2, [r7, #20]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f182:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f186:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[6*4] = (int) (tmp11 - tmp1);
 800f18a:	65f9      	str	r1, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f18c:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f18e:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f192:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800f194:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f196:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 800f198:	42b2      	cmp	r2, r6
 800f19a:	d1a0      	bne.n	800f0de <jpeg_idct_6x6+0x1a>
 800f19c:	f1a3 0e04 	sub.w	lr, r3, #4
 800f1a0:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 800f1a4:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800f1a6:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800f1aa:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 800f1ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 800f1b0:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800f1b2:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 800f1b6:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 800f1b8:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f1bc:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 800f1c0:	fb00 f202 	mul.w	r2, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800f1c4:	f851 4c10 	ldr.w	r4, [r1, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f1c8:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 800f1cc:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800f1d0:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 800f1d4:	eb02 3543 	add.w	r5, r2, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 800f1d8:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 800f1dc:	eba3 0302 	sub.w	r3, r3, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 800f1e0:	f242 7231 	movw	r2, #10033	; 0x2731
 800f1e4:	fb02 f204 	mul.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 800f1e8:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp10 = tmp1 + tmp0;
 800f1ec:	eb05 0602 	add.w	r6, r5, r2
    tmp12 = tmp1 - tmp0;
 800f1f0:	eba5 0202 	sub.w	r2, r5, r2
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 800f1f4:	eb04 0508 	add.w	r5, r4, r8
 800f1f8:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800f1fc:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 800f200:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 800f204:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800f208:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f20c:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 800f20e:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 800f212:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 800f216:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f21a:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f21e:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 800f222:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 800f226:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f22a:	5d04      	ldrb	r4, [r0, r4]
 800f22c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800f22e:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f232:	9800      	ldr	r0, [sp, #0]
 800f234:	5d84      	ldrb	r4, [r0, r6]
 800f236:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f238:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f23c:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 800f240:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 800f244:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f248:	5d04      	ldrb	r4, [r0, r4]
 800f24a:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f24c:	f810 3008 	ldrb.w	r3, [r0, r8]
 800f250:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f252:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f256:	eba2 0505 	sub.w	r5, r2, r5
			    & RANGE_MASK];
 800f25a:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 800f25e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f262:	5cc3      	ldrb	r3, [r0, r3]
 800f264:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f266:	5d43      	ldrb	r3, [r0, r5]
 800f268:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 800f26a:	d19c      	bne.n	800f1a6 <jpeg_idct_6x6+0xe2>
  }
}
 800f26c:	b027      	add	sp, #156	; 0x9c
 800f26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800f274 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f278:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 800f27c:	b09d      	sub	sp, #116	; 0x74
 800f27e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800f280:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f282:	3080      	adds	r0, #128	; 0x80
 800f284:	3208      	adds	r2, #8
 800f286:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800f288:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800f28a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800f28e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f292:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800f294:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f296:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800f29a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f29c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f2a0:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f2a4:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f2a6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f2a8:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f2ac:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f2ae:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f2b2:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 800f2b4:	0352      	lsls	r2, r2, #13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f2b6:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f2ba:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f2be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f2c2:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800f2c6:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800f2ca:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f2ce:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f2d2:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800f2d4:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800f2d8:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f2dc:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = tmp12 + z2;
 800f2e0:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800f2e2:	f641 209a 	movw	r0, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 800f2e6:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 800f2ea:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 800f2ee:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800f2f2:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 800f2f6:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800f2f8:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 800f2fc:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 800f300:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 800f302:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 800f306:	483b      	ldr	r0, [pc, #236]	; (800f3f4 <jpeg_idct_5x5+0x180>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800f308:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 800f30a:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f30e:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f312:	eba9 0a0a 	sub.w	sl, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800f316:	42b2      	cmp	r2, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f318:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f31c:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f320:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f324:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f328:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f32c:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f330:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f334:	f8c7 a04c 	str.w	sl, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f338:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f33c:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 800f33e:	d1aa      	bne.n	800f296 <jpeg_idct_5x5+0x22>
 800f340:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 800f344:	a903      	add	r1, sp, #12
 800f346:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800f348:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800f34c:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 800f350:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 800f352:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800f356:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 800f35a:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 800f35c:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 800f35e:	f851 4c04 	ldr.w	r4, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 800f362:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f366:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 800f36a:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f36e:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 800f372:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 800f376:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800f37a:	191a      	adds	r2, r3, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 800f37c:	1b1b      	subs	r3, r3, r4
 800f37e:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 800f382:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 800f386:	eb03 344c 	add.w	r4, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 800f38a:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 800f38c:	1915      	adds	r5, r2, r4
    tmp11 = z3 - z1;
 800f38e:	1aa2      	subs	r2, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800f390:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 800f394:	ebc3 3c4c 	rsb	ip, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 800f398:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 800f39a:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 800f39e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 800f3a2:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 800f3a6:	4813      	ldr	r0, [pc, #76]	; (800f3f4 <jpeg_idct_5x5+0x180>)
 800f3a8:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f3ac:	eb05 0b06 	add.w	fp, r5, r6
 800f3b0:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f3b2:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 800f3b4:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 800f3b8:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f3bc:	f810 b00b 	ldrb.w	fp, [r0, fp]
 800f3c0:	9826      	ldr	r0, [sp, #152]	; 0x98
 800f3c2:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f3c6:	9800      	ldr	r0, [sp, #0]
 800f3c8:	5d45      	ldrb	r5, [r0, r5]
 800f3ca:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f3cc:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f3ce:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 800f3d0:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 800f3d4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f3d8:	5d45      	ldrb	r5, [r0, r5]
 800f3da:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f3dc:	5c82      	ldrb	r2, [r0, r2]
 800f3de:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 800f3e0:	f810 300c 	ldrb.w	r3, [r0, ip]
 800f3e4:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 800f3e6:	9b01      	ldr	r3, [sp, #4]
 800f3e8:	4573      	cmp	r3, lr
 800f3ea:	d1b2      	bne.n	800f352 <jpeg_idct_5x5+0xde>
  }
}
 800f3ec:	b01d      	add	sp, #116	; 0x74
 800f3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f2:	bf00      	nop
 800f3f4:	ffffba5c 	.word	0xffffba5c

0800f3f8 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3fc:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 800f3fe:	b093      	sub	sp, #76	; 0x4c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f400:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 800f404:	1e96      	subs	r6, r2, #2
 800f406:	3c04      	subs	r4, #4
 800f408:	1d97      	adds	r7, r2, #6
 800f40a:	3580      	adds	r5, #128	; 0x80

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800f40c:	a902      	add	r1, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 800f40e:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 800f412:	f641 0e7e 	movw	lr, #6270	; 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 800f416:	f8df c108 	ldr.w	ip, [pc, #264]	; 800f520 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f41a:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 800f41e:	3104      	adds	r1, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f420:	f854 2f04 	ldr.w	r2, [r4, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f424:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 800f428:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f42a:	fb02 f000 	mul.w	r0, r2, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f42e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f430:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f434:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f438:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 800f43c:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 800f440:	eba0 0002 	sub.w	r0, r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f444:	6a22      	ldr	r2, [r4, #32]
 800f446:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f44a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800f44c:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 800f450:	eb0a 020b 	add.w	r2, sl, fp
 800f454:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f458:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 800f45c:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 800f460:	fb0c 220b 	mla	r2, ip, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 800f464:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 800f468:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 800f46c:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 800f470:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 800f474:	eb02 0980 	add.w	r9, r2, r0, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 800f478:	f841 bc04 	str.w	fp, [r1, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 800f47c:	ebc2 0280 	rsb	r2, r2, r0, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 800f480:	f8c1 a02c 	str.w	sl, [r1, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 800f484:	f8c1 900c 	str.w	r9, [r1, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 800f488:	61ca      	str	r2, [r1, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 800f48a:	d1c6      	bne.n	800f41a <jpeg_idct_4x4+0x22>
 800f48c:	1f1e      	subs	r6, r3, #4
 800f48e:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 800f492:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 800f494:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 800f498:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 800f49c:	f8df e080 	ldr.w	lr, [pc, #128]	; 800f520 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 800f4a0:	f856 3f04 	ldr.w	r3, [r6, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 800f4a4:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 800f4a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f4a8:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 800f4ac:	45b4      	cmp	ip, r6
    outptr = output_buf[ctr] + output_col;
 800f4ae:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 800f4b2:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 800f4b6:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f4ba:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 800f4be:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 800f4c2:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 800f4c6:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 800f4ca:	eb01 020b 	add.w	r2, r1, fp
 800f4ce:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 800f4d2:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 800f4d6:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f4da:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f4de:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 800f4e2:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 800f4e4:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f4e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
			    & RANGE_MASK];
 800f4ea:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f4ee:	f815 b00b 	ldrb.w	fp, [r5, fp]
 800f4f2:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f4f6:	5c6b      	ldrb	r3, [r5, r1]
 800f4f8:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f4fa:	9b01      	ldr	r3, [sp, #4]
 800f4fc:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 800f500:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f504:	5ceb      	ldrb	r3, [r5, r3]
 800f506:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f508:	9b01      	ldr	r3, [sp, #4]
 800f50a:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 800f50e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f512:	5cab      	ldrb	r3, [r5, r2]
 800f514:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 800f516:	d1c3      	bne.n	800f4a0 <jpeg_idct_4x4+0xa8>
  }
}
 800f518:	b013      	add	sp, #76	; 0x4c
 800f51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f51e:	bf00      	nop
 800f520:	ffffc4df 	.word	0xffffc4df

0800f524 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f528:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f52a:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 800f52e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800f530:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800f534:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f536:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 800f53a:	f1a1 0c04 	sub.w	ip, r1, #4
 800f53e:	1d10      	adds	r0, r2, #4
 800f540:	4621      	mov	r1, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 800f542:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 800f546:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f54a:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 800f54e:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f550:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f554:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 800f558:	4540      	cmp	r0, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f55a:	fb05 f202 	mul.w	r2, r5, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f55e:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f562:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f566:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 <<= CONST_BITS;
 800f56a:	ea4f 3242 	mov.w	r2, r2, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f56e:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 800f576:	fb0a f505 	mul.w	r5, sl, r5
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f57a:	fb07 f70b 	mul.w	r7, r7, fp
    tmp10 = tmp0 + tmp12;
 800f57e:	eb02 0605 	add.w	r6, r2, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 800f582:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 800f586:	fb09 f707 	mul.w	r7, r9, r7

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 800f58a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f58e:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f592:	eba6 0707 	sub.w	r7, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 800f596:	60a2      	str	r2, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f598:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f59c:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f5a0:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f5a4:	6167      	str	r7, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 800f5a6:	d1d0      	bne.n	800f54a <jpeg_idct_3x3+0x26>
 800f5a8:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 800f5aa:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 800f5ae:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 800f5b0:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 800f5b4:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 800f5b8:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 800f5ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 800f5bc:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 800f5c0:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 800f5c2:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f5c6:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 800f5ca:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 800f5ce:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f5d2:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f5d6:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 800f5d8:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 800f5dc:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 800f5e0:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f5e4:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f5e8:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 800f5ec:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 800f5f0:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 800f5f4:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 800f5f8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f5fc:	f81e a00a 	ldrb.w	sl, [lr, sl]
 800f600:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f604:	f81e 4008 	ldrb.w	r4, [lr, r8]
 800f608:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 800f60a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800f60e:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 800f610:	d1d0      	bne.n	800f5b4 <jpeg_idct_3x3+0x90>
  }
}
 800f612:	b00b      	add	sp, #44	; 0x2c
 800f614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f618 <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800f61c:	6d4f      	ldr	r7, [r1, #84]	; 0x54
{
 800f61e:	4698      	mov	r8, r3
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f620:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f624:	f9b2 1000 	ldrsh.w	r1, [r2]
 800f628:	6838      	ldr	r0, [r7, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f62a:	3580      	adds	r5, #128	; 0x80
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f62c:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f630:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f632:	6a38      	ldr	r0, [r7, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 800f634:	687b      	ldr	r3, [r7, #4]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f636:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 800f638:	3104      	adds	r1, #4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 800f63a:	6a7f      	ldr	r7, [r7, #36]	; 0x24
  tmp0 = tmp4 + tmp5;
 800f63c:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 800f63e:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 800f640:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 800f644:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 800f648:	435c      	muls	r4, r3
  tmp3 = tmp4 - tmp5;

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 800f64a:	f8d8 c000 	ldr.w	ip, [r8]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 800f64e:	437a      	muls	r2, r7
{
 800f650:	9e06      	ldr	r6, [sp, #24]
  tmp1 = tmp4 + tmp5;
 800f652:	18a7      	adds	r7, r4, r2
  tmp3 = tmp4 - tmp5;
 800f654:	1aa2      	subs	r2, r4, r2
  outptr = output_buf[0] + output_col;
 800f656:	eb0c 0e06 	add.w	lr, ip, r6

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 800f65a:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 800f65c:	1bc0      	subs	r0, r0, r7

  /* Row 1 */
  outptr = output_buf[1] + output_col;

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 800f65e:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 800f660:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 800f662:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 800f666:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 800f66a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 800f66e:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 800f672:	5d2c      	ldrb	r4, [r5, r4]
 800f674:	f80c 4006 	strb.w	r4, [ip, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 800f678:	5c28      	ldrb	r0, [r5, r0]
 800f67a:	f88e 0001 	strb.w	r0, [lr, #1]
  outptr = output_buf[1] + output_col;
 800f67e:	f8d8 0004 	ldr.w	r0, [r8, #4]
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 800f682:	5ceb      	ldrb	r3, [r5, r3]
  outptr = output_buf[1] + output_col;
 800f684:	1984      	adds	r4, r0, r6
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 800f686:	5583      	strb	r3, [r0, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 800f688:	5c6b      	ldrb	r3, [r5, r1]
 800f68a:	7063      	strb	r3, [r4, #1]
}
 800f68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f690 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 800f690:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800f692:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f696:	6809      	ldr	r1, [r1, #0]
 800f698:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 800f69a:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 800f69e:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 800f6a0:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 800f6a4:	440a      	add	r2, r1
 800f6a6:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 800f6aa:	681a      	ldr	r2, [r3, #0]
 800f6ac:	9b00      	ldr	r3, [sp, #0]
 800f6ae:	54d1      	strb	r1, [r2, r3]
}
 800f6b0:	4770      	bx	lr
	...

0800f6b4 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b8:	b0d1      	sub	sp, #324	; 0x144
 800f6ba:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 800f6bc:	1e96      	subs	r6, r2, #2
 800f6be:	9306      	str	r3, [sp, #24]
 800f6c0:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f6c2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800f6c6:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f6c8:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800f6cc:	f102 030e 	add.w	r3, r2, #14
 800f6d0:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f6d2:	f936 5f02 	ldrsh.w	r5, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800f6d6:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f6d8:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f6dc:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f6e0:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f6e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f6e4:	f9b6 2040 	ldrsh.w	r2, [r6, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f6e8:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f6ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f6ee:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    tmp0 <<= CONST_BITS;
 800f6f2:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f6f4:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f6f6:	f9b6 3060 	ldrsh.w	r3, [r6, #96]	; 0x60
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f6fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f6fe:	f9b6 c050 	ldrsh.w	ip, [r6, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f702:	437b      	muls	r3, r7
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 800f704:	f241 67a1 	movw	r7, #5793	; 0x16a1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f708:	f9b6 e070 	ldrsh.w	lr, [r6, #112]	; 0x70
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 800f70c:	437b      	muls	r3, r7
    tmp1 = tmp0 + tmp3;
 800f70e:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 800f710:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 800f714:	f241 65a1 	movw	r5, #5793	; 0x16a1
    tmp2 = tmp0 - tmp3 - tmp3;
 800f718:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 800f71a:	1a8b      	subs	r3, r1, r2
 800f71c:	436b      	muls	r3, r5
 800f71e:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 800f720:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 800f724:	442b      	add	r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 800f726:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp11 = tmp2 + tmp0;
 800f72a:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 800f72c:	188b      	adds	r3, r1, r2
 800f72e:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 800f730:	f242 25ab 	movw	r5, #8875	; 0x22ab
 800f734:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 800f736:	f240 75dc 	movw	r5, #2012	; 0x7dc
 800f73a:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 800f73c:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 800f73e:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 800f740:	1aad      	subs	r5, r5, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 800f742:	440b      	add	r3, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 800f744:	1a79      	subs	r1, r7, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f746:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    tmp13 = tmp1 - tmp2 + tmp3;
 800f74a:	188a      	adds	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f74c:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
    tmp12 = tmp1 - tmp0 + tmp2;
 800f750:	9304      	str	r3, [sp, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 800f752:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f754:	6a22      	ldr	r2, [r4, #32]

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 800f756:	4b89      	ldr	r3, [pc, #548]	; (800f97c <jpeg_idct_9x9+0x2c8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f758:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f75a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800f75c:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f75e:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 800f762:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f766:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 800f76a:	435a      	muls	r2, r3

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 800f76c:	f641 5317 	movw	r3, #7447	; 0x1d17
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f770:	fb07 f70e 	mul.w	r7, r7, lr
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 800f774:	eb01 0b0c 	add.w	fp, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 800f778:	eb01 0907 	add.w	r9, r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 800f77c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 800f780:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 800f784:	ebac 0e07 	sub.w	lr, ip, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f788:	eba1 0c0c 	sub.w	ip, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 800f78c:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 800f790:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f794:	ebac 0707 	sub.w	r7, ip, r7
    tmp0 = tmp2 + tmp3 - z2;
 800f798:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 800f79c:	fb03 f30e 	mul.w	r3, r3, lr
    tmp0 = tmp2 + tmp3 - z2;
 800f7a0:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 800f7a4:	eba2 0e03 	sub.w	lr, r2, r3
    tmp3 += z2 + tmp1;
 800f7a8:	441a      	add	r2, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f7aa:	f242 7331 	movw	r3, #10033	; 0x2731

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f7ae:	eb05 0108 	add.w	r1, r5, r8
    tmp2 += z2 - tmp1;
 800f7b2:	44de      	add	lr, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f7b4:	435f      	muls	r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f7b6:	9b03      	ldr	r3, [sp, #12]
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f7b8:	12c9      	asrs	r1, r1, #11
    tmp3 += z2 + tmp1;
 800f7ba:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f7bc:	eba5 0508 	sub.w	r5, r5, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 800f7c0:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f7c4:	19d9      	adds	r1, r3, r7
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f7c6:	1bdf      	subs	r7, r3, r7
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f7c8:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f7ca:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f7cc:	12ed      	asrs	r5, r5, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 800f7ce:	61c1      	str	r1, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f7d0:	eb03 010e 	add.w	r1, r3, lr
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f7d4:	eba3 0e0e 	sub.w	lr, r3, lr
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f7d8:	12ff      	asrs	r7, r7, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f7da:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 800f7dc:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f7e0:	ea4f 23ee 	mov.w	r3, lr, asr #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 800f7e4:	f8c0 70dc 	str.w	r7, [r0, #220]	; 0xdc
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 800f7e8:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 800f7ea:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 800f7ee:	9b05      	ldr	r3, [sp, #20]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	12db      	asrs	r3, r3, #11
 800f7f4:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 800f7f6:	9b05      	ldr	r3, [sp, #20]
 800f7f8:	1a9a      	subs	r2, r3, r2
 800f7fa:	12d2      	asrs	r2, r2, #11
 800f7fc:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 800f800:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800f804:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 800f808:	12db      	asrs	r3, r3, #11
 800f80a:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800f80c:	9b07      	ldr	r3, [sp, #28]
 800f80e:	42b3      	cmp	r3, r6
 800f810:	f47f af5f 	bne.w	800f6d2 <jpeg_idct_9x9+0x1e>
 800f814:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 800f816:	aa08      	add	r2, sp, #32
 800f818:	3b04      	subs	r3, #4
 800f81a:	9301      	str	r3, [sp, #4]
 800f81c:	9b06      	ldr	r3, [sp, #24]
 800f81e:	3320      	adds	r3, #32
 800f820:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800f822:	9b01      	ldr	r3, [sp, #4]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 800f824:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    z1 = (INT32) wsptr[2];
 800f828:	6890      	ldr	r0, [r2, #8]
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 800f82a:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 800f82c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z4 = (INT32) wsptr[7];
 800f830:	f852 9c04 	ldr.w	r9, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 800f834:	9106      	str	r1, [sp, #24]
 800f836:	9301      	str	r3, [sp, #4]
 800f838:	460b      	mov	r3, r1
 800f83a:	995a      	ldr	r1, [sp, #360]	; 0x168
 800f83c:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f83e:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z2 = (INT32) wsptr[4];
 800f842:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800f846:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 800f84a:	f852 3c08 	ldr.w	r3, [r2, #-8]
 800f84e:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 800f852:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 800f856:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 800f85a:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp2 = tmp0 - tmp3 - tmp3;
 800f85e:	1b9e      	subs	r6, r3, r6
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 800f860:	1a43      	subs	r3, r0, r1
 800f862:	fb0c f303 	mul.w	r3, ip, r3
 800f866:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 800f868:	18f3      	adds	r3, r6, r3
 800f86a:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 800f86c:	1843      	adds	r3, r0, r1
 800f86e:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 800f870:	f242 25ab 	movw	r5, #8875	; 0x22ab
 800f874:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 800f876:	f240 75dc 	movw	r5, #2012	; 0x7dc
 800f87a:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 800f87c:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 800f87e:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 800f880:	1a6d      	subs	r5, r5, r1
    tmp12 = tmp1 - tmp0 + tmp2;
 800f882:	4403      	add	r3, r0
    tmp13 = tmp1 - tmp2 + tmp3;
 800f884:	1a38      	subs	r0, r7, r0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 800f886:	4f3d      	ldr	r7, [pc, #244]	; (800f97c <jpeg_idct_9x9+0x2c8>)
    tmp13 = tmp1 - tmp2 + tmp3;
 800f888:	1841      	adds	r1, r0, r1
    z1 = (INT32) wsptr[1];
 800f88a:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp12 = tmp1 - tmp0 + tmp2;
 800f88e:	9304      	str	r3, [sp, #16]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 800f890:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp13 = tmp1 - tmp2 + tmp3;
 800f894:	9105      	str	r1, [sp, #20]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 800f896:	eb00 0e09 	add.w	lr, r0, r9
    z2 = (INT32) wsptr[3];
 800f89a:	f852 1c14 	ldr.w	r1, [r2, #-20]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 800f89e:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 800f8a0:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 800f8a4:	eb00 0b07 	add.w	fp, r0, r7
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 800f8a8:	eba7 0809 	sub.w	r8, r7, r9
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 800f8ac:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 800f8b0:	f640 737a 	movw	r3, #3962	; 0xf7a
 800f8b4:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 800f8b8:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 800f8bc:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 800f8c0:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f8c4:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 800f8c8:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 800f8cc:	eba1 0708 	sub.w	r7, r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f8d0:	1ac0      	subs	r0, r0, r3
    tmp3 += z2 + tmp1;
 800f8d2:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f8d4:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp2 += z2 - tmp1;
 800f8d8:	445f      	add	r7, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f8da:	eba0 0909 	sub.w	r9, r0, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f8de:	eb05 000c 	add.w	r0, r5, ip
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f8e2:	eba5 050c 	sub.w	r5, r5, ip
    tmp3 += z2 + tmp1;
 800f8e6:	448e      	add	lr, r1
			    & RANGE_MASK];
 800f8e8:	f3c0 4089 	ubfx	r0, r0, #18, #10
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 800f8ec:	fb03 f909 	mul.w	r9, r3, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f8f0:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
 800f8f2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 800f8f6:	f81a 0000 	ldrb.w	r0, [sl, r0]
 800f8fa:	9b06      	ldr	r3, [sp, #24]
 800f8fc:	5458      	strb	r0, [r3, r1]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f8fe:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 800f900:	f81a 0005 	ldrb.w	r0, [sl, r5]
 800f904:	7220      	strb	r0, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f906:	eb03 0009 	add.w	r0, r3, r9
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f90a:	eba3 0909 	sub.w	r9, r3, r9
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f90e:	9b04      	ldr	r3, [sp, #16]
			    & RANGE_MASK];
 800f910:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 800f914:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 800f918:	f81a 0000 	ldrb.w	r0, [sl, r0]
 800f91c:	7060      	strb	r0, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 800f91e:	f81a 0009 	ldrb.w	r0, [sl, r9]
 800f922:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f924:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f926:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 800f928:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 800f92c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 800f930:	f81a 0000 	ldrb.w	r0, [sl, r0]
 800f934:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 800f936:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800f93a:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 800f93c:	9b05      	ldr	r3, [sp, #20]
 800f93e:	4473      	add	r3, lr
			    & RANGE_MASK];
 800f940:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 800f944:	f81a 3003 	ldrb.w	r3, [sl, r3]
 800f948:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 800f94a:	9b05      	ldr	r3, [sp, #20]
 800f94c:	eba3 010e 	sub.w	r1, r3, lr
			    & RANGE_MASK];
 800f950:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 800f954:	f81a 3001 	ldrb.w	r3, [sl, r1]
  for (ctr = 0; ctr < 9; ctr++) {
 800f958:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 800f95a:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 800f95c:	9b02      	ldr	r3, [sp, #8]
 800f95e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
			    & RANGE_MASK];
 800f962:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 800f966:	f81a 3003 	ldrb.w	r3, [sl, r3]
 800f96a:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 800f96c:	9b07      	ldr	r3, [sp, #28]
 800f96e:	428b      	cmp	r3, r1
 800f970:	f47f af57 	bne.w	800f822 <jpeg_idct_9x9+0x16e>
  }
}
 800f974:	b051      	add	sp, #324	; 0x144
 800f976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97a:	bf00      	nop
 800f97c:	ffffd8cf 	.word	0xffffd8cf

0800f980 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f984:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 800f988:	b0d7      	sub	sp, #348	; 0x15c
 800f98a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 800f98c:	f1a2 0b02 	sub.w	fp, r2, #2
 800f990:	9303      	str	r3, [sp, #12]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f992:	f100 0380 	add.w	r3, r0, #128	; 0x80
 800f996:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 800f998:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f99a:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800f99c:	f102 030e 	add.w	r3, r2, #14
 800f9a0:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f9a2:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 800f9a6:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f9aa:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800f9ae:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f9b0:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f9b4:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f9b6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f9ba:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f9be:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 800f9c0:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 800f9c4:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 800f9c6:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 800f9ca:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 800f9ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 800f9d2:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 800f9d4:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 800f9d6:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 800f9d8:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f9da:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 800f9de:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f9e2:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 800f9e6:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f9e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f9ea:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f9ec:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800f9f0:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 800f9f2:	19f3      	adds	r3, r6, r7
 800f9f4:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 800f9f6:	f241 0071 	movw	r0, #4209	; 0x1071
 800f9fa:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 800f9fe:	489d      	ldr	r0, [pc, #628]	; (800fc74 <jpeg_idct_10x10+0x2f4>)
 800fa00:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 800fa04:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 800fa08:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fa0a:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 800fa0e:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 800fa10:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fa12:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 800fa16:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fa18:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fa1a:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fa1e:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fa20:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp24 = tmp10 - tmp12;
 800fa22:	9001      	str	r0, [sp, #4]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 800fa24:	f640 10e3 	movw	r0, #2531	; 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fa28:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fa2a:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 800fa2e:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fa32:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 800fa36:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 800fa38:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 800fa3c:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 800fa3e:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 800fa42:	f641 606f 	movw	r0, #7791	; 0x1e6f
 800fa46:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 800fa4a:	f642 40b3 	movw	r0, #11443	; 0x2cb3
    z4 = z5 + tmp12;
 800fa4e:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 800fa52:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fa56:	f240 7014 	movw	r0, #1812	; 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 800fa5a:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fa5e:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 800fa60:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 800fa62:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 800fa66:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fa68:	1b86      	subs	r6, r0, r6
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 800fa6a:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fa6e:	f642 0353 	movw	r3, #10323	; 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fa72:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 800fa74:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fa78:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 800fa7a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 800fa7e:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fa82:	f241 468c 	movw	r6, #5260	; 0x148c
 800fa86:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fa88:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fa8c:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 800fa90:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 800fa94:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fa98:	1b5b      	subs	r3, r3, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 800fa9a:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fa9c:	444d      	add	r5, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 800fa9e:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 800faa2:	ea4f 22ec 	mov.w	r2, ip, asr #11
 800faa6:	f8c1 211c 	str.w	r2, [r1, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 800faaa:	18fa      	adds	r2, r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 800faac:	1aff      	subs	r7, r7, r3
    wsptr[8*2] = (int) (tmp22 + tmp12);
 800faae:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 800fab0:	12d2      	asrs	r2, r2, #11
    wsptr[8*2] = (int) (tmp22 + tmp12);
 800fab2:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 800fab6:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 800fab8:	61ca      	str	r2, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 800faba:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 800fabc:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 800fabe:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
    wsptr[8*7] = (int) (tmp22 - tmp12);
 800fac2:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 800fac6:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 800faca:	9b02      	ldr	r3, [sp, #8]
 800facc:	442b      	add	r3, r5
 800face:	12db      	asrs	r3, r3, #11
 800fad0:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 800fad2:	9b02      	ldr	r3, [sp, #8]
 800fad4:	1b5d      	subs	r5, r3, r5
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 800fad6:	9b01      	ldr	r3, [sp, #4]
 800fad8:	4453      	add	r3, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 800fada:	12ed      	asrs	r5, r5, #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 800fadc:	12db      	asrs	r3, r3, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 800fade:	f8c1 50bc 	str.w	r5, [r1, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 800fae2:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 800fae4:	9b01      	ldr	r3, [sp, #4]
 800fae6:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800faea:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 800faec:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800faf0:	455b      	cmp	r3, fp
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 800faf2:	f8c1 609c 	str.w	r6, [r1, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800faf6:	f47f af54 	bne.w	800f9a2 <jpeg_idct_10x10+0x22>
 800fafa:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 800fafc:	a906      	add	r1, sp, #24
 800fafe:	f1a3 0b04 	sub.w	fp, r3, #4
 800fb02:	3324      	adds	r3, #36	; 0x24
 800fb04:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800fb06:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 800fb0a:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 800fb0e:	9a60      	ldr	r2, [sp, #384]	; 0x180
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 800fb10:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 800fb12:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 800fb16:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 800fb18:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 800fb1c:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 800fb1e:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fb22:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 800fb26:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fb2a:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 800fb2c:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 800fb2e:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 800fb32:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 800fb34:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 800fb38:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 800fb3c:	006d      	lsls	r5, r5, #1
 800fb3e:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 800fb42:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 800fb46:	9301      	str	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 800fb48:	19eb      	adds	r3, r5, r7
 800fb4a:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 800fb4c:	f241 0071 	movw	r0, #4209	; 0x1071
 800fb50:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 800fb54:	4847      	ldr	r0, [pc, #284]	; (800fc74 <jpeg_idct_10x10+0x2f4>)
 800fb56:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 800fb5a:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 800fb5e:	1b70      	subs	r0, r6, r5
    z2 = (INT32) wsptr[3];
 800fb60:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp21 = tmp11 + tmp13;
 800fb64:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 800fb66:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 800fb68:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 800fb6a:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 800fb6e:	9303      	str	r3, [sp, #12]
    z4 = (INT32) wsptr[7];
 800fb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 800fb74:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 800fb78:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 800fb7c:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 800fb7e:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 800fb82:	f641 606f 	movw	r0, #7791	; 0x1e6f
 800fb86:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 800fb8a:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 800fb8e:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 800fb92:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 800fb96:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fb9a:	f240 7014 	movw	r0, #1812	; 0x714
 800fb9e:	fb00 f602 	mul.w	r6, r0, r2
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 800fba2:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 800fba6:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 800fba8:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fbac:	eba6 0608 	sub.w	r6, r6, r8
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 800fbb0:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 800fbb4:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 800fbb6:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 800fbb8:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 800fbbc:	035b      	lsls	r3, r3, #13
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 800fbbe:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fbc2:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 800fbc6:	eba3 3840 	sub.w	r8, r3, r0, lsl #13
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fbca:	f642 0353 	movw	r3, #10323	; 0x2853
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 800fbce:	9800      	ldr	r0, [sp, #0]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fbd0:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fbd2:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 800fbd4:	9e60      	ldr	r6, [sp, #384]	; 0x180
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fbd6:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fbda:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 800fbde:	eb0c 020e 	add.w	r2, ip, lr
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 800fbe2:	ebac 0c0e 	sub.w	ip, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 800fbe6:	1b5b      	subs	r3, r3, r5
			    & RANGE_MASK];
 800fbe8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 800fbec:	444d      	add	r5, r9
			    & RANGE_MASK];
 800fbee:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 800fbf2:	5c82      	ldrb	r2, [r0, r2]
 800fbf4:	9804      	ldr	r0, [sp, #16]
 800fbf6:	5582      	strb	r2, [r0, r6]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 800fbf8:	9a00      	ldr	r2, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 800fbfa:	9800      	ldr	r0, [sp, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 800fbfc:	f812 200c 	ldrb.w	r2, [r2, ip]
 800fc00:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 800fc02:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 800fc04:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 800fc06:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 800fc0a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 800fc0e:	5c82      	ldrb	r2, [r0, r2]
 800fc10:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 800fc12:	5dc3      	ldrb	r3, [r0, r7]
 800fc14:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 800fc16:	9b01      	ldr	r3, [sp, #4]
 800fc18:	4443      	add	r3, r8
			    & RANGE_MASK];
 800fc1a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 800fc1e:	5cc3      	ldrb	r3, [r0, r3]
 800fc20:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 800fc22:	9b01      	ldr	r3, [sp, #4]
 800fc24:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 800fc28:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 800fc2c:	f810 3008 	ldrb.w	r3, [r0, r8]
 800fc30:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 800fc32:	9b03      	ldr	r3, [sp, #12]
 800fc34:	442b      	add	r3, r5
			    & RANGE_MASK];
 800fc36:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 800fc3a:	5cc3      	ldrb	r3, [r0, r3]
 800fc3c:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 800fc3e:	9b03      	ldr	r3, [sp, #12]
 800fc40:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 800fc42:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 800fc46:	5d43      	ldrb	r3, [r0, r5]
 800fc48:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 800fc4a:	9b02      	ldr	r3, [sp, #8]
 800fc4c:	4453      	add	r3, sl
			    & RANGE_MASK];
 800fc4e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 800fc52:	5cc3      	ldrb	r3, [r0, r3]
 800fc54:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 800fc56:	9b02      	ldr	r3, [sp, #8]
 800fc58:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 800fc5c:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 800fc60:	f810 300a 	ldrb.w	r3, [r0, sl]
 800fc64:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 800fc66:	9b05      	ldr	r3, [sp, #20]
 800fc68:	455b      	cmp	r3, fp
 800fc6a:	f47f af4c 	bne.w	800fb06 <jpeg_idct_10x10+0x186>
  }
}
 800fc6e:	b057      	add	sp, #348	; 0x15c
 800fc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc74:	ffffba5c 	.word	0xffffba5c

0800fc78 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7c:	b0e5      	sub	sp, #404	; 0x194
 800fc7e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800fc80:	f1a2 0a02 	sub.w	sl, r2, #2
 800fc84:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fc86:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800fc8a:	3380      	adds	r3, #128	; 0x80
 800fc8c:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800fc8e:	1f0b      	subs	r3, r1, #4
 800fc90:	9302      	str	r3, [sp, #8]
 800fc92:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 800fc96:	aa0c      	add	r2, sp, #48	; 0x30
 800fc98:	930a      	str	r3, [sp, #40]	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fc9a:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 800fc9c:	f642 3c6c 	movw	ip, #11116	; 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fca0:	f93a 3f02 	ldrsh.w	r3, [sl, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800fca4:	3204      	adds	r2, #4
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fca6:	f851 0f04 	ldr.w	r0, [r1, #4]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fcaa:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fcae:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fcb0:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fcb2:	f9ba 5040 	ldrsh.w	r5, [sl, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fcb6:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fcb8:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fcbc:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp10 <<= CONST_BITS;
 800fcc0:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fcc2:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fcc4:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fcc8:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fcca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fcce:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 800fcd0:	f245 157e 	movw	r5, #20862	; 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 800fcd4:	1a27      	subs	r7, r4, r0
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fcd6:	f9ba e010 	ldrsh.w	lr, [sl, #16]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 800fcda:	eba4 0b06 	sub.w	fp, r4, r6
 800fcde:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 800fce2:	f640 55c9 	movw	r5, #3529	; 0xdc9
 800fce6:	436f      	muls	r7, r5
    z4 = z1 + z3;
 800fce8:	1985      	adds	r5, r0, r6
    z4 -= z2;
 800fcea:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 800fcec:	fb0c 3301 	mla	r3, ip, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 800fcf0:	eb0b 0c07 	add.w	ip, fp, r7
    z4 -= z2;
 800fcf4:	9109      	str	r1, [sp, #36]	; 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 800fcf6:	449c      	add	ip, r3
 800fcf8:	49d0      	ldr	r1, [pc, #832]	; (801003c <jpeg_idct_11x11+0x3c4>)
 800fcfa:	fb01 c104 	mla	r1, r1, r4, ip
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 800fcfe:	f244 3cb5 	movw	ip, #17333	; 0x43b5
    tmp21 = tmp20 + tmp23 + tmp25 -
 800fd02:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 800fd04:	fb0c 3c06 	mla	ip, ip, r6, r3
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 800fd08:	49cd      	ldr	r1, [pc, #820]	; (8010040 <jpeg_idct_11x11+0x3c8>)
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 800fd0a:	44e3      	add	fp, ip
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 800fd0c:	fb01 3c00 	mla	ip, r1, r0, r3
 800fd10:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fd14:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fd18:	f9ba c050 	ldrsh.w	ip, [sl, #80]	; 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 800fd1c:	9104      	str	r1, [sp, #16]
    tmp24 += tmp25;
 800fd1e:	49c9      	ldr	r1, [pc, #804]	; (8010044 <jpeg_idct_11x11+0x3cc>)
 800fd20:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 800fd24:	f601 31be 	addw	r1, r1, #3006	; 0xbbe
 800fd28:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 800fd2c:	f643 6639 	movw	r6, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 800fd30:	9105      	str	r1, [sp, #20]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 800fd32:	49c5      	ldr	r1, [pc, #788]	; (8010048 <jpeg_idct_11x11+0x3d0>)
 800fd34:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 800fd36:	fb06 0004 	mla	r0, r6, r4, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fd3a:	f9ba 6070 	ldrsh.w	r6, [sl, #112]	; 0x70

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 800fd3e:	f44f 644c 	mov.w	r4, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 800fd42:	1941      	adds	r1, r0, r5
 800fd44:	9106      	str	r1, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fd46:	9902      	ldr	r1, [sp, #8]
 800fd48:	6a08      	ldr	r0, [r1, #32]
 800fd4a:	fb00 f90e 	mul.w	r9, r0, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fd4e:	6e08      	ldr	r0, [r1, #96]	; 0x60
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 800fd50:	f241 5e74 	movw	lr, #5492	; 0x1574
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fd54:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fd56:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 800fd5a:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fd5e:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
 800fd62:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 800fd64:	eb09 0007 	add.w	r0, r9, r7
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 800fd68:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 800fd6c:	eb09 0806 	add.w	r8, r9, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 800fd70:	4435      	add	r5, r6
 800fd72:	4365      	muls	r5, r4
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 800fd74:	f641 446a 	movw	r4, #7274	; 0x1c6a
 800fd78:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 800fd7a:	eb09 040c 	add.w	r4, r9, ip
 800fd7e:	fb0e f104 	mul.w	r1, lr, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 800fd82:	f640 34b8 	movw	r4, #3000	; 0xbb8
    tmp10 = tmp11 + tmp12 + tmp13 -
 800fd86:	eb00 0e01 	add.w	lr, r0, r1
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 800fd8a:	fb04 5808 	mla	r8, r4, r8, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 800fd8e:	9107      	str	r1, [sp, #28]
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 800fd90:	eb07 040c 	add.w	r4, r7, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 800fd94:	44c6      	add	lr, r8
 800fd96:	49ad      	ldr	r1, [pc, #692]	; (801004c <jpeg_idct_11x11+0x3d4>)
 800fd98:	fb01 ee09 	mla	lr, r1, r9, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 800fd9c:	f2a1 71ad 	subw	r1, r1, #1965	; 0x7ad
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 800fda0:	f244 2958 	movw	r9, #16984	; 0x4258
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 800fda4:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 800fda8:	39ef      	subs	r1, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 800fdaa:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 800fdae:	fb01 440c 	mla	r4, r1, ip, r4
 800fdb2:	9907      	ldr	r1, [sp, #28]
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 800fdb4:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 800fdb6:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 800fdb8:	440c      	add	r4, r1
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 800fdba:	49a5      	ldr	r1, [pc, #660]	; (8010050 <jpeg_idct_11x11+0x3d8>)
 800fdbc:	4348      	muls	r0, r1
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 800fdbe:	f244 3147 	movw	r1, #17223	; 0x4347
    tmp11 += z1;
 800fdc2:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 800fdc4:	fb01 0006 	mla	r0, r1, r6, r0

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 800fdc8:	9903      	ldr	r1, [sp, #12]
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 800fdca:	4480      	add	r8, r0
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 800fdcc:	f242 000b 	movw	r0, #8203	; 0x200b
 800fdd0:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 800fdd4:	489f      	ldr	r0, [pc, #636]	; (8010054 <jpeg_idct_11x11+0x3dc>)
 800fdd6:	fb00 cc07 	mla	ip, r0, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 800fdda:	f2a0 60f7 	subw	r0, r0, #1783	; 0x6f7
 800fdde:	fb00 cc06 	mla	ip, r0, r6, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 800fde2:	eb0b 000e 	add.w	r0, fp, lr
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 800fde6:	ebab 0e0e 	sub.w	lr, fp, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 800fdea:	12c0      	asrs	r0, r0, #11
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 800fdec:	4465      	add	r5, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 800fdee:	f842 0c04 	str.w	r0, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 800fdf2:	ea4f 20ee 	mov.w	r0, lr, asr #11
 800fdf6:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 800fdfa:	eb01 0009 	add.w	r0, r1, r9
 800fdfe:	12c0      	asrs	r0, r0, #11
 800fe00:	61d0      	str	r0, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 800fe02:	eba1 0009 	sub.w	r0, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 800fe06:	9905      	ldr	r1, [sp, #20]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 800fe08:	12c0      	asrs	r0, r0, #11
 800fe0a:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 800fe0e:	1908      	adds	r0, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 800fe10:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 800fe12:	12c0      	asrs	r0, r0, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 800fe14:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 800fe16:	63d0      	str	r0, [r2, #60]	; 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 800fe18:	9904      	ldr	r1, [sp, #16]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 800fe1a:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 800fe1e:	eb01 0008 	add.w	r0, r1, r8
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 800fe22:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 800fe26:	9906      	ldr	r1, [sp, #24]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 800fe28:	12c0      	asrs	r0, r0, #11
 800fe2a:	65d0      	str	r0, [r2, #92]	; 0x5c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 800fe2c:	ea4f 20e8 	mov.w	r0, r8, asr #11
 800fe30:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 800fe34:	1948      	adds	r0, r1, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 800fe36:	1b4d      	subs	r5, r1, r5
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 800fe38:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 800fe3a:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 800fe3c:	12ed      	asrs	r5, r5, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 800fe3e:	67d0      	str	r0, [r2, #124]	; 0x7c
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 800fe40:	f645 00ad 	movw	r0, #22701	; 0x58ad
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 800fe44:	f8c2 50bc 	str.w	r5, [r2, #188]	; 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 800fe48:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 800fe4c:	12db      	asrs	r3, r3, #11
 800fe4e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 800fe52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe54:	4553      	cmp	r3, sl
 800fe56:	f47f af20 	bne.w	800fc9a <jpeg_idct_11x11+0x22>
 800fe5a:	9b08      	ldr	r3, [sp, #32]
 800fe5c:	3b04      	subs	r3, #4
 800fe5e:	9303      	str	r3, [sp, #12]
 800fe60:	9b08      	ldr	r3, [sp, #32]
 800fe62:	3328      	adds	r3, #40	; 0x28
 800fe64:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 800fe66:	ab0c      	add	r3, sp, #48	; 0x30
 800fe68:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800fe6a:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 800fe6c:	f245 1e7e 	movw	lr, #20862	; 0x517e
    z1 = (INT32) wsptr[2];
 800fe70:	9a02      	ldr	r2, [sp, #8]
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 800fe72:	f241 5b74 	movw	fp, #5492	; 0x1574
    outptr = output_buf[ctr] + output_col;
 800fe76:	f853 1f04 	ldr.w	r1, [r3, #4]!
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 800fe7a:	f244 2a58 	movw	sl, #16984	; 0x4258
    z2 = (INT32) wsptr[4];
 800fe7e:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 800fe80:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 800fe82:	9109      	str	r1, [sp, #36]	; 0x24
 800fe84:	9303      	str	r3, [sp, #12]
 800fe86:	460b      	mov	r3, r1
 800fe88:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 800fe8a:	1bf0      	subs	r0, r6, r7
    z1 = (INT32) wsptr[2];
 800fe8c:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 800fe8e:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fe90:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 800fe92:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 800fe94:	fb0e fe00 	mul.w	lr, lr, r0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 800fe98:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fe9c:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 800fe9e:	f640 50c9 	movw	r0, #3529	; 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 800fea2:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 800fea4:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 800fea6:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 800feaa:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 800feac:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 800feae:	900a      	str	r0, [sp, #40]	; 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 800feb0:	f642 306c 	movw	r0, #11116	; 0x2b6c
 800feb4:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 800feb8:	eb0e 000c 	add.w	r0, lr, ip
 800febc:	4a5f      	ldr	r2, [pc, #380]	; (801003c <jpeg_idct_11x11+0x3c4>)
 800febe:	4418      	add	r0, r3
 800fec0:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 800fec4:	f244 30b5 	movw	r0, #17333	; 0x43b5
 800fec8:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 800fecc:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 800fece:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 800fed2:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 800fed4:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 800fed6:	4a5a      	ldr	r2, [pc, #360]	; (8010040 <jpeg_idct_11x11+0x3c8>)
 800fed8:	fb02 3e04 	mla	lr, r2, r4, r3
 800fedc:	eb0e 020c 	add.w	r2, lr, ip
 800fee0:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 800fee2:	4a58      	ldr	r2, [pc, #352]	; (8010044 <jpeg_idct_11x11+0x3cc>)
 800fee4:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 800fee8:	f602 32be 	addw	r2, r2, #3006	; 0xbbe
 800feec:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 800fef0:	f643 6739 	movw	r7, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 800fef4:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 800fef6:	4a54      	ldr	r2, [pc, #336]	; (8010048 <jpeg_idct_11x11+0x3d0>)
 800fef8:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 800fefa:	fb07 4406 	mla	r4, r7, r6, r4
 800fefe:	1962      	adds	r2, r4, r5
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 800ff00:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 800ff04:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 800ff06:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 800ff08:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 800ff0c:	6857      	ldr	r7, [r2, #4]
    z3 = (INT32) wsptr[5];
 800ff0e:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 800ff12:	eb07 040e 	add.w	r4, r7, lr
    z4 = (INT32) wsptr[7];
 800ff16:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp10 = tmp11 + tmp12 + tmp13 -
 800ff1a:	4a4c      	ldr	r2, [pc, #304]	; (801004c <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 800ff1c:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 800ff20:	eb07 090c 	add.w	r9, r7, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 800ff24:	4466      	add	r6, ip
 800ff26:	436e      	muls	r6, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 800ff28:	f641 456a 	movw	r5, #7274	; 0x1c6a
 800ff2c:	436c      	muls	r4, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 800ff2e:	eb07 0508 	add.w	r5, r7, r8
 800ff32:	fb0b fb05 	mul.w	fp, fp, r5
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 800ff36:	f640 35b8 	movw	r5, #3000	; 0xbb8
 800ff3a:	fb05 6909 	mla	r9, r5, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 800ff3e:	eb04 050b 	add.w	r5, r4, fp
 800ff42:	444d      	add	r5, r9
 800ff44:	fb02 5707 	mla	r7, r2, r7, r5
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 800ff48:	eb0e 0508 	add.w	r5, lr, r8
 800ff4c:	f2a2 72ad 	subw	r2, r2, #1965	; 0x7ad
 800ff50:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 800ff54:	3aef      	subs	r2, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 800ff56:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 800ff5a:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 800ff5e:	4a3c      	ldr	r2, [pc, #240]	; (8010050 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 800ff60:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 800ff62:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 800ff66:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 800ff68:	f244 3b47 	movw	fp, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 800ff6c:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 800ff6e:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 800ff70:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 800ff72:	fb0b 440c 	mla	r4, fp, ip, r4
 800ff76:	44a1      	add	r9, r4
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 800ff78:	f242 040b 	movw	r4, #8203	; 0x200b
 800ff7c:	fb04 f808 	mul.w	r8, r4, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 800ff80:	4c34      	ldr	r4, [pc, #208]	; (8010054 <jpeg_idct_11x11+0x3dc>)
 800ff82:	fb04 880e 	mla	r8, r4, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 800ff86:	f2a4 64f7 	subw	r4, r4, #1783	; 0x6f7
 800ff8a:	fb04 880c 	mla	r8, r4, ip, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 800ff8e:	19d4      	adds	r4, r2, r7
 800ff90:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 800ff92:	f3c4 4489 	ubfx	r4, r4, #18, #10
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 800ff96:	4446      	add	r6, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 800ff98:	5d14      	ldrb	r4, [r2, r4]
 800ff9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff9c:	5414      	strb	r4, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 800ff9e:	9a05      	ldr	r2, [sp, #20]
 800ffa0:	1bd0      	subs	r0, r2, r7
 800ffa2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 800ffa4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 800ffa8:	5c10      	ldrb	r0, [r2, r0]
 800ffaa:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 800ffac:	9a04      	ldr	r2, [sp, #16]
 800ffae:	eb02 000a 	add.w	r0, r2, sl
 800ffb2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 800ffb4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 800ffb8:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 800ffba:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 800ffbc:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 800ffbe:	eba2 0a0a 	sub.w	sl, r2, sl
 800ffc2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 800ffc4:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 800ffc8:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 800ffcc:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 800ffce:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 800ffd0:	1950      	adds	r0, r2, r5
 800ffd2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 800ffd4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 800ffd8:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 800ffda:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 800ffdc:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 800ffde:	1b55      	subs	r5, r2, r5
 800ffe0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 800ffe2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 800ffe6:	5d50      	ldrb	r0, [r2, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 800ffe8:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 800ffea:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 800ffec:	eb02 0009 	add.w	r0, r2, r9
 800fff0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 800fff2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 800fff6:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 800fff8:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 800fffa:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 800fffc:	eba2 0909 	sub.w	r9, r2, r9
 8010000:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010002:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010006:	f812 0009 	ldrb.w	r0, [r2, r9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801000a:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801000c:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801000e:	1990      	adds	r0, r2, r6
 8010010:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010012:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010016:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010018:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801001a:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801001c:	1b96      	subs	r6, r2, r6
 801001e:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010020:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010024:	5d90      	ldrb	r0, [r2, r6]
 8010026:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8010028:	f645 00ad 	movw	r0, #22701	; 0x58ad
 801002c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801002e:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8010032:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010034:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8010038:	5cd3      	ldrb	r3, [r2, r3]
 801003a:	e00d      	b.n	8010058 <jpeg_idct_11x11+0x3e0>
 801003c:	ffffc5b4 	.word	0xffffc5b4
 8010040:	ffffcf91 	.word	0xffffcf91
 8010044:	ffffdb05 	.word	0xffffdb05
 8010048:	ffffd37d 	.word	0xffffd37d
 801004c:	ffffe276 	.word	0xffffe276
 8010050:	ffffc675 	.word	0xffffc675
 8010054:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 8010058:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 801005a:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 801005c:	9b02      	ldr	r3, [sp, #8]
 801005e:	3320      	adds	r3, #32
 8010060:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 8010062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010064:	4293      	cmp	r3, r2
 8010066:	f47f af00 	bne.w	800fe6a <jpeg_idct_11x11+0x1f2>
  }
}
 801006a:	b065      	add	sp, #404	; 0x194
 801006c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010070 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010074:	b0eb      	sub	sp, #428	; 0x1ac
 8010076:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010078:	f1a2 0902 	sub.w	r9, r2, #2
 801007c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801007e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010082:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010086:	1f0b      	subs	r3, r1, #4
 8010088:	9300      	str	r3, [sp, #0]
 801008a:	f102 030e 	add.w	r3, r2, #14
 801008e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8010090:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010092:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8010094:	f641 388d 	movw	r8, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010098:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801009c:	f640 0a5b 	movw	sl, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80100a0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80100a4:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80100a6:	f9b9 0040 	ldrsh.w	r0, [r9, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80100aa:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80100ac:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80100b0:	f9b9 5020 	ldrsh.w	r5, [r9, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80100b4:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80100b6:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80100ba:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 80100bc:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80100be:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80100c0:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80100c2:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80100c6:	f9b9 c060 	ldrsh.w	ip, [r9, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80100ca:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80100cc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80100d0:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80100d4:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 80100d6:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 80100d8:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80100da:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 80100de:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 80100e2:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 80100e4:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 80100e8:	eb07 010c 	add.w	r1, r7, ip
 80100ec:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 80100ee:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 80100f2:	1907      	adds	r7, r0, r4
    tmp12 = z4 - z1 - z2;
 80100f4:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 80100f8:	9102      	str	r1, [sp, #8]
    tmp20 = tmp10 + tmp12;
 80100fa:	19f1      	adds	r1, r6, r7
    tmp12 = z4 - z1 - z2;
 80100fc:	1b04      	subs	r4, r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80100fe:	f9b9 c030 	ldrsh.w	ip, [r9, #48]	; 0x30
    tmp20 = tmp10 + tmp12;
 8010102:	9103      	str	r1, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8010104:	1bf1      	subs	r1, r6, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010106:	f9b9 7010 	ldrsh.w	r7, [r9, #16]
    tmp25 = tmp10 - tmp12;
 801010a:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 801010c:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 801010e:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010110:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010114:	f9b9 0070 	ldrsh.w	r0, [r9, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 8010118:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801011a:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 801011c:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801011e:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010122:	6a12      	ldr	r2, [r2, #32]
 8010124:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010126:	9a00      	ldr	r2, [sp, #0]
 8010128:	6e12      	ldr	r2, [r2, #96]	; 0x60
 801012a:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801012e:	9a00      	ldr	r2, [sp, #0]
 8010130:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8010134:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8010138:	49b6      	ldr	r1, [pc, #728]	; (8010414 <jpeg_idct_12x12+0x3a4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801013a:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801013c:	9a00      	ldr	r2, [sp, #0]
 801013e:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 8010142:	197e      	adds	r6, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010144:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8010146:	fb01 f00c 	mul.w	r0, r1, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801014a:	49b3      	ldr	r1, [pc, #716]	; (8010418 <jpeg_idct_12x12+0x3a8>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801014c:	eb02 0e06 	add.w	lr, r2, r6
 8010150:	fb08 fe0e 	mul.w	lr, r8, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8010154:	fb0a ea06 	mla	sl, sl, r6, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010158:	f640 06f7 	movw	r6, #2295	; 0x8f7
 801015c:	eb04 080a 	add.w	r8, r4, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010160:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8010164:	fb06 8807 	mla	r8, r6, r7, r8
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8010168:	18ae      	adds	r6, r5, r2
 801016a:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801016c:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801016e:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010170:	49aa      	ldr	r1, [pc, #680]	; (801041c <jpeg_idct_12x12+0x3ac>)
 8010172:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010176:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8010178:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801017c:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8010180:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010182:	f243 2ac6 	movw	sl, #12998	; 0x32c6
 8010186:	fb0a 4402 	mla	r4, sl, r2, r4
 801018a:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801018c:	49a4      	ldr	r1, [pc, #656]	; (8010420 <jpeg_idct_12x12+0x3b0>)
 801018e:	fb01 0007 	mla	r0, r1, r7, r0
 8010192:	49a4      	ldr	r1, [pc, #656]	; (8010424 <jpeg_idct_12x12+0x3b4>)
 8010194:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8010198:	1aba      	subs	r2, r7, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801019a:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801019e:	f641 077e 	movw	r7, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80101a2:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80101a4:	eb02 0e05 	add.w	lr, r2, r5
 80101a8:	fb0c fe0e 	mul.w	lr, ip, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80101ac:	fb01 e505 	mla	r5, r1, r5, lr

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80101b0:	9903      	ldr	r1, [sp, #12]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80101b2:	fb07 e202 	mla	r2, r7, r2, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80101b6:	eb01 0708 	add.w	r7, r1, r8
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80101ba:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80101be:	12ff      	asrs	r7, r7, #11
 80101c0:	f843 7c04 	str.w	r7, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80101c4:	ea4f 27e8 	mov.w	r7, r8, asr #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80101c8:	9901      	ldr	r1, [sp, #4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80101ca:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80101ce:	188f      	adds	r7, r1, r2
 80101d0:	12ff      	asrs	r7, r7, #11
 80101d2:	61df      	str	r7, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80101d4:	1a8f      	subs	r7, r1, r2
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80101d6:	9a05      	ldr	r2, [sp, #20]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80101d8:	12ff      	asrs	r7, r7, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80101da:	4432      	add	r2, r6
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80101dc:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80101e0:	12d2      	asrs	r2, r2, #11
 80101e2:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80101e4:	9a05      	ldr	r2, [sp, #20]
 80101e6:	1b96      	subs	r6, r2, r6
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80101e8:	9a06      	ldr	r2, [sp, #24]
 80101ea:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80101ec:	12f6      	asrs	r6, r6, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80101ee:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80101f0:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80101f4:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80101f6:	9a06      	ldr	r2, [sp, #24]
 80101f8:	1b14      	subs	r4, r2, r4
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80101fa:	9a02      	ldr	r2, [sp, #8]
 80101fc:	442a      	add	r2, r5
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80101fe:	12e4      	asrs	r4, r4, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010200:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010202:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010206:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010208:	9a02      	ldr	r2, [sp, #8]
 801020a:	1b55      	subs	r5, r2, r5
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801020c:	9a04      	ldr	r2, [sp, #16]
 801020e:	4402      	add	r2, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010210:	12ed      	asrs	r5, r5, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010212:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010214:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010218:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801021c:	9a04      	ldr	r2, [sp, #16]
 801021e:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010220:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010222:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010224:	454a      	cmp	r2, r9
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010226:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801022a:	f47f af32 	bne.w	8010092 <jpeg_idct_12x12+0x22>
 801022e:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 8010230:	aa0a      	add	r2, sp, #40	; 0x28
 8010232:	f1a3 0a04 	sub.w	sl, r3, #4
 8010236:	332c      	adds	r3, #44	; 0x2c
 8010238:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801023a:	f85a 3f04 	ldr.w	r3, [sl, #4]!

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801023e:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 8010242:	9974      	ldr	r1, [sp, #464]	; 0x1d0
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010244:	3220      	adds	r2, #32
    z2 = (INT32) wsptr[6];
 8010246:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 801024a:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 801024e:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 8010250:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010252:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 8010256:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 8010258:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 801025c:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010260:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 8010262:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8010264:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8010268:	f642 33b6 	movw	r3, #11190	; 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801026c:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801026e:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 8010272:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 8010276:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 801027a:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 801027c:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 8010280:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 8010284:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 8010288:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 801028c:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 801028e:	1b0c      	subs	r4, r1, r4
    tmp25 = tmp10 - tmp12;
 8010290:	eba6 030c 	sub.w	r3, r6, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8010294:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z3 = (INT32) wsptr[5];
 8010298:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp25 = tmp10 - tmp12;
 801029c:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 801029e:	1903      	adds	r3, r0, r4
    tmp20 = tmp10 + tmp12;
 80102a0:	eb06 070c 	add.w	r7, r6, ip
    tmp22 = tmp11 + tmp12;
 80102a4:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 80102a6:	1b03      	subs	r3, r0, r4
    z4 = (INT32) wsptr[7];
 80102a8:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 80102ac:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80102ae:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80102b2:	eb05 0904 	add.w	r9, r5, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80102b6:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80102ba:	4956      	ldr	r1, [pc, #344]	; (8010414 <jpeg_idct_12x12+0x3a4>)
 80102bc:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 80102be:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 80102c2:	195e      	adds	r6, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80102c4:	eb04 0c06 	add.w	ip, r4, r6
 80102c8:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80102cc:	f640 0e5b 	movw	lr, #2139	; 0x85b
 80102d0:	fb0e c806 	mla	r8, lr, r6, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80102d4:	f640 06f7 	movw	r6, #2295	; 0x8f7
 80102d8:	eb00 0e08 	add.w	lr, r0, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80102dc:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80102e0:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80102e4:	4b4c      	ldr	r3, [pc, #304]	; (8010418 <jpeg_idct_12x12+0x3a8>)
 80102e6:	fb03 f909 	mul.w	r9, r3, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80102ea:	f6a3 53db 	subw	r3, r3, #3547	; 0xddb
 80102ee:	eb01 0609 	add.w	r6, r1, r9
 80102f2:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80102f6:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80102fa:	4446      	add	r6, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80102fc:	f243 28c6 	movw	r8, #12998	; 0x32c6
 8010300:	fb08 0004 	mla	r0, r8, r4, r0
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010304:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8010308:	4481      	add	r9, r0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801030a:	4845      	ldr	r0, [pc, #276]	; (8010420 <jpeg_idct_12x12+0x3b0>)
 801030c:	fb00 1103 	mla	r1, r0, r3, r1
 8010310:	4b44      	ldr	r3, [pc, #272]	; (8010424 <jpeg_idct_12x12+0x3b4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010312:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010314:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 8010318:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 801031c:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 801031e:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8010322:	4461      	add	r1, ip
    z2 -= z3;
 8010324:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8010326:	4b40      	ldr	r3, [pc, #256]	; (8010428 <jpeg_idct_12x12+0x3b8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8010328:	eb04 0c05 	add.w	ip, r4, r5
 801032c:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8010330:	f641 087e 	movw	r8, #6270	; 0x187e
 8010334:	fb08 c404 	mla	r4, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010338:	eb07 080e 	add.w	r8, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801033c:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8010340:	fb03 c505 	mla	r5, r3, r5, ip
			     & RANGE_MASK];
 8010344:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010348:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 801034a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801034e:	f81b c008 	ldrb.w	ip, [fp, r8]
 8010352:	f803 c000 	strb.w	ip, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010356:	9b00      	ldr	r3, [sp, #0]
 8010358:	f81b 7007 	ldrb.w	r7, [fp, r7]
 801035c:	72df      	strb	r7, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801035e:	9b01      	ldr	r3, [sp, #4]
 8010360:	191f      	adds	r7, r3, r4
 8010362:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8010364:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010368:	f81b 7007 	ldrb.w	r7, [fp, r7]
 801036c:	705f      	strb	r7, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801036e:	9b01      	ldr	r3, [sp, #4]
 8010370:	eba3 0804 	sub.w	r8, r3, r4
			     & RANGE_MASK];
 8010374:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010378:	f81b 4008 	ldrb.w	r4, [fp, r8]
 801037c:	9b00      	ldr	r3, [sp, #0]
 801037e:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010380:	9b04      	ldr	r3, [sp, #16]
 8010382:	199c      	adds	r4, r3, r6
 8010384:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8010386:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801038a:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801038e:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010390:	9b04      	ldr	r3, [sp, #16]
 8010392:	1b9e      	subs	r6, r3, r6
 8010394:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8010396:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801039a:	f81b 4006 	ldrb.w	r4, [fp, r6]
 801039e:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80103a0:	9b05      	ldr	r3, [sp, #20]
 80103a2:	eb03 0409 	add.w	r4, r3, r9
 80103a6:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80103a8:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80103ac:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80103b0:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80103b2:	9b05      	ldr	r3, [sp, #20]
 80103b4:	eba3 0009 	sub.w	r0, r3, r9
 80103b8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80103ba:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80103be:	f81b 0000 	ldrb.w	r0, [fp, r0]
 80103c2:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80103c4:	9b02      	ldr	r3, [sp, #8]
 80103c6:	1958      	adds	r0, r3, r5
 80103c8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80103ca:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80103ce:	f81b 0000 	ldrb.w	r0, [fp, r0]
 80103d2:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80103d4:	9b02      	ldr	r3, [sp, #8]
 80103d6:	1b5d      	subs	r5, r3, r5
 80103d8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80103da:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80103de:	f81b 0005 	ldrb.w	r0, [fp, r5]
 80103e2:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80103e4:	9b03      	ldr	r3, [sp, #12]
 80103e6:	1858      	adds	r0, r3, r1
 80103e8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80103ea:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80103ee:	f81b 0000 	ldrb.w	r0, [fp, r0]
 80103f2:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80103f4:	9b03      	ldr	r3, [sp, #12]
 80103f6:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 80103f8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80103fc:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8010400:	9b00      	ldr	r3, [sp, #0]
 8010402:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 8010404:	9b07      	ldr	r3, [sp, #28]
 8010406:	4553      	cmp	r3, sl
 8010408:	f47f af17 	bne.w	801023a <jpeg_idct_12x12+0x1ca>
  }
}
 801040c:	b06b      	add	sp, #428	; 0x1ac
 801040e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010412:	bf00      	nop
 8010414:	ffffeeaf 	.word	0xffffeeaf
 8010418:	ffffde8b 	.word	0xffffde8b
 801041c:	ffffd0b0 	.word	0xffffd0b0
 8010420:	ffffea5c 	.word	0xffffea5c
 8010424:	ffffc08c 	.word	0xffffc08c
 8010428:	ffffc4df 	.word	0xffffc4df

0801042c <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010430:	b0f9      	sub	sp, #484	; 0x1e4
 8010432:	6d4f      	ldr	r7, [r1, #84]	; 0x54
 8010434:	f1a2 0b02 	sub.w	fp, r2, #2
 8010438:	930c      	str	r3, [sp, #48]	; 0x30
 801043a:	3f04      	subs	r7, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801043c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010440:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010444:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8010448:	aa10      	add	r2, sp, #64	; 0x40
 801044a:	930f      	str	r3, [sp, #60]	; 0x3c
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801044c:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8010450:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010454:	f857 1f04 	ldr.w	r1, [r7, #4]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8010458:	f641 6802 	movw	r8, #7682	; 0x1e02
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801045c:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010460:	3204      	adds	r2, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010462:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010464:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010468:	f9bb 0060 	ldrsh.w	r0, [fp, #96]	; 0x60
    z1 <<= CONST_BITS;
 801046c:	035b      	lsls	r3, r3, #13
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801046e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010472:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010476:	435c      	muls	r4, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010478:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801047c:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801047e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010482:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 8010484:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 8010486:	1a09      	subs	r1, r1, r0
 8010488:	9104      	str	r1, [sp, #16]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 801048a:	f240 3119 	movw	r1, #793	; 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801048e:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8010490:	e9dd 6004 	ldrd	r6, r0, [sp, #16]
 8010494:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8010498:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 801049c:	fb00 5004 	mla	r0, r0, r4, r5
 80104a0:	4408      	add	r0, r1
 80104a2:	9006      	str	r0, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80104a4:	f241 000c 	movw	r0, #4108	; 0x100c
 80104a8:	4360      	muls	r0, r4
 80104aa:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80104ac:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80104b0:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80104b2:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80104b6:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80104ba:	9007      	str	r0, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 80104bc:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80104c0:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 80104c2:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80104c4:	1a2d      	subs	r5, r5, r0
 80104c6:	440d      	add	r5, r1
 80104c8:	9508      	str	r5, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80104ca:	4dd0      	ldr	r5, [pc, #832]	; (801080c <jpeg_idct_13x13+0x3e0>)
 80104cc:	fb05 0004 	mla	r0, r5, r4, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80104d0:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80104d4:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80104d6:	9805      	ldr	r0, [sp, #20]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80104d8:	9109      	str	r1, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 80104da:	f640 51f2 	movw	r1, #3570	; 0xdf2
 80104de:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80104e0:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 80104e4:	4371      	muls	r1, r6
 80104e6:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 80104e8:	48c9      	ldr	r0, [pc, #804]	; (8010810 <jpeg_idct_13x13+0x3e4>)
 80104ea:	4360      	muls	r0, r4
 80104ec:	1ac0      	subs	r0, r0, r3
 80104ee:	1a40      	subs	r0, r0, r1
 80104f0:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80104f2:	48c8      	ldr	r0, [pc, #800]	; (8010814 <jpeg_idct_13x13+0x3e8>)
 80104f4:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80104f8:	f9bb 0030 	ldrsh.w	r0, [fp, #48]	; 0x30
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80104fc:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80104fe:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8010502:	930b      	str	r3, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010504:	6a3b      	ldr	r3, [r7, #32]
 8010506:	434b      	muls	r3, r1
 8010508:	9302      	str	r3, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801050a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 801050c:	9902      	ldr	r1, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801050e:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010510:	f9bb 0050 	ldrsh.w	r0, [fp, #80]	; 0x50
 8010514:	4368      	muls	r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010516:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 801051a:	18ce      	adds	r6, r1, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801051c:	9001      	str	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801051e:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
 8010522:	4368      	muls	r0, r5
 8010524:	9003      	str	r0, [sp, #12]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8010526:	f642 2050 	movw	r0, #10832	; 0x2a50
 801052a:	4370      	muls	r0, r6
 801052c:	4601      	mov	r1, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801052e:	e9dd 0501 	ldrd	r0, r5, [sp, #4]
 8010532:	4428      	add	r0, r5
 8010534:	f242 553e 	movw	r5, #9534	; 0x253e
 8010538:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 801053a:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
    tmp10 = tmp11 + tmp12 + tmp13 -
 801053e:	eb01 0e05 	add.w	lr, r1, r5
    tmp15 = z1 + z4;
 8010542:	eb06 0900 	add.w	r9, r6, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010546:	48b4      	ldr	r0, [pc, #720]	; (8010818 <jpeg_idct_13x13+0x3ec>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8010548:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 801054c:	44d6      	add	lr, sl
 801054e:	fb00 ee06 	mla	lr, r0, r6, lr
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8010552:	9801      	ldr	r0, [sp, #4]
 8010554:	4eb1      	ldr	r6, [pc, #708]	; (801081c <jpeg_idct_13x13+0x3f0>)
 8010556:	1818      	adds	r0, r3, r0
 8010558:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 801055a:	f641 26cb 	movw	r6, #6859	; 0x1acb
 801055e:	fb06 0603 	mla	r6, r6, r3, r0
 8010562:	1871      	adds	r1, r6, r1
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8010564:	4eae      	ldr	r6, [pc, #696]	; (8010820 <jpeg_idct_13x13+0x3f4>)
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8010566:	910d      	str	r1, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8010568:	9901      	ldr	r1, [sp, #4]
 801056a:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
    tmp11 += tmp14;
 801056e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8010570:	1941      	adds	r1, r0, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8010572:	f244 6094 	movw	r0, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8010576:	910e      	str	r1, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8010578:	9903      	ldr	r1, [sp, #12]
 801057a:	185d      	adds	r5, r3, r1
 801057c:	49a9      	ldr	r1, [pc, #676]	; (8010824 <jpeg_idct_13x13+0x3f8>)
 801057e:	434d      	muls	r5, r1
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8010580:	9903      	ldr	r1, [sp, #12]
    tmp11 += tmp14;
 8010582:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8010584:	fb00 5501 	mla	r5, r0, r1, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8010588:	9901      	ldr	r1, [sp, #4]
 801058a:	9803      	ldr	r0, [sp, #12]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801058c:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801058e:	eb01 0a00 	add.w	sl, r1, r0
 8010592:	49a5      	ldr	r1, [pc, #660]	; (8010828 <jpeg_idct_13x13+0x3fc>)
    tmp12 += tmp14;
 8010594:	980e      	ldr	r0, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8010596:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801059a:	9902      	ldr	r1, [sp, #8]
    tmp12 += tmp14;
 801059c:	4450      	add	r0, sl
    tmp13 += tmp14;
 801059e:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 80105a0:	f640 25d5 	movw	r5, #2773	; 0xad5
 80105a4:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80105a8:	f640 2533 	movw	r5, #2611	; 0xa33
 80105ac:	fb05 9101 	mla	r1, r5, r1, r9
 80105b0:	4d9e      	ldr	r5, [pc, #632]	; (801082c <jpeg_idct_13x13+0x400>)
 80105b2:	fb05 1103 	mla	r1, r5, r3, r1
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 80105b6:	9d01      	ldr	r5, [sp, #4]
 80105b8:	1aeb      	subs	r3, r5, r3
 80105ba:	fb08 f803 	mul.w	r8, r8, r3
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80105be:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 80105c2:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80105c4:	fb03 8805 	mla	r8, r3, r5, r8
 80105c8:	9d03      	ldr	r5, [sp, #12]
 80105ca:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
 80105ce:	fb03 8805 	mla	r8, r3, r5, r8
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80105d2:	9b06      	ldr	r3, [sp, #24]
 80105d4:	4473      	add	r3, lr
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80105d6:	44c1      	add	r9, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80105d8:	12db      	asrs	r3, r3, #11
 80105da:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80105de:	9b06      	ldr	r3, [sp, #24]
 80105e0:	eba3 0e0e 	sub.w	lr, r3, lr
 80105e4:	ea4f 23ee 	mov.w	r3, lr, asr #11
 80105e8:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80105ec:	9b08      	ldr	r3, [sp, #32]
 80105ee:	4433      	add	r3, r6
 80105f0:	12db      	asrs	r3, r3, #11
 80105f2:	61d3      	str	r3, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80105f4:	9b08      	ldr	r3, [sp, #32]
 80105f6:	1b9e      	subs	r6, r3, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80105f8:	9b07      	ldr	r3, [sp, #28]
 80105fa:	4403      	add	r3, r0
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80105fc:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80105fe:	12db      	asrs	r3, r3, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010600:	f8c2 615c 	str.w	r6, [r2, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010604:	63d3      	str	r3, [r2, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010606:	9b07      	ldr	r3, [sp, #28]
 8010608:	1a18      	subs	r0, r3, r0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801060a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801060c:	4453      	add	r3, sl
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801060e:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010610:	12db      	asrs	r3, r3, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010612:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010616:	65d3      	str	r3, [r2, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801061a:	eba3 0a0a 	sub.w	sl, r3, sl
 801061e:	ea4f 25ea 	mov.w	r5, sl, asr #11
 8010622:	f8c2 511c 	str.w	r5, [r2, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010628:	440b      	add	r3, r1
 801062a:	12db      	asrs	r3, r3, #11
 801062c:	67d3      	str	r3, [r2, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801062e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010630:	1a59      	subs	r1, r3, r1
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010634:	444b      	add	r3, r9
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010636:	12c9      	asrs	r1, r1, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010638:	12db      	asrs	r3, r3, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801063a:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 801063e:	9905      	ldr	r1, [sp, #20]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010640:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010646:	eba3 0909 	sub.w	r9, r3, r9
 801064a:	ea4f 23e9 	mov.w	r3, r9, asr #11
 801064e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8010652:	9b04      	ldr	r3, [sp, #16]
 8010654:	1b1c      	subs	r4, r3, r4
 8010656:	f642 5341 	movw	r3, #11585	; 0x2d41
 801065a:	fb03 1404 	mla	r4, r3, r4, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801065e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8010660:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010662:	455b      	cmp	r3, fp
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8010664:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010668:	f47f aef0 	bne.w	801044c <jpeg_idct_13x13+0x20>
 801066c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 801066e:	ac10      	add	r4, sp, #64	; 0x40
 8010670:	3b04      	subs	r3, #4
 8010672:	9303      	str	r3, [sp, #12]
 8010674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010676:	3330      	adds	r3, #48	; 0x30
 8010678:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801067a:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801067c:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 8010680:	6920      	ldr	r0, [r4, #16]
    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8010682:	f642 2b50 	movw	fp, #10832	; 0x2a50
    outptr = output_buf[ctr] + output_col;
 8010686:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 801068a:	f641 6802 	movw	r8, #7682	; 0x1e02
    z4 = (INT32) wsptr[6];
 801068e:	69a1      	ldr	r1, [r4, #24]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010690:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8010692:	920b      	str	r2, [sp, #44]	; 0x2c
 8010694:	9303      	str	r3, [sp, #12]
 8010696:	4613      	mov	r3, r2
 8010698:	9a82      	ldr	r2, [sp, #520]	; 0x208
    z2 = (INT32) wsptr[2];
 801069a:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 801069e:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80106a0:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80106a4:	3310      	adds	r3, #16
 80106a6:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 80106a8:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 80106aa:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80106ac:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 80106ae:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 80106b0:	f240 3119 	movw	r1, #793	; 0x319
 80106b4:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80106b6:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 80106b8:	4341      	muls	r1, r0
 80106ba:	9802      	ldr	r0, [sp, #8]
 80106bc:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 80106c0:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 80106c4:	fb00 500e 	mla	r0, r0, lr, r5
 80106c8:	4408      	add	r0, r1
 80106ca:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80106cc:	f241 000c 	movw	r0, #4108	; 0x100c
 80106d0:	fb00 f00e 	mul.w	r0, r0, lr
 80106d4:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80106d6:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80106da:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80106dc:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80106e0:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80106e4:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 80106e6:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80106ea:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 80106ee:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80106f0:	1a2d      	subs	r5, r5, r0
 80106f2:	440d      	add	r5, r1
 80106f4:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80106f6:	4d45      	ldr	r5, [pc, #276]	; (801080c <jpeg_idct_13x13+0x3e0>)
 80106f8:	fb05 000e 	mla	r0, r5, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80106fc:	f242 553e 	movw	r5, #9534	; 0x253e
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8010700:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8010702:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8010704:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8010706:	f640 51f2 	movw	r1, #3570	; 0xdf2
 801070a:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801070c:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8010710:	4371      	muls	r1, r6
 8010712:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8010716:	483e      	ldr	r0, [pc, #248]	; (8010810 <jpeg_idct_13x13+0x3e4>)
 8010718:	fb00 f00e 	mul.w	r0, r0, lr
 801071c:	1ac0      	subs	r0, r0, r3
 801071e:	1a40      	subs	r0, r0, r1
 8010720:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8010722:	483c      	ldr	r0, [pc, #240]	; (8010814 <jpeg_idct_13x13+0x3e8>)
 8010724:	fb00 330e 	mla	r3, r0, lr, r3
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8010728:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 801072c:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 801072e:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8010732:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8010734:	1808      	adds	r0, r1, r0
    z2 = (INT32) wsptr[3];
 8010736:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801073a:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 801073c:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8010740:	18ce      	adds	r6, r1, r3
    tmp15 = z1 + z4;
 8010742:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010746:	4834      	ldr	r0, [pc, #208]	; (8010818 <jpeg_idct_13x13+0x3ec>)
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8010748:	fb0b fb06 	mul.w	fp, fp, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 801074c:	4e33      	ldr	r6, [pc, #204]	; (801081c <jpeg_idct_13x13+0x3f0>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 801074e:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010752:	eb0b 0705 	add.w	r7, fp, r5
 8010756:	4457      	add	r7, sl
 8010758:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 801075c:	f854 7c0c 	ldr.w	r7, [r4, #-12]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010760:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8010762:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8010766:	1818      	adds	r0, r3, r0
 8010768:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 801076a:	f641 26cb 	movw	r6, #6859	; 0x1acb
 801076e:	fb06 0603 	mla	r6, r6, r3, r0
 8010772:	44b3      	add	fp, r6
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8010774:	4e2a      	ldr	r6, [pc, #168]	; (8010820 <jpeg_idct_13x13+0x3f4>)
 8010776:	fb06 0007 	mla	r0, r6, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801077a:	f606 5611 	addw	r6, r6, #3345	; 0xd11
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801077e:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8010782:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8010784:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8010788:	195d      	adds	r5, r3, r5
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 801078a:	900c      	str	r0, [sp, #48]	; 0x30
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801078c:	4375      	muls	r5, r6
    tmp11 += tmp14;
 801078e:	eb0b 0605 	add.w	r6, fp, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8010792:	f244 6b94 	movw	fp, #18068	; 0x4694
 8010796:	fb0b 5507 	mla	r5, fp, r7, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801079a:	f854 7c0c 	ldr.w	r7, [r4, #-12]
 801079e:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80107a2:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80107a4:	eb07 0a00 	add.w	sl, r7, r0
 80107a8:	481f      	ldr	r0, [pc, #124]	; (8010828 <jpeg_idct_13x13+0x3fc>)
 80107aa:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 += tmp14;
 80107ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80107b0:	4450      	add	r0, sl
    tmp13 += tmp14;
 80107b2:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 80107b4:	f640 25d5 	movw	r5, #2773	; 0xad5
 80107b8:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80107bc:	f640 2533 	movw	r5, #2611	; 0xa33
 80107c0:	fb05 9101 	mla	r1, r5, r1, r9
 80107c4:	4d19      	ldr	r5, [pc, #100]	; (801082c <jpeg_idct_13x13+0x400>)
 80107c6:	fb05 1103 	mla	r1, r5, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 80107ca:	1afb      	subs	r3, r7, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80107cc:	f854 5c04 	ldr.w	r5, [r4, #-4]
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 80107d0:	fb08 f803 	mul.w	r8, r8, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80107d4:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 80107d8:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80107da:	fb03 8807 	mla	r8, r3, r7, r8
 80107de:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80107e2:	9f82      	ldr	r7, [sp, #520]	; 0x208
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80107e4:	fb03 8805 	mla	r8, r3, r5, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80107e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80107ea:	9b04      	ldr	r3, [sp, #16]
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80107ec:	44c1      	add	r9, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80107ee:	442b      	add	r3, r5
 80107f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			     & RANGE_MASK];
 80107f2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80107f6:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80107fa:	55eb      	strb	r3, [r5, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80107fc:	9b04      	ldr	r3, [sp, #16]
 80107fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010800:	1b5f      	subs	r7, r3, r5
			     & RANGE_MASK];
 8010802:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010806:	f81c 3007 	ldrb.w	r3, [ip, r7]
 801080a:	e011      	b.n	8010830 <jpeg_idct_13x13+0x404>
 801080c:	ffffd7ee 	.word	0xffffd7ee
 8010810:	fffffa8c 	.word	0xfffffa8c
 8010814:	ffffe64b 	.word	0xffffe64b
 8010818:	ffffbf5b 	.word	0xffffbf5b
 801081c:	fffff52b 	.word	0xfffff52b
 8010820:	ffffcdb1 	.word	0xffffcdb1
 8010824:	ffffdac2 	.word	0xffffdac2
 8010828:	ffffeaf8 	.word	0xffffeaf8
 801082c:	fffff116 	.word	0xfffff116
 8010830:	7313      	strb	r3, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010832:	9b06      	ldr	r3, [sp, #24]
 8010834:	4433      	add	r3, r6
			     & RANGE_MASK];
 8010836:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801083a:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801083e:	7053      	strb	r3, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010840:	9b06      	ldr	r3, [sp, #24]
 8010842:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 8010844:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010848:	f81c 3006 	ldrb.w	r3, [ip, r6]
 801084c:	72d3      	strb	r3, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801084e:	9b05      	ldr	r3, [sp, #20]
 8010850:	4403      	add	r3, r0
			     & RANGE_MASK];
 8010852:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010856:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801085a:	7093      	strb	r3, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801085c:	9b05      	ldr	r3, [sp, #20]
 801085e:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 8010860:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010864:	f81c 3000 	ldrb.w	r3, [ip, r0]
 8010868:	7293      	strb	r3, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801086a:	9b08      	ldr	r3, [sp, #32]
 801086c:	4453      	add	r3, sl
			     & RANGE_MASK];
 801086e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010872:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8010876:	70d3      	strb	r3, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010878:	9b08      	ldr	r3, [sp, #32]
 801087a:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 801087e:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010882:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8010886:	7253      	strb	r3, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801088a:	440b      	add	r3, r1
			     & RANGE_MASK];
 801088c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010890:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8010894:	7113      	strb	r3, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010898:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 801089a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801089e:	f81c 3001 	ldrb.w	r3, [ip, r1]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80108a2:	f642 5141 	movw	r1, #11585	; 0x2d41
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80108a6:	7213      	strb	r3, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80108a8:	9b07      	ldr	r3, [sp, #28]
 80108aa:	444b      	add	r3, r9
			     & RANGE_MASK];
 80108ac:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80108b0:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80108b4:	7153      	strb	r3, [r2, #5]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80108b6:	9b07      	ldr	r3, [sp, #28]
 80108b8:	eba3 0909 	sub.w	r9, r3, r9
			     & RANGE_MASK];
 80108bc:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80108c0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80108c4:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80108c6:	9b01      	ldr	r3, [sp, #4]
 80108c8:	eba3 030e 	sub.w	r3, r3, lr
 80108cc:	434b      	muls	r3, r1
 80108ce:	9902      	ldr	r1, [sp, #8]
 80108d0:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 80108d4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 80108d8:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80108dc:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 80108de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108e0:	9a03      	ldr	r2, [sp, #12]
 80108e2:	4293      	cmp	r3, r2
 80108e4:	f47f aec9 	bne.w	801067a <jpeg_idct_13x13+0x24e>
  }
}
 80108e8:	b079      	add	sp, #484	; 0x1e4
 80108ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ee:	bf00      	nop

080108f0 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80108f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f4:	b0ff      	sub	sp, #508	; 0x1fc
 80108f6:	f1a2 0a02 	sub.w	sl, r2, #2
 80108fa:	930a      	str	r3, [sp, #40]	; 0x28
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80108fc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010900:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8010902:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010906:	1f03      	subs	r3, r0, #4
 8010908:	9301      	str	r3, [sp, #4]
 801090a:	f102 030e 	add.w	r3, r2, #14
 801090e:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8010910:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010912:	9901      	ldr	r1, [sp, #4]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8010914:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010918:	f93a 4f02 	ldrsh.w	r4, [sl, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801091c:	f640 68f2 	movw	r8, #3826	; 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010920:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010924:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010926:	9101      	str	r1, [sp, #4]
 8010928:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801092a:	9a01      	ldr	r2, [sp, #4]
 801092c:	f9ba 1040 	ldrsh.w	r1, [sl, #64]	; 0x40
 8010930:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    z1 <<= CONST_BITS;
 8010934:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010936:	9801      	ldr	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010938:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801093a:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801093e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8010942:	fb01 f602 	mul.w	r6, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8010946:	f640 2112 	movw	r1, #2578	; 0xa12
 801094a:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801094e:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8010952:	19a7      	adds	r7, r4, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8010954:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8010956:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8010958:	eb04 050c 	add.w	r5, r4, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801095c:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8010960:	1ab6      	subs	r6, r6, r2
    tmp12 = z1 - z4;
 8010962:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8010964:	eba4 0246 	sub.w	r2, r4, r6, lsl #1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010968:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801096c:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8010970:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010972:	9a01      	ldr	r2, [sp, #4]
 8010974:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010976:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010978:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801097c:	48d2      	ldr	r0, [pc, #840]	; (8010cc8 <jpeg_idct_14x14+0x3d8>)
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801097e:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8010980:	1916      	adds	r6, r2, r4
 8010982:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8010986:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 801098a:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801098e:	fb00 6604 	mla	r6, r0, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8010992:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8010996:	4344      	muls	r4, r0
    tmp20 = tmp10 + tmp13;
 8010998:	eb07 000c 	add.w	r0, r7, ip
 801099c:	9002      	str	r0, [sp, #8]
    tmp26 = tmp10 - tmp13;
 801099e:	eba7 000c 	sub.w	r0, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80109a2:	fb0e 4202 	mla	r2, lr, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80109a6:	f9ba 4010 	ldrsh.w	r4, [sl, #16]
    tmp26 = tmp10 - tmp13;
 80109aa:	9003      	str	r0, [sp, #12]
    tmp21 = tmp11 + tmp14;
 80109ac:	19a8      	adds	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80109ae:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 80109b2:	9004      	str	r0, [sp, #16]
    tmp25 = tmp11 - tmp14;
 80109b4:	1ba8      	subs	r0, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80109b6:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 80109ba:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 80109bc:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 80109be:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80109c0:	f9ba 1070 	ldrsh.w	r1, [sl, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 80109c4:	9006      	str	r0, [sp, #24]
    tmp24 = tmp12 - tmp15;
 80109c6:	9207      	str	r2, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80109c8:	9a01      	ldr	r2, [sp, #4]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80109ca:	48c0      	ldr	r0, [pc, #768]	; (8010ccc <jpeg_idct_14x14+0x3dc>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80109cc:	6a12      	ldr	r2, [r2, #32]
 80109ce:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80109d0:	9a01      	ldr	r2, [sp, #4]
 80109d2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80109d4:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80109d6:	9a01      	ldr	r2, [sp, #4]
 80109d8:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80109dc:	eb04 0907 	add.w	r9, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80109e0:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80109e2:	9a01      	ldr	r2, [sp, #4]
 80109e4:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp14 = z1 + z3;
 80109e8:	eb04 0c06 	add.w	ip, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80109ec:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80109ee:	f642 21b7 	movw	r1, #10935	; 0x2ab7
 80109f2:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80109f6:	f242 6152 	movw	r1, #9810	; 0x2652
 80109fa:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80109fe:	49b4      	ldr	r1, [pc, #720]	; (8010cd0 <jpeg_idct_14x14+0x3e0>)
 8010a00:	eb09 0e05 	add.w	lr, r9, r5
 8010a04:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 8010a08:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8010a0c:	f641 0114 	movw	r1, #6164	; 0x1814
 8010a10:	fb01 f10c 	mul.w	r1, r1, ip
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8010a14:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8010a18:	9108      	str	r1, [sp, #32]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8010a1a:	fb00 1104 	mla	r1, r0, r4, r1
    z1    -= z2;
 8010a1e:	1be4      	subs	r4, r4, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8010a20:	48ac      	ldr	r0, [pc, #688]	; (8010cd4 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8010a22:	fb08 f804 	mul.w	r8, r8, r4
 8010a26:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 8010a2a:	4441      	add	r1, r8
 8010a2c:	9109      	str	r1, [sp, #36]	; 0x24
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8010a2e:	19b9      	adds	r1, r7, r6
 8010a30:	fb0c f101 	mul.w	r1, ip, r1
 8010a34:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8010a38:	fb00 1c07 	mla	ip, r0, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8010a3c:	48a6      	ldr	r0, [pc, #664]	; (8010cd8 <jpeg_idct_14x14+0x3e8>)
 8010a3e:	fb00 1106 	mla	r1, r0, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8010a42:	44e1      	add	r9, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8010a44:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010a48:	48a4      	ldr	r0, [pc, #656]	; (8010cdc <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8010a4a:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8010a4c:	1bf5      	subs	r5, r6, r7
 8010a4e:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010a52:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 8010a56:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010a58:	fb00 cc06 	mla	ip, r0, r6, ip
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 8010a5c:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010a5e:	9a02      	ldr	r2, [sp, #8]
    tmp13 = (z1 - z3) << PASS1_BITS;
 8010a60:	00b6      	lsls	r6, r6, #2
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010a62:	9808      	ldr	r0, [sp, #32]
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010a64:	4472      	add	r2, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010a66:	4484      	add	ip, r0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8010a68:	f241 5099 	movw	r0, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010a6c:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8010a6e:	fb00 5507 	mla	r5, r0, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010a72:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010a76:	9a02      	ldr	r2, [sp, #8]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8010a78:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010a7a:	eba2 0e0e 	sub.w	lr, r2, lr
 8010a7e:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8010a82:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010a86:	9a04      	ldr	r2, [sp, #16]
 8010a88:	444a      	add	r2, r9
 8010a8a:	12d2      	asrs	r2, r2, #11
 8010a8c:	61da      	str	r2, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010a8e:	9a04      	ldr	r2, [sp, #16]
 8010a90:	eba2 0909 	sub.w	r9, r2, r9
 8010a94:	ea4f 22e9 	mov.w	r2, r9, asr #11
 8010a98:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010a9c:	9a06      	ldr	r2, [sp, #24]
 8010a9e:	440a      	add	r2, r1
 8010aa0:	12d2      	asrs	r2, r2, #11
 8010aa2:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010aa4:	9a06      	ldr	r2, [sp, #24]
 8010aa6:	1a51      	subs	r1, r2, r1
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8010aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010aaa:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010aae:	12c9      	asrs	r1, r1, #11
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8010ab0:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8010ab2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010ab4:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8010ab8:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010abc:	9a07      	ldr	r2, [sp, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8010abe:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010ac0:	4462      	add	r2, ip
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8010ac2:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010ac6:	12d2      	asrs	r2, r2, #11
 8010ac8:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010aca:	9a07      	ldr	r2, [sp, #28]
 8010acc:	eba2 0c0c 	sub.w	ip, r2, ip
 8010ad0:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8010ad4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010ad8:	9a05      	ldr	r2, [sp, #20]
 8010ada:	442a      	add	r2, r5
 8010adc:	12d2      	asrs	r2, r2, #11
 8010ade:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010ae2:	9a05      	ldr	r2, [sp, #20]
 8010ae4:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8010ae6:	9a03      	ldr	r2, [sp, #12]
 8010ae8:	440a      	add	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010aea:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8010aec:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010aee:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8010af2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8010af6:	9a03      	ldr	r2, [sp, #12]
 8010af8:	1a52      	subs	r2, r2, r1
 8010afa:	12d2      	asrs	r2, r2, #11
 8010afc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010b00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b02:	4552      	cmp	r2, sl
 8010b04:	f47f af05 	bne.w	8010912 <jpeg_idct_14x14+0x22>
 8010b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b0a:	3b04      	subs	r3, #4
 8010b0c:	9302      	str	r3, [sp, #8]
 8010b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b10:	3334      	adds	r3, #52	; 0x34
 8010b12:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 8010b14:	ab0e      	add	r3, sp, #56	; 0x38
 8010b16:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010b18:	9b02      	ldr	r3, [sp, #8]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8010b1a:	f640 2012 	movw	r0, #2578	; 0xa12
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8010b1e:	f641 4437 	movw	r4, #7223	; 0x1c37

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8010b22:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8010b26:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8010b2a:	920c      	str	r2, [sp, #48]	; 0x30
 8010b2c:	9302      	str	r3, [sp, #8]
 8010b2e:	4613      	mov	r3, r2
 8010b30:	9a88      	ldr	r2, [sp, #544]	; 0x220
 8010b32:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010b34:	9b01      	ldr	r3, [sp, #4]
    z4 = (INT32) wsptr[4];
 8010b36:	691e      	ldr	r6, [r3, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010b38:	6819      	ldr	r1, [r3, #0]
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8010b3a:	f642 03c6 	movw	r3, #10438	; 0x28c6
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8010b3e:	fb00 f706 	mul.w	r7, r0, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8010b42:	4861      	ldr	r0, [pc, #388]	; (8010cc8 <jpeg_idct_14x14+0x3d8>)
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010b44:	3110      	adds	r1, #16
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8010b46:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8010b48:	4366      	muls	r6, r4
    tmp10 = z1 + z2;
 8010b4a:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8010b4e:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 8010b50:	ebc6 3441 	rsb	r4, r6, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8010b54:	1b9b      	subs	r3, r3, r6
    tmp11 = z1 + z3;
 8010b56:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8010b5a:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8010b5e:	005b      	lsls	r3, r3, #1
 8010b60:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 8010b64:	9303      	str	r3, [sp, #12]
    z1 = (INT32) wsptr[2];
 8010b66:	9b01      	ldr	r3, [sp, #4]
 8010b68:	689e      	ldr	r6, [r3, #8]
    z2 = (INT32) wsptr[6];
 8010b6a:	699b      	ldr	r3, [r3, #24]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8010b6c:	18f1      	adds	r1, r6, r3
 8010b6e:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8010b70:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8010b74:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8010b78:	fb00 1103 	mla	r1, r0, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8010b7c:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8010b80:	4343      	muls	r3, r0

    tmp20 = tmp10 + tmp13;
    tmp26 = tmp10 - tmp13;
 8010b82:	ebac 0007 	sub.w	r0, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8010b86:	fb0e 3306 	mla	r3, lr, r6, r3
    tmp20 = tmp10 + tmp13;
 8010b8a:	eb0c 0607 	add.w	r6, ip, r7
    tmp26 = tmp10 - tmp13;
 8010b8e:	9004      	str	r0, [sp, #16]
    tmp21 = tmp11 + tmp14;
 8010b90:	1868      	adds	r0, r5, r1
    tmp25 = tmp11 - tmp14;
 8010b92:	1a69      	subs	r1, r5, r1
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8010b94:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8010b98:	9005      	str	r0, [sp, #20]
    tmp25 = tmp11 - tmp14;
 8010b9a:	9106      	str	r1, [sp, #24]
    tmp22 = tmp12 + tmp15;
 8010b9c:	18e1      	adds	r1, r4, r3
    tmp24 = tmp12 - tmp15;
 8010b9e:	1ae3      	subs	r3, r4, r3
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8010ba0:	484a      	ldr	r0, [pc, #296]	; (8010ccc <jpeg_idct_14x14+0x3dc>)
    tmp22 = tmp12 + tmp15;
 8010ba2:	9107      	str	r1, [sp, #28]
    tmp24 = tmp12 - tmp15;
 8010ba4:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[3];
 8010ba6:	9901      	ldr	r1, [sp, #4]
    z1 = (INT32) wsptr[1];
 8010ba8:	9b01      	ldr	r3, [sp, #4]
    z2 = (INT32) wsptr[3];
 8010baa:	f8d1 800c 	ldr.w	r8, [r1, #12]
    z1 = (INT32) wsptr[1];
 8010bae:	685b      	ldr	r3, [r3, #4]
    z3 = (INT32) wsptr[5];
 8010bb0:	f8d1 c014 	ldr.w	ip, [r1, #20]
    z4 = (INT32) wsptr[7];
 8010bb4:	f8d1 901c 	ldr.w	r9, [r1, #28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8010bb8:	eb03 0a08 	add.w	sl, r3, r8
 8010bbc:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 8010bc0:	eb03 050c 	add.w	r5, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8010bc4:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8010bc8:	f242 6152 	movw	r1, #9810	; 0x2652
 8010bcc:	fb01 f405 	mul.w	r4, r1, r5
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8010bd0:	493f      	ldr	r1, [pc, #252]	; (8010cd0 <jpeg_idct_14x14+0x3e0>)
 8010bd2:	eb0a 0704 	add.w	r7, sl, r4
 8010bd6:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 8010bda:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8010bde:	f641 0114 	movw	r1, #6164	; 0x1814
 8010be2:	4369      	muls	r1, r5
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8010be4:	f46f 65a2 	mvn.w	r5, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8010be8:	9109      	str	r1, [sp, #36]	; 0x24
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8010bea:	fb00 1103 	mla	r1, r0, r3, r1
    z1    -= z2;
 8010bee:	eba3 0308 	sub.w	r3, r3, r8
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8010bf2:	4838      	ldr	r0, [pc, #224]	; (8010cd4 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8010bf4:	fb0e fe03 	mul.w	lr, lr, r3
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8010bf8:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8010bfc:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8010c00:	035b      	lsls	r3, r3, #13
    tmp16 += tmp15;
 8010c02:	4471      	add	r1, lr
 8010c04:	910a      	str	r1, [sp, #40]	; 0x28
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8010c06:	eb08 010c 	add.w	r1, r8, ip
 8010c0a:	4369      	muls	r1, r5
 8010c0c:	eba1 3149 	sub.w	r1, r1, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8010c10:	fb00 1508 	mla	r5, r0, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8010c14:	4830      	ldr	r0, [pc, #192]	; (8010cd8 <jpeg_idct_14x14+0x3e8>)
 8010c16:	fb00 110c 	mla	r1, r0, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8010c1a:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8010c1c:	f642 45f8 	movw	r5, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010c20:	482e      	ldr	r0, [pc, #184]	; (8010cdc <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8010c22:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8010c24:	ebac 0408 	sub.w	r4, ip, r8
 8010c28:	436c      	muls	r4, r5
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8010c2a:	910b      	str	r1, [sp, #44]	; 0x2c
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8010c2c:	f241 5199 	movw	r1, #5529	; 0x1599
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010c30:	eb04 3549 	add.w	r5, r4, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8010c34:	eb03 3949 	add.w	r9, r3, r9, lsl #13

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010c38:	19f3      	adds	r3, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010c3a:	fb00 550c 	mla	r5, r0, ip, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010c3e:	1bf6      	subs	r6, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010c40:	9809      	ldr	r0, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8010c42:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8010c46:	fb01 4408 	mla	r4, r1, r8, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010c4a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8010c4e:	4405      	add	r5, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010c50:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8010c54:	9988      	ldr	r1, [sp, #544]	; 0x220
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8010c56:	4474      	add	r4, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010c58:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010c5a:	5443      	strb	r3, [r0, r1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010c5c:	f81b 3006 	ldrb.w	r3, [fp, r6]
 8010c60:	7353      	strb	r3, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010c62:	9b05      	ldr	r3, [sp, #20]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010c66:	4453      	add	r3, sl
			     & RANGE_MASK];
 8010c68:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010c6c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8010c70:	7053      	strb	r3, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010c72:	9b05      	ldr	r3, [sp, #20]
 8010c74:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8010c78:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010c7c:	f81b 300a 	ldrb.w	r3, [fp, sl]
 8010c80:	7313      	strb	r3, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010c82:	9b07      	ldr	r3, [sp, #28]
 8010c84:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010c86:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010c8a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8010c8e:	7093      	strb	r3, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010c90:	9b07      	ldr	r3, [sp, #28]
 8010c92:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010c94:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010c98:	f81b 3001 	ldrb.w	r3, [fp, r1]
 8010c9c:	72d3      	strb	r3, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010c9e:	9b03      	ldr	r3, [sp, #12]
 8010ca0:	444b      	add	r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010ca2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010ca6:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8010caa:	70d3      	strb	r3, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010cac:	9b03      	ldr	r3, [sp, #12]
 8010cae:	eba3 0909 	sub.w	r9, r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010cb2:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010cb6:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8010cba:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010cbc:	9b08      	ldr	r3, [sp, #32]
 8010cbe:	442b      	add	r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010cc0:	f3c3 4389 	ubfx	r3, r3, #18, #10
 8010cc4:	e00c      	b.n	8010ce0 <jpeg_idct_14x14+0x3f0>
 8010cc6:	bf00      	nop
 8010cc8:	ffffc8fc 	.word	0xffffc8fc
 8010ccc:	ffffde0b 	.word	0xffffde0b
 8010cd0:	ffffdbf0 	.word	0xffffdbf0
 8010cd4:	fffff26e 	.word	0xfffff26e
 8010cd8:	ffffb409 	.word	0xffffb409
 8010cdc:	ffffc9e6 	.word	0xffffc9e6
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010ce0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8010ce4:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010ce6:	9b08      	ldr	r3, [sp, #32]
 8010ce8:	1b5d      	subs	r5, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010cea:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010cee:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8010cf2:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8010cf4:	9b06      	ldr	r3, [sp, #24]
 8010cf6:	4423      	add	r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010cf8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8010cfc:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8010d00:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8010d02:	9b06      	ldr	r3, [sp, #24]
 8010d04:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010d06:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8010d0a:	f81b 3004 	ldrb.w	r3, [fp, r4]
 8010d0e:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8010d10:	9b04      	ldr	r3, [sp, #16]
 8010d12:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010d14:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010d16:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8010d1a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8010d1e:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8010d20:	9b04      	ldr	r3, [sp, #16]
 8010d22:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8010d24:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8010d28:	f81b 3001 	ldrb.w	r3, [fp, r1]
 8010d2c:	71d3      	strb	r3, [r2, #7]

    wsptr += 8;		/* advance pointer to next row */
 8010d2e:	9b01      	ldr	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 8010d30:	9a02      	ldr	r2, [sp, #8]
    wsptr += 8;		/* advance pointer to next row */
 8010d32:	3320      	adds	r3, #32
 8010d34:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 8010d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d38:	4293      	cmp	r3, r2
 8010d3a:	f47f aeed 	bne.w	8010b18 <jpeg_idct_14x14+0x228>
  }
}
 8010d3e:	b07f      	add	sp, #508	; 0x1fc
 8010d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d44 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d48:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8010d4c:	f1a2 0b02 	sub.w	fp, r2, #2
 8010d50:	930b      	str	r3, [sp, #44]	; 0x2c
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d52:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010d56:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8010d58:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010d5c:	1f03      	subs	r3, r0, #4
 8010d5e:	9300      	str	r3, [sp, #0]
 8010d60:	f102 030e 	add.w	r3, r2, #14
 8010d64:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8010d66:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d68:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8010d6a:	f642 6e13 	movw	lr, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d6e:	f93b 5f02 	ldrsh.w	r5, [fp, #2]!
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8010d72:	f241 0971 	movw	r9, #4209	; 0x1071
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d76:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8010d7a:	f644 68a3 	movw	r8, #20131	; 0x4ea3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d7e:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	; 0x40
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010d82:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d84:	9100      	str	r1, [sp, #0]
 8010d86:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010d88:	9a00      	ldr	r2, [sp, #0]
 8010d8a:	f9bb 1020 	ldrsh.w	r1, [fp, #32]
 8010d8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    z1 <<= CONST_BITS;
 8010d90:	036d      	lsls	r5, r5, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010d92:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010d94:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d96:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010d98:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	; 0x60
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010d9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010da0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010da4:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010da6:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8010daa:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010dae:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8010db0:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8010db4:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8010db8:	f642 20ce 	movw	r0, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8010dbc:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 8010dbe:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 8010dc2:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8010dc4:	eba4 040c 	sub.w	r4, r4, ip
 8010dc8:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 8010dcc:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 8010dce:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8010dd0:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8010dd4:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8010dd6:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8010dda:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 8010dde:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8010de2:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8010de6:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 8010de8:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8010dec:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8010dee:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 8010df2:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8010df4:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8010df6:	f241 1482 	movw	r4, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8010dfa:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8010dfe:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8010e00:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 8010e02:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8010e06:	443c      	add	r4, r7
 8010e08:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8010e0c:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8010e10:	f641 2c9a 	movw	ip, #6810	; 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8010e14:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 8010e16:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8010e18:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8010e1a:	f641 114c 	movw	r1, #6476	; 0x194c
 8010e1e:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8010e20:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8010e24:	4417      	add	r7, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8010e26:	4369      	muls	r1, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 8010e28:	1ab2      	subs	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010e2a:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	; 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 8010e2e:	1878      	adds	r0, r7, r1
    tmp24 = tmp13 - tmp10 + tmp11;
 8010e30:	440a      	add	r2, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 8010e32:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8010e34:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8010e36:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 8010e3a:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010e3c:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp11 += tmp11;
 8010e40:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8010e42:	9908      	ldr	r1, [sp, #32]
 8010e44:	9a01      	ldr	r2, [sp, #4]
 8010e46:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010e48:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8010e4c:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010e4e:	9a00      	ldr	r2, [sp, #0]
 8010e50:	6a12      	ldr	r2, [r2, #32]
 8010e52:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010e54:	9900      	ldr	r1, [sp, #0]
 8010e56:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8010e58:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010e5a:	9900      	ldr	r1, [sp, #0]
 8010e5c:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010e60:	9800      	ldr	r0, [sp, #0]
 8010e62:	f9bb e070 	ldrsh.w	lr, [fp, #112]	; 0x70
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010e66:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010e68:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8010e6c:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8010e70:	48d2      	ldr	r0, [pc, #840]	; (80111bc <jpeg_idct_15x15+0x478>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010e72:	fb04 fe0e 	mul.w	lr, r4, lr
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8010e76:	434e      	muls	r6, r1
    tmp13 = z2 - z4;
 8010e78:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8010e7c:	1917      	adds	r7, r2, r4
 8010e7e:	fb0c f707 	mul.w	r7, ip, r7
    z2 = z1 - z4;
 8010e82:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8010e86:	fb09 7902 	mla	r9, r9, r2, r7
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8010e8a:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8010e8e:	48cc      	ldr	r0, [pc, #816]	; (80111c0 <jpeg_idct_15x15+0x47c>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8010e90:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8010e94:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8010e96:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8010e9a:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8010e9c:	48c9      	ldr	r0, [pc, #804]	; (80111c4 <jpeg_idct_15x15+0x480>)
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8010e9e:	fb08 480e 	mla	r8, r8, lr, r4
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8010ea2:	fb01 fc0c 	mul.w	ip, r1, ip
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8010ea6:	eb02 010e 	add.w	r1, r2, lr
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8010eaa:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8010eac:	f200 7071 	addw	r0, r0, #1905	; 0x771
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8010eb0:	ebac 0c06 	sub.w	ip, ip, r6
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8010eb4:	fb00 4402 	mla	r4, r0, r2, r4
 8010eb8:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8010eba:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8010ebe:	4404      	add	r4, r0
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8010ec0:	f241 2068 	movw	r0, #4712	; 0x1268
 8010ec4:	4341      	muls	r1, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8010ec6:	f640 7039 	movw	r0, #3897	; 0xf39
 8010eca:	fb00 1202 	mla	r2, r0, r2, r1
 8010ece:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010ed0:	1b92      	subs	r2, r2, r6
 8010ed2:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8010ed4:	48bc      	ldr	r0, [pc, #752]	; (80111c8 <jpeg_idct_15x15+0x484>)
 8010ed6:	fb00 110e 	mla	r1, r0, lr, r1
 8010eda:	4431      	add	r1, r6
 8010edc:	440d      	add	r5, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010ede:	9902      	ldr	r1, [sp, #8]
 8010ee0:	4441      	add	r1, r8
 8010ee2:	12c9      	asrs	r1, r1, #11
 8010ee4:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010ee8:	9902      	ldr	r1, [sp, #8]
 8010eea:	eba1 0808 	sub.w	r8, r1, r8
 8010eee:	ea4f 21e8 	mov.w	r1, r8, asr #11
 8010ef2:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010ef6:	9906      	ldr	r1, [sp, #24]
 8010ef8:	4449      	add	r1, r9
 8010efa:	12c9      	asrs	r1, r1, #11
 8010efc:	61d9      	str	r1, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010efe:	9906      	ldr	r1, [sp, #24]
 8010f00:	eba1 0909 	sub.w	r9, r1, r9
 8010f04:	ea4f 21e9 	mov.w	r1, r9, asr #11
 8010f08:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8010f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f0e:	4461      	add	r1, ip
 8010f10:	12c9      	asrs	r1, r1, #11
 8010f12:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8010f14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f16:	eba1 0c0c 	sub.w	ip, r1, ip
 8010f1a:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8010f1e:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010f22:	9903      	ldr	r1, [sp, #12]
 8010f24:	4411      	add	r1, r2
 8010f26:	12c9      	asrs	r1, r1, #11
 8010f28:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010f2a:	9903      	ldr	r1, [sp, #12]
 8010f2c:	1a8a      	subs	r2, r1, r2
 8010f2e:	12d2      	asrs	r2, r2, #11
 8010f30:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010f34:	9a07      	ldr	r2, [sp, #28]
 8010f36:	443a      	add	r2, r7
 8010f38:	12d2      	asrs	r2, r2, #11
 8010f3a:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010f3c:	9a07      	ldr	r2, [sp, #28]
 8010f3e:	1bd7      	subs	r7, r2, r7
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010f40:	9a04      	ldr	r2, [sp, #16]
 8010f42:	442a      	add	r2, r5
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010f44:	12ff      	asrs	r7, r7, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010f46:	12d2      	asrs	r2, r2, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010f48:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8010f4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010f50:	9a04      	ldr	r2, [sp, #16]
 8010f52:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8010f54:	9a05      	ldr	r2, [sp, #20]
 8010f56:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010f58:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8010f5a:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8010f5c:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8010f60:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8010f64:	9a05      	ldr	r2, [sp, #20]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8010f66:	9908      	ldr	r1, [sp, #32]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8010f68:	1b14      	subs	r4, r2, r4
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8010f6a:	9a01      	ldr	r2, [sp, #4]
 8010f6c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8010f70:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8010f72:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8010f74:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8010f78:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f7e:	455a      	cmp	r2, fp
 8010f80:	f47f aef2 	bne.w	8010d68 <jpeg_idct_15x15+0x24>
 8010f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f86:	f1a3 0904 	sub.w	r9, r3, #4
 8010f8a:	3338      	adds	r3, #56	; 0x38
 8010f8c:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 8010f8e:	ab0e      	add	r3, sp, #56	; 0x38
 8010f90:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010f92:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8010f96:	f640 51fc 	movw	r1, #3580	; 0xdfc
    outptr = output_buf[ctr] + output_col;
 8010f9a:	9a90      	ldr	r2, [sp, #576]	; 0x240
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8010f9c:	f44f 74bb 	mov.w	r4, #374	; 0x176
    outptr = output_buf[ctr] + output_col;
 8010fa0:	930c      	str	r3, [sp, #48]	; 0x30
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8010fa2:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 8010fa6:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010fa8:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8010faa:	f241 0871 	movw	r8, #4209	; 0x1071
    z2 = (INT32) wsptr[2];
 8010fae:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 8010fb0:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010fb2:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 8010fb4:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010fb6:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8010fb8:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8010fbc:	f242 419d 	movw	r1, #9373	; 0x249d
 8010fc0:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 8010fc2:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 8010fc6:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8010fca:	eba2 020c 	sub.w	r2, r2, ip
 8010fce:	0052      	lsls	r2, r2, #1
 8010fd0:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 8010fd4:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 8010fd6:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8010fd8:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8010fdc:	9201      	str	r2, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8010fde:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8010fe2:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8010fe6:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 8010fe8:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8010fec:	1a8a      	subs	r2, r1, r2
 8010fee:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 8010ff0:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8010ff4:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8010ff8:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 8010ffa:	9402      	str	r4, [sp, #8]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8010ffc:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011000:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8011002:	f241 1282 	movw	r2, #4482	; 0x1182
 8011006:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 8011008:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801100c:	440a      	add	r2, r1
 801100e:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8011012:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8011016:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 8011018:	9404      	str	r4, [sp, #16]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801101a:	4c68      	ldr	r4, [pc, #416]	; (80111bc <jpeg_idct_15x15+0x478>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801101c:	9205      	str	r2, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801101e:	f641 124c 	movw	r2, #6476	; 0x194c
 8011022:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8011024:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8011028:	4401      	add	r1, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801102a:	4372      	muls	r2, r6
    tmp24 = tmp13 - tmp10 + tmp11;
 801102c:	1a38      	subs	r0, r7, r0
    tmp21 = tmp12 + tmp10 + tmp11;
 801102e:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 8011030:	1882      	adds	r2, r0, r2
    tmp21 = tmp12 + tmp10 + tmp11;
 8011032:	9106      	str	r1, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8011034:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8011036:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
    z2 = (INT32) wsptr[3];
 801103a:	9900      	ldr	r1, [sp, #0]
    tmp11 += tmp11;
 801103c:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801103e:	f641 269a 	movw	r6, #6810	; 0x1a9a
    z2 = (INT32) wsptr[3];
 8011042:	68cf      	ldr	r7, [r1, #12]
    tmp11 += tmp11;
 8011044:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8011046:	9808      	ldr	r0, [sp, #32]
 8011048:	9a01      	ldr	r2, [sp, #4]
 801104a:	eb02 0b00 	add.w	fp, r2, r0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801104e:	6948      	ldr	r0, [r1, #20]
 8011050:	f242 7131 	movw	r1, #10033	; 0x2731
    z1 = (INT32) wsptr[1];
 8011054:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8011056:	fb01 fc00 	mul.w	ip, r1, r0
    z4 = (INT32) wsptr[7];
 801105a:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 801105c:	6852      	ldr	r2, [r2, #4]
    z4 = (INT32) wsptr[7];
 801105e:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 8011062:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8011066:	1950      	adds	r0, r2, r5
 8011068:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801106a:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801106e:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8011072:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 8011076:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801107a:	4c54      	ldr	r4, [pc, #336]	; (80111cc <jpeg_idct_15x15+0x488>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801107c:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801107e:	4850      	ldr	r0, [pc, #320]	; (80111c0 <jpeg_idct_15x15+0x47c>)
 8011080:	4378      	muls	r0, r7
 8011082:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8011084:	484f      	ldr	r0, [pc, #316]	; (80111c4 <jpeg_idct_15x15+0x480>)
 8011086:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8011088:	f642 5002 	movw	r0, #11522	; 0x2d02
 801108c:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8011090:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8011092:	f640 7139 	movw	r1, #3897	; 0xf39
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011096:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801109a:	fb04 0002 	mla	r0, r4, r2, r0
 801109e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80110a0:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80110a2:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80110a6:	4420      	add	r0, r4
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80110a8:	f241 2468 	movw	r4, #4712	; 0x1268
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80110ac:	900b      	str	r0, [sp, #44]	; 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80110ae:	eb02 000e 	add.w	r0, r2, lr
 80110b2:	4360      	muls	r0, r4
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 80110b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80110b6:	fb01 0202 	mla	r2, r1, r2, r0
 80110ba:	eba2 020c 	sub.w	r2, r2, ip
 80110be:	4422      	add	r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 80110c0:	4c41      	ldr	r4, [pc, #260]	; (80111c8 <jpeg_idct_15x15+0x484>)
 80110c2:	fb04 000e 	mla	r0, r4, lr, r0
 80110c6:	4460      	add	r0, ip
 80110c8:	4407      	add	r7, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80110ca:	9802      	ldr	r0, [sp, #8]
 80110cc:	4430      	add	r0, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80110ce:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80110d2:	f81a 0000 	ldrb.w	r0, [sl, r0]
 80110d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80110d8:	9990      	ldr	r1, [sp, #576]	; 0x240
 80110da:	5460      	strb	r0, [r4, r1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80110dc:	9902      	ldr	r1, [sp, #8]
 80110de:	1b8e      	subs	r6, r1, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80110e0:	9906      	ldr	r1, [sp, #24]
			     & RANGE_MASK];
 80110e2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80110e6:	f81a 0006 	ldrb.w	r0, [sl, r6]
 80110ea:	7398      	strb	r0, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80110ec:	eb01 0008 	add.w	r0, r1, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80110f0:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 80110f4:	f3c0 4089 	ubfx	r0, r0, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80110f8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80110fc:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8011100:	7058      	strb	r0, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011102:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8011106:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011108:	eb0b 0105 	add.w	r1, fp, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801110c:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 8011110:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011114:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011118:	f81a 1001 	ldrb.w	r1, [sl, r1]
 801111c:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801111e:	f81a 100b 	ldrb.w	r1, [sl, fp]
 8011122:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011124:	9903      	ldr	r1, [sp, #12]
 8011126:	4411      	add	r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011128:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801112c:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8011130:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011132:	9903      	ldr	r1, [sp, #12]
 8011134:	1a8a      	subs	r2, r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011136:	9909      	ldr	r1, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8011138:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801113c:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8011140:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011142:	9a07      	ldr	r2, [sp, #28]
 8011144:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011146:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801114a:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801114e:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011150:	9a07      	ldr	r2, [sp, #28]
 8011152:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011154:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011158:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801115c:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801115e:	9a04      	ldr	r2, [sp, #16]
 8011160:	443a      	add	r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011162:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011166:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801116a:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801116c:	9a04      	ldr	r2, [sp, #16]
 801116e:	1bd7      	subs	r7, r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011170:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011174:	f81a 2007 	ldrb.w	r2, [sl, r7]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011178:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801117a:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801117c:	9a05      	ldr	r2, [sp, #20]
 801117e:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011180:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011184:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8011188:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801118a:	9a05      	ldr	r2, [sp, #20]
 801118c:	1a50      	subs	r0, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801118e:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011190:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011194:	f81a 2000 	ldrb.w	r2, [sl, r0]
 8011198:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801119a:	9a01      	ldr	r2, [sp, #4]
 801119c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80111a0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 80111a4:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80111a8:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 80111aa:	9b00      	ldr	r3, [sp, #0]
 80111ac:	3320      	adds	r3, #32
 80111ae:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 80111b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111b2:	454b      	cmp	r3, r9
 80111b4:	f47f aeed 	bne.w	8010f92 <jpeg_idct_15x15+0x24e>
 80111b8:	e00a      	b.n	80111d0 <jpeg_idct_15x15+0x48c>
 80111ba:	bf00      	nop
 80111bc:	ffffba5c 	.word	0xffffba5c
 80111c0:	ffffe566 	.word	0xffffe566
 80111c4:	ffffd4f6 	.word	0xffffd4f6
 80111c8:	ffffe42f 	.word	0xffffe42f
 80111cc:	ffffdc67 	.word	0xffffdc67
  }
}
 80111d0:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 80111d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080111d8 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80111d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111dc:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80111e0:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80111e2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80111e6:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80111ea:	1e93      	subs	r3, r2, #2
 80111ec:	9300      	str	r3, [sp, #0]
 80111ee:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80111f0:	f1a3 0904 	sub.w	r9, r3, #4
 80111f4:	f102 030e 	add.w	r3, r2, #14
 80111f8:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 80111fa:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80111fc:	9900      	ldr	r1, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80111fe:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8011202:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8011206:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801120a:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801120e:	3304      	adds	r3, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011210:	9100      	str	r1, [sp, #0]
 8011212:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8011216:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011218:	9900      	ldr	r1, [sp, #0]
 801121a:	f9b1 0040 	ldrsh.w	r0, [r1, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 801121e:	0352      	lsls	r2, r2, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011220:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 8011224:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011228:	4341      	muls	r1, r0
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801122a:	f642 10cf 	movw	r0, #10703	; 0x29cf
 801122e:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8011230:	4361      	muls	r1, r4
    tmp10 = tmp0 + tmp1;
 8011232:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8011234:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8011236:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8011238:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801123c:	9900      	ldr	r1, [sp, #0]
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801123e:	4ad6      	ldr	r2, [pc, #856]	; (8011598 <jpeg_idct_16x16+0x3c0>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011240:	f9b1 4020 	ldrsh.w	r4, [r1, #32]
 8011244:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8011248:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801124c:	9900      	ldr	r1, [sp, #0]
 801124e:	f9b1 4060 	ldrsh.w	r4, [r1, #96]	; 0x60
 8011252:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8011256:	4361      	muls	r1, r4
    z3 = z1 - z2;
 8011258:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801125c:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8011260:	f642 4563 	movw	r5, #11363	; 0x2c63
 8011264:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8011266:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801126a:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801126e:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8011272:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8011276:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801127a:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 801127e:	eb07 020c 	add.w	r2, r7, ip
 8011282:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8011284:	eba7 020c 	sub.w	r2, r7, ip
 8011288:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 801128a:	1972      	adds	r2, r6, r5
 801128c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 801128e:	1b72      	subs	r2, r6, r5
 8011290:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8011292:	eb0b 0204 	add.w	r2, fp, r4
 8011296:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8011298:	ebab 0204 	sub.w	r2, fp, r4
 801129c:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 801129e:	1842      	adds	r2, r0, r1
 80112a0:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 80112a2:	1a42      	subs	r2, r0, r1
 80112a4:	9208      	str	r2, [sp, #32]

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80112a6:	9a00      	ldr	r2, [sp, #0]
 80112a8:	f9b2 1010 	ldrsh.w	r1, [r2, #16]
 80112ac:	f8d9 2020 	ldr.w	r2, [r9, #32]
 80112b0:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80112b2:	9a00      	ldr	r2, [sp, #0]
 80112b4:	f9b2 0030 	ldrsh.w	r0, [r2, #48]	; 0x30
 80112b8:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 80112bc:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80112be:	9800      	ldr	r0, [sp, #0]
 80112c0:	f9b0 5050 	ldrsh.w	r5, [r0, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80112c4:	188e      	adds	r6, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80112c6:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80112ca:	eba1 0b02 	sub.w	fp, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80112ce:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80112d0:	9800      	ldr	r0, [sp, #0]
 80112d2:	f9b0 4070 	ldrsh.w	r4, [r0, #112]	; 0x70
    tmp11 = z1 + z3;
 80112d6:	194f      	adds	r7, r1, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80112d8:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0
 80112dc:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80112de:	f642 344e 	movw	r4, #11086	; 0x2b4e
 80112e2:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80112e4:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80112e8:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80112ec:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80112f0:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80112f4:	f242 24fc 	movw	r4, #8956	; 0x22fc
 80112f8:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80112fc:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8011300:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8011304:	f241 5455 	movw	r4, #5461	; 0x1555
 8011308:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 801130a:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801130e:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8011310:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011314:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8011316:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 801131a:	4ca0      	ldr	r4, [pc, #640]	; (801159c <jpeg_idct_16x16+0x3c4>)
 801131c:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011320:	4f9f      	ldr	r7, [pc, #636]	; (80115a0 <jpeg_idct_16x16+0x3c8>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011322:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011324:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011326:	4464      	add	r4, ip
 8011328:	445c      	add	r4, fp
 801132a:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801132e:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8011330:	4f9c      	ldr	r7, [pc, #624]	; (80115a4 <jpeg_idct_16x16+0x3cc>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011332:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8011334:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8011338:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801133a:	f240 214d 	movw	r1, #589	; 0x24d
 801133e:	fb01 4102 	mla	r1, r1, r2, r4
 8011342:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8011344:	4998      	ldr	r1, [pc, #608]	; (80115a8 <jpeg_idct_16x16+0x3d0>)
 8011346:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801134a:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801134c:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801134e:	f642 5a09 	movw	sl, #11529	; 0x2d09
 8011352:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8011356:	fb07 1a05 	mla	sl, r7, r5, r1
 801135a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801135c:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801135e:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8011362:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8011366:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8011368:	4990      	ldr	r1, [pc, #576]	; (80115ac <jpeg_idct_16x16+0x3d4>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801136a:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801136c:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8011370:	4351      	muls	r1, r2
    tmp1  += z1;
 8011372:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8011374:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8011378:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801137c:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801137e:	498c      	ldr	r1, [pc, #560]	; (80115b0 <jpeg_idct_16x16+0x3d8>)
 8011380:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8011382:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8011386:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011388:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801138c:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801138e:	eb05 0b00 	add.w	fp, r5, r0
 8011392:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8011394:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8011396:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011398:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801139c:	f640 5123 	movw	r1, #3363	; 0xd23
 80113a0:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80113a2:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 80113a4:	445c      	add	r4, fp
    tmp3  += z2;
 80113a6:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80113a8:	4429      	add	r1, r5
    tmp10 += z2;
 80113aa:	4484      	add	ip, r0
    tmp11 += z2;
 80113ac:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80113ae:	12c9      	asrs	r1, r1, #11
 80113b0:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80113b4:	9901      	ldr	r1, [sp, #4]
 80113b6:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80113b8:	9903      	ldr	r1, [sp, #12]
 80113ba:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80113bc:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80113be:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80113c0:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80113c4:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80113c6:	9903      	ldr	r1, [sp, #12]
 80113c8:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80113ca:	9905      	ldr	r1, [sp, #20]
 80113cc:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80113ce:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80113d0:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80113d2:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80113d6:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80113d8:	9905      	ldr	r1, [sp, #20]
 80113da:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80113dc:	9907      	ldr	r1, [sp, #28]
 80113de:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80113e0:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80113e2:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80113e4:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80113e8:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 80113ea:	9907      	ldr	r1, [sp, #28]
 80113ec:	eba1 0e0e 	sub.w	lr, r1, lr
 80113f0:	ea4f 21ee 	mov.w	r1, lr, asr #11
 80113f4:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 80113f8:	9908      	ldr	r1, [sp, #32]
 80113fa:	4461      	add	r1, ip
 80113fc:	12c9      	asrs	r1, r1, #11
 80113fe:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8011400:	9908      	ldr	r1, [sp, #32]
 8011402:	eba1 0c0c 	sub.w	ip, r1, ip
 8011406:	ea4f 21ec 	mov.w	r1, ip, asr #11
 801140a:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 801140e:	9906      	ldr	r1, [sp, #24]
 8011410:	4401      	add	r1, r0
 8011412:	12c9      	asrs	r1, r1, #11
 8011414:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8011418:	9906      	ldr	r1, [sp, #24]
 801141a:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801141c:	9904      	ldr	r1, [sp, #16]
 801141e:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8011420:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8011422:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8011424:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8011428:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801142c:	9904      	ldr	r1, [sp, #16]
 801142e:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8011430:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8011432:	12d2      	asrs	r2, r2, #11
 8011434:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8011438:	9a02      	ldr	r2, [sp, #8]
 801143a:	440a      	add	r2, r1
 801143c:	12d2      	asrs	r2, r2, #11
 801143e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8011442:	9a02      	ldr	r2, [sp, #8]
 8011444:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011448:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801144a:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801144c:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801144e:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011452:	f47f aed3 	bne.w	80111fc <jpeg_idct_16x16+0x24>
 8011456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 8011458:	ad0e      	add	r5, sp, #56	; 0x38
 801145a:	3b04      	subs	r3, #4
 801145c:	9300      	str	r3, [sp, #0]
 801145e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011460:	333c      	adds	r3, #60	; 0x3c
 8011462:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011464:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8011466:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801146a:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 801146e:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8011472:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8011476:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 801147a:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801147e:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8011482:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011484:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	4613      	mov	r3, r2
 801148a:	9a98      	ldr	r2, [sp, #608]	; 0x260
 801148c:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 801148e:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011492:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8011496:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011498:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801149a:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801149c:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 80114a0:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80114a4:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 80114a8:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 80114ac:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80114b0:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 80114b2:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80114b6:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80114b8:	4a37      	ldr	r2, [pc, #220]	; (8011598 <jpeg_idct_16x16+0x3c0>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80114ba:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80114be:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80114c2:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80114c6:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80114ca:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80114ce:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 80114d2:	eb0e 0207 	add.w	r2, lr, r7
 80114d6:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 80114d8:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 80114dc:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 80114e0:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 80114e2:	eb0c 0206 	add.w	r2, ip, r6
 80114e6:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 80114e8:	ebac 0206 	sub.w	r2, ip, r6
 80114ec:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 80114ee:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 80114f2:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 80114f6:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 80114f8:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 80114fa:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 80114fc:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8011500:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8011502:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8011504:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 8011508:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 801150c:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 801150e:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8011512:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8011516:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801151a:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801151e:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8011520:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8011524:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011526:	4e1d      	ldr	r6, [pc, #116]	; (801159c <jpeg_idct_16x16+0x3c4>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8011528:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801152a:	f242 74e9 	movw	r4, #10217	; 0x27e9
 801152e:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8011532:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8011536:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801153a:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 801153e:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8011542:	f241 5455 	movw	r4, #5461	; 0x1555
 8011546:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801154a:	f640 5423 	movw	r4, #3363	; 0xd23
 801154e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011552:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011554:	4454      	add	r4, sl
 8011556:	4474      	add	r4, lr
 8011558:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 801155c:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011560:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011562:	eb0c 0409 	add.w	r4, ip, r9
 8011566:	445c      	add	r4, fp
 8011568:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801156c:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801156e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011570:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8011572:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8011576:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8011578:	f240 224d 	movw	r2, #589	; 0x24d
 801157c:	fb02 4203 	mla	r2, r2, r3, r4
 8011580:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8011582:	4a09      	ldr	r2, [pc, #36]	; (80115a8 <jpeg_idct_16x16+0x3d0>)
 8011584:	fb02 4407 	mla	r4, r2, r7, r4
 8011588:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801158c:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8011590:	4c04      	ldr	r4, [pc, #16]	; (80115a4 <jpeg_idct_16x16+0x3cc>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8011592:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8011594:	1afa      	subs	r2, r7, r3
 8011596:	e00d      	b.n	80115b4 <jpeg_idct_16x16+0x3dc>
 8011598:	ffffecc2 	.word	0xffffecc2
 801159c:	ffffb6d6 	.word	0xffffb6d6
 80115a0:	ffffc542 	.word	0xffffc542
 80115a4:	ffffe77a 	.word	0xffffe77a
 80115a8:	ffffdbfa 	.word	0xffffdbfa
 80115ac:	ffffeaab 	.word	0xffffeaab
 80115b0:	ffffd817 	.word	0xffffd817
 80115b4:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80115b8:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 80115bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80115be:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80115c0:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 80115c4:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 80115c8:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80115ca:	4a4f      	ldr	r2, [pc, #316]	; (8011708 <jpeg_idct_16x16+0x530>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80115cc:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80115ce:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80115d2:	435a      	muls	r2, r3
    tmp1  += z1;
 80115d4:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80115d6:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80115da:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80115de:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80115e0:	4a4a      	ldr	r2, [pc, #296]	; (801170c <jpeg_idct_16x16+0x534>)
 80115e2:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80115e4:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 80115e8:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80115ea:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80115ee:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80115f0:	eb07 0b00 	add.w	fp, r7, r0
 80115f4:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80115f6:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80115f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80115fa:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80115fe:	f640 5223 	movw	r2, #3363	; 0xd23
 8011602:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8011604:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 8011606:	445c      	add	r4, fp
    tmp3  += z2;
 8011608:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801160a:	443a      	add	r2, r7
 801160c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 801160e:	4484      	add	ip, r0
    tmp11 += z2;
 8011610:	4448      	add	r0, r9
			     & RANGE_MASK];
 8011612:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8011616:	f818 2002 	ldrb.w	r2, [r8, r2]
 801161a:	9b98      	ldr	r3, [sp, #608]	; 0x260
 801161c:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801161e:	9b01      	ldr	r3, [sp, #4]
 8011620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011622:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8011624:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 8011626:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801162a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801162e:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8011630:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8011632:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8011634:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8011636:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801163a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801163e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8011642:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8011644:	f818 2006 	ldrb.w	r2, [r8, r6]
 8011648:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801164a:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801164c:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801164e:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8011650:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8011654:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8011658:	f818 2002 	ldrb.w	r2, [r8, r2]
 801165c:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801165e:	f818 2004 	ldrb.w	r2, [r8, r4]
 8011662:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8011664:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8011668:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801166c:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 801166e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8011672:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8011676:	f818 2002 	ldrb.w	r2, [r8, r2]
 801167a:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801167c:	f818 200e 	ldrb.w	r2, [r8, lr]
 8011680:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8011682:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8011686:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801168a:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 801168c:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8011690:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8011694:	f818 2002 	ldrb.w	r2, [r8, r2]
 8011698:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801169a:	f818 200c 	ldrb.w	r2, [r8, ip]
 801169e:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80116a0:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80116a2:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80116a4:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 80116a6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80116aa:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80116ae:	f818 2002 	ldrb.w	r2, [r8, r2]
 80116b2:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80116b4:	f818 2000 	ldrb.w	r2, [r8, r0]
 80116b8:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80116ba:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80116be:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 80116c2:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80116c6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80116ca:	f818 2002 	ldrb.w	r2, [r8, r2]
 80116ce:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80116d0:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80116d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80116d6:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80116d8:	9b02      	ldr	r3, [sp, #8]
 80116da:	4413      	add	r3, r2
			     & RANGE_MASK];
 80116dc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80116e0:	f818 3003 	ldrb.w	r3, [r8, r3]
 80116e4:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80116e6:	9b02      	ldr	r3, [sp, #8]
 80116e8:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 80116ec:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 80116ee:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80116f2:	f818 300e 	ldrb.w	r3, [r8, lr]
 80116f6:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 16; ctr++) {
 80116f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116fa:	4293      	cmp	r3, r2
 80116fc:	f47f aeb2 	bne.w	8011464 <jpeg_idct_16x16+0x28c>
  }
}
 8011700:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8011704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011708:	ffffeaab 	.word	0xffffeaab
 801170c:	ffffd817 	.word	0xffffd817

08011710 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011714:	b0cf      	sub	sp, #316	; 0x13c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8011716:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8011718:	3a02      	subs	r2, #2
{
 801171a:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 801171c:	a90e      	add	r1, sp, #56	; 0x38
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801171e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011722:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8011726:	f105 0320 	add.w	r3, r5, #32
 801172a:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801172c:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8011730:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8011732:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8011736:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 801173a:	f9b2 c042 	ldrsh.w	ip, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801173e:	f9b2 7052 	ldrsh.w	r7, [r2, #82]	; 0x52
 8011742:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8011746:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801174a:	f855 3b04 	ldr.w	r3, [r5], #4
 801174e:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8011752:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8011754:	ea4a 030b 	orr.w	r3, sl, fp
 8011758:	ea4e 0303 	orr.w	r3, lr, r3
 801175c:	ea4c 0303 	orr.w	r3, ip, r3
 8011760:	433b      	orrs	r3, r7
 8011762:	4333      	orrs	r3, r6
 8011764:	ea59 0303 	orrs.w	r3, r9, r3
 8011768:	f040 8159 	bne.w	8011a1e <jpeg_idct_16x8+0x30e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801176c:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 801176e:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8011772:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8011774:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8011776:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8011778:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 801177a:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 801177e:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8011782:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8011786:	9b04      	ldr	r3, [sp, #16]
 8011788:	42ab      	cmp	r3, r5
 801178a:	d1cf      	bne.n	801172c <jpeg_idct_16x8+0x1c>
 801178c:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 801178e:	ad0e      	add	r5, sp, #56	; 0x38
 8011790:	3b04      	subs	r3, #4
 8011792:	9300      	str	r3, [sp, #0]
 8011794:	9b03      	ldr	r3, [sp, #12]
 8011796:	331c      	adds	r3, #28
 8011798:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801179a:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801179c:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80117a0:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 80117a4:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 80117a8:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80117ac:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 80117b0:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80117b4:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 80117b8:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80117ba:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 80117bc:	9300      	str	r3, [sp, #0]
 80117be:	4613      	mov	r3, r2
 80117c0:	9a58      	ldr	r2, [sp, #352]	; 0x160
 80117c2:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 80117c4:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80117c8:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80117cc:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80117ce:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80117d0:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80117d2:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 80117d6:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80117da:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 80117de:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 80117e2:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80117e6:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 80117e8:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80117ec:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80117ee:	4acf      	ldr	r2, [pc, #828]	; (8011b2c <jpeg_idct_16x8+0x41c>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80117f0:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80117f4:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80117f8:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80117fc:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8011800:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8011804:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8011808:	eb0e 0207 	add.w	r2, lr, r7
 801180c:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 801180e:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 8011812:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8011816:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8011818:	eb0c 0206 	add.w	r2, ip, r6
 801181c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 801181e:	ebac 0206 	sub.w	r2, ip, r6
 8011822:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8011824:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8011828:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 801182c:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 801182e:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8011830:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 8011832:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8011836:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8011838:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801183a:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 801183e:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 8011842:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 8011844:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8011848:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801184c:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8011850:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8011854:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8011856:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801185a:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 801185c:	4eb4      	ldr	r6, [pc, #720]	; (8011b30 <jpeg_idct_16x8+0x420>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801185e:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8011860:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8011864:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8011868:	f242 24fc 	movw	r4, #8956	; 0x22fc
 801186c:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8011870:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8011874:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8011878:	f241 5455 	movw	r4, #5461	; 0x1555
 801187c:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8011880:	f640 5423 	movw	r4, #3363	; 0xd23
 8011884:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011888:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801188a:	4454      	add	r4, sl
 801188c:	4474      	add	r4, lr
 801188e:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011892:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8011896:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8011898:	eb0c 0409 	add.w	r4, ip, r9
 801189c:	445c      	add	r4, fp
 801189e:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80118a2:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80118a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 80118a6:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80118a8:	f44f 628e 	mov.w	r2, #1136	; 0x470
 80118ac:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80118ae:	f240 224d 	movw	r2, #589	; 0x24d
 80118b2:	fb02 4203 	mla	r2, r2, r3, r4
 80118b6:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80118b8:	4a9e      	ldr	r2, [pc, #632]	; (8011b34 <jpeg_idct_16x8+0x424>)
 80118ba:	fb02 4407 	mla	r4, r2, r7, r4
 80118be:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80118c2:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80118c6:	4c9c      	ldr	r4, [pc, #624]	; (8011b38 <jpeg_idct_16x8+0x428>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80118c8:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80118ca:	1afa      	subs	r2, r7, r3
 80118cc:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80118d0:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 80118d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80118d6:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80118d8:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 80118dc:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 80118e0:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80118e2:	4a96      	ldr	r2, [pc, #600]	; (8011b3c <jpeg_idct_16x8+0x42c>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80118e4:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80118e6:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80118ea:	435a      	muls	r2, r3
    tmp1  += z1;
 80118ec:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80118ee:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80118f2:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80118f6:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80118f8:	4a91      	ldr	r2, [pc, #580]	; (8011b40 <jpeg_idct_16x8+0x430>)
 80118fa:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80118fc:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8011900:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011902:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8011906:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011908:	eb07 0b00 	add.w	fp, r7, r0
 801190c:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801190e:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8011910:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8011912:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8011916:	f640 5223 	movw	r2, #3363	; 0xd23
 801191a:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801191c:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 801191e:	445c      	add	r4, fp
    tmp3  += z2;
 8011920:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8011922:	443a      	add	r2, r7
 8011924:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8011926:	4484      	add	ip, r0
    tmp11 += z2;
 8011928:	4448      	add	r0, r9
			     & RANGE_MASK];
 801192a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801192e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8011932:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8011934:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8011936:	9b01      	ldr	r3, [sp, #4]
 8011938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801193a:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801193c:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 801193e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8011942:	f818 2002 	ldrb.w	r2, [r8, r2]
 8011946:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8011948:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801194a:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801194c:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 801194e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8011952:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8011956:	f818 2002 	ldrb.w	r2, [r8, r2]
 801195a:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801195c:	f818 2006 	ldrb.w	r2, [r8, r6]
 8011960:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8011962:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8011964:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8011966:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8011968:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801196c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8011970:	f818 2002 	ldrb.w	r2, [r8, r2]
 8011974:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8011976:	f818 2004 	ldrb.w	r2, [r8, r4]
 801197a:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801197c:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8011980:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8011984:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8011986:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801198a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801198e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8011992:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8011994:	f818 200e 	ldrb.w	r2, [r8, lr]
 8011998:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801199a:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801199e:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80119a2:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 80119a4:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80119a8:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80119ac:	f818 2002 	ldrb.w	r2, [r8, r2]
 80119b0:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80119b2:	f818 200c 	ldrb.w	r2, [r8, ip]
 80119b6:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80119b8:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80119ba:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80119bc:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 80119be:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80119c2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80119c6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80119ca:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80119cc:	f818 2000 	ldrb.w	r2, [r8, r0]
 80119d0:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80119d2:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80119d6:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 80119da:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80119de:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80119e2:	f818 2002 	ldrb.w	r2, [r8, r2]
 80119e6:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80119e8:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80119ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80119ee:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80119f0:	9b02      	ldr	r3, [sp, #8]
 80119f2:	4413      	add	r3, r2
			     & RANGE_MASK];
 80119f4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80119f8:	f818 3003 	ldrb.w	r3, [r8, r3]
 80119fc:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80119fe:	9b02      	ldr	r3, [sp, #8]
 8011a00:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 8011a04:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8011a06:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8011a0a:	f818 300e 	ldrb.w	r3, [r8, lr]
 8011a0e:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 8; ctr++) {
 8011a10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a12:	4293      	cmp	r3, r2
 8011a14:	f47f aec1 	bne.w	801179a <jpeg_idct_16x8+0x8a>
  }
}
 8011a18:	b04f      	add	sp, #316	; 0x13c
 8011a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011a1e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8011a20:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011a24:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8011a28:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8011a2a:	f241 1651 	movw	r6, #4433	; 0x1151
 8011a2e:	eb0b 0300 	add.w	r3, fp, r0
 8011a32:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8011a34:	f641 067e 	movw	r6, #6270	; 0x187e
 8011a38:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8011a3c:	4e41      	ldr	r6, [pc, #260]	; (8011b44 <jpeg_idct_16x8+0x434>)
 8011a3e:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 8011a42:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011a44:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011a4a:	fb00 f00c 	mul.w	r0, r0, ip
    tmp0 = z2 + z3;
 8011a4e:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 8011a52:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8011a56:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 8011a5a:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011a5e:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 8011a60:	9000      	str	r0, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8011a62:	18f0      	adds	r0, r6, r3
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011a64:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8011a68:	1b9b      	subs	r3, r3, r6
    tmp11 = tmp1 + tmp3;
 8011a6a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011a6c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp12 = tmp1 - tmp3;
 8011a70:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8011a72:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011a76:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011a7a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8011a7e:	4347      	muls	r7, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011a80:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8011a82:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8011a86:	eb07 040a 	add.w	r4, r7, sl
    z2 = tmp0 + tmp2;
 8011a8a:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8011a8e:	1930      	adds	r0, r6, r4
 8011a90:	4358      	muls	r0, r3
    z2 += z1;
 8011a92:	4b2d      	ldr	r3, [pc, #180]	; (8011b48 <jpeg_idct_16x8+0x438>)
 8011a94:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8011a98:	4b2c      	ldr	r3, [pc, #176]	; (8011b4c <jpeg_idct_16x8+0x43c>)
 8011a9a:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8011a9e:	eb09 040a 	add.w	r4, r9, sl
 8011aa2:	4b2b      	ldr	r3, [pc, #172]	; (8011b50 <jpeg_idct_16x8+0x440>)
 8011aa4:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8011aa6:	f640 138e 	movw	r3, #2446	; 0x98e
 8011aaa:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8011aae:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8011ab0:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8011ab4:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011ab8:	4b26      	ldr	r3, [pc, #152]	; (8011b54 <jpeg_idct_16x8+0x444>)
    tmp3 += z1 + z3;
 8011aba:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011abe:	eb07 0a0e 	add.w	sl, r7, lr
    tmp1 += z1 + z3;
 8011ac2:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8011ac6:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8011aca:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 8011acc:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8011ace:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8011ad0:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8011ad4:	fb0b 0007 	mla	r0, fp, r7, r0
    tmp2 += z1 + z2;
 8011ad8:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8011adc:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8011ae0:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8011ae4:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8011ae6:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8011ae8:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8011aec:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8011af0:	eb03 040a 	add.w	r4, r3, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8011af4:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011af8:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8011afa:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8011afc:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8011b00:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011b02:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8011b04:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8011b06:	9b00      	ldr	r3, [sp, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011b08:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8011b0a:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8011b0e:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8011b10:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8011b12:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8011b14:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8011b16:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8011b1a:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8011b1c:	9b00      	ldr	r3, [sp, #0]
 8011b1e:	eba3 0909 	sub.w	r9, r3, r9
 8011b22:	ea4f 20e9 	mov.w	r0, r9, asr #11
 8011b26:	67c8      	str	r0, [r1, #124]	; 0x7c
    wsptr++;
 8011b28:	e62d      	b.n	8011786 <jpeg_idct_16x8+0x76>
 8011b2a:	bf00      	nop
 8011b2c:	ffffecc2 	.word	0xffffecc2
 8011b30:	ffffb6d6 	.word	0xffffb6d6
 8011b34:	ffffdbfa 	.word	0xffffdbfa
 8011b38:	ffffe77a 	.word	0xffffe77a
 8011b3c:	ffffeaab 	.word	0xffffeaab
 8011b40:	ffffd817 	.word	0xffffd817
 8011b44:	ffffc4df 	.word	0xffffc4df
 8011b48:	ffffc13b 	.word	0xffffc13b
 8011b4c:	fffff384 	.word	0xfffff384
 8011b50:	ffffe333 	.word	0xffffe333
 8011b54:	ffffadfd 	.word	0xffffadfd

08011b58 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b5c:	b0c5      	sub	sp, #276	; 0x114
 8011b5e:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8011b60:	f1a2 0c02 	sub.w	ip, r2, #2
 8011b64:	320e      	adds	r2, #14
 8011b66:	9302      	str	r3, [sp, #8]
 8011b68:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011b6a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011b6e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8011b72:	9204      	str	r2, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011b74:	3380      	adds	r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b76:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8011b7a:	f641 4037 	movw	r0, #7223	; 0x1c37
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b7e:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8011b82:	f642 0ac6 	movw	sl, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b86:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011b8a:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b8e:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011b90:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011b94:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	; 0x60
    tmp23 <<= CONST_BITS;
 8011b98:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b9e:	9200      	str	r2, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011ba0:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8011ba2:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011ba4:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 8011ba8:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011bac:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 8011bb0:	434a      	muls	r2, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8011bb2:	eba8 0102 	sub.w	r1, r8, r2
 8011bb6:	fb00 f901 	mul.w	r9, r0, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8011bba:	eba5 0008 	sub.w	r0, r5, r8
 8011bbe:	f640 2112 	movw	r1, #2578	; 0xa12
 8011bc2:	fb01 f700 	mul.w	r7, r1, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8011bc6:	9900      	ldr	r1, [sp, #0]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8011bc8:	18a8      	adds	r0, r5, r2
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8011bca:	eb09 0407 	add.w	r4, r9, r7
 8011bce:	440c      	add	r4, r1
 8011bd0:	49ba      	ldr	r1, [pc, #744]	; (8011ebc <jpeg_idct_14x7+0x364>)
 8011bd2:	fb01 4408 	mla	r4, r1, r8, r4
    tmp10 = z1 + z3;
 8011bd6:	18a9      	adds	r1, r5, r2
 8011bd8:	9103      	str	r1, [sp, #12]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8011bda:	9900      	ldr	r1, [sp, #0]
 8011bdc:	fb0a 1000 	mla	r0, sl, r0, r1
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8011be0:	f46f 711f 	mvn.w	r1, #636	; 0x27c
 8011be4:	fb01 0102 	mla	r1, r1, r2, r0
 8011be8:	eb01 0209 	add.w	r2, r1, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011bec:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	; 0x50

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8011bf0:	f641 51ef 	movw	r1, #7663	; 0x1def
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8011bf4:	9201      	str	r2, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8011bf6:	4ab2      	ldr	r2, [pc, #712]	; (8011ec0 <jpeg_idct_14x7+0x368>)
 8011bf8:	fb02 0005 	mla	r0, r2, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011bfc:	f9bc 5010 	ldrsh.w	r5, [ip, #16]
 8011c00:	6a32      	ldr	r2, [r6, #32]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8011c02:	4438      	add	r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011c04:	f9bc 7030 	ldrsh.w	r7, [ip, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011c08:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011c0a:	6e35      	ldr	r5, [r6, #96]	; 0x60
 8011c0c:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011c0e:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8011c12:	fb07 f709 	mul.w	r7, r7, r9
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8011c16:	eb02 0905 	add.w	r9, r2, r5
 8011c1a:	fb01 fb09 	mul.w	fp, r1, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8011c1e:	eba2 0905 	sub.w	r9, r2, r5
 8011c22:	f240 5173 	movw	r1, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8011c26:	443a      	add	r2, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8011c28:	443d      	add	r5, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8011c2a:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8011c2e:	49a5      	ldr	r1, [pc, #660]	; (8011ec4 <jpeg_idct_14x7+0x36c>)
    tmp10 = tmp11 - tmp12;
 8011c30:	ebab 0a09 	sub.w	sl, fp, r9
    tmp11 += tmp12;
 8011c34:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8011c36:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8011c3a:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8011c3c:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8011c40:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8011c44:	44a9      	add	r9, r5
    tmp10 += z2;
 8011c46:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8011c48:	fb0b 2707 	mla	r7, fp, r7, r2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011c4c:	9a01      	ldr	r2, [sp, #4]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8011c4e:	443d      	add	r5, r7
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011c50:	4452      	add	r2, sl
 8011c52:	12d2      	asrs	r2, r2, #11
 8011c54:	f84e 2c04 	str.w	r2, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011c58:	9a01      	ldr	r2, [sp, #4]
 8011c5a:	eba2 0a0a 	sub.w	sl, r2, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011c5e:	eb04 0209 	add.w	r2, r4, r9
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011c62:	eba4 0409 	sub.w	r4, r4, r9
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011c66:	12d2      	asrs	r2, r2, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011c68:	ea4f 21ea 	mov.w	r1, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011c6c:	f8ce 201c 	str.w	r2, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011c70:	1942      	adds	r2, r0, r5
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011c72:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011c76:	1b45      	subs	r5, r0, r5
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011c78:	12d2      	asrs	r2, r2, #11
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8011c7a:	9900      	ldr	r1, [sp, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011c7c:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011c7e:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011c82:	12ed      	asrs	r5, r5, #11
    z2 -= tmp10;
 8011c84:	9a03      	ldr	r2, [sp, #12]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011c86:	f8ce 409c 	str.w	r4, [lr, #156]	; 0x9c
    z2 -= tmp10;
 8011c8a:	eba8 0802 	sub.w	r8, r8, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8011c8e:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011c92:	f8ce 507c 	str.w	r5, [lr, #124]	; 0x7c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8011c96:	fb02 1808 	mla	r8, r2, r8, r1
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 8011c9a:	ea4f 22e8 	mov.w	r2, r8, asr #11
 8011c9e:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011ca2:	9a04      	ldr	r2, [sp, #16]
 8011ca4:	4562      	cmp	r2, ip
 8011ca6:	f47f af66 	bne.w	8011b76 <jpeg_idct_14x7+0x1e>
 8011caa:	9a02      	ldr	r2, [sp, #8]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 8011cac:	ac0c      	add	r4, sp, #48	; 0x30
 8011cae:	3a04      	subs	r2, #4
 8011cb0:	9200      	str	r2, [sp, #0]
 8011cb2:	9a02      	ldr	r2, [sp, #8]
 8011cb4:	3218      	adds	r2, #24
 8011cb6:	920b      	str	r2, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011cb8:	9a00      	ldr	r2, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011cba:	f640 2512 	movw	r5, #2578	; 0xa12
    z4 = (INT32) wsptr[4];
 8011cbe:	6927      	ldr	r7, [r4, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011cc0:	f241 38a3 	movw	r8, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8011cc4:	f852 1f04 	ldr.w	r1, [r2, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011cc8:	f641 0b14 	movw	fp, #6164	; 0x1814
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011ccc:	6820      	ldr	r0, [r4, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011cce:	fb05 fe07 	mul.w	lr, r5, r7
    outptr = output_buf[ctr] + output_col;
 8011cd2:	910a      	str	r1, [sp, #40]	; 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011cd4:	f641 4537 	movw	r5, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 8011cd8:	9200      	str	r2, [sp, #0]
 8011cda:	460a      	mov	r2, r1
 8011cdc:	994e      	ldr	r1, [sp, #312]	; 0x138
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011cde:	3010      	adds	r0, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011ce0:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8011ce2:	1851      	adds	r1, r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011ce4:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp11 = z1 + z3;
 8011ce8:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011cec:	437a      	muls	r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011cee:	436f      	muls	r7, r5
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011cf0:	4d75      	ldr	r5, [pc, #468]	; (8011ec8 <jpeg_idct_14x7+0x370>)
    tmp10 = z1 + z2;
 8011cf2:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011cf6:	4472      	add	r2, lr
    z1 = (INT32) wsptr[2];
 8011cf8:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 8011cfc:	ebc7 3940 	rsb	r9, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011d00:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011d02:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011d06:	0052      	lsls	r2, r2, #1
 8011d08:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 8011d0c:	9201      	str	r2, [sp, #4]
    z2 = (INT32) wsptr[6];
 8011d0e:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011d12:	eb0e 0002 	add.w	r0, lr, r2
 8011d16:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8011d18:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8011d1c:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011d20:	fb05 0002 	mla	r0, r5, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8011d24:	f605 25e5 	addw	r5, r5, #2789	; 0xae5
 8011d28:	436a      	muls	r2, r5
    tmp20 = tmp10 + tmp13;
 8011d2a:	eb0c 0507 	add.w	r5, ip, r7
 8011d2e:	9502      	str	r5, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8011d30:	ebac 0507 	sub.w	r5, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011d34:	fb08 220e 	mla	r2, r8, lr, r2
    z2 = (INT32) wsptr[3];
 8011d38:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp26 = tmp10 - tmp13;
 8011d3c:	9503      	str	r5, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8011d3e:	1835      	adds	r5, r6, r0
    tmp25 = tmp11 - tmp14;
 8011d40:	1a30      	subs	r0, r6, r0
    z3 = (INT32) wsptr[5];
 8011d42:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp21 = tmp11 + tmp14;
 8011d46:	9504      	str	r5, [sp, #16]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011d48:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 8011d4c:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8011d4e:	eb09 0002 	add.w	r0, r9, r2
    tmp24 = tmp12 - tmp15;
 8011d52:	eba9 0202 	sub.w	r2, r9, r2
    z4 = (INT32) wsptr[7];
 8011d56:	f854 9c04 	ldr.w	r9, [r4, #-4]
    tmp22 = tmp12 + tmp15;
 8011d5a:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011d5c:	f642 20b7 	movw	r0, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 8011d60:	9207      	str	r2, [sp, #28]
    z1 = (INT32) wsptr[1];
 8011d62:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011d66:	eb02 0a08 	add.w	sl, r2, r8
    tmp14 = z1 + z3;
 8011d6a:	eb02 060c 	add.w	r6, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011d6e:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011d72:	f242 6052 	movw	r0, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011d76:	fb0b fb06 	mul.w	fp, fp, r6
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011d7a:	fb00 f506 	mul.w	r5, r0, r6
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011d7e:	4853      	ldr	r0, [pc, #332]	; (8011ecc <jpeg_idct_14x7+0x374>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011d80:	f46f 66a2 	mvn.w	r6, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011d84:	eb0a 0705 	add.w	r7, sl, r5
 8011d88:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 8011d8c:	fb00 7702 	mla	r7, r0, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011d90:	f200 201b 	addw	r0, r0, #539	; 0x21b
 8011d94:	fb00 b002 	mla	r0, r0, r2, fp
    z1    -= z2;
 8011d98:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011d9c:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011da0:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011da4:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011da8:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 8011daa:	4470      	add	r0, lr
 8011dac:	9008      	str	r0, [sp, #32]
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011dae:	eb08 000c 	add.w	r0, r8, ip
 8011db2:	4370      	muls	r0, r6
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011db4:	f6a6 0681 	subw	r6, r6, #2177	; 0x881
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011db8:	eba0 3049 	sub.w	r0, r0, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011dbc:	fb06 0608 	mla	r6, r6, r8, r0
 8011dc0:	44b2      	add	sl, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011dc2:	4e43      	ldr	r6, [pc, #268]	; (8011ed0 <jpeg_idct_14x7+0x378>)
 8011dc4:	fb06 000c 	mla	r0, r6, ip, r0
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011dc8:	f642 46f8 	movw	r6, #11512	; 0x2cf8
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011dcc:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011dce:	ebac 0508 	sub.w	r5, ip, r8
 8011dd2:	4375      	muls	r5, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011dd4:	9009      	str	r0, [sp, #36]	; 0x24
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011dd6:	eb05 3649 	add.w	r6, r5, r9, lsl #13
 8011dda:	483e      	ldr	r0, [pc, #248]	; (8011ed4 <jpeg_idct_14x7+0x37c>)
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011ddc:	eb02 3949 	add.w	r9, r2, r9, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011de0:	9a02      	ldr	r2, [sp, #8]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011de2:	fb00 660c 	mla	r6, r0, ip, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011de6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011de8:	443a      	add	r2, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011dea:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011dec:	f241 5b99 	movw	fp, #5529	; 0x1599
			     & RANGE_MASK];
 8011df0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011df4:	fb0b 5508 	mla	r5, fp, r8, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011df8:	5c9a      	ldrb	r2, [r3, r2]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011dfa:	44ae      	add	lr, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011dfc:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 8011dfe:	5542      	strb	r2, [r0, r5]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011e00:	9a02      	ldr	r2, [sp, #8]
 8011e02:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 8011e04:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011e08:	5dda      	ldrb	r2, [r3, r7]
 8011e0a:	734a      	strb	r2, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011e0c:	9a04      	ldr	r2, [sp, #16]
 8011e0e:	4452      	add	r2, sl
			     & RANGE_MASK];
 8011e10:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011e14:	5c9a      	ldrb	r2, [r3, r2]
 8011e16:	704a      	strb	r2, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011e18:	9a04      	ldr	r2, [sp, #16]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011e1a:	9809      	ldr	r0, [sp, #36]	; 0x24
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011e1c:	eba2 0a0a 	sub.w	sl, r2, sl
			     & RANGE_MASK];
 8011e20:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011e24:	f813 200a 	ldrb.w	r2, [r3, sl]
 8011e28:	730a      	strb	r2, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011e2a:	9a06      	ldr	r2, [sp, #24]
 8011e2c:	4402      	add	r2, r0
			     & RANGE_MASK];
 8011e2e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011e32:	5c9a      	ldrb	r2, [r3, r2]
 8011e34:	708a      	strb	r2, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011e36:	9a06      	ldr	r2, [sp, #24]
 8011e38:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8011e3a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011e3e:	5c1a      	ldrb	r2, [r3, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011e40:	9808      	ldr	r0, [sp, #32]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011e42:	72ca      	strb	r2, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011e44:	9a01      	ldr	r2, [sp, #4]
 8011e46:	444a      	add	r2, r9
			     & RANGE_MASK];
 8011e48:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011e4c:	5c9a      	ldrb	r2, [r3, r2]
 8011e4e:	70ca      	strb	r2, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011e50:	9a01      	ldr	r2, [sp, #4]
 8011e52:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 8011e56:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011e5a:	f813 2009 	ldrb.w	r2, [r3, r9]
 8011e5e:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011e60:	9a07      	ldr	r2, [sp, #28]
 8011e62:	4432      	add	r2, r6
			     & RANGE_MASK];
 8011e64:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011e68:	5c9a      	ldrb	r2, [r3, r2]
 8011e6a:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011e6c:	9a07      	ldr	r2, [sp, #28]
 8011e6e:	1b96      	subs	r6, r2, r6
			     & RANGE_MASK];
 8011e70:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011e74:	5d9a      	ldrb	r2, [r3, r6]
 8011e76:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011e78:	9a05      	ldr	r2, [sp, #20]
 8011e7a:	4472      	add	r2, lr
			     & RANGE_MASK];
 8011e7c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011e80:	5c9a      	ldrb	r2, [r3, r2]
 8011e82:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011e84:	9a05      	ldr	r2, [sp, #20]
 8011e86:	eba2 050e 	sub.w	r5, r2, lr
			     & RANGE_MASK];
 8011e8a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011e8e:	5d5a      	ldrb	r2, [r3, r5]
 8011e90:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011e92:	9a03      	ldr	r2, [sp, #12]
 8011e94:	4402      	add	r2, r0
			     & RANGE_MASK];
 8011e96:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011e9a:	5c9a      	ldrb	r2, [r3, r2]
 8011e9c:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011e9e:	9a03      	ldr	r2, [sp, #12]
 8011ea0:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8011ea2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011ea6:	5c1a      	ldrb	r2, [r3, r0]
 8011ea8:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 8011eaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011eac:	9900      	ldr	r1, [sp, #0]
 8011eae:	428a      	cmp	r2, r1
 8011eb0:	f47f af02 	bne.w	8011cb8 <jpeg_idct_14x7+0x160>
  }
}
 8011eb4:	b045      	add	sp, #276	; 0x114
 8011eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eba:	bf00      	nop
 8011ebc:	ffffc515 	.word	0xffffc515
 8011ec0:	ffffb0f1 	.word	0xffffb0f1
 8011ec4:	ffffd3e1 	.word	0xffffd3e1
 8011ec8:	ffffc8fc 	.word	0xffffc8fc
 8011ecc:	ffffdbf0 	.word	0xffffdbf0
 8011ed0:	ffffb409 	.word	0xffffb409
 8011ed4:	ffffc9e6 	.word	0xffffc9e6

08011ed8 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011edc:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8011ee0:	b0bb      	sub	sp, #236	; 0xec
 8011ee2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8011ee4:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011ee6:	3080      	adds	r0, #128	; 0x80
 8011ee8:	320e      	adds	r2, #14
 8011eea:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011eec:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011eee:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011ef0:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ef2:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8011ef6:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011efa:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011efe:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011f00:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011f04:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011f06:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011f0a:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011f0e:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 8011f10:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8011f12:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011f16:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011f1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011f1e:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8011f22:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 8011f24:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 8011f26:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011f2a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8011f2c:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011f30:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8011f34:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011f36:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp20 = tmp11 + tmp10;
 8011f38:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011f3c:	fb00 f909 	mul.w	r9, r0, r9
    tmp22 = tmp11 - tmp10;
 8011f40:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011f42:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011f46:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011f48:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011f4c:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011f50:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8011f54:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011f58:	eb02 0c08 	add.w	ip, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8011f5c:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8011f60:	eba2 0909 	sub.w	r9, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8011f64:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8011f68:	eba9 0808 	sub.w	r8, r9, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8011f6c:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8011f70:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011f74:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011f78:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8011f7c:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011f80:	12d2      	asrs	r2, r2, #11
 8011f82:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011f86:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8011f8a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8011f8e:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8011f92:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8011f96:	61fa      	str	r2, [r7, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011f98:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011f9c:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8011fa0:	67f9      	str	r1, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011fa2:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011fa4:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011fa8:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011faa:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011fac:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011fae:	42b2      	cmp	r2, r6
 8011fb0:	d19f      	bne.n	8011ef2 <jpeg_idct_12x6+0x1a>
 8011fb2:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 8011fb6:	aa0a      	add	r2, sp, #40	; 0x28
 8011fb8:	3314      	adds	r3, #20
 8011fba:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011fbc:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8011fc0:	f640 0b5b 	movw	fp, #2139	; 0x85b
    outptr = output_buf[ctr] + output_col;
 8011fc4:	9944      	ldr	r1, [sp, #272]	; 0x110
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011fc6:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8011fc8:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 8011fca:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 8011fce:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011fd0:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8011fd4:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 8011fd8:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011fda:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 8011fde:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011fe2:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp12 = z1 - z2;
 8011fe6:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 8011fea:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011fee:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011ff0:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    tmp21 = z3 + tmp12;
 8011ff4:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011ff8:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 8011ffa:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 8011ffe:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 8012000:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 8012004:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 8012008:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 801200c:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 8012010:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 8012014:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 8012016:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 801201a:	1b4d      	subs	r5, r1, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801201c:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    tmp20 = tmp10 + tmp12;
 8012020:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 8012022:	eba7 000c 	sub.w	r0, r7, ip
    tmp22 = tmp11 + tmp12;
 8012026:	1961      	adds	r1, r4, r5
    tmp10 = z1 + z3;
 8012028:	eb08 0706 	add.w	r7, r8, r6
    tmp25 = tmp10 - tmp12;
 801202c:	9005      	str	r0, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801202e:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp22 = tmp11 + tmp12;
 8012032:	9106      	str	r1, [sp, #24]
    tmp23 = tmp11 - tmp12;
 8012034:	1b61      	subs	r1, r4, r5
    z4 = (INT32) wsptr[7];
 8012036:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 801203a:	9107      	str	r1, [sp, #28]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801203c:	eb05 0c07 	add.w	ip, r5, r7
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8012040:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012044:	eb06 0905 	add.w	r9, r6, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012048:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801204c:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8012050:	484f      	ldr	r0, [pc, #316]	; (8012190 <jpeg_idct_12x6+0x2b8>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8012052:	fb0b cb07 	mla	fp, fp, r7, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8012056:	f640 07f7 	movw	r7, #2295	; 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801205a:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801205c:	484d      	ldr	r0, [pc, #308]	; (8012194 <jpeg_idct_12x6+0x2bc>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801205e:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012062:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8012066:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801206a:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801206e:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012072:	eb01 0709 	add.w	r7, r1, r9
 8012076:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801207a:	4847      	ldr	r0, [pc, #284]	; (8012198 <jpeg_idct_12x6+0x2c0>)
 801207c:	fb00 1108 	mla	r1, r0, r8, r1
 8012080:	4846      	ldr	r0, [pc, #280]	; (801219c <jpeg_idct_12x6+0x2c4>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8012082:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012084:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8012088:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 801208c:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8012090:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 8012094:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 8012098:	1b86      	subs	r6, r0, r6
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801209a:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801209e:	444c      	add	r4, r9
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80120a0:	eb01 090c 	add.w	r9, r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80120a4:	eb05 0c06 	add.w	ip, r5, r6
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80120a8:	483d      	ldr	r0, [pc, #244]	; (80121a0 <jpeg_idct_12x6+0x2c8>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80120aa:	9901      	ldr	r1, [sp, #4]
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80120ac:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80120b0:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80120b4:	fb00 c606 	mla	r6, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80120b8:	9804      	ldr	r0, [sp, #16]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80120ba:	fb08 c505 	mla	r5, r8, r5, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80120be:	eb00 080e 	add.w	r8, r0, lr
 80120c2:	9808      	ldr	r0, [sp, #32]
			     & RANGE_MASK];
 80120c4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80120c8:	f811 c008 	ldrb.w	ip, [r1, r8]
 80120cc:	9944      	ldr	r1, [sp, #272]	; 0x110
 80120ce:	f800 c001 	strb.w	ip, [r0, r1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80120d2:	9904      	ldr	r1, [sp, #16]
 80120d4:	eba1 0e0e 	sub.w	lr, r1, lr
 80120d8:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80120da:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80120de:	f811 c00e 	ldrb.w	ip, [r1, lr]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80120e2:	9902      	ldr	r1, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80120e4:	f883 c00b 	strb.w	ip, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80120e8:	eb01 0c05 	add.w	ip, r1, r5
 80120ec:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80120ee:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80120f2:	f811 c00c 	ldrb.w	ip, [r1, ip]
 80120f6:	f883 c001 	strb.w	ip, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80120fa:	9902      	ldr	r1, [sp, #8]
 80120fc:	eba1 0805 	sub.w	r8, r1, r5
 8012100:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8012102:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012106:	f811 5008 	ldrb.w	r5, [r1, r8]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801210a:	9906      	ldr	r1, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801210c:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801210e:	19cd      	adds	r5, r1, r7
 8012110:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8012112:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012116:	5d4d      	ldrb	r5, [r1, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012118:	9906      	ldr	r1, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801211a:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801211c:	1bcf      	subs	r7, r1, r7
 801211e:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8012120:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012124:	5dcd      	ldrb	r5, [r1, r7]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012126:	9907      	ldr	r1, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012128:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801212a:	190d      	adds	r5, r1, r4
 801212c:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801212e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012132:	5d4d      	ldrb	r5, [r1, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012134:	9907      	ldr	r1, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012136:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012138:	1b0c      	subs	r4, r1, r4
 801213a:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801213c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012140:	5d0c      	ldrb	r4, [r1, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012142:	9903      	ldr	r1, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012144:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012146:	198c      	adds	r4, r1, r6
 8012148:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801214a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801214e:	5d0c      	ldrb	r4, [r1, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012150:	9903      	ldr	r1, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012152:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012154:	1b8e      	subs	r6, r1, r6
 8012156:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8012158:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801215c:	5d8c      	ldrb	r4, [r1, r6]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801215e:	9905      	ldr	r1, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012160:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012162:	eb01 0409 	add.w	r4, r1, r9
 8012166:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8012168:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801216c:	5d0c      	ldrb	r4, [r1, r4]
 801216e:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012170:	9905      	ldr	r1, [sp, #20]
 8012172:	9801      	ldr	r0, [sp, #4]
 8012174:	eba1 0109 	sub.w	r1, r1, r9
			     & RANGE_MASK];
 8012178:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801217c:	5c41      	ldrb	r1, [r0, r1]
 801217e:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 8012180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012182:	4553      	cmp	r3, sl
 8012184:	f47f af1a 	bne.w	8011fbc <jpeg_idct_12x6+0xe4>
  }
}
 8012188:	b03b      	add	sp, #236	; 0xec
 801218a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801218e:	bf00      	nop
 8012190:	ffffeeaf 	.word	0xffffeeaf
 8012194:	ffffde8b 	.word	0xffffde8b
 8012198:	ffffea5c 	.word	0xffffea5c
 801219c:	ffffc08c 	.word	0xffffc08c
 80121a0:	ffffc4df 	.word	0xffffc4df

080121a4 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80121a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80121a8:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80121ac:	b0af      	sub	sp, #188	; 0xbc
 80121ae:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80121b0:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80121b2:	3080      	adds	r0, #128	; 0x80
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80121b4:	320e      	adds	r2, #14
 80121b6:	3d04      	subs	r5, #4
  wsptr = workspace;
 80121b8:	af06      	add	r7, sp, #24
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80121ba:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80121be:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
{
 80121c2:	9300      	str	r3, [sp, #0]
 80121c4:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80121c6:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80121ca:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80121cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80121d0:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80121d4:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80121d6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80121d8:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80121dc:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80121de:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80121e2:	6a2b      	ldr	r3, [r5, #32]
    tmp12 <<= CONST_BITS;
 80121e4:	0352      	lsls	r2, r2, #13
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80121e6:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80121ea:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 80121ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80121f2:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80121f6:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80121fa:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80121fe:	fb03 fa0a 	mul.w	sl, r3, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012202:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8012204:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8012208:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801220c:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = tmp12 + z2;
 8012210:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8012212:	f641 239a 	movw	r3, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8012216:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801221a:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 801221e:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8012222:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8012226:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8012228:	fb03 f808 	mul.w	r8, r3, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801222c:	f241 0371 	movw	r3, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8012230:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8012232:	fb03 8a0a 	mla	sl, r3, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8012236:	4b6c      	ldr	r3, [pc, #432]	; (80123e8 <jpeg_idct_10x5+0x244>)
 8012238:	fb03 880b 	mla	r8, r3, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801223c:	eb09 0b0a 	add.w	fp, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012240:	9b01      	ldr	r3, [sp, #4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8012242:	eba9 0a0a 	sub.w	sl, r9, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8012246:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801224a:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801224e:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012252:	42b3      	cmp	r3, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8012254:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8012258:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801225c:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8012260:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8012264:	f8c7 a07c 	str.w	sl, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8012268:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801226c:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801226e:	d1aa      	bne.n	80121c6 <jpeg_idct_10x5+0x22>
 8012270:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 8012272:	a906      	add	r1, sp, #24
 8012274:	f1a3 0b04 	sub.w	fp, r3, #4
 8012278:	3310      	adds	r3, #16
 801227a:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801227c:	f85b 3f04 	ldr.w	r3, [fp, #4]!
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012280:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8012282:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    z4 = (INT32) wsptr[4];
 8012284:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8012288:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801228a:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 801228e:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8012290:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012294:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8012298:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[6];
 801229c:	f851 cc08 	ldr.w	ip, [r1, #-8]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80122a0:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80122a2:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 80122a4:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80122a8:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 80122aa:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80122ae:	f641 279a 	movw	r7, #6810	; 0x1a9a
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80122b2:	006d      	lsls	r5, r5, #1
 80122b4:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 80122b8:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80122bc:	9300      	str	r3, [sp, #0]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80122be:	eb05 030c 	add.w	r3, r5, ip
 80122c2:	437b      	muls	r3, r7
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80122c4:	f241 0771 	movw	r7, #4209	; 0x1071
 80122c8:	fb07 3505 	mla	r5, r7, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80122cc:	4f46      	ldr	r7, [pc, #280]	; (80123e8 <jpeg_idct_10x5+0x244>)
 80122ce:	fb07 330c 	mla	r3, r7, ip, r3
    tmp20 = tmp10 + tmp12;
 80122d2:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 80122d6:	1b75      	subs	r5, r6, r5
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80122d8:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp21 = tmp11 + tmp13;
 80122dc:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 80122de:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 80122e0:	9501      	str	r5, [sp, #4]
    tmp23 = tmp11 - tmp13;
 80122e2:	9302      	str	r3, [sp, #8]
    z2 = (INT32) wsptr[3];
 80122e4:	f851 5c14 	ldr.w	r5, [r1, #-20]
    z4 = (INT32) wsptr[7];
 80122e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 80122ec:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 80122f0:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 80122f4:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80122f6:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80122fa:	fb06 f809 	mul.w	r8, r6, r9
    z4 = z3 + tmp12;
 80122fe:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012302:	435d      	muls	r5, r3
    z4 = z3 + tmp12;
 8012304:	eb05 3a46 	add.w	sl, r5, r6, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012308:	f642 46b3 	movw	r6, #11443	; 0x2cb3
 801230c:	fb06 8e02 	mla	lr, r6, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012310:	f240 7614 	movw	r6, #1812	; 0x714
 8012314:	4356      	muls	r6, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012316:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012318:	eba6 0608 	sub.w	r6, r6, r8
 801231c:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801231e:	f241 26cf 	movw	r6, #4815	; 0x12cf
 8012322:	fb06 f909 	mul.w	r9, r6, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012326:	f851 6c0c 	ldr.w	r6, [r1, #-12]
 801232a:	ebc5 3546 	rsb	r5, r5, r6, lsl #13
 801232e:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8012332:	1ad3      	subs	r3, r2, r3
 8012334:	035b      	lsls	r3, r3, #13
 8012336:	eba3 3846 	sub.w	r8, r3, r6, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801233a:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801233e:	f642 0353 	movw	r3, #10323	; 0x2853
 8012342:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012344:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012346:	9e04      	ldr	r6, [sp, #16]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012348:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801234c:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012350:	eb0c 020e 	add.w	r2, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012354:	1b5b      	subs	r3, r3, r5
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012356:	ebac 0c0e 	sub.w	ip, ip, lr
			    & RANGE_MASK];
 801235a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801235e:	444d      	add	r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012360:	9303      	str	r3, [sp, #12]
			    & RANGE_MASK];
 8012362:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012366:	5c82      	ldrb	r2, [r0, r2]
 8012368:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801236a:	54f2      	strb	r2, [r6, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801236c:	9b03      	ldr	r3, [sp, #12]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801236e:	f810 200c 	ldrb.w	r2, [r0, ip]
 8012372:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012374:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012376:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8012378:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801237c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012380:	5c82      	ldrb	r2, [r0, r2]
 8012382:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012384:	5dc3      	ldrb	r3, [r0, r7]
 8012386:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012388:	9b00      	ldr	r3, [sp, #0]
 801238a:	4443      	add	r3, r8
			    & RANGE_MASK];
 801238c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012390:	5cc3      	ldrb	r3, [r0, r3]
 8012392:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012394:	9b00      	ldr	r3, [sp, #0]
 8012396:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 801239a:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801239e:	f810 3008 	ldrb.w	r3, [r0, r8]
 80123a2:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80123a4:	9b02      	ldr	r3, [sp, #8]
 80123a6:	442b      	add	r3, r5
			    & RANGE_MASK];
 80123a8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80123ac:	5cc3      	ldrb	r3, [r0, r3]
 80123ae:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80123b0:	9b02      	ldr	r3, [sp, #8]
 80123b2:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 80123b4:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80123b8:	5d43      	ldrb	r3, [r0, r5]
 80123ba:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80123bc:	9b01      	ldr	r3, [sp, #4]
 80123be:	4453      	add	r3, sl
			    & RANGE_MASK];
 80123c0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80123c4:	5cc3      	ldrb	r3, [r0, r3]
 80123c6:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80123c8:	9b01      	ldr	r3, [sp, #4]
 80123ca:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 80123ce:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80123d2:	f810 300a 	ldrb.w	r3, [r0, sl]
 80123d6:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 80123d8:	9b05      	ldr	r3, [sp, #20]
 80123da:	455b      	cmp	r3, fp
 80123dc:	f47f af4e 	bne.w	801227c <jpeg_idct_10x5+0xd8>
  }
}
 80123e0:	b02f      	add	sp, #188	; 0xbc
 80123e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e6:	bf00      	nop
 80123e8:	ffffba5c 	.word	0xffffba5c

080123ec <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80123ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80123f0:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80123f4:	b0a5      	sub	sp, #148	; 0x94
 80123f6:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80123f8:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80123fa:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80123fe:	f102 070e 	add.w	r7, r2, #14
 8012402:	3d04      	subs	r5, #4
  wsptr = workspace;
 8012404:	a804      	add	r0, sp, #16
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8012406:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801240a:	f641 0e7e 	movw	lr, #6270	; 0x187e
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801240e:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012412:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012414:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012418:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801241c:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801241e:	fb02 f404 	mul.w	r4, r2, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012422:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012424:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012428:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801242c:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8012430:	4966      	ldr	r1, [pc, #408]	; (80125cc <jpeg_idct_8x4+0x1e0>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8012432:	eb04 0902 	add.w	r9, r4, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8012436:	eba4 0402 	sub.w	r4, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801243a:	6a2a      	ldr	r2, [r5, #32]
 801243c:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012440:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8012442:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8012446:	eb0a 020b 	add.w	r2, sl, fp
 801244a:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801244e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8012452:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8012456:	fb01 220b 	mla	r2, r1, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801245a:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801245e:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 8012462:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8012466:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 801246a:	eb02 0984 	add.w	r9, r2, r4, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 801246e:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8012472:	ebc2 0284 	rsb	r2, r2, r4, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8012476:	f8c0 a05c 	str.w	sl, [r0, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 801247a:	f8c0 901c 	str.w	r9, [r0, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 801247e:	63c2      	str	r2, [r0, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012480:	d1c5      	bne.n	801240e <jpeg_idct_8x4+0x22>
 8012482:	f1a3 0804 	sub.w	r8, r3, #4

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8012486:	a904      	add	r1, sp, #16
 8012488:	330c      	adds	r3, #12
 801248a:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801248c:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012490:	f241 1051 	movw	r0, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8012494:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8012496:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8012498:	9302      	str	r3, [sp, #8]
 801249a:	189c      	adds	r4, r3, r2
    z3 = (INT32) wsptr[6];
 801249c:	f851 3c08 	ldr.w	r3, [r1, #-8]
    z2 = (INT32) wsptr[2];
 80124a0:	f851 2c18 	ldr.w	r2, [r1, #-24]
    z3 = (INT32) wsptr[4];
 80124a4:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80124a8:	eb02 0b03 	add.w	fp, r2, r3
    tmp1 = (INT32) wsptr[5];
 80124ac:	f851 ec0c 	ldr.w	lr, [r1, #-12]
    tmp3 = (INT32) wsptr[1];
 80124b0:	f851 9c1c 	ldr.w	r9, [r1, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80124b4:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80124b8:	f641 007e 	movw	r0, #6270	; 0x187e
    tmp0 = (INT32) wsptr[7];
 80124bc:	f851 7c04 	ldr.w	r7, [r1, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80124c0:	fb00 b202 	mla	r2, r0, r2, fp
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80124c4:	4841      	ldr	r0, [pc, #260]	; (80125cc <jpeg_idct_8x4+0x1e0>)
 80124c6:	fb00 bb03 	mla	fp, r0, r3, fp
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80124ca:	f851 3c20 	ldr.w	r3, [r1, #-32]
 80124ce:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 80124d0:	1958      	adds	r0, r3, r5
    tmp1 = (z2 - z3) << CONST_BITS;
 80124d2:	1b5b      	subs	r3, r3, r5
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80124d4:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 80124d8:	eb02 3640 	add.w	r6, r2, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 80124dc:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 80124e0:	9200      	str	r2, [sp, #0]
    tmp11 = tmp1 + tmp3;
 80124e2:	eb0b 3243 	add.w	r2, fp, r3, lsl #13
    tmp12 = tmp1 - tmp3;
 80124e6:	ebcb 3b43 	rsb	fp, fp, r3, lsl #13
    z2 = tmp0 + tmp2;
 80124ea:	f851 3c14 	ldr.w	r3, [r1, #-20]
    tmp11 = tmp1 + tmp3;
 80124ee:	9201      	str	r2, [sp, #4]
    z3 = tmp1 + tmp3;
 80124f0:	eb0e 0209 	add.w	r2, lr, r9
    z2 = tmp0 + tmp2;
 80124f4:	18f8      	adds	r0, r7, r3
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80124f6:	1883      	adds	r3, r0, r2
 80124f8:	436b      	muls	r3, r5
    z2 += z1;
 80124fa:	4d35      	ldr	r5, [pc, #212]	; (80125d0 <jpeg_idct_8x4+0x1e4>)
 80124fc:	fb05 3000 	mla	r0, r5, r0, r3
    z3 += z1;
 8012500:	4d34      	ldr	r5, [pc, #208]	; (80125d4 <jpeg_idct_8x4+0x1e8>)
 8012502:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8012506:	eb07 0209 	add.w	r2, r7, r9
 801250a:	4d33      	ldr	r5, [pc, #204]	; (80125d8 <jpeg_idct_8x4+0x1ec>)
 801250c:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 801250e:	f640 158e 	movw	r5, #2446	; 0x98e
 8012512:	eb00 0a02 	add.w	sl, r0, r2
    tmp3 += z1 + z3;
 8012516:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 8012518:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801251c:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp3 += z1 + z3;
 8012520:	f243 0a0b 	movw	sl, #12299	; 0x300b
 8012524:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012528:	eb0e 0905 	add.w	r9, lr, r5
 801252c:	4d2b      	ldr	r5, [pc, #172]	; (80125dc <jpeg_idct_8x4+0x1f0>)
    tmp1 += z1 + z3;
 801252e:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012532:	fb05 f909 	mul.w	r9, r5, r9
    tmp2 += z1 + z2;
 8012536:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp1 += z1 + z3;
 801253a:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 801253c:	4448      	add	r0, r9
 801253e:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 8012542:	fb0a 3a0e 	mla	sl, sl, lr, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012546:	eb06 0e02 	add.w	lr, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801254a:	1ab6      	subs	r6, r6, r2
    tmp2 += z1 + z2;
 801254c:	fb09 0005 	mla	r0, r9, r5, r0
			    & RANGE_MASK];
 8012550:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012554:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8012556:	9d02      	ldr	r5, [sp, #8]
			    & RANGE_MASK];
 8012558:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801255c:	f81c e00e 	ldrb.w	lr, [ip, lr]
 8012560:	f805 e003 	strb.w	lr, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8012564:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8012566:	f81c 2006 	ldrb.w	r2, [ip, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801256a:	eba3 0900 	sub.w	r9, r3, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801256e:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8012570:	181a      	adds	r2, r3, r0
			    & RANGE_MASK];
 8012572:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8012576:	ebab 030a 	sub.w	r3, fp, sl
			    & RANGE_MASK];
 801257a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801257e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8012582:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8012586:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8012588:	f81c 2009 	ldrb.w	r2, [ip, r9]
 801258c:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801258e:	eb0b 020a 	add.w	r2, fp, sl
			    & RANGE_MASK];
 8012592:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8012596:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801259a:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801259c:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80125a0:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80125a2:	9b00      	ldr	r3, [sp, #0]
 80125a4:	443b      	add	r3, r7
			    & RANGE_MASK];
 80125a6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80125aa:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80125ae:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80125b0:	9b00      	ldr	r3, [sp, #0]
 80125b2:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 80125b4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80125b8:	f81c 3007 	ldrb.w	r3, [ip, r7]
 80125bc:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 80125be:	9b03      	ldr	r3, [sp, #12]
 80125c0:	4543      	cmp	r3, r8
 80125c2:	f47f af63 	bne.w	801248c <jpeg_idct_8x4+0xa0>
  }
}
 80125c6:	b025      	add	sp, #148	; 0x94
 80125c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125cc:	ffffc4df 	.word	0xffffc4df
 80125d0:	ffffc13b 	.word	0xffffc13b
 80125d4:	fffff384 	.word	0xfffff384
 80125d8:	ffffe333 	.word	0xffffe333
 80125dc:	ffffadfd 	.word	0xffffadfd

080125e0 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80125e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125e4:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80125e6:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 80125ea:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80125ec:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80125f0:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80125f2:	3080      	adds	r0, #128	; 0x80
 80125f4:	f102 040a 	add.w	r4, r2, #10
 80125f8:	f1a1 0c04 	sub.w	ip, r1, #4
 80125fc:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80125fe:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8012602:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012606:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012608:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801260c:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801260e:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012612:	f9be 7020 	ldrsh.w	r7, [lr, #32]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8012616:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012618:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801261c:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012620:	f9be a010 	ldrsh.w	sl, [lr, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012624:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 <<= CONST_BITS;
 8012628:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801262c:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012630:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8012634:	fb09 f606 	mul.w	r6, r9, r6
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012638:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp10 = tmp0 + tmp12;
 801263c:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 8012640:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8012644:	fb08 fa0a 	mul.w	sl, r8, sl

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8012648:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801264c:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8012650:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8012654:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8012656:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801265a:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801265e:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8012662:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8012664:	d1d0      	bne.n	8012608 <jpeg_idct_6x3+0x28>
 8012666:	f1a3 0e04 	sub.w	lr, r3, #4
 801266a:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801266e:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8012672:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8012676:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8012678:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801267a:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 801267e:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8012680:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012684:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8012688:	fb00 f101 	mul.w	r1, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 801268c:	f852 4c10 	ldr.w	r4, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012690:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8012694:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8012698:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 801269c:	eb01 3543 	add.w	r5, r1, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 80126a0:	ebc1 3343 	rsb	r3, r1, r3, lsl #13
 80126a4:	eba3 0301 	sub.w	r3, r3, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80126a8:	f242 7131 	movw	r1, #10033	; 0x2731
 80126ac:	fb01 f104 	mul.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 80126b0:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp10 = tmp1 + tmp0;
 80126b4:	eb05 0601 	add.w	r6, r5, r1
    tmp12 = tmp1 - tmp0;
 80126b8:	eba5 0101 	sub.w	r1, r5, r1
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80126bc:	eb04 0508 	add.w	r5, r4, r8
 80126c0:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80126c4:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 80126c8:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80126cc:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80126d0:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80126d4:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80126d6:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80126da:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80126de:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80126e2:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80126e6:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 80126ea:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80126ee:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80126f2:	5d04      	ldrb	r4, [r0, r4]
 80126f4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80126f6:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80126fa:	9801      	ldr	r0, [sp, #4]
 80126fc:	5d84      	ldrb	r4, [r0, r6]
 80126fe:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8012700:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8012704:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8012708:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 801270c:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8012710:	5d04      	ldrb	r4, [r0, r4]
 8012712:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8012714:	f810 3008 	ldrb.w	r3, [r0, r8]
 8012718:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801271a:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801271e:	eba1 0505 	sub.w	r5, r1, r5
			    & RANGE_MASK];
 8012722:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8012726:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801272a:	5cc3      	ldrb	r3, [r0, r3]
 801272c:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801272e:	5d43      	ldrb	r3, [r0, r5]
 8012730:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 8012732:	d19c      	bne.n	801266e <jpeg_idct_6x3+0x8e>
  }
}
 8012734:	b015      	add	sp, #84	; 0x54
 8012736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801273c <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801273c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012740:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012742:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8012746:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8012748:	1e96      	subs	r6, r2, #2
 801274a:	f10d 0c08 	add.w	ip, sp, #8
 801274e:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8012750:	3c04      	subs	r4, #4
 8012752:	f102 0e06 	add.w	lr, r2, #6
 8012756:	4660      	mov	r0, ip
{
 8012758:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801275a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 801275e:	f854 1f04 	ldr.w	r1, [r4, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8012762:	45b6      	cmp	lr, r6
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012764:	fb01 f202 	mul.w	r2, r1, r2

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012768:	6a27      	ldr	r7, [r4, #32]
 801276a:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 801276e:	fb07 f101 	mul.w	r1, r7, r1

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 8012772:	eb02 0701 	add.w	r7, r2, r1
    wsptr[4*1] = tmp10 - tmp0;
 8012776:	eba2 0201 	sub.w	r2, r2, r1
    wsptr[4*0] = tmp10 + tmp0;
 801277a:	f84c 7b04 	str.w	r7, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 801277e:	f8cc 200c 	str.w	r2, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8012782:	d1ea      	bne.n	801275a <jpeg_idct_4x2+0x1e>
 8012784:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8012786:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801278a:	f641 097e 	movw	r9, #6270	; 0x187e
 801278e:	f1a3 0c04 	sub.w	ip, r3, #4
    outptr = output_buf[ctr] + output_col;
 8012792:	46e0      	mov	r8, ip
 8012794:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012796:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 801279a:	3010      	adds	r0, #16
    tmp0 = wsptr[0] + (ONE << 2);
 801279c:	f850 4c10 	ldr.w	r4, [r0, #-16]
    outptr = output_buf[ctr] + output_col;
 80127a0:	eb0e 0602 	add.w	r6, lr, r2
    z3 = wsptr[3];
 80127a4:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = wsptr[2];
 80127a8:	f850 2c08 	ldr.w	r2, [r0, #-8]
    tmp0 = wsptr[0] + (ONE << 2);
 80127ac:	3404      	adds	r4, #4
    z2 = wsptr[1];
 80127ae:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80127b2:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80127b6:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80127b8:	19ca      	adds	r2, r1, r7
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80127ba:	4b13      	ldr	r3, [pc, #76]	; (8012808 <jpeg_idct_4x2+0xcc>)
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80127bc:	fb0a f202 	mul.w	r2, sl, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80127c0:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80127c4:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80127c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80127ca:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80127ce:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 80127d2:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 80127d6:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80127da:	5def      	ldrb	r7, [r5, r7]
 80127dc:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80127e0:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 80127e2:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80127e4:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80127e6:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80127ea:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 80127ee:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 80127f0:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 80127f4:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80127f8:	5c69      	ldrb	r1, [r5, r1]
 80127fa:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80127fc:	5caa      	ldrb	r2, [r5, r2]
 80127fe:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8012800:	d1c7      	bne.n	8012792 <jpeg_idct_4x2+0x56>
  }
}
 8012802:	b00b      	add	sp, #44	; 0x2c
 8012804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012808:	ffffc4df 	.word	0xffffc4df

0801280c <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801280c:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801280e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8012812:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 8012814:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012816:	3080      	adds	r0, #128	; 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8012818:	f9b2 3000 	ldrsh.w	r3, [r2]
 801281c:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801281e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8012822:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8012824:	437b      	muls	r3, r7
{
 8012826:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 8012828:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801282a:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 801282c:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 801282e:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8012830:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8012832:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8012836:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 801283a:	5c41      	ldrb	r1, [r0, r1]
 801283c:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 801283e:	5cc3      	ldrb	r3, [r0, r3]
 8012840:	7073      	strb	r3, [r6, #1]
}
 8012842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012844 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012848:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 801284c:	f1a2 0802 	sub.w	r8, r2, #2
 8012850:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012852:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012856:	3380      	adds	r3, #128	; 0x80
 8012858:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801285a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 801285c:	f1a3 0904 	sub.w	r9, r3, #4
 8012860:	f102 030e 	add.w	r3, r2, #14
 8012864:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8012866:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012868:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801286c:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012870:	f859 1f04 	ldr.w	r1, [r9, #4]!
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012874:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012878:	f9b8 0040 	ldrsh.w	r0, [r8, #64]	; 0x40
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801287c:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012880:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012882:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012886:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012888:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 801288a:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801288c:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012894:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012896:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012898:	f9b8 4020 	ldrsh.w	r4, [r8, #32]
    tmp10 = tmp0 + tmp1;
 801289c:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 801289e:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 80128a0:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 80128a2:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80128a6:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80128aa:	4ad3      	ldr	r2, [pc, #844]	; (8012bf8 <jpeg_idct_8x16+0x3b4>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80128ac:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80128b0:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	; 0x60
 80128b4:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 80128b8:	4361      	muls	r1, r4
    z3 = z1 - z2;
 80128ba:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80128be:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80128c2:	f642 4563 	movw	r5, #11363	; 0x2c63
 80128c6:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80128c8:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80128cc:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80128d0:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80128d4:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80128d8:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80128dc:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 80128e0:	eb07 020c 	add.w	r2, r7, ip
 80128e4:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 80128e6:	eba7 020c 	sub.w	r2, r7, ip
 80128ea:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 80128ec:	1972      	adds	r2, r6, r5
 80128ee:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 80128f0:	1b72      	subs	r2, r6, r5

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80128f2:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 80128f6:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 80128f8:	eb0b 0204 	add.w	r2, fp, r4
 80128fc:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 80128fe:	ebab 0204 	sub.w	r2, fp, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012902:	f9b8 4070 	ldrsh.w	r4, [r8, #112]	; 0x70
    tmp25 = tmp13 - tmp2;
 8012906:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012908:	1842      	adds	r2, r0, r1
 801290a:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 801290c:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801290e:	f9b8 1010 	ldrsh.w	r1, [r8, #16]
    tmp24 = tmp11 - tmp3;
 8012912:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012914:	f8d9 2020 	ldr.w	r2, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012918:	f9b8 0030 	ldrsh.w	r0, [r8, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801291c:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801291e:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 8012922:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012924:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 8012928:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801292a:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801292e:	188e      	adds	r6, r1, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012930:	eba1 0b02 	sub.w	fp, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012934:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012936:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 801293a:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801293c:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801293e:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012942:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012946:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801294a:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801294e:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012952:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012956:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 801295a:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801295e:	f241 5455 	movw	r4, #5461	; 0x1555
 8012962:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012964:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012968:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801296a:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 801296e:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012970:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012974:	4ca1      	ldr	r4, [pc, #644]	; (8012bfc <jpeg_idct_8x16+0x3b8>)
 8012976:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 801297a:	4fa1      	ldr	r7, [pc, #644]	; (8012c00 <jpeg_idct_8x16+0x3bc>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 801297c:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 801297e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012980:	4464      	add	r4, ip
 8012982:	445c      	add	r4, fp
 8012984:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012988:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801298a:	4f9e      	ldr	r7, [pc, #632]	; (8012c04 <jpeg_idct_8x16+0x3c0>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 801298c:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801298e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8012992:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012994:	f240 214d 	movw	r1, #589	; 0x24d
 8012998:	fb01 4102 	mla	r1, r1, r2, r4
 801299c:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801299e:	499a      	ldr	r1, [pc, #616]	; (8012c08 <jpeg_idct_8x16+0x3c4>)
 80129a0:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80129a4:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80129a6:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80129a8:	f642 5a09 	movw	sl, #11529	; 0x2d09
 80129ac:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80129b0:	fb07 1a05 	mla	sl, r7, r5, r1
 80129b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80129b6:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80129b8:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 80129bc:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 80129c0:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80129c2:	4992      	ldr	r1, [pc, #584]	; (8012c0c <jpeg_idct_8x16+0x3c8>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80129c4:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80129c6:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80129ca:	4351      	muls	r1, r2
    tmp1  += z1;
 80129cc:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80129ce:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80129d2:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80129d6:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80129d8:	498d      	ldr	r1, [pc, #564]	; (8012c10 <jpeg_idct_8x16+0x3cc>)
 80129da:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80129dc:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 80129e0:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80129e2:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80129e6:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80129e8:	eb05 0b00 	add.w	fp, r5, r0
 80129ec:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80129ee:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80129f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80129f2:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80129f6:	f640 5123 	movw	r1, #3363	; 0xd23
 80129fa:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80129fc:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 80129fe:	445c      	add	r4, fp
    tmp3  += z2;
 8012a00:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012a02:	4429      	add	r1, r5
    tmp10 += z2;
 8012a04:	4484      	add	ip, r0
    tmp11 += z2;
 8012a06:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012a08:	12c9      	asrs	r1, r1, #11
 8012a0a:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012a0e:	9901      	ldr	r1, [sp, #4]
 8012a10:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012a12:	9903      	ldr	r1, [sp, #12]
 8012a14:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012a16:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012a18:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012a1a:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012a1e:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012a20:	9903      	ldr	r1, [sp, #12]
 8012a22:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012a24:	9905      	ldr	r1, [sp, #20]
 8012a26:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012a28:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012a2a:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012a2c:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012a30:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012a32:	9905      	ldr	r1, [sp, #20]
 8012a34:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012a36:	9907      	ldr	r1, [sp, #28]
 8012a38:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012a3a:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012a3c:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012a3e:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012a42:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8012a44:	9907      	ldr	r1, [sp, #28]
 8012a46:	eba1 0e0e 	sub.w	lr, r1, lr
 8012a4a:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8012a4e:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8012a52:	9908      	ldr	r1, [sp, #32]
 8012a54:	4461      	add	r1, ip
 8012a56:	12c9      	asrs	r1, r1, #11
 8012a58:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8012a5a:	9908      	ldr	r1, [sp, #32]
 8012a5c:	eba1 0c0c 	sub.w	ip, r1, ip
 8012a60:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8012a64:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8012a68:	9906      	ldr	r1, [sp, #24]
 8012a6a:	4401      	add	r1, r0
 8012a6c:	12c9      	asrs	r1, r1, #11
 8012a6e:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012a72:	9906      	ldr	r1, [sp, #24]
 8012a74:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012a76:	9904      	ldr	r1, [sp, #16]
 8012a78:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012a7a:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012a7c:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012a7e:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012a82:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8012a86:	9904      	ldr	r1, [sp, #16]
 8012a88:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8012a8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8012a8c:	12d2      	asrs	r2, r2, #11
 8012a8e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8012a92:	9a02      	ldr	r2, [sp, #8]
 8012a94:	440a      	add	r2, r1
 8012a96:	12d2      	asrs	r2, r2, #11
 8012a98:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012a9c:	9a02      	ldr	r2, [sp, #8]
 8012a9e:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012aa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012aa2:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012aa4:	4542      	cmp	r2, r8
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012aa6:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012aaa:	f47f aedd 	bne.w	8012868 <jpeg_idct_8x16+0x24>
 8012aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8012ab0:	a80e      	add	r0, sp, #56	; 0x38
 8012ab2:	f1a3 0904 	sub.w	r9, r3, #4
 8012ab6:	333c      	adds	r3, #60	; 0x3c
 8012ab8:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012aba:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012abe:	f241 1451 	movw	r4, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8012ac2:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8012ac4:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8012ac6:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 8012aca:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 8012acc:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 8012ad0:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012ad2:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 8012ad4:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp1 = (INT32) wsptr[5];
 8012ad8:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012adc:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012ade:	f641 047e 	movw	r4, #6270	; 0x187e
    tmp2 = (INT32) wsptr[3];
 8012ae2:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012ae6:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8012aea:	4c4a      	ldr	r4, [pc, #296]	; (8012c14 <jpeg_idct_8x16+0x3d0>)
    tmp3 = (INT32) wsptr[1];
 8012aec:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8012af0:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012af4:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp0 = (INT32) wsptr[7];
 8012af8:	f850 cc04 	ldr.w	ip, [r0, #-4]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012afc:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8012afe:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8012b00:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 8012b02:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8012b06:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 8012b0a:	eb0c 040e 	add.w	r4, ip, lr
    tmp11 = tmp1 + tmp3;
 8012b0e:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8012b12:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 8012b14:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 8012b18:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 8012b1c:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8012b1e:	f242 53a1 	movw	r3, #9633	; 0x25a1
 8012b22:	1862      	adds	r2, r4, r1
 8012b24:	435a      	muls	r2, r3
    z2 += z1;
 8012b26:	4b3c      	ldr	r3, [pc, #240]	; (8012c18 <jpeg_idct_8x16+0x3d4>)
 8012b28:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 8012b2c:	4b3b      	ldr	r3, [pc, #236]	; (8012c1c <jpeg_idct_8x16+0x3d8>)
 8012b2e:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8012b32:	eb0c 010a 	add.w	r1, ip, sl
 8012b36:	4b3a      	ldr	r3, [pc, #232]	; (8012c20 <jpeg_idct_8x16+0x3dc>)
 8012b38:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 8012b3a:	f640 138e 	movw	r3, #2446	; 0x98e
 8012b3e:	eb04 0b01 	add.w	fp, r4, r1
    tmp3 += z1 + z3;
 8012b42:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 8012b44:	fb03 bc0c 	mla	ip, r3, ip, fp
    tmp3 += z1 + z3;
 8012b48:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012b4c:	4b35      	ldr	r3, [pc, #212]	; (8012c24 <jpeg_idct_8x16+0x3e0>)
    tmp3 += z1 + z3;
 8012b4e:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012b52:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8012b56:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012b5a:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012b5e:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 8012b60:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 8012b62:	4454      	add	r4, sl
 8012b64:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8012b68:	fb0b 2b08 	mla	fp, fp, r8, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012b6c:	eb07 0801 	add.w	r8, r7, r1
    tmp2 += z1 + z2;
 8012b70:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012b74:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
 8012b76:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8012b7a:	1a7f      	subs	r7, r7, r1
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8012b7c:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012b80:	f813 e008 	ldrb.w	lr, [r3, r8]
			    & RANGE_MASK];
 8012b84:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012b88:	9b03      	ldr	r3, [sp, #12]
			    & RANGE_MASK];
 8012b8a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012b8e:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8012b92:	9b00      	ldr	r3, [sp, #0]
 8012b94:	5dd9      	ldrb	r1, [r3, r7]
 8012b96:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8012b98:	1931      	adds	r1, r6, r4
			    & RANGE_MASK];
 8012b9a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8012b9e:	5c59      	ldrb	r1, [r3, r1]
 8012ba0:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8012ba2:	f813 100a 	ldrb.w	r1, [r3, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8012ba6:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8012ba8:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8012baa:	eb03 010b 	add.w	r1, r3, fp
 8012bae:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8012bb0:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8012bb4:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8012bb6:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8012bb8:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8012bba:	eba3 020b 	sub.w	r2, r3, fp
 8012bbe:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8012bc0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8012bc4:	5c9b      	ldrb	r3, [r3, r2]
 8012bc6:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8012bc8:	9b01      	ldr	r3, [sp, #4]
 8012bca:	9a00      	ldr	r2, [sp, #0]
 8012bcc:	4463      	add	r3, ip
			    & RANGE_MASK];
 8012bce:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8012bd2:	5cd3      	ldrb	r3, [r2, r3]
 8012bd4:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8012bd6:	9b01      	ldr	r3, [sp, #4]
 8012bd8:	eba3 0c0c 	sub.w	ip, r3, ip
			    & RANGE_MASK];
 8012bdc:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8012be0:	f812 300c 	ldrb.w	r3, [r2, ip]
 8012be4:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 8012be6:	9b04      	ldr	r3, [sp, #16]
 8012be8:	454b      	cmp	r3, r9
 8012bea:	f47f af66 	bne.w	8012aba <jpeg_idct_8x16+0x276>
  }
}
 8012bee:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8012bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bf6:	bf00      	nop
 8012bf8:	ffffecc2 	.word	0xffffecc2
 8012bfc:	ffffb6d6 	.word	0xffffb6d6
 8012c00:	ffffc542 	.word	0xffffc542
 8012c04:	ffffe77a 	.word	0xffffe77a
 8012c08:	ffffdbfa 	.word	0xffffdbfa
 8012c0c:	ffffeaab 	.word	0xffffeaab
 8012c10:	ffffd817 	.word	0xffffd817
 8012c14:	ffffc4df 	.word	0xffffc4df
 8012c18:	ffffc13b 	.word	0xffffc13b
 8012c1c:	fffff384 	.word	0xfffff384
 8012c20:	ffffe333 	.word	0xffffe333
 8012c24:	ffffadfd 	.word	0xffffadfd

08012c28 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c2c:	b0ef      	sub	sp, #444	; 0x1bc
 8012c2e:	f1a2 0e02 	sub.w	lr, r2, #2
 8012c32:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012c34:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012c38:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8012c3a:	3380      	adds	r3, #128	; 0x80
 8012c3c:	3804      	subs	r0, #4
 8012c3e:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8012c40:	f102 030c 	add.w	r3, r2, #12
 8012c44:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 8012c46:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012c48:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012c4c:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012c50:	f850 1f04 	ldr.w	r1, [r0, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012c54:	f641 0b14 	movw	fp, #6164	; 0x1814
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012c58:	f9be 4040 	ldrsh.w	r4, [lr, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8012c5c:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012c5e:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012c60:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8012c64:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012c66:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 8012c6a:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012c6c:	fb01 f604 	mul.w	r6, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012c70:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012c74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012c78:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012c7c:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8012c80:	1997      	adds	r7, r2, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012c82:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012c84:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8012c86:	eb02 050c 	add.w	r5, r2, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012c8a:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012c8e:	1b36      	subs	r6, r6, r4
    tmp12 = z1 - z4;
 8012c90:	eba2 0904 	sub.w	r9, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012c94:	f9be 4020 	ldrsh.w	r4, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012c98:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012c9c:	f9be 6060 	ldrsh.w	r6, [lr, #96]	; 0x60
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012ca0:	49b7      	ldr	r1, [pc, #732]	; (8012f80 <jpeg_idct_7x14+0x358>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012ca2:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012ca4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012ca6:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012ca8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8012cac:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012cae:	1916      	adds	r6, r2, r4
 8012cb0:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012cb4:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 8012cb8:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012cbc:	fb01 6604 	mla	r6, r1, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8012cc0:	f601 21e5 	addw	r1, r1, #2789	; 0xae5
 8012cc4:	434c      	muls	r4, r1
    tmp20 = tmp10 + tmp13;
 8012cc6:	eb07 010c 	add.w	r1, r7, ip
 8012cca:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 8012ccc:	eba7 010c 	sub.w	r1, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012cd0:	fb08 4202 	mla	r2, r8, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012cd4:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp26 = tmp10 - tmp13;
 8012cd8:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 8012cda:	19a9      	adds	r1, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012cdc:	f9be 7030 	ldrsh.w	r7, [lr, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8012ce0:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8012ce2:	1ba9      	subs	r1, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012ce4:	f9be 6050 	ldrsh.w	r6, [lr, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 8012ce8:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 8012cea:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 8012cee:	eba9 0202 	sub.w	r2, r9, r2
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8012cf2:	f640 69f2 	movw	r9, #3826	; 0xef2
    tmp22 = tmp12 + tmp15;
 8012cf6:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 8012cf8:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012cfa:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012cfc:	f9be 1070 	ldrsh.w	r1, [lr, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012d00:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012d02:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8012d04:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012d06:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8012d0a:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012d0c:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012d10:	eb04 0a07 	add.w	sl, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012d14:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012d16:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 8012d1a:	eb04 0c06 	add.w	ip, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012d1e:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012d22:	f242 6152 	movw	r1, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012d26:	fb0b fb0c 	mul.w	fp, fp, ip
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012d2a:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012d2e:	4995      	ldr	r1, [pc, #596]	; (8012f84 <jpeg_idct_7x14+0x35c>)
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8012d30:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012d34:	eb0a 0805 	add.w	r8, sl, r5
 8012d38:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 8012d3c:	fb01 8804 	mla	r8, r1, r4, r8
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8012d40:	f201 211b 	addw	r1, r1, #539	; 0x21b
 8012d44:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 8012d48:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8012d4a:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 8012d4e:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8012d50:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8012d54:	4c8c      	ldr	r4, [pc, #560]	; (8012f88 <jpeg_idct_7x14+0x360>)
    tmp16 += tmp15;
 8012d56:	4449      	add	r1, r9
 8012d58:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8012d5a:	19b9      	adds	r1, r7, r6
 8012d5c:	fb0c f101 	mul.w	r1, ip, r1
 8012d60:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8012d64:	fb04 1c07 	mla	ip, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8012d68:	4c88      	ldr	r4, [pc, #544]	; (8012f8c <jpeg_idct_7x14+0x364>)
 8012d6a:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8012d6e:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012d70:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012d74:	4c86      	ldr	r4, [pc, #536]	; (8012f90 <jpeg_idct_7x14+0x368>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8012d76:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012d78:	1bf5      	subs	r5, r6, r7
 8012d7a:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012d7e:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 8012d82:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 8012d86:	9c07      	ldr	r4, [sp, #28]
 8012d88:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012d8a:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012d8c:	f241 5b99 	movw	fp, #5529	; 0x1599

    tmp13 = (z1 - z3) << PASS1_BITS;
 8012d90:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012d92:	9a01      	ldr	r2, [sp, #4]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012d94:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012d98:	4442      	add	r2, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 8012d9a:	00b6      	lsls	r6, r6, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012d9c:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012d9e:	12d2      	asrs	r2, r2, #11
 8012da0:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012da4:	9a01      	ldr	r2, [sp, #4]
 8012da6:	eba2 0208 	sub.w	r2, r2, r8
 8012daa:	12d2      	asrs	r2, r2, #11
 8012dac:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012db0:	9a03      	ldr	r2, [sp, #12]
 8012db2:	4452      	add	r2, sl
 8012db4:	12d2      	asrs	r2, r2, #11
 8012db6:	619a      	str	r2, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012db8:	9a03      	ldr	r2, [sp, #12]
 8012dba:	eba2 0a0a 	sub.w	sl, r2, sl
 8012dbe:	ea4f 22ea 	mov.w	r2, sl, asr #11
 8012dc2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012dc6:	9a05      	ldr	r2, [sp, #20]
 8012dc8:	440a      	add	r2, r1
 8012dca:	12d2      	asrs	r2, r2, #11
 8012dcc:	635a      	str	r2, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012dce:	9a05      	ldr	r2, [sp, #20]
 8012dd0:	1a51      	subs	r1, r2, r1
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8012dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012dd4:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012dd8:	12c9      	asrs	r1, r1, #11
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8012dda:	651a      	str	r2, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8012ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012dde:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8012de2:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012de6:	9a06      	ldr	r2, [sp, #24]
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012de8:	9908      	ldr	r1, [sp, #32]
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012dea:	4462      	add	r2, ip
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8012dec:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012df0:	12d2      	asrs	r2, r2, #11
 8012df2:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012df4:	9a06      	ldr	r2, [sp, #24]
 8012df6:	eba2 0c0c 	sub.w	ip, r2, ip
 8012dfa:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8012dfe:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012e02:	9a04      	ldr	r2, [sp, #16]
 8012e04:	442a      	add	r2, r5
 8012e06:	12d2      	asrs	r2, r2, #11
 8012e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012e0c:	9a04      	ldr	r2, [sp, #16]
 8012e0e:	1b55      	subs	r5, r2, r5
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012e10:	9a02      	ldr	r2, [sp, #8]
 8012e12:	440a      	add	r2, r1
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012e14:	12ed      	asrs	r5, r5, #11
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012e16:	12d2      	asrs	r2, r2, #11
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012e18:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012e1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012e20:	9a02      	ldr	r2, [sp, #8]
 8012e22:	1a52      	subs	r2, r2, r1
 8012e24:	12d2      	asrs	r2, r2, #11
 8012e26:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8012e2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e2c:	4572      	cmp	r2, lr
 8012e2e:	f47f af0b 	bne.w	8012c48 <jpeg_idct_7x14+0x20>
 8012e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 8012e34:	ac0c      	add	r4, sp, #48	; 0x30
 8012e36:	f1a3 0904 	sub.w	r9, r3, #4
 8012e3a:	3334      	adds	r3, #52	; 0x34
 8012e3c:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012e3e:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8012e42:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 8012e44:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    z3 = (INT32) wsptr[6];
 8012e46:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 8012e4a:	189e      	adds	r6, r3, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012e4c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 8012e50:	9303      	str	r3, [sp, #12]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012e52:	1b51      	subs	r1, r2, r5
 8012e54:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8012e58:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012e5c:	fb02 fe01 	mul.w	lr, r2, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8012e60:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012e64:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp10 = z1 + z3;
 8012e68:	eb03 0805 	add.w	r8, r3, r5
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8012e6c:	eba3 0c02 	sub.w	ip, r3, r2
 8012e70:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012e74:	3710      	adds	r7, #16
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012e76:	4947      	ldr	r1, [pc, #284]	; (8012f94 <jpeg_idct_7x14+0x36c>)
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8012e78:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012e7c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8012e80:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012e84:	eb0e 000c 	add.w	r0, lr, ip
 8012e88:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8012e8c:	fb01 0002 	mla	r0, r1, r2, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012e90:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012e94:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012e98:	fb02 f208 	mul.w	r2, r2, r8
 8012e9c:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012ea0:	fb01 2105 	mla	r1, r1, r5, r2
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8012ea4:	4d3c      	ldr	r5, [pc, #240]	; (8012f98 <jpeg_idct_7x14+0x370>)
 8012ea6:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 8012eaa:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012eae:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 8012eb0:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8012eb4:	4463      	add	r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8012eb6:	eb02 050a 	add.w	r5, r2, sl
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012eba:	9101      	str	r1, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8012ebc:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8012ebe:	f641 53ef 	movw	r3, #7663	; 0x1def
 8012ec2:	fb03 fb05 	mul.w	fp, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8012ec6:	eba2 050a 	sub.w	r5, r2, sl
 8012eca:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012ece:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012ed0:	44f2      	add	sl, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8012ed2:	435d      	muls	r5, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012ed4:	4b31      	ldr	r3, [pc, #196]	; (8012f9c <jpeg_idct_7x14+0x374>)
    tmp10 = tmp11 - tmp12;
 8012ed6:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 8012eda:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012edc:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012ee0:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012ee4:	9b00      	ldr	r3, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012ee6:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012eea:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8012eee:	4455      	add	r5, sl
    tmp10 += z2;
 8012ef0:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012ef2:	fb0b 220e 	mla	r2, fp, lr, r2
 8012ef6:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012ef8:	eb01 020c 	add.w	r2, r1, ip
 8012efc:	9978      	ldr	r1, [sp, #480]	; 0x1e0
			    & RANGE_MASK];
 8012efe:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012f02:	5c9a      	ldrb	r2, [r3, r2]
 8012f04:	9b03      	ldr	r3, [sp, #12]
 8012f06:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012f08:	9b01      	ldr	r3, [sp, #4]
 8012f0a:	eba3 0c0c 	sub.w	ip, r3, ip
 8012f0e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8012f10:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012f14:	f813 200c 	ldrb.w	r2, [r3, ip]
 8012f18:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012f1a:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012f1c:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 8012f1e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8012f22:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012f26:	5c9a      	ldrb	r2, [r3, r2]
 8012f28:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012f2a:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012f2c:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012f2e:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012f30:	eb03 020a 	add.w	r2, r3, sl
 8012f34:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8012f36:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012f3a:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012f3c:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012f3e:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012f40:	eba3 0a0a 	sub.w	sl, r3, sl
 8012f44:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8012f46:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012f4a:	f813 300a 	ldrb.w	r3, [r3, sl]
 8012f4e:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 8012f50:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8012f54:	eba3 0808 	sub.w	r8, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8012f58:	f642 5341 	movw	r3, #11585	; 0x2d41
 8012f5c:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8012f60:	9b00      	ldr	r3, [sp, #0]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8012f62:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8012f66:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8012f6a:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012f6e:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 8012f70:	9b04      	ldr	r3, [sp, #16]
 8012f72:	454b      	cmp	r3, r9
 8012f74:	f47f af63 	bne.w	8012e3e <jpeg_idct_7x14+0x216>
  }
}
 8012f78:	b06f      	add	sp, #444	; 0x1bc
 8012f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f7e:	bf00      	nop
 8012f80:	ffffc8fc 	.word	0xffffc8fc
 8012f84:	ffffdbf0 	.word	0xffffdbf0
 8012f88:	fffff26e 	.word	0xfffff26e
 8012f8c:	ffffb409 	.word	0xffffb409
 8012f90:	ffffc9e6 	.word	0xffffc9e6
 8012f94:	ffffc515 	.word	0xffffc515
 8012f98:	ffffb0f1 	.word	0xffffb0f1
 8012f9c:	ffffd3e1 	.word	0xffffd3e1

08012fa0 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa4:	b0d3      	sub	sp, #332	; 0x14c
 8012fa6:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8012fa8:	f1a2 0a02 	sub.w	sl, r2, #2
 8012fac:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012fae:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012fb2:	3380      	adds	r3, #128	; 0x80
 8012fb4:	9301      	str	r3, [sp, #4]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8012fb6:	1f0b      	subs	r3, r1, #4
 8012fb8:	9300      	str	r3, [sp, #0]
 8012fba:	f102 030a 	add.w	r3, r2, #10
 8012fbe:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8012fc0:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012fc2:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8012fc4:	f641 398d 	movw	r9, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012fc8:	f93a 7f02 	ldrsh.w	r7, [sl, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8012fcc:	f640 0b5b 	movw	fp, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012fd0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8012fd4:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012fd6:	f9ba 0040 	ldrsh.w	r0, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012fda:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012fdc:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012fe0:	f9ba 5020 	ldrsh.w	r5, [sl, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012fe4:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8012fe6:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012fea:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 8012fec:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8012fee:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012ff0:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8012ff2:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012ff6:	f9ba c060 	ldrsh.w	ip, [sl, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012ffa:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012ffc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013000:	f9ba e030 	ldrsh.w	lr, [sl, #48]	; 0x30
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013004:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013008:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 801300a:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 801300c:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801300e:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 8013012:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 8013016:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 8013018:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 801301c:	eb07 010c 	add.w	r1, r7, ip
 8013020:	9102      	str	r1, [sp, #8]
    tmp24 = z3 - tmp12;
 8013022:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 8013026:	eb00 0c04 	add.w	ip, r0, r4
    tmp12 = z4 - z1 - z2;
 801302a:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 801302e:	9103      	str	r1, [sp, #12]
    tmp12 = z4 - z1 - z2;
 8013030:	1b04      	subs	r4, r0, r4
    tmp25 = tmp10 - tmp12;
 8013032:	eba6 010c 	sub.w	r1, r6, ip
    tmp20 = tmp10 + tmp12;
 8013036:	eb06 070c 	add.w	r7, r6, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801303a:	f9ba c010 	ldrsh.w	ip, [sl, #16]
    tmp25 = tmp10 - tmp12;
 801303e:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 8013040:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 8013042:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013044:	f9ba 5050 	ldrsh.w	r5, [sl, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013048:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 801304c:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801304e:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 8013050:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013052:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013056:	6a12      	ldr	r2, [r2, #32]
 8013058:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801305c:	9a00      	ldr	r2, [sp, #0]
 801305e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8013060:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013064:	9a00      	ldr	r2, [sp, #0]
 8013066:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801306a:	fb01 f40e 	mul.w	r4, r1, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801306e:	4977      	ldr	r1, [pc, #476]	; (801324c <jpeg_idct_6x12+0x2ac>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013070:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013072:	9a00      	ldr	r2, [sp, #0]
 8013074:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 8013078:	eb0c 0605 	add.w	r6, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801307c:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801307e:	fb01 f00e 	mul.w	r0, r1, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013082:	4973      	ldr	r1, [pc, #460]	; (8013250 <jpeg_idct_6x12+0x2b0>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013084:	eb02 0806 	add.w	r8, r2, r6
 8013088:	fb09 f808 	mul.w	r8, r9, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801308c:	fb0b 8b06 	mla	fp, fp, r6, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013090:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8013094:	eb04 090b 	add.w	r9, r4, fp
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013098:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801309c:	fb06 990c 	mla	r9, r6, ip, r9
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80130a0:	18ae      	adds	r6, r5, r2
 80130a2:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80130a4:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80130a6:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80130a8:	496a      	ldr	r1, [pc, #424]	; (8013254 <jpeg_idct_6x12+0x2b4>)
 80130aa:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80130ae:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 80130b0:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80130b4:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80130b8:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80130ba:	f243 2bc6 	movw	fp, #12998	; 0x32c6
 80130be:	fb0b 4402 	mla	r4, fp, r2, r4
 80130c2:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80130c4:	4964      	ldr	r1, [pc, #400]	; (8013258 <jpeg_idct_6x12+0x2b8>)
 80130c6:	fb01 000c 	mla	r0, r1, ip, r0
 80130ca:	4964      	ldr	r1, [pc, #400]	; (801325c <jpeg_idct_6x12+0x2bc>)
 80130cc:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 80130d0:	ebac 0202 	sub.w	r2, ip, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80130d4:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80130d8:	f641 0c7e 	movw	ip, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80130dc:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80130de:	eb02 0805 	add.w	r8, r2, r5
 80130e2:	fb0e f808 	mul.w	r8, lr, r8
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80130e6:	fb01 8e05 	mla	lr, r1, r5, r8

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80130ea:	eb07 0509 	add.w	r5, r7, r9
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80130ee:	eba7 0709 	sub.w	r7, r7, r9
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80130f2:	fb0c 8202 	mla	r2, ip, r2, r8
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80130f6:	12ed      	asrs	r5, r5, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80130f8:	12ff      	asrs	r7, r7, #11
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80130fa:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80130fe:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013102:	9902      	ldr	r1, [sp, #8]
 8013104:	188d      	adds	r5, r1, r2
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013106:	1a8a      	subs	r2, r1, r2
 8013108:	12d2      	asrs	r2, r2, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801310a:	12ed      	asrs	r5, r5, #11
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801310c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013110:	9a05      	ldr	r2, [sp, #20]
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013112:	615d      	str	r5, [r3, #20]
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013114:	4432      	add	r2, r6
 8013116:	12d2      	asrs	r2, r2, #11
 8013118:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801311a:	9a05      	ldr	r2, [sp, #20]
 801311c:	1b96      	subs	r6, r2, r6
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801311e:	9a06      	ldr	r2, [sp, #24]
 8013120:	4422      	add	r2, r4
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013122:	12f6      	asrs	r6, r6, #11
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8013124:	12d2      	asrs	r2, r2, #11
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013126:	f8c3 60d4 	str.w	r6, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801312a:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801312c:	9a06      	ldr	r2, [sp, #24]
 801312e:	1b14      	subs	r4, r2, r4
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013130:	9a03      	ldr	r2, [sp, #12]
 8013132:	4472      	add	r2, lr
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013134:	12e4      	asrs	r4, r4, #11
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013136:	12d2      	asrs	r2, r2, #11
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013138:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801313c:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801313e:	9a03      	ldr	r2, [sp, #12]
 8013140:	eba2 050e 	sub.w	r5, r2, lr
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013144:	9a04      	ldr	r2, [sp, #16]
 8013146:	4402      	add	r2, r0
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8013148:	12ed      	asrs	r5, r5, #11
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801314a:	12d2      	asrs	r2, r2, #11
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801314c:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8013150:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013152:	9a04      	ldr	r2, [sp, #16]
 8013154:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013156:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8013158:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801315a:	4552      	cmp	r2, sl
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801315c:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013160:	f47f af2f 	bne.w	8012fc2 <jpeg_idct_6x12+0x22>
 8013164:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 8013166:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013168:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 801316c:	f1a3 0c04 	sub.w	ip, r3, #4
 8013170:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 8013174:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013178:	f640 37b6 	movw	r7, #2998	; 0xbb6
    outptr = output_buf[ctr] + output_col;
 801317c:	9b5c      	ldr	r3, [sp, #368]	; 0x170
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 801317e:	3118      	adds	r1, #24
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013180:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 12; ctr++) {
 8013184:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 8013186:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801318a:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801318e:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8013192:	f851 0c10 	ldr.w	r0, [r1, #-16]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013196:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 801319a:	f851 ec04 	ldr.w	lr, [r1, #-4]
    tmp11 = tmp10 + tmp20;
 801319e:	eb02 3443 	add.w	r4, r2, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 80131a2:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 80131a6:	eba3 0302 	sub.w	r3, r3, r2
 80131aa:	9300      	str	r3, [sp, #0]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80131ac:	f242 7331 	movw	r3, #10033	; 0x2731
 80131b0:	fb03 f200 	mul.w	r2, r3, r0
    z1 = (INT32) wsptr[1];
 80131b4:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80131b8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp20 = tmp11 + tmp10;
 80131bc:	eb04 0502 	add.w	r5, r4, r2
    tmp22 = tmp11 - tmp10;
 80131c0:	eba4 0202 	sub.w	r2, r4, r2
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80131c4:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80131c8:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80131cc:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80131d0:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 80131d4:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 80131d6:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80131da:	9b01      	ldr	r3, [sp, #4]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80131dc:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 80131e0:	eba0 0e0e 	sub.w	lr, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80131e4:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80131e8:	eb05 0007 	add.w	r0, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80131ec:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 80131f0:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80131f4:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80131f8:	5c18      	ldrb	r0, [r3, r0]
 80131fa:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 80131fc:	f809 0003 	strb.w	r0, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013200:	9b01      	ldr	r3, [sp, #4]
 8013202:	5d58      	ldrb	r0, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013204:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013206:	7170      	strb	r0, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013208:	eb03 304e 	add.w	r0, r3, lr, lsl #13
 801320c:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801320e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013212:	5c18      	ldrb	r0, [r3, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013214:	9b00      	ldr	r3, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013216:	7070      	strb	r0, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013218:	eba3 3e4e 	sub.w	lr, r3, lr, lsl #13
 801321c:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801321e:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 8013220:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013224:	f813 300e 	ldrb.w	r3, [r3, lr]
 8013228:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801322a:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801322e:	eba2 0404 	sub.w	r4, r2, r4
			    & RANGE_MASK];
 8013232:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013236:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801323a:	5cc3      	ldrb	r3, [r0, r3]
 801323c:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801323e:	5d03      	ldrb	r3, [r0, r4]
 8013240:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 8013242:	d197      	bne.n	8013174 <jpeg_idct_6x12+0x1d4>
  }
}
 8013244:	b053      	add	sp, #332	; 0x14c
 8013246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801324a:	bf00      	nop
 801324c:	ffffeeaf 	.word	0xffffeeaf
 8013250:	ffffde8b 	.word	0xffffde8b
 8013254:	ffffd0b0 	.word	0xffffd0b0
 8013258:	ffffea5c 	.word	0xffffea5c
 801325c:	ffffc08c 	.word	0xffffc08c

08013260 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013264:	b0b9      	sub	sp, #228	; 0xe4
 8013266:	1e94      	subs	r4, r2, #2
 8013268:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801326a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801326e:	6d48      	ldr	r0, [r1, #84]	; 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013270:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013272:	3380      	adds	r3, #128	; 0x80
 8013274:	3804      	subs	r0, #4
 8013276:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8013278:	f102 0308 	add.w	r3, r2, #8
 801327c:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801327e:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8013282:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013284:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013288:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801328c:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801328e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8013292:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013294:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8013298:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801329a:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801329e:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80132a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80132a6:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80132a8:	f641 229a 	movw	r2, #6810	; 0x1a9a
    tmp10 = z3 + z1;
 80132ac:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 80132ae:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80132b2:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80132b4:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80132b8:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80132bc:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80132c0:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80132c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80132c4:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80132c6:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 80132ca:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80132cc:	19f3      	adds	r3, r6, r7
 80132ce:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80132d0:	f241 0271 	movw	r2, #4209	; 0x1071
 80132d4:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80132d8:	4a6d      	ldr	r2, [pc, #436]	; (8013490 <jpeg_idct_5x10+0x230>)
 80132da:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 80132de:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 80132e0:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80132e4:	f9b4 5030 	ldrsh.w	r5, [r4, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 80132e8:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 80132ec:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 80132f0:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 80132f2:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80132f4:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80132f8:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80132fa:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80132fe:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013300:	6e03      	ldr	r3, [r0, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013302:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013306:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013308:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 801330c:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013310:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 8013314:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8013316:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp11 = z2 + z4;
 801331a:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 801331e:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013320:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8013324:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013328:	f642 46b3 	movw	r6, #11443	; 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801332c:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801332e:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013332:	f240 7614 	movw	r6, #1812	; 0x714
    z4 = z5 + tmp12;
 8013336:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801333a:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801333c:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013340:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013342:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8013346:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801334a:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801334c:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801334e:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8013352:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013356:	f642 0353 	movw	r3, #10323	; 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801335a:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801335e:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013362:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8013364:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013368:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801336a:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801336e:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013372:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013376:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801337a:	1b5b      	subs	r3, r3, r5
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801337c:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801337e:	444d      	add	r5, r9
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013380:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013384:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8013388:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801338c:	18fa      	adds	r2, r7, r3
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801338e:	1aff      	subs	r7, r7, r3
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8013390:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013392:	12d2      	asrs	r2, r2, #11
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8013394:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013398:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801339a:	610a      	str	r2, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 801339c:	624b      	str	r3, [r1, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 801339e:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80133a0:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
    wsptr[5*7] = (int) (tmp22 - tmp12);
 80133a4:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 80133a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80133ac:	9b02      	ldr	r3, [sp, #8]
 80133ae:	442b      	add	r3, r5
 80133b0:	12db      	asrs	r3, r3, #11
 80133b2:	638b      	str	r3, [r1, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80133b4:	9b02      	ldr	r3, [sp, #8]
 80133b6:	1b5d      	subs	r5, r3, r5
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80133b8:	9b01      	ldr	r3, [sp, #4]
 80133ba:	4453      	add	r3, sl
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80133bc:	12ed      	asrs	r5, r5, #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80133be:	12db      	asrs	r3, r3, #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80133c0:	674d      	str	r5, [r1, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80133c2:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80133c4:	9b01      	ldr	r3, [sp, #4]
 80133c6:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80133ca:	9b05      	ldr	r3, [sp, #20]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80133cc:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80133d0:	42a3      	cmp	r3, r4
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80133d2:	660e      	str	r6, [r1, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80133d4:	f47f af53 	bne.w	801327e <jpeg_idct_5x10+0x1e>
 80133d8:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 80133da:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80133dc:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80133e0:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 80133e4:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80133e8:	f641 289a 	movw	r8, #6810	; 0x1a9a
 80133ec:	3324      	adds	r3, #36	; 0x24
 80133ee:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 80133f0:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 80133f4:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 80133f6:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 80133f8:	f851 0c04 	ldr.w	r0, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 80133fc:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8013400:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013404:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013408:	181a      	adds	r2, r3, r0
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801340a:	1a1b      	subs	r3, r3, r0
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801340c:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 801340e:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013412:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 8013416:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801341a:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 801341e:	eb03 3047 	add.w	r0, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013422:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8013424:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 8013428:	1814      	adds	r4, r2, r0
    tmp11 = z3 - z1;
 801342a:	1a82      	subs	r2, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801342c:	eb05 000b 	add.w	r0, r5, fp
 8013430:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8013434:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8013438:	4b15      	ldr	r3, [pc, #84]	; (8013490 <jpeg_idct_5x10+0x230>)
 801343a:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801343e:	eb04 0b05 	add.w	fp, r4, r5
 8013442:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8013444:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 8013446:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 801344a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801344e:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8013452:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8013454:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8013458:	9b00      	ldr	r3, [sp, #0]
 801345a:	5d1c      	ldrb	r4, [r3, r4]
 801345c:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801345e:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8013460:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 8013462:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8013466:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801346a:	5d1c      	ldrb	r4, [r3, r4]
 801346c:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 801346e:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 8013470:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8013472:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 8013474:	009b      	lsls	r3, r3, #2
 8013476:	ebc3 3747 	rsb	r7, r3, r7, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 801347a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 801347c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8013480:	5ddb      	ldrb	r3, [r3, r7]
 8013482:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 8013484:	9b02      	ldr	r3, [sp, #8]
 8013486:	4563      	cmp	r3, ip
 8013488:	d1b2      	bne.n	80133f0 <jpeg_idct_5x10+0x190>
  }
}
 801348a:	b039      	add	sp, #228	; 0xe4
 801348c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013490:	ffffba5c 	.word	0xffffba5c

08013494 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013498:	b0a7      	sub	sp, #156	; 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801349a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 801349c:	3a02      	subs	r2, #2
{
 801349e:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 80134a0:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80134a2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80134a6:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  for (ctr = 4; ctr > 0; ctr--) {
 80134aa:	f105 0310 	add.w	r3, r5, #16
 80134ae:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80134b0:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80134b4:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80134b6:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80134ba:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 80134be:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80134c2:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 80134c6:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 80134ca:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80134ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80134d2:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 80134d6:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80134d8:	ea4a 030b 	orr.w	r3, sl, fp
 80134dc:	ea4e 0303 	orr.w	r3, lr, r3
 80134e0:	433b      	orrs	r3, r7
 80134e2:	ea48 0303 	orr.w	r3, r8, r3
 80134e6:	4333      	orrs	r3, r6
 80134e8:	ea59 0303 	orrs.w	r3, r9, r3
 80134ec:	d154      	bne.n	8013598 <jpeg_idct_4x8+0x104>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80134ee:	00a4      	lsls	r4, r4, #2
      wsptr[4*0] = dcval;
 80134f0:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[4*1] = dcval;
 80134f4:	60cc      	str	r4, [r1, #12]
      wsptr[4*2] = dcval;
 80134f6:	61cc      	str	r4, [r1, #28]
      wsptr[4*3] = dcval;
 80134f8:	62cc      	str	r4, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 80134fa:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 80134fc:	64cc      	str	r4, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 80134fe:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 8013500:	66cc      	str	r4, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8013502:	9b05      	ldr	r3, [sp, #20]
 8013504:	42ab      	cmp	r3, r5
 8013506:	d1d3      	bne.n	80134b0 <jpeg_idct_4x8+0x1c>
 8013508:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 801350a:	ac06      	add	r4, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801350c:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013510:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8013514:	1f1d      	subs	r5, r3, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013516:	f8df b184 	ldr.w	fp, [pc, #388]	; 801369c <jpeg_idct_4x8+0x208>
 801351a:	331c      	adds	r3, #28
 801351c:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 801351e:	f855 7f04 	ldr.w	r7, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8013522:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8013524:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013526:	f854 0c10 	ldr.w	r0, [r4, #-16]
    outptr = output_buf[ctr] + output_col;
 801352a:	18be      	adds	r6, r7, r2
    z3 = (INT32) wsptr[3];
 801352c:	f854 ac04 	ldr.w	sl, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8013530:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013534:	3010      	adds	r0, #16
    z2 = (INT32) wsptr[1];
 8013536:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801353a:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801353e:	1a80      	subs	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013540:	eb01 020a 	add.w	r2, r1, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013544:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013546:	fb08 f202 	mul.w	r2, r8, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801354a:	fb0e 2101 	mla	r1, lr, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801354e:	fb0b 220a 	mla	r2, fp, sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013552:	eb01 3a49 	add.w	sl, r1, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013556:	ebc1 3149 	rsb	r1, r1, r9, lsl #13
			    & RANGE_MASK];
 801355a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 801355e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013562:	f81c a00a 	ldrb.w	sl, [ip, sl]
 8013566:	f807 a003 	strb.w	sl, [r7, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801356a:	f81c 1001 	ldrb.w	r1, [ip, r1]
  for (ctr = 0; ctr < 8; ctr++) {
 801356e:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013570:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013572:	eb02 3140 	add.w	r1, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013576:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
  for (ctr = 0; ctr < 8; ctr++) {
 801357a:	42ab      	cmp	r3, r5
			    & RANGE_MASK];
 801357c:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8013580:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013584:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8013588:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801358a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801358e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 8013590:	d1c5      	bne.n	801351e <jpeg_idct_4x8+0x8a>
  }
}
 8013592:	b027      	add	sp, #156	; 0x9c
 8013594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013598:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 801359a:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801359e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 80135a2:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80135a4:	f241 1651 	movw	r6, #4433	; 0x1151
 80135a8:	eb0b 0300 	add.w	r3, fp, r0
 80135ac:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80135ae:	f641 067e 	movw	r6, #6270	; 0x187e
 80135b2:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80135b6:	4e39      	ldr	r6, [pc, #228]	; (801369c <jpeg_idct_4x8+0x208>)
 80135b8:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 80135bc:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80135be:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80135c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80135c4:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 80135c6:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 80135ca:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp10 = tmp0 + tmp2;
 80135ce:	eb0b 0004 	add.w	r0, fp, r4
    tmp11 = tmp1 + tmp3;
 80135d2:	18f7      	adds	r7, r6, r3
    tmp12 = tmp1 - tmp3;
 80135d4:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 80135d6:	9001      	str	r0, [sp, #4]
    tmp13 = tmp0 - tmp2;
 80135d8:	eba4 000b 	sub.w	r0, r4, fp
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80135dc:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 80135de:	9002      	str	r0, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80135e0:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80135e4:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 80135e8:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80135ea:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80135ee:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80135f2:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 80135f6:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80135fa:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80135fc:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8013600:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8013604:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013608:	1930      	adds	r0, r6, r4
 801360a:	4358      	muls	r0, r3
    z2 += z1;
 801360c:	4b24      	ldr	r3, [pc, #144]	; (80136a0 <jpeg_idct_4x8+0x20c>)
 801360e:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8013612:	4b24      	ldr	r3, [pc, #144]	; (80136a4 <jpeg_idct_4x8+0x210>)
 8013614:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013618:	eb09 040a 	add.w	r4, r9, sl
 801361c:	4b22      	ldr	r3, [pc, #136]	; (80136a8 <jpeg_idct_4x8+0x214>)
 801361e:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8013620:	f640 138e 	movw	r3, #2446	; 0x98e
 8013624:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8013628:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 801362a:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 801362e:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013632:	4b1e      	ldr	r3, [pc, #120]	; (80136ac <jpeg_idct_4x8+0x218>)
    tmp3 += z1 + z3;
 8013634:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013638:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 801363c:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013640:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013644:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 8013646:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8013648:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 801364a:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 801364e:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8013652:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013656:	191e      	adds	r6, r3, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013658:	1b1c      	subs	r4, r3, r4
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801365a:	9b03      	ldr	r3, [sp, #12]
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801365c:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801365e:	12e4      	asrs	r4, r4, #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013660:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013664:	66cc      	str	r4, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8013666:	eb07 040a 	add.w	r4, r7, sl
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801366a:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801366e:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8013670:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8013674:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013676:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8013678:	1a18      	subs	r0, r3, r0
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801367a:	9b02      	ldr	r3, [sp, #8]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801367c:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801367e:	65cf      	str	r7, [r1, #92]	; 0x5c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8013680:	444b      	add	r3, r9
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8013682:	12c0      	asrs	r0, r0, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013684:	61cc      	str	r4, [r1, #28]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8013686:	12db      	asrs	r3, r3, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8013688:	64c8      	str	r0, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801368a:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 801368c:	9b02      	ldr	r3, [sp, #8]
 801368e:	eba3 0909 	sub.w	r9, r3, r9
 8013692:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8013696:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 8013698:	e733      	b.n	8013502 <jpeg_idct_4x8+0x6e>
 801369a:	bf00      	nop
 801369c:	ffffc4df 	.word	0xffffc4df
 80136a0:	ffffc13b 	.word	0xffffc13b
 80136a4:	fffff384 	.word	0xfffff384
 80136a8:	ffffe333 	.word	0xffffe333
 80136ac:	ffffadfd 	.word	0xffffadfd

080136b0 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80136b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80136b4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80136b8:	b095      	sub	sp, #84	; 0x54
 80136ba:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80136bc:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80136be:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80136c2:	3204      	adds	r2, #4
 80136c4:	3c04      	subs	r4, #4
  wsptr = workspace;
 80136c6:	ae02      	add	r6, sp, #8
{
 80136c8:	9300      	str	r3, [sp, #0]
 80136ca:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80136cc:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80136d0:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80136d4:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80136d8:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80136da:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80136de:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80136e0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80136e4:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80136e8:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 80136ea:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80136ec:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80136f0:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80136f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80136f8:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80136fc:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 80136fe:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8013700:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013704:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013706:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013708:	f242 7731 	movw	r7, #10033	; 0x2731
 801370c:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801370e:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
    tmp10 = tmp1 + tmp0;
 8013712:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8013716:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013718:	6a22      	ldr	r2, [r4, #32]
 801371a:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801371c:	6e27      	ldr	r7, [r4, #96]	; 0x60
 801371e:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013722:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8013726:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801372a:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801372e:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013732:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013736:	435f      	muls	r7, r3
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8013738:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801373a:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801373e:	42ab      	cmp	r3, r5
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013740:	eb07 3b4b 	add.w	fp, r7, fp, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8013744:	eba2 0709 	sub.w	r7, r2, r9

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013748:	eb0c 020a 	add.w	r2, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801374c:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8013750:	eba7 0708 	sub.w	r7, r7, r8
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013754:	ea4f 22e2 	mov.w	r2, r2, asr #11
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8013758:	ea4f 0887 	mov.w	r8, r7, lsl #2
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801375c:	f846 2c04 	str.w	r2, [r6, #-4]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013760:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8013764:	63b2      	str	r2, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8013766:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 801376a:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[3*1] = (int) (tmp11 + tmp1);
 801376e:	60b2      	str	r2, [r6, #8]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8013770:	eb00 020b 	add.w	r2, r0, fp
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8013774:	eba0 0b0b 	sub.w	fp, r0, fp
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8013778:	62f1      	str	r1, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801377a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801377e:	ea4f 20eb 	mov.w	r0, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8013782:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8013784:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8013786:	d1a1      	bne.n	80136cc <jpeg_idct_3x6+0x1c>
 8013788:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 801378a:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801378c:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013790:	f242 7b31 	movw	fp, #10033	; 0x2731
 8013794:	1f1d      	subs	r5, r3, #4
 8013796:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 8013798:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 801379c:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 801379e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80137a0:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 80137a4:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 80137a6:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80137aa:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80137ae:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80137b2:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80137b6:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80137ba:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80137bc:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 80137c0:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 80137c4:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80137c8:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80137cc:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 80137d0:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 80137d4:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 80137d8:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 80137dc:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80137e0:	f81e a00a 	ldrb.w	sl, [lr, sl]
 80137e4:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80137e8:	f81e 4008 	ldrb.w	r4, [lr, r8]
 80137ec:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 80137ee:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80137f2:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 80137f4:	d1d0      	bne.n	8013798 <jpeg_idct_3x6+0xe8>
  }
}
 80137f6:	b015      	add	sp, #84	; 0x54
 80137f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137fc <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80137fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013800:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 8013804:	b08b      	sub	sp, #44	; 0x2c
 8013806:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8013808:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801380a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801380e:	ad02      	add	r5, sp, #8
 8013810:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013812:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013816:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801381a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801381c:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8013820:	46b4      	mov	ip, r6
 8013822:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8013826:	3504      	adds	r5, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013828:	4f29      	ldr	r7, [pc, #164]	; (80138d0 <jpeg_idct_2x4+0xd4>)
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 801382a:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801382c:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013830:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 8013834:	6c21      	ldr	r1, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013836:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801383a:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801383e:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8013842:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8013846:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801384a:	6a21      	ldr	r1, [r4, #32]
 801384c:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013850:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8013852:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013856:	eb0a 010b 	add.w	r1, sl, fp
 801385a:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801385e:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013862:	fb07 110b 	mla	r1, r7, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 8013866:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 801386a:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 801386e:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 8013872:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 8013876:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 801387a:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 801387e:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 8013882:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8013884:	d1ca      	bne.n	801381c <jpeg_idct_2x4+0x20>
 8013886:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8013888:	a902      	add	r1, sp, #8
 801388a:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801388c:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 8013890:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 8013892:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 8013894:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 8013898:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 801389a:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 801389e:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 80138a2:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 80138a4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 80138a8:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 80138ac:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 80138b0:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 80138b4:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 80138b8:	5d3c      	ldrb	r4, [r7, r4]
 80138ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80138bc:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 80138be:	9c01      	ldr	r4, [sp, #4]
 80138c0:	5ca2      	ldrb	r2, [r4, r2]
 80138c2:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 80138c6:	d1e1      	bne.n	801388c <jpeg_idct_2x4+0x90>
  }
}
 80138c8:	b00b      	add	sp, #44	; 0x2c
 80138ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ce:	bf00      	nop
 80138d0:	ffffc4df 	.word	0xffffc4df

080138d4 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80138d4:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80138d6:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80138d8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80138dc:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80138de:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80138e2:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80138e4:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80138e6:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80138ea:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 80138ec:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80138ee:	3080      	adds	r0, #128	; 0x80
{
 80138f0:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 80138f2:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 80138f4:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 80138f6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 80138fa:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 80138fe:	5d06      	ldrb	r6, [r0, r4]
 8013900:	681c      	ldr	r4, [r3, #0]
 8013902:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8013904:	5c42      	ldrb	r2, [r0, r1]
 8013906:	685b      	ldr	r3, [r3, #4]
 8013908:	555a      	strb	r2, [r3, r5]
}
 801390a:	bd70      	pop	{r4, r5, r6, pc}

0801390c <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 801390c:	6803      	ldr	r3, [r0, #0]
 801390e:	2238      	movs	r2, #56	; 0x38
 8013910:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	4718      	bx	r3

08013918 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8013918:	688b      	ldr	r3, [r1, #8]
{
 801391a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 801391e:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 8013922:	698b      	ldr	r3, [r1, #24]
{
 8013924:	b085      	sub	sp, #20
 8013926:	4681      	mov	r9, r0
 8013928:	460c      	mov	r4, r1
 801392a:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 801392c:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8013930:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8013932:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8013936:	6922      	ldr	r2, [r4, #16]
 8013938:	42b2      	cmp	r2, r6
 801393a:	dc02      	bgt.n	8013942 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 801393c:	b005      	add	sp, #20
 801393e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8013942:	1b92      	subs	r2, r2, r6
 8013944:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8013946:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8013948:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801394a:	6863      	ldr	r3, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 801394c:	eb06 0500 	add.w	r5, r6, r0
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8013950:	bfa8      	it	ge
 8013952:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8013954:	69e1      	ldr	r1, [r4, #28]
 8013956:	1b49      	subs	r1, r1, r5
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8013958:	1b5d      	subs	r5, r3, r5
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801395a:	428a      	cmp	r2, r1
 801395c:	bfa8      	it	ge
 801395e:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8013960:	42aa      	cmp	r2, r5
 8013962:	bfa8      	it	ge
 8013964:	462a      	movge	r2, r5
    if (rows <= 0)		/* this chunk might be past end of file! */
 8013966:	2a00      	cmp	r2, #0
 8013968:	dde8      	ble.n	801393c <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 801396a:	fb02 f308 	mul.w	r3, r2, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801396e:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 8013970:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8013972:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 8013976:	f1ba 0f00 	cmp.w	sl, #0
 801397a:	d00a      	beq.n	8013992 <do_barray_io+0x7a>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801397c:	9300      	str	r3, [sp, #0]
 801397e:	4659      	mov	r1, fp
 8013980:	463b      	mov	r3, r7
 8013982:	4648      	mov	r0, r9
 8013984:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8013986:	47a8      	blx	r5
    file_offset += byte_count;
 8013988:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801398a:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 801398c:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801398e:	4416      	add	r6, r2
 8013990:	e7d1      	b.n	8013936 <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8013992:	9b03      	ldr	r3, [sp, #12]
 8013994:	4659      	mov	r1, fp
 8013996:	4648      	mov	r0, r9
 8013998:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801399a:	9300      	str	r3, [sp, #0]
 801399c:	463b      	mov	r3, r7
 801399e:	e7f2      	b.n	8013986 <do_barray_io+0x6e>

080139a0 <alloc_small>:
{
 80139a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80139a4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 80139a8:	4606      	mov	r6, r0
 80139aa:	460d      	mov	r5, r1
 80139ac:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80139ae:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80139b0:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 80139b2:	d902      	bls.n	80139ba <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 80139b4:	2101      	movs	r1, #1
 80139b6:	f7ff ffa9 	bl	801390c <out_of_memory>
  if (odd_bytes > 0)
 80139ba:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 80139be:	bf1c      	itt	ne
 80139c0:	3408      	addne	r4, #8
 80139c2:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80139c4:	2d01      	cmp	r5, #1
 80139c6:	d906      	bls.n	80139d6 <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80139c8:	6833      	ldr	r3, [r6, #0]
 80139ca:	220f      	movs	r2, #15
 80139cc:	4630      	mov	r0, r6
 80139ce:	e9c3 2505 	strd	r2, r5, [r3, #20]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 80139d6:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 80139da:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 80139de:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 80139e2:	b9e8      	cbnz	r0, 8013a20 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 80139e4:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 80139e8:	f1ba 0f00 	cmp.w	sl, #0
 80139ec:	d11e      	bne.n	8013a2c <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 80139ee:	4b1d      	ldr	r3, [pc, #116]	; (8013a64 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 80139f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 80139f4:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 80139f8:	429d      	cmp	r5, r3
 80139fa:	bf28      	it	cs
 80139fc:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 80139fe:	eb05 0b09 	add.w	fp, r5, r9
 8013a02:	4630      	mov	r0, r6
 8013a04:	4659      	mov	r1, fp
 8013a06:	f000 fbcf 	bl	80141a8 <jpeg_get_small>
      if (hdr_ptr != NULL)
 8013a0a:	b988      	cbnz	r0, 8013a30 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8013a0c:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 8013a0e:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8013a12:	d803      	bhi.n	8013a1c <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8013a14:	2102      	movs	r1, #2
 8013a16:	4630      	mov	r0, r6
 8013a18:	f7ff ff78 	bl	801390c <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 8013a1c:	465d      	mov	r5, fp
 8013a1e:	e7ee      	b.n	80139fe <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8013a20:	6883      	ldr	r3, [r0, #8]
 8013a22:	42a3      	cmp	r3, r4
 8013a24:	d211      	bcs.n	8013a4a <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 8013a26:	4682      	mov	sl, r0
 8013a28:	6800      	ldr	r0, [r0, #0]
 8013a2a:	e7da      	b.n	80139e2 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 8013a2c:	4b0e      	ldr	r3, [pc, #56]	; (8013a68 <alloc_small+0xc8>)
 8013a2e:	e7df      	b.n	80139f0 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 8013a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8013a32:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 8013a34:	445b      	add	r3, fp
 8013a36:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 8013a38:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8013a3a:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 8013a3c:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8013a40:	f1ba 0f00 	cmp.w	sl, #0
 8013a44:	d10b      	bne.n	8013a5e <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 8013a46:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8013a4a:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8013a4c:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8013a4e:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8013a50:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 8013a52:	6882      	ldr	r2, [r0, #8]
 8013a54:	1b12      	subs	r2, r2, r4
 8013a56:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8013a58:	4418      	add	r0, r3
}
 8013a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 8013a5e:	f8ca 0000 	str.w	r0, [sl]
 8013a62:	e7f2      	b.n	8013a4a <alloc_small+0xaa>
 8013a64:	080fb2dc 	.word	0x080fb2dc
 8013a68:	080fb2d4 	.word	0x080fb2d4

08013a6c <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 8013a6c:	2901      	cmp	r1, #1
{
 8013a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a72:	4604      	mov	r4, r0
 8013a74:	460d      	mov	r5, r1
 8013a76:	4616      	mov	r6, r2
 8013a78:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013a7a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8013a7e:	d005      	beq.n	8013a8c <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8013a80:	6803      	ldr	r3, [r0, #0]
 8013a82:	220f      	movs	r2, #15
 8013a84:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8013a8c:	223c      	movs	r2, #60	; 0x3c
 8013a8e:	4629      	mov	r1, r5
 8013a90:	4620      	mov	r0, r4
 8013a92:	f7ff ff85 	bl	80139a0 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8013a96:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8013a98:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8013a9a:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8013a9c:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8013a9e:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 8013aa2:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8013aa4:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 8013aa6:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8013aaa:	9a07      	ldr	r2, [sp, #28]
 8013aac:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 8013aae:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 8013ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013ab6 <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 8013ab6:	2901      	cmp	r1, #1
{
 8013ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013abc:	4604      	mov	r4, r0
 8013abe:	460d      	mov	r5, r1
 8013ac0:	4616      	mov	r6, r2
 8013ac2:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013ac4:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8013ac8:	d005      	beq.n	8013ad6 <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8013aca:	6803      	ldr	r3, [r0, #0]
 8013acc:	220f      	movs	r2, #15
 8013ace:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8013ad6:	223c      	movs	r2, #60	; 0x3c
 8013ad8:	4629      	mov	r1, r5
 8013ada:	4620      	mov	r0, r4
 8013adc:	f7ff ff60 	bl	80139a0 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8013ae0:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8013ae2:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8013ae4:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8013ae6:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8013ae8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 8013aec:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8013aee:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 8013af0:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8013af4:	9a07      	ldr	r2, [sp, #28]
 8013af6:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 8013af8:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 8013afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013b00 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8013b00:	2901      	cmp	r1, #1
{
 8013b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b06:	4606      	mov	r6, r0
 8013b08:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013b0a:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8013b0c:	d910      	bls.n	8013b30 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8013b0e:	6803      	ldr	r3, [r0, #0]
 8013b10:	220f      	movs	r2, #15
 8013b12:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 8013b1a:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 8013b1e:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 8013b20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 8013b22:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 8013b24:	bb0b      	cbnz	r3, 8013b6a <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 8013b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 8013b28:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 8013b2a:	bb69      	cbnz	r1, 8013b88 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 8013b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 8013b30:	d1f3      	bne.n	8013b1a <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013b32:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8013b34:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013b36:	b924      	cbnz	r4, 8013b42 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013b38:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 8013b3a:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013b3c:	b95f      	cbnz	r7, 8013b56 <free_pool+0x56>
    mem->virt_barray_list = NULL;
 8013b3e:	64af      	str	r7, [r5, #72]	; 0x48
 8013b40:	e7eb      	b.n	8013b1a <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 8013b42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013b44:	b12b      	cbz	r3, 8013b52 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8013b46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013b48:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013b4c:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8013b4e:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8013b50:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013b52:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8013b54:	e7ef      	b.n	8013b36 <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 8013b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b58:	b12b      	cbz	r3, 8013b66 <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8013b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b5c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8013b60:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8013b62:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8013b64:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013b66:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 8013b68:	e7e8      	b.n	8013b3c <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 8013b6a:	e9d3 8700 	ldrd	r8, r7, [r3]
 8013b6e:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8013b70:	4619      	mov	r1, r3
 8013b72:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8013b74:	4417      	add	r7, r2
 8013b76:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8013b78:	463a      	mov	r2, r7
 8013b7a:	f000 fb1e 	bl	80141ba <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 8013b7e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8013b80:	1bdb      	subs	r3, r3, r7
 8013b82:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8013b84:	4643      	mov	r3, r8
 8013b86:	e7cd      	b.n	8013b24 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8013b88:	688a      	ldr	r2, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8013b8a:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 8013b8c:	e9d1 7400 	ldrd	r7, r4, [r1]
 8013b90:	4414      	add	r4, r2
 8013b92:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8013b94:	4622      	mov	r2, r4
 8013b96:	f000 fb0a 	bl	80141ae <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 8013b9a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8013b9c:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 8013b9e:	1b1b      	subs	r3, r3, r4
 8013ba0:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8013ba2:	e7c2      	b.n	8013b2a <free_pool+0x2a>

08013ba4 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8013ba4:	b510      	push	{r4, lr}
 8013ba6:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 8013ba8:	2101      	movs	r1, #1
 8013baa:	f7ff ffa9 	bl	8013b00 <free_pool>
 8013bae:	2100      	movs	r1, #0
 8013bb0:	4620      	mov	r0, r4
 8013bb2:	f7ff ffa5 	bl	8013b00 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	6861      	ldr	r1, [r4, #4]
 8013bba:	2254      	movs	r2, #84	; 0x54
 8013bbc:	f000 faf7 	bl	80141ae <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8013bc0:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8013bc2:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8013bc4:	6063      	str	r3, [r4, #4]
}
 8013bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8013bca:	f000 bb02 	b.w	80141d2 <jpeg_mem_term>

08013bce <access_virt_barray>:
{
 8013bce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 8013bd2:	18d7      	adds	r7, r2, r3
{
 8013bd4:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8013bd6:	684a      	ldr	r2, [r1, #4]
{
 8013bd8:	460c      	mov	r4, r1
 8013bda:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8013bde:	42ba      	cmp	r2, r7
 8013be0:	d304      	bcc.n	8013bec <access_virt_barray+0x1e>
 8013be2:	68ca      	ldr	r2, [r1, #12]
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d301      	bcc.n	8013bec <access_virt_barray+0x1e>
 8013be8:	680b      	ldr	r3, [r1, #0]
 8013bea:	b933      	cbnz	r3, 8013bfa <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8013bec:	6803      	ldr	r3, [r0, #0]
 8013bee:	2217      	movs	r2, #23
 8013bf0:	9001      	str	r0, [sp, #4]
 8013bf2:	615a      	str	r2, [r3, #20]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	4798      	blx	r3
 8013bf8:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 8013bfa:	69a3      	ldr	r3, [r4, #24]
 8013bfc:	42ab      	cmp	r3, r5
 8013bfe:	d803      	bhi.n	8013c08 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8013c00:	6922      	ldr	r2, [r4, #16]
 8013c02:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8013c04:	42bb      	cmp	r3, r7
 8013c06:	d221      	bcs.n	8013c4c <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 8013c08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013c0a:	b933      	cbnz	r3, 8013c1a <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8013c0c:	6803      	ldr	r3, [r0, #0]
 8013c0e:	2247      	movs	r2, #71	; 0x47
 8013c10:	9001      	str	r0, [sp, #4]
 8013c12:	615a      	str	r2, [r3, #20]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	4798      	blx	r3
 8013c18:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 8013c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c1c:	b13b      	cbz	r3, 8013c2e <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 8013c1e:	2201      	movs	r2, #1
 8013c20:	4621      	mov	r1, r4
 8013c22:	9001      	str	r0, [sp, #4]
 8013c24:	f7ff fe78 	bl	8013918 <do_barray_io>
      ptr->dirty = FALSE;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	9801      	ldr	r0, [sp, #4]
 8013c2c:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8013c2e:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8013c30:	2200      	movs	r2, #0
 8013c32:	4621      	mov	r1, r4
 8013c34:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 8013c36:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8013c38:	bf29      	itett	cs
 8013c3a:	6923      	ldrcs	r3, [r4, #16]
 8013c3c:	462b      	movcc	r3, r5
 8013c3e:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8013c40:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8013c44:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8013c46:	f7ff fe67 	bl	8013918 <do_barray_io>
 8013c4a:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 8013c4c:	69e6      	ldr	r6, [r4, #28]
 8013c4e:	42be      	cmp	r6, r7
 8013c50:	d21c      	bcs.n	8013c8c <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 8013c52:	42ae      	cmp	r6, r5
 8013c54:	d20c      	bcs.n	8013c70 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 8013c56:	f1b8 0f00 	cmp.w	r8, #0
 8013c5a:	d01b      	beq.n	8013c94 <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8013c5c:	6803      	ldr	r3, [r0, #0]
 8013c5e:	2217      	movs	r2, #23
 8013c60:	9001      	str	r0, [sp, #4]
 8013c62:	462e      	mov	r6, r5
 8013c64:	615a      	str	r2, [r3, #20]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	4798      	blx	r3
    if (writable)
 8013c6a:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 8013c6c:	61e7      	str	r7, [r4, #28]
 8013c6e:	e002      	b.n	8013c76 <access_virt_barray+0xa8>
    if (writable)
 8013c70:	f1b8 0f00 	cmp.w	r8, #0
 8013c74:	d1fa      	bne.n	8013c6c <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 8013c76:	6a22      	ldr	r2, [r4, #32]
 8013c78:	b1b2      	cbz	r2, 8013ca8 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 8013c7a:	68a2      	ldr	r2, [r4, #8]
 8013c7c:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8013c80:	69a2      	ldr	r2, [r4, #24]
 8013c82:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8013c84:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 8013c86:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8013c88:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8013c8a:	d305      	bcc.n	8013c98 <access_virt_barray+0xca>
  if (writable)
 8013c8c:	f1b8 0f00 	cmp.w	r8, #0
 8013c90:	d10d      	bne.n	8013cae <access_virt_barray+0xe0>
 8013c92:	e00e      	b.n	8013cb2 <access_virt_barray+0xe4>
 8013c94:	462e      	mov	r6, r5
 8013c96:	e7ee      	b.n	8013c76 <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8013c98:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013c9c:	464a      	mov	r2, r9
 8013c9e:	2100      	movs	r1, #0
	undef_row++;
 8013ca0:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8013ca2:	f005 fd09 	bl	80196b8 <memset>
	undef_row++;
 8013ca6:	e7ee      	b.n	8013c86 <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 8013ca8:	f1b8 0f00 	cmp.w	r8, #0
 8013cac:	d009      	beq.n	8013cc2 <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 8013cae:	2301      	movs	r3, #1
 8013cb0:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8013cb2:	69a0      	ldr	r0, [r4, #24]
 8013cb4:	1a2d      	subs	r5, r5, r0
 8013cb6:	6820      	ldr	r0, [r4, #0]
}
 8013cb8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8013cbc:	b003      	add	sp, #12
 8013cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8013cc2:	6803      	ldr	r3, [r0, #0]
 8013cc4:	2217      	movs	r2, #23
 8013cc6:	615a      	str	r2, [r3, #20]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	4798      	blx	r3
  if (writable)
 8013ccc:	e7f1      	b.n	8013cb2 <access_virt_barray+0xe4>

08013cce <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8013cce:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8013cd2:	429a      	cmp	r2, r3
{
 8013cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cd8:	4606      	mov	r6, r0
 8013cda:	4688      	mov	r8, r1
 8013cdc:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013cde:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8013ce0:	d902      	bls.n	8013ce8 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 8013ce2:	2103      	movs	r1, #3
 8013ce4:	f7ff fe12 	bl	801390c <out_of_memory>
  if (odd_bytes > 0)
 8013ce8:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8013cec:	bf1c      	itt	ne
 8013cee:	3408      	addne	r4, #8
 8013cf0:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8013cf2:	f1b8 0f01 	cmp.w	r8, #1
 8013cf6:	d906      	bls.n	8013d06 <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8013cf8:	6833      	ldr	r3, [r6, #0]
 8013cfa:	220f      	movs	r2, #15
 8013cfc:	4630      	mov	r0, r6
 8013cfe:	e9c3 2805 	strd	r2, r8, [r3, #20]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 8013d06:	f104 0110 	add.w	r1, r4, #16
 8013d0a:	4630      	mov	r0, r6
 8013d0c:	f000 fa52 	bl	80141b4 <jpeg_get_large>
  if (hdr_ptr == NULL)
 8013d10:	4605      	mov	r5, r0
 8013d12:	b918      	cbnz	r0, 8013d1c <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 8013d14:	2104      	movs	r1, #4
 8013d16:	4630      	mov	r0, r6
 8013d18:	f7ff fdf8 	bl	801390c <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8013d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8013d1e:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8013d22:	3310      	adds	r3, #16
 8013d24:	4423      	add	r3, r4
 8013d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 8013d28:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 8013d2e:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 8013d32:	2300      	movs	r3, #0
 8013d34:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 8013d36:	63fd      	str	r5, [r7, #60]	; 0x3c
}
 8013d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d3c <alloc_barray>:
{
 8013d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8013d40:	01d7      	lsls	r7, r2, #7
{
 8013d42:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8013d44:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8013d48:	4680      	mov	r8, r0
 8013d4a:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013d4c:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 8013d4e:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8013d50:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 8013d54:	d904      	bls.n	8013d60 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8013d56:	6803      	ldr	r3, [r0, #0]
 8013d58:	2248      	movs	r2, #72	; 0x48
 8013d5a:	615a      	str	r2, [r3, #20]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8013d60:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8013d62:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8013d66:	4651      	mov	r1, sl
 8013d68:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 8013d6a:	bfa8      	it	ge
 8013d6c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8013d6e:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8013d70:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8013d72:	f7ff fe15 	bl	80139a0 <alloc_small>
 8013d76:	4681      	mov	r9, r0
  while (currow < numrows) {
 8013d78:	42ae      	cmp	r6, r5
 8013d7a:	d302      	bcc.n	8013d82 <alloc_barray+0x46>
}
 8013d7c:	4648      	mov	r0, r9
 8013d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8013d82:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8013d84:	4651      	mov	r1, sl
 8013d86:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8013d88:	429c      	cmp	r4, r3
 8013d8a:	bf28      	it	cs
 8013d8c:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8013d8e:	fb04 f207 	mul.w	r2, r4, r7
 8013d92:	f7ff ff9c 	bl	8013cce <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8013d96:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8013d9a:	4426      	add	r6, r4
 8013d9c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8013da0:	4293      	cmp	r3, r2
 8013da2:	d0e9      	beq.n	8013d78 <alloc_barray+0x3c>
      result[currow++] = workspace;
 8013da4:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 8013da8:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 8013daa:	e7f9      	b.n	8013da0 <alloc_barray+0x64>

08013dac <alloc_sarray>:
{
 8013dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013db0:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8013db2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8013db6:	4607      	mov	r7, r0
 8013db8:	468a      	mov	sl, r1
  if (ltemp <= 0)
 8013dba:	429a      	cmp	r2, r3
{
 8013dbc:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013dbe:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8013dc0:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 8013dc4:	d904      	bls.n	8013dd0 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8013dc6:	6803      	ldr	r3, [r0, #0]
 8013dc8:	2248      	movs	r2, #72	; 0x48
 8013dca:	615a      	str	r2, [r3, #20]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8013dd0:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8013dd2:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8013dd6:	4651      	mov	r1, sl
 8013dd8:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 8013dda:	bfa8      	it	ge
 8013ddc:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8013dde:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8013de0:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8013de2:	f7ff fddd 	bl	80139a0 <alloc_small>
 8013de6:	4681      	mov	r9, r0
  while (currow < numrows) {
 8013de8:	42ae      	cmp	r6, r5
 8013dea:	d302      	bcc.n	8013df2 <alloc_sarray+0x46>
}
 8013dec:	4648      	mov	r0, r9
 8013dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8013df2:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8013df4:	4651      	mov	r1, sl
 8013df6:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8013df8:	429c      	cmp	r4, r3
 8013dfa:	bf28      	it	cs
 8013dfc:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8013dfe:	fb04 f208 	mul.w	r2, r4, r8
 8013e02:	f7ff ff64 	bl	8013cce <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8013e06:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8013e0a:	4426      	add	r6, r4
 8013e0c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8013e10:	4293      	cmp	r3, r2
 8013e12:	d0e9      	beq.n	8013de8 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 8013e14:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 8013e18:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 8013e1a:	e7f9      	b.n	8013e10 <alloc_sarray+0x64>

08013e1c <realize_virt_arrays>:
{
 8013e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8013e20:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 8013e24:	2500      	movs	r5, #0
{
 8013e26:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013e28:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 8013e2c:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013e2e:	bb03      	cbnz	r3, 8013e72 <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013e30:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8013e34:	bb43      	cbnz	r3, 8013e88 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 8013e36:	2e00      	cmp	r6, #0
 8013e38:	dd19      	ble.n	8013e6e <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 8013e3a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8013e3e:	462a      	mov	r2, r5
 8013e40:	4631      	mov	r1, r6
 8013e42:	4638      	mov	r0, r7
 8013e44:	f000 f9bc 	bl	80141c0 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 8013e48:	4285      	cmp	r5, r0
 8013e4a:	dd2a      	ble.n	8013ea2 <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 8013e4c:	fb90 f6f6 	sdiv	r6, r0, r6
 8013e50:	2e01      	cmp	r6, #1
 8013e52:	bfb8      	it	lt
 8013e54:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013e56:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8013e5a:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 8013e5e:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013e60:	bb0c      	cbnz	r4, 8013ea6 <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013e62:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8013e66:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013e6a:	2d00      	cmp	r5, #0
 8013e6c:	d141      	bne.n	8013ef2 <realize_virt_arrays+0xd6>
}
 8013e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8013e72:	681a      	ldr	r2, [r3, #0]
 8013e74:	b932      	cbnz	r2, 8013e84 <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 8013e76:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8013e7a:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 8013e7e:	6859      	ldr	r1, [r3, #4]
 8013e80:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e86:	e7d2      	b.n	8013e2e <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8013e88:	681a      	ldr	r2, [r3, #0]
 8013e8a:	b942      	cbnz	r2, 8013e9e <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 8013e8c:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8013e90:	4351      	muls	r1, r2
 8013e92:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 8013e96:	6859      	ldr	r1, [r3, #4]
 8013e98:	434a      	muls	r2, r1
 8013e9a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ea0:	e7c8      	b.n	8013e34 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 8013ea2:	4e27      	ldr	r6, [pc, #156]	; (8013f40 <realize_virt_arrays+0x124>)
 8013ea4:	e7d7      	b.n	8013e56 <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8013ea6:	6823      	ldr	r3, [r4, #0]
 8013ea8:	b9ab      	cbnz	r3, 8013ed6 <realize_virt_arrays+0xba>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8013eaa:	6862      	ldr	r2, [r4, #4]
 8013eac:	68e1      	ldr	r1, [r4, #12]
 8013eae:	1e53      	subs	r3, r2, #1
 8013eb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8013eb4:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8013eb6:	429e      	cmp	r6, r3
 8013eb8:	db0f      	blt.n	8013eda <realize_virt_arrays+0xbe>
	sptr->rows_in_mem = sptr->rows_in_array;
 8013eba:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8013ebc:	6923      	ldr	r3, [r4, #16]
 8013ebe:	2101      	movs	r1, #1
 8013ec0:	68a2      	ldr	r2, [r4, #8]
 8013ec2:	4638      	mov	r0, r7
 8013ec4:	f7ff ff72 	bl	8013dac <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8013ec8:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8013ecc:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 8013ece:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 8013ed0:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 8013ed2:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8013ed6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8013ed8:	e7c2      	b.n	8013e60 <realize_virt_arrays+0x44>
				(long) sptr->samplesperrow *
 8013eda:	68a3      	ldr	r3, [r4, #8]
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8013edc:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8013ede:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8013ee0:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8013ee2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013ee6:	435a      	muls	r2, r3
 8013ee8:	f000 f96c 	bl	80141c4 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 8013eec:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8013ef0:	e7e4      	b.n	8013ebc <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8013ef2:	682b      	ldr	r3, [r5, #0]
 8013ef4:	b9ab      	cbnz	r3, 8013f22 <realize_virt_arrays+0x106>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8013ef6:	6868      	ldr	r0, [r5, #4]
 8013ef8:	68e9      	ldr	r1, [r5, #12]
 8013efa:	1e43      	subs	r3, r0, #1
 8013efc:	fbb3 f3f1 	udiv	r3, r3, r1
 8013f00:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8013f02:	429e      	cmp	r6, r3
 8013f04:	db0f      	blt.n	8013f26 <realize_virt_arrays+0x10a>
	bptr->rows_in_mem = bptr->rows_in_array;
 8013f06:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8013f08:	692b      	ldr	r3, [r5, #16]
 8013f0a:	2101      	movs	r1, #1
 8013f0c:	68aa      	ldr	r2, [r5, #8]
 8013f0e:	4638      	mov	r0, r7
 8013f10:	f7ff ff14 	bl	8013d3c <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 8013f14:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8013f18:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 8013f1a:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 8013f1c:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 8013f1e:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8013f22:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8013f24:	e7a1      	b.n	8013e6a <realize_virt_arrays+0x4e>
				(long) bptr->blocksperrow *
 8013f26:	68aa      	ldr	r2, [r5, #8]
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8013f28:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 8013f2a:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8013f2c:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8013f2e:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8013f30:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8013f34:	01d2      	lsls	r2, r2, #7
 8013f36:	f000 f945 	bl	80141c4 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 8013f3a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8013f3e:	e7e3      	b.n	8013f08 <realize_virt_arrays+0xec>
 8013f40:	3b9aca00 	.word	0x3b9aca00

08013f44 <access_virt_sarray>:
{
 8013f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 8013f48:	eb02 0803 	add.w	r8, r2, r3
{
 8013f4c:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8013f4e:	684a      	ldr	r2, [r1, #4]
{
 8013f50:	b087      	sub	sp, #28
 8013f52:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8013f54:	4542      	cmp	r2, r8
{
 8013f56:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8013f5a:	d304      	bcc.n	8013f66 <access_virt_sarray+0x22>
 8013f5c:	68ca      	ldr	r2, [r1, #12]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d301      	bcc.n	8013f66 <access_virt_sarray+0x22>
 8013f62:	680b      	ldr	r3, [r1, #0]
 8013f64:	b933      	cbnz	r3, 8013f74 <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8013f66:	6803      	ldr	r3, [r0, #0]
 8013f68:	2217      	movs	r2, #23
 8013f6a:	9003      	str	r0, [sp, #12]
 8013f6c:	615a      	str	r2, [r3, #20]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	4798      	blx	r3
 8013f72:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 8013f74:	69a3      	ldr	r3, [r4, #24]
 8013f76:	42ab      	cmp	r3, r5
 8013f78:	d80c      	bhi.n	8013f94 <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8013f7a:	6922      	ldr	r2, [r4, #16]
 8013f7c:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8013f7e:	4543      	cmp	r3, r8
 8013f80:	d308      	bcc.n	8013f94 <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 8013f82:	69e6      	ldr	r6, [r4, #28]
 8013f84:	4546      	cmp	r6, r8
 8013f86:	f0c0 8081 	bcc.w	801408c <access_virt_sarray+0x148>
  if (writable)
 8013f8a:	f1ba 0f00 	cmp.w	sl, #0
 8013f8e:	f040 80a8 	bne.w	80140e2 <access_virt_sarray+0x19e>
 8013f92:	e0a8      	b.n	80140e6 <access_virt_sarray+0x1a2>
    if (! ptr->b_s_open)
 8013f94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013f96:	b933      	cbnz	r3, 8013fa6 <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8013f98:	6803      	ldr	r3, [r0, #0]
 8013f9a:	2247      	movs	r2, #71	; 0x47
 8013f9c:	9003      	str	r0, [sp, #12]
 8013f9e:	615a      	str	r2, [r3, #20]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	4798      	blx	r3
 8013fa4:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 8013fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fa8:	b17b      	cbz	r3, 8013fca <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8013faa:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8013fae:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 8013fb2:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8013fb4:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 8013fb8:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8013fbc:	6922      	ldr	r2, [r4, #16]
 8013fbe:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8013fc0:	e9d4 c706 	ldrd	ip, r7, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8013fc4:	dc3c      	bgt.n	8014040 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8013fca:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8013fcc:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8013fd0:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8013fd2:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 8013fd6:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8013fd8:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8013fdc:	bf2a      	itet	cs
 8013fde:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8013fe2:	462b      	movcc	r3, r5
 8013fe4:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8013fe8:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 8013fea:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8013fee:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8013ff0:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8013ff2:	454a      	cmp	r2, r9
 8013ff4:	ddc5      	ble.n	8013f82 <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8013ff6:	eba2 0209 	sub.w	r2, r2, r9
 8013ffa:	6967      	ldr	r7, [r4, #20]
 8013ffc:	42ba      	cmp	r2, r7
 8013ffe:	bfa8      	it	ge
 8014000:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 8014002:	69a7      	ldr	r7, [r4, #24]
 8014004:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014006:	1bf6      	subs	r6, r6, r7
 8014008:	42b2      	cmp	r2, r6
 801400a:	bfa8      	it	ge
 801400c:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801400e:	6866      	ldr	r6, [r4, #4]
 8014010:	1bf6      	subs	r6, r6, r7
 8014012:	42b2      	cmp	r2, r6
 8014014:	bfa8      	it	ge
 8014016:	4632      	movge	r2, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 8014018:	2a00      	cmp	r2, #0
 801401a:	ddb2      	ble.n	8013f82 <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 801401c:	fb02 f60b 	mul.w	r6, r2, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014020:	6822      	ldr	r2, [r4, #0]
 8014022:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8014024:	9600      	str	r6, [sp, #0]
 8014026:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 801402a:	9305      	str	r3, [sp, #20]
 801402c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8014030:	47b8      	blx	r7
    file_offset += byte_count;
 8014032:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014034:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8014036:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014038:	4491      	add	r9, r2
 801403a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 801403e:	e7d6      	b.n	8013fee <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014040:	eba2 0209 	sub.w	r2, r2, r9
 8014044:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8014046:	44cc      	add	ip, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014048:	42b2      	cmp	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801404a:	eba7 070c 	sub.w	r7, r7, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801404e:	bfa8      	it	ge
 8014050:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014052:	6866      	ldr	r6, [r4, #4]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014054:	42ba      	cmp	r2, r7
 8014056:	bfa8      	it	ge
 8014058:	463a      	movge	r2, r7
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801405a:	eba6 070c 	sub.w	r7, r6, ip
 801405e:	42ba      	cmp	r2, r7
 8014060:	bfa8      	it	ge
 8014062:	463a      	movge	r2, r7
    if (rows <= 0)		/* this chunk might be past end of file! */
 8014064:	2a00      	cmp	r2, #0
 8014066:	ddae      	ble.n	8013fc6 <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 8014068:	fb02 f70b 	mul.w	r7, r2, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801406c:	6822      	ldr	r2, [r4, #0]
 801406e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8014070:	9700      	str	r7, [sp, #0]
 8014072:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8014076:	9305      	str	r3, [sp, #20]
 8014078:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801407c:	47b0      	blx	r6
    file_offset += byte_count;
 801407e:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014080:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8014082:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014084:	4491      	add	r9, r2
 8014086:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 801408a:	e797      	b.n	8013fbc <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 801408c:	42ae      	cmp	r6, r5
 801408e:	d20d      	bcs.n	80140ac <access_virt_sarray+0x168>
      if (writable)		/* writer skipped over a section of array */
 8014090:	f1ba 0f00 	cmp.w	sl, #0
 8014094:	d020      	beq.n	80140d8 <access_virt_sarray+0x194>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014096:	6803      	ldr	r3, [r0, #0]
 8014098:	2217      	movs	r2, #23
 801409a:	9003      	str	r0, [sp, #12]
 801409c:	462e      	mov	r6, r5
 801409e:	615a      	str	r2, [r3, #20]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	4798      	blx	r3
    if (writable)
 80140a4:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 80140a6:	f8c4 801c 	str.w	r8, [r4, #28]
 80140aa:	e002      	b.n	80140b2 <access_virt_sarray+0x16e>
    if (writable)
 80140ac:	f1ba 0f00 	cmp.w	sl, #0
 80140b0:	d1f9      	bne.n	80140a6 <access_virt_sarray+0x162>
    if (ptr->pre_zero) {
 80140b2:	6a22      	ldr	r2, [r4, #32]
 80140b4:	b192      	cbz	r2, 80140dc <access_virt_sarray+0x198>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80140b6:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80140b8:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80140ba:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 80140bc:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 80140c0:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80140c2:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 80140c4:	f4bf af61 	bcs.w	8013f8a <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80140c8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80140cc:	463a      	mov	r2, r7
 80140ce:	2100      	movs	r1, #0
	undef_row++;
 80140d0:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80140d2:	f005 faf1 	bl	80196b8 <memset>
	undef_row++;
 80140d6:	e7f3      	b.n	80140c0 <access_virt_sarray+0x17c>
 80140d8:	462e      	mov	r6, r5
 80140da:	e7ea      	b.n	80140b2 <access_virt_sarray+0x16e>
      if (! writable)		/* reader looking at undefined data */
 80140dc:	f1ba 0f00 	cmp.w	sl, #0
 80140e0:	d009      	beq.n	80140f6 <access_virt_sarray+0x1b2>
    ptr->dirty = TRUE;
 80140e2:	2301      	movs	r3, #1
 80140e4:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 80140e6:	69a0      	ldr	r0, [r4, #24]
 80140e8:	1a2d      	subs	r5, r5, r0
 80140ea:	6820      	ldr	r0, [r4, #0]
}
 80140ec:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80140f0:	b007      	add	sp, #28
 80140f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80140f6:	6803      	ldr	r3, [r0, #0]
 80140f8:	2217      	movs	r2, #23
 80140fa:	615a      	str	r2, [r3, #20]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	4798      	blx	r3
  if (writable)
 8014100:	e7f1      	b.n	80140e6 <access_virt_sarray+0x1a2>
	...

08014104 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8014104:	2300      	movs	r3, #0
{
 8014106:	b570      	push	{r4, r5, r6, lr}
 8014108:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 801410a:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 801410c:	f000 f85f 	bl	80141ce <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8014110:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8014112:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8014114:	4628      	mov	r0, r5
 8014116:	f000 f847 	bl	80141a8 <jpeg_get_small>

  if (mem == NULL) {
 801411a:	4604      	mov	r4, r0
 801411c:	b948      	cbnz	r0, 8014132 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 801411e:	4628      	mov	r0, r5
 8014120:	f000 f857 	bl	80141d2 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8014124:	682b      	ldr	r3, [r5, #0]
 8014126:	2238      	movs	r2, #56	; 0x38
 8014128:	4628      	mov	r0, r5
 801412a:	e9c3 2405 	strd	r2, r4, [r3, #20]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 8014132:	4b12      	ldr	r3, [pc, #72]	; (801417c <jinit_memory_mgr+0x78>)
 8014134:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 8014136:	4b12      	ldr	r3, [pc, #72]	; (8014180 <jinit_memory_mgr+0x7c>)
 8014138:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 801413a:	4b12      	ldr	r3, [pc, #72]	; (8014184 <jinit_memory_mgr+0x80>)
 801413c:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 801413e:	4b12      	ldr	r3, [pc, #72]	; (8014188 <jinit_memory_mgr+0x84>)
 8014140:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 8014142:	4b12      	ldr	r3, [pc, #72]	; (801418c <jinit_memory_mgr+0x88>)
 8014144:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 8014146:	4b12      	ldr	r3, [pc, #72]	; (8014190 <jinit_memory_mgr+0x8c>)
 8014148:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 801414a:	4b12      	ldr	r3, [pc, #72]	; (8014194 <jinit_memory_mgr+0x90>)
 801414c:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 801414e:	4b12      	ldr	r3, [pc, #72]	; (8014198 <jinit_memory_mgr+0x94>)
 8014150:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 8014152:	4b12      	ldr	r3, [pc, #72]	; (801419c <jinit_memory_mgr+0x98>)
 8014154:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 8014156:	4b12      	ldr	r3, [pc, #72]	; (80141a0 <jinit_memory_mgr+0x9c>)
 8014158:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 801415a:	4b12      	ldr	r3, [pc, #72]	; (80141a4 <jinit_memory_mgr+0xa0>)
 801415c:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 801415e:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 8014162:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 8014166:	2300      	movs	r3, #0
 8014168:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 801416a:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 801416c:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 801416e:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 8014170:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8014174:	2354      	movs	r3, #84	; 0x54
 8014176:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 8014178:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 801417a:	bd70      	pop	{r4, r5, r6, pc}
 801417c:	080139a1 	.word	0x080139a1
 8014180:	08013ccf 	.word	0x08013ccf
 8014184:	08013dad 	.word	0x08013dad
 8014188:	08013d3d 	.word	0x08013d3d
 801418c:	08013ab7 	.word	0x08013ab7
 8014190:	08013a6d 	.word	0x08013a6d
 8014194:	08013e1d 	.word	0x08013e1d
 8014198:	08013f45 	.word	0x08013f45
 801419c:	08013bcf 	.word	0x08013bcf
 80141a0:	08013b01 	.word	0x08013b01
 80141a4:	08013ba5 	.word	0x08013ba5

080141a8 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 80141a8:	4608      	mov	r0, r1
 80141aa:	f7f2 bf31 	b.w	8007010 <pvPortMalloc>

080141ae <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 80141ae:	4608      	mov	r0, r1
 80141b0:	f7f2 bfc4 	b.w	800713c <vPortFree>

080141b4 <jpeg_get_large>:
 80141b4:	4608      	mov	r0, r1
 80141b6:	f7f2 bf2b 	b.w	8007010 <pvPortMalloc>

080141ba <jpeg_free_large>:
 80141ba:	4608      	mov	r0, r1
 80141bc:	f7f2 bfbe 	b.w	800713c <vPortFree>

080141c0 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 80141c0:	4610      	mov	r0, r2
 80141c2:	4770      	bx	lr

080141c4 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 80141c4:	6803      	ldr	r3, [r0, #0]
 80141c6:	2233      	movs	r2, #51	; 0x33
 80141c8:	615a      	str	r2, [r3, #20]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	4718      	bx	r3

080141ce <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 80141ce:	2000      	movs	r0, #0
 80141d0:	4770      	bx	lr

080141d2 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 80141d2:	4770      	bx	lr

080141d4 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 80141d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 80141d8:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 80141dc:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80141de:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 80141e2:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 80141e4:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80141e6:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 80141ea:	bf16      	itet	ne
 80141ec:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 80141ee:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 80141f2:	461e      	movne	r6, r3
 80141f4:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 80141f6:	6843      	ldr	r3, [r0, #4]
 80141f8:	f506 7280 	add.w	r2, r6, #256	; 0x100
 80141fc:	689f      	ldr	r7, [r3, #8]
 80141fe:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8014200:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 8014202:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8014206:	f105 0e20 	add.w	lr, r5, #32

  for (i = 0; i < cinfo->out_color_components; i++) {
 801420a:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801420c:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801420e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8014210:	429a      	cmp	r2, r3
 8014212:	dc01      	bgt.n	8014218 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 8014214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8014218:	f85e 1b04 	ldr.w	r1, [lr], #4
      cquantize->colorindex[i] += MAXJSAMPLE;
 801421c:	009f      	lsls	r7, r3, #2
 801421e:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 8014220:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 8014224:	b126      	cbz	r6, 8014230 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 8014226:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801422a:	32ff      	adds	r2, #255	; 0xff
 801422c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 8014230:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8014234:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 8014238:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 801423a:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 801423c:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8014240:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8014242:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 8014246:	428f      	cmp	r7, r1
 8014248:	db0a      	blt.n	8014260 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 801424a:	fb10 fb0c 	smulbb	fp, r0, ip
 801424e:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8014252:	3101      	adds	r1, #1
 8014254:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8014258:	d1f5      	bne.n	8014246 <create_colorindex+0x72>
    if (pad)
 801425a:	b93e      	cbnz	r6, 801426c <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 801425c:	3301      	adds	r3, #1
 801425e:	e7d6      	b.n	801420e <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 8014260:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8014262:	fb08 a700 	mla	r7, r8, r0, sl
 8014266:	fb97 f7f9 	sdiv	r7, r7, r9
 801426a:	e7ec      	b.n	8014246 <create_colorindex+0x72>
 801426c:	4611      	mov	r1, r2
 801426e:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 8014272:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 8014276:	f892 9000 	ldrb.w	r9, [r2]
 801427a:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 801427e:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8014280:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 8014284:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8014288:	d1f5      	bne.n	8014276 <create_colorindex+0xa2>
 801428a:	e7e7      	b.n	801425c <create_colorindex+0x88>

0801428c <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 801428c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 8014290:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 8014294:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 8014296:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 801429a:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 801429e:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 80142a2:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 80142a4:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 80142a6:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80142a8:	4540      	cmp	r0, r8
 80142aa:	db02      	blt.n	80142b2 <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 80142ac:	b003      	add	sp, #12
 80142ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 80142b2:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 80142b6:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 80142b8:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 80142bc:	eb04 0a03 	add.w	sl, r4, r3
 80142c0:	4554      	cmp	r4, sl
 80142c2:	d10f      	bne.n	80142e4 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 80142c4:	3001      	adds	r0, #1
 80142c6:	e7ef      	b.n	80142a8 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 80142c8:	f815 b003 	ldrb.w	fp, [r5, r3]
 80142cc:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 80142d0:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 80142d2:	f817 700b 	ldrb.w	r7, [r7, fp]
 80142d6:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 80142d8:	4563      	cmp	r3, ip
 80142da:	dbf5      	blt.n	80142c8 <color_quantize+0x3c>
 80142dc:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 80142de:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 80142e2:	e7ed      	b.n	80142c0 <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 80142e4:	2300      	movs	r3, #0
      pixcode = 0;
 80142e6:	461e      	mov	r6, r3
 80142e8:	e7f6      	b.n	80142d8 <color_quantize+0x4c>

080142ea <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 80142ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 80142ee:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 80142f2:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 80142f6:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 80142f8:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 80142fa:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 80142fe:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8014302:	4298      	cmp	r0, r3
 8014304:	db01      	blt.n	801430a <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8014306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 801430a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 801430e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8014312:	eb05 0a09 	add.w	sl, r5, r9
 8014316:	4555      	cmp	r5, sl
 8014318:	f104 0403 	add.w	r4, r4, #3
 801431c:	d101      	bne.n	8014322 <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 801431e:	3001      	adds	r0, #1
 8014320:	e7ef      	b.n	8014302 <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8014322:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8014326:	f81c 7006 	ldrb.w	r7, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 801432a:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 801432e:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8014332:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8014334:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8014338:	f818 6006 	ldrb.w	r6, [r8, r6]
 801433c:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 801433e:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8014342:	e7e8      	b.n	8014316 <color_quantize3+0x2c>

08014344 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8014344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014348:	469a      	mov	sl, r3
 801434a:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801434c:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8014350:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8014354:	699a      	ldr	r2, [r3, #24]
 8014356:	6811      	ldr	r1, [r2, #0]
 8014358:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801435a:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801435c:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801435e:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8014360:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8014362:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8014364:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8014366:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8014368:	4551      	cmp	r1, sl
 801436a:	db02      	blt.n	8014372 <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 801436c:	b00b      	add	sp, #44	; 0x2c
 801436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 8014372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 8014374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014376:	9c07      	ldr	r4, [sp, #28]
 8014378:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 801437c:	0190      	lsls	r0, r2, #6
 801437e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8014382:	9002      	str	r0, [sp, #8]
 8014384:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 8014388:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 801438a:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 801438c:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 8014390:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 8014392:	9808      	ldr	r0, [sp, #32]
 8014394:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8014398:	4575      	cmp	r5, lr
 801439a:	f100 0003 	add.w	r0, r0, #3
 801439e:	d106      	bne.n	80143ae <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 80143a0:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80143a2:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 80143a4:	3201      	adds	r2, #1
 80143a6:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 80143aa:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 80143ac:	e7dc      	b.n	8014368 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80143ae:	9e02      	ldr	r6, [sp, #8]
 80143b0:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80143b4:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80143b8:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 80143ba:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80143bc:	f858 7006 	ldr.w	r7, [r8, r6]
 80143c0:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80143c2:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 80143c4:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80143c8:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80143cc:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 80143d0:	f859 7006 	ldr.w	r7, [r9, r6]
 80143d4:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 80143d6:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80143d8:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 80143dc:	5996      	ldr	r6, [r2, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80143de:	44bb      	add	fp, r7
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 80143e0:	9a06      	ldr	r2, [sp, #24]
 80143e2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80143e6:	4417      	add	r7, r2
 80143e8:	5dbe      	ldrb	r6, [r7, r6]
 80143ea:	44b3      	add	fp, r6
      *output_ptr++ = (JSAMPLE) pixcode;
 80143ec:	f805 bb01 	strb.w	fp, [r5], #1
    for (col = width; col > 0; col--) {
 80143f0:	e7d2      	b.n	8014398 <quantize3_ord_dither+0x54>

080143f2 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80143f2:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 80143f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80143f6:	3202      	adds	r2, #2
 80143f8:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 80143fc:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 80143fe:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8014400:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014402:	3644      	adds	r6, #68	; 0x44
 8014404:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014406:	42bb      	cmp	r3, r7
 8014408:	dc00      	bgt.n	801440c <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 801440a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 801440c:	6863      	ldr	r3, [r4, #4]
 801440e:	462a      	mov	r2, r5
 8014410:	2101      	movs	r1, #1
 8014412:	4620      	mov	r0, r4
 8014414:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014416:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8014418:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 801441a:	f846 0b04 	str.w	r0, [r6], #4
  for (i = 0; i < cinfo->out_color_components; i++) {
 801441e:	e7f1      	b.n	8014404 <alloc_fs_workspace+0x12>

08014420 <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 8014420:	4770      	bx	lr

08014422 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8014422:	6803      	ldr	r3, [r0, #0]
 8014424:	222f      	movs	r2, #47	; 0x2f
 8014426:	615a      	str	r2, [r3, #20]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	4718      	bx	r3

0801442c <start_pass_1_quant>:
{
 801442c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014430:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8014434:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 8014436:	692b      	ldr	r3, [r5, #16]
 8014438:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 801443c:	696b      	ldr	r3, [r5, #20]
 801443e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 8014442:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8014446:	2b01      	cmp	r3, #1
 8014448:	d00b      	beq.n	8014462 <start_pass_1_quant+0x36>
 801444a:	2b02      	cmp	r3, #2
 801444c:	d05e      	beq.n	801450c <start_pass_1_quant+0xe0>
 801444e:	2b00      	cmp	r3, #0
 8014450:	d174      	bne.n	801453c <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 8014452:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8014454:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 8014456:	bf0c      	ite	eq
 8014458:	4b3c      	ldreq	r3, [pc, #240]	; (801454c <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 801445a:	4b3d      	ldrne	r3, [pc, #244]	; (8014550 <start_pass_1_quant+0x124>)
 801445c:	606b      	str	r3, [r5, #4]
}
 801445e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 8014462:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 8014464:	4b3b      	ldr	r3, [pc, #236]	; (8014554 <start_pass_1_quant+0x128>)
 8014466:	4a3c      	ldr	r2, [pc, #240]	; (8014558 <start_pass_1_quant+0x12c>)
 8014468:	2903      	cmp	r1, #3
 801446a:	bf18      	it	ne
 801446c:	4613      	movne	r3, r2
 801446e:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8014470:	2300      	movs	r3, #0
 8014472:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 8014474:	69eb      	ldr	r3, [r5, #28]
 8014476:	b90b      	cbnz	r3, 801447c <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 8014478:	f7ff feac 	bl	80141d4 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 801447c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 801447e:	2d00      	cmp	r5, #0
 8014480:	d1ed      	bne.n	801445e <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014482:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014486:	f107 0820 	add.w	r8, r7, #32
 801448a:	4646      	mov	r6, r8
 801448c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801448e:	429d      	cmp	r5, r3
 8014490:	dae5      	bge.n	801445e <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8014492:	f856 9b04 	ldr.w	r9, [r6], #4
    for (j = 0; j < i; j++) {
 8014496:	4642      	mov	r2, r8
 8014498:	2300      	movs	r3, #0
 801449a:	429d      	cmp	r5, r3
 801449c:	d007      	beq.n	80144ae <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 801449e:	f852 1b04 	ldr.w	r1, [r2], #4
 80144a2:	4589      	cmp	r9, r1
 80144a4:	d130      	bne.n	8014508 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 80144a6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80144aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 80144ac:	bb48      	cbnz	r0, 8014502 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80144ae:	6863      	ldr	r3, [r4, #4]
 80144b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80144b4:	2101      	movs	r1, #1
 80144b6:	4620      	mov	r0, r4
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 80144bc:	f109 32ff 	add.w	r2, r9, #4294967295
 80144c0:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 80144c4:	f8df c098 	ldr.w	ip, [pc, #152]	; 8014560 <start_pass_1_quant+0x134>
 80144c8:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 80144ca:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 80144ce:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 80144d2:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 80144d4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80144d8:	005b      	lsls	r3, r3, #1
 80144da:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 80144de:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 80144e2:	bf45      	ittet	mi
 80144e4:	425b      	negmi	r3, r3
 80144e6:	fb93 f3f2 	sdivmi	r3, r3, r2
 80144ea:	fb93 f3f2 	sdivpl	r3, r3, r2
 80144ee:	425b      	negmi	r3, r3
 80144f0:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 80144f4:	458e      	cmp	lr, r1
 80144f6:	d1ed      	bne.n	80144d4 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 80144f8:	3140      	adds	r1, #64	; 0x40
 80144fa:	f10c 0c10 	add.w	ip, ip, #16
 80144fe:	458a      	cmp	sl, r1
 8014500:	d1e5      	bne.n	80144ce <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014502:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8014504:	6130      	str	r0, [r6, #16]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014506:	e7c1      	b.n	801448c <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8014508:	3301      	adds	r3, #1
 801450a:	e7c6      	b.n	801449a <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 801450c:	4b13      	ldr	r3, [pc, #76]	; (801455c <start_pass_1_quant+0x130>)
 801450e:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8014510:	2300      	movs	r3, #0
 8014512:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 8014514:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8014516:	b90b      	cbnz	r3, 801451c <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8014518:	f7ff ff6b 	bl	80143f2 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 801451c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801451e:	3544      	adds	r5, #68	; 0x44
    for (i = 0; i < cinfo->out_color_components; i++)
 8014520:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8014522:	3202      	adds	r2, #2
 8014524:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 8014526:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014528:	42bb      	cmp	r3, r7
 801452a:	dd98      	ble.n	801445e <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 801452c:	4632      	mov	r2, r6
 801452e:	2100      	movs	r1, #0
 8014530:	f855 0b04 	ldr.w	r0, [r5], #4
    for (i = 0; i < cinfo->out_color_components; i++)
 8014534:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8014536:	f005 f8bf 	bl	80196b8 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 801453a:	e7f4      	b.n	8014526 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 801453c:	6803      	ldr	r3, [r0, #0]
 801453e:	2231      	movs	r2, #49	; 0x31
}
 8014540:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8014544:	615a      	str	r2, [r3, #20]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	4718      	bx	r3
 801454a:	bf00      	nop
 801454c:	080142eb 	.word	0x080142eb
 8014550:	0801428d 	.word	0x0801428d
 8014554:	08014345 	.word	0x08014345
 8014558:	0801469d 	.word	0x0801469d
 801455c:	08014565 	.word	0x08014565
 8014560:	080fb2f0 	.word	0x080fb2f0

08014564 <quantize_fs_dither>:
{
 8014564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014568:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 801456a:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 801456c:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 8014570:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014574:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 8014578:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 801457c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014580:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8014582:	1e6b      	subs	r3, r5, #1
 8014584:	9304      	str	r3, [sp, #16]
 8014586:	fb03 f309 	mul.w	r3, r3, r9
 801458a:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 801458c:	1c6b      	adds	r3, r5, #1
 801458e:	005b      	lsls	r3, r3, #1
 8014590:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 8014592:	2300      	movs	r3, #0
 8014594:	9300      	str	r3, [sp, #0]
 8014596:	9a00      	ldr	r2, [sp, #0]
 8014598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801459a:	429a      	cmp	r2, r3
 801459c:	db02      	blt.n	80145a4 <quantize_fs_dither+0x40>
}
 801459e:	b011      	add	sp, #68	; 0x44
 80145a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 80145a4:	2100      	movs	r1, #0
 80145a6:	462a      	mov	r2, r5
 80145a8:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 80145ac:	f005 f884 	bl	80196b8 <memset>
    for (ci = 0; ci < nc; ci++) {
 80145b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145b4:	2100      	movs	r1, #0
 80145b6:	9305      	str	r3, [sp, #20]
	dirnc = -nc;
 80145b8:	f1c9 0300 	rsb	r3, r9, #0
 80145bc:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 80145be:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 80145c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 80145c2:	db06      	blt.n	80145d2 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 80145c4:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 80145c8:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 80145ca:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 80145cc:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 80145ce:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 80145d0:	e7e0      	b.n	8014594 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 80145d2:	9800      	ldr	r0, [sp, #0]
 80145d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 80145da:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 80145de:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 80145e2:	9b05      	ldr	r3, [sp, #20]
 80145e4:	f853 cb04 	ldr.w	ip, [r3], #4
 80145e8:	9305      	str	r3, [sp, #20]
      if (cquantize->on_odd_row) {
 80145ea:	b312      	cbz	r2, 8014632 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 80145ec:	9b08      	ldr	r3, [sp, #32]
 80145ee:	449e      	add	lr, r3
	output_ptr += width-1;
 80145f0:	9b04      	ldr	r3, [sp, #16]
 80145f2:	4418      	add	r0, r3
	dirnc = -nc;
 80145f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145f6:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 80145f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145fa:	449c      	add	ip, r3
	dir = -1;
 80145fc:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 8014600:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 8014602:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 8014604:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 8014606:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 8014608:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801460c:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 801460e:	6923      	ldr	r3, [r4, #16]
 8014610:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014614:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8014616:	9b02      	ldr	r3, [sp, #8]
 8014618:	005b      	lsls	r3, r3, #1
 801461a:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 801461c:	2300      	movs	r3, #0
      cur = 0;
 801461e:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8014620:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8014622:	9a03      	ldr	r2, [sp, #12]
 8014624:	b94a      	cbnz	r2, 801463a <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8014626:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 8014628:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 801462a:	436a      	muls	r2, r5
 801462c:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8014630:	e7c5      	b.n	80145be <quantize_fs_dither+0x5a>
	dir = 1;
 8014632:	2301      	movs	r3, #1
 8014634:	f8cd 901c 	str.w	r9, [sp, #28]
 8014638:	e7e2      	b.n	8014600 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 801463a:	9a01      	ldr	r2, [sp, #4]
 801463c:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8014640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8014642:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8014644:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8014648:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 801464c:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8014650:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 8014652:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8014656:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 801465a:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 801465e:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8014660:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8014662:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 8014664:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8014668:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 801466c:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 801466e:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 8014672:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 8014674:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 8014676:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 801467a:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 801467c:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 801467e:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 8014680:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8014684:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8014686:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 8014688:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 801468a:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 801468c:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 801468e:	4443      	add	r3, r8
	belowerr = bnexterr;
 8014690:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 8014694:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8014698:	4417      	add	r7, r2
 801469a:	e7c2      	b.n	8014622 <quantize_fs_dither+0xbe>

0801469c <quantize_ord_dither>:
{
 801469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146a0:	b089      	sub	sp, #36	; 0x24
 80146a2:	4689      	mov	r9, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80146a4:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 80146a8:	1f14      	subs	r4, r2, #4
{
 80146aa:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 80146ac:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 80146ae:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 80146b0:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 80146b4:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80146b6:	9b07      	ldr	r3, [sp, #28]
 80146b8:	429f      	cmp	r7, r3
 80146ba:	db02      	blt.n	80146c2 <quantize_ord_dither+0x26>
}
 80146bc:	b009      	add	sp, #36	; 0x24
 80146be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 80146c2:	4652      	mov	r2, sl
 80146c4:	2100      	movs	r1, #0
 80146c6:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80146ca:	f004 fff5 	bl	80196b8 <memset>
    row_index = cquantize->row_index;
 80146ce:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    for (ci = 0; ci < nc; ci++) {
 80146d2:	f108 0c34 	add.w	ip, r8, #52	; 0x34
 80146d6:	2000      	movs	r0, #0
      dither = cquantize->odither[ci][row_index];
 80146d8:	019a      	lsls	r2, r3, #6
 80146da:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 80146dc:	9a01      	ldr	r2, [sp, #4]
 80146de:	4290      	cmp	r0, r2
 80146e0:	db06      	blt.n	80146f0 <quantize_ord_dither+0x54>
    row_index = (row_index + 1) & ODITHER_MASK;
 80146e2:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 80146e4:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 80146e6:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 80146ea:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 80146ee:	e7e2      	b.n	80146b6 <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 80146f0:	f8d8 2018 	ldr.w	r2, [r8, #24]
      col_index = 0;
 80146f4:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 80146f6:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 80146fa:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80146fe:	6825      	ldr	r5, [r4, #0]
      input_ptr = input_buf[row] + ci;
 8014700:	4401      	add	r1, r0
      colorindex_ci = cquantize->colorindex[ci];
 8014702:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 8014704:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014708:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 801470a:	eb0a 0205 	add.w	r2, sl, r5
 801470e:	9206      	str	r2, [sp, #24]
 8014710:	9a06      	ldr	r2, [sp, #24]
 8014712:	4295      	cmp	r5, r2
 8014714:	d101      	bne.n	801471a <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 8014716:	3001      	adds	r0, #1
 8014718:	e7e0      	b.n	80146dc <quantize_ord_dither+0x40>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801471a:	782a      	ldrb	r2, [r5, #0]
 801471c:	f891 e000 	ldrb.w	lr, [r1]
 8014720:	9204      	str	r2, [sp, #16]
 8014722:	9a02      	ldr	r2, [sp, #8]
 8014724:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 8014728:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 801472a:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801472c:	f85b b002 	ldr.w	fp, [fp, r2]
 8014730:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 8014732:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8014736:	4496      	add	lr, r2
 8014738:	9a04      	ldr	r2, [sp, #16]
 801473a:	f81e e00b 	ldrb.w	lr, [lr, fp]
 801473e:	4472      	add	r2, lr
 8014740:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 8014744:	9a01      	ldr	r2, [sp, #4]
 8014746:	4411      	add	r1, r2
      for (col = width; col > 0; col--) {
 8014748:	e7e2      	b.n	8014710 <quantize_ord_dither+0x74>
	...

0801474c <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801474c:	6843      	ldr	r3, [r0, #4]
 801474e:	2258      	movs	r2, #88	; 0x58
 8014750:	2101      	movs	r1, #1
 8014752:	681b      	ldr	r3, [r3, #0]
{
 8014754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014758:	b085      	sub	sp, #20
 801475a:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801475c:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 801475e:	4b67      	ldr	r3, [pc, #412]	; (80148fc <jinit_1pass_quantizer+0x1b0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8014760:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8014764:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 8014766:	4b66      	ldr	r3, [pc, #408]	; (8014900 <jinit_1pass_quantizer+0x1b4>)
 8014768:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 801476a:	4b66      	ldr	r3, [pc, #408]	; (8014904 <jinit_1pass_quantizer+0x1b8>)
 801476c:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 801476e:	2300      	movs	r3, #0
 8014770:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8014772:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8014774:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014776:	2b04      	cmp	r3, #4
 8014778:	dd07      	ble.n	801478a <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 801477a:	6823      	ldr	r3, [r4, #0]
 801477c:	2039      	movs	r0, #57	; 0x39
 801477e:	2204      	movs	r2, #4
 8014780:	e9c3 0205 	strd	r0, r2, [r3, #20]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	4620      	mov	r0, r4
 8014788:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 801478a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801478c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014790:	dd08      	ble.n	80147a4 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8014792:	6823      	ldr	r3, [r4, #0]
 8014794:	213b      	movs	r1, #59	; 0x3b
 8014796:	f44f 7280 	mov.w	r2, #256	; 0x100
 801479a:	4620      	mov	r0, r4
 801479c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80147a4:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 80147a8:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 80147aa:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 80147ae:	f106 0720 	add.w	r7, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 80147b2:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    iroot++;
 80147b6:	469a      	mov	sl, r3
 80147b8:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 80147ba:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 80147bc:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 80147be:	4588      	cmp	r8, r1
 80147c0:	dc47      	bgt.n	8014852 <jinit_1pass_quantizer+0x106>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 80147c2:	4591      	cmp	r9, r2
 80147c4:	daf7      	bge.n	80147b6 <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 80147c6:	f1ba 0f01 	cmp.w	sl, #1
 80147ca:	d106      	bne.n	80147da <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 80147cc:	6823      	ldr	r3, [r4, #0]
 80147ce:	213a      	movs	r1, #58	; 0x3a
 80147d0:	4620      	mov	r0, r4
 80147d2:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	4798      	blx	r3
    for (i = 1; i < nc; i++)
 80147da:	463a      	mov	r2, r7
 80147dc:	2300      	movs	r3, #0
 80147de:	2501      	movs	r5, #1
 80147e0:	9701      	str	r7, [sp, #4]
  for (i = 0; i < nc; i++) {
 80147e2:	4598      	cmp	r8, r3
 80147e4:	dc38      	bgt.n	8014858 <jinit_1pass_quantizer+0x10c>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 80147e6:	f8df c120 	ldr.w	ip, [pc, #288]	; 8014908 <jinit_1pass_quantizer+0x1bc>
    changed = FALSE;
 80147ea:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 80147ec:	460b      	mov	r3, r1
 80147ee:	4598      	cmp	r8, r3
 80147f0:	dc38      	bgt.n	8014864 <jinit_1pass_quantizer+0x118>
  } while (changed);
 80147f2:	2900      	cmp	r1, #0
 80147f4:	d1f9      	bne.n	80147ea <jinit_1pass_quantizer+0x9e>
  if (cinfo->out_color_components == 3)
 80147f6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 80147f8:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 80147fa:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 80147fc:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 80147fe:	d148      	bne.n	8014892 <jinit_1pass_quantizer+0x146>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8014800:	619d      	str	r5, [r3, #24]
 8014802:	6a31      	ldr	r1, [r6, #32]
 8014804:	61d9      	str	r1, [r3, #28]
 8014806:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8014808:	6219      	str	r1, [r3, #32]
 801480a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 801480c:	6259      	str	r1, [r3, #36]	; 0x24
 801480e:	2160      	movs	r1, #96	; 0x60
 8014810:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8014812:	2101      	movs	r1, #1
 8014814:	4620      	mov	r0, r4
 8014816:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8014818:	6863      	ldr	r3, [r4, #4]
 801481a:	462a      	mov	r2, r5
 801481c:	2101      	movs	r1, #1
 801481e:	689f      	ldr	r7, [r3, #8]
 8014820:	4620      	mov	r0, r4
 8014822:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014824:	47b8      	blx	r7
  for (i = 0; i < cinfo->out_color_components; i++) {
 8014826:	46ae      	mov	lr, r5
 8014828:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 801482a:	9002      	str	r0, [sp, #8]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801482c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801482e:	429a      	cmp	r2, r3
 8014830:	db33      	blt.n	801489a <jinit_1pass_quantizer+0x14e>
  cquantize->sv_colormap = colormap;
 8014832:	9b02      	ldr	r3, [sp, #8]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 8014834:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 8014836:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 801483a:	f7ff fccb 	bl	80141d4 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 801483e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8014842:	2b02      	cmp	r3, #2
 8014844:	d156      	bne.n	80148f4 <jinit_1pass_quantizer+0x1a8>
    alloc_fs_workspace(cinfo);
 8014846:	4620      	mov	r0, r4
}
 8014848:	b005      	add	sp, #20
 801484a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 801484e:	f7ff bdd0 	b.w	80143f2 <alloc_fs_workspace>
      temp *= iroot;
 8014852:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 8014854:	3101      	adds	r1, #1
 8014856:	e7b2      	b.n	80147be <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 8014858:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < nc; i++) {
 801485c:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 801485e:	f842 ab04 	str.w	sl, [r2], #4
  for (i = 0; i < nc; i++) {
 8014862:	e7be      	b.n	80147e2 <jinit_1pass_quantizer+0x96>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8014864:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8014868:	2a02      	cmp	r2, #2
 801486a:	bf0c      	ite	eq
 801486c:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 8014870:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 8014872:	f857 a020 	ldr.w	sl, [r7, r0, lsl #2]
 8014876:	fb95 f2fa 	sdiv	r2, r5, sl
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 801487a:	fb0a 2202 	mla	r2, sl, r2, r2
 801487e:	f10a 0e01 	add.w	lr, sl, #1
      if (temp > (long) max_colors)
 8014882:	4591      	cmp	r9, r2
 8014884:	dbb5      	blt.n	80147f2 <jinit_1pass_quantizer+0xa6>
    for (i = 0; i < nc; i++) {
 8014886:	3301      	adds	r3, #1
 8014888:	4615      	mov	r5, r2
      changed = TRUE;
 801488a:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 801488c:	f847 e020 	str.w	lr, [r7, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 8014890:	e7ad      	b.n	80147ee <jinit_1pass_quantizer+0xa2>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8014892:	2161      	movs	r1, #97	; 0x61
 8014894:	e9c3 1505 	strd	r1, r5, [r3, #20]
 8014898:	e7bb      	b.n	8014812 <jinit_1pass_quantizer+0xc6>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 801489a:	9b01      	ldr	r3, [sp, #4]
 801489c:	f853 9b04 	ldr.w	r9, [r3], #4
      val = output_value(cinfo, i, j, nci-1);
 80148a0:	f109 3bff 	add.w	fp, r9, #4294967295
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80148a4:	9301      	str	r3, [sp, #4]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80148a6:	ea4f 036b 	mov.w	r3, fp, asr #1
    blksize = blkdist / nci;
 80148aa:	fb9e f8f9 	sdiv	r8, lr, r9
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80148ae:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 80148b0:	2300      	movs	r3, #0
 80148b2:	469a      	mov	sl, r3
 80148b4:	4599      	cmp	r9, r3
 80148b6:	dc02      	bgt.n	80148be <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 80148b8:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 80148ba:	46c6      	mov	lr, r8
 80148bc:	e7b6      	b.n	801482c <jinit_1pass_quantizer+0xe0>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 80148be:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 80148c2:	9f03      	ldr	r7, [sp, #12]
 80148c4:	4439      	add	r1, r7
 80148c6:	fb91 f1fb 	sdiv	r1, r1, fp
 80148ca:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 80148cc:	4651      	mov	r1, sl
 80148ce:	42a9      	cmp	r1, r5
 80148d0:	db0d      	blt.n	80148ee <jinit_1pass_quantizer+0x1a2>
    for (j = 0; j < nci; j++) {
 80148d2:	3301      	adds	r3, #1
 80148d4:	44c2      	add	sl, r8
 80148d6:	e7ed      	b.n	80148b4 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 80148d8:	9f02      	ldr	r7, [sp, #8]
 80148da:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80148de:	4467      	add	r7, ip
	for (k = 0; k < blksize; k++)
 80148e0:	f10c 0c01 	add.w	ip, ip, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 80148e4:	5478      	strb	r0, [r7, r1]
	for (k = 0; k < blksize; k++)
 80148e6:	45e0      	cmp	r8, ip
 80148e8:	dcf6      	bgt.n	80148d8 <jinit_1pass_quantizer+0x18c>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 80148ea:	4471      	add	r1, lr
 80148ec:	e7ef      	b.n	80148ce <jinit_1pass_quantizer+0x182>
	for (k = 0; k < blksize; k++)
 80148ee:	f04f 0c00 	mov.w	ip, #0
 80148f2:	e7f8      	b.n	80148e6 <jinit_1pass_quantizer+0x19a>
}
 80148f4:	b005      	add	sp, #20
 80148f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148fa:	bf00      	nop
 80148fc:	0801442d 	.word	0x0801442d
 8014900:	08014421 	.word	0x08014421
 8014904:	08014423 	.word	0x08014423
 8014908:	080fb2e4 	.word	0x080fb2e4

0801490c <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 801490c:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
{
 8014910:	b5f0      	push	{r4, r5, r6, r7, lr}
  register hist3d histogram = cquantize->histogram;
 8014912:	f8d2 c018 	ldr.w	ip, [r2, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8014916:	2400      	movs	r4, #0
  JDIMENSION width = cinfo->output_width;
 8014918:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  for (row = 0; row < num_rows; row++) {
 801491c:	429c      	cmp	r4, r3
 801491e:	db00      	blt.n	8014922 <prescan_quantize+0x16>
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}
 8014920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (col = width; col > 0; col--) {
 8014922:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 8014926:	4677      	mov	r7, lr
 8014928:	3203      	adds	r2, #3
 801492a:	b90f      	cbnz	r7, 8014930 <prescan_quantize+0x24>
  for (row = 0; row < num_rows; row++) {
 801492c:	3401      	adds	r4, #1
 801492e:	e7f5      	b.n	801491c <prescan_quantize+0x10>
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8014930:	f812 6c03 	ldrb.w	r6, [r2, #-3]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8014934:	f812 5c02 	ldrb.w	r5, [r2, #-2]
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8014938:	08f6      	lsrs	r6, r6, #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 801493a:	08a8      	lsrs	r0, r5, #2
 801493c:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8014940:	f812 6c01 	ldrb.w	r6, [r2, #-1]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8014944:	eb05 1580 	add.w	r5, r5, r0, lsl #6
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8014948:	08f6      	lsrs	r6, r6, #3
      if (++(*histp) <= 0)
 801494a:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
 801494e:	3001      	adds	r0, #1
 8014950:	b280      	uxth	r0, r0
 8014952:	b108      	cbz	r0, 8014958 <prescan_quantize+0x4c>
 8014954:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    for (col = width; col > 0; col--) {
 8014958:	3f01      	subs	r7, #1
 801495a:	3203      	adds	r2, #3
 801495c:	e7e5      	b.n	801492a <prescan_quantize+0x1e>

0801495e <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 801495e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014962:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
  minmaxdist = 0x7FFFFFFFL;
 8014966:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  for (i = 0; i < numcolors; i++) {
 801496a:	2500      	movs	r5, #0
{
 801496c:	930a      	str	r3, [sp, #40]	; 0x28
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 801496e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8014972:	9000      	str	r0, [sp, #0]
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 8014974:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 8014976:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8014978:	0140      	lsls	r0, r0, #5
  hist3d histogram = cquantize->histogram;
 801497a:	9305      	str	r3, [sp, #20]
  c2 >>= BOX_C2_LOG;
 801497c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 801497e:	f100 0a02 	add.w	sl, r0, #2
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8014982:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 8014984:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 8014986:	9b00      	ldr	r3, [sp, #0]
  centerc1 = (minc1 + maxc1) >> 1;
 8014988:	eb0a 0b00 	add.w	fp, sl, r0
  int numcolors = cinfo->actual_number_of_colors;
 801498c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8014990:	0164      	lsls	r4, r4, #5
  centerc1 = (minc1 + maxc1) >> 1;
 8014992:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  int numcolors = cinfo->actual_number_of_colors;
 8014996:	9301      	str	r3, [sp, #4]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8014998:	f104 0804 	add.w	r8, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 801499c:	341c      	adds	r4, #28
{
 801499e:	e9cd 1208 	strd	r1, r2, [sp, #32]
  c0 >>= BOX_C0_LOG;
 80149a2:	1089      	asrs	r1, r1, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 80149a4:	0149      	lsls	r1, r1, #5
 80149a6:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 80149aa:	311c      	adds	r1, #28
  centerc0 = (minc0 + maxc0) >> 1;
 80149ac:	eb09 0301 	add.w	r3, r9, r1
 80149b0:	105b      	asrs	r3, r3, #1
 80149b2:	9302      	str	r3, [sp, #8]
  centerc2 = (minc2 + maxc2) >> 1;
 80149b4:	eb08 0304 	add.w	r3, r8, r4
 80149b8:	105b      	asrs	r3, r3, #1
 80149ba:	9303      	str	r3, [sp, #12]
  for (i = 0; i < numcolors; i++) {
 80149bc:	9b01      	ldr	r3, [sp, #4]
 80149be:	42ab      	cmp	r3, r5
 80149c0:	dc43      	bgt.n	8014a4a <fill_inverse_cmap+0xec>
  ncolors = 0;
 80149c2:	2200      	movs	r2, #0
 80149c4:	a970      	add	r1, sp, #448	; 0x1c0
      colorlist[ncolors++] = (JSAMPLE) i;
 80149c6:	a830      	add	r0, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 80149c8:	4613      	mov	r3, r2
 80149ca:	9c01      	ldr	r4, [sp, #4]
 80149cc:	429c      	cmp	r4, r3
 80149ce:	f300 809c 	bgt.w	8014b0a <fill_inverse_cmap+0x1ac>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 80149d2:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 80149d4:	a970      	add	r1, sp, #448	; 0x1c0
    *bptr++ = 0x7FFFFFFFL;
 80149d6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 80149da:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 80149dc:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 80149e0:	d1fb      	bne.n	80149da <fill_inverse_cmap+0x7c>
 80149e2:	a930      	add	r1, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 80149e4:	469b      	mov	fp, r3
 80149e6:	9107      	str	r1, [sp, #28]
 80149e8:	4593      	cmp	fp, r2
 80149ea:	f040 8096 	bne.w	8014b1a <fill_inverse_cmap+0x1bc>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
 80149ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  cptr = bestcolor;
 80149f0:	aa10      	add	r2, sp, #64	; 0x40
  c2 <<= BOX_C2_LOG;
 80149f2:	f023 0003 	bic.w	r0, r3, #3
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 80149f6:	9b08      	ldr	r3, [sp, #32]
 80149f8:	f023 0103 	bic.w	r1, r3, #3
 80149fc:	9b05      	ldr	r3, [sp, #20]
 80149fe:	eb03 0581 	add.w	r5, r3, r1, lsl #2
  c1 <<= BOX_C1_LOG;
 8014a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a04:	f023 0307 	bic.w	r3, r3, #7
 8014a08:	4629      	mov	r1, r5
 8014a0a:	019b      	lsls	r3, r3, #6
 8014a0c:	3110      	adds	r1, #16
 8014a0e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8014a12:	f855 4b04 	ldr.w	r4, [r5], #4
 8014a16:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8014a18:	f102 0720 	add.w	r7, r2, #32
 8014a1c:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8014a1e:	4626      	mov	r6, r4
 8014a20:	4602      	mov	r2, r0
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8014a22:	f100 0c04 	add.w	ip, r0, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8014a26:	f812 0b01 	ldrb.w	r0, [r2], #1
 8014a2a:	3001      	adds	r0, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8014a2c:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8014a2e:	f826 0b02 	strh.w	r0, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8014a32:	d1f8      	bne.n	8014a26 <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8014a34:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8014a36:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8014a38:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8014a3c:	d1ef      	bne.n	8014a1e <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 8014a3e:	428d      	cmp	r5, r1
 8014a40:	d1e7      	bne.n	8014a12 <fill_inverse_cmap+0xb4>
      }
    }
  }
}
 8014a42:	f20d 5dc4 	addw	sp, sp, #1476	; 0x5c4
 8014a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 8014a4a:	9b00      	ldr	r3, [sp, #0]
 8014a4c:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 8014a54:	4591      	cmp	r9, r2
 8014a56:	dd2a      	ble.n	8014aae <fill_inverse_cmap+0x150>
      tdist = (x - minc0) * C0_SCALE;
 8014a58:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 8014a5c:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 8014a5e:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 8014a62:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 8014a68:	459a      	cmp	sl, r3
 8014a6a:	dd33      	ble.n	8014ad4 <fill_inverse_cmap+0x176>
      tdist = (x - minc1) * C1_SCALE;
 8014a6c:	eba3 0e0a 	sub.w	lr, r3, sl
 8014a70:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8014a74:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 8014a78:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 8014a7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 8014a7e:	fb03 2203 	mla	r2, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc2) {
 8014a86:	4598      	cmp	r8, r3
 8014a88:	dd32      	ble.n	8014af0 <fill_inverse_cmap+0x192>
      tdist = (x - minc2) * C2_SCALE;
 8014a8a:	eba3 0708 	sub.w	r7, r3, r8
 8014a8e:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8014a90:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8014a94:	1b1b      	subs	r3, r3, r4
	tdist = (x - minc2) * C2_SCALE;
 8014a96:	005b      	lsls	r3, r3, #1
	max_dist += tdist*tdist;
 8014a98:	fb03 2303 	mla	r3, r3, r3, r2
    mindist[i] = min_dist;	/* save away the results */
 8014a9c:	aa70      	add	r2, sp, #448	; 0x1c0
 8014a9e:	429e      	cmp	r6, r3
 8014aa0:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8014aa4:	f105 0501 	add.w	r5, r5, #1
 8014aa8:	bfa8      	it	ge
 8014aaa:	461e      	movge	r6, r3
 8014aac:	e786      	b.n	80149bc <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 8014aae:	4291      	cmp	r1, r2
 8014ab0:	da06      	bge.n	8014ac0 <fill_inverse_cmap+0x162>
      tdist = (x - maxc0) * C0_SCALE;
 8014ab2:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 8014ab6:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 8014aba:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 8014abe:	e7d0      	b.n	8014a62 <fill_inverse_cmap+0x104>
      if (x <= centerc0) {
 8014ac0:	9b02      	ldr	r3, [sp, #8]
      min_dist = 0;
 8014ac2:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 8014ac6:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 8014ac8:	bfac      	ite	ge
 8014aca:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 8014acc:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8014ad0:	4352      	muls	r2, r2
 8014ad2:	e7c7      	b.n	8014a64 <fill_inverse_cmap+0x106>
    } else if (x > maxc1) {
 8014ad4:	4298      	cmp	r0, r3
 8014ad6:	da08      	bge.n	8014aea <fill_inverse_cmap+0x18c>
      tdist = (x - maxc1) * C1_SCALE;
 8014ad8:	eba3 0e00 	sub.w	lr, r3, r0
 8014adc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8014ae0:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 8014ae4:	eba3 030a 	sub.w	r3, r3, sl
 8014ae8:	e7c7      	b.n	8014a7a <fill_inverse_cmap+0x11c>
      if (x <= centerc1) {
 8014aea:	459b      	cmp	fp, r3
 8014aec:	dbfa      	blt.n	8014ae4 <fill_inverse_cmap+0x186>
 8014aee:	e7c3      	b.n	8014a78 <fill_inverse_cmap+0x11a>
    } else if (x > maxc2) {
 8014af0:	429c      	cmp	r4, r3
 8014af2:	da06      	bge.n	8014b02 <fill_inverse_cmap+0x1a4>
      tdist = (x - maxc2) * C2_SCALE;
 8014af4:	1b1f      	subs	r7, r3, r4
 8014af6:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8014af8:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 8014afc:	eba3 0308 	sub.w	r3, r3, r8
 8014b00:	e7c9      	b.n	8014a96 <fill_inverse_cmap+0x138>
      if (x <= centerc2) {
 8014b02:	9f03      	ldr	r7, [sp, #12]
 8014b04:	429f      	cmp	r7, r3
 8014b06:	dbf9      	blt.n	8014afc <fill_inverse_cmap+0x19e>
 8014b08:	e7c4      	b.n	8014a94 <fill_inverse_cmap+0x136>
    if (mindist[i] <= minmaxdist)
 8014b0a:	f851 4b04 	ldr.w	r4, [r1], #4
 8014b0e:	42a6      	cmp	r6, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 8014b10:	bfa4      	itt	ge
 8014b12:	5483      	strbge	r3, [r0, r2]
 8014b14:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8014b16:	3301      	adds	r3, #1
 8014b18:	e757      	b.n	80149ca <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 8014b1a:	9b07      	ldr	r3, [sp, #28]
 8014b1c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014b20:	9307      	str	r3, [sp, #28]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8014b22:	9b00      	ldr	r3, [sp, #0]
 8014b24:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8014b28:	680b      	ldr	r3, [r1, #0]
 8014b2a:	5d98      	ldrb	r0, [r3, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8014b2c:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8014b2e:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8014b30:	eba9 0000 	sub.w	r0, r9, r0
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8014b34:	5d9b      	ldrb	r3, [r3, r6]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8014b36:	5d89      	ldrb	r1, [r1, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8014b38:	ebaa 0303 	sub.w	r3, sl, r3
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8014b3c:	eba8 0101 	sub.w	r1, r8, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8014b40:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8014b44:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 8014b46:	4364      	muls	r4, r4
 8014b48:	fb00 4400 	mla	r4, r0, r0, r4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8014b4c:	3004      	adds	r0, #4
 8014b4e:	0100      	lsls	r0, r0, #4
    dist0 += inc2*inc2;
 8014b50:	fb01 4401 	mla	r4, r1, r1, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8014b54:	3108      	adds	r1, #8
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8014b56:	900b      	str	r0, [sp, #44]	; 0x2c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8014b58:	2048      	movs	r0, #72	; 0x48
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8014b5a:	0149      	lsls	r1, r1, #5
    dist0 += inc2*inc2;
 8014b5c:	9402      	str	r4, [sp, #8]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8014b5e:	4343      	muls	r3, r0
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8014b60:	9106      	str	r1, [sp, #24]
 8014b62:	2100      	movs	r1, #0
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8014b64:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8014b68:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8014b6c:	930e      	str	r3, [sp, #56]	; 0x38
 8014b6e:	9b06      	ldr	r3, [sp, #24]
 8014b70:	900c      	str	r0, [sp, #48]	; 0x30
    cptr = bestcolor;
 8014b72:	a810      	add	r0, sp, #64	; 0x40
 8014b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b78:	9003      	str	r0, [sp, #12]
 8014b7a:	930d      	str	r3, [sp, #52]	; 0x34
 8014b7c:	ab70      	add	r3, sp, #448	; 0x1c0
      xx1 = inc1;
 8014b7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014b80:	eb03 0c01 	add.w	ip, r3, r1
 8014b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b86:	440b      	add	r3, r1
 8014b88:	930f      	str	r3, [sp, #60]	; 0x3c
	xx2 = inc2;
 8014b8a:	9b03      	ldr	r3, [sp, #12]
 8014b8c:	9304      	str	r3, [sp, #16]
      xx1 = inc1;
 8014b8e:	9b02      	ldr	r3, [sp, #8]
 8014b90:	9301      	str	r3, [sp, #4]
 8014b92:	e01c      	b.n	8014bce <fill_inverse_cmap+0x270>
	  if (dist2 < *bptr) {
 8014b94:	f853 7f04 	ldr.w	r7, [r3, #4]!
	  cptr++;
 8014b98:	f10e 0e01 	add.w	lr, lr, #1
	  if (dist2 < *bptr) {
 8014b9c:	42a7      	cmp	r7, r4
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8014b9e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	    *bptr = dist2;
 8014ba0:	bfc8      	it	gt
 8014ba2:	601c      	strgt	r4, [r3, #0]
	  dist2 += xx2;
 8014ba4:	442c      	add	r4, r5
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8014ba6:	f505 7500 	add.w	r5, r5, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 8014baa:	bfc8      	it	gt
 8014bac:	f80e 6c01 	strbgt.w	r6, [lr, #-1]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8014bb0:	42af      	cmp	r7, r5
 8014bb2:	d1ef      	bne.n	8014b94 <fill_inverse_cmap+0x236>
	  cptr++;
 8014bb4:	9b04      	ldr	r3, [sp, #16]
	  bptr++;
 8014bb6:	f10c 0c10 	add.w	ip, ip, #16
	  cptr++;
 8014bba:	3304      	adds	r3, #4
 8014bbc:	9304      	str	r3, [sp, #16]
	dist1 += xx1;
 8014bbe:	9b01      	ldr	r3, [sp, #4]
 8014bc0:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8014bc2:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 8014bc6:	9301      	str	r3, [sp, #4]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8014bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bca:	4298      	cmp	r0, r3
 8014bcc:	d006      	beq.n	8014bdc <fill_inverse_cmap+0x27e>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8014bce:	f1ac 0304 	sub.w	r3, ip, #4
	xx2 = inc2;
 8014bd2:	9d06      	ldr	r5, [sp, #24]
 8014bd4:	f8dd e010 	ldr.w	lr, [sp, #16]
 8014bd8:	9c01      	ldr	r4, [sp, #4]
 8014bda:	e7db      	b.n	8014b94 <fill_inverse_cmap+0x236>
	  cptr++;
 8014bdc:	9b03      	ldr	r3, [sp, #12]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8014bde:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 8014be0:	980f      	ldr	r0, [sp, #60]	; 0x3c
	  cptr++;
 8014be2:	3320      	adds	r3, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8014be4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	  cptr++;
 8014be8:	9303      	str	r3, [sp, #12]
      dist0 += xx0;
 8014bea:	9b02      	ldr	r3, [sp, #8]
 8014bec:	4403      	add	r3, r0
 8014bee:	9302      	str	r3, [sp, #8]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8014bf0:	d1c4      	bne.n	8014b7c <fill_inverse_cmap+0x21e>
  for (i = 0; i < numcolors; i++) {
 8014bf2:	f10b 0b01 	add.w	fp, fp, #1
 8014bf6:	e6f7      	b.n	80149e8 <fill_inverse_cmap+0x8a>

08014bf8 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 8014bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bfc:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8014bfe:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8014c02:	b085      	sub	sp, #20
 8014c04:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 8014c06:	699b      	ldr	r3, [r3, #24]
{
 8014c08:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8014c0a:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 8014c0c:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 8014c0e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8014c10:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8014c12:	4555      	cmp	r5, sl
 8014c14:	db02      	blt.n	8014c1c <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 8014c16:	b005      	add	sp, #20
 8014c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 8014c1c:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 8014c20:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 8014c24:	9b01      	ldr	r3, [sp, #4]
 8014c26:	3403      	adds	r4, #3
 8014c28:	eb06 0b03 	add.w	fp, r6, r3
 8014c2c:	455e      	cmp	r6, fp
 8014c2e:	d101      	bne.n	8014c34 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 8014c30:	3501      	adds	r5, #1
 8014c32:	e7ee      	b.n	8014c12 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8014c34:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8014c38:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8014c3c:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 8014c40:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8014c42:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8014c46:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 8014c4a:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8014c4e:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 8014c50:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 8014c54:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8014c58:	f1bc 0f00 	cmp.w	ip, #0
 8014c5c:	d106      	bne.n	8014c6c <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 8014c5e:	4672      	mov	r2, lr
 8014c60:	9303      	str	r3, [sp, #12]
 8014c62:	9002      	str	r0, [sp, #8]
 8014c64:	f7ff fe7b 	bl	801495e <fill_inverse_cmap>
 8014c68:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 8014c6c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8014c70:	3403      	adds	r4, #3
 8014c72:	3b01      	subs	r3, #1
 8014c74:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 8014c78:	e7d8      	b.n	8014c2c <pass2_no_dither+0x34>

08014c7a <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 8014c7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014c7e:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
{
 8014c82:	b09f      	sub	sp, #124	; 0x7c
 8014c84:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 8014c86:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8014c8a:	9315      	str	r3, [sp, #84]	; 0x54
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8014c8c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8014c8e:	9305      	str	r3, [sp, #20]
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8014c90:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014c94:	930a      	str	r3, [sp, #40]	; 0x28
  int *error_limit = cquantize->error_limiter;
 8014c96:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8014c9a:	930b      	str	r3, [sp, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 8014c9c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8014ca0:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 8014ca4:	681a      	ldr	r2, [r3, #0]
 8014ca6:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 8014ca8:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 8014caa:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 8014cac:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 8014cae:	9318      	str	r3, [sp, #96]	; 0x60
  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8014cb0:	9b05      	ldr	r3, [sp, #20]
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8014cb2:	9a05      	ldr	r2, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8014cb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014cb8:	3b03      	subs	r3, #3
 8014cba:	9310      	str	r3, [sp, #64]	; 0x40
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8014cbc:	2306      	movs	r3, #6
 8014cbe:	fb02 3303 	mla	r3, r2, r3, r3
 8014cc2:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	9304      	str	r3, [sp, #16]
 8014cc8:	9b04      	ldr	r3, [sp, #16]
 8014cca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014ccc:	4293      	cmp	r3, r2
 8014cce:	db02      	blt.n	8014cd6 <pass2_fs_dither+0x5c>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 8014cd0:	b01f      	add	sp, #124	; 0x7c
 8014cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8014cd6:	9a04      	ldr	r2, [sp, #16]
 8014cd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cde:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 8014ce0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ce6:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8014ce8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8014cec:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 8014cee:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d036      	beq.n	8014d64 <pass2_fs_dither+0xea>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8014cf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cf8:	9a01      	ldr	r2, [sp, #4]
 8014cfa:	441a      	add	r2, r3
      outptr += width-1;
 8014cfc:	9b05      	ldr	r3, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8014cfe:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 8014d00:	3b01      	subs	r3, #1
 8014d02:	9a03      	ldr	r2, [sp, #12]
 8014d04:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8014d06:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 8014d08:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8014d0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d0c:	4413      	add	r3, r2
      dir3 = -3;
 8014d0e:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8014d12:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8014d14:	2300      	movs	r3, #0
      dir3 = -3;
 8014d16:	9208      	str	r2, [sp, #32]
      dir = -1;
 8014d18:	f04f 32ff 	mov.w	r2, #4294967295
 8014d1c:	920f      	str	r2, [sp, #60]	; 0x3c
 8014d1e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8014d22:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8014d24:	9b08      	ldr	r3, [sp, #32]
 8014d26:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 8014d28:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8014d2a:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 8014d2c:	4622      	mov	r2, r4
    belowerr0 = belowerr1 = belowerr2 = 0;
 8014d2e:	940c      	str	r4, [sp, #48]	; 0x30
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8014d30:	1cab      	adds	r3, r5, #2
 8014d32:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8014d34:	1d2b      	adds	r3, r5, #4
 8014d36:	9314      	str	r3, [sp, #80]	; 0x50
    for (col = width; col > 0; col--) {
 8014d38:	9b05      	ldr	r3, [sp, #20]
 8014d3a:	9309      	str	r3, [sp, #36]	; 0x24
    cur0 = cur1 = cur2 = 0;
 8014d3c:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8014d3e:	e9cd 4406 	strd	r4, r4, [sp, #24]
    belowerr0 = belowerr1 = belowerr2 = 0;
 8014d42:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8014d46:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014d48:	b98f      	cbnz	r7, 8014d6e <pass2_fs_dither+0xf4>
 8014d4a:	9b05      	ldr	r3, [sp, #20]
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 8014d4c:	9a02      	ldr	r2, [sp, #8]
 8014d4e:	435d      	muls	r5, r3
 8014d50:	9906      	ldr	r1, [sp, #24]
 8014d52:	9b02      	ldr	r3, [sp, #8]
 8014d54:	5351      	strh	r1, [r2, r5]
 8014d56:	442b      	add	r3, r5
    errorptr[1] = (FSERROR) bpreverr1;
 8014d58:	9a07      	ldr	r2, [sp, #28]
    errorptr[2] = (FSERROR) bpreverr2;
 8014d5a:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 8014d5c:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 8014d5e:	9b04      	ldr	r3, [sp, #16]
 8014d60:	3301      	adds	r3, #1
 8014d62:	e7b0      	b.n	8014cc6 <pass2_fs_dither+0x4c>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8014d64:	2301      	movs	r3, #1
      dir3 = 3;
 8014d66:	2203      	movs	r2, #3
      dir = 1;
 8014d68:	930f      	str	r3, [sp, #60]	; 0x3c
      dir3 = 3;
 8014d6a:	9208      	str	r2, [sp, #32]
 8014d6c:	e7d7      	b.n	8014d1e <pass2_fs_dither+0xa4>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8014d6e:	f936 c005 	ldrsh.w	ip, [r6, r5]
 8014d72:	1977      	adds	r7, r6, r5
 8014d74:	4463      	add	r3, ip
 8014d76:	9711      	str	r7, [sp, #68]	; 0x44
      cur0 = error_limit[cur0];
 8014d78:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8014d7a:	f103 0c08 	add.w	ip, r3, #8
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8014d7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d80:	5ef3      	ldrsh	r3, [r6, r3]
 8014d82:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8014d84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d86:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8014d88:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8014d8a:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8014d8c:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8014d8e:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8014d92:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8014d94:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8014d98:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8014d9c:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 8014d9e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 8014da2:	9f01      	ldr	r7, [sp, #4]
 8014da4:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8014da8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014daa:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8014dac:	443a      	add	r2, r7
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8014dae:	443b      	add	r3, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8014db0:	f811 b00c 	ldrb.w	fp, [r1, ip]
      cur1 += GETJSAMPLE(inptr[1]);
 8014db4:	9901      	ldr	r1, [sp, #4]
 8014db6:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8014db8:	f812 a001 	ldrb.w	sl, [r2, r1]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8014dbc:	ea4f 01eb 	mov.w	r1, fp, asr #3
      cur2 += GETJSAMPLE(inptr[2]);
 8014dc0:	9a01      	ldr	r2, [sp, #4]
 8014dc2:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8014dc4:	f813 9002 	ldrb.w	r9, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8014dc8:	ea4f 02aa 	mov.w	r2, sl, asr #2
 8014dcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014dce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014dd2:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8014dd6:	461f      	mov	r7, r3
 8014dd8:	ea4f 03e9 	mov.w	r3, r9, asr #3
      if (*cachep == 0)
 8014ddc:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8014de0:	f1bc 0f00 	cmp.w	ip, #0
 8014de4:	d105      	bne.n	8014df2 <pass2_fs_dither+0x178>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 8014de6:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 8014dea:	f7ff fdb8 	bl	801495e <fill_inverse_cmap>
 8014dee:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 8014df2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 8014df6:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 8014df8:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8014dfa:	9907      	ldr	r1, [sp, #28]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8014dfc:	9f01      	ldr	r7, [sp, #4]
	*outptr = (JSAMPLE) pixcode;
 8014dfe:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8014e00:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014e02:	5cd2      	ldrb	r2, [r2, r3]
 8014e04:	ebab 0b02 	sub.w	fp, fp, r2
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8014e08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014e0a:	5cd2      	ldrb	r2, [r2, r3]
 8014e0c:	ebaa 0a02 	sub.w	sl, sl, r2
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8014e10:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014e12:	5cd3      	ldrb	r3, [r2, r3]
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8014e14:	9a06      	ldr	r2, [sp, #24]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8014e16:	eba9 0903 	sub.w	r9, r9, r3
	cur0 += delta;		/* form error * 3 */
 8014e1a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8014e1e:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 8014e20:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8014e24:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 8014e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	belowerr0 = bnexterr;
 8014e28:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	bpreverr0 = belowerr0 + cur0;
 8014e2c:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 8014e2e:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	bpreverr0 = belowerr0 + cur0;
 8014e32:	9206      	str	r2, [sp, #24]
	cur1 += delta;		/* form error * 3 */
 8014e34:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8014e38:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 8014e3a:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8014e3e:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 8014e40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014e42:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 8014e44:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	bpreverr1 = belowerr1 + cur1;
 8014e48:	9107      	str	r1, [sp, #28]
	cur2 += delta;		/* form error * 3 */
 8014e4a:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8014e4e:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 8014e50:	eb01 0149 	add.w	r1, r1, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8014e54:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8014e56:	9e08      	ldr	r6, [sp, #32]
	bpreverr2 = belowerr2 + cur2;
 8014e58:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      inptr += dir3;		/* Advance pixel pointers to next column */
 8014e5a:	4437      	add	r7, r6
      outptr += dir;
 8014e5c:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 8014e5e:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 8014e60:	eb01 0149 	add.w	r1, r1, r9, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8014e64:	9701      	str	r7, [sp, #4]
      outptr += dir;
 8014e66:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014e68:	443e      	add	r6, r7
 8014e6a:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 8014e6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014e6e:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 8014e70:	e9cd a90d 	strd	sl, r9, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8014e74:	9609      	str	r6, [sp, #36]	; 0x24
 8014e76:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014e78:	e765      	b.n	8014d46 <pass2_fs_dither+0xcc>

08014e7a <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 8014e7a:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 8014e7c:	6843      	ldr	r3, [r0, #4]
 8014e7e:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8014e82:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014e84:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 8014e8c:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 8014e90:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 8014e94:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 8014e98:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 8014e9a:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 8014e9c:	425c      	negs	r4, r3
 8014e9e:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8014ea2:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 8014ea4:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8014ea8:	2b10      	cmp	r3, #16
 8014eaa:	d1f7      	bne.n	8014e9c <init_error_limit+0x22>
 8014eac:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 8014eb0:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8014eb4:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 8014eb8:	425d      	negs	r5, r3
 8014eba:	f844 3f04 	str.w	r3, [r4, #4]!
 8014ebe:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8014ec2:	f002 0501 	and.w	r5, r2, #1
 8014ec6:	3a01      	subs	r2, #1
 8014ec8:	442b      	add	r3, r5
 8014eca:	f112 0f32 	cmn.w	r2, #50	; 0x32
 8014ece:	d1f3      	bne.n	8014eb8 <init_error_limit+0x3e>
 8014ed0:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 8014ed4:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 8014ed8:	425c      	negs	r4, r3
 8014eda:	f841 3f04 	str.w	r3, [r1, #4]!
 8014ede:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 8014ee2:	4282      	cmp	r2, r0
 8014ee4:	d1f9      	bne.n	8014eda <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 8014ee6:	bd38      	pop	{r3, r4, r5, pc}

08014ee8 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 8014ee8:	4770      	bx	lr

08014eea <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 8014eea:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8014eee:	2201      	movs	r2, #1
 8014ef0:	61da      	str	r2, [r3, #28]
}
 8014ef2:	4770      	bx	lr

08014ef4 <start_pass_2_quant>:
{
 8014ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8014ef6:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8014efa:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 8014efc:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 8014f00:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d050      	beq.n	8014fa8 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 8014f06:	2302      	movs	r3, #2
 8014f08:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 8014f0c:	b189      	cbz	r1, 8014f32 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 8014f0e:	4b28      	ldr	r3, [pc, #160]	; (8014fb0 <start_pass_2_quant+0xbc>)
 8014f10:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 8014f12:	4b28      	ldr	r3, [pc, #160]	; (8014fb4 <start_pass_2_quant+0xc0>)
 8014f14:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 8014f16:	1f34      	subs	r4, r6, #4
 8014f18:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 8014f1a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8014f1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014f22:	2100      	movs	r1, #0
 8014f24:	f004 fbc8 	bl	80196b8 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8014f28:	42a6      	cmp	r6, r4
 8014f2a:	d1f6      	bne.n	8014f1a <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	61eb      	str	r3, [r5, #28]
}
 8014f30:	e02f      	b.n	8014f92 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 8014f32:	4b21      	ldr	r3, [pc, #132]	; (8014fb8 <start_pass_2_quant+0xc4>)
 8014f34:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 8014f36:	4b21      	ldr	r3, [pc, #132]	; (8014fbc <start_pass_2_quant+0xc8>)
 8014f38:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 8014f3a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	dc29      	bgt.n	8014f96 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8014f42:	223a      	movs	r2, #58	; 0x3a
 8014f44:	6823      	ldr	r3, [r4, #0]
 8014f46:	615a      	str	r2, [r3, #20]
 8014f48:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8014f4a:	619a      	str	r2, [r3, #24]
 8014f4c:	4620      	mov	r0, r4
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 8014f52:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8014f56:	2b02      	cmp	r3, #2
 8014f58:	d118      	bne.n	8014f8c <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8014f5a:	2306      	movs	r3, #6
 8014f5c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8014f5e:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 8014f60:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8014f62:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 8014f64:	b93b      	cbnz	r3, 8014f76 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8014f66:	6863      	ldr	r3, [r4, #4]
 8014f68:	2101      	movs	r1, #1
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	9201      	str	r2, [sp, #4]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	4798      	blx	r3
 8014f72:	9a01      	ldr	r2, [sp, #4]
 8014f74:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8014f76:	2100      	movs	r1, #0
 8014f78:	6a28      	ldr	r0, [r5, #32]
 8014f7a:	f004 fb9d 	bl	80196b8 <memset>
      if (cquantize->error_limiter == NULL)
 8014f7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8014f80:	b913      	cbnz	r3, 8014f88 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 8014f82:	4620      	mov	r0, r4
 8014f84:	f7ff ff79 	bl	8014e7a <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8014f88:	2300      	movs	r3, #0
 8014f8a:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 8014f8c:	69eb      	ldr	r3, [r5, #28]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d1c1      	bne.n	8014f16 <start_pass_2_quant+0x22>
}
 8014f92:	b002      	add	sp, #8
 8014f94:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 8014f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f9a:	ddda      	ble.n	8014f52 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8014f9c:	223b      	movs	r2, #59	; 0x3b
 8014f9e:	6823      	ldr	r3, [r4, #0]
 8014fa0:	615a      	str	r2, [r3, #20]
 8014fa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014fa6:	e7d0      	b.n	8014f4a <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 8014fa8:	2900      	cmp	r1, #0
 8014faa:	d1b0      	bne.n	8014f0e <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 8014fac:	4b04      	ldr	r3, [pc, #16]	; (8014fc0 <start_pass_2_quant+0xcc>)
 8014fae:	e7c1      	b.n	8014f34 <start_pass_2_quant+0x40>
 8014fb0:	0801490d 	.word	0x0801490d
 8014fb4:	08015203 	.word	0x08015203
 8014fb8:	08014c7b 	.word	0x08014c7b
 8014fbc:	08014ee9 	.word	0x08014ee9
 8014fc0:	08014bf9 	.word	0x08014bf9

08014fc4 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 8014fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8014fc8:	e9d1 7b00 	ldrd	r7, fp, [r1]
  hist3d histogram = cquantize->histogram;
 8014fcc:	6983      	ldr	r3, [r0, #24]
update_box (j_decompress_ptr cinfo, boxptr boxp)
 8014fce:	b085      	sub	sp, #20
  if (c0max > c0min)
 8014fd0:	455f      	cmp	r7, fp
  hist3d histogram = cquantize->histogram;
 8014fd2:	9301      	str	r3, [sp, #4]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8014fd4:	463b      	mov	r3, r7
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8014fd6:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8014fda:	e9d1 c002 	ldrd	ip, r0, [r1, #8]
  if (c0max > c0min)
 8014fde:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8014fe2:	db24      	blt.n	801502e <update_box.isra.0+0x6a>
  if (c1max > c1min)
 8014fe4:	4584      	cmp	ip, r0
 8014fe6:	4662      	mov	r2, ip
 8014fe8:	db5d      	blt.n	80150a6 <update_box.isra.0+0xe2>
  if (c2max > c2min)
 8014fea:	42a5      	cmp	r5, r4
 8014fec:	f280 80eb 	bge.w	80151c6 <update_box.isra.0+0x202>
	histp = & histogram[c0][c1min][c2];
 8014ff0:	0196      	lsls	r6, r2, #6
 8014ff2:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 8014ff6:	46ac      	mov	ip, r5
 8014ff8:	9602      	str	r6, [sp, #8]
 8014ffa:	fb07 f602 	mul.w	r6, r7, r2
 8014ffe:	9603      	str	r6, [sp, #12]
 8015000:	9e02      	ldr	r6, [sp, #8]
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015002:	469e      	mov	lr, r3
 8015004:	eb06 094c 	add.w	r9, r6, ip, lsl #1
 8015008:	9e03      	ldr	r6, [sp, #12]
 801500a:	44b1      	add	r9, r6
 801500c:	e083      	b.n	8015116 <update_box.isra.0+0x152>
	histp = & histogram[c0][c1][c2min];
 801500e:	9a01      	ldr	r2, [sp, #4]
 8015010:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8015014:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015018:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801501a:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 801501c:	454c      	cmp	r4, r9
 801501e:	da08      	bge.n	8015032 <update_box.isra.0+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8015020:	f108 0801 	add.w	r8, r8, #1
 8015024:	4540      	cmp	r0, r8
 8015026:	daf2      	bge.n	801500e <update_box.isra.0+0x4a>
    for (c0 = c0min; c0 <= c0max; c0++)
 8015028:	3301      	adds	r3, #1
 801502a:	459b      	cmp	fp, r3
 801502c:	db0f      	blt.n	801504e <update_box.isra.0+0x8a>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801502e:	46e0      	mov	r8, ip
 8015030:	e7f8      	b.n	8015024 <update_box.isra.0+0x60>
	  if (*histp++ != 0) {
 8015032:	f832 ab02 	ldrh.w	sl, [r2], #2
 8015036:	f1ba 0f00 	cmp.w	sl, #0
 801503a:	d005      	beq.n	8015048 <update_box.isra.0+0x84>
  if (c0max > c0min)
 801503c:	459b      	cmp	fp, r3
	    boxp->c0min = c0min = c0;
 801503e:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 8015040:	ddd0      	ble.n	8014fe4 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8015042:	465f      	mov	r7, fp
 8015044:	46e0      	mov	r8, ip
 8015046:	e00f      	b.n	8015068 <update_box.isra.0+0xa4>
	for (c2 = c2min; c2 <= c2max; c2++)
 8015048:	f109 0901 	add.w	r9, r9, #1
 801504c:	e7e6      	b.n	801501c <update_box.isra.0+0x58>
 have_c0min:
 801504e:	463b      	mov	r3, r7
 8015050:	e7f7      	b.n	8015042 <update_box.isra.0+0x7e>
	histp = & histogram[c0][c1][c2min];
 8015052:	9a01      	ldr	r2, [sp, #4]
 8015054:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8015058:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801505c:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801505e:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 8015060:	454c      	cmp	r4, r9
 8015062:	da07      	bge.n	8015074 <update_box.isra.0+0xb0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8015064:	f108 0801 	add.w	r8, r8, #1
 8015068:	4540      	cmp	r0, r8
 801506a:	daf2      	bge.n	8015052 <update_box.isra.0+0x8e>
    for (c0 = c0max; c0 >= c0min; c0--)
 801506c:	3f01      	subs	r7, #1
 801506e:	429f      	cmp	r7, r3
 8015070:	dbb8      	blt.n	8014fe4 <update_box.isra.0+0x20>
 8015072:	e7e7      	b.n	8015044 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 8015074:	f832 ab02 	ldrh.w	sl, [r2], #2
 8015078:	f1ba 0f00 	cmp.w	sl, #0
 801507c:	d002      	beq.n	8015084 <update_box.isra.0+0xc0>
	    goto have_c0max;
 801507e:	46bb      	mov	fp, r7
	    boxp->c0max = c0max = c0;
 8015080:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 8015082:	e7af      	b.n	8014fe4 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 8015084:	f109 0901 	add.w	r9, r9, #1
 8015088:	e7ea      	b.n	8015060 <update_box.isra.0+0x9c>
	histp = & histogram[c0][c1][c2min];
 801508a:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801508c:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 801508e:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8015092:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8015094:	454c      	cmp	r4, r9
 8015096:	da0a      	bge.n	80150ae <update_box.isra.0+0xea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8015098:	f108 0801 	add.w	r8, r8, #1
 801509c:	45d8      	cmp	r8, fp
 801509e:	ddf4      	ble.n	801508a <update_box.isra.0+0xc6>
    for (c1 = c1min; c1 <= c1max; c1++)
 80150a0:	3201      	adds	r2, #1
 80150a2:	4290      	cmp	r0, r2
 80150a4:	db11      	blt.n	80150ca <update_box.isra.0+0x106>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80150a6:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 80150a8:	eb0e 1a82 	add.w	sl, lr, r2, lsl #6
 80150ac:	e7f6      	b.n	801509c <update_box.isra.0+0xd8>
	  if (*histp++ != 0) {
 80150ae:	f837 6b02 	ldrh.w	r6, [r7], #2
 80150b2:	b13e      	cbz	r6, 80150c4 <update_box.isra.0+0x100>
  if (c1max > c1min)
 80150b4:	4290      	cmp	r0, r2
	    boxp->c1min = c1min = c1;
 80150b6:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 80150b8:	dd97      	ble.n	8014fea <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80150ba:	4684      	mov	ip, r0
 80150bc:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 80150be:	eb0e 1a8c 	add.w	sl, lr, ip, lsl #6
 80150c2:	e00d      	b.n	80150e0 <update_box.isra.0+0x11c>
	for (c2 = c2min; c2 <= c2max; c2++)
 80150c4:	f109 0901 	add.w	r9, r9, #1
 80150c8:	e7e4      	b.n	8015094 <update_box.isra.0+0xd0>
 have_c1min:
 80150ca:	4662      	mov	r2, ip
 80150cc:	e7f5      	b.n	80150ba <update_box.isra.0+0xf6>
	histp = & histogram[c0][c1][c2min];
 80150ce:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80150d0:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 80150d2:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 80150d6:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 80150d8:	454c      	cmp	r4, r9
 80150da:	da09      	bge.n	80150f0 <update_box.isra.0+0x12c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80150dc:	f108 0801 	add.w	r8, r8, #1
 80150e0:	45c3      	cmp	fp, r8
 80150e2:	daf4      	bge.n	80150ce <update_box.isra.0+0x10a>
    for (c1 = c1max; c1 >= c1min; c1--)
 80150e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80150e8:	4594      	cmp	ip, r2
 80150ea:	f6ff af7e 	blt.w	8014fea <update_box.isra.0+0x26>
 80150ee:	e7e5      	b.n	80150bc <update_box.isra.0+0xf8>
	  if (*histp++ != 0) {
 80150f0:	f837 6b02 	ldrh.w	r6, [r7], #2
 80150f4:	b11e      	cbz	r6, 80150fe <update_box.isra.0+0x13a>
	    goto have_c1max;
 80150f6:	4660      	mov	r0, ip
	    boxp->c1max = c1max = c1;
 80150f8:	f8c1 c00c 	str.w	ip, [r1, #12]
	    goto have_c1max;
 80150fc:	e775      	b.n	8014fea <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 80150fe:	f109 0901 	add.w	r9, r9, #1
 8015102:	e7e9      	b.n	80150d8 <update_box.isra.0+0x114>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015104:	9e01      	ldr	r6, [sp, #4]
 8015106:	4690      	mov	r8, r2
 8015108:	f856 702e 	ldr.w	r7, [r6, lr, lsl #2]
 801510c:	444f      	add	r7, r9
 801510e:	4580      	cmp	r8, r0
 8015110:	dd11      	ble.n	8015136 <update_box.isra.0+0x172>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8015112:	f10e 0e01 	add.w	lr, lr, #1
 8015116:	45f3      	cmp	fp, lr
 8015118:	daf4      	bge.n	8015104 <update_box.isra.0+0x140>
    for (c2 = c2min; c2 <= c2max; c2++)
 801511a:	f10c 0c01 	add.w	ip, ip, #1
 801511e:	4564      	cmp	r4, ip
 8015120:	f6bf af6e 	bge.w	8015000 <update_box.isra.0+0x3c>
 have_c2min:
 8015124:	46ac      	mov	ip, r5
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015126:	4627      	mov	r7, r4
 8015128:	9d02      	ldr	r5, [sp, #8]
 801512a:	469e      	mov	lr, r3
 801512c:	eb05 0947 	add.w	r9, r5, r7, lsl #1
 8015130:	9d03      	ldr	r5, [sp, #12]
 8015132:	44a9      	add	r9, r5
 8015134:	e034      	b.n	80151a0 <update_box.isra.0+0x1dc>
	  if (*histp != 0) {
 8015136:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 801513a:	f837 a00a 	ldrh.w	sl, [r7, sl]
 801513e:	f1ba 0f00 	cmp.w	sl, #0
 8015142:	d021      	beq.n	8015188 <update_box.isra.0+0x1c4>
  if (c2max > c2min)
 8015144:	4564      	cmp	r4, ip
	    boxp->c2min = c2min = c2;
 8015146:	f8c1 c010 	str.w	ip, [r1, #16]
  if (c2max > c2min)
 801514a:	dcec      	bgt.n	8015126 <update_box.isra.0+0x162>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801514c:	1a85      	subs	r5, r0, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801514e:	ebab 0e03 	sub.w	lr, fp, r3
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8015152:	eba4 070c 	sub.w	r7, r4, ip
 8015156:	ea4f 094c 	mov.w	r9, ip, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801515a:	ea4f 08c5 	mov.w	r8, r5, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801515e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8015162:	eb08 0885 	add.w	r8, r8, r5, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8015166:	013d      	lsls	r5, r7, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8015168:	fb08 f808 	mul.w	r8, r8, r8
 801516c:	fb0e 880e 	mla	r8, lr, lr, r8
  ccount = 0;
 8015170:	f04f 0e00 	mov.w	lr, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8015174:	fb05 8505 	mla	r5, r5, r5, r8
 8015178:	618d      	str	r5, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 801517a:	459b      	cmp	fp, r3
 801517c:	da3f      	bge.n	80151fe <update_box.isra.0+0x23a>
  boxp->colorcount = ccount;
 801517e:	f8c1 e01c 	str.w	lr, [r1, #28]
}
 8015182:	b005      	add	sp, #20
 8015184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8015188:	f108 0801 	add.w	r8, r8, #1
 801518c:	e7bf      	b.n	801510e <update_box.isra.0+0x14a>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801518e:	9d01      	ldr	r5, [sp, #4]
 8015190:	4690      	mov	r8, r2
 8015192:	f855 502e 	ldr.w	r5, [r5, lr, lsl #2]
 8015196:	444d      	add	r5, r9
 8015198:	4540      	cmp	r0, r8
 801519a:	da07      	bge.n	80151ac <update_box.isra.0+0x1e8>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801519c:	f10e 0e01 	add.w	lr, lr, #1
 80151a0:	45f3      	cmp	fp, lr
 80151a2:	daf4      	bge.n	801518e <update_box.isra.0+0x1ca>
    for (c2 = c2max; c2 >= c2min; c2--)
 80151a4:	3f01      	subs	r7, #1
 80151a6:	4567      	cmp	r7, ip
 80151a8:	dbd0      	blt.n	801514c <update_box.isra.0+0x188>
 80151aa:	e7bd      	b.n	8015128 <update_box.isra.0+0x164>
	  if (*histp != 0) {
 80151ac:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80151b0:	f835 a00a 	ldrh.w	sl, [r5, sl]
 80151b4:	f1ba 0f00 	cmp.w	sl, #0
 80151b8:	d002      	beq.n	80151c0 <update_box.isra.0+0x1fc>
	    goto have_c2max;
 80151ba:	463c      	mov	r4, r7
	    boxp->c2max = c2max = c2;
 80151bc:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 80151be:	e7c5      	b.n	801514c <update_box.isra.0+0x188>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80151c0:	f108 0801 	add.w	r8, r8, #1
 80151c4:	e7e8      	b.n	8015198 <update_box.isra.0+0x1d4>
 have_c2min:
 80151c6:	46ac      	mov	ip, r5
 80151c8:	e7c0      	b.n	801514c <update_box.isra.0+0x188>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80151ca:	eb09 1587 	add.w	r5, r9, r7, lsl #6
 80151ce:	f1a5 0802 	sub.w	r8, r5, #2
 80151d2:	9d01      	ldr	r5, [sp, #4]
 80151d4:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 80151d8:	4445      	add	r5, r8
 80151da:	46e0      	mov	r8, ip
 80151dc:	4544      	cmp	r4, r8
 80151de:	da04      	bge.n	80151ea <update_box.isra.0+0x226>
    for (c1 = c1min; c1 <= c1max; c1++) {
 80151e0:	3701      	adds	r7, #1
 80151e2:	42b8      	cmp	r0, r7
 80151e4:	daf1      	bge.n	80151ca <update_box.isra.0+0x206>
  for (c0 = c0min; c0 <= c0max; c0++)
 80151e6:	3301      	adds	r3, #1
 80151e8:	e7c7      	b.n	801517a <update_box.isra.0+0x1b6>
	if (*histp != 0) {
 80151ea:	f835 af02 	ldrh.w	sl, [r5, #2]!
 80151ee:	f1ba 0f00 	cmp.w	sl, #0
 80151f2:	d001      	beq.n	80151f8 <update_box.isra.0+0x234>
	  ccount++;
 80151f4:	f10e 0e01 	add.w	lr, lr, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80151f8:	f108 0801 	add.w	r8, r8, #1
 80151fc:	e7ee      	b.n	80151dc <update_box.isra.0+0x218>
 80151fe:	4617      	mov	r7, r2
 8015200:	e7ef      	b.n	80151e2 <update_box.isra.0+0x21e>

08015202 <finish_pass1>:
{
 8015202:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015206:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 801520a:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 801520c:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 801520e:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015212:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 8015214:	691b      	ldr	r3, [r3, #16]
{
 8015216:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 8015218:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 801521c:	9b02      	ldr	r3, [sp, #8]
 801521e:	695b      	ldr	r3, [r3, #20]
 8015220:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8015222:	9a01      	ldr	r2, [sp, #4]
 8015224:	6843      	ldr	r3, [r0, #4]
 8015226:	0152      	lsls	r2, r2, #5
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 801522c:	2300      	movs	r3, #0
 801522e:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 8015230:	213f      	movs	r1, #63	; 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8015232:	4605      	mov	r5, r0
  boxlist[0].c1min = 0;
 8015234:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 8015236:	6142      	str	r2, [r0, #20]
 8015238:	46a8      	mov	r8, r5
  boxlist[0].c2min = 0;
 801523a:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 801523e:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 8015242:	9b00      	ldr	r3, [sp, #0]
 8015244:	4601      	mov	r1, r0
 8015246:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 801524a:	f7ff febb 	bl	8014fc4 <update_box.isra.0>
  while (numboxes < desired_colors) {
 801524e:	9b01      	ldr	r3, [sp, #4]
 8015250:	455b      	cmp	r3, fp
 8015252:	dc24      	bgt.n	801529e <finish_pass1+0x9c>
 8015254:	2300      	movs	r3, #0
  hist3d histogram = cquantize->histogram;
 8015256:	9a00      	ldr	r2, [sp, #0]
 8015258:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 801525c:	6992      	ldr	r2, [r2, #24]
 801525e:	9203      	str	r2, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8015260:	e9d8 7200 	ldrd	r7, r2, [r8]
 8015264:	9204      	str	r2, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8015266:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801526a:	9205      	str	r2, [sp, #20]
 801526c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8015270:	9206      	str	r2, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8015272:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015276:	9201      	str	r2, [sp, #4]
 8015278:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801527c:	9207      	str	r2, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 801527e:	9a01      	ldr	r2, [sp, #4]
 8015280:	0052      	lsls	r2, r2, #1
 8015282:	9209      	str	r2, [sp, #36]	; 0x24
  long c2total = 0;
 8015284:	2200      	movs	r2, #0
  long c1total = 0;
 8015286:	4692      	mov	sl, r2
  long c0total = 0;
 8015288:	4691      	mov	r9, r2
  long total = 0;
 801528a:	4611      	mov	r1, r2
  for (c0 = c0min; c0 <= c0max; c0++)
 801528c:	9804      	ldr	r0, [sp, #16]
 801528e:	42b8      	cmp	r0, r7
 8015290:	f2c0 8098 	blt.w	80153c4 <finish_pass1+0x1c2>
 8015294:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 8015296:	9e05      	ldr	r6, [sp, #20]
 8015298:	3004      	adds	r0, #4
 801529a:	9008      	str	r0, [sp, #32]
 801529c:	e07c      	b.n	8015398 <finish_pass1+0x196>
    if (numboxes*2 <= desired_colors) {
 801529e:	9b01      	ldr	r3, [sp, #4]
 80152a0:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 80152a4:	db4f      	blt.n	8015346 <finish_pass1+0x144>
  boxptr which = NULL;
 80152a6:	2300      	movs	r3, #0
 80152a8:	4628      	mov	r0, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80152aa:	461e      	mov	r6, r3
  register long maxc = 0;
 80152ac:	461f      	mov	r7, r3
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 80152ae:	69c2      	ldr	r2, [r0, #28]
 80152b0:	42ba      	cmp	r2, r7
 80152b2:	dd04      	ble.n	80152be <finish_pass1+0xbc>
 80152b4:	6984      	ldr	r4, [r0, #24]
 80152b6:	2c00      	cmp	r4, #0
 80152b8:	bfc4      	itt	gt
 80152ba:	4603      	movgt	r3, r0
 80152bc:	4617      	movgt	r7, r2
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80152be:	3601      	adds	r6, #1
 80152c0:	3020      	adds	r0, #32
 80152c2:	45b3      	cmp	fp, r6
 80152c4:	d1f3      	bne.n	80152ae <finish_pass1+0xac>
    if (b1 == NULL)		/* no splittable boxes left! */
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d0c5      	beq.n	8015256 <finish_pass1+0x54>
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 80152ca:	685a      	ldr	r2, [r3, #4]
 80152cc:	f101 0920 	add.w	r9, r1, #32
 80152d0:	624a      	str	r2, [r1, #36]	; 0x24
 80152d2:	68d8      	ldr	r0, [r3, #12]
 80152d4:	62c8      	str	r0, [r1, #44]	; 0x2c
 80152d6:	6958      	ldr	r0, [r3, #20]
 80152d8:	6348      	str	r0, [r1, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 80152da:	6818      	ldr	r0, [r3, #0]
 80152dc:	6208      	str	r0, [r1, #32]
 80152de:	6898      	ldr	r0, [r3, #8]
 80152e0:	6288      	str	r0, [r1, #40]	; 0x28
 80152e2:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80152e6:	f8c1 c030 	str.w	ip, [r1, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 80152ea:	6818      	ldr	r0, [r3, #0]
 80152ec:	9003      	str	r0, [sp, #12]
 80152ee:	1a10      	subs	r0, r2, r0
 80152f0:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 80152f4:	e9d3 0602 	ldrd	r0, r6, [r3, #8]
 80152f8:	9004      	str	r0, [sp, #16]
 80152fa:	1a30      	subs	r0, r6, r0
 80152fc:	00c7      	lsls	r7, r0, #3
 80152fe:	eb07 0780 	add.w	r7, r7, r0, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8015302:	6958      	ldr	r0, [r3, #20]
 8015304:	eba0 0a0c 	sub.w	sl, r0, ip
    if (c2 > cmax) { cmax = c2; n = 2; }
 8015308:	ebb7 1f0a 	cmp.w	r7, sl, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 801530c:	ea4f 140a 	mov.w	r4, sl, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 8015310:	f2c0 808c 	blt.w	801542c <finish_pass1+0x22a>
    if (c0 > cmax) { n = 0; }
 8015314:	45be      	cmp	lr, r7
 8015316:	dd25      	ble.n	8015364 <finish_pass1+0x162>
      lb = (b1->c0max + b1->c0min) / 2;
 8015318:	9803      	ldr	r0, [sp, #12]
 801531a:	4402      	add	r2, r0
 801531c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8015320:	1052      	asrs	r2, r2, #1
      b1->c0max = lb;
 8015322:	605a      	str	r2, [r3, #4]
      b2->c0min = lb+1;
 8015324:	3201      	adds	r2, #1
 8015326:	620a      	str	r2, [r1, #32]
    update_box(cinfo, b1);
 8015328:	4619      	mov	r1, r3
 801532a:	9b00      	ldr	r3, [sp, #0]
    numboxes++;
 801532c:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 8015330:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8015334:	f7ff fe46 	bl	8014fc4 <update_box.isra.0>
    update_box(cinfo, b2);
 8015338:	9b00      	ldr	r3, [sp, #0]
 801533a:	4649      	mov	r1, r9
 801533c:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8015340:	f7ff fe40 	bl	8014fc4 <update_box.isra.0>
    numboxes++;
 8015344:	e783      	b.n	801524e <finish_pass1+0x4c>
  boxptr which = NULL;
 8015346:	2300      	movs	r3, #0
 8015348:	462a      	mov	r2, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801534a:	4618      	mov	r0, r3
  register INT32 maxv = 0;
 801534c:	461e      	mov	r6, r3
    if (boxp->volume > maxv) {
 801534e:	6997      	ldr	r7, [r2, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8015350:	3001      	adds	r0, #1
    if (boxp->volume > maxv) {
 8015352:	42b7      	cmp	r7, r6
 8015354:	bfc4      	itt	gt
 8015356:	4613      	movgt	r3, r2
 8015358:	463e      	movgt	r6, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801535a:	4583      	cmp	fp, r0
 801535c:	f102 0220 	add.w	r2, r2, #32
 8015360:	d1f5      	bne.n	801534e <finish_pass1+0x14c>
 8015362:	e7b0      	b.n	80152c6 <finish_pass1+0xc4>
      lb = (b1->c1max + b1->c1min) / 2;
 8015364:	9a04      	ldr	r2, [sp, #16]
 8015366:	4416      	add	r6, r2
 8015368:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801536c:	1076      	asrs	r6, r6, #1
      b1->c1max = lb;
 801536e:	60de      	str	r6, [r3, #12]
      b2->c1min = lb+1;
 8015370:	3601      	adds	r6, #1
 8015372:	628e      	str	r6, [r1, #40]	; 0x28
      break;
 8015374:	e7d8      	b.n	8015328 <finish_pass1+0x126>
      histp = & histogram[c0][c1][c2min];
 8015376:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015378:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 801537c:	9c03      	ldr	r4, [sp, #12]
 801537e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8015382:	f10e 0e02 	add.w	lr, lr, #2
 8015386:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 801538a:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 801538e:	4428      	add	r0, r5
      for (c2 = c2min; c2 <= c2max; c2++) {
 8015390:	9c07      	ldr	r4, [sp, #28]
 8015392:	4564      	cmp	r4, ip
 8015394:	da05      	bge.n	80153a2 <finish_pass1+0x1a0>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8015396:	3601      	adds	r6, #1
 8015398:	9806      	ldr	r0, [sp, #24]
 801539a:	42b0      	cmp	r0, r6
 801539c:	daeb      	bge.n	8015376 <finish_pass1+0x174>
  for (c0 = c0min; c0 <= c0max; c0++)
 801539e:	3701      	adds	r7, #1
 80153a0:	e774      	b.n	801528c <finish_pass1+0x8a>
	if ((count = *histp++) != 0) {
 80153a2:	f830 5b02 	ldrh.w	r5, [r0], #2
 80153a6:	b155      	cbz	r5, 80153be <finish_pass1+0x1bc>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 80153a8:	9c08      	ldr	r4, [sp, #32]
	  total += count;
 80153aa:	4429      	add	r1, r5
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 80153ac:	fb0e aa05 	mla	sl, lr, r5, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 80153b0:	fb04 9905 	mla	r9, r4, r5, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 80153b4:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 80153b8:	3404      	adds	r4, #4
 80153ba:	fb05 2204 	mla	r2, r5, r4, r2
      for (c2 = c2min; c2 <= c2max; c2++) {
 80153be:	f10c 0c01 	add.w	ip, ip, #1
 80153c2:	e7e5      	b.n	8015390 <finish_pass1+0x18e>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 80153c4:	eb09 0961 	add.w	r9, r9, r1, asr #1
 80153c8:	9800      	ldr	r0, [sp, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 80153ca:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
  for (i = 0; i < numboxes; i++)
 80153ce:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 80153d2:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 80153d6:	eb02 0261 	add.w	r2, r2, r1, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 80153da:	fb99 f9f1 	sdiv	r9, r9, r1
 80153de:	6800      	ldr	r0, [r0, #0]
 80153e0:	f800 9003 	strb.w	r9, [r0, r3]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 80153e4:	9800      	ldr	r0, [sp, #0]
 80153e6:	fb9a faf1 	sdiv	sl, sl, r1
 80153ea:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 80153ee:	6840      	ldr	r0, [r0, #4]
 80153f0:	f800 a003 	strb.w	sl, [r0, r3]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 80153f4:	9800      	ldr	r0, [sp, #0]
 80153f6:	fb92 f1f1 	sdiv	r1, r2, r1
 80153fa:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 80153fe:	6880      	ldr	r0, [r0, #8]
 8015400:	54c1      	strb	r1, [r0, r3]
  for (i = 0; i < numboxes; i++)
 8015402:	3301      	adds	r3, #1
 8015404:	455b      	cmp	r3, fp
 8015406:	f47f af26 	bne.w	8015256 <finish_pass1+0x54>
  cinfo->actual_number_of_colors = numboxes;
 801540a:	9a00      	ldr	r2, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 801540c:	2162      	movs	r1, #98	; 0x62
 801540e:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 8015410:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8015414:	6812      	ldr	r2, [r2, #0]
 8015416:	e9c2 1305 	strd	r1, r3, [r2, #20]
 801541a:	6853      	ldr	r3, [r2, #4]
 801541c:	2101      	movs	r1, #1
 801541e:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 8015420:	2301      	movs	r3, #1
 8015422:	9a02      	ldr	r2, [sp, #8]
 8015424:	61d3      	str	r3, [r2, #28]
}
 8015426:	b00b      	add	sp, #44	; 0x2c
 8015428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 801542c:	45a6      	cmp	lr, r4
 801542e:	f73f af73 	bgt.w	8015318 <finish_pass1+0x116>
      lb = (b1->c2max + b1->c2min) / 2;
 8015432:	4460      	add	r0, ip
 8015434:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8015438:	1040      	asrs	r0, r0, #1
      b1->c2max = lb;
 801543a:	6158      	str	r0, [r3, #20]
      b2->c2min = lb+1;
 801543c:	3001      	adds	r0, #1
 801543e:	6308      	str	r0, [r1, #48]	; 0x30
      break;
 8015440:	e772      	b.n	8015328 <finish_pass1+0x126>
	...

08015444 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 8015444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015446:	6843      	ldr	r3, [r0, #4]
 8015448:	222c      	movs	r2, #44	; 0x2c
 801544a:	2101      	movs	r1, #1
{
 801544c:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 8015452:	4b30      	ldr	r3, [pc, #192]	; (8015514 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8015454:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015458:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 801545a:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 801545c:	4b2e      	ldr	r3, [pc, #184]	; (8015518 <jinit_2pass_quantizer+0xd4>)
 801545e:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8015460:	2300      	movs	r3, #0
 8015462:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 8015464:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 8015466:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015468:	2b03      	cmp	r3, #3
 801546a:	d005      	beq.n	8015478 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 801546c:	6823      	ldr	r3, [r4, #0]
 801546e:	2230      	movs	r2, #48	; 0x30
 8015470:	4620      	mov	r0, r4
 8015472:	615a      	str	r2, [r3, #20]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8015478:	6863      	ldr	r3, [r4, #4]
 801547a:	2600      	movs	r6, #0
 801547c:	2280      	movs	r2, #128	; 0x80
 801547e:	2101      	movs	r1, #1
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	4620      	mov	r0, r4
 8015484:	4798      	blx	r3
 8015486:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 8015488:	6863      	ldr	r3, [r4, #4]
 801548a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801548e:	69af      	ldr	r7, [r5, #24]
 8015490:	2101      	movs	r1, #1
 8015492:	685b      	ldr	r3, [r3, #4]
 8015494:	4620      	mov	r0, r4
 8015496:	4798      	blx	r3
 8015498:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 801549a:	3604      	adds	r6, #4
 801549c:	2e80      	cmp	r6, #128	; 0x80
 801549e:	d1f3      	bne.n	8015488 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 80154a0:	2301      	movs	r3, #1
 80154a2:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 80154a4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d031      	beq.n	801550e <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 80154aa:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 80154ac:	2e07      	cmp	r6, #7
 80154ae:	dc25      	bgt.n	80154fc <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 80154b0:	223a      	movs	r2, #58	; 0x3a
 80154b2:	6823      	ldr	r3, [r4, #0]
 80154b4:	615a      	str	r2, [r3, #20]
 80154b6:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80154b8:	619a      	str	r2, [r3, #24]
 80154ba:	4620      	mov	r0, r4
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 80154c0:	6863      	ldr	r3, [r4, #4]
 80154c2:	4632      	mov	r2, r6
 80154c4:	2101      	movs	r1, #1
 80154c6:	4620      	mov	r0, r4
 80154c8:	689f      	ldr	r7, [r3, #8]
 80154ca:	2303      	movs	r3, #3
 80154cc:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 80154ce:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 80154d2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80154d6:	b1e3      	cbz	r3, 8015512 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 80154d8:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 80154da:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80154dc:	4620      	mov	r0, r4
 80154de:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 80154e0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 80154e4:	2306      	movs	r3, #6
 80154e6:	435a      	muls	r2, r3
 80154e8:	6863      	ldr	r3, [r4, #4]
 80154ea:	320c      	adds	r2, #12
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	4798      	blx	r3
 80154f0:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 80154f2:	4620      	mov	r0, r4
  }
}
 80154f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 80154f8:	f7ff bcbf 	b.w	8014e7a <init_error_limit>
    if (desired > MAXNUMCOLORS)
 80154fc:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8015500:	ddde      	ble.n	80154c0 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8015502:	223b      	movs	r2, #59	; 0x3b
 8015504:	6823      	ldr	r3, [r4, #0]
 8015506:	615a      	str	r2, [r3, #20]
 8015508:	f44f 7280 	mov.w	r2, #256	; 0x100
 801550c:	e7d4      	b.n	80154b8 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 801550e:	612b      	str	r3, [r5, #16]
 8015510:	e7df      	b.n	80154d2 <jinit_2pass_quantizer+0x8e>
}
 8015512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015514:	08014ef5 	.word	0x08014ef5
 8015518:	08014eeb 	.word	0x08014eeb

0801551c <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 801551c:	4408      	add	r0, r1
 801551e:	3801      	subs	r0, #1
}
 8015520:	fb90 f0f1 	sdiv	r0, r0, r1
 8015524:	4770      	bx	lr

08015526 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 8015526:	1e4b      	subs	r3, r1, #1
 8015528:	4418      	add	r0, r3
  return a - (a % b);
 801552a:	fb90 f3f1 	sdiv	r3, r0, r1
 801552e:	fb01 0113 	mls	r1, r1, r3, r0
}
 8015532:	1a40      	subs	r0, r0, r1
 8015534:	4770      	bx	lr

08015536 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 8015536:	b570      	push	{r4, r5, r6, lr}
 8015538:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 801553a:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 801553e:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 8015542:	2e00      	cmp	r6, #0
 8015544:	dc00      	bgt.n	8015548 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8015546:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8015548:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 801554a:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 801554c:	f854 1b04 	ldr.w	r1, [r4], #4
 8015550:	f855 0b04 	ldr.w	r0, [r5], #4
 8015554:	f004 f8a2 	bl	801969c <memcpy>
  for (row = num_rows; row > 0; row--) {
 8015558:	e7f3      	b.n	8015542 <jcopy_sample_rows+0xc>

0801555a <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 801555a:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 801555c:	01d2      	lsls	r2, r2, #7
 801555e:	4601      	mov	r1, r0
 8015560:	4618      	mov	r0, r3
 8015562:	f004 b89b 	b.w	801969c <memcpy>
	...

08015568 <ai_buffer_get_size>:
 8015568:	b368      	cbz	r0, 80155c6 <ai_buffer_get_size+0x5e>
 801556a:	4b17      	ldr	r3, [pc, #92]	; (80155c8 <ai_buffer_get_size+0x60>)
 801556c:	4a17      	ldr	r2, [pc, #92]	; (80155cc <ai_buffer_get_size+0x64>)
 801556e:	b410      	push	{r4}
 8015570:	6804      	ldr	r4, [r0, #0]
 8015572:	4023      	ands	r3, r4
 8015574:	4293      	cmp	r3, r2
 8015576:	d123      	bne.n	80155c0 <ai_buffer_get_size+0x58>
 8015578:	b311      	cbz	r1, 80155c0 <ai_buffer_get_size+0x58>
 801557a:	6984      	ldr	r4, [r0, #24]
 801557c:	6862      	ldr	r2, [r4, #4]
 801557e:	321f      	adds	r2, #31
 8015580:	f022 021f 	bic.w	r2, r2, #31
 8015584:	7d03      	ldrb	r3, [r0, #20]
 8015586:	6941      	ldr	r1, [r0, #20]
 8015588:	f1a3 0301 	sub.w	r3, r3, #1
 801558c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8015590:	fab3 f383 	clz	r3, r3
 8015594:	095b      	lsrs	r3, r3, #5
 8015596:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801559a:	da0c      	bge.n	80155b6 <ai_buffer_get_size+0x4e>
 801559c:	2b01      	cmp	r3, #1
 801559e:	d103      	bne.n	80155a8 <ai_buffer_get_size+0x40>
 80155a0:	2802      	cmp	r0, #2
 80155a2:	f04f 0302 	mov.w	r3, #2
 80155a6:	d006      	beq.n	80155b6 <ai_buffer_get_size+0x4e>
 80155a8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80155ac:	3301      	adds	r3, #1
 80155ae:	4298      	cmp	r0, r3
 80155b0:	fb01 f202 	mul.w	r2, r1, r2
 80155b4:	d1f2      	bne.n	801559c <ai_buffer_get_size+0x34>
 80155b6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80155ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155be:	4770      	bx	lr
 80155c0:	6984      	ldr	r4, [r0, #24]
 80155c2:	6862      	ldr	r2, [r4, #4]
 80155c4:	e7de      	b.n	8015584 <ai_buffer_get_size+0x1c>
 80155c6:	4770      	bx	lr
 80155c8:	017fffff 	.word	0x017fffff
 80155cc:	000400c0 	.word	0x000400c0

080155d0 <ai_buffer_array_sane>:
 80155d0:	b138      	cbz	r0, 80155e2 <ai_buffer_array_sane+0x12>
 80155d2:	6843      	ldr	r3, [r0, #4]
 80155d4:	b123      	cbz	r3, 80155e0 <ai_buffer_array_sane+0x10>
 80155d6:	8840      	ldrh	r0, [r0, #2]
 80155d8:	3800      	subs	r0, #0
 80155da:	bf18      	it	ne
 80155dc:	2001      	movne	r0, #1
 80155de:	4770      	bx	lr
 80155e0:	4618      	mov	r0, r3
 80155e2:	4770      	bx	lr

080155e4 <ai_buffer_array_item_set_address>:
 80155e4:	b150      	cbz	r0, 80155fc <ai_buffer_array_item_set_address+0x18>
 80155e6:	6843      	ldr	r3, [r0, #4]
 80155e8:	b14b      	cbz	r3, 80155fe <ai_buffer_array_item_set_address+0x1a>
 80155ea:	8840      	ldrh	r0, [r0, #2]
 80155ec:	b900      	cbnz	r0, 80155f0 <ai_buffer_array_item_set_address+0xc>
 80155ee:	4770      	bx	lr
 80155f0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80155f4:	2001      	movs	r0, #1
 80155f6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80155fa:	604a      	str	r2, [r1, #4]
 80155fc:	4770      	bx	lr
 80155fe:	4618      	mov	r0, r3
 8015600:	4770      	bx	lr
 8015602:	bf00      	nop

08015604 <_ai_platform_acquire_crc>:
 8015604:	2001      	movs	r0, #1
 8015606:	4770      	bx	lr

08015608 <_ai_platform_release_crc>:
 8015608:	4770      	bx	lr
 801560a:	bf00      	nop

0801560c <ai_platform_get_weights_map>:
 801560c:	2900      	cmp	r1, #0
 801560e:	bf18      	it	ne
 8015610:	2800      	cmpne	r0, #0
 8015612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015614:	bf0c      	ite	eq
 8015616:	2401      	moveq	r4, #1
 8015618:	2400      	movne	r4, #0
 801561a:	2a00      	cmp	r2, #0
 801561c:	bf08      	it	eq
 801561e:	f044 0401 	orreq.w	r4, r4, #1
 8015622:	b114      	cbz	r4, 801562a <ai_platform_get_weights_map+0x1e>
 8015624:	2400      	movs	r4, #0
 8015626:	4620      	mov	r0, r4
 8015628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801562a:	4616      	mov	r6, r2
 801562c:	4b22      	ldr	r3, [pc, #136]	; (80156b8 <ai_platform_get_weights_map+0xac>)
 801562e:	6812      	ldr	r2, [r2, #0]
 8015630:	4605      	mov	r5, r0
 8015632:	460f      	mov	r7, r1
 8015634:	429a      	cmp	r2, r3
 8015636:	d022      	beq.n	801567e <ai_platform_get_weights_map+0x72>
 8015638:	6870      	ldr	r0, [r6, #4]
 801563a:	2800      	cmp	r0, #0
 801563c:	d0f2      	beq.n	8015624 <ai_platform_get_weights_map+0x18>
 801563e:	6806      	ldr	r6, [r0, #0]
 8015640:	429e      	cmp	r6, r3
 8015642:	d006      	beq.n	8015652 <ai_platform_get_weights_map+0x46>
 8015644:	f1a1 0401 	sub.w	r4, r1, #1
 8015648:	6028      	str	r0, [r5, #0]
 801564a:	fab4 f484 	clz	r4, r4
 801564e:	0964      	lsrs	r4, r4, #5
 8015650:	e7e9      	b.n	8015626 <ai_platform_get_weights_map+0x1a>
 8015652:	3d04      	subs	r5, #4
 8015654:	4602      	mov	r2, r0
 8015656:	4621      	mov	r1, r4
 8015658:	e000      	b.n	801565c <ai_platform_get_weights_map+0x50>
 801565a:	4619      	mov	r1, r3
 801565c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8015660:	42b3      	cmp	r3, r6
 8015662:	d025      	beq.n	80156b0 <ai_platform_get_weights_map+0xa4>
 8015664:	f845 3f04 	str.w	r3, [r5, #4]!
 8015668:	1c4b      	adds	r3, r1, #1
 801566a:	429f      	cmp	r7, r3
 801566c:	d8f5      	bhi.n	801565a <ai_platform_get_weights_map+0x4e>
 801566e:	d1da      	bne.n	8015626 <ai_platform_get_weights_map+0x1a>
 8015670:	3102      	adds	r1, #2
 8015672:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8015676:	42b3      	cmp	r3, r6
 8015678:	d1d5      	bne.n	8015626 <ai_platform_get_weights_map+0x1a>
 801567a:	2401      	movs	r4, #1
 801567c:	e7d3      	b.n	8015626 <ai_platform_get_weights_map+0x1a>
 801567e:	1d30      	adds	r0, r6, #4
 8015680:	f7ff ffa6 	bl	80155d0 <ai_buffer_array_sane>
 8015684:	2800      	cmp	r0, #0
 8015686:	d0cd      	beq.n	8015624 <ai_platform_get_weights_map+0x18>
 8015688:	88f3      	ldrh	r3, [r6, #6]
 801568a:	429f      	cmp	r7, r3
 801568c:	d1ca      	bne.n	8015624 <ai_platform_get_weights_map+0x18>
 801568e:	3d04      	subs	r5, #4
 8015690:	4622      	mov	r2, r4
 8015692:	68b3      	ldr	r3, [r6, #8]
 8015694:	4423      	add	r3, r4
 8015696:	341c      	adds	r4, #28
 8015698:	685b      	ldr	r3, [r3, #4]
 801569a:	b123      	cbz	r3, 80156a6 <ai_platform_get_weights_map+0x9a>
 801569c:	3201      	adds	r2, #1
 801569e:	f845 3f04 	str.w	r3, [r5, #4]!
 80156a2:	4297      	cmp	r7, r2
 80156a4:	d8f5      	bhi.n	8015692 <ai_platform_get_weights_map+0x86>
 80156a6:	1abc      	subs	r4, r7, r2
 80156a8:	fab4 f484 	clz	r4, r4
 80156ac:	0964      	lsrs	r4, r4, #5
 80156ae:	e7ba      	b.n	8015626 <ai_platform_get_weights_map+0x1a>
 80156b0:	428f      	cmp	r7, r1
 80156b2:	d1b8      	bne.n	8015626 <ai_platform_get_weights_map+0x1a>
 80156b4:	e7e1      	b.n	801567a <ai_platform_get_weights_map+0x6e>
 80156b6:	bf00      	nop
 80156b8:	a1facade 	.word	0xa1facade

080156bc <ai_platform_get_activations_map>:
 80156bc:	2900      	cmp	r1, #0
 80156be:	bf18      	it	ne
 80156c0:	2800      	cmpne	r0, #0
 80156c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156c4:	bf0c      	ite	eq
 80156c6:	2401      	moveq	r4, #1
 80156c8:	2400      	movne	r4, #0
 80156ca:	2a00      	cmp	r2, #0
 80156cc:	bf08      	it	eq
 80156ce:	f044 0401 	orreq.w	r4, r4, #1
 80156d2:	b114      	cbz	r4, 80156da <ai_platform_get_activations_map+0x1e>
 80156d4:	2400      	movs	r4, #0
 80156d6:	4620      	mov	r0, r4
 80156d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156da:	4616      	mov	r6, r2
 80156dc:	4b22      	ldr	r3, [pc, #136]	; (8015768 <ai_platform_get_activations_map+0xac>)
 80156de:	6812      	ldr	r2, [r2, #0]
 80156e0:	4605      	mov	r5, r0
 80156e2:	460f      	mov	r7, r1
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d022      	beq.n	801572e <ai_platform_get_activations_map+0x72>
 80156e8:	6a30      	ldr	r0, [r6, #32]
 80156ea:	2800      	cmp	r0, #0
 80156ec:	d0f2      	beq.n	80156d4 <ai_platform_get_activations_map+0x18>
 80156ee:	6806      	ldr	r6, [r0, #0]
 80156f0:	429e      	cmp	r6, r3
 80156f2:	d006      	beq.n	8015702 <ai_platform_get_activations_map+0x46>
 80156f4:	f1a1 0401 	sub.w	r4, r1, #1
 80156f8:	6028      	str	r0, [r5, #0]
 80156fa:	fab4 f484 	clz	r4, r4
 80156fe:	0964      	lsrs	r4, r4, #5
 8015700:	e7e9      	b.n	80156d6 <ai_platform_get_activations_map+0x1a>
 8015702:	3d04      	subs	r5, #4
 8015704:	4602      	mov	r2, r0
 8015706:	4621      	mov	r1, r4
 8015708:	e000      	b.n	801570c <ai_platform_get_activations_map+0x50>
 801570a:	4619      	mov	r1, r3
 801570c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8015710:	42b3      	cmp	r3, r6
 8015712:	d026      	beq.n	8015762 <ai_platform_get_activations_map+0xa6>
 8015714:	f845 3f04 	str.w	r3, [r5, #4]!
 8015718:	1c4b      	adds	r3, r1, #1
 801571a:	429f      	cmp	r7, r3
 801571c:	d8f5      	bhi.n	801570a <ai_platform_get_activations_map+0x4e>
 801571e:	d1da      	bne.n	80156d6 <ai_platform_get_activations_map+0x1a>
 8015720:	3102      	adds	r1, #2
 8015722:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8015726:	42b3      	cmp	r3, r6
 8015728:	d1d5      	bne.n	80156d6 <ai_platform_get_activations_map+0x1a>
 801572a:	2401      	movs	r4, #1
 801572c:	e7d3      	b.n	80156d6 <ai_platform_get_activations_map+0x1a>
 801572e:	f106 000c 	add.w	r0, r6, #12
 8015732:	f7ff ff4d 	bl	80155d0 <ai_buffer_array_sane>
 8015736:	2800      	cmp	r0, #0
 8015738:	d0cc      	beq.n	80156d4 <ai_platform_get_activations_map+0x18>
 801573a:	89f3      	ldrh	r3, [r6, #14]
 801573c:	429f      	cmp	r7, r3
 801573e:	d1c9      	bne.n	80156d4 <ai_platform_get_activations_map+0x18>
 8015740:	3d04      	subs	r5, #4
 8015742:	4622      	mov	r2, r4
 8015744:	6933      	ldr	r3, [r6, #16]
 8015746:	4423      	add	r3, r4
 8015748:	341c      	adds	r4, #28
 801574a:	685b      	ldr	r3, [r3, #4]
 801574c:	b123      	cbz	r3, 8015758 <ai_platform_get_activations_map+0x9c>
 801574e:	3201      	adds	r2, #1
 8015750:	f845 3f04 	str.w	r3, [r5, #4]!
 8015754:	4297      	cmp	r7, r2
 8015756:	d8f5      	bhi.n	8015744 <ai_platform_get_activations_map+0x88>
 8015758:	1abc      	subs	r4, r7, r2
 801575a:	fab4 f484 	clz	r4, r4
 801575e:	0964      	lsrs	r4, r4, #5
 8015760:	e7b9      	b.n	80156d6 <ai_platform_get_activations_map+0x1a>
 8015762:	428f      	cmp	r7, r1
 8015764:	d1b7      	bne.n	80156d6 <ai_platform_get_activations_map+0x1a>
 8015766:	e7e0      	b.n	801572a <ai_platform_get_activations_map+0x6e>
 8015768:	a1facade 	.word	0xa1facade

0801576c <ai_platform_bind_network_params>:
 801576c:	2a00      	cmp	r2, #0
 801576e:	bf18      	it	ne
 8015770:	2900      	cmpne	r1, #0
 8015772:	d010      	beq.n	8015796 <ai_platform_bind_network_params+0x2a>
 8015774:	b178      	cbz	r0, 8015796 <ai_platform_bind_network_params+0x2a>
 8015776:	4603      	mov	r3, r0
 8015778:	4808      	ldr	r0, [pc, #32]	; (801579c <ai_platform_bind_network_params+0x30>)
 801577a:	f103 0c0c 	add.w	ip, r3, #12
 801577e:	f843 0b04 	str.w	r0, [r3], #4
 8015782:	c903      	ldmia	r1, {r0, r1}
 8015784:	e883 0003 	stmia.w	r3, {r0, r1}
 8015788:	2301      	movs	r3, #1
 801578a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801578e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015792:	4618      	mov	r0, r3
 8015794:	4770      	bx	lr
 8015796:	2300      	movs	r3, #0
 8015798:	4618      	mov	r0, r3
 801579a:	4770      	bx	lr
 801579c:	a1facade 	.word	0xa1facade

080157a0 <ai_platform_network_get_error>:
 80157a0:	b510      	push	{r4, lr}
 80157a2:	2800      	cmp	r0, #0
 80157a4:	d036      	beq.n	8015814 <ai_platform_network_get_error+0x74>
 80157a6:	4b6f      	ldr	r3, [pc, #444]	; (8015964 <ai_platform_network_get_error+0x1c4>)
 80157a8:	4604      	mov	r4, r0
 80157aa:	6802      	ldr	r2, [r0, #0]
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d131      	bne.n	8015814 <ai_platform_network_get_error+0x74>
 80157b0:	4a6d      	ldr	r2, [pc, #436]	; (8015968 <ai_platform_network_get_error+0x1c8>)
 80157b2:	6813      	ldr	r3, [r2, #0]
 80157b4:	f023 0301 	bic.w	r3, r3, #1
 80157b8:	6013      	str	r3, [r2, #0]
 80157ba:	f7ff ff23 	bl	8015604 <_ai_platform_acquire_crc>
 80157be:	4b6b      	ldr	r3, [pc, #428]	; (801596c <ai_platform_network_get_error+0x1cc>)
 80157c0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80157ca:	189a      	adds	r2, r3, r2
 80157cc:	2a01      	cmp	r2, #1
 80157ce:	d95b      	bls.n	8015888 <ai_platform_network_get_error+0xe8>
 80157d0:	f240 4249 	movw	r2, #1097	; 0x449
 80157d4:	4293      	cmp	r3, r2
 80157d6:	d057      	beq.n	8015888 <ai_platform_network_get_error+0xe8>
 80157d8:	4a65      	ldr	r2, [pc, #404]	; (8015970 <ai_platform_network_get_error+0x1d0>)
 80157da:	6813      	ldr	r3, [r2, #0]
 80157dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80157e0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80157e4:	d06e      	beq.n	80158c4 <ai_platform_network_get_error+0x124>
 80157e6:	6813      	ldr	r3, [r2, #0]
 80157e8:	f240 4183 	movw	r1, #1155	; 0x483
 80157ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80157f0:	428b      	cmp	r3, r1
 80157f2:	f000 8089 	beq.w	8015908 <ai_platform_network_get_error+0x168>
 80157f6:	6813      	ldr	r3, [r2, #0]
 80157f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80157fc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8015800:	f000 80a1 	beq.w	8015946 <ai_platform_network_get_error+0x1a6>
 8015804:	f7ff ff00 	bl	8015608 <_ai_platform_release_crc>
 8015808:	f104 0010 	add.w	r0, r4, #16
 801580c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015810:	f001 baac 	b.w	8016d6c <core_get_error>
 8015814:	4a54      	ldr	r2, [pc, #336]	; (8015968 <ai_platform_network_get_error+0x1c8>)
 8015816:	6813      	ldr	r3, [r2, #0]
 8015818:	f023 0301 	bic.w	r3, r3, #1
 801581c:	6013      	str	r3, [r2, #0]
 801581e:	f7ff fef1 	bl	8015604 <_ai_platform_acquire_crc>
 8015822:	4b52      	ldr	r3, [pc, #328]	; (801596c <ai_platform_network_get_error+0x1cc>)
 8015824:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801582e:	185a      	adds	r2, r3, r1
 8015830:	2a01      	cmp	r2, #1
 8015832:	d91c      	bls.n	801586e <ai_platform_network_get_error+0xce>
 8015834:	f240 4249 	movw	r2, #1097	; 0x449
 8015838:	4293      	cmp	r3, r2
 801583a:	d018      	beq.n	801586e <ai_platform_network_get_error+0xce>
 801583c:	4a4c      	ldr	r2, [pc, #304]	; (8015970 <ai_platform_network_get_error+0x1d0>)
 801583e:	6813      	ldr	r3, [r2, #0]
 8015840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015844:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8015848:	d02b      	beq.n	80158a2 <ai_platform_network_get_error+0x102>
 801584a:	6813      	ldr	r3, [r2, #0]
 801584c:	f240 4183 	movw	r1, #1155	; 0x483
 8015850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015854:	428b      	cmp	r3, r1
 8015856:	d046      	beq.n	80158e6 <ai_platform_network_get_error+0x146>
 8015858:	6813      	ldr	r3, [r2, #0]
 801585a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801585e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8015862:	d063      	beq.n	801592c <ai_platform_network_get_error+0x18c>
 8015864:	f7ff fed0 	bl	8015608 <_ai_platform_release_crc>
 8015868:	f241 0010 	movw	r0, #4112	; 0x1010
 801586c:	bd10      	pop	{r4, pc}
 801586e:	4a41      	ldr	r2, [pc, #260]	; (8015974 <ai_platform_network_get_error+0x1d4>)
 8015870:	2301      	movs	r3, #1
 8015872:	6093      	str	r3, [r2, #8]
 8015874:	6893      	ldr	r3, [r2, #8]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d1fc      	bne.n	8015874 <ai_platform_network_get_error+0xd4>
 801587a:	493f      	ldr	r1, [pc, #252]	; (8015978 <ai_platform_network_get_error+0x1d8>)
 801587c:	4b3f      	ldr	r3, [pc, #252]	; (801597c <ai_platform_network_get_error+0x1dc>)
 801587e:	6011      	str	r1, [r2, #0]
 8015880:	6812      	ldr	r2, [r2, #0]
 8015882:	429a      	cmp	r2, r3
 8015884:	d0ee      	beq.n	8015864 <ai_platform_network_get_error+0xc4>
 8015886:	e7fe      	b.n	8015886 <ai_platform_network_get_error+0xe6>
 8015888:	4a3a      	ldr	r2, [pc, #232]	; (8015974 <ai_platform_network_get_error+0x1d4>)
 801588a:	2301      	movs	r3, #1
 801588c:	6093      	str	r3, [r2, #8]
 801588e:	6893      	ldr	r3, [r2, #8]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d1fc      	bne.n	801588e <ai_platform_network_get_error+0xee>
 8015894:	4938      	ldr	r1, [pc, #224]	; (8015978 <ai_platform_network_get_error+0x1d8>)
 8015896:	4b39      	ldr	r3, [pc, #228]	; (801597c <ai_platform_network_get_error+0x1dc>)
 8015898:	6011      	str	r1, [r2, #0]
 801589a:	6812      	ldr	r2, [r2, #0]
 801589c:	429a      	cmp	r2, r3
 801589e:	d0b1      	beq.n	8015804 <ai_platform_network_get_error+0x64>
 80158a0:	e7fe      	b.n	80158a0 <ai_platform_network_get_error+0x100>
 80158a2:	4a37      	ldr	r2, [pc, #220]	; (8015980 <ai_platform_network_get_error+0x1e0>)
 80158a4:	2301      	movs	r3, #1
 80158a6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80158aa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d1fb      	bne.n	80158aa <ai_platform_network_get_error+0x10a>
 80158b2:	4931      	ldr	r1, [pc, #196]	; (8015978 <ai_platform_network_get_error+0x1d8>)
 80158b4:	4b31      	ldr	r3, [pc, #196]	; (801597c <ai_platform_network_get_error+0x1dc>)
 80158b6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80158ba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80158be:	429a      	cmp	r2, r3
 80158c0:	d0d0      	beq.n	8015864 <ai_platform_network_get_error+0xc4>
 80158c2:	e7fe      	b.n	80158c2 <ai_platform_network_get_error+0x122>
 80158c4:	4a2e      	ldr	r2, [pc, #184]	; (8015980 <ai_platform_network_get_error+0x1e0>)
 80158c6:	2301      	movs	r3, #1
 80158c8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80158cc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d1fb      	bne.n	80158cc <ai_platform_network_get_error+0x12c>
 80158d4:	4928      	ldr	r1, [pc, #160]	; (8015978 <ai_platform_network_get_error+0x1d8>)
 80158d6:	4b29      	ldr	r3, [pc, #164]	; (801597c <ai_platform_network_get_error+0x1dc>)
 80158d8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80158dc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d08f      	beq.n	8015804 <ai_platform_network_get_error+0x64>
 80158e4:	e7fe      	b.n	80158e4 <ai_platform_network_get_error+0x144>
 80158e6:	4a26      	ldr	r2, [pc, #152]	; (8015980 <ai_platform_network_get_error+0x1e0>)
 80158e8:	2301      	movs	r3, #1
 80158ea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80158ee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d1fb      	bne.n	80158ee <ai_platform_network_get_error+0x14e>
 80158f6:	4920      	ldr	r1, [pc, #128]	; (8015978 <ai_platform_network_get_error+0x1d8>)
 80158f8:	4b20      	ldr	r3, [pc, #128]	; (801597c <ai_platform_network_get_error+0x1dc>)
 80158fa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80158fe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015902:	429a      	cmp	r2, r3
 8015904:	d0ae      	beq.n	8015864 <ai_platform_network_get_error+0xc4>
 8015906:	e7fe      	b.n	8015906 <ai_platform_network_get_error+0x166>
 8015908:	4a1d      	ldr	r2, [pc, #116]	; (8015980 <ai_platform_network_get_error+0x1e0>)
 801590a:	2301      	movs	r3, #1
 801590c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015910:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015914:	2b00      	cmp	r3, #0
 8015916:	d1fb      	bne.n	8015910 <ai_platform_network_get_error+0x170>
 8015918:	4917      	ldr	r1, [pc, #92]	; (8015978 <ai_platform_network_get_error+0x1d8>)
 801591a:	4b18      	ldr	r3, [pc, #96]	; (801597c <ai_platform_network_get_error+0x1dc>)
 801591c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8015920:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015924:	429a      	cmp	r2, r3
 8015926:	f43f af6d 	beq.w	8015804 <ai_platform_network_get_error+0x64>
 801592a:	e7fe      	b.n	801592a <ai_platform_network_get_error+0x18a>
 801592c:	4a11      	ldr	r2, [pc, #68]	; (8015974 <ai_platform_network_get_error+0x1d4>)
 801592e:	2301      	movs	r3, #1
 8015930:	6093      	str	r3, [r2, #8]
 8015932:	6893      	ldr	r3, [r2, #8]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d1fc      	bne.n	8015932 <ai_platform_network_get_error+0x192>
 8015938:	490f      	ldr	r1, [pc, #60]	; (8015978 <ai_platform_network_get_error+0x1d8>)
 801593a:	4b10      	ldr	r3, [pc, #64]	; (801597c <ai_platform_network_get_error+0x1dc>)
 801593c:	6011      	str	r1, [r2, #0]
 801593e:	6812      	ldr	r2, [r2, #0]
 8015940:	429a      	cmp	r2, r3
 8015942:	d08f      	beq.n	8015864 <ai_platform_network_get_error+0xc4>
 8015944:	e7fe      	b.n	8015944 <ai_platform_network_get_error+0x1a4>
 8015946:	4a0b      	ldr	r2, [pc, #44]	; (8015974 <ai_platform_network_get_error+0x1d4>)
 8015948:	2301      	movs	r3, #1
 801594a:	6093      	str	r3, [r2, #8]
 801594c:	6893      	ldr	r3, [r2, #8]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d1fc      	bne.n	801594c <ai_platform_network_get_error+0x1ac>
 8015952:	4909      	ldr	r1, [pc, #36]	; (8015978 <ai_platform_network_get_error+0x1d8>)
 8015954:	4b09      	ldr	r3, [pc, #36]	; (801597c <ai_platform_network_get_error+0x1dc>)
 8015956:	6011      	str	r1, [r2, #0]
 8015958:	6812      	ldr	r2, [r2, #0]
 801595a:	429a      	cmp	r2, r3
 801595c:	f43f af52 	beq.w	8015804 <ai_platform_network_get_error+0x64>
 8015960:	e7fe      	b.n	8015960 <ai_platform_network_get_error+0x1c0>
 8015962:	bf00      	nop
 8015964:	a1c00100 	.word	0xa1c00100
 8015968:	e0002000 	.word	0xe0002000
 801596c:	e0042000 	.word	0xe0042000
 8015970:	5c001000 	.word	0x5c001000
 8015974:	40023000 	.word	0x40023000
 8015978:	f407a5c2 	.word	0xf407a5c2
 801597c:	b5e8b5cd 	.word	0xb5e8b5cd
 8015980:	58024000 	.word	0x58024000

08015984 <ai_platform_network_set_error>:
 8015984:	b110      	cbz	r0, 801598c <ai_platform_network_set_error+0x8>
 8015986:	3010      	adds	r0, #16
 8015988:	f001 b9f6 	b.w	8016d78 <core_set_error>
 801598c:	4770      	bx	lr
 801598e:	bf00      	nop

08015990 <ai_platform_inputs_get>:
 8015990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015994:	b085      	sub	sp, #20
 8015996:	9102      	str	r1, [sp, #8]
 8015998:	2800      	cmp	r0, #0
 801599a:	f000 8096 	beq.w	8015aca <ai_platform_inputs_get+0x13a>
 801599e:	4bac      	ldr	r3, [pc, #688]	; (8015c50 <ai_platform_inputs_get+0x2c0>)
 80159a0:	4681      	mov	r9, r0
 80159a2:	6802      	ldr	r2, [r0, #0]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	f040 8090 	bne.w	8015aca <ai_platform_inputs_get+0x13a>
 80159aa:	4aaa      	ldr	r2, [pc, #680]	; (8015c54 <ai_platform_inputs_get+0x2c4>)
 80159ac:	6813      	ldr	r3, [r2, #0]
 80159ae:	f023 0301 	bic.w	r3, r3, #1
 80159b2:	6013      	str	r3, [r2, #0]
 80159b4:	f7ff fe26 	bl	8015604 <_ai_platform_acquire_crc>
 80159b8:	4ba7      	ldr	r3, [pc, #668]	; (8015c58 <ai_platform_inputs_get+0x2c8>)
 80159ba:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80159c4:	189a      	adds	r2, r3, r2
 80159c6:	2a01      	cmp	r2, #1
 80159c8:	f240 80ba 	bls.w	8015b40 <ai_platform_inputs_get+0x1b0>
 80159cc:	f240 4249 	movw	r2, #1097	; 0x449
 80159d0:	4293      	cmp	r3, r2
 80159d2:	f000 80b5 	beq.w	8015b40 <ai_platform_inputs_get+0x1b0>
 80159d6:	4aa1      	ldr	r2, [pc, #644]	; (8015c5c <ai_platform_inputs_get+0x2cc>)
 80159d8:	6813      	ldr	r3, [r2, #0]
 80159da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80159de:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80159e2:	f000 80d6 	beq.w	8015b92 <ai_platform_inputs_get+0x202>
 80159e6:	6813      	ldr	r3, [r2, #0]
 80159e8:	f240 4183 	movw	r1, #1155	; 0x483
 80159ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80159f0:	428b      	cmp	r3, r1
 80159f2:	f000 80ff 	beq.w	8015bf4 <ai_platform_inputs_get+0x264>
 80159f6:	6813      	ldr	r3, [r2, #0]
 80159f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80159fc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8015a00:	f000 8118 	beq.w	8015c34 <ai_platform_inputs_get+0x2a4>
 8015a04:	f7ff fe00 	bl	8015608 <_ai_platform_release_crc>
 8015a08:	9a02      	ldr	r2, [sp, #8]
 8015a0a:	b10a      	cbz	r2, 8015a10 <ai_platform_inputs_get+0x80>
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	8013      	strh	r3, [r2, #0]
 8015a10:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	f000 80a1 	beq.w	8015b5c <ai_platform_inputs_get+0x1cc>
 8015a1a:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8015a1e:	f1ba 0f00 	cmp.w	sl, #0
 8015a22:	f000 809b 	beq.w	8015b5c <ai_platform_inputs_get+0x1cc>
 8015a26:	2100      	movs	r1, #0
 8015a28:	f8cd 900c 	str.w	r9, [sp, #12]
 8015a2c:	460d      	mov	r5, r1
 8015a2e:	4689      	mov	r9, r1
 8015a30:	e016      	b.n	8015a60 <ai_platform_inputs_get+0xd0>
 8015a32:	9a01      	ldr	r2, [sp, #4]
 8015a34:	2301      	movs	r3, #1
 8015a36:	f848 3002 	str.w	r3, [r8, r2]
 8015a3a:	69b2      	ldr	r2, [r6, #24]
 8015a3c:	f04f 0301 	mov.w	r3, #1
 8015a40:	6856      	ldr	r6, [r2, #4]
 8015a42:	3501      	adds	r5, #1
 8015a44:	f109 091c 	add.w	r9, r9, #28
 8015a48:	7523      	strb	r3, [r4, #20]
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	60a7      	str	r7, [r4, #8]
 8015a4e:	61a1      	str	r1, [r4, #24]
 8015a50:	e9c4 0c00 	strd	r0, ip, [r4]
 8015a54:	6960      	ldr	r0, [r4, #20]
 8015a56:	f36b 201f 	bfi	r0, fp, #8, #24
 8015a5a:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8015a5e:	6160      	str	r0, [r4, #20]
 8015a60:	f8ba 3000 	ldrh.w	r3, [sl]
 8015a64:	b2ac      	uxth	r4, r5
 8015a66:	42ab      	cmp	r3, r5
 8015a68:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8015a6c:	9301      	str	r3, [sp, #4]
 8015a6e:	f240 80a2 	bls.w	8015bb6 <ai_platform_inputs_get+0x226>
 8015a72:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	f000 809d 	beq.w	8015bb6 <ai_platform_inputs_get+0x226>
 8015a7c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8015a80:	2e00      	cmp	r6, #0
 8015a82:	f000 8098 	beq.w	8015bb6 <ai_platform_inputs_get+0x226>
 8015a86:	f8da 3008 	ldr.w	r3, [sl, #8]
 8015a8a:	69b2      	ldr	r2, [r6, #24]
 8015a8c:	68f1      	ldr	r1, [r6, #12]
 8015a8e:	6810      	ldr	r0, [r2, #0]
 8015a90:	9100      	str	r1, [sp, #0]
 8015a92:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8015a96:	68b3      	ldr	r3, [r6, #8]
 8015a98:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8015a9c:	444c      	add	r4, r9
 8015a9e:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8015aa2:	f003 faf7 	bl	8019094 <ai_array_to_buffer_fmt>
 8015aa6:	69b2      	ldr	r2, [r6, #24]
 8015aa8:	9900      	ldr	r1, [sp, #0]
 8015aaa:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8015aae:	2f00      	cmp	r7, #0
 8015ab0:	d0c4      	beq.n	8015a3c <ai_platform_inputs_get+0xac>
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8015ab8:	6832      	ldr	r2, [r6, #0]
 8015aba:	607a      	str	r2, [r7, #4]
 8015abc:	b112      	cbz	r2, 8015ac4 <ai_platform_inputs_get+0x134>
 8015abe:	8852      	ldrh	r2, [r2, #2]
 8015ac0:	2a00      	cmp	r2, #0
 8015ac2:	d1b6      	bne.n	8015a32 <ai_platform_inputs_get+0xa2>
 8015ac4:	69b2      	ldr	r2, [r6, #24]
 8015ac6:	2700      	movs	r7, #0
 8015ac8:	e7b8      	b.n	8015a3c <ai_platform_inputs_get+0xac>
 8015aca:	4a62      	ldr	r2, [pc, #392]	; (8015c54 <ai_platform_inputs_get+0x2c4>)
 8015acc:	6813      	ldr	r3, [r2, #0]
 8015ace:	f023 0301 	bic.w	r3, r3, #1
 8015ad2:	6013      	str	r3, [r2, #0]
 8015ad4:	f7ff fd96 	bl	8015604 <_ai_platform_acquire_crc>
 8015ad8:	4b5f      	ldr	r3, [pc, #380]	; (8015c58 <ai_platform_inputs_get+0x2c8>)
 8015ada:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015ae4:	185a      	adds	r2, r3, r1
 8015ae6:	2a01      	cmp	r2, #1
 8015ae8:	d91d      	bls.n	8015b26 <ai_platform_inputs_get+0x196>
 8015aea:	f240 4249 	movw	r2, #1097	; 0x449
 8015aee:	4293      	cmp	r3, r2
 8015af0:	d019      	beq.n	8015b26 <ai_platform_inputs_get+0x196>
 8015af2:	4a5a      	ldr	r2, [pc, #360]	; (8015c5c <ai_platform_inputs_get+0x2cc>)
 8015af4:	6813      	ldr	r3, [r2, #0]
 8015af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015afa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8015afe:	d037      	beq.n	8015b70 <ai_platform_inputs_get+0x1e0>
 8015b00:	6813      	ldr	r3, [r2, #0]
 8015b02:	f240 4183 	movw	r1, #1155	; 0x483
 8015b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015b0a:	428b      	cmp	r3, r1
 8015b0c:	d061      	beq.n	8015bd2 <ai_platform_inputs_get+0x242>
 8015b0e:	6813      	ldr	r3, [r2, #0]
 8015b10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015b14:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8015b18:	d07e      	beq.n	8015c18 <ai_platform_inputs_get+0x288>
 8015b1a:	f7ff fd75 	bl	8015608 <_ai_platform_release_crc>
 8015b1e:	2000      	movs	r0, #0
 8015b20:	b005      	add	sp, #20
 8015b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b26:	4a4e      	ldr	r2, [pc, #312]	; (8015c60 <ai_platform_inputs_get+0x2d0>)
 8015b28:	2301      	movs	r3, #1
 8015b2a:	6093      	str	r3, [r2, #8]
 8015b2c:	6893      	ldr	r3, [r2, #8]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d1fc      	bne.n	8015b2c <ai_platform_inputs_get+0x19c>
 8015b32:	494c      	ldr	r1, [pc, #304]	; (8015c64 <ai_platform_inputs_get+0x2d4>)
 8015b34:	4b4c      	ldr	r3, [pc, #304]	; (8015c68 <ai_platform_inputs_get+0x2d8>)
 8015b36:	6011      	str	r1, [r2, #0]
 8015b38:	6812      	ldr	r2, [r2, #0]
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d0ed      	beq.n	8015b1a <ai_platform_inputs_get+0x18a>
 8015b3e:	e7fe      	b.n	8015b3e <ai_platform_inputs_get+0x1ae>
 8015b40:	4a47      	ldr	r2, [pc, #284]	; (8015c60 <ai_platform_inputs_get+0x2d0>)
 8015b42:	2301      	movs	r3, #1
 8015b44:	6093      	str	r3, [r2, #8]
 8015b46:	6893      	ldr	r3, [r2, #8]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d1fc      	bne.n	8015b46 <ai_platform_inputs_get+0x1b6>
 8015b4c:	4b45      	ldr	r3, [pc, #276]	; (8015c64 <ai_platform_inputs_get+0x2d4>)
 8015b4e:	6013      	str	r3, [r2, #0]
 8015b50:	4b45      	ldr	r3, [pc, #276]	; (8015c68 <ai_platform_inputs_get+0x2d8>)
 8015b52:	6812      	ldr	r2, [r2, #0]
 8015b54:	429a      	cmp	r2, r3
 8015b56:	f43f af55 	beq.w	8015a04 <ai_platform_inputs_get+0x74>
 8015b5a:	e7fe      	b.n	8015b5a <ai_platform_inputs_get+0x1ca>
 8015b5c:	2218      	movs	r2, #24
 8015b5e:	2111      	movs	r1, #17
 8015b60:	f109 0010 	add.w	r0, r9, #16
 8015b64:	f001 f908 	bl	8016d78 <core_set_error>
 8015b68:	2000      	movs	r0, #0
 8015b6a:	b005      	add	sp, #20
 8015b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b70:	4a3e      	ldr	r2, [pc, #248]	; (8015c6c <ai_platform_inputs_get+0x2dc>)
 8015b72:	2301      	movs	r3, #1
 8015b74:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015b78:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d1fb      	bne.n	8015b78 <ai_platform_inputs_get+0x1e8>
 8015b80:	4938      	ldr	r1, [pc, #224]	; (8015c64 <ai_platform_inputs_get+0x2d4>)
 8015b82:	4b39      	ldr	r3, [pc, #228]	; (8015c68 <ai_platform_inputs_get+0x2d8>)
 8015b84:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8015b88:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	d0c4      	beq.n	8015b1a <ai_platform_inputs_get+0x18a>
 8015b90:	e7fe      	b.n	8015b90 <ai_platform_inputs_get+0x200>
 8015b92:	4a36      	ldr	r2, [pc, #216]	; (8015c6c <ai_platform_inputs_get+0x2dc>)
 8015b94:	2301      	movs	r3, #1
 8015b96:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015b9a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d1fb      	bne.n	8015b9a <ai_platform_inputs_get+0x20a>
 8015ba2:	4b30      	ldr	r3, [pc, #192]	; (8015c64 <ai_platform_inputs_get+0x2d4>)
 8015ba4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015ba8:	4b2f      	ldr	r3, [pc, #188]	; (8015c68 <ai_platform_inputs_get+0x2d8>)
 8015baa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	f43f af28 	beq.w	8015a04 <ai_platform_inputs_get+0x74>
 8015bb4:	e7fe      	b.n	8015bb4 <ai_platform_inputs_get+0x224>
 8015bb6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015bba:	2c00      	cmp	r4, #0
 8015bbc:	d0ce      	beq.n	8015b5c <ai_platform_inputs_get+0x1cc>
 8015bbe:	f8da 3008 	ldr.w	r3, [sl, #8]
 8015bc2:	6858      	ldr	r0, [r3, #4]
 8015bc4:	9b02      	ldr	r3, [sp, #8]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d0aa      	beq.n	8015b20 <ai_platform_inputs_get+0x190>
 8015bca:	801c      	strh	r4, [r3, #0]
 8015bcc:	b005      	add	sp, #20
 8015bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bd2:	4a26      	ldr	r2, [pc, #152]	; (8015c6c <ai_platform_inputs_get+0x2dc>)
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015bda:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d1fb      	bne.n	8015bda <ai_platform_inputs_get+0x24a>
 8015be2:	4920      	ldr	r1, [pc, #128]	; (8015c64 <ai_platform_inputs_get+0x2d4>)
 8015be4:	4b20      	ldr	r3, [pc, #128]	; (8015c68 <ai_platform_inputs_get+0x2d8>)
 8015be6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8015bea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	d093      	beq.n	8015b1a <ai_platform_inputs_get+0x18a>
 8015bf2:	e7fe      	b.n	8015bf2 <ai_platform_inputs_get+0x262>
 8015bf4:	4a1d      	ldr	r2, [pc, #116]	; (8015c6c <ai_platform_inputs_get+0x2dc>)
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015bfc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d1fb      	bne.n	8015bfc <ai_platform_inputs_get+0x26c>
 8015c04:	4b17      	ldr	r3, [pc, #92]	; (8015c64 <ai_platform_inputs_get+0x2d4>)
 8015c06:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015c0a:	4b17      	ldr	r3, [pc, #92]	; (8015c68 <ai_platform_inputs_get+0x2d8>)
 8015c0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015c10:	429a      	cmp	r2, r3
 8015c12:	f43f aef7 	beq.w	8015a04 <ai_platform_inputs_get+0x74>
 8015c16:	e7fe      	b.n	8015c16 <ai_platform_inputs_get+0x286>
 8015c18:	4a11      	ldr	r2, [pc, #68]	; (8015c60 <ai_platform_inputs_get+0x2d0>)
 8015c1a:	2301      	movs	r3, #1
 8015c1c:	6093      	str	r3, [r2, #8]
 8015c1e:	6893      	ldr	r3, [r2, #8]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d1fc      	bne.n	8015c1e <ai_platform_inputs_get+0x28e>
 8015c24:	490f      	ldr	r1, [pc, #60]	; (8015c64 <ai_platform_inputs_get+0x2d4>)
 8015c26:	4b10      	ldr	r3, [pc, #64]	; (8015c68 <ai_platform_inputs_get+0x2d8>)
 8015c28:	6011      	str	r1, [r2, #0]
 8015c2a:	6812      	ldr	r2, [r2, #0]
 8015c2c:	429a      	cmp	r2, r3
 8015c2e:	f43f af74 	beq.w	8015b1a <ai_platform_inputs_get+0x18a>
 8015c32:	e7fe      	b.n	8015c32 <ai_platform_inputs_get+0x2a2>
 8015c34:	4a0a      	ldr	r2, [pc, #40]	; (8015c60 <ai_platform_inputs_get+0x2d0>)
 8015c36:	2301      	movs	r3, #1
 8015c38:	6093      	str	r3, [r2, #8]
 8015c3a:	6893      	ldr	r3, [r2, #8]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d1fc      	bne.n	8015c3a <ai_platform_inputs_get+0x2aa>
 8015c40:	4b08      	ldr	r3, [pc, #32]	; (8015c64 <ai_platform_inputs_get+0x2d4>)
 8015c42:	6013      	str	r3, [r2, #0]
 8015c44:	4b08      	ldr	r3, [pc, #32]	; (8015c68 <ai_platform_inputs_get+0x2d8>)
 8015c46:	6812      	ldr	r2, [r2, #0]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	f43f aedb 	beq.w	8015a04 <ai_platform_inputs_get+0x74>
 8015c4e:	e7fe      	b.n	8015c4e <ai_platform_inputs_get+0x2be>
 8015c50:	a1c00100 	.word	0xa1c00100
 8015c54:	e0002000 	.word	0xe0002000
 8015c58:	e0042000 	.word	0xe0042000
 8015c5c:	5c001000 	.word	0x5c001000
 8015c60:	40023000 	.word	0x40023000
 8015c64:	f407a5c2 	.word	0xf407a5c2
 8015c68:	b5e8b5cd 	.word	0xb5e8b5cd
 8015c6c:	58024000 	.word	0x58024000

08015c70 <ai_platform_outputs_get>:
 8015c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c74:	b085      	sub	sp, #20
 8015c76:	9102      	str	r1, [sp, #8]
 8015c78:	2800      	cmp	r0, #0
 8015c7a:	f000 8092 	beq.w	8015da2 <ai_platform_outputs_get+0x132>
 8015c7e:	4ba9      	ldr	r3, [pc, #676]	; (8015f24 <ai_platform_outputs_get+0x2b4>)
 8015c80:	4681      	mov	r9, r0
 8015c82:	6802      	ldr	r2, [r0, #0]
 8015c84:	429a      	cmp	r2, r3
 8015c86:	f040 808c 	bne.w	8015da2 <ai_platform_outputs_get+0x132>
 8015c8a:	4aa7      	ldr	r2, [pc, #668]	; (8015f28 <ai_platform_outputs_get+0x2b8>)
 8015c8c:	6813      	ldr	r3, [r2, #0]
 8015c8e:	f023 0301 	bic.w	r3, r3, #1
 8015c92:	6013      	str	r3, [r2, #0]
 8015c94:	f7ff fcb6 	bl	8015604 <_ai_platform_acquire_crc>
 8015c98:	4ba4      	ldr	r3, [pc, #656]	; (8015f2c <ai_platform_outputs_get+0x2bc>)
 8015c9a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015ca4:	189a      	adds	r2, r3, r2
 8015ca6:	2a01      	cmp	r2, #1
 8015ca8:	f240 80b6 	bls.w	8015e18 <ai_platform_outputs_get+0x1a8>
 8015cac:	f240 4249 	movw	r2, #1097	; 0x449
 8015cb0:	4293      	cmp	r3, r2
 8015cb2:	f000 80b1 	beq.w	8015e18 <ai_platform_outputs_get+0x1a8>
 8015cb6:	4a9e      	ldr	r2, [pc, #632]	; (8015f30 <ai_platform_outputs_get+0x2c0>)
 8015cb8:	6813      	ldr	r3, [r2, #0]
 8015cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015cbe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8015cc2:	f000 80d0 	beq.w	8015e66 <ai_platform_outputs_get+0x1f6>
 8015cc6:	6813      	ldr	r3, [r2, #0]
 8015cc8:	f240 4183 	movw	r1, #1155	; 0x483
 8015ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015cd0:	428b      	cmp	r3, r1
 8015cd2:	f000 80f9 	beq.w	8015ec8 <ai_platform_outputs_get+0x258>
 8015cd6:	6813      	ldr	r3, [r2, #0]
 8015cd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015cdc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8015ce0:	f000 8112 	beq.w	8015f08 <ai_platform_outputs_get+0x298>
 8015ce4:	f7ff fc90 	bl	8015608 <_ai_platform_release_crc>
 8015ce8:	9a02      	ldr	r2, [sp, #8]
 8015cea:	b10a      	cbz	r2, 8015cf0 <ai_platform_outputs_get+0x80>
 8015cec:	2300      	movs	r3, #0
 8015cee:	8013      	strh	r3, [r2, #0]
 8015cf0:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8015cf4:	2b01      	cmp	r3, #1
 8015cf6:	f240 80ae 	bls.w	8015e56 <ai_platform_outputs_get+0x1e6>
 8015cfa:	2100      	movs	r1, #0
 8015cfc:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8015d00:	f8cd 900c 	str.w	r9, [sp, #12]
 8015d04:	460d      	mov	r5, r1
 8015d06:	4689      	mov	r9, r1
 8015d08:	e016      	b.n	8015d38 <ai_platform_outputs_get+0xc8>
 8015d0a:	9a01      	ldr	r2, [sp, #4]
 8015d0c:	2301      	movs	r3, #1
 8015d0e:	f848 3002 	str.w	r3, [r8, r2]
 8015d12:	69b2      	ldr	r2, [r6, #24]
 8015d14:	f04f 0301 	mov.w	r3, #1
 8015d18:	6856      	ldr	r6, [r2, #4]
 8015d1a:	3501      	adds	r5, #1
 8015d1c:	f109 091c 	add.w	r9, r9, #28
 8015d20:	7523      	strb	r3, [r4, #20]
 8015d22:	2300      	movs	r3, #0
 8015d24:	60a7      	str	r7, [r4, #8]
 8015d26:	61a1      	str	r1, [r4, #24]
 8015d28:	e9c4 0c00 	strd	r0, ip, [r4]
 8015d2c:	6960      	ldr	r0, [r4, #20]
 8015d2e:	f36b 201f 	bfi	r0, fp, #8, #24
 8015d32:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8015d36:	6160      	str	r0, [r4, #20]
 8015d38:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8015d3c:	b2ac      	uxth	r4, r5
 8015d3e:	42ab      	cmp	r3, r5
 8015d40:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8015d44:	9301      	str	r3, [sp, #4]
 8015d46:	f240 80a0 	bls.w	8015e8a <ai_platform_outputs_get+0x21a>
 8015d4a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	f000 809b 	beq.w	8015e8a <ai_platform_outputs_get+0x21a>
 8015d54:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8015d58:	2e00      	cmp	r6, #0
 8015d5a:	f000 8096 	beq.w	8015e8a <ai_platform_outputs_get+0x21a>
 8015d5e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8015d62:	69b2      	ldr	r2, [r6, #24]
 8015d64:	68f1      	ldr	r1, [r6, #12]
 8015d66:	6810      	ldr	r0, [r2, #0]
 8015d68:	9100      	str	r1, [sp, #0]
 8015d6a:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8015d6e:	68b3      	ldr	r3, [r6, #8]
 8015d70:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8015d74:	444c      	add	r4, r9
 8015d76:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8015d7a:	f003 f98b 	bl	8019094 <ai_array_to_buffer_fmt>
 8015d7e:	69b2      	ldr	r2, [r6, #24]
 8015d80:	9900      	ldr	r1, [sp, #0]
 8015d82:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8015d86:	2f00      	cmp	r7, #0
 8015d88:	d0c4      	beq.n	8015d14 <ai_platform_outputs_get+0xa4>
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8015d90:	6832      	ldr	r2, [r6, #0]
 8015d92:	607a      	str	r2, [r7, #4]
 8015d94:	b112      	cbz	r2, 8015d9c <ai_platform_outputs_get+0x12c>
 8015d96:	8852      	ldrh	r2, [r2, #2]
 8015d98:	2a00      	cmp	r2, #0
 8015d9a:	d1b6      	bne.n	8015d0a <ai_platform_outputs_get+0x9a>
 8015d9c:	69b2      	ldr	r2, [r6, #24]
 8015d9e:	2700      	movs	r7, #0
 8015da0:	e7b8      	b.n	8015d14 <ai_platform_outputs_get+0xa4>
 8015da2:	4a61      	ldr	r2, [pc, #388]	; (8015f28 <ai_platform_outputs_get+0x2b8>)
 8015da4:	6813      	ldr	r3, [r2, #0]
 8015da6:	f023 0301 	bic.w	r3, r3, #1
 8015daa:	6013      	str	r3, [r2, #0]
 8015dac:	f7ff fc2a 	bl	8015604 <_ai_platform_acquire_crc>
 8015db0:	4b5e      	ldr	r3, [pc, #376]	; (8015f2c <ai_platform_outputs_get+0x2bc>)
 8015db2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015dbc:	185a      	adds	r2, r3, r1
 8015dbe:	2a01      	cmp	r2, #1
 8015dc0:	d91d      	bls.n	8015dfe <ai_platform_outputs_get+0x18e>
 8015dc2:	f240 4249 	movw	r2, #1097	; 0x449
 8015dc6:	4293      	cmp	r3, r2
 8015dc8:	d019      	beq.n	8015dfe <ai_platform_outputs_get+0x18e>
 8015dca:	4a59      	ldr	r2, [pc, #356]	; (8015f30 <ai_platform_outputs_get+0x2c0>)
 8015dcc:	6813      	ldr	r3, [r2, #0]
 8015dce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015dd2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8015dd6:	d02d      	beq.n	8015e34 <ai_platform_outputs_get+0x1c4>
 8015dd8:	6813      	ldr	r3, [r2, #0]
 8015dda:	f240 4183 	movw	r1, #1155	; 0x483
 8015dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015de2:	428b      	cmp	r3, r1
 8015de4:	d05f      	beq.n	8015ea6 <ai_platform_outputs_get+0x236>
 8015de6:	6813      	ldr	r3, [r2, #0]
 8015de8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015dec:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8015df0:	d07c      	beq.n	8015eec <ai_platform_outputs_get+0x27c>
 8015df2:	f7ff fc09 	bl	8015608 <_ai_platform_release_crc>
 8015df6:	2000      	movs	r0, #0
 8015df8:	b005      	add	sp, #20
 8015dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dfe:	4a4d      	ldr	r2, [pc, #308]	; (8015f34 <ai_platform_outputs_get+0x2c4>)
 8015e00:	2301      	movs	r3, #1
 8015e02:	6093      	str	r3, [r2, #8]
 8015e04:	6893      	ldr	r3, [r2, #8]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d1fc      	bne.n	8015e04 <ai_platform_outputs_get+0x194>
 8015e0a:	494b      	ldr	r1, [pc, #300]	; (8015f38 <ai_platform_outputs_get+0x2c8>)
 8015e0c:	4b4b      	ldr	r3, [pc, #300]	; (8015f3c <ai_platform_outputs_get+0x2cc>)
 8015e0e:	6011      	str	r1, [r2, #0]
 8015e10:	6812      	ldr	r2, [r2, #0]
 8015e12:	429a      	cmp	r2, r3
 8015e14:	d0ed      	beq.n	8015df2 <ai_platform_outputs_get+0x182>
 8015e16:	e7fe      	b.n	8015e16 <ai_platform_outputs_get+0x1a6>
 8015e18:	4a46      	ldr	r2, [pc, #280]	; (8015f34 <ai_platform_outputs_get+0x2c4>)
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	6093      	str	r3, [r2, #8]
 8015e1e:	6893      	ldr	r3, [r2, #8]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d1fc      	bne.n	8015e1e <ai_platform_outputs_get+0x1ae>
 8015e24:	4b44      	ldr	r3, [pc, #272]	; (8015f38 <ai_platform_outputs_get+0x2c8>)
 8015e26:	6013      	str	r3, [r2, #0]
 8015e28:	4b44      	ldr	r3, [pc, #272]	; (8015f3c <ai_platform_outputs_get+0x2cc>)
 8015e2a:	6812      	ldr	r2, [r2, #0]
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	f43f af59 	beq.w	8015ce4 <ai_platform_outputs_get+0x74>
 8015e32:	e7fe      	b.n	8015e32 <ai_platform_outputs_get+0x1c2>
 8015e34:	4a42      	ldr	r2, [pc, #264]	; (8015f40 <ai_platform_outputs_get+0x2d0>)
 8015e36:	2301      	movs	r3, #1
 8015e38:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015e3c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d1fb      	bne.n	8015e3c <ai_platform_outputs_get+0x1cc>
 8015e44:	493c      	ldr	r1, [pc, #240]	; (8015f38 <ai_platform_outputs_get+0x2c8>)
 8015e46:	4b3d      	ldr	r3, [pc, #244]	; (8015f3c <ai_platform_outputs_get+0x2cc>)
 8015e48:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8015e4c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d0ce      	beq.n	8015df2 <ai_platform_outputs_get+0x182>
 8015e54:	e7fe      	b.n	8015e54 <ai_platform_outputs_get+0x1e4>
 8015e56:	2218      	movs	r2, #24
 8015e58:	2111      	movs	r1, #17
 8015e5a:	f109 0010 	add.w	r0, r9, #16
 8015e5e:	f000 ff8b 	bl	8016d78 <core_set_error>
 8015e62:	2000      	movs	r0, #0
 8015e64:	e7c8      	b.n	8015df8 <ai_platform_outputs_get+0x188>
 8015e66:	4a36      	ldr	r2, [pc, #216]	; (8015f40 <ai_platform_outputs_get+0x2d0>)
 8015e68:	2301      	movs	r3, #1
 8015e6a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015e6e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d1fb      	bne.n	8015e6e <ai_platform_outputs_get+0x1fe>
 8015e76:	4b30      	ldr	r3, [pc, #192]	; (8015f38 <ai_platform_outputs_get+0x2c8>)
 8015e78:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015e7c:	4b2f      	ldr	r3, [pc, #188]	; (8015f3c <ai_platform_outputs_get+0x2cc>)
 8015e7e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015e82:	429a      	cmp	r2, r3
 8015e84:	f43f af2e 	beq.w	8015ce4 <ai_platform_outputs_get+0x74>
 8015e88:	e7fe      	b.n	8015e88 <ai_platform_outputs_get+0x218>
 8015e8a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015e8e:	2c00      	cmp	r4, #0
 8015e90:	d0e1      	beq.n	8015e56 <ai_platform_outputs_get+0x1e6>
 8015e92:	f8da 3014 	ldr.w	r3, [sl, #20]
 8015e96:	6858      	ldr	r0, [r3, #4]
 8015e98:	9b02      	ldr	r3, [sp, #8]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d0ac      	beq.n	8015df8 <ai_platform_outputs_get+0x188>
 8015e9e:	801c      	strh	r4, [r3, #0]
 8015ea0:	b005      	add	sp, #20
 8015ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ea6:	4a26      	ldr	r2, [pc, #152]	; (8015f40 <ai_platform_outputs_get+0x2d0>)
 8015ea8:	2301      	movs	r3, #1
 8015eaa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015eae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d1fb      	bne.n	8015eae <ai_platform_outputs_get+0x23e>
 8015eb6:	4920      	ldr	r1, [pc, #128]	; (8015f38 <ai_platform_outputs_get+0x2c8>)
 8015eb8:	4b20      	ldr	r3, [pc, #128]	; (8015f3c <ai_platform_outputs_get+0x2cc>)
 8015eba:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8015ebe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015ec2:	429a      	cmp	r2, r3
 8015ec4:	d095      	beq.n	8015df2 <ai_platform_outputs_get+0x182>
 8015ec6:	e7fe      	b.n	8015ec6 <ai_platform_outputs_get+0x256>
 8015ec8:	4a1d      	ldr	r2, [pc, #116]	; (8015f40 <ai_platform_outputs_get+0x2d0>)
 8015eca:	2301      	movs	r3, #1
 8015ecc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8015ed0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d1fb      	bne.n	8015ed0 <ai_platform_outputs_get+0x260>
 8015ed8:	4b17      	ldr	r3, [pc, #92]	; (8015f38 <ai_platform_outputs_get+0x2c8>)
 8015eda:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8015ede:	4b17      	ldr	r3, [pc, #92]	; (8015f3c <ai_platform_outputs_get+0x2cc>)
 8015ee0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	f43f aefd 	beq.w	8015ce4 <ai_platform_outputs_get+0x74>
 8015eea:	e7fe      	b.n	8015eea <ai_platform_outputs_get+0x27a>
 8015eec:	4a11      	ldr	r2, [pc, #68]	; (8015f34 <ai_platform_outputs_get+0x2c4>)
 8015eee:	2301      	movs	r3, #1
 8015ef0:	6093      	str	r3, [r2, #8]
 8015ef2:	6893      	ldr	r3, [r2, #8]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d1fc      	bne.n	8015ef2 <ai_platform_outputs_get+0x282>
 8015ef8:	490f      	ldr	r1, [pc, #60]	; (8015f38 <ai_platform_outputs_get+0x2c8>)
 8015efa:	4b10      	ldr	r3, [pc, #64]	; (8015f3c <ai_platform_outputs_get+0x2cc>)
 8015efc:	6011      	str	r1, [r2, #0]
 8015efe:	6812      	ldr	r2, [r2, #0]
 8015f00:	429a      	cmp	r2, r3
 8015f02:	f43f af76 	beq.w	8015df2 <ai_platform_outputs_get+0x182>
 8015f06:	e7fe      	b.n	8015f06 <ai_platform_outputs_get+0x296>
 8015f08:	4a0a      	ldr	r2, [pc, #40]	; (8015f34 <ai_platform_outputs_get+0x2c4>)
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	6093      	str	r3, [r2, #8]
 8015f0e:	6893      	ldr	r3, [r2, #8]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d1fc      	bne.n	8015f0e <ai_platform_outputs_get+0x29e>
 8015f14:	4b08      	ldr	r3, [pc, #32]	; (8015f38 <ai_platform_outputs_get+0x2c8>)
 8015f16:	6013      	str	r3, [r2, #0]
 8015f18:	4b08      	ldr	r3, [pc, #32]	; (8015f3c <ai_platform_outputs_get+0x2cc>)
 8015f1a:	6812      	ldr	r2, [r2, #0]
 8015f1c:	429a      	cmp	r2, r3
 8015f1e:	f43f aee1 	beq.w	8015ce4 <ai_platform_outputs_get+0x74>
 8015f22:	e7fe      	b.n	8015f22 <ai_platform_outputs_get+0x2b2>
 8015f24:	a1c00100 	.word	0xa1c00100
 8015f28:	e0002000 	.word	0xe0002000
 8015f2c:	e0042000 	.word	0xe0042000
 8015f30:	5c001000 	.word	0x5c001000
 8015f34:	40023000 	.word	0x40023000
 8015f38:	f407a5c2 	.word	0xf407a5c2
 8015f3c:	b5e8b5cd 	.word	0xb5e8b5cd
 8015f40:	58024000 	.word	0x58024000

08015f44 <ai_platform_network_create>:
 8015f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f48:	b083      	sub	sp, #12
 8015f4a:	4604      	mov	r4, r0
 8015f4c:	4615      	mov	r5, r2
 8015f4e:	461e      	mov	r6, r3
 8015f50:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8015f54:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8015f58:	f7ff fb54 	bl	8015604 <_ai_platform_acquire_crc>
 8015f5c:	2800      	cmp	r0, #0
 8015f5e:	f000 80ba 	beq.w	80160d6 <ai_platform_network_create+0x192>
 8015f62:	4bb3      	ldr	r3, [pc, #716]	; (8016230 <ai_platform_network_create+0x2ec>)
 8015f64:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8015f68:	4601      	mov	r1, r0
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015f70:	eb03 020c 	add.w	r2, r3, ip
 8015f74:	2a01      	cmp	r2, #1
 8015f76:	f240 80a5 	bls.w	80160c4 <ai_platform_network_create+0x180>
 8015f7a:	f240 4249 	movw	r2, #1097	; 0x449
 8015f7e:	4293      	cmp	r3, r2
 8015f80:	f000 80a0 	beq.w	80160c4 <ai_platform_network_create+0x180>
 8015f84:	4aab      	ldr	r2, [pc, #684]	; (8016234 <ai_platform_network_create+0x2f0>)
 8015f86:	6813      	ldr	r3, [r2, #0]
 8015f88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015f8c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8015f90:	f000 80b7 	beq.w	8016102 <ai_platform_network_create+0x1be>
 8015f94:	6813      	ldr	r3, [r2, #0]
 8015f96:	f240 4c83 	movw	ip, #1155	; 0x483
 8015f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015f9e:	4563      	cmp	r3, ip
 8015fa0:	f000 809f 	beq.w	80160e2 <ai_platform_network_create+0x19e>
 8015fa4:	6813      	ldr	r3, [r2, #0]
 8015fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015faa:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8015fae:	f040 8090 	bne.w	80160d2 <ai_platform_network_create+0x18e>
 8015fb2:	4ba1      	ldr	r3, [pc, #644]	; (8016238 <ai_platform_network_create+0x2f4>)
 8015fb4:	2218      	movs	r2, #24
 8015fb6:	609a      	str	r2, [r3, #8]
 8015fb8:	689a      	ldr	r2, [r3, #8]
 8015fba:	2a18      	cmp	r2, #24
 8015fbc:	f040 8089 	bne.w	80160d2 <ai_platform_network_create+0x18e>
 8015fc0:	2201      	movs	r2, #1
 8015fc2:	609a      	str	r2, [r3, #8]
 8015fc4:	689a      	ldr	r2, [r3, #8]
 8015fc6:	2a00      	cmp	r2, #0
 8015fc8:	d1fc      	bne.n	8015fc4 <ai_platform_network_create+0x80>
 8015fca:	4608      	mov	r0, r1
 8015fcc:	f7ff fb1c 	bl	8015608 <_ai_platform_release_crc>
 8015fd0:	4a9a      	ldr	r2, [pc, #616]	; (801623c <ai_platform_network_create+0x2f8>)
 8015fd2:	6813      	ldr	r3, [r2, #0]
 8015fd4:	f023 0301 	bic.w	r3, r3, #1
 8015fd8:	6013      	str	r3, [r2, #0]
 8015fda:	f7ff fb13 	bl	8015604 <_ai_platform_acquire_crc>
 8015fde:	4b94      	ldr	r3, [pc, #592]	; (8016230 <ai_platform_network_create+0x2ec>)
 8015fe0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015fea:	189a      	adds	r2, r3, r2
 8015fec:	2a01      	cmp	r2, #1
 8015fee:	f240 809e 	bls.w	801612e <ai_platform_network_create+0x1ea>
 8015ff2:	f240 4249 	movw	r2, #1097	; 0x449
 8015ff6:	4293      	cmp	r3, r2
 8015ff8:	f000 8099 	beq.w	801612e <ai_platform_network_create+0x1ea>
 8015ffc:	4a8d      	ldr	r2, [pc, #564]	; (8016234 <ai_platform_network_create+0x2f0>)
 8015ffe:	6813      	ldr	r3, [r2, #0]
 8016000:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016004:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8016008:	f000 809f 	beq.w	801614a <ai_platform_network_create+0x206>
 801600c:	6813      	ldr	r3, [r2, #0]
 801600e:	f240 4183 	movw	r1, #1155	; 0x483
 8016012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016016:	428b      	cmp	r3, r1
 8016018:	f000 80c0 	beq.w	801619c <ai_platform_network_create+0x258>
 801601c:	6813      	ldr	r3, [r2, #0]
 801601e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016022:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8016026:	f000 80d9 	beq.w	80161dc <ai_platform_network_create+0x298>
 801602a:	f7ff faed 	bl	8015608 <_ai_platform_release_crc>
 801602e:	2c00      	cmp	r4, #0
 8016030:	f000 80b1 	beq.w	8016196 <ai_platform_network_create+0x252>
 8016034:	4b82      	ldr	r3, [pc, #520]	; (8016240 <ai_platform_network_create+0x2fc>)
 8016036:	602b      	str	r3, [r5, #0]
 8016038:	6025      	str	r5, [r4, #0]
 801603a:	f000 fe95 	bl	8016d68 <core_init>
 801603e:	2800      	cmp	r0, #0
 8016040:	f000 8095 	beq.w	801616e <ai_platform_network_create+0x22a>
 8016044:	4a7d      	ldr	r2, [pc, #500]	; (801623c <ai_platform_network_create+0x2f8>)
 8016046:	6813      	ldr	r3, [r2, #0]
 8016048:	f023 0301 	bic.w	r3, r3, #1
 801604c:	6013      	str	r3, [r2, #0]
 801604e:	f7ff fad9 	bl	8015604 <_ai_platform_acquire_crc>
 8016052:	4b77      	ldr	r3, [pc, #476]	; (8016230 <ai_platform_network_create+0x2ec>)
 8016054:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801605e:	185a      	adds	r2, r3, r1
 8016060:	2a01      	cmp	r2, #1
 8016062:	f240 80ad 	bls.w	80161c0 <ai_platform_network_create+0x27c>
 8016066:	f240 4249 	movw	r2, #1097	; 0x449
 801606a:	4293      	cmp	r3, r2
 801606c:	f000 80a8 	beq.w	80161c0 <ai_platform_network_create+0x27c>
 8016070:	4a70      	ldr	r2, [pc, #448]	; (8016234 <ai_platform_network_create+0x2f0>)
 8016072:	6813      	ldr	r3, [r2, #0]
 8016074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016078:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801607c:	f000 80bc 	beq.w	80161f8 <ai_platform_network_create+0x2b4>
 8016080:	6813      	ldr	r3, [r2, #0]
 8016082:	f240 4183 	movw	r1, #1155	; 0x483
 8016086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801608a:	428b      	cmp	r3, r1
 801608c:	f000 80e2 	beq.w	8016254 <ai_platform_network_create+0x310>
 8016090:	6813      	ldr	r3, [r2, #0]
 8016092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016096:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801609a:	f000 80ed 	beq.w	8016278 <ai_platform_network_create+0x334>
 801609e:	f7ff fab3 	bl	8015608 <_ai_platform_release_crc>
 80160a2:	2200      	movs	r2, #0
 80160a4:	4639      	mov	r1, r7
 80160a6:	4630      	mov	r0, r6
 80160a8:	f002 ffd8 	bl	801905c <ai_version_get>
 80160ac:	4681      	mov	r9, r0
 80160ae:	2200      	movs	r2, #0
 80160b0:	2105      	movs	r1, #5
 80160b2:	2001      	movs	r0, #1
 80160b4:	f002 ffd2 	bl	801905c <ai_version_get>
 80160b8:	4581      	cmp	r9, r0
 80160ba:	f000 80af 	beq.w	801621c <ai_platform_network_create+0x2d8>
 80160be:	f04f 0901 	mov.w	r9, #1
 80160c2:	e056      	b.n	8016172 <ai_platform_network_create+0x22e>
 80160c4:	4b5c      	ldr	r3, [pc, #368]	; (8016238 <ai_platform_network_create+0x2f4>)
 80160c6:	2218      	movs	r2, #24
 80160c8:	609a      	str	r2, [r3, #8]
 80160ca:	689a      	ldr	r2, [r3, #8]
 80160cc:	2a18      	cmp	r2, #24
 80160ce:	d028      	beq.n	8016122 <ai_platform_network_create+0x1de>
 80160d0:	4608      	mov	r0, r1
 80160d2:	f7ff fa99 	bl	8015608 <_ai_platform_release_crc>
 80160d6:	f244 1333 	movw	r3, #16691	; 0x4133
 80160da:	4618      	mov	r0, r3
 80160dc:	b003      	add	sp, #12
 80160de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160e2:	4a58      	ldr	r2, [pc, #352]	; (8016244 <ai_platform_network_create+0x300>)
 80160e4:	2318      	movs	r3, #24
 80160e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80160ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80160ee:	2b18      	cmp	r3, #24
 80160f0:	d1ef      	bne.n	80160d2 <ai_platform_network_create+0x18e>
 80160f2:	2301      	movs	r3, #1
 80160f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80160f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d1fb      	bne.n	80160f8 <ai_platform_network_create+0x1b4>
 8016100:	e763      	b.n	8015fca <ai_platform_network_create+0x86>
 8016102:	4a50      	ldr	r2, [pc, #320]	; (8016244 <ai_platform_network_create+0x300>)
 8016104:	2318      	movs	r3, #24
 8016106:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801610a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801610e:	2b18      	cmp	r3, #24
 8016110:	d1df      	bne.n	80160d2 <ai_platform_network_create+0x18e>
 8016112:	2301      	movs	r3, #1
 8016114:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8016118:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801611c:	2b00      	cmp	r3, #0
 801611e:	d1fb      	bne.n	8016118 <ai_platform_network_create+0x1d4>
 8016120:	e753      	b.n	8015fca <ai_platform_network_create+0x86>
 8016122:	2201      	movs	r2, #1
 8016124:	609a      	str	r2, [r3, #8]
 8016126:	689a      	ldr	r2, [r3, #8]
 8016128:	2a00      	cmp	r2, #0
 801612a:	d1fc      	bne.n	8016126 <ai_platform_network_create+0x1e2>
 801612c:	e74d      	b.n	8015fca <ai_platform_network_create+0x86>
 801612e:	4a42      	ldr	r2, [pc, #264]	; (8016238 <ai_platform_network_create+0x2f4>)
 8016130:	2301      	movs	r3, #1
 8016132:	6093      	str	r3, [r2, #8]
 8016134:	6891      	ldr	r1, [r2, #8]
 8016136:	2900      	cmp	r1, #0
 8016138:	d1fc      	bne.n	8016134 <ai_platform_network_create+0x1f0>
 801613a:	4b43      	ldr	r3, [pc, #268]	; (8016248 <ai_platform_network_create+0x304>)
 801613c:	6013      	str	r3, [r2, #0]
 801613e:	4b43      	ldr	r3, [pc, #268]	; (801624c <ai_platform_network_create+0x308>)
 8016140:	6812      	ldr	r2, [r2, #0]
 8016142:	429a      	cmp	r2, r3
 8016144:	f43f af71 	beq.w	801602a <ai_platform_network_create+0xe6>
 8016148:	e7fe      	b.n	8016148 <ai_platform_network_create+0x204>
 801614a:	4a3e      	ldr	r2, [pc, #248]	; (8016244 <ai_platform_network_create+0x300>)
 801614c:	2301      	movs	r3, #1
 801614e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8016152:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8016156:	2b00      	cmp	r3, #0
 8016158:	d1fb      	bne.n	8016152 <ai_platform_network_create+0x20e>
 801615a:	4b3b      	ldr	r3, [pc, #236]	; (8016248 <ai_platform_network_create+0x304>)
 801615c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8016160:	4b3a      	ldr	r3, [pc, #232]	; (801624c <ai_platform_network_create+0x308>)
 8016162:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8016166:	429a      	cmp	r2, r3
 8016168:	f43f af5f 	beq.w	801602a <ai_platform_network_create+0xe6>
 801616c:	e7fe      	b.n	801616c <ai_platform_network_create+0x228>
 801616e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8016172:	2300      	movs	r3, #0
 8016174:	6023      	str	r3, [r4, #0]
 8016176:	2410      	movs	r4, #16
 8016178:	4642      	mov	r2, r8
 801617a:	4639      	mov	r1, r7
 801617c:	4630      	mov	r0, r6
 801617e:	f002 ff6d 	bl	801905c <ai_version_get>
 8016182:	2300      	movs	r3, #0
 8016184:	64a8      	str	r0, [r5, #72]	; 0x48
 8016186:	f369 0307 	bfi	r3, r9, #0, #8
 801618a:	f364 231f 	bfi	r3, r4, #8, #24
 801618e:	4618      	mov	r0, r3
 8016190:	b003      	add	sp, #12
 8016192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016196:	f241 0310 	movw	r3, #4112	; 0x1010
 801619a:	e79e      	b.n	80160da <ai_platform_network_create+0x196>
 801619c:	4a29      	ldr	r2, [pc, #164]	; (8016244 <ai_platform_network_create+0x300>)
 801619e:	2301      	movs	r3, #1
 80161a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80161a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d1fb      	bne.n	80161a4 <ai_platform_network_create+0x260>
 80161ac:	4b26      	ldr	r3, [pc, #152]	; (8016248 <ai_platform_network_create+0x304>)
 80161ae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80161b2:	4b26      	ldr	r3, [pc, #152]	; (801624c <ai_platform_network_create+0x308>)
 80161b4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80161b8:	429a      	cmp	r2, r3
 80161ba:	f43f af36 	beq.w	801602a <ai_platform_network_create+0xe6>
 80161be:	e7fe      	b.n	80161be <ai_platform_network_create+0x27a>
 80161c0:	4a1d      	ldr	r2, [pc, #116]	; (8016238 <ai_platform_network_create+0x2f4>)
 80161c2:	2301      	movs	r3, #1
 80161c4:	6093      	str	r3, [r2, #8]
 80161c6:	6893      	ldr	r3, [r2, #8]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d1fc      	bne.n	80161c6 <ai_platform_network_create+0x282>
 80161cc:	4b1e      	ldr	r3, [pc, #120]	; (8016248 <ai_platform_network_create+0x304>)
 80161ce:	6013      	str	r3, [r2, #0]
 80161d0:	4b1e      	ldr	r3, [pc, #120]	; (801624c <ai_platform_network_create+0x308>)
 80161d2:	6812      	ldr	r2, [r2, #0]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	f43f af62 	beq.w	801609e <ai_platform_network_create+0x15a>
 80161da:	e7fe      	b.n	80161da <ai_platform_network_create+0x296>
 80161dc:	4a16      	ldr	r2, [pc, #88]	; (8016238 <ai_platform_network_create+0x2f4>)
 80161de:	2301      	movs	r3, #1
 80161e0:	6093      	str	r3, [r2, #8]
 80161e2:	6893      	ldr	r3, [r2, #8]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d1fc      	bne.n	80161e2 <ai_platform_network_create+0x29e>
 80161e8:	4b17      	ldr	r3, [pc, #92]	; (8016248 <ai_platform_network_create+0x304>)
 80161ea:	6013      	str	r3, [r2, #0]
 80161ec:	4b17      	ldr	r3, [pc, #92]	; (801624c <ai_platform_network_create+0x308>)
 80161ee:	6812      	ldr	r2, [r2, #0]
 80161f0:	429a      	cmp	r2, r3
 80161f2:	f43f af1a 	beq.w	801602a <ai_platform_network_create+0xe6>
 80161f6:	e7fe      	b.n	80161f6 <ai_platform_network_create+0x2b2>
 80161f8:	4a12      	ldr	r2, [pc, #72]	; (8016244 <ai_platform_network_create+0x300>)
 80161fa:	2301      	movs	r3, #1
 80161fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8016200:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8016204:	2b00      	cmp	r3, #0
 8016206:	d1fb      	bne.n	8016200 <ai_platform_network_create+0x2bc>
 8016208:	4b0f      	ldr	r3, [pc, #60]	; (8016248 <ai_platform_network_create+0x304>)
 801620a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801620e:	4b0f      	ldr	r3, [pc, #60]	; (801624c <ai_platform_network_create+0x308>)
 8016210:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8016214:	429a      	cmp	r2, r3
 8016216:	f43f af42 	beq.w	801609e <ai_platform_network_create+0x15a>
 801621a:	e7fe      	b.n	801621a <ai_platform_network_create+0x2d6>
 801621c:	4b0c      	ldr	r3, [pc, #48]	; (8016250 <ai_platform_network_create+0x30c>)
 801621e:	a801      	add	r0, sp, #4
 8016220:	9301      	str	r3, [sp, #4]
 8016222:	f002 fe85 	bl	8018f30 <ai_check_custom_types>
 8016226:	2800      	cmp	r0, #0
 8016228:	d034      	beq.n	8016294 <ai_platform_network_create+0x350>
 801622a:	2400      	movs	r4, #0
 801622c:	46a1      	mov	r9, r4
 801622e:	e7a3      	b.n	8016178 <ai_platform_network_create+0x234>
 8016230:	e0042000 	.word	0xe0042000
 8016234:	5c001000 	.word	0x5c001000
 8016238:	40023000 	.word	0x40023000
 801623c:	e0002000 	.word	0xe0002000
 8016240:	a1c00100 	.word	0xa1c00100
 8016244:	58024000 	.word	0x58024000
 8016248:	f407a5c2 	.word	0xf407a5c2
 801624c:	b5e8b5cd 	.word	0xb5e8b5cd
 8016250:	84048403 	.word	0x84048403
 8016254:	4b11      	ldr	r3, [pc, #68]	; (801629c <ai_platform_network_create+0x358>)
 8016256:	2201      	movs	r2, #1
 8016258:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801625c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8016260:	2a00      	cmp	r2, #0
 8016262:	d1fb      	bne.n	801625c <ai_platform_network_create+0x318>
 8016264:	4a0e      	ldr	r2, [pc, #56]	; (80162a0 <ai_platform_network_create+0x35c>)
 8016266:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 801626a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801626e:	4b0d      	ldr	r3, [pc, #52]	; (80162a4 <ai_platform_network_create+0x360>)
 8016270:	429a      	cmp	r2, r3
 8016272:	f43f af14 	beq.w	801609e <ai_platform_network_create+0x15a>
 8016276:	e7fe      	b.n	8016276 <ai_platform_network_create+0x332>
 8016278:	4b0b      	ldr	r3, [pc, #44]	; (80162a8 <ai_platform_network_create+0x364>)
 801627a:	2201      	movs	r2, #1
 801627c:	609a      	str	r2, [r3, #8]
 801627e:	689a      	ldr	r2, [r3, #8]
 8016280:	2a00      	cmp	r2, #0
 8016282:	d1fc      	bne.n	801627e <ai_platform_network_create+0x33a>
 8016284:	4a06      	ldr	r2, [pc, #24]	; (80162a0 <ai_platform_network_create+0x35c>)
 8016286:	601a      	str	r2, [r3, #0]
 8016288:	681a      	ldr	r2, [r3, #0]
 801628a:	4b06      	ldr	r3, [pc, #24]	; (80162a4 <ai_platform_network_create+0x360>)
 801628c:	429a      	cmp	r2, r3
 801628e:	f43f af06 	beq.w	801609e <ai_platform_network_create+0x15a>
 8016292:	e7fe      	b.n	8016292 <ai_platform_network_create+0x34e>
 8016294:	f04f 0902 	mov.w	r9, #2
 8016298:	e76b      	b.n	8016172 <ai_platform_network_create+0x22e>
 801629a:	bf00      	nop
 801629c:	58024000 	.word	0x58024000
 80162a0:	f407a5c2 	.word	0xf407a5c2
 80162a4:	b5e8b5cd 	.word	0xb5e8b5cd
 80162a8:	40023000 	.word	0x40023000

080162ac <ai_platform_network_init>:
 80162ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162b0:	2800      	cmp	r0, #0
 80162b2:	d04f      	beq.n	8016354 <ai_platform_network_init+0xa8>
 80162b4:	4bad      	ldr	r3, [pc, #692]	; (801656c <ai_platform_network_init+0x2c0>)
 80162b6:	4604      	mov	r4, r0
 80162b8:	6802      	ldr	r2, [r0, #0]
 80162ba:	429a      	cmp	r2, r3
 80162bc:	d14a      	bne.n	8016354 <ai_platform_network_init+0xa8>
 80162be:	4aac      	ldr	r2, [pc, #688]	; (8016570 <ai_platform_network_init+0x2c4>)
 80162c0:	460d      	mov	r5, r1
 80162c2:	6813      	ldr	r3, [r2, #0]
 80162c4:	f023 0301 	bic.w	r3, r3, #1
 80162c8:	6013      	str	r3, [r2, #0]
 80162ca:	f7ff f99b 	bl	8015604 <_ai_platform_acquire_crc>
 80162ce:	4ba9      	ldr	r3, [pc, #676]	; (8016574 <ai_platform_network_init+0x2c8>)
 80162d0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80162da:	189a      	adds	r2, r3, r2
 80162dc:	2a01      	cmp	r2, #1
 80162de:	d975      	bls.n	80163cc <ai_platform_network_init+0x120>
 80162e0:	f240 4249 	movw	r2, #1097	; 0x449
 80162e4:	4293      	cmp	r3, r2
 80162e6:	d071      	beq.n	80163cc <ai_platform_network_init+0x120>
 80162e8:	4aa3      	ldr	r2, [pc, #652]	; (8016578 <ai_platform_network_init+0x2cc>)
 80162ea:	6813      	ldr	r3, [r2, #0]
 80162ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80162f0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80162f4:	f000 8088 	beq.w	8016408 <ai_platform_network_init+0x15c>
 80162f8:	6813      	ldr	r3, [r2, #0]
 80162fa:	f240 4183 	movw	r1, #1155	; 0x483
 80162fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016302:	428b      	cmp	r3, r1
 8016304:	f000 80cc 	beq.w	80164a0 <ai_platform_network_init+0x1f4>
 8016308:	6813      	ldr	r3, [r2, #0]
 801630a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801630e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8016312:	f000 80f5 	beq.w	8016500 <ai_platform_network_init+0x254>
 8016316:	f7ff f977 	bl	8015608 <_ai_platform_release_crc>
 801631a:	2d00      	cmp	r5, #0
 801631c:	f000 80fe 	beq.w	801651c <ai_platform_network_init+0x270>
 8016320:	4b96      	ldr	r3, [pc, #600]	; (801657c <ai_platform_network_init+0x2d0>)
 8016322:	682a      	ldr	r2, [r5, #0]
 8016324:	429a      	cmp	r2, r3
 8016326:	f040 8081 	bne.w	801642c <ai_platform_network_init+0x180>
 801632a:	692b      	ldr	r3, [r5, #16]
 801632c:	89ae      	ldrh	r6, [r5, #12]
 801632e:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8016332:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8016336:	62a3      	str	r3, [r4, #40]	; 0x28
 8016338:	e9c4 1207 	strd	r1, r2, [r4, #28]
 801633c:	2303      	movs	r3, #3
 801633e:	84a6      	strh	r6, [r4, #36]	; 0x24
 8016340:	4626      	mov	r6, r4
 8016342:	4620      	mov	r0, r4
 8016344:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8016348:	60e3      	str	r3, [r4, #12]
 801634a:	f002 fe19 	bl	8018f80 <ai_layers_init_all>
 801634e:	4630      	mov	r0, r6
 8016350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016354:	4a86      	ldr	r2, [pc, #536]	; (8016570 <ai_platform_network_init+0x2c4>)
 8016356:	6813      	ldr	r3, [r2, #0]
 8016358:	f023 0301 	bic.w	r3, r3, #1
 801635c:	6013      	str	r3, [r2, #0]
 801635e:	f7ff f951 	bl	8015604 <_ai_platform_acquire_crc>
 8016362:	4b84      	ldr	r3, [pc, #528]	; (8016574 <ai_platform_network_init+0x2c8>)
 8016364:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801636e:	185a      	adds	r2, r3, r1
 8016370:	2a01      	cmp	r2, #1
 8016372:	d91e      	bls.n	80163b2 <ai_platform_network_init+0x106>
 8016374:	f240 4249 	movw	r2, #1097	; 0x449
 8016378:	4293      	cmp	r3, r2
 801637a:	d01a      	beq.n	80163b2 <ai_platform_network_init+0x106>
 801637c:	4a7e      	ldr	r2, [pc, #504]	; (8016578 <ai_platform_network_init+0x2cc>)
 801637e:	6813      	ldr	r3, [r2, #0]
 8016380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016384:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8016388:	d02d      	beq.n	80163e6 <ai_platform_network_init+0x13a>
 801638a:	6813      	ldr	r3, [r2, #0]
 801638c:	f240 4183 	movw	r1, #1155	; 0x483
 8016390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016394:	428b      	cmp	r3, r1
 8016396:	d072      	beq.n	801647e <ai_platform_network_init+0x1d2>
 8016398:	6813      	ldr	r3, [r2, #0]
 801639a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801639e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80163a2:	f000 809f 	beq.w	80164e4 <ai_platform_network_init+0x238>
 80163a6:	2600      	movs	r6, #0
 80163a8:	f7ff f92e 	bl	8015608 <_ai_platform_release_crc>
 80163ac:	4630      	mov	r0, r6
 80163ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163b2:	4a73      	ldr	r2, [pc, #460]	; (8016580 <ai_platform_network_init+0x2d4>)
 80163b4:	2301      	movs	r3, #1
 80163b6:	6093      	str	r3, [r2, #8]
 80163b8:	6893      	ldr	r3, [r2, #8]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d1fc      	bne.n	80163b8 <ai_platform_network_init+0x10c>
 80163be:	4971      	ldr	r1, [pc, #452]	; (8016584 <ai_platform_network_init+0x2d8>)
 80163c0:	4b71      	ldr	r3, [pc, #452]	; (8016588 <ai_platform_network_init+0x2dc>)
 80163c2:	6011      	str	r1, [r2, #0]
 80163c4:	6812      	ldr	r2, [r2, #0]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d0ed      	beq.n	80163a6 <ai_platform_network_init+0xfa>
 80163ca:	e7fe      	b.n	80163ca <ai_platform_network_init+0x11e>
 80163cc:	4a6c      	ldr	r2, [pc, #432]	; (8016580 <ai_platform_network_init+0x2d4>)
 80163ce:	2301      	movs	r3, #1
 80163d0:	6093      	str	r3, [r2, #8]
 80163d2:	6893      	ldr	r3, [r2, #8]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d1fc      	bne.n	80163d2 <ai_platform_network_init+0x126>
 80163d8:	4b6a      	ldr	r3, [pc, #424]	; (8016584 <ai_platform_network_init+0x2d8>)
 80163da:	6013      	str	r3, [r2, #0]
 80163dc:	4b6a      	ldr	r3, [pc, #424]	; (8016588 <ai_platform_network_init+0x2dc>)
 80163de:	6812      	ldr	r2, [r2, #0]
 80163e0:	429a      	cmp	r2, r3
 80163e2:	d098      	beq.n	8016316 <ai_platform_network_init+0x6a>
 80163e4:	e7fe      	b.n	80163e4 <ai_platform_network_init+0x138>
 80163e6:	4a69      	ldr	r2, [pc, #420]	; (801658c <ai_platform_network_init+0x2e0>)
 80163e8:	2301      	movs	r3, #1
 80163ea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80163ee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d1fb      	bne.n	80163ee <ai_platform_network_init+0x142>
 80163f6:	4963      	ldr	r1, [pc, #396]	; (8016584 <ai_platform_network_init+0x2d8>)
 80163f8:	4b63      	ldr	r3, [pc, #396]	; (8016588 <ai_platform_network_init+0x2dc>)
 80163fa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80163fe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8016402:	429a      	cmp	r2, r3
 8016404:	d0cf      	beq.n	80163a6 <ai_platform_network_init+0xfa>
 8016406:	e7fe      	b.n	8016406 <ai_platform_network_init+0x15a>
 8016408:	4a60      	ldr	r2, [pc, #384]	; (801658c <ai_platform_network_init+0x2e0>)
 801640a:	2301      	movs	r3, #1
 801640c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8016410:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8016414:	2b00      	cmp	r3, #0
 8016416:	d1fb      	bne.n	8016410 <ai_platform_network_init+0x164>
 8016418:	4b5a      	ldr	r3, [pc, #360]	; (8016584 <ai_platform_network_init+0x2d8>)
 801641a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801641e:	4b5a      	ldr	r3, [pc, #360]	; (8016588 <ai_platform_network_init+0x2dc>)
 8016420:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8016424:	429a      	cmp	r2, r3
 8016426:	f43f af76 	beq.w	8016316 <ai_platform_network_init+0x6a>
 801642a:	e7fe      	b.n	801642a <ai_platform_network_init+0x17e>
 801642c:	2101      	movs	r1, #1
 801642e:	4628      	mov	r0, r5
 8016430:	f105 081c 	add.w	r8, r5, #28
 8016434:	686e      	ldr	r6, [r5, #4]
 8016436:	f7ff f897 	bl	8015568 <ai_buffer_get_size>
 801643a:	4607      	mov	r7, r0
 801643c:	2101      	movs	r1, #1
 801643e:	4640      	mov	r0, r8
 8016440:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8016444:	f7ff f890 	bl	8015568 <ai_buffer_get_size>
 8016448:	2f00      	cmp	r7, #0
 801644a:	d13b      	bne.n	80164c4 <ai_platform_network_init+0x218>
 801644c:	2800      	cmp	r0, #0
 801644e:	d079      	beq.n	8016544 <ai_platform_network_init+0x298>
 8016450:	f1b9 0f00 	cmp.w	r9, #0
 8016454:	d07a      	beq.n	801654c <ai_platform_network_init+0x2a0>
 8016456:	f04f 0c01 	mov.w	ip, #1
 801645a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801645c:	2600      	movs	r6, #0
 801645e:	83e7      	strh	r7, [r4, #30]
 8016460:	4563      	cmp	r3, ip
 8016462:	83a6      	strh	r6, [r4, #28]
 8016464:	d361      	bcc.n	801652a <ai_platform_network_init+0x27e>
 8016466:	f1bc 0f00 	cmp.w	ip, #0
 801646a:	d07c      	beq.n	8016566 <ai_platform_network_init+0x2ba>
 801646c:	4647      	mov	r7, r8
 801646e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8016470:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016474:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016478:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801647c:	e75e      	b.n	801633c <ai_platform_network_init+0x90>
 801647e:	4a43      	ldr	r2, [pc, #268]	; (801658c <ai_platform_network_init+0x2e0>)
 8016480:	2301      	movs	r3, #1
 8016482:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8016486:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801648a:	2b00      	cmp	r3, #0
 801648c:	d1fb      	bne.n	8016486 <ai_platform_network_init+0x1da>
 801648e:	493d      	ldr	r1, [pc, #244]	; (8016584 <ai_platform_network_init+0x2d8>)
 8016490:	4b3d      	ldr	r3, [pc, #244]	; (8016588 <ai_platform_network_init+0x2dc>)
 8016492:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8016496:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801649a:	429a      	cmp	r2, r3
 801649c:	d083      	beq.n	80163a6 <ai_platform_network_init+0xfa>
 801649e:	e7fe      	b.n	801649e <ai_platform_network_init+0x1f2>
 80164a0:	4a3a      	ldr	r2, [pc, #232]	; (801658c <ai_platform_network_init+0x2e0>)
 80164a2:	2301      	movs	r3, #1
 80164a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80164a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d1fb      	bne.n	80164a8 <ai_platform_network_init+0x1fc>
 80164b0:	4b34      	ldr	r3, [pc, #208]	; (8016584 <ai_platform_network_init+0x2d8>)
 80164b2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80164b6:	4b34      	ldr	r3, [pc, #208]	; (8016588 <ai_platform_network_init+0x2dc>)
 80164b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80164bc:	429a      	cmp	r2, r3
 80164be:	f43f af2a 	beq.w	8016316 <ai_platform_network_init+0x6a>
 80164c2:	e7fe      	b.n	80164c2 <ai_platform_network_init+0x216>
 80164c4:	2800      	cmp	r0, #0
 80164c6:	d137      	bne.n	8016538 <ai_platform_network_init+0x28c>
 80164c8:	4680      	mov	r8, r0
 80164ca:	4684      	mov	ip, r0
 80164cc:	2e00      	cmp	r6, #0
 80164ce:	d044      	beq.n	801655a <ai_platform_network_init+0x2ae>
 80164d0:	8be6      	ldrh	r6, [r4, #30]
 80164d2:	2e00      	cmp	r6, #0
 80164d4:	d15c      	bne.n	8016590 <ai_platform_network_init+0x2e4>
 80164d6:	2212      	movs	r2, #18
 80164d8:	2116      	movs	r1, #22
 80164da:	f104 0010 	add.w	r0, r4, #16
 80164de:	f000 fc4b 	bl	8016d78 <core_set_error>
 80164e2:	e763      	b.n	80163ac <ai_platform_network_init+0x100>
 80164e4:	4a26      	ldr	r2, [pc, #152]	; (8016580 <ai_platform_network_init+0x2d4>)
 80164e6:	2301      	movs	r3, #1
 80164e8:	6093      	str	r3, [r2, #8]
 80164ea:	6893      	ldr	r3, [r2, #8]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d1fc      	bne.n	80164ea <ai_platform_network_init+0x23e>
 80164f0:	4924      	ldr	r1, [pc, #144]	; (8016584 <ai_platform_network_init+0x2d8>)
 80164f2:	4b25      	ldr	r3, [pc, #148]	; (8016588 <ai_platform_network_init+0x2dc>)
 80164f4:	6011      	str	r1, [r2, #0]
 80164f6:	6812      	ldr	r2, [r2, #0]
 80164f8:	429a      	cmp	r2, r3
 80164fa:	f43f af54 	beq.w	80163a6 <ai_platform_network_init+0xfa>
 80164fe:	e7fe      	b.n	80164fe <ai_platform_network_init+0x252>
 8016500:	4a1f      	ldr	r2, [pc, #124]	; (8016580 <ai_platform_network_init+0x2d4>)
 8016502:	2301      	movs	r3, #1
 8016504:	6093      	str	r3, [r2, #8]
 8016506:	6893      	ldr	r3, [r2, #8]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d1fc      	bne.n	8016506 <ai_platform_network_init+0x25a>
 801650c:	4b1d      	ldr	r3, [pc, #116]	; (8016584 <ai_platform_network_init+0x2d8>)
 801650e:	6013      	str	r3, [r2, #0]
 8016510:	4b1d      	ldr	r3, [pc, #116]	; (8016588 <ai_platform_network_init+0x2dc>)
 8016512:	6812      	ldr	r2, [r2, #0]
 8016514:	429a      	cmp	r2, r3
 8016516:	f43f aefe 	beq.w	8016316 <ai_platform_network_init+0x6a>
 801651a:	e7fe      	b.n	801651a <ai_platform_network_init+0x26e>
 801651c:	2110      	movs	r1, #16
 801651e:	2211      	movs	r2, #17
 8016520:	462e      	mov	r6, r5
 8016522:	1860      	adds	r0, r4, r1
 8016524:	f000 fc28 	bl	8016d78 <core_set_error>
 8016528:	e740      	b.n	80163ac <ai_platform_network_init+0x100>
 801652a:	2213      	movs	r2, #19
 801652c:	2116      	movs	r1, #22
 801652e:	f104 0010 	add.w	r0, r4, #16
 8016532:	f000 fc21 	bl	8016d78 <core_set_error>
 8016536:	e739      	b.n	80163ac <ai_platform_network_init+0x100>
 8016538:	f1b9 0f00 	cmp.w	r9, #0
 801653c:	d006      	beq.n	801654c <ai_platform_network_init+0x2a0>
 801653e:	f04f 0c01 	mov.w	ip, #1
 8016542:	e7c3      	b.n	80164cc <ai_platform_network_init+0x220>
 8016544:	4607      	mov	r7, r0
 8016546:	4680      	mov	r8, r0
 8016548:	4684      	mov	ip, r0
 801654a:	e786      	b.n	801645a <ai_platform_network_init+0x1ae>
 801654c:	2110      	movs	r1, #16
 801654e:	2213      	movs	r2, #19
 8016550:	2600      	movs	r6, #0
 8016552:	1860      	adds	r0, r4, r1
 8016554:	f000 fc10 	bl	8016d78 <core_set_error>
 8016558:	e728      	b.n	80163ac <ai_platform_network_init+0x100>
 801655a:	2110      	movs	r1, #16
 801655c:	2212      	movs	r2, #18
 801655e:	1860      	adds	r0, r4, r1
 8016560:	f000 fc0a 	bl	8016d78 <core_set_error>
 8016564:	e722      	b.n	80163ac <ai_platform_network_init+0x100>
 8016566:	4666      	mov	r6, ip
 8016568:	e6e8      	b.n	801633c <ai_platform_network_init+0x90>
 801656a:	bf00      	nop
 801656c:	a1c00100 	.word	0xa1c00100
 8016570:	e0002000 	.word	0xe0002000
 8016574:	e0042000 	.word	0xe0042000
 8016578:	5c001000 	.word	0x5c001000
 801657c:	a1facade 	.word	0xa1facade
 8016580:	40023000 	.word	0x40023000
 8016584:	f407a5c2 	.word	0xf407a5c2
 8016588:	b5e8b5cd 	.word	0xb5e8b5cd
 801658c:	58024000 	.word	0x58024000
 8016590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016592:	6a26      	ldr	r6, [r4, #32]
 8016594:	2701      	movs	r7, #1
 8016596:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016598:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801659c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80165a0:	e75b      	b.n	801645a <ai_platform_network_init+0x1ae>
 80165a2:	bf00      	nop

080165a4 <ai_platform_network_post_init>:
 80165a4:	b538      	push	{r3, r4, r5, lr}
 80165a6:	2800      	cmp	r0, #0
 80165a8:	d04a      	beq.n	8016640 <ai_platform_network_post_init+0x9c>
 80165aa:	4b7c      	ldr	r3, [pc, #496]	; (801679c <ai_platform_network_post_init+0x1f8>)
 80165ac:	4604      	mov	r4, r0
 80165ae:	6802      	ldr	r2, [r0, #0]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d145      	bne.n	8016640 <ai_platform_network_post_init+0x9c>
 80165b4:	4a7a      	ldr	r2, [pc, #488]	; (80167a0 <ai_platform_network_post_init+0x1fc>)
 80165b6:	6813      	ldr	r3, [r2, #0]
 80165b8:	f023 0301 	bic.w	r3, r3, #1
 80165bc:	6013      	str	r3, [r2, #0]
 80165be:	f7ff f821 	bl	8015604 <_ai_platform_acquire_crc>
 80165c2:	4b78      	ldr	r3, [pc, #480]	; (80167a4 <ai_platform_network_post_init+0x200>)
 80165c4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80165ce:	189a      	adds	r2, r3, r2
 80165d0:	2a01      	cmp	r2, #1
 80165d2:	d96e      	bls.n	80166b2 <ai_platform_network_post_init+0x10e>
 80165d4:	f240 4249 	movw	r2, #1097	; 0x449
 80165d8:	4293      	cmp	r3, r2
 80165da:	d06a      	beq.n	80166b2 <ai_platform_network_post_init+0x10e>
 80165dc:	4a72      	ldr	r2, [pc, #456]	; (80167a8 <ai_platform_network_post_init+0x204>)
 80165de:	6813      	ldr	r3, [r2, #0]
 80165e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80165e4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80165e8:	f000 8081 	beq.w	80166ee <ai_platform_network_post_init+0x14a>
 80165ec:	6813      	ldr	r3, [r2, #0]
 80165ee:	f240 4183 	movw	r1, #1155	; 0x483
 80165f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80165f6:	428b      	cmp	r3, r1
 80165f8:	f000 80a3 	beq.w	8016742 <ai_platform_network_post_init+0x19e>
 80165fc:	6813      	ldr	r3, [r2, #0]
 80165fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016602:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8016606:	f000 80bb 	beq.w	8016780 <ai_platform_network_post_init+0x1dc>
 801660a:	f7fe fffd 	bl	8015608 <_ai_platform_release_crc>
 801660e:	68e3      	ldr	r3, [r4, #12]
 8016610:	f013 0502 	ands.w	r5, r3, #2
 8016614:	d07d      	beq.n	8016712 <ai_platform_network_post_init+0x16e>
 8016616:	4620      	mov	r0, r4
 8016618:	f002 fcc0 	bl	8018f9c <ai_layers_post_init_all>
 801661c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801661e:	b16b      	cbz	r3, 801663c <ai_platform_network_post_init+0x98>
 8016620:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8016622:	e007      	b.n	8016634 <ai_platform_network_post_init+0x90>
 8016624:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8016628:	4798      	blx	r3
 801662a:	692b      	ldr	r3, [r5, #16]
 801662c:	b133      	cbz	r3, 801663c <ai_platform_network_post_init+0x98>
 801662e:	42ab      	cmp	r3, r5
 8016630:	461d      	mov	r5, r3
 8016632:	d003      	beq.n	801663c <ai_platform_network_post_init+0x98>
 8016634:	4629      	mov	r1, r5
 8016636:	2000      	movs	r0, #0
 8016638:	2d00      	cmp	r5, #0
 801663a:	d1f3      	bne.n	8016624 <ai_platform_network_post_init+0x80>
 801663c:	2001      	movs	r0, #1
 801663e:	bd38      	pop	{r3, r4, r5, pc}
 8016640:	4a57      	ldr	r2, [pc, #348]	; (80167a0 <ai_platform_network_post_init+0x1fc>)
 8016642:	6813      	ldr	r3, [r2, #0]
 8016644:	f023 0301 	bic.w	r3, r3, #1
 8016648:	6013      	str	r3, [r2, #0]
 801664a:	f7fe ffdb 	bl	8015604 <_ai_platform_acquire_crc>
 801664e:	4b55      	ldr	r3, [pc, #340]	; (80167a4 <ai_platform_network_post_init+0x200>)
 8016650:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801665a:	185a      	adds	r2, r3, r1
 801665c:	2a01      	cmp	r2, #1
 801665e:	d91b      	bls.n	8016698 <ai_platform_network_post_init+0xf4>
 8016660:	f240 4249 	movw	r2, #1097	; 0x449
 8016664:	4293      	cmp	r3, r2
 8016666:	d017      	beq.n	8016698 <ai_platform_network_post_init+0xf4>
 8016668:	4a4f      	ldr	r2, [pc, #316]	; (80167a8 <ai_platform_network_post_init+0x204>)
 801666a:	6813      	ldr	r3, [r2, #0]
 801666c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016670:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8016674:	d02a      	beq.n	80166cc <ai_platform_network_post_init+0x128>
 8016676:	6813      	ldr	r3, [r2, #0]
 8016678:	f240 4183 	movw	r1, #1155	; 0x483
 801667c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016680:	428b      	cmp	r3, r1
 8016682:	d04d      	beq.n	8016720 <ai_platform_network_post_init+0x17c>
 8016684:	6813      	ldr	r3, [r2, #0]
 8016686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801668a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801668e:	d06a      	beq.n	8016766 <ai_platform_network_post_init+0x1c2>
 8016690:	f7fe ffba 	bl	8015608 <_ai_platform_release_crc>
 8016694:	2000      	movs	r0, #0
 8016696:	bd38      	pop	{r3, r4, r5, pc}
 8016698:	4a44      	ldr	r2, [pc, #272]	; (80167ac <ai_platform_network_post_init+0x208>)
 801669a:	2301      	movs	r3, #1
 801669c:	6093      	str	r3, [r2, #8]
 801669e:	6893      	ldr	r3, [r2, #8]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d1fc      	bne.n	801669e <ai_platform_network_post_init+0xfa>
 80166a4:	4942      	ldr	r1, [pc, #264]	; (80167b0 <ai_platform_network_post_init+0x20c>)
 80166a6:	4b43      	ldr	r3, [pc, #268]	; (80167b4 <ai_platform_network_post_init+0x210>)
 80166a8:	6011      	str	r1, [r2, #0]
 80166aa:	6812      	ldr	r2, [r2, #0]
 80166ac:	429a      	cmp	r2, r3
 80166ae:	d0ef      	beq.n	8016690 <ai_platform_network_post_init+0xec>
 80166b0:	e7fe      	b.n	80166b0 <ai_platform_network_post_init+0x10c>
 80166b2:	4a3e      	ldr	r2, [pc, #248]	; (80167ac <ai_platform_network_post_init+0x208>)
 80166b4:	2301      	movs	r3, #1
 80166b6:	6093      	str	r3, [r2, #8]
 80166b8:	6893      	ldr	r3, [r2, #8]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d1fc      	bne.n	80166b8 <ai_platform_network_post_init+0x114>
 80166be:	493c      	ldr	r1, [pc, #240]	; (80167b0 <ai_platform_network_post_init+0x20c>)
 80166c0:	4b3c      	ldr	r3, [pc, #240]	; (80167b4 <ai_platform_network_post_init+0x210>)
 80166c2:	6011      	str	r1, [r2, #0]
 80166c4:	6812      	ldr	r2, [r2, #0]
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d09f      	beq.n	801660a <ai_platform_network_post_init+0x66>
 80166ca:	e7fe      	b.n	80166ca <ai_platform_network_post_init+0x126>
 80166cc:	4a3a      	ldr	r2, [pc, #232]	; (80167b8 <ai_platform_network_post_init+0x214>)
 80166ce:	2301      	movs	r3, #1
 80166d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80166d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d1fb      	bne.n	80166d4 <ai_platform_network_post_init+0x130>
 80166dc:	4934      	ldr	r1, [pc, #208]	; (80167b0 <ai_platform_network_post_init+0x20c>)
 80166de:	4b35      	ldr	r3, [pc, #212]	; (80167b4 <ai_platform_network_post_init+0x210>)
 80166e0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80166e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80166e8:	429a      	cmp	r2, r3
 80166ea:	d0d1      	beq.n	8016690 <ai_platform_network_post_init+0xec>
 80166ec:	e7fe      	b.n	80166ec <ai_platform_network_post_init+0x148>
 80166ee:	4a32      	ldr	r2, [pc, #200]	; (80167b8 <ai_platform_network_post_init+0x214>)
 80166f0:	2301      	movs	r3, #1
 80166f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80166f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d1fb      	bne.n	80166f6 <ai_platform_network_post_init+0x152>
 80166fe:	492c      	ldr	r1, [pc, #176]	; (80167b0 <ai_platform_network_post_init+0x20c>)
 8016700:	4b2c      	ldr	r3, [pc, #176]	; (80167b4 <ai_platform_network_post_init+0x210>)
 8016702:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8016706:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801670a:	429a      	cmp	r2, r3
 801670c:	f43f af7d 	beq.w	801660a <ai_platform_network_post_init+0x66>
 8016710:	e7fe      	b.n	8016710 <ai_platform_network_post_init+0x16c>
 8016712:	2210      	movs	r2, #16
 8016714:	2111      	movs	r1, #17
 8016716:	18a0      	adds	r0, r4, r2
 8016718:	f000 fb2e 	bl	8016d78 <core_set_error>
 801671c:	4628      	mov	r0, r5
 801671e:	bd38      	pop	{r3, r4, r5, pc}
 8016720:	4a25      	ldr	r2, [pc, #148]	; (80167b8 <ai_platform_network_post_init+0x214>)
 8016722:	2301      	movs	r3, #1
 8016724:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8016728:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801672c:	2b00      	cmp	r3, #0
 801672e:	d1fb      	bne.n	8016728 <ai_platform_network_post_init+0x184>
 8016730:	491f      	ldr	r1, [pc, #124]	; (80167b0 <ai_platform_network_post_init+0x20c>)
 8016732:	4b20      	ldr	r3, [pc, #128]	; (80167b4 <ai_platform_network_post_init+0x210>)
 8016734:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8016738:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801673c:	429a      	cmp	r2, r3
 801673e:	d0a7      	beq.n	8016690 <ai_platform_network_post_init+0xec>
 8016740:	e7fe      	b.n	8016740 <ai_platform_network_post_init+0x19c>
 8016742:	4a1d      	ldr	r2, [pc, #116]	; (80167b8 <ai_platform_network_post_init+0x214>)
 8016744:	2301      	movs	r3, #1
 8016746:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801674a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801674e:	2b00      	cmp	r3, #0
 8016750:	d1fb      	bne.n	801674a <ai_platform_network_post_init+0x1a6>
 8016752:	4917      	ldr	r1, [pc, #92]	; (80167b0 <ai_platform_network_post_init+0x20c>)
 8016754:	4b17      	ldr	r3, [pc, #92]	; (80167b4 <ai_platform_network_post_init+0x210>)
 8016756:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801675a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801675e:	429a      	cmp	r2, r3
 8016760:	f43f af53 	beq.w	801660a <ai_platform_network_post_init+0x66>
 8016764:	e7fe      	b.n	8016764 <ai_platform_network_post_init+0x1c0>
 8016766:	4a11      	ldr	r2, [pc, #68]	; (80167ac <ai_platform_network_post_init+0x208>)
 8016768:	2301      	movs	r3, #1
 801676a:	6093      	str	r3, [r2, #8]
 801676c:	6893      	ldr	r3, [r2, #8]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d1fc      	bne.n	801676c <ai_platform_network_post_init+0x1c8>
 8016772:	490f      	ldr	r1, [pc, #60]	; (80167b0 <ai_platform_network_post_init+0x20c>)
 8016774:	4b0f      	ldr	r3, [pc, #60]	; (80167b4 <ai_platform_network_post_init+0x210>)
 8016776:	6011      	str	r1, [r2, #0]
 8016778:	6812      	ldr	r2, [r2, #0]
 801677a:	429a      	cmp	r2, r3
 801677c:	d088      	beq.n	8016690 <ai_platform_network_post_init+0xec>
 801677e:	e7fe      	b.n	801677e <ai_platform_network_post_init+0x1da>
 8016780:	4a0a      	ldr	r2, [pc, #40]	; (80167ac <ai_platform_network_post_init+0x208>)
 8016782:	2301      	movs	r3, #1
 8016784:	6093      	str	r3, [r2, #8]
 8016786:	6893      	ldr	r3, [r2, #8]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d1fc      	bne.n	8016786 <ai_platform_network_post_init+0x1e2>
 801678c:	4908      	ldr	r1, [pc, #32]	; (80167b0 <ai_platform_network_post_init+0x20c>)
 801678e:	4b09      	ldr	r3, [pc, #36]	; (80167b4 <ai_platform_network_post_init+0x210>)
 8016790:	6011      	str	r1, [r2, #0]
 8016792:	6812      	ldr	r2, [r2, #0]
 8016794:	429a      	cmp	r2, r3
 8016796:	f43f af38 	beq.w	801660a <ai_platform_network_post_init+0x66>
 801679a:	e7fe      	b.n	801679a <ai_platform_network_post_init+0x1f6>
 801679c:	a1c00100 	.word	0xa1c00100
 80167a0:	e0002000 	.word	0xe0002000
 80167a4:	e0042000 	.word	0xe0042000
 80167a8:	5c001000 	.word	0x5c001000
 80167ac:	40023000 	.word	0x40023000
 80167b0:	f407a5c2 	.word	0xf407a5c2
 80167b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80167b8:	58024000 	.word	0x58024000

080167bc <ai_platform_network_process>:
 80167bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c0:	b085      	sub	sp, #20
 80167c2:	460e      	mov	r6, r1
 80167c4:	4605      	mov	r5, r0
 80167c6:	9202      	str	r2, [sp, #8]
 80167c8:	b120      	cbz	r0, 80167d4 <ai_platform_network_process+0x18>
 80167ca:	4bb5      	ldr	r3, [pc, #724]	; (8016aa0 <ai_platform_network_process+0x2e4>)
 80167cc:	6802      	ldr	r2, [r0, #0]
 80167ce:	429a      	cmp	r2, r3
 80167d0:	bf18      	it	ne
 80167d2:	2500      	movne	r5, #0
 80167d4:	4ab3      	ldr	r2, [pc, #716]	; (8016aa4 <ai_platform_network_process+0x2e8>)
 80167d6:	6813      	ldr	r3, [r2, #0]
 80167d8:	f023 0301 	bic.w	r3, r3, #1
 80167dc:	6013      	str	r3, [r2, #0]
 80167de:	f7fe ff11 	bl	8015604 <_ai_platform_acquire_crc>
 80167e2:	4bb1      	ldr	r3, [pc, #708]	; (8016aa8 <ai_platform_network_process+0x2ec>)
 80167e4:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80167ee:	185a      	adds	r2, r3, r1
 80167f0:	2a01      	cmp	r2, #1
 80167f2:	f240 8147 	bls.w	8016a84 <ai_platform_network_process+0x2c8>
 80167f6:	f240 4249 	movw	r2, #1097	; 0x449
 80167fa:	4293      	cmp	r3, r2
 80167fc:	f000 8142 	beq.w	8016a84 <ai_platform_network_process+0x2c8>
 8016800:	4aaa      	ldr	r2, [pc, #680]	; (8016aac <ai_platform_network_process+0x2f0>)
 8016802:	6813      	ldr	r3, [r2, #0]
 8016804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016808:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801680c:	f000 8167 	beq.w	8016ade <ai_platform_network_process+0x322>
 8016810:	6813      	ldr	r3, [r2, #0]
 8016812:	f240 4183 	movw	r1, #1155	; 0x483
 8016816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801681a:	428b      	cmp	r3, r1
 801681c:	f000 8191 	beq.w	8016b42 <ai_platform_network_process+0x386>
 8016820:	6813      	ldr	r3, [r2, #0]
 8016822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016826:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801682a:	f000 816a 	beq.w	8016b02 <ai_platform_network_process+0x346>
 801682e:	f7fe feeb 	bl	8015608 <_ai_platform_release_crc>
 8016832:	2d00      	cmp	r5, #0
 8016834:	f000 8197 	beq.w	8016b66 <ai_platform_network_process+0x3aa>
 8016838:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801683a:	2b00      	cmp	r3, #0
 801683c:	f000 813e 	beq.w	8016abc <ai_platform_network_process+0x300>
 8016840:	68eb      	ldr	r3, [r5, #12]
 8016842:	2200      	movs	r2, #0
 8016844:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8016848:	f003 0303 	and.w	r3, r3, #3
 801684c:	616a      	str	r2, [r5, #20]
 801684e:	2b03      	cmp	r3, #3
 8016850:	f040 813a 	bne.w	8016ac8 <ai_platform_network_process+0x30c>
 8016854:	2e00      	cmp	r6, #0
 8016856:	f000 8169 	beq.w	8016b2c <ai_platform_network_process+0x370>
 801685a:	fab8 f788 	clz	r7, r8
 801685e:	097f      	lsrs	r7, r7, #5
 8016860:	f1b8 0f00 	cmp.w	r8, #0
 8016864:	f000 8162 	beq.w	8016b2c <ai_platform_network_process+0x370>
 8016868:	f8b8 3000 	ldrh.w	r3, [r8]
 801686c:	2b00      	cmp	r3, #0
 801686e:	f000 815d 	beq.w	8016b2c <ai_platform_network_process+0x370>
 8016872:	69b3      	ldr	r3, [r6, #24]
 8016874:	9503      	str	r5, [sp, #12]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	9301      	str	r3, [sp, #4]
 801687a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d072      	beq.n	8016968 <ai_platform_network_process+0x1ac>
 8016882:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8016886:	2c00      	cmp	r4, #0
 8016888:	d06e      	beq.n	8016968 <ai_platform_network_process+0x1ac>
 801688a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801688e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8016892:	f8d3 a000 	ldr.w	sl, [r3]
 8016896:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 801689a:	f000 8146 	beq.w	8016b2a <ai_platform_network_process+0x36e>
 801689e:	69a3      	ldr	r3, [r4, #24]
 80168a0:	2101      	movs	r1, #1
 80168a2:	4630      	mov	r0, r6
 80168a4:	685d      	ldr	r5, [r3, #4]
 80168a6:	f7fe fe5f 	bl	8015568 <ai_buffer_get_size>
 80168aa:	4285      	cmp	r5, r0
 80168ac:	f0c0 815d 	bcc.w	8016b6a <ai_platform_network_process+0x3ae>
 80168b0:	68e0      	ldr	r0, [r4, #12]
 80168b2:	69b1      	ldr	r1, [r6, #24]
 80168b4:	68c2      	ldr	r2, [r0, #12]
 80168b6:	68cb      	ldr	r3, [r1, #12]
 80168b8:	429a      	cmp	r2, r3
 80168ba:	f040 8156 	bne.w	8016b6a <ai_platform_network_process+0x3ae>
 80168be:	6882      	ldr	r2, [r0, #8]
 80168c0:	688b      	ldr	r3, [r1, #8]
 80168c2:	429a      	cmp	r2, r3
 80168c4:	f040 8151 	bne.w	8016b6a <ai_platform_network_process+0x3ae>
 80168c8:	6842      	ldr	r2, [r0, #4]
 80168ca:	684b      	ldr	r3, [r1, #4]
 80168cc:	429a      	cmp	r2, r3
 80168ce:	f040 814c 	bne.w	8016b6a <ai_platform_network_process+0x3ae>
 80168d2:	69a3      	ldr	r3, [r4, #24]
 80168d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80168d8:	f002 fc70 	bl	80191bc <ai_array_get_data_byte_size>
 80168dc:	4605      	mov	r5, r0
 80168de:	4620      	mov	r0, r4
 80168e0:	f002 fbc2 	bl	8019068 <get_tensor_byte_size>
 80168e4:	4285      	cmp	r5, r0
 80168e6:	f0c0 8140 	bcc.w	8016b6a <ai_platform_network_process+0x3ae>
 80168ea:	69a3      	ldr	r3, [r4, #24]
 80168ec:	6818      	ldr	r0, [r3, #0]
 80168ee:	f002 fbd1 	bl	8019094 <ai_array_to_buffer_fmt>
 80168f2:	6833      	ldr	r3, [r6, #0]
 80168f4:	4058      	eors	r0, r3
 80168f6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80168fa:	f040 81fa 	bne.w	8016cf2 <ai_platform_network_process+0x536>
 80168fe:	6873      	ldr	r3, [r6, #4]
 8016900:	2b00      	cmp	r3, #0
 8016902:	f000 81ed 	beq.w	8016ce0 <ai_platform_network_process+0x524>
 8016906:	69b3      	ldr	r3, [r6, #24]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	2b00      	cmp	r3, #0
 801690c:	f000 81df 	beq.w	8016cce <ai_platform_network_process+0x512>
 8016910:	9a01      	ldr	r2, [sp, #4]
 8016912:	4620      	mov	r0, r4
 8016914:	3701      	adds	r7, #1
 8016916:	361c      	adds	r6, #28
 8016918:	429a      	cmp	r2, r3
 801691a:	bf38      	it	cc
 801691c:	461a      	movcc	r2, r3
 801691e:	9201      	str	r2, [sp, #4]
 8016920:	f002 fba2 	bl	8019068 <get_tensor_byte_size>
 8016924:	f8c9 0008 	str.w	r0, [r9, #8]
 8016928:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	fb00 f303 	mul.w	r3, r0, r3
 8016932:	f8c9 300c 	str.w	r3, [r9, #12]
 8016936:	f856 1c18 	ldr.w	r1, [r6, #-24]
 801693a:	440b      	add	r3, r1
 801693c:	f8c9 1004 	str.w	r1, [r9, #4]
 8016940:	f84a 300b 	str.w	r3, [sl, fp]
 8016944:	69a0      	ldr	r0, [r4, #24]
 8016946:	6803      	ldr	r3, [r0, #0]
 8016948:	009a      	lsls	r2, r3, #2
 801694a:	f100 80e8 	bmi.w	8016b1e <ai_platform_network_process+0x362>
 801694e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8016952:	1a9b      	subs	r3, r3, r2
 8016954:	4419      	add	r1, r3
 8016956:	6081      	str	r1, [r0, #8]
 8016958:	69a3      	ldr	r3, [r4, #24]
 801695a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801695e:	60da      	str	r2, [r3, #12]
 8016960:	f8b8 3000 	ldrh.w	r3, [r8]
 8016964:	42bb      	cmp	r3, r7
 8016966:	d888      	bhi.n	801687a <ai_platform_network_process+0xbe>
 8016968:	9d03      	ldr	r5, [sp, #12]
 801696a:	9b02      	ldr	r3, [sp, #8]
 801696c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 801696e:	2b00      	cmp	r3, #0
 8016970:	f000 81c8 	beq.w	8016d04 <ai_platform_network_process+0x548>
 8016974:	2a01      	cmp	r2, #1
 8016976:	f240 81a2 	bls.w	8016cbe <ai_platform_network_process+0x502>
 801697a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 801697e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8016982:	2b00      	cmp	r3, #0
 8016984:	f000 819b 	beq.w	8016cbe <ai_platform_network_process+0x502>
 8016988:	2600      	movs	r6, #0
 801698a:	9f02      	ldr	r7, [sp, #8]
 801698c:	9502      	str	r5, [sp, #8]
 801698e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016992:	2b00      	cmp	r3, #0
 8016994:	f000 80f7 	beq.w	8016b86 <ai_platform_network_process+0x3ca>
 8016998:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 801699c:	2c00      	cmp	r4, #0
 801699e:	f000 80f2 	beq.w	8016b86 <ai_platform_network_process+0x3ca>
 80169a2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80169a6:	ea4f 1b06 	mov.w	fp, r6, lsl #4
 80169aa:	f8d3 8000 	ldr.w	r8, [r3]
 80169ae:	eb18 1a06 	adds.w	sl, r8, r6, lsl #4
 80169b2:	f000 81b4 	beq.w	8016d1e <ai_platform_network_process+0x562>
 80169b6:	69a3      	ldr	r3, [r4, #24]
 80169b8:	2101      	movs	r1, #1
 80169ba:	4638      	mov	r0, r7
 80169bc:	685d      	ldr	r5, [r3, #4]
 80169be:	f7fe fdd3 	bl	8015568 <ai_buffer_get_size>
 80169c2:	4285      	cmp	r5, r0
 80169c4:	f0c0 817a 	bcc.w	8016cbc <ai_platform_network_process+0x500>
 80169c8:	68e0      	ldr	r0, [r4, #12]
 80169ca:	69b9      	ldr	r1, [r7, #24]
 80169cc:	68c2      	ldr	r2, [r0, #12]
 80169ce:	68cb      	ldr	r3, [r1, #12]
 80169d0:	429a      	cmp	r2, r3
 80169d2:	f040 8173 	bne.w	8016cbc <ai_platform_network_process+0x500>
 80169d6:	6882      	ldr	r2, [r0, #8]
 80169d8:	688b      	ldr	r3, [r1, #8]
 80169da:	429a      	cmp	r2, r3
 80169dc:	f040 816e 	bne.w	8016cbc <ai_platform_network_process+0x500>
 80169e0:	6842      	ldr	r2, [r0, #4]
 80169e2:	684b      	ldr	r3, [r1, #4]
 80169e4:	429a      	cmp	r2, r3
 80169e6:	f040 8169 	bne.w	8016cbc <ai_platform_network_process+0x500>
 80169ea:	69a3      	ldr	r3, [r4, #24]
 80169ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80169f0:	f002 fbe4 	bl	80191bc <ai_array_get_data_byte_size>
 80169f4:	9003      	str	r0, [sp, #12]
 80169f6:	4620      	mov	r0, r4
 80169f8:	f002 fb36 	bl	8019068 <get_tensor_byte_size>
 80169fc:	9b03      	ldr	r3, [sp, #12]
 80169fe:	4283      	cmp	r3, r0
 8016a00:	f0c0 815c 	bcc.w	8016cbc <ai_platform_network_process+0x500>
 8016a04:	69a3      	ldr	r3, [r4, #24]
 8016a06:	6818      	ldr	r0, [r3, #0]
 8016a08:	f002 fb44 	bl	8019094 <ai_array_to_buffer_fmt>
 8016a0c:	683b      	ldr	r3, [r7, #0]
 8016a0e:	4058      	eors	r0, r3
 8016a10:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8016a14:	f040 817a 	bne.w	8016d0c <ai_platform_network_process+0x550>
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	f000 8193 	beq.w	8016d46 <ai_platform_network_process+0x58a>
 8016a20:	69bb      	ldr	r3, [r7, #24]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	f000 8185 	beq.w	8016d34 <ai_platform_network_process+0x578>
 8016a2a:	9a01      	ldr	r2, [sp, #4]
 8016a2c:	4620      	mov	r0, r4
 8016a2e:	3601      	adds	r6, #1
 8016a30:	371c      	adds	r7, #28
 8016a32:	429a      	cmp	r2, r3
 8016a34:	bf38      	it	cc
 8016a36:	461a      	movcc	r2, r3
 8016a38:	9201      	str	r2, [sp, #4]
 8016a3a:	f002 fb15 	bl	8019068 <get_tensor_byte_size>
 8016a3e:	f8ca 0008 	str.w	r0, [sl, #8]
 8016a42:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	fb00 f303 	mul.w	r3, r0, r3
 8016a4c:	f8ca 300c 	str.w	r3, [sl, #12]
 8016a50:	f857 1c18 	ldr.w	r1, [r7, #-24]
 8016a54:	440b      	add	r3, r1
 8016a56:	f8ca 1004 	str.w	r1, [sl, #4]
 8016a5a:	f848 300b 	str.w	r3, [r8, fp]
 8016a5e:	69a0      	ldr	r0, [r4, #24]
 8016a60:	6803      	ldr	r3, [r0, #0]
 8016a62:	009b      	lsls	r3, r3, #2
 8016a64:	f100 808a 	bmi.w	8016b7c <ai_platform_network_process+0x3c0>
 8016a68:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8016a6c:	1a9b      	subs	r3, r3, r2
 8016a6e:	4419      	add	r1, r3
 8016a70:	6081      	str	r1, [r0, #8]
 8016a72:	69a3      	ldr	r3, [r4, #24]
 8016a74:	f8da 2004 	ldr.w	r2, [sl, #4]
 8016a78:	60da      	str	r2, [r3, #12]
 8016a7a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8016a7e:	429e      	cmp	r6, r3
 8016a80:	d385      	bcc.n	801698e <ai_platform_network_process+0x1d2>
 8016a82:	e080      	b.n	8016b86 <ai_platform_network_process+0x3ca>
 8016a84:	4a0a      	ldr	r2, [pc, #40]	; (8016ab0 <ai_platform_network_process+0x2f4>)
 8016a86:	2301      	movs	r3, #1
 8016a88:	6093      	str	r3, [r2, #8]
 8016a8a:	6893      	ldr	r3, [r2, #8]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d1fc      	bne.n	8016a8a <ai_platform_network_process+0x2ce>
 8016a90:	4b08      	ldr	r3, [pc, #32]	; (8016ab4 <ai_platform_network_process+0x2f8>)
 8016a92:	6013      	str	r3, [r2, #0]
 8016a94:	4b08      	ldr	r3, [pc, #32]	; (8016ab8 <ai_platform_network_process+0x2fc>)
 8016a96:	6812      	ldr	r2, [r2, #0]
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	f43f aec8 	beq.w	801682e <ai_platform_network_process+0x72>
 8016a9e:	e7fe      	b.n	8016a9e <ai_platform_network_process+0x2e2>
 8016aa0:	a1c00100 	.word	0xa1c00100
 8016aa4:	e0002000 	.word	0xe0002000
 8016aa8:	e0042000 	.word	0xe0042000
 8016aac:	5c001000 	.word	0x5c001000
 8016ab0:	40023000 	.word	0x40023000
 8016ab4:	f407a5c2 	.word	0xf407a5c2
 8016ab8:	b5e8b5cd 	.word	0xb5e8b5cd
 8016abc:	68ea      	ldr	r2, [r5, #12]
 8016abe:	616b      	str	r3, [r5, #20]
 8016ac0:	f002 0203 	and.w	r2, r2, #3
 8016ac4:	2a03      	cmp	r2, #3
 8016ac6:	d031      	beq.n	8016b2c <ai_platform_network_process+0x370>
 8016ac8:	2230      	movs	r2, #48	; 0x30
 8016aca:	2111      	movs	r1, #17
 8016acc:	f105 0010 	add.w	r0, r5, #16
 8016ad0:	2400      	movs	r4, #0
 8016ad2:	f000 f951 	bl	8016d78 <core_set_error>
 8016ad6:	4620      	mov	r0, r4
 8016ad8:	b005      	add	sp, #20
 8016ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ade:	4a9e      	ldr	r2, [pc, #632]	; (8016d58 <ai_platform_network_process+0x59c>)
 8016ae0:	2301      	movs	r3, #1
 8016ae2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8016ae6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d1fb      	bne.n	8016ae6 <ai_platform_network_process+0x32a>
 8016aee:	4b9b      	ldr	r3, [pc, #620]	; (8016d5c <ai_platform_network_process+0x5a0>)
 8016af0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8016af4:	4b9a      	ldr	r3, [pc, #616]	; (8016d60 <ai_platform_network_process+0x5a4>)
 8016af6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8016afa:	429a      	cmp	r2, r3
 8016afc:	f43f ae97 	beq.w	801682e <ai_platform_network_process+0x72>
 8016b00:	e7fe      	b.n	8016b00 <ai_platform_network_process+0x344>
 8016b02:	4a98      	ldr	r2, [pc, #608]	; (8016d64 <ai_platform_network_process+0x5a8>)
 8016b04:	2301      	movs	r3, #1
 8016b06:	6093      	str	r3, [r2, #8]
 8016b08:	6893      	ldr	r3, [r2, #8]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d1fc      	bne.n	8016b08 <ai_platform_network_process+0x34c>
 8016b0e:	4b93      	ldr	r3, [pc, #588]	; (8016d5c <ai_platform_network_process+0x5a0>)
 8016b10:	6013      	str	r3, [r2, #0]
 8016b12:	4b93      	ldr	r3, [pc, #588]	; (8016d60 <ai_platform_network_process+0x5a4>)
 8016b14:	6812      	ldr	r2, [r2, #0]
 8016b16:	429a      	cmp	r2, r3
 8016b18:	f43f ae89 	beq.w	801682e <ai_platform_network_process+0x72>
 8016b1c:	e7fe      	b.n	8016b1c <ai_platform_network_process+0x360>
 8016b1e:	f8b8 3000 	ldrh.w	r3, [r8]
 8016b22:	429f      	cmp	r7, r3
 8016b24:	f4ff aea9 	bcc.w	801687a <ai_platform_network_process+0xbe>
 8016b28:	e71e      	b.n	8016968 <ai_platform_network_process+0x1ac>
 8016b2a:	9d03      	ldr	r5, [sp, #12]
 8016b2c:	2400      	movs	r4, #0
 8016b2e:	2217      	movs	r2, #23
 8016b30:	2112      	movs	r1, #18
 8016b32:	f105 0010 	add.w	r0, r5, #16
 8016b36:	f000 f91f 	bl	8016d78 <core_set_error>
 8016b3a:	4620      	mov	r0, r4
 8016b3c:	b005      	add	sp, #20
 8016b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b42:	4a85      	ldr	r2, [pc, #532]	; (8016d58 <ai_platform_network_process+0x59c>)
 8016b44:	2301      	movs	r3, #1
 8016b46:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8016b4a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d1fb      	bne.n	8016b4a <ai_platform_network_process+0x38e>
 8016b52:	4b82      	ldr	r3, [pc, #520]	; (8016d5c <ai_platform_network_process+0x5a0>)
 8016b54:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8016b58:	4b81      	ldr	r3, [pc, #516]	; (8016d60 <ai_platform_network_process+0x5a4>)
 8016b5a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	f43f ae65 	beq.w	801682e <ai_platform_network_process+0x72>
 8016b64:	e7fe      	b.n	8016b64 <ai_platform_network_process+0x3a8>
 8016b66:	462c      	mov	r4, r5
 8016b68:	e7b5      	b.n	8016ad6 <ai_platform_network_process+0x31a>
 8016b6a:	9d03      	ldr	r5, [sp, #12]
 8016b6c:	2218      	movs	r2, #24
 8016b6e:	2112      	movs	r1, #18
 8016b70:	2400      	movs	r4, #0
 8016b72:	f105 0010 	add.w	r0, r5, #16
 8016b76:	f000 f8ff 	bl	8016d78 <core_set_error>
 8016b7a:	e7ac      	b.n	8016ad6 <ai_platform_network_process+0x31a>
 8016b7c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8016b80:	429e      	cmp	r6, r3
 8016b82:	f4ff af04 	bcc.w	801698e <ai_platform_network_process+0x1d2>
 8016b86:	9d02      	ldr	r5, [sp, #8]
 8016b88:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016b8c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8016b8e:	82ab      	strh	r3, [r5, #20]
 8016b90:	2a00      	cmp	r2, #0
 8016b92:	f040 808d 	bne.w	8016cb0 <ai_platform_network_process+0x4f4>
 8016b96:	4616      	mov	r6, r2
 8016b98:	4617      	mov	r7, r2
 8016b9a:	8aec      	ldrh	r4, [r5, #22]
 8016b9c:	429c      	cmp	r4, r3
 8016b9e:	d29a      	bcs.n	8016ad6 <ai_platform_network_process+0x31a>
 8016ba0:	46ab      	mov	fp, r5
 8016ba2:	2e00      	cmp	r6, #0
 8016ba4:	d030      	beq.n	8016c08 <ai_platform_network_process+0x44c>
 8016ba6:	f04f 0800 	mov.w	r8, #0
 8016baa:	e014      	b.n	8016bd6 <ai_platform_network_process+0x41a>
 8016bac:	6882      	ldr	r2, [r0, #8]
 8016bae:	68c5      	ldr	r5, [r0, #12]
 8016bb0:	6863      	ldr	r3, [r4, #4]
 8016bb2:	1b52      	subs	r2, r2, r5
 8016bb4:	4413      	add	r3, r2
 8016bb6:	6083      	str	r3, [r0, #8]
 8016bb8:	698b      	ldr	r3, [r1, #24]
 8016bba:	6862      	ldr	r2, [r4, #4]
 8016bbc:	60da      	str	r2, [r3, #12]
 8016bbe:	f859 200a 	ldr.w	r2, [r9, sl]
 8016bc2:	f108 0801 	add.w	r8, r8, #1
 8016bc6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8016bca:	440b      	add	r3, r1
 8016bcc:	4293      	cmp	r3, r2
 8016bce:	d301      	bcc.n	8016bd4 <ai_platform_network_process+0x418>
 8016bd0:	68e3      	ldr	r3, [r4, #12]
 8016bd2:	1ad3      	subs	r3, r2, r3
 8016bd4:	6063      	str	r3, [r4, #4]
 8016bd6:	8833      	ldrh	r3, [r6, #0]
 8016bd8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8016bdc:	4543      	cmp	r3, r8
 8016bde:	d913      	bls.n	8016c08 <ai_platform_network_process+0x44c>
 8016be0:	6873      	ldr	r3, [r6, #4]
 8016be2:	b18b      	cbz	r3, 8016c08 <ai_platform_network_process+0x44c>
 8016be4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8016be8:	b171      	cbz	r1, 8016c08 <ai_platform_network_process+0x44c>
 8016bea:	6988      	ldr	r0, [r1, #24]
 8016bec:	68b2      	ldr	r2, [r6, #8]
 8016bee:	6803      	ldr	r3, [r0, #0]
 8016bf0:	f8d2 9000 	ldr.w	r9, [r2]
 8016bf4:	009d      	lsls	r5, r3, #2
 8016bf6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8016bfa:	d5d7      	bpl.n	8016bac <ai_platform_network_process+0x3f0>
 8016bfc:	6880      	ldr	r0, [r0, #8]
 8016bfe:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8016c02:	f002 fd4b 	bl	801969c <memcpy>
 8016c06:	e7da      	b.n	8016bbe <ai_platform_network_process+0x402>
 8016c08:	4658      	mov	r0, fp
 8016c0a:	f002 f9db 	bl	8018fc4 <ai_layers_forward_all>
 8016c0e:	2f00      	cmp	r7, #0
 8016c10:	d03f      	beq.n	8016c92 <ai_platform_network_process+0x4d6>
 8016c12:	2400      	movs	r4, #0
 8016c14:	e016      	b.n	8016c44 <ai_platform_network_process+0x488>
 8016c16:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8016c1a:	f859 100a 	ldr.w	r1, [r9, sl]
 8016c1e:	4413      	add	r3, r2
 8016c20:	428b      	cmp	r3, r1
 8016c22:	d302      	bcc.n	8016c2a <ai_platform_network_process+0x46e>
 8016c24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016c28:	1acb      	subs	r3, r1, r3
 8016c2a:	f8c8 3004 	str.w	r3, [r8, #4]
 8016c2e:	6981      	ldr	r1, [r0, #24]
 8016c30:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8016c34:	1b52      	subs	r2, r2, r5
 8016c36:	4413      	add	r3, r2
 8016c38:	608b      	str	r3, [r1, #8]
 8016c3a:	6983      	ldr	r3, [r0, #24]
 8016c3c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8016c40:	60da      	str	r2, [r3, #12]
 8016c42:	3401      	adds	r4, #1
 8016c44:	883b      	ldrh	r3, [r7, #0]
 8016c46:	42a3      	cmp	r3, r4
 8016c48:	d923      	bls.n	8016c92 <ai_platform_network_process+0x4d6>
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	b30b      	cbz	r3, 8016c92 <ai_platform_network_process+0x4d6>
 8016c4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016c52:	b1f0      	cbz	r0, 8016c92 <ai_platform_network_process+0x4d6>
 8016c54:	68ba      	ldr	r2, [r7, #8]
 8016c56:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8016c5a:	6983      	ldr	r3, [r0, #24]
 8016c5c:	f8d2 9000 	ldr.w	r9, [r2]
 8016c60:	681a      	ldr	r2, [r3, #0]
 8016c62:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8016c66:	0092      	lsls	r2, r2, #2
 8016c68:	d5d5      	bpl.n	8016c16 <ai_platform_network_process+0x45a>
 8016c6a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8016c6e:	6899      	ldr	r1, [r3, #8]
 8016c70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016c74:	f002 fd12 	bl	801969c <memcpy>
 8016c78:	f859 200a 	ldr.w	r2, [r9, sl]
 8016c7c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8016c80:	440b      	add	r3, r1
 8016c82:	4293      	cmp	r3, r2
 8016c84:	d302      	bcc.n	8016c8c <ai_platform_network_process+0x4d0>
 8016c86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016c8a:	1ad3      	subs	r3, r2, r3
 8016c8c:	f8c8 3004 	str.w	r3, [r8, #4]
 8016c90:	e7d7      	b.n	8016c42 <ai_platform_network_process+0x486>
 8016c92:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8016c96:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8016c9a:	3401      	adds	r4, #1
 8016c9c:	b2a4      	uxth	r4, r4
 8016c9e:	42a3      	cmp	r3, r4
 8016ca0:	f8ab 4016 	strh.w	r4, [fp, #22]
 8016ca4:	f63f af7d 	bhi.w	8016ba2 <ai_platform_network_process+0x3e6>
 8016ca8:	4620      	mov	r0, r4
 8016caa:	b005      	add	sp, #20
 8016cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cb0:	2a01      	cmp	r2, #1
 8016cb2:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8016cb4:	d03c      	beq.n	8016d30 <ai_platform_network_process+0x574>
 8016cb6:	f106 070c 	add.w	r7, r6, #12
 8016cba:	e76e      	b.n	8016b9a <ai_platform_network_process+0x3de>
 8016cbc:	9d02      	ldr	r5, [sp, #8]
 8016cbe:	2218      	movs	r2, #24
 8016cc0:	2113      	movs	r1, #19
 8016cc2:	f105 0010 	add.w	r0, r5, #16
 8016cc6:	2400      	movs	r4, #0
 8016cc8:	f000 f856 	bl	8016d78 <core_set_error>
 8016ccc:	e703      	b.n	8016ad6 <ai_platform_network_process+0x31a>
 8016cce:	9d03      	ldr	r5, [sp, #12]
 8016cd0:	4604      	mov	r4, r0
 8016cd2:	2221      	movs	r2, #33	; 0x21
 8016cd4:	2112      	movs	r1, #18
 8016cd6:	f105 0010 	add.w	r0, r5, #16
 8016cda:	f000 f84d 	bl	8016d78 <core_set_error>
 8016cde:	e6fa      	b.n	8016ad6 <ai_platform_network_process+0x31a>
 8016ce0:	9d03      	ldr	r5, [sp, #12]
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	2217      	movs	r2, #23
 8016ce6:	2112      	movs	r1, #18
 8016ce8:	f105 0010 	add.w	r0, r5, #16
 8016cec:	f000 f844 	bl	8016d78 <core_set_error>
 8016cf0:	e6f1      	b.n	8016ad6 <ai_platform_network_process+0x31a>
 8016cf2:	9d03      	ldr	r5, [sp, #12]
 8016cf4:	2219      	movs	r2, #25
 8016cf6:	2112      	movs	r1, #18
 8016cf8:	2400      	movs	r4, #0
 8016cfa:	f105 0010 	add.w	r0, r5, #16
 8016cfe:	f000 f83b 	bl	8016d78 <core_set_error>
 8016d02:	e6e8      	b.n	8016ad6 <ai_platform_network_process+0x31a>
 8016d04:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016d08:	82ab      	strh	r3, [r5, #20]
 8016d0a:	e741      	b.n	8016b90 <ai_platform_network_process+0x3d4>
 8016d0c:	9d02      	ldr	r5, [sp, #8]
 8016d0e:	2219      	movs	r2, #25
 8016d10:	2113      	movs	r1, #19
 8016d12:	2400      	movs	r4, #0
 8016d14:	f105 0010 	add.w	r0, r5, #16
 8016d18:	f000 f82e 	bl	8016d78 <core_set_error>
 8016d1c:	e6db      	b.n	8016ad6 <ai_platform_network_process+0x31a>
 8016d1e:	9d02      	ldr	r5, [sp, #8]
 8016d20:	2217      	movs	r2, #23
 8016d22:	2113      	movs	r1, #19
 8016d24:	4654      	mov	r4, sl
 8016d26:	f105 0010 	add.w	r0, r5, #16
 8016d2a:	f000 f825 	bl	8016d78 <core_set_error>
 8016d2e:	e6d2      	b.n	8016ad6 <ai_platform_network_process+0x31a>
 8016d30:	2700      	movs	r7, #0
 8016d32:	e732      	b.n	8016b9a <ai_platform_network_process+0x3de>
 8016d34:	9d02      	ldr	r5, [sp, #8]
 8016d36:	4604      	mov	r4, r0
 8016d38:	2221      	movs	r2, #33	; 0x21
 8016d3a:	2113      	movs	r1, #19
 8016d3c:	f105 0010 	add.w	r0, r5, #16
 8016d40:	f000 f81a 	bl	8016d78 <core_set_error>
 8016d44:	e6c7      	b.n	8016ad6 <ai_platform_network_process+0x31a>
 8016d46:	9d02      	ldr	r5, [sp, #8]
 8016d48:	4604      	mov	r4, r0
 8016d4a:	2217      	movs	r2, #23
 8016d4c:	2113      	movs	r1, #19
 8016d4e:	f105 0010 	add.w	r0, r5, #16
 8016d52:	f000 f811 	bl	8016d78 <core_set_error>
 8016d56:	e6be      	b.n	8016ad6 <ai_platform_network_process+0x31a>
 8016d58:	58024000 	.word	0x58024000
 8016d5c:	f407a5c2 	.word	0xf407a5c2
 8016d60:	b5e8b5cd 	.word	0xb5e8b5cd
 8016d64:	40023000 	.word	0x40023000

08016d68 <core_init>:
 8016d68:	2001      	movs	r0, #1
 8016d6a:	4770      	bx	lr

08016d6c <core_get_error>:
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	2200      	movs	r2, #0
 8016d70:	6800      	ldr	r0, [r0, #0]
 8016d72:	601a      	str	r2, [r3, #0]
 8016d74:	4770      	bx	lr
 8016d76:	bf00      	nop

08016d78 <core_set_error>:
 8016d78:	4603      	mov	r3, r0
 8016d7a:	7800      	ldrb	r0, [r0, #0]
 8016d7c:	b108      	cbz	r0, 8016d82 <core_set_error+0xa>
 8016d7e:	2000      	movs	r0, #0
 8016d80:	4770      	bx	lr
 8016d82:	7019      	strb	r1, [r3, #0]
 8016d84:	2001      	movs	r0, #1
 8016d86:	6819      	ldr	r1, [r3, #0]
 8016d88:	f362 211f 	bfi	r1, r2, #8, #24
 8016d8c:	6019      	str	r1, [r3, #0]
 8016d8e:	4770      	bx	lr

08016d90 <func_dummy>:
 8016d90:	4770      	bx	lr
 8016d92:	bf00      	nop

08016d94 <ai_conv2d_stripe_f32.constprop.0>:
 8016d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d98:	ed2d 8b0e 	vpush	{d8-d14}
 8016d9c:	b09d      	sub	sp, #116	; 0x74
 8016d9e:	af00      	add	r7, sp, #0
 8016da0:	f8d7 90ec 	ldr.w	r9, [r7, #236]	; 0xec
 8016da4:	66f8      	str	r0, [r7, #108]	; 0x6c
 8016da6:	f1b9 0f01 	cmp.w	r9, #1
 8016daa:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 8016dae:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 8016db2:	f8d7 c0fc 	ldr.w	ip, [r7, #252]	; 0xfc
 8016db6:	f9b7 e104 	ldrsh.w	lr, [r7, #260]	; 0x104
 8016dba:	6579      	str	r1, [r7, #84]	; 0x54
 8016dbc:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 8016dc0:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8016dc4:	f9b7 2108 	ldrsh.w	r2, [r7, #264]	; 0x108
 8016dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8016dca:	e9d7 303c 	ldrd	r3, r0, [r7, #240]	; 0xf0
 8016dce:	f000 812f 	beq.w	8017030 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 8016dd2:	45b1      	cmp	r9, r6
 8016dd4:	f000 8278 	beq.w	80172c8 <ai_conv2d_stripe_f32.constprop.0+0x534>
 8016dd8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8016ddc:	2900      	cmp	r1, #0
 8016dde:	f000 8114 	beq.w	801700a <ai_conv2d_stripe_f32.constprop.0+0x276>
 8016de2:	eba0 0803 	sub.w	r8, r0, r3
 8016de6:	1898      	adds	r0, r3, r2
 8016de8:	eddf 6a90 	vldr	s13, [pc, #576]	; 801702c <ai_conv2d_stripe_f32.constprop.0+0x298>
 8016dec:	3801      	subs	r0, #1
 8016dee:	fb93 f1f2 	sdiv	r1, r3, r2
 8016df2:	fb90 f0f2 	sdiv	r0, r0, r2
 8016df6:	fb02 3111 	mls	r1, r2, r1, r3
 8016dfa:	eba2 0a01 	sub.w	sl, r2, r1
 8016dfe:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8016e02:	fb01 f100 	mul.w	r1, r1, r0
 8016e06:	fb9a f0f2 	sdiv	r0, sl, r2
 8016e0a:	fb02 a010 	mls	r0, r2, r0, sl
 8016e0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8016e10:	4403      	add	r3, r0
 8016e12:	eba8 0100 	sub.w	r1, r8, r0
 8016e16:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8016e1a:	4463      	add	r3, ip
 8016e1c:	4411      	add	r1, r2
 8016e1e:	fb00 f303 	mul.w	r3, r0, r3
 8016e22:	3901      	subs	r1, #1
 8016e24:	fbb6 f4f9 	udiv	r4, r6, r9
 8016e28:	623b      	str	r3, [r7, #32]
 8016e2a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8016e2e:	fb00 f302 	mul.w	r3, r0, r2
 8016e32:	f8c7 a014 	str.w	sl, [r7, #20]
 8016e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e38:	fb0e f306 	mul.w	r3, lr, r6
 8016e3c:	1b1b      	subs	r3, r3, r4
 8016e3e:	fb91 fbf2 	sdiv	fp, r1, r2
 8016e42:	009b      	lsls	r3, r3, #2
 8016e44:	eba5 020b 	sub.w	r2, r5, fp
 8016e48:	00b1      	lsls	r1, r6, #2
 8016e4a:	46dc      	mov	ip, fp
 8016e4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8016e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016e52:	61f9      	str	r1, [r7, #28]
 8016e54:	fb04 f303 	mul.w	r3, r4, r3
 8016e58:	fb02 f303 	mul.w	r3, r2, r3
 8016e5c:	009b      	lsls	r3, r3, #2
 8016e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8016e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016e64:	fbb3 f3f9 	udiv	r3, r3, r9
 8016e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016e6e:	009b      	lsls	r3, r3, #2
 8016e70:	633b      	str	r3, [r7, #48]	; 0x30
 8016e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8016e76:	f1c3 0800 	rsb	r8, r3, #0
 8016e7a:	ebae 0303 	sub.w	r3, lr, r3
 8016e7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8016e80:	2300      	movs	r3, #0
 8016e82:	653b      	str	r3, [r7, #80]	; 0x50
 8016e84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	f2c0 80c4 	blt.w	8017016 <ai_conv2d_stripe_f32.constprop.0+0x282>
 8016e8e:	2000      	movs	r0, #0
 8016e90:	4673      	mov	r3, lr
 8016e92:	4672      	mov	r2, lr
 8016e94:	4601      	mov	r1, r0
 8016e96:	3b01      	subs	r3, #1
 8016e98:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8016e9a:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 8016e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016ea2:	fb93 f3fe 	sdiv	r3, r3, lr
 8016ea6:	4423      	add	r3, r4
 8016ea8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8016eaa:	fb0a 4303 	mla	r3, sl, r3, r4
 8016eae:	fb92 f4fe 	sdiv	r4, r2, lr
 8016eb2:	fb0e 2214 	mls	r2, lr, r4, r2
 8016eb6:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 8016eba:	4444      	add	r4, r8
 8016ebc:	42ac      	cmp	r4, r5
 8016ebe:	bf94      	ite	ls
 8016ec0:	ebc1 0104 	rsbls	r1, r1, r4
 8016ec4:	ebc1 0105 	rsbhi	r1, r1, r5
 8016ec8:	6a3c      	ldr	r4, [r7, #32]
 8016eca:	1a89      	subs	r1, r1, r2
 8016ecc:	4471      	add	r1, lr
 8016ece:	3901      	subs	r1, #1
 8016ed0:	fb91 f6fe 	sdiv	r6, r1, lr
 8016ed4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8016ed8:	4421      	add	r1, r4
 8016eda:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8016edc:	4401      	add	r1, r0
 8016ede:	69f8      	ldr	r0, [r7, #28]
 8016ee0:	4411      	add	r1, r2
 8016ee2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016ee4:	fb00 2201 	mla	r2, r0, r1, r2
 8016ee8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016eea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016eec:	460a      	mov	r2, r1
 8016eee:	2900      	cmp	r1, #0
 8016ef0:	bf08      	it	eq
 8016ef2:	4622      	moveq	r2, r4
 8016ef4:	42a2      	cmp	r2, r4
 8016ef6:	637a      	str	r2, [r7, #52]	; 0x34
 8016ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016efa:	fe06 7a87 	vseleq.f32	s14, s13, s14
 8016efe:	fb0e 2116 	mls	r1, lr, r6, r2
 8016f02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8016f06:	1b92      	subs	r2, r2, r6
 8016f08:	f1b9 0f00 	cmp.w	r9, #0
 8016f0c:	d066      	beq.n	8016fdc <ai_conv2d_stripe_f32.constprop.0+0x248>
 8016f0e:	fb0a f202 	mul.w	r2, sl, r2
 8016f12:	fb00 f101 	mul.w	r1, r0, r1
 8016f16:	643a      	str	r2, [r7, #64]	; 0x40
 8016f18:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8016f1c:	6479      	str	r1, [r7, #68]	; 0x44
 8016f1e:	4591      	cmp	r9, r2
 8016f20:	d85c      	bhi.n	8016fdc <ai_conv2d_stripe_f32.constprop.0+0x248>
 8016f22:	2500      	movs	r5, #0
 8016f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016f26:	46ab      	mov	fp, r5
 8016f28:	3a01      	subs	r2, #1
 8016f2a:	e9c7 e803 	strd	lr, r8, [r7, #12]
 8016f2e:	61ba      	str	r2, [r7, #24]
 8016f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016f32:	f04f 0800 	mov.w	r8, #0
 8016f36:	f8c7 b008 	str.w	fp, [r7, #8]
 8016f3a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8016f3e:	63ba      	str	r2, [r7, #56]	; 0x38
 8016f40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016f42:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8016f46:	63fa      	str	r2, [r7, #60]	; 0x3c
 8016f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016f4a:	f1bc 0f00 	cmp.w	ip, #0
 8016f4e:	ecf2 7a01 	vldmia	r2!, {s15}
 8016f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016f56:	63ba      	str	r2, [r7, #56]	; 0x38
 8016f58:	dd21      	ble.n	8016f9e <ai_conv2d_stripe_f32.constprop.0+0x20a>
 8016f5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016f5c:	2100      	movs	r1, #0
 8016f5e:	2e00      	cmp	r6, #0
 8016f60:	dd16      	ble.n	8016f90 <ai_conv2d_stripe_f32.constprop.0+0x1fc>
 8016f62:	2000      	movs	r0, #0
 8016f64:	eb02 040a 	add.w	r4, r2, sl
 8016f68:	4294      	cmp	r4, r2
 8016f6a:	d90c      	bls.n	8016f86 <ai_conv2d_stripe_f32.constprop.0+0x1f2>
 8016f6c:	4696      	mov	lr, r2
 8016f6e:	469b      	mov	fp, r3
 8016f70:	ecbe 6a01 	vldmia	lr!, {s12}
 8016f74:	ecfb 5a01 	vldmia	fp!, {s11}
 8016f78:	4574      	cmp	r4, lr
 8016f7a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8016f7e:	d8f7      	bhi.n	8016f70 <ai_conv2d_stripe_f32.constprop.0+0x1dc>
 8016f80:	697c      	ldr	r4, [r7, #20]
 8016f82:	4423      	add	r3, r4
 8016f84:	4422      	add	r2, r4
 8016f86:	3001      	adds	r0, #1
 8016f88:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8016f8a:	4286      	cmp	r6, r0
 8016f8c:	4422      	add	r2, r4
 8016f8e:	d1e9      	bne.n	8016f64 <ai_conv2d_stripe_f32.constprop.0+0x1d0>
 8016f90:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016f92:	3101      	adds	r1, #1
 8016f94:	4402      	add	r2, r0
 8016f96:	458c      	cmp	ip, r1
 8016f98:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016f9a:	4403      	add	r3, r0
 8016f9c:	d1df      	bne.n	8016f5e <ai_conv2d_stripe_f32.constprop.0+0x1ca>
 8016f9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016fa0:	f108 0801 	add.w	r8, r8, #1
 8016fa4:	ece2 7a01 	vstmia	r2!, {s15}
 8016fa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8016faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fac:	4413      	add	r3, r2
 8016fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016fb0:	4542      	cmp	r2, r8
 8016fb2:	d8c9      	bhi.n	8016f48 <ai_conv2d_stripe_f32.constprop.0+0x1b4>
 8016fb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016fb6:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8016fba:	4452      	add	r2, sl
 8016fbc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8016fc0:	f10b 0b01 	add.w	fp, fp, #1
 8016fc4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016fc6:	69ba      	ldr	r2, [r7, #24]
 8016fc8:	4589      	cmp	r9, r1
 8016fca:	bf88      	it	hi
 8016fcc:	2200      	movhi	r2, #0
 8016fce:	45d9      	cmp	r9, fp
 8016fd0:	f102 0201 	add.w	r2, r2, #1
 8016fd4:	4415      	add	r5, r2
 8016fd6:	d1ab      	bne.n	8016f30 <ai_conv2d_stripe_f32.constprop.0+0x19c>
 8016fd8:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 8016fdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016fde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fe2:	440a      	add	r2, r1
 8016fe4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8016fe8:	3301      	adds	r3, #1
 8016fea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016fec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016fee:	653b      	str	r3, [r7, #80]	; 0x50
 8016ff0:	4411      	add	r1, r2
 8016ff2:	eba8 0802 	sub.w	r8, r8, r2
 8016ff6:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8016ffa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016ffc:	1a8a      	subs	r2, r1, r2
 8016ffe:	65ba      	str	r2, [r7, #88]	; 0x58
 8017000:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8017004:	429a      	cmp	r2, r3
 8017006:	f47f af3d 	bne.w	8016e84 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 801700a:	3774      	adds	r7, #116	; 0x74
 801700c:	46bd      	mov	sp, r7
 801700e:	ecbd 8b0e 	vpop	{d8-d14}
 8017012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017016:	fb98 f2fe 	sdiv	r2, r8, lr
 801701a:	fb0e 8212 	mls	r2, lr, r2, r8
 801701e:	4641      	mov	r1, r8
 8017020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017022:	4640      	mov	r0, r8
 8017024:	ebae 0202 	sub.w	r2, lr, r2
 8017028:	e735      	b.n	8016e96 <ai_conv2d_stripe_f32.constprop.0+0x102>
 801702a:	bf00      	nop
 801702c:	00000000 	.word	0x00000000
 8017030:	fb0e f102 	mul.w	r1, lr, r2
 8017034:	2901      	cmp	r1, #1
 8017036:	f47f aecf 	bne.w	8016dd8 <ai_conv2d_stripe_f32.constprop.0+0x44>
 801703a:	1ac2      	subs	r2, r0, r3
 801703c:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 8017040:	00b0      	lsls	r0, r6, #2
 8017042:	eb0c 0103 	add.w	r1, ip, r3
 8017046:	65fa      	str	r2, [r7, #92]	; 0x5c
 8017048:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801704a:	63b8      	str	r0, [r7, #56]	; 0x38
 801704c:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 8017050:	fb00 f004 	mul.w	r0, r0, r4
 8017054:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8017056:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 801705a:	fb00 4101 	mla	r1, r0, r1, r4
 801705e:	65b9      	str	r1, [r7, #88]	; 0x58
 8017060:	f080 8263 	bcs.w	801752a <ai_conv2d_stripe_f32.constprop.0+0x796>
 8017064:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8017068:	2a00      	cmp	r2, #0
 801706a:	d0ce      	beq.n	801700a <ai_conv2d_stripe_f32.constprop.0+0x276>
 801706c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8017070:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8017074:	fb05 f202 	mul.w	r2, r5, r2
 8017078:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 801702c <ai_conv2d_stripe_f32.constprop.0+0x298>
 801707c:	fb00 f303 	mul.w	r3, r0, r3
 8017080:	64bb      	str	r3, [r7, #72]	; 0x48
 8017082:	fb06 f302 	mul.w	r3, r6, r2
 8017086:	009b      	lsls	r3, r3, #2
 8017088:	643b      	str	r3, [r7, #64]	; 0x40
 801708a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801708c:	fb03 f306 	mul.w	r3, r3, r6
 8017090:	009b      	lsls	r3, r3, #2
 8017092:	627b      	str	r3, [r7, #36]	; 0x24
 8017094:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017098:	fb03 f306 	mul.w	r3, r3, r6
 801709c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80170a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80170a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80170a6:	009b      	lsls	r3, r3, #2
 80170a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80170aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80170ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80170ae:	2300      	movs	r3, #0
 80170b0:	653b      	str	r3, [r7, #80]	; 0x50
 80170b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	f000 8104 	beq.w	80172c2 <ai_conv2d_stripe_f32.constprop.0+0x52e>
 80170ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170bc:	ecf3 6a01 	vldmia	r3!, {s13}
 80170c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80170c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	f000 80e8 	beq.w	801729c <ai_conv2d_stripe_f32.constprop.0+0x508>
 80170cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80170d0:	f04f 0b00 	mov.w	fp, #0
 80170d4:	f8d7 90f8 	ldr.w	r9, [r7, #248]	; 0xf8
 80170d8:	425d      	negs	r5, r3
 80170da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170dc:	657b      	str	r3, [r7, #84]	; 0x54
 80170de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80170e0:	647b      	str	r3, [r7, #68]	; 0x44
 80170e2:	f1b9 0f00 	cmp.w	r9, #0
 80170e6:	f2c0 8219 	blt.w	801751c <ai_conv2d_stripe_f32.constprop.0+0x788>
 80170ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80170ec:	2300      	movs	r3, #0
 80170ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80170f0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80170f2:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80170f4:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 80170f8:	fb02 0c06 	mla	ip, r2, r6, r0
 80170fc:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8017100:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8017104:	4428      	add	r0, r5
 8017106:	42a0      	cmp	r0, r4
 8017108:	bf94      	ite	ls
 801710a:	ebc3 0300 	rsbls	r3, r3, r0
 801710e:	ebc3 0304 	rsbhi	r3, r3, r4
 8017112:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8017116:	1ac4      	subs	r4, r0, r3
 8017118:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 801711c:	1ac0      	subs	r0, r0, r3
 801711e:	fb02 f303 	mul.w	r3, r2, r3
 8017122:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017124:	2a00      	cmp	r2, #0
 8017126:	f340 81f6 	ble.w	8017516 <ai_conv2d_stripe_f32.constprop.0+0x782>
 801712a:	fb06 f204 	mul.w	r2, r6, r4
 801712e:	f023 040f 	bic.w	r4, r3, #15
 8017132:	eeb0 7a66 	vmov.f32	s14, s13
 8017136:	637a      	str	r2, [r7, #52]	; 0x34
 8017138:	fb06 f200 	mul.w	r2, r6, r0
 801713c:	1e60      	subs	r0, r4, #1
 801713e:	2600      	movs	r6, #0
 8017140:	0900      	lsrs	r0, r0, #4
 8017142:	633a      	str	r2, [r7, #48]	; 0x30
 8017144:	3001      	adds	r0, #1
 8017146:	0102      	lsls	r2, r0, #4
 8017148:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 801714c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801714e:	4662      	mov	r2, ip
 8017150:	2c00      	cmp	r4, #0
 8017152:	f340 81e8 	ble.w	8017526 <ai_conv2d_stripe_f32.constprop.0+0x792>
 8017156:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 801715a:	f102 0040 	add.w	r0, r2, #64	; 0x40
 801715e:	f04f 0800 	mov.w	r8, #0
 8017162:	ed50 5a0f 	vldr	s11, [r0, #-60]	; 0xffffffc4
 8017166:	f108 0810 	add.w	r8, r8, #16
 801716a:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 801716e:	3040      	adds	r0, #64	; 0x40
 8017170:	ed5c 3a10 	vldr	s7, [ip, #-64]	; 0xffffffc0
 8017174:	45a0      	cmp	r8, r4
 8017176:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801717a:	ed10 4a20 	vldr	s8, [r0, #-128]	; 0xffffff80
 801717e:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 8017182:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8017186:	ed10 5a1e 	vldr	s10, [r0, #-120]	; 0xffffff88
 801718a:	eee3 7a84 	vfma.f32	s15, s7, s8
 801718e:	ed50 5a1d 	vldr	s11, [r0, #-116]	; 0xffffff8c
 8017192:	ed1c ea1d 	vldr	s28, [ip, #-116]	; 0xffffff8c
 8017196:	ed5c da1c 	vldr	s27, [ip, #-112]	; 0xffffff90
 801719a:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 801719e:	ed5c ca1b 	vldr	s25, [ip, #-108]	; 0xffffff94
 80171a2:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 80171a6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80171aa:	ed5c ba1a 	vldr	s23, [ip, #-104]	; 0xffffff98
 80171ae:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 80171b2:	ed5c aa19 	vldr	s21, [ip, #-100]	; 0xffffff9c
 80171b6:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 80171ba:	ed5c 9a18 	vldr	s19, [ip, #-96]	; 0xffffffa0
 80171be:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 80171c2:	eeee 7a25 	vfma.f32	s15, s28, s11
 80171c6:	ed5c 8a17 	vldr	s17, [ip, #-92]	; 0xffffffa4
 80171ca:	ed10 8a17 	vldr	s16, [r0, #-92]	; 0xffffffa4
 80171ce:	ed1c 0a16 	vldr	s0, [ip, #-88]	; 0xffffffa8
 80171d2:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 80171d6:	ed1c 1a15 	vldr	s2, [ip, #-84]	; 0xffffffac
 80171da:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 80171de:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80171e2:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 80171e6:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 80171ea:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 80171ee:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 80171f2:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 80171f6:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 80171fa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80171fe:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 8017202:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 8017206:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801720a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801720e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8017212:	eee8 7a88 	vfma.f32	s15, s17, s16
 8017216:	eee0 7a20 	vfma.f32	s15, s0, s1
 801721a:	eee1 7a21 	vfma.f32	s15, s2, s3
 801721e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8017222:	eee3 7a23 	vfma.f32	s15, s6, s7
 8017226:	eee4 7a24 	vfma.f32	s15, s8, s9
 801722a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801722e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017232:	db96      	blt.n	8017162 <ai_conv2d_stripe_f32.constprop.0+0x3ce>
 8017234:	4471      	add	r1, lr
 8017236:	4472      	add	r2, lr
 8017238:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801723a:	4283      	cmp	r3, r0
 801723c:	dd11      	ble.n	8017262 <ai_conv2d_stripe_f32.constprop.0+0x4ce>
 801723e:	4684      	mov	ip, r0
 8017240:	468a      	mov	sl, r1
 8017242:	4690      	mov	r8, r2
 8017244:	f10c 0c01 	add.w	ip, ip, #1
 8017248:	ecf8 5a01 	vldmia	r8!, {s11}
 801724c:	ecfa 7a01 	vldmia	sl!, {s15}
 8017250:	4563      	cmp	r3, ip
 8017252:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8017256:	d1f5      	bne.n	8017244 <ai_conv2d_stripe_f32.constprop.0+0x4b0>
 8017258:	1a18      	subs	r0, r3, r0
 801725a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801725e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8017262:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017264:	3601      	adds	r6, #1
 8017266:	4401      	add	r1, r0
 8017268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801726a:	4402      	add	r2, r0
 801726c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801726e:	42b0      	cmp	r0, r6
 8017270:	f47f af6e 	bne.w	8017150 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 8017274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017276:	f10b 0b01 	add.w	fp, fp, #1
 801727a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801727c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801727e:	ed83 7a00 	vstr	s14, [r3]
 8017282:	440b      	add	r3, r1
 8017284:	4491      	add	r9, r2
 8017286:	1aad      	subs	r5, r5, r2
 8017288:	647b      	str	r3, [r7, #68]	; 0x44
 801728a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801728c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801728e:	4413      	add	r3, r2
 8017290:	657b      	str	r3, [r7, #84]	; 0x54
 8017292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017296:	455b      	cmp	r3, fp
 8017298:	f47f af23 	bne.w	80170e2 <ai_conv2d_stripe_f32.constprop.0+0x34e>
 801729c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801729e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80172a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172a2:	440a      	add	r2, r1
 80172a4:	3301      	adds	r3, #1
 80172a6:	66ba      	str	r2, [r7, #104]	; 0x68
 80172a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80172aa:	653b      	str	r3, [r7, #80]	; 0x50
 80172ac:	3204      	adds	r2, #4
 80172ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80172b0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80172b4:	429a      	cmp	r2, r3
 80172b6:	f43f aea8 	beq.w	801700a <ai_conv2d_stripe_f32.constprop.0+0x276>
 80172ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80172bc:	2b00      	cmp	r3, #0
 80172be:	f47f aefc 	bne.w	80170ba <ai_conv2d_stripe_f32.constprop.0+0x326>
 80172c2:	eef0 6a46 	vmov.f32	s13, s12
 80172c6:	e6fc      	b.n	80170c2 <ai_conv2d_stripe_f32.constprop.0+0x32e>
 80172c8:	fb0e f102 	mul.w	r1, lr, r2
 80172cc:	2901      	cmp	r1, #1
 80172ce:	f47f ad83 	bne.w	8016dd8 <ai_conv2d_stripe_f32.constprop.0+0x44>
 80172d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80172d6:	2a00      	cmp	r2, #0
 80172d8:	f43f ae97 	beq.w	801700a <ai_conv2d_stripe_f32.constprop.0+0x276>
 80172dc:	eb0c 0203 	add.w	r2, ip, r3
 80172e0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80172e4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80172e8:	ed5f 3ab0 	vldr	s7, [pc, #-704]	; 801702c <ai_conv2d_stripe_f32.constprop.0+0x298>
 80172ec:	fb01 f202 	mul.w	r2, r1, r2
 80172f0:	1ac1      	subs	r1, r0, r3
 80172f2:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80172f6:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 80172fa:	61fa      	str	r2, [r7, #28]
 80172fc:	1a1a      	subs	r2, r3, r0
 80172fe:	64f9      	str	r1, [r7, #76]	; 0x4c
 8017300:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 8017304:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8017308:	442a      	add	r2, r5
 801730a:	fb03 f301 	mul.w	r3, r3, r1
 801730e:	fb01 f202 	mul.w	r2, r1, r2
 8017312:	64bb      	str	r3, [r7, #72]	; 0x48
 8017314:	0093      	lsls	r3, r2, #2
 8017316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017318:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801731c:	fbb3 f3f6 	udiv	r3, r3, r6
 8017320:	61bb      	str	r3, [r7, #24]
 8017322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8017326:	009b      	lsls	r3, r3, #2
 8017328:	63bb      	str	r3, [r7, #56]	; 0x38
 801732a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801732e:	f1c3 0b00 	rsb	fp, r3, #0
 8017332:	00f3      	lsls	r3, r6, #3
 8017334:	623b      	str	r3, [r7, #32]
 8017336:	2300      	movs	r3, #0
 8017338:	653b      	str	r3, [r7, #80]	; 0x50
 801733a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801733e:	2b00      	cmp	r3, #0
 8017340:	f2c0 80e3 	blt.w	801750a <ai_conv2d_stripe_f32.constprop.0+0x776>
 8017344:	2500      	movs	r5, #0
 8017346:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8017348:	462b      	mov	r3, r5
 801734a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801734e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8017352:	445a      	add	r2, fp
 8017354:	69fc      	ldr	r4, [r7, #28]
 8017356:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8017358:	4282      	cmp	r2, r0
 801735a:	bf28      	it	cs
 801735c:	4602      	movcs	r2, r0
 801735e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8017362:	1ad2      	subs	r2, r2, r3
 8017364:	1904      	adds	r4, r0, r4
 8017366:	2e00      	cmp	r6, #0
 8017368:	f000 8228 	beq.w	80177bc <ai_conv2d_stripe_f32.constprop.0+0xa28>
 801736c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801736e:	647e      	str	r6, [r7, #68]	; 0x44
 8017370:	429e      	cmp	r6, r3
 8017372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017374:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8017378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801737c:	fe03 3aa2 	vseleq.f32	s6, s7, s5
 8017380:	1a98      	subs	r0, r3, r2
 8017382:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017386:	fb03 f000 	mul.w	r0, r3, r0
 801738a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801738e:	1a9b      	subs	r3, r3, r2
 8017390:	442c      	add	r4, r5
 8017392:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8017394:	fb08 5e04 	mla	lr, r8, r4, r5
 8017398:	eb0e 0408 	add.w	r4, lr, r8
 801739c:	45a6      	cmp	lr, r4
 801739e:	62bc      	str	r4, [r7, #40]	; 0x28
 80173a0:	f080 809a 	bcs.w	80174d8 <ai_conv2d_stripe_f32.constprop.0+0x744>
 80173a4:	0080      	lsls	r0, r0, #2
 80173a6:	009b      	lsls	r3, r3, #2
 80173a8:	6378      	str	r0, [r7, #52]	; 0x34
 80173aa:	633b      	str	r3, [r7, #48]	; 0x30
 80173ac:	f022 0303 	bic.w	r3, r2, #3
 80173b0:	e9d7 0434 	ldrd	r0, r4, [r7, #208]	; 0xd0
 80173b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80173b6:	42a0      	cmp	r0, r4
 80173b8:	f200 808e 	bhi.w	80174d8 <ai_conv2d_stripe_f32.constprop.0+0x744>
 80173bc:	1e58      	subs	r0, r3, #1
 80173be:	f04f 0900 	mov.w	r9, #0
 80173c2:	0880      	lsrs	r0, r0, #2
 80173c4:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 80173c8:	1c43      	adds	r3, r0, #1
 80173ca:	fb00 a00a 	mla	r0, r0, sl, sl
 80173ce:	6138      	str	r0, [r7, #16]
 80173d0:	0118      	lsls	r0, r3, #4
 80173d2:	009b      	lsls	r3, r3, #2
 80173d4:	6178      	str	r0, [r7, #20]
 80173d6:	e9c7 b302 	strd	fp, r3, [r7, #8]
 80173da:	69bb      	ldr	r3, [r7, #24]
 80173dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80173de:	4499      	add	r9, r3
 80173e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173e2:	181c      	adds	r4, r3, r0
 80173e4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80173e8:	65bc      	str	r4, [r7, #88]	; 0x58
 80173ea:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80173ec:	627b      	str	r3, [r7, #36]	; 0x24
 80173ee:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80173f2:	1820      	adds	r0, r4, r0
 80173f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80173f6:	6438      	str	r0, [r7, #64]	; 0x40
 80173f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80173fa:	ecb3 7a01 	vldmia	r3!, {s14}
 80173fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8017400:	ee27 7a03 	vmul.f32	s14, s14, s6
 8017404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017406:	2b00      	cmp	r3, #0
 8017408:	dd55      	ble.n	80174b6 <ai_conv2d_stripe_f32.constprop.0+0x722>
 801740a:	4675      	mov	r5, lr
 801740c:	f04f 0b00 	mov.w	fp, #0
 8017410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017412:	2b00      	cmp	r3, #0
 8017414:	f340 81d0 	ble.w	80177b8 <ai_conv2d_stripe_f32.constprop.0+0xa24>
 8017418:	6a38      	ldr	r0, [r7, #32]
 801741a:	f101 0310 	add.w	r3, r1, #16
 801741e:	2600      	movs	r6, #0
 8017420:	607a      	str	r2, [r7, #4]
 8017422:	182c      	adds	r4, r5, r0
 8017424:	4628      	mov	r0, r5
 8017426:	eb00 0c08 	add.w	ip, r0, r8
 801742a:	ed13 4a03 	vldr	s8, [r3, #-12]
 801742e:	ed53 4a04 	vldr	s9, [r3, #-16]
 8017432:	3604      	adds	r6, #4
 8017434:	eddc 7a00 	vldr	s15, [ip]
 8017438:	eb04 0c08 	add.w	ip, r4, r8
 801743c:	ed90 5a00 	vldr	s10, [r0]
 8017440:	3310      	adds	r3, #16
 8017442:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017446:	edd4 6a00 	vldr	s13, [r4]
 801744a:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 801744e:	4450      	add	r0, sl
 8017450:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8017454:	4454      	add	r4, sl
 8017456:	eee4 7a85 	vfma.f32	s15, s9, s10
 801745a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801745c:	4296      	cmp	r6, r2
 801745e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8017462:	eddc 6a00 	vldr	s13, [ip]
 8017466:	eee6 7a26 	vfma.f32	s15, s12, s13
 801746a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801746e:	dbda      	blt.n	8017426 <ai_conv2d_stripe_f32.constprop.0+0x692>
 8017470:	693b      	ldr	r3, [r7, #16]
 8017472:	687a      	ldr	r2, [r7, #4]
 8017474:	441d      	add	r5, r3
 8017476:	697b      	ldr	r3, [r7, #20]
 8017478:	68fc      	ldr	r4, [r7, #12]
 801747a:	4419      	add	r1, r3
 801747c:	42a2      	cmp	r2, r4
 801747e:	dd11      	ble.n	80174a4 <ai_conv2d_stripe_f32.constprop.0+0x710>
 8017480:	4620      	mov	r0, r4
 8017482:	462b      	mov	r3, r5
 8017484:	460e      	mov	r6, r1
 8017486:	3001      	adds	r0, #1
 8017488:	edd3 7a00 	vldr	s15, [r3]
 801748c:	ecf6 6a01 	vldmia	r6!, {s13}
 8017490:	4443      	add	r3, r8
 8017492:	4290      	cmp	r0, r2
 8017494:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017498:	d1f5      	bne.n	8017486 <ai_conv2d_stripe_f32.constprop.0+0x6f2>
 801749a:	1b14      	subs	r4, r2, r4
 801749c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80174a0:	fb04 5508 	mla	r5, r4, r8, r5
 80174a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174a6:	f10b 0b01 	add.w	fp, fp, #1
 80174aa:	441d      	add	r5, r3
 80174ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ae:	4419      	add	r1, r3
 80174b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174b2:	459b      	cmp	fp, r3
 80174b4:	d1ac      	bne.n	8017410 <ai_conv2d_stripe_f32.constprop.0+0x67c>
 80174b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80174b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80174ba:	eca3 7a01 	vstmia	r3!, {s14}
 80174be:	643b      	str	r3, [r7, #64]	; 0x40
 80174c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c2:	4419      	add	r1, r3
 80174c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174c6:	4283      	cmp	r3, r0
 80174c8:	d196      	bne.n	80173f8 <ai_conv2d_stripe_f32.constprop.0+0x664>
 80174ca:	f10e 0e04 	add.w	lr, lr, #4
 80174ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d0:	459e      	cmp	lr, r3
 80174d2:	d382      	bcc.n	80173da <ai_conv2d_stripe_f32.constprop.0+0x646>
 80174d4:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80174d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80174da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80174dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80174de:	440a      	add	r2, r1
 80174e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80174e2:	3301      	adds	r3, #1
 80174e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80174e6:	ebab 0b01 	sub.w	fp, fp, r1
 80174ea:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80174ee:	653b      	str	r3, [r7, #80]	; 0x50
 80174f0:	440a      	add	r2, r1
 80174f2:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80174f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80174fa:	429a      	cmp	r2, r3
 80174fc:	f43f ad85 	beq.w	801700a <ai_conv2d_stripe_f32.constprop.0+0x276>
 8017500:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017504:	2b00      	cmp	r3, #0
 8017506:	f6bf af1d 	bge.w	8017344 <ai_conv2d_stripe_f32.constprop.0+0x5b0>
 801750a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801750c:	465b      	mov	r3, fp
 801750e:	465d      	mov	r5, fp
 8017510:	eb02 010b 	add.w	r1, r2, fp
 8017514:	e719      	b.n	801734a <ai_conv2d_stripe_f32.constprop.0+0x5b6>
 8017516:	eeb0 7a66 	vmov.f32	s14, s13
 801751a:	e6ab      	b.n	8017274 <ai_conv2d_stripe_f32.constprop.0+0x4e0>
 801751c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801751e:	462b      	mov	r3, r5
 8017520:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017522:	442a      	add	r2, r5
 8017524:	e5e4      	b.n	80170f0 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 8017526:	2000      	movs	r0, #0
 8017528:	e687      	b.n	801723a <ai_conv2d_stripe_f32.constprop.0+0x4a6>
 801752a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801752e:	4669      	mov	r1, sp
 8017530:	fb05 f202 	mul.w	r2, r5, r2
 8017534:	ee0e 1a90 	vmov	s29, r1
 8017538:	fb06 f202 	mul.w	r2, r6, r2
 801753c:	0095      	lsls	r5, r2, #2
 801753e:	637a      	str	r2, [r7, #52]	; 0x34
 8017540:	1dea      	adds	r2, r5, #7
 8017542:	f022 0207 	bic.w	r2, r2, #7
 8017546:	ebad 0d02 	sub.w	sp, sp, r2
 801754a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801754e:	46e9      	mov	r9, sp
 8017550:	2a00      	cmp	r2, #0
 8017552:	f000 812d 	beq.w	80177b0 <ai_conv2d_stripe_f32.constprop.0+0xa1c>
 8017556:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801755a:	46ca      	mov	sl, r9
 801755c:	ed9f 8aa7 	vldr	s16, [pc, #668]	; 80177fc <ai_conv2d_stripe_f32.constprop.0+0xa68>
 8017560:	46a9      	mov	r9, r5
 8017562:	fb02 f303 	mul.w	r3, r2, r3
 8017566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017568:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 801756c:	647b      	str	r3, [r7, #68]	; 0x44
 801756e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017570:	fb03 f306 	mul.w	r3, r3, r6
 8017574:	009b      	lsls	r3, r3, #2
 8017576:	623b      	str	r3, [r7, #32]
 8017578:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801757c:	fb03 f306 	mul.w	r3, r3, r6
 8017580:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017584:	627b      	str	r3, [r7, #36]	; 0x24
 8017586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801758a:	009b      	lsls	r3, r3, #2
 801758c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801758e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017590:	64bb      	str	r3, [r7, #72]	; 0x48
 8017592:	2300      	movs	r3, #0
 8017594:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017598:	b123      	cbz	r3, 80175a4 <ai_conv2d_stripe_f32.constprop.0+0x810>
 801759a:	464a      	mov	r2, r9
 801759c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801759e:	4650      	mov	r0, sl
 80175a0:	f002 f87c 	bl	801969c <memcpy>
 80175a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	f000 811c 	beq.w	80177e4 <ai_conv2d_stripe_f32.constprop.0+0xa50>
 80175ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175ae:	ecf3 6a01 	vldmia	r3!, {s13}
 80175b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80175b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	f000 80eb 	beq.w	8017794 <ai_conv2d_stripe_f32.constprop.0+0xa00>
 80175be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80175c2:	f8c7 901c 	str.w	r9, [r7, #28]
 80175c6:	425d      	negs	r5, r3
 80175c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ca:	653b      	str	r3, [r7, #80]	; 0x50
 80175cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175ce:	643b      	str	r3, [r7, #64]	; 0x40
 80175d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80175d4:	657b      	str	r3, [r7, #84]	; 0x54
 80175d6:	2300      	movs	r3, #0
 80175d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80175da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175dc:	2b00      	cmp	r3, #0
 80175de:	f2c0 8107 	blt.w	80177f0 <ai_conv2d_stripe_f32.constprop.0+0xa5c>
 80175e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80175e4:	2300      	movs	r3, #0
 80175e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80175e8:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80175ec:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 80175f0:	4428      	add	r0, r5
 80175f2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80175f4:	42b0      	cmp	r0, r6
 80175f6:	bf94      	ite	ls
 80175f8:	ebc3 0300 	rsbls	r3, r3, r0
 80175fc:	ebc3 0306 	rsbhi	r3, r3, r6
 8017600:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8017604:	fb02 a204 	mla	r2, r2, r4, sl
 8017608:	eba0 0c03 	sub.w	ip, r0, r3
 801760c:	1af0      	subs	r0, r6, r3
 801760e:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 8017612:	fb06 f303 	mul.w	r3, r6, r3
 8017616:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 8017618:	2e00      	cmp	r6, #0
 801761a:	f340 80e6 	ble.w	80177ea <ai_conv2d_stripe_f32.constprop.0+0xa56>
 801761e:	fb04 f000 	mul.w	r0, r4, r0
 8017622:	eeb0 7a66 	vmov.f32	s14, s13
 8017626:	fb04 fc0c 	mul.w	ip, r4, ip
 801762a:	f023 040f 	bic.w	r4, r3, #15
 801762e:	6338      	str	r0, [r7, #48]	; 0x30
 8017630:	2600      	movs	r6, #0
 8017632:	1e60      	subs	r0, r4, #1
 8017634:	0900      	lsrs	r0, r0, #4
 8017636:	3001      	adds	r0, #1
 8017638:	ea4f 1880 	mov.w	r8, r0, lsl #6
 801763c:	0100      	lsls	r0, r0, #4
 801763e:	62b8      	str	r0, [r7, #40]	; 0x28
 8017640:	2c00      	cmp	r4, #0
 8017642:	f340 80cd 	ble.w	80177e0 <ai_conv2d_stripe_f32.constprop.0+0xa4c>
 8017646:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 801764a:	f102 0040 	add.w	r0, r2, #64	; 0x40
 801764e:	f04f 0900 	mov.w	r9, #0
 8017652:	ed10 6a0f 	vldr	s12, [r0, #-60]	; 0xffffffc4
 8017656:	f109 0910 	add.w	r9, r9, #16
 801765a:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 801765e:	3040      	adds	r0, #64	; 0x40
 8017660:	ed1e 4a10 	vldr	s8, [lr, #-64]	; 0xffffffc0
 8017664:	45a1      	cmp	r9, r4
 8017666:	ee67 7a86 	vmul.f32	s15, s15, s12
 801766a:	ed50 4a20 	vldr	s9, [r0, #-128]	; 0xffffff80
 801766e:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 8017672:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 8017676:	ed50 5a1e 	vldr	s11, [r0, #-120]	; 0xffffff88
 801767a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801767e:	ed10 6a1d 	vldr	s12, [r0, #-116]	; 0xffffff8c
 8017682:	ed1e ea1d 	vldr	s28, [lr, #-116]	; 0xffffff8c
 8017686:	ed5e da1c 	vldr	s27, [lr, #-112]	; 0xffffff90
 801768a:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 801768e:	ed5e ca1b 	vldr	s25, [lr, #-108]	; 0xffffff94
 8017692:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 8017696:	eee5 7a25 	vfma.f32	s15, s10, s11
 801769a:	ed5e ba1a 	vldr	s23, [lr, #-104]	; 0xffffff98
 801769e:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 80176a2:	ed5e aa19 	vldr	s21, [lr, #-100]	; 0xffffff9c
 80176a6:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 80176aa:	ed5e 9a18 	vldr	s19, [lr, #-96]	; 0xffffffa0
 80176ae:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 80176b2:	eeee 7a06 	vfma.f32	s15, s28, s12
 80176b6:	ed5e 8a17 	vldr	s17, [lr, #-92]	; 0xffffffa4
 80176ba:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 80176be:	ed5e 0a16 	vldr	s1, [lr, #-88]	; 0xffffffa8
 80176c2:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 80176c6:	ed5e 1a15 	vldr	s3, [lr, #-84]	; 0xffffffac
 80176ca:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 80176ce:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80176d2:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 80176d6:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 80176da:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 80176de:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 80176e2:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 80176e6:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 80176ea:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80176ee:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 80176f2:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 80176f6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80176fa:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80176fe:	eee9 7a89 	vfma.f32	s15, s19, s18
 8017702:	eee8 7a80 	vfma.f32	s15, s17, s0
 8017706:	eee0 7a81 	vfma.f32	s15, s1, s2
 801770a:	eee1 7a82 	vfma.f32	s15, s3, s4
 801770e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8017712:	eee3 7a84 	vfma.f32	s15, s7, s8
 8017716:	eee4 7a85 	vfma.f32	s15, s9, s10
 801771a:	eee5 7a86 	vfma.f32	s15, s11, s12
 801771e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017722:	db96      	blt.n	8017652 <ai_conv2d_stripe_f32.constprop.0+0x8be>
 8017724:	4441      	add	r1, r8
 8017726:	4442      	add	r2, r8
 8017728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801772a:	4283      	cmp	r3, r0
 801772c:	dd11      	ble.n	8017752 <ai_conv2d_stripe_f32.constprop.0+0x9be>
 801772e:	4686      	mov	lr, r0
 8017730:	468b      	mov	fp, r1
 8017732:	4691      	mov	r9, r2
 8017734:	f10e 0e01 	add.w	lr, lr, #1
 8017738:	ecb9 6a01 	vldmia	r9!, {s12}
 801773c:	ecfb 7a01 	vldmia	fp!, {s15}
 8017740:	4573      	cmp	r3, lr
 8017742:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017746:	d1f5      	bne.n	8017734 <ai_conv2d_stripe_f32.constprop.0+0x9a0>
 8017748:	1a18      	subs	r0, r3, r0
 801774a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801774e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8017752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017754:	3601      	adds	r6, #1
 8017756:	4461      	add	r1, ip
 8017758:	4402      	add	r2, r0
 801775a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801775c:	42b0      	cmp	r0, r6
 801775e:	f47f af6f 	bne.w	8017640 <ai_conv2d_stripe_f32.constprop.0+0x8ac>
 8017762:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017764:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8017766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017768:	4401      	add	r1, r0
 801776a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801776c:	ed82 7a00 	vstr	s14, [r2]
 8017770:	1a2d      	subs	r5, r5, r0
 8017772:	6579      	str	r1, [r7, #84]	; 0x54
 8017774:	3301      	adds	r3, #1
 8017776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017778:	63fb      	str	r3, [r7, #60]	; 0x3c
 801777a:	440a      	add	r2, r1
 801777c:	6a39      	ldr	r1, [r7, #32]
 801777e:	643a      	str	r2, [r7, #64]	; 0x40
 8017780:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017782:	440a      	add	r2, r1
 8017784:	653a      	str	r2, [r7, #80]	; 0x50
 8017786:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801778a:	429a      	cmp	r2, r3
 801778c:	f47f af25 	bne.w	80175da <ai_conv2d_stripe_f32.constprop.0+0x846>
 8017790:	f8d7 901c 	ldr.w	r9, [r7, #28]
 8017794:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017798:	444a      	add	r2, r9
 801779a:	3301      	adds	r3, #1
 801779c:	66ba      	str	r2, [r7, #104]	; 0x68
 801779e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80177a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80177a2:	3204      	adds	r2, #4
 80177a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80177a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80177aa:	429a      	cmp	r2, r3
 80177ac:	f47f aef3 	bne.w	8017596 <ai_conv2d_stripe_f32.constprop.0+0x802>
 80177b0:	ee1e 3a90 	vmov	r3, s29
 80177b4:	469d      	mov	sp, r3
 80177b6:	e428      	b.n	801700a <ai_conv2d_stripe_f32.constprop.0+0x276>
 80177b8:	2400      	movs	r4, #0
 80177ba:	e65f      	b.n	801747c <ai_conv2d_stripe_f32.constprop.0+0x6e8>
 80177bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80177be:	eeb0 3a63 	vmov.f32	s6, s7
 80177c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80177c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80177c8:	647b      	str	r3, [r7, #68]	; 0x44
 80177ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80177ce:	1a98      	subs	r0, r3, r2
 80177d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80177d4:	fb03 f000 	mul.w	r0, r3, r0
 80177d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80177dc:	1a9b      	subs	r3, r3, r2
 80177de:	e5d7      	b.n	8017390 <ai_conv2d_stripe_f32.constprop.0+0x5fc>
 80177e0:	2000      	movs	r0, #0
 80177e2:	e7a2      	b.n	801772a <ai_conv2d_stripe_f32.constprop.0+0x996>
 80177e4:	eef0 6a48 	vmov.f32	s13, s16
 80177e8:	e6e4      	b.n	80175b4 <ai_conv2d_stripe_f32.constprop.0+0x820>
 80177ea:	eeb0 7a66 	vmov.f32	s14, s13
 80177ee:	e7b8      	b.n	8017762 <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 80177f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80177f2:	462b      	mov	r3, r5
 80177f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80177f6:	442a      	add	r2, r5
 80177f8:	e6f6      	b.n	80175e8 <ai_conv2d_stripe_f32.constprop.0+0x854>
 80177fa:	bf00      	nop
 80177fc:	00000000 	.word	0x00000000

08017800 <ai_dict_decompress_f32>:
 8017800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017804:	9d08      	ldr	r5, [sp, #32]
 8017806:	2b04      	cmp	r3, #4
 8017808:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 801780c:	d00e      	beq.n	801782c <ai_dict_decompress_f32+0x2c>
 801780e:	2b08      	cmp	r3, #8
 8017810:	d10a      	bne.n	8017828 <ai_dict_decompress_f32+0x28>
 8017812:	42a8      	cmp	r0, r5
 8017814:	d208      	bcs.n	8017828 <ai_dict_decompress_f32+0x28>
 8017816:	f811 3b01 	ldrb.w	r3, [r1], #1
 801781a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	f840 3b04 	str.w	r3, [r0], #4
 8017824:	4285      	cmp	r5, r0
 8017826:	d8f6      	bhi.n	8017816 <ai_dict_decompress_f32+0x16>
 8017828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801782c:	9b07      	ldr	r3, [sp, #28]
 801782e:	085e      	lsrs	r6, r3, #1
 8017830:	f003 0701 	and.w	r7, r3, #1
 8017834:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8017838:	f106 38ff 	add.w	r8, r6, #4294967295
 801783c:	42a8      	cmp	r0, r5
 801783e:	d2f3      	bcs.n	8017828 <ai_dict_decompress_f32+0x28>
 8017840:	b33e      	cbz	r6, 8017892 <ai_dict_decompress_f32+0x92>
 8017842:	f100 0e08 	add.w	lr, r0, #8
 8017846:	f101 3cff 	add.w	ip, r1, #4294967295
 801784a:	eb01 0408 	add.w	r4, r1, r8
 801784e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8017852:	f10e 0e08 	add.w	lr, lr, #8
 8017856:	091b      	lsrs	r3, r3, #4
 8017858:	4564      	cmp	r4, ip
 801785a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	f84e 3c10 	str.w	r3, [lr, #-16]
 8017864:	f89c 3000 	ldrb.w	r3, [ip]
 8017868:	f003 030f 	and.w	r3, r3, #15
 801786c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8017876:	d1ea      	bne.n	801784e <ai_dict_decompress_f32+0x4e>
 8017878:	4431      	add	r1, r6
 801787a:	4448      	add	r0, r9
 801787c:	2f00      	cmp	r7, #0
 801787e:	d0dd      	beq.n	801783c <ai_dict_decompress_f32+0x3c>
 8017880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017884:	091b      	lsrs	r3, r3, #4
 8017886:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	f840 3b04 	str.w	r3, [r0], #4
 8017890:	e7d4      	b.n	801783c <ai_dict_decompress_f32+0x3c>
 8017892:	2f00      	cmp	r7, #0
 8017894:	d1f4      	bne.n	8017880 <ai_dict_decompress_f32+0x80>
 8017896:	42a8      	cmp	r0, r5
 8017898:	d3fd      	bcc.n	8017896 <ai_dict_decompress_f32+0x96>
 801789a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801789e:	bf00      	nop

080178a0 <forward_conv2d_nl_pool>:
 80178a0:	6981      	ldr	r1, [r0, #24]
 80178a2:	880b      	ldrh	r3, [r1, #0]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	f000 814a 	beq.w	8017b3e <forward_conv2d_nl_pool+0x29e>
 80178aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178ae:	ed2d 8b04 	vpush	{d8-d9}
 80178b2:	684e      	ldr	r6, [r1, #4]
 80178b4:	b0b9      	sub	sp, #228	; 0xe4
 80178b6:	4604      	mov	r4, r0
 80178b8:	6872      	ldr	r2, [r6, #4]
 80178ba:	b102      	cbz	r2, 80178be <forward_conv2d_nl_pool+0x1e>
 80178bc:	6812      	ldr	r2, [r2, #0]
 80178be:	2b01      	cmp	r3, #1
 80178c0:	f000 824d 	beq.w	8017d5e <forward_conv2d_nl_pool+0x4be>
 80178c4:	6930      	ldr	r0, [r6, #16]
 80178c6:	9011      	str	r0, [sp, #68]	; 0x44
 80178c8:	b108      	cbz	r0, 80178ce <forward_conv2d_nl_pool+0x2e>
 80178ca:	6800      	ldr	r0, [r0, #0]
 80178cc:	9011      	str	r0, [sp, #68]	; 0x44
 80178ce:	2b02      	cmp	r3, #2
 80178d0:	f000 8137 	beq.w	8017b42 <forward_conv2d_nl_pool+0x2a2>
 80178d4:	69f0      	ldr	r0, [r6, #28]
 80178d6:	2800      	cmp	r0, #0
 80178d8:	f000 8231 	beq.w	8017d3e <forward_conv2d_nl_pool+0x49e>
 80178dc:	8b37      	ldrh	r7, [r6, #24]
 80178de:	6806      	ldr	r6, [r0, #0]
 80178e0:	2f01      	cmp	r7, #1
 80178e2:	f240 8233 	bls.w	8017d4c <forward_conv2d_nl_pool+0x4ac>
 80178e6:	6845      	ldr	r5, [r0, #4]
 80178e8:	ee08 5a10 	vmov	s16, r5
 80178ec:	6880      	ldr	r0, [r0, #8]
 80178ee:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80178f2:	6992      	ldr	r2, [r2, #24]
 80178f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80178f8:	6892      	ldr	r2, [r2, #8]
 80178fa:	952a      	str	r5, [sp, #168]	; 0xa8
 80178fc:	ee09 2a10 	vmov	s18, r2
 8017900:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017902:	f8d4 e03c 	ldr.w	lr, [r4, #60]	; 0x3c
 8017906:	f8d2 900c 	ldr.w	r9, [r2, #12]
 801790a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 801790e:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8017912:	6d67      	ldr	r7, [r4, #84]	; 0x54
 8017914:	951d      	str	r5, [sp, #116]	; 0x74
 8017916:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801791a:	69b2      	ldr	r2, [r6, #24]
 801791c:	951f      	str	r5, [sp, #124]	; 0x7c
 801791e:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8017922:	f8d9 b004 	ldr.w	fp, [r9, #4]
 8017926:	9527      	str	r5, [sp, #156]	; 0x9c
 8017928:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801792c:	952e      	str	r5, [sp, #184]	; 0xb8
 801792e:	8d25      	ldrh	r5, [r4, #40]	; 0x28
 8017930:	952f      	str	r5, [sp, #188]	; 0xbc
 8017932:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8017934:	9513      	str	r5, [sp, #76]	; 0x4c
 8017936:	f8de 5000 	ldr.w	r5, [lr]
 801793a:	9515      	str	r5, [sp, #84]	; 0x54
 801793c:	e9de a501 	ldrd	sl, r5, [lr, #4]
 8017940:	9516      	str	r5, [sp, #88]	; 0x58
 8017942:	69e5      	ldr	r5, [r4, #28]
 8017944:	9530      	str	r5, [sp, #192]	; 0xc0
 8017946:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017948:	9526      	str	r5, [sp, #152]	; 0x98
 801794a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801794c:	9512      	str	r5, [sp, #72]	; 0x48
 801794e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8017952:	9528      	str	r5, [sp, #160]	; 0xa0
 8017954:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8017958:	9529      	str	r5, [sp, #164]	; 0xa4
 801795a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 801795c:	9522      	str	r5, [sp, #136]	; 0x88
 801795e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8017960:	9523      	str	r5, [sp, #140]	; 0x8c
 8017962:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8017964:	951a      	str	r5, [sp, #104]	; 0x68
 8017966:	e9d7 8500 	ldrd	r8, r5, [r7]
 801796a:	9524      	str	r5, [sp, #144]	; 0x90
 801796c:	6895      	ldr	r5, [r2, #8]
 801796e:	ee08 5a90 	vmov	s17, r5
 8017972:	ee18 5a10 	vmov	r5, s16
 8017976:	b11d      	cbz	r5, 8017980 <forward_conv2d_nl_pool+0xe0>
 8017978:	69af      	ldr	r7, [r5, #24]
 801797a:	68bd      	ldr	r5, [r7, #8]
 801797c:	ee08 5a10 	vmov	s16, r5
 8017980:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8017984:	2800      	cmp	r0, #0
 8017986:	f000 81c7 	beq.w	8017d18 <forward_conv2d_nl_pool+0x478>
 801798a:	6987      	ldr	r7, [r0, #24]
 801798c:	2f00      	cmp	r7, #0
 801798e:	f000 81cc 	beq.w	8017d2a <forward_conv2d_nl_pool+0x48a>
 8017992:	6943      	ldr	r3, [r0, #20]
 8017994:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8017998:	689b      	ldr	r3, [r3, #8]
 801799a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801799e:	9333      	str	r3, [sp, #204]	; 0xcc
 80179a0:	f001 fbe4 	bl	801916c <ai_array_get_byte_size>
 80179a4:	69a1      	ldr	r1, [r4, #24]
 80179a6:	69b2      	ldr	r2, [r6, #24]
 80179a8:	880b      	ldrh	r3, [r1, #0]
 80179aa:	9014      	str	r0, [sp, #80]	; 0x50
 80179ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80179ae:	902d      	str	r0, [sp, #180]	; 0xb4
 80179b0:	2800      	cmp	r0, #0
 80179b2:	f000 81ae 	beq.w	8017d12 <forward_conv2d_nl_pool+0x472>
 80179b6:	fa1f f58a 	uxth.w	r5, sl
 80179ba:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 80179be:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80179c2:	9517      	str	r5, [sp, #92]	; 0x5c
 80179c4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80179c6:	9015      	str	r0, [sp, #84]	; 0x54
 80179c8:	fa10 f085 	uxtah	r0, r0, r5
 80179cc:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80179ce:	961b      	str	r6, [sp, #108]	; 0x6c
 80179d0:	4428      	add	r0, r5
 80179d2:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 80179d6:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80179d8:	3e01      	subs	r6, #1
 80179da:	1e6f      	subs	r7, r5, #1
 80179dc:	fb07 5506 	mla	r5, r7, r6, r5
 80179e0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80179e2:	1b40      	subs	r0, r0, r5
 80179e4:	952b      	str	r5, [sp, #172]	; 0xac
 80179e6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80179e8:	fbb0 f0f6 	udiv	r0, r0, r6
 80179ec:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 80179f0:	1e6f      	subs	r7, r5, #1
 80179f2:	9013      	str	r0, [sp, #76]	; 0x4c
 80179f4:	3e01      	subs	r6, #1
 80179f6:	6810      	ldr	r0, [r2, #0]
 80179f8:	fb07 5506 	mla	r5, r7, r6, r5
 80179fc:	f3c0 4643 	ubfx	r6, r0, #17, #4
 8017a00:	952c      	str	r5, [sp, #176]	; 0xb0
 8017a02:	2e04      	cmp	r6, #4
 8017a04:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8017a06:	9520      	str	r5, [sp, #128]	; 0x80
 8017a08:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8017a0a:	9519      	str	r5, [sp, #100]	; 0x64
 8017a0c:	f000 8148 	beq.w	8017ca0 <forward_conv2d_nl_pool+0x400>
 8017a10:	2e08      	cmp	r6, #8
 8017a12:	f000 8145 	beq.w	8017ca0 <forward_conv2d_nl_pool+0x400>
 8017a16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017a18:	2b03      	cmp	r3, #3
 8017a1a:	fa0f f888 	sxth.w	r8, r8
 8017a1e:	6992      	ldr	r2, [r2, #24]
 8017a20:	921c      	str	r2, [sp, #112]	; 0x70
 8017a22:	f240 81a1 	bls.w	8017d68 <forward_conv2d_nl_pool+0x4c8>
 8017a26:	684b      	ldr	r3, [r1, #4]
 8017a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	f000 819f 	beq.w	8017d6e <forward_conv2d_nl_pool+0x4ce>
 8017a30:	681e      	ldr	r6, [r3, #0]
 8017a32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a34:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017a36:	425b      	negs	r3, r3
 8017a38:	9316      	str	r3, [sp, #88]	; 0x58
 8017a3a:	68f3      	ldr	r3, [r6, #12]
 8017a3c:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8017a40:	69b3      	ldr	r3, [r6, #24]
 8017a42:	689c      	ldr	r4, [r3, #8]
 8017a44:	2a00      	cmp	r2, #0
 8017a46:	d070      	beq.n	8017b2a <forward_conv2d_nl_pool+0x28a>
 8017a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017a4a:	fb0a f20b 	mul.w	r2, sl, fp
 8017a4e:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8017a52:	425b      	negs	r3, r3
 8017a54:	9236      	str	r2, [sp, #216]	; 0xd8
 8017a56:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8017a5a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8017a5e:	9331      	str	r3, [sp, #196]	; 0xc4
 8017a60:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8017a64:	9234      	str	r2, [sp, #208]	; 0xd0
 8017a66:	9332      	str	r3, [sp, #200]	; 0xc8
 8017a68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017a6a:	fb03 f30b 	mul.w	r3, r3, fp
 8017a6e:	fb0a f303 	mul.w	r3, sl, r3
 8017a72:	009b      	lsls	r3, r3, #2
 8017a74:	9335      	str	r3, [sp, #212]	; 0xd4
 8017a76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017a78:	fb03 f30b 	mul.w	r3, r3, fp
 8017a7c:	009b      	lsls	r3, r3, #2
 8017a7e:	9325      	str	r3, [sp, #148]	; 0x94
 8017a80:	2300      	movs	r3, #0
 8017a82:	9317      	str	r3, [sp, #92]	; 0x5c
 8017a84:	931e      	str	r3, [sp, #120]	; 0x78
 8017a86:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8017a8a:	9337      	str	r3, [sp, #220]	; 0xdc
 8017a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017a8e:	3301      	adds	r3, #1
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	dc6b      	bgt.n	8017b6c <forward_conv2d_nl_pool+0x2cc>
 8017a94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	f2c0 80d4 	blt.w	8017c44 <forward_conv2d_nl_pool+0x3a4>
 8017a9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017a9e:	4598      	cmp	r8, r3
 8017aa0:	d352      	bcc.n	8017b48 <forward_conv2d_nl_pool+0x2a8>
 8017aa2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017aa4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017aa6:	69b0      	ldr	r0, [r6, #24]
 8017aa8:	440a      	add	r2, r1
 8017aaa:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8017aac:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8017aae:	9216      	str	r2, [sp, #88]	; 0x58
 8017ab0:	3701      	adds	r7, #1
 8017ab2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017ab4:	9717      	str	r7, [sp, #92]	; 0x5c
 8017ab6:	3a01      	subs	r2, #1
 8017ab8:	9213      	str	r2, [sp, #76]	; 0x4c
 8017aba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017abc:	1a52      	subs	r2, r2, r1
 8017abe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017ac0:	9215      	str	r2, [sp, #84]	; 0x54
 8017ac2:	b29a      	uxth	r2, r3
 8017ac4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8017ac8:	9201      	str	r2, [sp, #4]
 8017aca:	1a52      	subs	r2, r2, r1
 8017acc:	eba8 0803 	sub.w	r8, r8, r3
 8017ad0:	9305      	str	r3, [sp, #20]
 8017ad2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017ad4:	b292      	uxth	r2, r2
 8017ad6:	fa1f f18a 	uxth.w	r1, sl
 8017ada:	9308      	str	r3, [sp, #32]
 8017adc:	fa0f f888 	sxth.w	r8, r8
 8017ae0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8017ae4:	9303      	str	r3, [sp, #12]
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	9307      	str	r3, [sp, #28]
 8017aea:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8017aee:	9306      	str	r3, [sp, #24]
 8017af0:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8017af4:	9304      	str	r3, [sp, #16]
 8017af6:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8017afa:	9302      	str	r3, [sp, #8]
 8017afc:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8017b00:	9300      	str	r3, [sp, #0]
 8017b02:	fa1f f38b 	uxth.w	r3, fp
 8017b06:	47a8      	blx	r5
 8017b08:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017b0a:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 8017b0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017b10:	1acb      	subs	r3, r1, r3
 8017b12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b16:	b219      	sxth	r1, r3
 8017b18:	6893      	ldr	r3, [r2, #8]
 8017b1a:	9118      	str	r1, [sp, #96]	; 0x60
 8017b1c:	9925      	ldr	r1, [sp, #148]	; 0x94
 8017b1e:	440b      	add	r3, r1
 8017b20:	6093      	str	r3, [r2, #8]
 8017b22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017b24:	42bb      	cmp	r3, r7
 8017b26:	d8b1      	bhi.n	8017a8c <forward_conv2d_nl_pool+0x1ec>
 8017b28:	69b3      	ldr	r3, [r6, #24]
 8017b2a:	68da      	ldr	r2, [r3, #12]
 8017b2c:	609a      	str	r2, [r3, #8]
 8017b2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017b30:	68d3      	ldr	r3, [r2, #12]
 8017b32:	6093      	str	r3, [r2, #8]
 8017b34:	b039      	add	sp, #228	; 0xe4
 8017b36:	ecbd 8b04 	vpop	{d8-d9}
 8017b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b3e:	685b      	ldr	r3, [r3, #4]
 8017b40:	deff      	udf	#255	; 0xff
 8017b42:	2300      	movs	r3, #0
 8017b44:	685b      	ldr	r3, [r3, #4]
 8017b46:	deff      	udf	#255	; 0xff
 8017b48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017b4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017b4c:	4413      	add	r3, r2
 8017b4e:	9316      	str	r3, [sp, #88]	; 0x58
 8017b50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017b52:	3b01      	subs	r3, #1
 8017b54:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b58:	1a9b      	subs	r3, r3, r2
 8017b5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017b5c:	9315      	str	r3, [sp, #84]	; 0x54
 8017b5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017b60:	4293      	cmp	r3, r2
 8017b62:	d9e1      	bls.n	8017b28 <forward_conv2d_nl_pool+0x288>
 8017b64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017b66:	3301      	adds	r3, #1
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	dd93      	ble.n	8017a94 <forward_conv2d_nl_pool+0x1f4>
 8017b6c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8017b6e:	ee19 1a10 	vmov	r1, s18
 8017b72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017b74:	4620      	mov	r0, r4
 8017b76:	920e      	str	r2, [sp, #56]	; 0x38
 8017b78:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8017b80:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017b82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017b84:	930a      	str	r3, [sp, #40]	; 0x28
 8017b86:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017b88:	9307      	str	r3, [sp, #28]
 8017b8a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8017b8c:	9306      	str	r3, [sp, #24]
 8017b8e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017b90:	9305      	str	r3, [sp, #20]
 8017b92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017b94:	e9cd a303 	strd	sl, r3, [sp, #12]
 8017b98:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017b9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017b9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017ba0:	9300      	str	r3, [sp, #0]
 8017ba2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017ba4:	4413      	add	r3, r2
 8017ba6:	bfa8      	it	ge
 8017ba8:	2200      	movge	r2, #0
 8017baa:	9208      	str	r2, [sp, #32]
 8017bac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017bae:	4293      	cmp	r3, r2
 8017bb0:	bf28      	it	cs
 8017bb2:	4613      	movcs	r3, r2
 8017bb4:	ee18 2a90 	vmov	r2, s17
 8017bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8017bba:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 8017bbe:	930d      	str	r3, [sp, #52]	; 0x34
 8017bc0:	ee18 3a10 	vmov	r3, s16
 8017bc4:	f7ff f8e6 	bl	8016d94 <ai_conv2d_stripe_f32.constprop.0>
 8017bc8:	69b2      	ldr	r2, [r6, #24]
 8017bca:	f1ba 0f00 	cmp.w	sl, #0
 8017bce:	f000 809e 	beq.w	8017d0e <forward_conv2d_nl_pool+0x46e>
 8017bd2:	4611      	mov	r1, r2
 8017bd4:	4630      	mov	r0, r6
 8017bd6:	465a      	mov	r2, fp
 8017bd8:	4656      	mov	r6, sl
 8017bda:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
 8017bde:	2700      	movs	r7, #0
 8017be0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017be2:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 8017be6:	e9dd ba33 	ldrd	fp, sl, [sp, #204]	; 0xcc
 8017bea:	462b      	mov	r3, r5
 8017bec:	608c      	str	r4, [r1, #8]
 8017bee:	4601      	mov	r1, r0
 8017bf0:	445d      	add	r5, fp
 8017bf2:	9212      	str	r2, [sp, #72]	; 0x48
 8017bf4:	4454      	add	r4, sl
 8017bf6:	9011      	str	r0, [sp, #68]	; 0x44
 8017bf8:	47c0      	blx	r8
 8017bfa:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017bfc:	eba5 0309 	sub.w	r3, r5, r9
 8017c00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017c02:	3701      	adds	r7, #1
 8017c04:	6981      	ldr	r1, [r0, #24]
 8017c06:	4293      	cmp	r3, r2
 8017c08:	bfa8      	it	ge
 8017c0a:	464d      	movge	r5, r9
 8017c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c0e:	684b      	ldr	r3, [r1, #4]
 8017c10:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8017c14:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8017c18:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8017c1c:	429c      	cmp	r4, r3
 8017c1e:	bf28      	it	cs
 8017c20:	eba4 040e 	subcs.w	r4, r4, lr
 8017c24:	42be      	cmp	r6, r7
 8017c26:	d1e0      	bne.n	8017bea <forward_conv2d_nl_pool+0x34a>
 8017c28:	4693      	mov	fp, r2
 8017c2a:	46b2      	mov	sl, r6
 8017c2c:	460a      	mov	r2, r1
 8017c2e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8017c32:	4661      	mov	r1, ip
 8017c34:	4606      	mov	r6, r0
 8017c36:	9511      	str	r5, [sp, #68]	; 0x44
 8017c38:	f108 0801 	add.w	r8, r8, #1
 8017c3c:	6091      	str	r1, [r2, #8]
 8017c3e:	fa0f f888 	sxth.w	r8, r8
 8017c42:	e72b      	b.n	8017a9c <forward_conv2d_nl_pool+0x1fc>
 8017c44:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017c46:	fb03 f208 	mul.w	r2, r3, r8
 8017c4a:	69b3      	ldr	r3, [r6, #24]
 8017c4c:	eba4 0282 	sub.w	r2, r4, r2, lsl #2
 8017c50:	68d9      	ldr	r1, [r3, #12]
 8017c52:	685b      	ldr	r3, [r3, #4]
 8017c54:	4291      	cmp	r1, r2
 8017c56:	bf88      	it	hi
 8017c58:	eb02 0283 	addhi.w	r2, r2, r3, lsl #2
 8017c5c:	009b      	lsls	r3, r3, #2
 8017c5e:	4291      	cmp	r1, r2
 8017c60:	d21c      	bcs.n	8017c9c <forward_conv2d_nl_pool+0x3fc>
 8017c62:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8017c64:	4419      	add	r1, r3
 8017c66:	4540      	cmp	r0, r8
 8017c68:	d13f      	bne.n	8017cea <forward_conv2d_nl_pool+0x44a>
 8017c6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017c6c:	fa1f f888 	uxth.w	r8, r8
 8017c70:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017c72:	4402      	add	r2, r0
 8017c74:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8017c76:	eba2 0208 	sub.w	r2, r2, r8
 8017c7a:	4404      	add	r4, r0
 8017c7c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017c7e:	b212      	sxth	r2, r2
 8017c80:	428c      	cmp	r4, r1
 8017c82:	4480      	add	r8, r0
 8017c84:	921e      	str	r2, [sp, #120]	; 0x78
 8017c86:	fa0f f888 	sxth.w	r8, r8
 8017c8a:	f4ff af07 	bcc.w	8017a9c <forward_conv2d_nl_pool+0x1fc>
 8017c8e:	425b      	negs	r3, r3
 8017c90:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017c92:	441c      	add	r4, r3
 8017c94:	428c      	cmp	r4, r1
 8017c96:	d2fc      	bcs.n	8017c92 <forward_conv2d_nl_pool+0x3f2>
 8017c98:	9511      	str	r5, [sp, #68]	; 0x44
 8017c9a:	e6ff      	b.n	8017a9c <forward_conv2d_nl_pool+0x1fc>
 8017c9c:	4419      	add	r1, r3
 8017c9e:	e7e4      	b.n	8017c6a <forward_conv2d_nl_pool+0x3ca>
 8017ca0:	68d6      	ldr	r6, [r2, #12]
 8017ca2:	2e00      	cmp	r6, #0
 8017ca4:	f43f aeb7 	beq.w	8017a16 <forward_conv2d_nl_pool+0x176>
 8017ca8:	2b03      	cmp	r3, #3
 8017caa:	d962      	bls.n	8017d72 <forward_conv2d_nl_pool+0x4d2>
 8017cac:	684b      	ldr	r3, [r1, #4]
 8017cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d04f      	beq.n	8017d54 <forward_conv2d_nl_pool+0x4b4>
 8017cb4:	685b      	ldr	r3, [r3, #4]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d04c      	beq.n	8017d54 <forward_conv2d_nl_pool+0x4b4>
 8017cba:	699f      	ldr	r7, [r3, #24]
 8017cbc:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8017cc0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8017cc4:	6891      	ldr	r1, [r2, #8]
 8017cc6:	4632      	mov	r2, r6
 8017cc8:	4103      	asrs	r3, r0
 8017cca:	e9d7 0601 	ldrd	r0, r6, [r7, #4]
 8017cce:	b29b      	uxth	r3, r3
 8017cd0:	9001      	str	r0, [sp, #4]
 8017cd2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8017cd4:	9000      	str	r0, [sp, #0]
 8017cd6:	4630      	mov	r0, r6
 8017cd8:	f7ff fd92 	bl	8017800 <ai_dict_decompress_f32>
 8017cdc:	69a1      	ldr	r1, [r4, #24]
 8017cde:	2e00      	cmp	r6, #0
 8017ce0:	d03b      	beq.n	8017d5a <forward_conv2d_nl_pool+0x4ba>
 8017ce2:	ee08 6a90 	vmov	s17, r6
 8017ce6:	880b      	ldrh	r3, [r1, #0]
 8017ce8:	e695      	b.n	8017a16 <forward_conv2d_nl_pool+0x176>
 8017cea:	428a      	cmp	r2, r1
 8017cec:	d2bd      	bcs.n	8017c6a <forward_conv2d_nl_pool+0x3ca>
 8017cee:	4620      	mov	r0, r4
 8017cf0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017cf2:	f852 3b04 	ldr.w	r3, [r2], #4
 8017cf6:	f840 3b04 	str.w	r3, [r0], #4
 8017cfa:	69b1      	ldr	r1, [r6, #24]
 8017cfc:	684b      	ldr	r3, [r1, #4]
 8017cfe:	68c9      	ldr	r1, [r1, #12]
 8017d00:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8017d04:	009b      	lsls	r3, r3, #2
 8017d06:	4291      	cmp	r1, r2
 8017d08:	d8f3      	bhi.n	8017cf2 <forward_conv2d_nl_pool+0x452>
 8017d0a:	9511      	str	r5, [sp, #68]	; 0x44
 8017d0c:	e7ad      	b.n	8017c6a <forward_conv2d_nl_pool+0x3ca>
 8017d0e:	68d1      	ldr	r1, [r2, #12]
 8017d10:	e792      	b.n	8017c38 <forward_conv2d_nl_pool+0x398>
 8017d12:	4819      	ldr	r0, [pc, #100]	; (8017d78 <forward_conv2d_nl_pool+0x4d8>)
 8017d14:	902d      	str	r0, [sp, #180]	; 0xb4
 8017d16:	e64e      	b.n	80179b6 <forward_conv2d_nl_pool+0x116>
 8017d18:	f1b9 0f00 	cmp.w	r9, #0
 8017d1c:	d00b      	beq.n	8017d36 <forward_conv2d_nl_pool+0x496>
 8017d1e:	9033      	str	r0, [sp, #204]	; 0xcc
 8017d20:	2001      	movs	r0, #1
 8017d22:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8017d26:	9014      	str	r0, [sp, #80]	; 0x50
 8017d28:	e640      	b.n	80179ac <forward_conv2d_nl_pool+0x10c>
 8017d2a:	f1b9 0f00 	cmp.w	r9, #0
 8017d2e:	d001      	beq.n	8017d34 <forward_conv2d_nl_pool+0x494>
 8017d30:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8017d34:	2000      	movs	r0, #0
 8017d36:	9033      	str	r0, [sp, #204]	; 0xcc
 8017d38:	2001      	movs	r0, #1
 8017d3a:	9014      	str	r0, [sp, #80]	; 0x50
 8017d3c:	e636      	b.n	80179ac <forward_conv2d_nl_pool+0x10c>
 8017d3e:	8b36      	ldrh	r6, [r6, #24]
 8017d40:	2e01      	cmp	r6, #1
 8017d42:	d90f      	bls.n	8017d64 <forward_conv2d_nl_pool+0x4c4>
 8017d44:	ee08 0a10 	vmov	s16, r0
 8017d48:	4606      	mov	r6, r0
 8017d4a:	e5d0      	b.n	80178ee <forward_conv2d_nl_pool+0x4e>
 8017d4c:	2500      	movs	r5, #0
 8017d4e:	ee08 5a10 	vmov	s16, r5
 8017d52:	e5cb      	b.n	80178ec <forward_conv2d_nl_pool+0x4c>
 8017d54:	2300      	movs	r3, #0
 8017d56:	699b      	ldr	r3, [r3, #24]
 8017d58:	deff      	udf	#255	; 0xff
 8017d5a:	880b      	ldrh	r3, [r1, #0]
 8017d5c:	e65b      	b.n	8017a16 <forward_conv2d_nl_pool+0x176>
 8017d5e:	2300      	movs	r3, #0
 8017d60:	685b      	ldr	r3, [r3, #4]
 8017d62:	deff      	udf	#255	; 0xff
 8017d64:	68c3      	ldr	r3, [r0, #12]
 8017d66:	deff      	udf	#255	; 0xff
 8017d68:	2300      	movs	r3, #0
 8017d6a:	685b      	ldr	r3, [r3, #4]
 8017d6c:	deff      	udf	#255	; 0xff
 8017d6e:	68db      	ldr	r3, [r3, #12]
 8017d70:	deff      	udf	#255	; 0xff
 8017d72:	2300      	movs	r3, #0
 8017d74:	685b      	ldr	r3, [r3, #4]
 8017d76:	deff      	udf	#255	; 0xff
 8017d78:	08016d91 	.word	0x08016d91

08017d7c <forward_dense>:
 8017d7c:	6983      	ldr	r3, [r0, #24]
 8017d7e:	881a      	ldrh	r2, [r3, #0]
 8017d80:	2a00      	cmp	r2, #0
 8017d82:	f000 80f7 	beq.w	8017f74 <forward_dense+0x1f8>
 8017d86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d8a:	ed2d 8b0e 	vpush	{d8-d14}
 8017d8e:	6858      	ldr	r0, [r3, #4]
 8017d90:	b09b      	sub	sp, #108	; 0x6c
 8017d92:	6847      	ldr	r7, [r0, #4]
 8017d94:	b107      	cbz	r7, 8017d98 <forward_dense+0x1c>
 8017d96:	683f      	ldr	r7, [r7, #0]
 8017d98:	2a01      	cmp	r2, #1
 8017d9a:	f000 8523 	beq.w	80187e4 <forward_dense+0xa68>
 8017d9e:	6905      	ldr	r5, [r0, #16]
 8017da0:	b105      	cbz	r5, 8017da4 <forward_dense+0x28>
 8017da2:	682d      	ldr	r5, [r5, #0]
 8017da4:	2a02      	cmp	r2, #2
 8017da6:	f000 80e7 	beq.w	8017f78 <forward_dense+0x1fc>
 8017daa:	69c3      	ldr	r3, [r0, #28]
 8017dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	f000 8509 	beq.w	80187c6 <forward_dense+0xa4a>
 8017db4:	4619      	mov	r1, r3
 8017db6:	8b03      	ldrh	r3, [r0, #24]
 8017db8:	6809      	ldr	r1, [r1, #0]
 8017dba:	2b01      	cmp	r3, #1
 8017dbc:	910c      	str	r1, [sp, #48]	; 0x30
 8017dbe:	f240 8505 	bls.w	80187cc <forward_dense+0xa50>
 8017dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dc4:	685b      	ldr	r3, [r3, #4]
 8017dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8017dc8:	460b      	mov	r3, r1
 8017dca:	6999      	ldr	r1, [r3, #24]
 8017dcc:	2a03      	cmp	r2, #3
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	68ec      	ldr	r4, [r5, #12]
 8017dd2:	685b      	ldr	r3, [r3, #4]
 8017dd4:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8017dd8:	9314      	str	r3, [sp, #80]	; 0x50
 8017dda:	680b      	ldr	r3, [r1, #0]
 8017ddc:	e9d4 6c01 	ldrd	r6, ip, [r4, #4]
 8017de0:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8017de4:	fb0c fb06 	mul.w	fp, ip, r6
 8017de8:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 8017dec:	fa4e f40c 	asr.w	r4, lr, ip
 8017df0:	9413      	str	r4, [sp, #76]	; 0x4c
 8017df2:	f000 84f4 	beq.w	80187de <forward_dense+0xa62>
 8017df6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8017df8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8017dfc:	2a00      	cmp	r2, #0
 8017dfe:	f000 84dc 	beq.w	80187ba <forward_dense+0xa3e>
 8017e02:	6812      	ldr	r2, [r2, #0]
 8017e04:	2a00      	cmp	r2, #0
 8017e06:	f000 84d8 	beq.w	80187ba <forward_dense+0xa3e>
 8017e0a:	2b04      	cmp	r3, #4
 8017e0c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8017e10:	f000 84bf 	beq.w	8018792 <forward_dense+0xa16>
 8017e14:	2b08      	cmp	r3, #8
 8017e16:	f000 84bc 	beq.w	8018792 <forward_dense+0xa16>
 8017e1a:	f04f 0a00 	mov.w	sl, #0
 8017e1e:	69bb      	ldr	r3, [r7, #24]
 8017e20:	fb0b f408 	mul.w	r4, fp, r8
 8017e24:	69aa      	ldr	r2, [r5, #24]
 8017e26:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8017e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e2c:	6892      	ldr	r2, [r2, #8]
 8017e2e:	695b      	ldr	r3, [r3, #20]
 8017e30:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8017e34:	9204      	str	r2, [sp, #16]
 8017e36:	685b      	ldr	r3, [r3, #4]
 8017e38:	428a      	cmp	r2, r1
 8017e3a:	910f      	str	r1, [sp, #60]	; 0x3c
 8017e3c:	9302      	str	r3, [sp, #8]
 8017e3e:	ea4f 0386 	mov.w	r3, r6, lsl #2
 8017e42:	930d      	str	r3, [sp, #52]	; 0x34
 8017e44:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8017e48:	9301      	str	r3, [sp, #4]
 8017e4a:	f080 849a 	bcs.w	8018782 <forward_dense+0xa06>
 8017e4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017e50:	4bbf      	ldr	r3, [pc, #764]	; (8018150 <forward_dense+0x3d4>)
 8017e52:	08d0      	lsrs	r0, r2, #3
 8017e54:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8018154 <forward_dense+0x3d8>
 8017e58:	4413      	add	r3, r2
 8017e5a:	9007      	str	r0, [sp, #28]
 8017e5c:	0099      	lsls	r1, r3, #2
 8017e5e:	f1a2 0310 	sub.w	r3, r2, #16
 8017e62:	091b      	lsrs	r3, r3, #4
 8017e64:	f101 0420 	add.w	r4, r1, #32
 8017e68:	9115      	str	r1, [sp, #84]	; 0x54
 8017e6a:	0949      	lsrs	r1, r1, #5
 8017e6c:	3301      	adds	r3, #1
 8017e6e:	940e      	str	r4, [sp, #56]	; 0x38
 8017e70:	445c      	add	r4, fp
 8017e72:	9116      	str	r1, [sp, #88]	; 0x58
 8017e74:	019b      	lsls	r3, r3, #6
 8017e76:	46a1      	mov	r9, r4
 8017e78:	940a      	str	r4, [sp, #40]	; 0x28
 8017e7a:	9319      	str	r3, [sp, #100]	; 0x64
 8017e7c:	f022 0301 	bic.w	r3, r2, #1
 8017e80:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8017e84:	9303      	str	r3, [sp, #12]
 8017e86:	1c43      	adds	r3, r0, #1
 8017e88:	009b      	lsls	r3, r3, #2
 8017e8a:	9318      	str	r3, [sp, #96]	; 0x60
 8017e8c:	00cb      	lsls	r3, r1, #3
 8017e8e:	3310      	adds	r3, #16
 8017e90:	9317      	str	r3, [sp, #92]	; 0x5c
 8017e92:	f002 0301 	and.w	r3, r2, #1
 8017e96:	9308      	str	r3, [sp, #32]
 8017e98:	eb0b 1340 	add.w	r3, fp, r0, lsl #5
 8017e9c:	9305      	str	r3, [sp, #20]
 8017e9e:	4653      	mov	r3, sl
 8017ea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ea2:	6992      	ldr	r2, [r2, #24]
 8017ea4:	6897      	ldr	r7, [r2, #8]
 8017ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017ea8:	2a00      	cmp	r2, #0
 8017eaa:	f000 8270 	beq.w	801838e <forward_dense+0x612>
 8017eae:	6992      	ldr	r2, [r2, #24]
 8017eb0:	6895      	ldr	r5, [r2, #8]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	f000 826f 	beq.w	8018396 <forward_dense+0x61a>
 8017eb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017eba:	2a04      	cmp	r2, #4
 8017ebc:	f000 837a 	beq.w	80185b4 <forward_dense+0x838>
 8017ec0:	9a01      	ldr	r2, [sp, #4]
 8017ec2:	9904      	ldr	r1, [sp, #16]
 8017ec4:	428a      	cmp	r2, r1
 8017ec6:	d93f      	bls.n	8017f48 <forward_dense+0x1cc>
 8017ec8:	468e      	mov	lr, r1
 8017eca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017ecc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017ece:	3201      	adds	r2, #1
 8017ed0:	eb01 0a0b 	add.w	sl, r1, fp
 8017ed4:	f10b 0104 	add.w	r1, fp, #4
 8017ed8:	9110      	str	r1, [sp, #64]	; 0x40
 8017eda:	00d1      	lsls	r1, r2, #3
 8017edc:	eb0b 1242 	add.w	r2, fp, r2, lsl #5
 8017ee0:	f8cd a018 	str.w	sl, [sp, #24]
 8017ee4:	9111      	str	r1, [sp, #68]	; 0x44
 8017ee6:	9212      	str	r2, [sp, #72]	; 0x48
 8017ee8:	f1aa 0204 	sub.w	r2, sl, #4
 8017eec:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8017ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8017ef2:	2d00      	cmp	r5, #0
 8017ef4:	f000 8128 	beq.w	8018148 <forward_dense+0x3cc>
 8017ef8:	ecf5 4a01 	vldmia	r5!, {s9}
 8017efc:	f1ba 0f07 	cmp.w	sl, #7
 8017f00:	d83d      	bhi.n	8017f7e <forward_dense+0x202>
 8017f02:	45cb      	cmp	fp, r9
 8017f04:	d211      	bcs.n	8017f2a <forward_dense+0x1ae>
 8017f06:	eddf 7a93 	vldr	s15, [pc, #588]	; 8018154 <forward_dense+0x3d8>
 8017f0a:	4659      	mov	r1, fp
 8017f0c:	4638      	mov	r0, r7
 8017f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f12:	ecf1 6a01 	vldmia	r1!, {s13}
 8017f16:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8017f1a:	4549      	cmp	r1, r9
 8017f1c:	ed92 6a00 	vldr	s12, [r2]
 8017f20:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017f24:	d3f3      	bcc.n	8017f0e <forward_dense+0x192>
 8017f26:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8017f2a:	9a02      	ldr	r2, [sp, #8]
 8017f2c:	ecee 4a01 	vstmia	lr!, {s9}
 8017f30:	4417      	add	r7, r2
 8017f32:	9a01      	ldr	r2, [sp, #4]
 8017f34:	4596      	cmp	lr, r2
 8017f36:	d3dc      	bcc.n	8017ef2 <forward_dense+0x176>
 8017f38:	9904      	ldr	r1, [sp, #16]
 8017f3a:	1a52      	subs	r2, r2, r1
 8017f3c:	3a01      	subs	r2, #1
 8017f3e:	f022 0203 	bic.w	r2, r2, #3
 8017f42:	3204      	adds	r2, #4
 8017f44:	188a      	adds	r2, r1, r2
 8017f46:	9204      	str	r2, [sp, #16]
 8017f48:	9a01      	ldr	r2, [sp, #4]
 8017f4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017f4c:	9804      	ldr	r0, [sp, #16]
 8017f4e:	440a      	add	r2, r1
 8017f50:	9905      	ldr	r1, [sp, #20]
 8017f52:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017f54:	9201      	str	r2, [sp, #4]
 8017f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017f58:	42a0      	cmp	r0, r4
 8017f5a:	4411      	add	r1, r2
 8017f5c:	4491      	add	r9, r2
 8017f5e:	9105      	str	r1, [sp, #20]
 8017f60:	9903      	ldr	r1, [sp, #12]
 8017f62:	4411      	add	r1, r2
 8017f64:	9103      	str	r1, [sp, #12]
 8017f66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017f68:	468b      	mov	fp, r1
 8017f6a:	f080 840a 	bcs.w	8018782 <forward_dense+0xa06>
 8017f6e:	4411      	add	r1, r2
 8017f70:	910a      	str	r1, [sp, #40]	; 0x28
 8017f72:	e795      	b.n	8017ea0 <forward_dense+0x124>
 8017f74:	6853      	ldr	r3, [r2, #4]
 8017f76:	deff      	udf	#255	; 0xff
 8017f78:	2300      	movs	r3, #0
 8017f7a:	685b      	ldr	r3, [r3, #4]
 8017f7c:	deff      	udf	#255	; 0xff
 8017f7e:	f007 0203 	and.w	r2, r7, #3
 8017f82:	2a02      	cmp	r2, #2
 8017f84:	f000 81e7 	beq.w	8018356 <forward_dense+0x5da>
 8017f88:	2a03      	cmp	r2, #3
 8017f8a:	f000 80e5 	beq.w	8018158 <forward_dense+0x3dc>
 8017f8e:	2a01      	cmp	r2, #1
 8017f90:	f000 81f0 	beq.w	8018374 <forward_dense+0x5f8>
 8017f94:	9a06      	ldr	r2, [sp, #24]
 8017f96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8018154 <forward_dense+0x3d8>
 8017f9a:	4593      	cmp	fp, r2
 8017f9c:	f200 83f6 	bhi.w	801878c <forward_dense+0xa10>
 8017fa0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017fa2:	f107 0208 	add.w	r2, r7, #8
 8017fa6:	f10b 0120 	add.w	r1, fp, #32
 8017faa:	19c4      	adds	r4, r0, r7
 8017fac:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8017fb0:	3208      	adds	r2, #8
 8017fb2:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8017fb6:	3120      	adds	r1, #32
 8017fb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017fbc:	ed51 2a10 	vldr	s5, [r1, #-64]	; 0xffffffc0
 8017fc0:	ed11 3a0e 	vldr	s6, [r1, #-56]	; 0xffffffc8
 8017fc4:	edd0 7a00 	vldr	s15, [r0]
 8017fc8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8017fcc:	ee67 7a82 	vmul.f32	s15, s15, s4
 8017fd0:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 8017fd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017fd8:	ed11 4a0c 	vldr	s8, [r1, #-48]	; 0xffffffd0
 8017fdc:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 8017fe0:	ed90 2a00 	vldr	s4, [r0]
 8017fe4:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8017fe8:	eee2 7a22 	vfma.f32	s15, s4, s5
 8017fec:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 8017ff0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017ff4:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 8017ff8:	edd0 2a00 	vldr	s5, [r0]
 8017ffc:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8018000:	eee2 7a83 	vfma.f32	s15, s5, s6
 8018004:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018008:	ed90 3a00 	vldr	s6, [r0]
 801800c:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8018010:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018014:	eee3 7a23 	vfma.f32	s15, s6, s7
 8018018:	edd0 3a00 	vldr	s7, [r0]
 801801c:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8018020:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018024:	eee3 7a84 	vfma.f32	s15, s7, s8
 8018028:	ed90 4a00 	vldr	s8, [r0]
 801802c:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8018030:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018034:	eee4 7a05 	vfma.f32	s15, s8, s10
 8018038:	ed90 5a00 	vldr	s10, [r0]
 801803c:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8018040:	4294      	cmp	r4, r2
 8018042:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018046:	eee5 7a25 	vfma.f32	s15, s10, s11
 801804a:	edd0 5a00 	vldr	s11, [r0]
 801804e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8018052:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8018056:	d1a9      	bne.n	8017fac <forward_dense+0x230>
 8018058:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801805a:	18b9      	adds	r1, r7, r2
 801805c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801805e:	454a      	cmp	r2, r9
 8018060:	d26f      	bcs.n	8018142 <forward_dense+0x3c6>
 8018062:	7808      	ldrb	r0, [r1, #0]
 8018064:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018068:	edd0 7a00 	vldr	s15, [r0]
 801806c:	4610      	mov	r0, r2
 801806e:	ecb0 6a01 	vldmia	r0!, {s12}
 8018072:	4581      	cmp	r9, r0
 8018074:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018078:	d963      	bls.n	8018142 <forward_dense+0x3c6>
 801807a:	7848      	ldrb	r0, [r1, #1]
 801807c:	ed92 6a01 	vldr	s12, [r2, #4]
 8018080:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018084:	edd0 7a00 	vldr	s15, [r0]
 8018088:	f102 0008 	add.w	r0, r2, #8
 801808c:	4581      	cmp	r9, r0
 801808e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018092:	d956      	bls.n	8018142 <forward_dense+0x3c6>
 8018094:	7888      	ldrb	r0, [r1, #2]
 8018096:	ed92 6a02 	vldr	s12, [r2, #8]
 801809a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801809e:	edd0 7a00 	vldr	s15, [r0]
 80180a2:	f102 000c 	add.w	r0, r2, #12
 80180a6:	4581      	cmp	r9, r0
 80180a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80180ac:	d949      	bls.n	8018142 <forward_dense+0x3c6>
 80180ae:	78c8      	ldrb	r0, [r1, #3]
 80180b0:	ed92 6a03 	vldr	s12, [r2, #12]
 80180b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80180b8:	edd0 7a00 	vldr	s15, [r0]
 80180bc:	f102 0010 	add.w	r0, r2, #16
 80180c0:	4581      	cmp	r9, r0
 80180c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80180c6:	d93c      	bls.n	8018142 <forward_dense+0x3c6>
 80180c8:	7908      	ldrb	r0, [r1, #4]
 80180ca:	ed92 6a04 	vldr	s12, [r2, #16]
 80180ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80180d2:	edd0 7a00 	vldr	s15, [r0]
 80180d6:	f102 0014 	add.w	r0, r2, #20
 80180da:	4581      	cmp	r9, r0
 80180dc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80180e0:	d92f      	bls.n	8018142 <forward_dense+0x3c6>
 80180e2:	7948      	ldrb	r0, [r1, #5]
 80180e4:	ed92 6a05 	vldr	s12, [r2, #20]
 80180e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80180ec:	edd0 7a00 	vldr	s15, [r0]
 80180f0:	f102 0018 	add.w	r0, r2, #24
 80180f4:	4581      	cmp	r9, r0
 80180f6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80180fa:	d922      	bls.n	8018142 <forward_dense+0x3c6>
 80180fc:	7988      	ldrb	r0, [r1, #6]
 80180fe:	ed92 6a06 	vldr	s12, [r2, #24]
 8018102:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018106:	edd0 7a00 	vldr	s15, [r0]
 801810a:	f102 001c 	add.w	r0, r2, #28
 801810e:	4581      	cmp	r9, r0
 8018110:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018114:	d915      	bls.n	8018142 <forward_dense+0x3c6>
 8018116:	79c8      	ldrb	r0, [r1, #7]
 8018118:	ed92 6a07 	vldr	s12, [r2, #28]
 801811c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018120:	edd0 7a00 	vldr	s15, [r0]
 8018124:	f102 0020 	add.w	r0, r2, #32
 8018128:	4581      	cmp	r9, r0
 801812a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801812e:	d908      	bls.n	8018142 <forward_dense+0x3c6>
 8018130:	edd2 7a08 	vldr	s15, [r2, #32]
 8018134:	7a0a      	ldrb	r2, [r1, #8]
 8018136:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801813a:	ed92 6a00 	vldr	s12, [r2]
 801813e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018142:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8018146:	e6f0      	b.n	8017f2a <forward_dense+0x1ae>
 8018148:	eddf 4a02 	vldr	s9, [pc, #8]	; 8018154 <forward_dense+0x3d8>
 801814c:	e6d6      	b.n	8017efc <forward_dense+0x180>
 801814e:	bf00      	nop
 8018150:	3ffffff8 	.word	0x3ffffff8
 8018154:	00000000 	.word	0x00000000
 8018158:	eef0 6a47 	vmov.f32	s13, s14
 801815c:	4659      	mov	r1, fp
 801815e:	463a      	mov	r2, r7
 8018160:	4694      	mov	ip, r2
 8018162:	460c      	mov	r4, r1
 8018164:	f81c 0b01 	ldrb.w	r0, [ip], #1
 8018168:	ecf4 7a01 	vldmia	r4!, {s15}
 801816c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018170:	ed90 6a00 	vldr	s12, [r0]
 8018174:	9806      	ldr	r0, [sp, #24]
 8018176:	eee6 6a27 	vfma.f32	s13, s12, s15
 801817a:	4284      	cmp	r4, r0
 801817c:	d866      	bhi.n	801824c <forward_dense+0x4d0>
 801817e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018180:	f102 0611 	add.w	r6, r2, #17
 8018184:	3209      	adds	r2, #9
 8018186:	eba0 0801 	sub.w	r8, r0, r1
 801818a:	3124      	adds	r1, #36	; 0x24
 801818c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8018190:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 8018194:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8018198:	3208      	adds	r2, #8
 801819a:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 801819e:	3120      	adds	r1, #32
 80181a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80181a4:	ed51 2a10 	vldr	s5, [r1, #-64]	; 0xffffffc0
 80181a8:	ed11 3a0e 	vldr	s6, [r1, #-56]	; 0xffffffc8
 80181ac:	edd0 7a00 	vldr	s15, [r0]
 80181b0:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 80181b4:	ee67 7a82 	vmul.f32	s15, s15, s4
 80181b8:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 80181bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80181c0:	ed11 4a0c 	vldr	s8, [r1, #-48]	; 0xffffffd0
 80181c4:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 80181c8:	ed90 2a00 	vldr	s4, [r0]
 80181cc:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 80181d0:	eee2 7a22 	vfma.f32	s15, s4, s5
 80181d4:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 80181d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80181dc:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 80181e0:	edd0 2a00 	vldr	s5, [r0]
 80181e4:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 80181e8:	eee2 7a83 	vfma.f32	s15, s5, s6
 80181ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80181f0:	ed90 3a00 	vldr	s6, [r0]
 80181f4:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 80181f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80181fc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8018200:	edd0 3a00 	vldr	s7, [r0]
 8018204:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8018208:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801820c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8018210:	ed90 4a00 	vldr	s8, [r0]
 8018214:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8018218:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801821c:	eee4 7a05 	vfma.f32	s15, s8, s10
 8018220:	ed90 5a00 	vldr	s10, [r0]
 8018224:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8018228:	4296      	cmp	r6, r2
 801822a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801822e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8018232:	edd0 5a00 	vldr	s11, [r0]
 8018236:	eee5 7a86 	vfma.f32	s15, s11, s12
 801823a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801823e:	d1a9      	bne.n	8018194 <forward_dense+0x418>
 8018240:	f108 0801 	add.w	r8, r8, #1
 8018244:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8018248:	eb04 1448 	add.w	r4, r4, r8, lsl #5
 801824c:	454c      	cmp	r4, r9
 801824e:	f4bf af78 	bcs.w	8018142 <forward_dense+0x3c6>
 8018252:	f89c 2000 	ldrb.w	r2, [ip]
 8018256:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801825a:	edd2 7a00 	vldr	s15, [r2]
 801825e:	4622      	mov	r2, r4
 8018260:	ecb2 6a01 	vldmia	r2!, {s12}
 8018264:	4591      	cmp	r9, r2
 8018266:	eee6 6a27 	vfma.f32	s13, s12, s15
 801826a:	f67f af6a 	bls.w	8018142 <forward_dense+0x3c6>
 801826e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8018272:	ed94 6a01 	vldr	s12, [r4, #4]
 8018276:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801827a:	edd2 7a00 	vldr	s15, [r2]
 801827e:	f104 0208 	add.w	r2, r4, #8
 8018282:	4591      	cmp	r9, r2
 8018284:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018288:	f67f af5b 	bls.w	8018142 <forward_dense+0x3c6>
 801828c:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8018290:	ed94 6a02 	vldr	s12, [r4, #8]
 8018294:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8018298:	edd2 7a00 	vldr	s15, [r2]
 801829c:	f104 020c 	add.w	r2, r4, #12
 80182a0:	4591      	cmp	r9, r2
 80182a2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80182a6:	f67f af4c 	bls.w	8018142 <forward_dense+0x3c6>
 80182aa:	f89c 2003 	ldrb.w	r2, [ip, #3]
 80182ae:	ed94 6a03 	vldr	s12, [r4, #12]
 80182b2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80182b6:	edd2 7a00 	vldr	s15, [r2]
 80182ba:	f104 0210 	add.w	r2, r4, #16
 80182be:	4591      	cmp	r9, r2
 80182c0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80182c4:	f67f af3d 	bls.w	8018142 <forward_dense+0x3c6>
 80182c8:	f89c 2004 	ldrb.w	r2, [ip, #4]
 80182cc:	ed94 6a04 	vldr	s12, [r4, #16]
 80182d0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80182d4:	edd2 7a00 	vldr	s15, [r2]
 80182d8:	f104 0214 	add.w	r2, r4, #20
 80182dc:	4591      	cmp	r9, r2
 80182de:	eee6 6a27 	vfma.f32	s13, s12, s15
 80182e2:	f67f af2e 	bls.w	8018142 <forward_dense+0x3c6>
 80182e6:	f89c 2005 	ldrb.w	r2, [ip, #5]
 80182ea:	ed94 6a05 	vldr	s12, [r4, #20]
 80182ee:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80182f2:	edd2 7a00 	vldr	s15, [r2]
 80182f6:	f104 0218 	add.w	r2, r4, #24
 80182fa:	4591      	cmp	r9, r2
 80182fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018300:	f67f af1f 	bls.w	8018142 <forward_dense+0x3c6>
 8018304:	f89c 2006 	ldrb.w	r2, [ip, #6]
 8018308:	ed94 6a06 	vldr	s12, [r4, #24]
 801830c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8018310:	edd2 7a00 	vldr	s15, [r2]
 8018314:	f104 021c 	add.w	r2, r4, #28
 8018318:	4591      	cmp	r9, r2
 801831a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801831e:	f67f af10 	bls.w	8018142 <forward_dense+0x3c6>
 8018322:	f89c 2007 	ldrb.w	r2, [ip, #7]
 8018326:	ed94 6a07 	vldr	s12, [r4, #28]
 801832a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801832e:	edd2 7a00 	vldr	s15, [r2]
 8018332:	f104 0220 	add.w	r2, r4, #32
 8018336:	4591      	cmp	r9, r2
 8018338:	eee6 6a27 	vfma.f32	s13, s12, s15
 801833c:	f67f af01 	bls.w	8018142 <forward_dense+0x3c6>
 8018340:	f89c 2008 	ldrb.w	r2, [ip, #8]
 8018344:	edd4 7a08 	vldr	s15, [r4, #32]
 8018348:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801834c:	ed92 6a00 	vldr	s12, [r2]
 8018350:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018354:	e6f5      	b.n	8018142 <forward_dense+0x3c6>
 8018356:	eef0 6a47 	vmov.f32	s13, s14
 801835a:	4659      	mov	r1, fp
 801835c:	463a      	mov	r2, r7
 801835e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8018362:	ecf1 7a01 	vldmia	r1!, {s15}
 8018366:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801836a:	ed90 6a00 	vldr	s12, [r0]
 801836e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018372:	e6f5      	b.n	8018160 <forward_dense+0x3e4>
 8018374:	463a      	mov	r2, r7
 8018376:	eddb 7a00 	vldr	s15, [fp]
 801837a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801837c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8018380:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018384:	edd0 6a00 	vldr	s13, [r0]
 8018388:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801838c:	e7e7      	b.n	801835e <forward_dense+0x5e2>
 801838e:	4615      	mov	r5, r2
 8018390:	2b00      	cmp	r3, #0
 8018392:	f47f ad91 	bne.w	8017eb8 <forward_dense+0x13c>
 8018396:	9a01      	ldr	r2, [sp, #4]
 8018398:	9904      	ldr	r1, [sp, #16]
 801839a:	428a      	cmp	r2, r1
 801839c:	f67f add4 	bls.w	8017f48 <forward_dense+0x1cc>
 80183a0:	4690      	mov	r8, r2
 80183a2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80183a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80183a6:	460c      	mov	r4, r1
 80183a8:	f000 0c0f 	and.w	ip, r0, #15
 80183ac:	f8dd e008 	ldr.w	lr, [sp, #8]
 80183b0:	eb0b 0602 	add.w	r6, fp, r2
 80183b4:	4692      	mov	sl, r2
 80183b6:	9306      	str	r3, [sp, #24]
 80183b8:	2d00      	cmp	r5, #0
 80183ba:	f000 81d7 	beq.w	801876c <forward_dense+0x9f0>
 80183be:	280f      	cmp	r0, #15
 80183c0:	ecb5 0a01 	vldmia	r5!, {s0}
 80183c4:	ed5f 6a9d 	vldr	s13, [pc, #-628]	; 8018154 <forward_dense+0x3d8>
 80183c8:	f240 81d7 	bls.w	801877a <forward_dense+0x9fe>
 80183cc:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 80183d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80183d4:	4601      	mov	r1, r0
 80183d6:	ed13 6a0f 	vldr	s12, [r3, #-60]	; 0xffffffc4
 80183da:	3910      	subs	r1, #16
 80183dc:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80183e0:	3340      	adds	r3, #64	; 0x40
 80183e2:	ed12 4a10 	vldr	s8, [r2, #-64]	; 0xffffffc0
 80183e6:	290f      	cmp	r1, #15
 80183e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80183ec:	ed53 4a20 	vldr	s9, [r3, #-128]	; 0xffffff80
 80183f0:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 80183f4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80183f8:	ed53 5a1e 	vldr	s11, [r3, #-120]	; 0xffffff88
 80183fc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8018400:	ed13 6a1d 	vldr	s12, [r3, #-116]	; 0xffffff8c
 8018404:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 8018408:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 801840c:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 8018410:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 8018414:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 8018418:	eee5 7a25 	vfma.f32	s15, s10, s11
 801841c:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8018420:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8018424:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8018428:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 801842c:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 8018430:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 8018434:	eeee 7a06 	vfma.f32	s15, s28, s12
 8018438:	ed52 8a17 	vldr	s17, [r2, #-92]	; 0xffffffa4
 801843c:	ed13 8a17 	vldr	s16, [r3, #-92]	; 0xffffffa4
 8018440:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 8018444:	ed13 1a16 	vldr	s2, [r3, #-88]	; 0xffffffa8
 8018448:	ed52 1a15 	vldr	s3, [r2, #-84]	; 0xffffffac
 801844c:	ed13 2a15 	vldr	s4, [r3, #-84]	; 0xffffffac
 8018450:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8018454:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 8018458:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 801845c:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8018460:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8018464:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8018468:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 801846c:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8018470:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 8018474:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 8018478:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801847c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8018480:	eee9 7a89 	vfma.f32	s15, s19, s18
 8018484:	eee8 7a88 	vfma.f32	s15, s17, s16
 8018488:	eee0 7a81 	vfma.f32	s15, s1, s2
 801848c:	eee1 7a82 	vfma.f32	s15, s3, s4
 8018490:	eee2 7a83 	vfma.f32	s15, s5, s6
 8018494:	eee3 7a84 	vfma.f32	s15, s7, s8
 8018498:	eee4 7a85 	vfma.f32	s15, s9, s10
 801849c:	eee5 7a86 	vfma.f32	s15, s11, s12
 80184a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80184a4:	d897      	bhi.n	80183d6 <forward_dense+0x65a>
 80184a6:	eb07 010a 	add.w	r1, r7, sl
 80184aa:	4663      	mov	r3, ip
 80184ac:	4632      	mov	r2, r6
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d075      	beq.n	801859e <forward_dense+0x822>
 80184b2:	ed92 6a00 	vldr	s12, [r2]
 80184b6:	2b01      	cmp	r3, #1
 80184b8:	edd1 7a00 	vldr	s15, [r1]
 80184bc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80184c0:	d06d      	beq.n	801859e <forward_dense+0x822>
 80184c2:	ed92 6a01 	vldr	s12, [r2, #4]
 80184c6:	2b02      	cmp	r3, #2
 80184c8:	edd1 7a01 	vldr	s15, [r1, #4]
 80184cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80184d0:	d065      	beq.n	801859e <forward_dense+0x822>
 80184d2:	ed92 6a02 	vldr	s12, [r2, #8]
 80184d6:	2b03      	cmp	r3, #3
 80184d8:	edd1 7a02 	vldr	s15, [r1, #8]
 80184dc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80184e0:	d05d      	beq.n	801859e <forward_dense+0x822>
 80184e2:	ed92 6a03 	vldr	s12, [r2, #12]
 80184e6:	2b04      	cmp	r3, #4
 80184e8:	edd1 7a03 	vldr	s15, [r1, #12]
 80184ec:	eee6 6a27 	vfma.f32	s13, s12, s15
 80184f0:	d055      	beq.n	801859e <forward_dense+0x822>
 80184f2:	ed92 6a04 	vldr	s12, [r2, #16]
 80184f6:	2b05      	cmp	r3, #5
 80184f8:	edd1 7a04 	vldr	s15, [r1, #16]
 80184fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018500:	d04d      	beq.n	801859e <forward_dense+0x822>
 8018502:	ed92 6a05 	vldr	s12, [r2, #20]
 8018506:	2b06      	cmp	r3, #6
 8018508:	edd1 7a05 	vldr	s15, [r1, #20]
 801850c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018510:	d045      	beq.n	801859e <forward_dense+0x822>
 8018512:	ed92 6a06 	vldr	s12, [r2, #24]
 8018516:	2b07      	cmp	r3, #7
 8018518:	edd1 7a06 	vldr	s15, [r1, #24]
 801851c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018520:	d03d      	beq.n	801859e <forward_dense+0x822>
 8018522:	ed92 6a07 	vldr	s12, [r2, #28]
 8018526:	2b08      	cmp	r3, #8
 8018528:	edd1 7a07 	vldr	s15, [r1, #28]
 801852c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018530:	d035      	beq.n	801859e <forward_dense+0x822>
 8018532:	ed92 6a08 	vldr	s12, [r2, #32]
 8018536:	2b09      	cmp	r3, #9
 8018538:	edd1 7a08 	vldr	s15, [r1, #32]
 801853c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018540:	d02d      	beq.n	801859e <forward_dense+0x822>
 8018542:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8018546:	2b0a      	cmp	r3, #10
 8018548:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 801854c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018550:	d025      	beq.n	801859e <forward_dense+0x822>
 8018552:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
 8018556:	2b0b      	cmp	r3, #11
 8018558:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 801855c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018560:	d01d      	beq.n	801859e <forward_dense+0x822>
 8018562:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 8018566:	2b0c      	cmp	r3, #12
 8018568:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 801856c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018570:	d015      	beq.n	801859e <forward_dense+0x822>
 8018572:	ed92 6a0c 	vldr	s12, [r2, #48]	; 0x30
 8018576:	3b0d      	subs	r3, #13
 8018578:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 801857c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018580:	d00d      	beq.n	801859e <forward_dense+0x822>
 8018582:	ed92 6a0d 	vldr	s12, [r2, #52]	; 0x34
 8018586:	2b01      	cmp	r3, #1
 8018588:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 801858c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018590:	d005      	beq.n	801859e <forward_dense+0x822>
 8018592:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8018596:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 801859a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801859e:	ee70 6a26 	vadd.f32	s13, s0, s13
 80185a2:	4477      	add	r7, lr
 80185a4:	ece4 6a01 	vstmia	r4!, {s13}
 80185a8:	4544      	cmp	r4, r8
 80185aa:	f4ff af05 	bcc.w	80183b8 <forward_dense+0x63c>
 80185ae:	9b06      	ldr	r3, [sp, #24]
 80185b0:	9a01      	ldr	r2, [sp, #4]
 80185b2:	e4c1      	b.n	8017f38 <forward_dense+0x1bc>
 80185b4:	9901      	ldr	r1, [sp, #4]
 80185b6:	9a04      	ldr	r2, [sp, #16]
 80185b8:	4291      	cmp	r1, r2
 80185ba:	f67f acc5 	bls.w	8017f48 <forward_dense+0x1cc>
 80185be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80185c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80185c4:	4691      	mov	r9, r2
 80185c6:	eb07 0c01 	add.w	ip, r7, r1
 80185ca:	9903      	ldr	r1, [sp, #12]
 80185cc:	3901      	subs	r1, #1
 80185ce:	9106      	str	r1, [sp, #24]
 80185d0:	2d00      	cmp	r5, #0
 80185d2:	f000 80c0 	beq.w	8018756 <forward_dense+0x9da>
 80185d6:	9a07      	ldr	r2, [sp, #28]
 80185d8:	ecb5 2a01 	vldmia	r5!, {s4}
 80185dc:	eddf 6a83 	vldr	s13, [pc, #524]	; 80187ec <forward_dense+0xa70>
 80185e0:	2a00      	cmp	r2, #0
 80185e2:	f000 80c0 	beq.w	8018766 <forward_dense+0x9ea>
 80185e6:	1d39      	adds	r1, r7, #4
 80185e8:	f10b 0220 	add.w	r2, fp, #32
 80185ec:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 80185f0:	3104      	adds	r1, #4
 80185f2:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 80185f6:	3220      	adds	r2, #32
 80185f8:	f006 0e0f 	and.w	lr, r6, #15
 80185fc:	0936      	lsrs	r6, r6, #4
 80185fe:	f811 4c07 	ldrb.w	r4, [r1, #-7]
 8018602:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8018606:	ed52 3a10 	vldr	s7, [r2, #-64]	; 0xffffffc0
 801860a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 801860e:	ed12 3a0e 	vldr	s6, [r2, #-56]	; 0xffffffc8
 8018612:	edde 7a00 	vldr	s15, [lr]
 8018616:	edd6 2a00 	vldr	s5, [r6]
 801861a:	0926      	lsrs	r6, r4, #4
 801861c:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8018620:	f004 040f 	and.w	r4, r4, #15
 8018624:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8018628:	f811 0c06 	ldrb.w	r0, [r1, #-6]
 801862c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018630:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8018634:	eee2 7aa3 	vfma.f32	s15, s5, s7
 8018638:	edd6 2a00 	vldr	s5, [r6]
 801863c:	edd4 3a00 	vldr	s7, [r4]
 8018640:	0904      	lsrs	r4, r0, #4
 8018642:	ed12 4a0c 	vldr	s8, [r2, #-48]	; 0xffffffd0
 8018646:	f000 000f 	and.w	r0, r0, #15
 801864a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801864e:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 8018652:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018656:	ed12 5a0a 	vldr	s10, [r2, #-40]	; 0xffffffd8
 801865a:	ed12 6a09 	vldr	s12, [r2, #-36]	; 0xffffffdc
 801865e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8018662:	eee3 7aa4 	vfma.f32	s15, s7, s9
 8018666:	edd4 3a00 	vldr	s7, [r4]
 801866a:	edd0 4a00 	vldr	s9, [r0]
 801866e:	f811 0c05 	ldrb.w	r0, [r1, #-5]
 8018672:	4561      	cmp	r1, ip
 8018674:	ea4f 1410 	mov.w	r4, r0, lsr #4
 8018678:	f000 000f 	and.w	r0, r0, #15
 801867c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8018680:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018684:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018688:	eee4 7aa5 	vfma.f32	s15, s9, s11
 801868c:	edd4 4a00 	vldr	s9, [r4]
 8018690:	edd0 5a00 	vldr	s11, [r0]
 8018694:	eee4 7a85 	vfma.f32	s15, s9, s10
 8018698:	eee5 7a86 	vfma.f32	s15, s11, s12
 801869c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80186a0:	d1a4      	bne.n	80185ec <forward_dense+0x870>
 80186a2:	f1ac 0804 	sub.w	r8, ip, #4
 80186a6:	f8dd e014 	ldr.w	lr, [sp, #20]
 80186aa:	9a03      	ldr	r2, [sp, #12]
 80186ac:	4596      	cmp	lr, r2
 80186ae:	d229      	bcs.n	8018704 <forward_dense+0x988>
 80186b0:	9a06      	ldr	r2, [sp, #24]
 80186b2:	f10e 0108 	add.w	r1, lr, #8
 80186b6:	f108 34ff 	add.w	r4, r8, #4294967295
 80186ba:	eba2 060e 	sub.w	r6, r2, lr
 80186be:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 80186c2:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 80186c6:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80186ca:	3108      	adds	r1, #8
 80186cc:	ed11 5a03 	vldr	s10, [r1, #-12]
 80186d0:	f002 000f 	and.w	r0, r2, #15
 80186d4:	0912      	lsrs	r2, r2, #4
 80186d6:	ed11 6a04 	vldr	s12, [r1, #-16]
 80186da:	42a6      	cmp	r6, r4
 80186dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80186e0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80186e4:	edd0 7a00 	vldr	s15, [r0]
 80186e8:	edd2 5a00 	vldr	s11, [r2]
 80186ec:	ee67 7a85 	vmul.f32	s15, s15, s10
 80186f0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80186f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80186f8:	d1e5      	bne.n	80186c6 <forward_dense+0x94a>
 80186fa:	f10a 0a01 	add.w	sl, sl, #1
 80186fe:	44d0      	add	r8, sl
 8018700:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8018704:	9a08      	ldr	r2, [sp, #32]
 8018706:	b1ca      	cbz	r2, 801873c <forward_dense+0x9c0>
 8018708:	f898 2000 	ldrb.w	r2, [r8]
 801870c:	edde 7a00 	vldr	s15, [lr]
 8018710:	0912      	lsrs	r2, r2, #4
 8018712:	9902      	ldr	r1, [sp, #8]
 8018714:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8018718:	440f      	add	r7, r1
 801871a:	448c      	add	ip, r1
 801871c:	ed92 6a00 	vldr	s12, [r2]
 8018720:	9a01      	ldr	r2, [sp, #4]
 8018722:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018726:	ee32 2a26 	vadd.f32	s4, s4, s13
 801872a:	eca9 2a01 	vstmia	r9!, {s4}
 801872e:	454a      	cmp	r2, r9
 8018730:	f63f af4e 	bhi.w	80185d0 <forward_dense+0x854>
 8018734:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018738:	f7ff bbfe 	b.w	8017f38 <forward_dense+0x1bc>
 801873c:	9a02      	ldr	r2, [sp, #8]
 801873e:	ee72 6a26 	vadd.f32	s13, s4, s13
 8018742:	4417      	add	r7, r2
 8018744:	4494      	add	ip, r2
 8018746:	9a01      	ldr	r2, [sp, #4]
 8018748:	ece9 6a01 	vstmia	r9!, {s13}
 801874c:	4591      	cmp	r9, r2
 801874e:	d2f1      	bcs.n	8018734 <forward_dense+0x9b8>
 8018750:	2d00      	cmp	r5, #0
 8018752:	f47f af40 	bne.w	80185d6 <forward_dense+0x85a>
 8018756:	9a07      	ldr	r2, [sp, #28]
 8018758:	eeb0 2a47 	vmov.f32	s4, s14
 801875c:	eddf 6a23 	vldr	s13, [pc, #140]	; 80187ec <forward_dense+0xa70>
 8018760:	2a00      	cmp	r2, #0
 8018762:	f47f af40 	bne.w	80185e6 <forward_dense+0x86a>
 8018766:	46de      	mov	lr, fp
 8018768:	46b8      	mov	r8, r7
 801876a:	e79e      	b.n	80186aa <forward_dense+0x92e>
 801876c:	280f      	cmp	r0, #15
 801876e:	eeb0 0a47 	vmov.f32	s0, s14
 8018772:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80187ec <forward_dense+0xa70>
 8018776:	f63f ae29 	bhi.w	80183cc <forward_dense+0x650>
 801877a:	4603      	mov	r3, r0
 801877c:	4639      	mov	r1, r7
 801877e:	465a      	mov	r2, fp
 8018780:	e695      	b.n	80184ae <forward_dense+0x732>
 8018782:	b01b      	add	sp, #108	; 0x6c
 8018784:	ecbd 8b0e 	vpop	{d8-d14}
 8018788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801878c:	465a      	mov	r2, fp
 801878e:	4639      	mov	r1, r7
 8018790:	e465      	b.n	801805e <forward_dense+0x2e2>
 8018792:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8018796:	f1b9 0f00 	cmp.w	r9, #0
 801879a:	f43f ab40 	beq.w	8017e1e <forward_dense+0xa2>
 801879e:	e9d9 0100 	ldrd	r0, r1, [r9]
 80187a2:	f000 fce3 	bl	801916c <ai_array_get_byte_size>
 80187a6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80187aa:	4602      	mov	r2, r0
 80187ac:	4651      	mov	r1, sl
 80187ae:	4618      	mov	r0, r3
 80187b0:	f000 ff74 	bl	801969c <memcpy>
 80187b4:	4682      	mov	sl, r0
 80187b6:	f7ff bb32 	b.w	8017e1e <forward_dense+0xa2>
 80187ba:	2b04      	cmp	r3, #4
 80187bc:	d00b      	beq.n	80187d6 <forward_dense+0xa5a>
 80187be:	f04f 0900 	mov.w	r9, #0
 80187c2:	f7ff bb27 	b.w	8017e14 <forward_dense+0x98>
 80187c6:	930c      	str	r3, [sp, #48]	; 0x30
 80187c8:	f7ff baff 	b.w	8017dca <forward_dense+0x4e>
 80187cc:	2300      	movs	r3, #0
 80187ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80187d0:	460b      	mov	r3, r1
 80187d2:	f7ff bafa 	b.w	8017dca <forward_dense+0x4e>
 80187d6:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 80187da:	f7ff bb20 	b.w	8017e1e <forward_dense+0xa2>
 80187de:	2300      	movs	r3, #0
 80187e0:	685b      	ldr	r3, [r3, #4]
 80187e2:	deff      	udf	#255	; 0xff
 80187e4:	2300      	movs	r3, #0
 80187e6:	685b      	ldr	r3, [r3, #4]
 80187e8:	deff      	udf	#255	; 0xff
 80187ea:	bf00      	nop
 80187ec:	00000000 	.word	0x00000000

080187f0 <pool_func_mp_array_f32>:
 80187f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187f4:	b093      	sub	sp, #76	; 0x4c
 80187f6:	468a      	mov	sl, r1
 80187f8:	461f      	mov	r7, r3
 80187fa:	4693      	mov	fp, r2
 80187fc:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 8018800:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018802:	9104      	str	r1, [sp, #16]
 8018804:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 8018808:	689b      	ldr	r3, [r3, #8]
 801880a:	9100      	str	r1, [sp, #0]
 801880c:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 8018810:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 8018814:	9105      	str	r1, [sp, #20]
 8018816:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 801881a:	9303      	str	r3, [sp, #12]
 801881c:	9106      	str	r1, [sp, #24]
 801881e:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 8018822:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 8018826:	ea52 0c03 	orrs.w	ip, r2, r3
 801882a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801882e:	9101      	str	r1, [sp, #4]
 8018830:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8018834:	9102      	str	r1, [sp, #8]
 8018836:	d173      	bne.n	8018920 <pool_func_mp_array_f32+0x130>
 8018838:	9904      	ldr	r1, [sp, #16]
 801883a:	9d01      	ldr	r5, [sp, #4]
 801883c:	eba1 000a 	sub.w	r0, r1, sl
 8018840:	9e05      	ldr	r6, [sp, #20]
 8018842:	1e69      	subs	r1, r5, #1
 8018844:	3801      	subs	r0, #1
 8018846:	fb11 0106 	smlabb	r1, r1, r6, r0
 801884a:	0408      	lsls	r0, r1, #16
 801884c:	d568      	bpl.n	8018920 <pool_func_mp_array_f32+0x130>
 801884e:	9900      	ldr	r1, [sp, #0]
 8018850:	9e02      	ldr	r6, [sp, #8]
 8018852:	eba1 000b 	sub.w	r0, r1, fp
 8018856:	9c06      	ldr	r4, [sp, #24]
 8018858:	1e71      	subs	r1, r6, #1
 801885a:	3801      	subs	r0, #1
 801885c:	fb11 0104 	smlabb	r1, r1, r4, r0
 8018860:	0409      	lsls	r1, r1, #16
 8018862:	d55d      	bpl.n	8018920 <pool_func_mp_array_f32+0x130>
 8018864:	2e00      	cmp	r6, #0
 8018866:	d058      	beq.n	801891a <pool_func_mp_array_f32+0x12a>
 8018868:	2d00      	cmp	r5, #0
 801886a:	d056      	beq.n	801891a <pool_func_mp_array_f32+0x12a>
 801886c:	2f00      	cmp	r7, #0
 801886e:	d054      	beq.n	801891a <pool_func_mp_array_f32+0x12a>
 8018870:	2f01      	cmp	r7, #1
 8018872:	f040 815b 	bne.w	8018b2c <pool_func_mp_array_f32+0x33c>
 8018876:	46e3      	mov	fp, ip
 8018878:	4663      	mov	r3, ip
 801887a:	f8cd c01c 	str.w	ip, [sp, #28]
 801887e:	9a01      	ldr	r2, [sp, #4]
 8018880:	2700      	movs	r7, #0
 8018882:	f9bd 6000 	ldrsh.w	r6, [sp]
 8018886:	fb02 f303 	mul.w	r3, r2, r3
 801888a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801888e:	46be      	mov	lr, r7
 8018890:	46bc      	mov	ip, r7
 8018892:	9308      	str	r3, [sp, #32]
 8018894:	fa0f f38b 	sxth.w	r3, fp
 8018898:	9309      	str	r3, [sp, #36]	; 0x24
 801889a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801889c:	b23d      	sxth	r5, r7
 801889e:	9b08      	ldr	r3, [sp, #32]
 80188a0:	fa0f f088 	sxth.w	r0, r8
 80188a4:	42b4      	cmp	r4, r6
 80188a6:	eddf 7aa0 	vldr	s15, [pc, #640]	; 8018b28 <pool_func_mp_array_f32+0x338>
 80188aa:	449c      	add	ip, r3
 80188ac:	da12      	bge.n	80188d4 <pool_func_mp_array_f32+0xe4>
 80188ae:	4285      	cmp	r5, r0
 80188b0:	da0c      	bge.n	80188cc <pool_func_mp_array_f32+0xdc>
 80188b2:	fb04 520a 	mla	r2, r4, sl, r5
 80188b6:	462b      	mov	r3, r5
 80188b8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80188bc:	3301      	adds	r3, #1
 80188be:	ecb2 7a01 	vldmia	r2!, {s14}
 80188c2:	b219      	sxth	r1, r3
 80188c4:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80188c8:	4281      	cmp	r1, r0
 80188ca:	dbf7      	blt.n	80188bc <pool_func_mp_array_f32+0xcc>
 80188cc:	3401      	adds	r4, #1
 80188ce:	b224      	sxth	r4, r4
 80188d0:	42b4      	cmp	r4, r6
 80188d2:	dbec      	blt.n	80188ae <pool_func_mp_array_f32+0xbe>
 80188d4:	9b03      	ldr	r3, [sp, #12]
 80188d6:	f10e 0e01 	add.w	lr, lr, #1
 80188da:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80188de:	9b05      	ldr	r3, [sp, #20]
 80188e0:	fa0f fe8e 	sxth.w	lr, lr
 80188e4:	4498      	add	r8, r3
 80188e6:	441f      	add	r7, r3
 80188e8:	9b01      	ldr	r3, [sp, #4]
 80188ea:	edcc 7a00 	vstr	s15, [ip]
 80188ee:	fa1f f888 	uxth.w	r8, r8
 80188f2:	4573      	cmp	r3, lr
 80188f4:	b2bf      	uxth	r7, r7
 80188f6:	46f4      	mov	ip, lr
 80188f8:	dccf      	bgt.n	801889a <pool_func_mp_array_f32+0xaa>
 80188fa:	9a07      	ldr	r2, [sp, #28]
 80188fc:	9906      	ldr	r1, [sp, #24]
 80188fe:	9b00      	ldr	r3, [sp, #0]
 8018900:	3201      	adds	r2, #1
 8018902:	448b      	add	fp, r1
 8018904:	b212      	sxth	r2, r2
 8018906:	440b      	add	r3, r1
 8018908:	9902      	ldr	r1, [sp, #8]
 801890a:	fa1f fb8b 	uxth.w	fp, fp
 801890e:	b29b      	uxth	r3, r3
 8018910:	9207      	str	r2, [sp, #28]
 8018912:	4291      	cmp	r1, r2
 8018914:	9300      	str	r3, [sp, #0]
 8018916:	4613      	mov	r3, r2
 8018918:	dcb1      	bgt.n	801887e <pool_func_mp_array_f32+0x8e>
 801891a:	b013      	add	sp, #76	; 0x4c
 801891c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018920:	9902      	ldr	r1, [sp, #8]
 8018922:	2900      	cmp	r1, #0
 8018924:	d0f9      	beq.n	801891a <pool_func_mp_array_f32+0x12a>
 8018926:	9901      	ldr	r1, [sp, #4]
 8018928:	2900      	cmp	r1, #0
 801892a:	d0f6      	beq.n	801891a <pool_func_mp_array_f32+0x12a>
 801892c:	2f00      	cmp	r7, #0
 801892e:	d0f4      	beq.n	801891a <pool_func_mp_array_f32+0x12a>
 8018930:	2f01      	cmp	r7, #1
 8018932:	9900      	ldr	r1, [sp, #0]
 8018934:	d16a      	bne.n	8018a0c <pool_func_mp_array_f32+0x21c>
 8018936:	1a8a      	subs	r2, r1, r2
 8018938:	9904      	ldr	r1, [sp, #16]
 801893a:	1ac9      	subs	r1, r1, r3
 801893c:	425b      	negs	r3, r3
 801893e:	b292      	uxth	r2, r2
 8018940:	b29b      	uxth	r3, r3
 8018942:	9207      	str	r2, [sp, #28]
 8018944:	b28a      	uxth	r2, r1
 8018946:	930c      	str	r3, [sp, #48]	; 0x30
 8018948:	2300      	movs	r3, #0
 801894a:	920b      	str	r2, [sp, #44]	; 0x2c
 801894c:	9308      	str	r3, [sp, #32]
 801894e:	9a01      	ldr	r2, [sp, #4]
 8018950:	f04f 0c00 	mov.w	ip, #0
 8018954:	fb02 f303 	mul.w	r3, r2, r3
 8018958:	9a07      	ldr	r2, [sp, #28]
 801895a:	46e6      	mov	lr, ip
 801895c:	9309      	str	r3, [sp, #36]	; 0x24
 801895e:	b217      	sxth	r7, r2
 8018960:	9b00      	ldr	r3, [sp, #0]
 8018962:	1ad3      	subs	r3, r2, r3
 8018964:	b21b      	sxth	r3, r3
 8018966:	930a      	str	r3, [sp, #40]	; 0x28
 8018968:	e9dd 830b 	ldrd	r8, r3, [sp, #44]	; 0x2c
 801896c:	9304      	str	r3, [sp, #16]
 801896e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018970:	fa0f f488 	sxth.w	r4, r8
 8018974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018976:	4287      	cmp	r7, r0
 8018978:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 801897c:	449e      	add	lr, r3
 801897e:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8018b28 <pool_func_mp_array_f32+0x338>
 8018982:	dd1e      	ble.n	80189c2 <pool_func_mp_array_f32+0x1d2>
 8018984:	42a6      	cmp	r6, r4
 8018986:	da18      	bge.n	80189ba <pool_func_mp_array_f32+0x1ca>
 8018988:	43c1      	mvns	r1, r0
 801898a:	4583      	cmp	fp, r0
 801898c:	fb00 f20a 	mul.w	r2, r0, sl
 8018990:	ea4f 71d1 	mov.w	r1, r1, lsr #31
 8018994:	dd11      	ble.n	80189ba <pool_func_mp_array_f32+0x1ca>
 8018996:	4432      	add	r2, r6
 8018998:	4633      	mov	r3, r6
 801899a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801899e:	041d      	lsls	r5, r3, #16
 80189a0:	d406      	bmi.n	80189b0 <pool_func_mp_array_f32+0x1c0>
 80189a2:	b129      	cbz	r1, 80189b0 <pool_func_mp_array_f32+0x1c0>
 80189a4:	459a      	cmp	sl, r3
 80189a6:	dd03      	ble.n	80189b0 <pool_func_mp_array_f32+0x1c0>
 80189a8:	ed92 7a00 	vldr	s14, [r2]
 80189ac:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80189b0:	3301      	adds	r3, #1
 80189b2:	3204      	adds	r2, #4
 80189b4:	b21d      	sxth	r5, r3
 80189b6:	42a5      	cmp	r5, r4
 80189b8:	dbf1      	blt.n	801899e <pool_func_mp_array_f32+0x1ae>
 80189ba:	3001      	adds	r0, #1
 80189bc:	b200      	sxth	r0, r0
 80189be:	42b8      	cmp	r0, r7
 80189c0:	dbe0      	blt.n	8018984 <pool_func_mp_array_f32+0x194>
 80189c2:	9b03      	ldr	r3, [sp, #12]
 80189c4:	f10c 0c01 	add.w	ip, ip, #1
 80189c8:	9a05      	ldr	r2, [sp, #20]
 80189ca:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 80189ce:	9b04      	ldr	r3, [sp, #16]
 80189d0:	fa0f fc8c 	sxth.w	ip, ip
 80189d4:	4490      	add	r8, r2
 80189d6:	4413      	add	r3, r2
 80189d8:	edce 7a00 	vstr	s15, [lr]
 80189dc:	fa1f f888 	uxth.w	r8, r8
 80189e0:	46e6      	mov	lr, ip
 80189e2:	b29b      	uxth	r3, r3
 80189e4:	9304      	str	r3, [sp, #16]
 80189e6:	9b01      	ldr	r3, [sp, #4]
 80189e8:	4563      	cmp	r3, ip
 80189ea:	dcc0      	bgt.n	801896e <pool_func_mp_array_f32+0x17e>
 80189ec:	9a08      	ldr	r2, [sp, #32]
 80189ee:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80189f2:	3201      	adds	r2, #1
 80189f4:	440b      	add	r3, r1
 80189f6:	9902      	ldr	r1, [sp, #8]
 80189f8:	b212      	sxth	r2, r2
 80189fa:	b29b      	uxth	r3, r3
 80189fc:	4291      	cmp	r1, r2
 80189fe:	9208      	str	r2, [sp, #32]
 8018a00:	9307      	str	r3, [sp, #28]
 8018a02:	4613      	mov	r3, r2
 8018a04:	dca3      	bgt.n	801894e <pool_func_mp_array_f32+0x15e>
 8018a06:	b013      	add	sp, #76	; 0x4c
 8018a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a0c:	1a88      	subs	r0, r1, r2
 8018a0e:	9904      	ldr	r1, [sp, #16]
 8018a10:	4252      	negs	r2, r2
 8018a12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8018a16:	1ac9      	subs	r1, r1, r3
 8018a18:	425b      	negs	r3, r3
 8018a1a:	b292      	uxth	r2, r2
 8018a1c:	46b9      	mov	r9, r7
 8018a1e:	b29b      	uxth	r3, r3
 8018a20:	b280      	uxth	r0, r0
 8018a22:	9208      	str	r2, [sp, #32]
 8018a24:	9311      	str	r3, [sp, #68]	; 0x44
 8018a26:	b28a      	uxth	r2, r1
 8018a28:	2300      	movs	r3, #0
 8018a2a:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8018a2e:	9007      	str	r0, [sp, #28]
 8018a30:	9210      	str	r2, [sp, #64]	; 0x40
 8018a32:	930c      	str	r3, [sp, #48]	; 0x30
 8018a34:	9a01      	ldr	r2, [sp, #4]
 8018a36:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8018a3a:	fb02 f303 	mul.w	r3, r2, r3
 8018a3e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018a42:	920b      	str	r2, [sp, #44]	; 0x2c
 8018a44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8018a48:	2300      	movs	r3, #0
 8018a4a:	9200      	str	r2, [sp, #0]
 8018a4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018a4e:	930d      	str	r3, [sp, #52]	; 0x34
 8018a50:	9204      	str	r2, [sp, #16]
 8018a52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018a54:	f04f 0e00 	mov.w	lr, #0
 8018a58:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8018a5c:	4413      	add	r3, r2
 8018a5e:	f9bd 4000 	ldrsh.w	r4, [sp]
 8018a62:	46f4      	mov	ip, lr
 8018a64:	fb09 f303 	mul.w	r3, r9, r3
 8018a68:	930a      	str	r3, [sp, #40]	; 0x28
 8018a6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018a6c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8018b28 <pool_func_mp_array_f32+0x338>
 8018a70:	42b8      	cmp	r0, r7
 8018a72:	da26      	bge.n	8018ac2 <pool_func_mp_array_f32+0x2d2>
 8018a74:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8018a78:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8018a7c:	42a6      	cmp	r6, r4
 8018a7e:	da1a      	bge.n	8018ab6 <pool_func_mp_array_f32+0x2c6>
 8018a80:	43c5      	mvns	r5, r0
 8018a82:	4558      	cmp	r0, fp
 8018a84:	fb00 f30a 	mul.w	r3, r0, sl
 8018a88:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 8018a8c:	da13      	bge.n	8018ab6 <pool_func_mp_array_f32+0x2c6>
 8018a8e:	199a      	adds	r2, r3, r6
 8018a90:	4633      	mov	r3, r6
 8018a92:	fb09 c202 	mla	r2, r9, r2, ip
 8018a96:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 8018a9a:	0419      	lsls	r1, r3, #16
 8018a9c:	d406      	bmi.n	8018aac <pool_func_mp_array_f32+0x2bc>
 8018a9e:	b12d      	cbz	r5, 8018aac <pool_func_mp_array_f32+0x2bc>
 8018aa0:	459a      	cmp	sl, r3
 8018aa2:	dd03      	ble.n	8018aac <pool_func_mp_array_f32+0x2bc>
 8018aa4:	ed92 7a00 	vldr	s14, [r2]
 8018aa8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8018aac:	3301      	adds	r3, #1
 8018aae:	4442      	add	r2, r8
 8018ab0:	b219      	sxth	r1, r3
 8018ab2:	42a1      	cmp	r1, r4
 8018ab4:	dbf1      	blt.n	8018a9a <pool_func_mp_array_f32+0x2aa>
 8018ab6:	3001      	adds	r0, #1
 8018ab8:	b200      	sxth	r0, r0
 8018aba:	42b8      	cmp	r0, r7
 8018abc:	dbde      	blt.n	8018a7c <pool_func_mp_array_f32+0x28c>
 8018abe:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8018ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ac4:	f10e 0e01 	add.w	lr, lr, #1
 8018ac8:	9a03      	ldr	r2, [sp, #12]
 8018aca:	4463      	add	r3, ip
 8018acc:	fa0f fe8e 	sxth.w	lr, lr
 8018ad0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018ad4:	45ce      	cmp	lr, r9
 8018ad6:	46f4      	mov	ip, lr
 8018ad8:	edc3 7a00 	vstr	s15, [r3]
 8018adc:	dbc5      	blt.n	8018a6a <pool_func_mp_array_f32+0x27a>
 8018ade:	9a00      	ldr	r2, [sp, #0]
 8018ae0:	9805      	ldr	r0, [sp, #20]
 8018ae2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018ae4:	4402      	add	r2, r0
 8018ae6:	9b04      	ldr	r3, [sp, #16]
 8018ae8:	3101      	adds	r1, #1
 8018aea:	b292      	uxth	r2, r2
 8018aec:	4403      	add	r3, r0
 8018aee:	b209      	sxth	r1, r1
 8018af0:	9200      	str	r2, [sp, #0]
 8018af2:	b29b      	uxth	r3, r3
 8018af4:	9a01      	ldr	r2, [sp, #4]
 8018af6:	9304      	str	r3, [sp, #16]
 8018af8:	460b      	mov	r3, r1
 8018afa:	428a      	cmp	r2, r1
 8018afc:	910d      	str	r1, [sp, #52]	; 0x34
 8018afe:	dca8      	bgt.n	8018a52 <pool_func_mp_array_f32+0x262>
 8018b00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018b02:	9b08      	ldr	r3, [sp, #32]
 8018b04:	3101      	adds	r1, #1
 8018b06:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 8018b0a:	b209      	sxth	r1, r1
 8018b0c:	4402      	add	r2, r0
 8018b0e:	4403      	add	r3, r0
 8018b10:	910c      	str	r1, [sp, #48]	; 0x30
 8018b12:	b292      	uxth	r2, r2
 8018b14:	b29b      	uxth	r3, r3
 8018b16:	9207      	str	r2, [sp, #28]
 8018b18:	9a02      	ldr	r2, [sp, #8]
 8018b1a:	9308      	str	r3, [sp, #32]
 8018b1c:	460b      	mov	r3, r1
 8018b1e:	428a      	cmp	r2, r1
 8018b20:	dc88      	bgt.n	8018a34 <pool_func_mp_array_f32+0x244>
 8018b22:	b013      	add	sp, #76	; 0x4c
 8018b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b28:	cf000000 	.word	0xcf000000
 8018b2c:	4663      	mov	r3, ip
 8018b2e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8018b32:	f8cd c020 	str.w	ip, [sp, #32]
 8018b36:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8018b3a:	9a01      	ldr	r2, [sp, #4]
 8018b3c:	f04f 0800 	mov.w	r8, #0
 8018b40:	f9bd c000 	ldrsh.w	ip, [sp]
 8018b44:	fb02 f303 	mul.w	r3, r2, r3
 8018b48:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8018b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8018b4e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018b52:	930d      	str	r3, [sp, #52]	; 0x34
 8018b54:	9b04      	ldr	r3, [sp, #16]
 8018b56:	9307      	str	r3, [sp, #28]
 8018b58:	4643      	mov	r3, r8
 8018b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018b5c:	f04f 0e00 	mov.w	lr, #0
 8018b60:	fa0f f588 	sxth.w	r5, r8
 8018b64:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8018b68:	4413      	add	r3, r2
 8018b6a:	4676      	mov	r6, lr
 8018b6c:	fb07 f303 	mul.w	r3, r7, r3
 8018b70:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b72:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018b74:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 8018b28 <pool_func_mp_array_f32+0x338>
 8018b78:	4564      	cmp	r4, ip
 8018b7a:	da15      	bge.n	8018ba8 <pool_func_mp_array_f32+0x3b8>
 8018b7c:	4285      	cmp	r5, r0
 8018b7e:	da0f      	bge.n	8018ba0 <pool_func_mp_array_f32+0x3b0>
 8018b80:	fb0a 5304 	mla	r3, sl, r4, r5
 8018b84:	462a      	mov	r2, r5
 8018b86:	fb07 6303 	mla	r3, r7, r3, r6
 8018b8a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8018b8e:	3201      	adds	r2, #1
 8018b90:	ed93 7a00 	vldr	s14, [r3]
 8018b94:	445b      	add	r3, fp
 8018b96:	b211      	sxth	r1, r2
 8018b98:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8018b9c:	4281      	cmp	r1, r0
 8018b9e:	dbf6      	blt.n	8018b8e <pool_func_mp_array_f32+0x39e>
 8018ba0:	3401      	adds	r4, #1
 8018ba2:	b224      	sxth	r4, r4
 8018ba4:	4564      	cmp	r4, ip
 8018ba6:	dbe9      	blt.n	8018b7c <pool_func_mp_array_f32+0x38c>
 8018ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018baa:	f10e 0e01 	add.w	lr, lr, #1
 8018bae:	9a03      	ldr	r2, [sp, #12]
 8018bb0:	4433      	add	r3, r6
 8018bb2:	fa0f fe8e 	sxth.w	lr, lr
 8018bb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018bba:	45be      	cmp	lr, r7
 8018bbc:	4676      	mov	r6, lr
 8018bbe:	edc3 7a00 	vstr	s15, [r3]
 8018bc2:	dbd6      	blt.n	8018b72 <pool_func_mp_array_f32+0x382>
 8018bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018bc6:	9905      	ldr	r1, [sp, #20]
 8018bc8:	9b07      	ldr	r3, [sp, #28]
 8018bca:	3201      	adds	r2, #1
 8018bcc:	4488      	add	r8, r1
 8018bce:	b212      	sxth	r2, r2
 8018bd0:	440b      	add	r3, r1
 8018bd2:	9901      	ldr	r1, [sp, #4]
 8018bd4:	fa1f f888 	uxth.w	r8, r8
 8018bd8:	b29b      	uxth	r3, r3
 8018bda:	920a      	str	r2, [sp, #40]	; 0x28
 8018bdc:	4291      	cmp	r1, r2
 8018bde:	9307      	str	r3, [sp, #28]
 8018be0:	4613      	mov	r3, r2
 8018be2:	dcba      	bgt.n	8018b5a <pool_func_mp_array_f32+0x36a>
 8018be4:	9a00      	ldr	r2, [sp, #0]
 8018be6:	9806      	ldr	r0, [sp, #24]
 8018be8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018bea:	4402      	add	r2, r0
 8018bec:	9b08      	ldr	r3, [sp, #32]
 8018bee:	3101      	adds	r1, #1
 8018bf0:	b292      	uxth	r2, r2
 8018bf2:	4403      	add	r3, r0
 8018bf4:	b209      	sxth	r1, r1
 8018bf6:	9200      	str	r2, [sp, #0]
 8018bf8:	b29b      	uxth	r3, r3
 8018bfa:	9a02      	ldr	r2, [sp, #8]
 8018bfc:	9308      	str	r3, [sp, #32]
 8018bfe:	460b      	mov	r3, r1
 8018c00:	428a      	cmp	r2, r1
 8018c02:	9109      	str	r1, [sp, #36]	; 0x24
 8018c04:	dc99      	bgt.n	8018b3a <pool_func_mp_array_f32+0x34a>
 8018c06:	e688      	b.n	801891a <pool_func_mp_array_f32+0x12a>

08018c08 <forward_sigmoid>:
 8018c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c0a:	ed2d 8b02 	vpush	{d8}
 8018c0e:	6982      	ldr	r2, [r0, #24]
 8018c10:	8813      	ldrh	r3, [r2, #0]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d03b      	beq.n	8018c8e <forward_sigmoid+0x86>
 8018c16:	6852      	ldr	r2, [r2, #4]
 8018c18:	6854      	ldr	r4, [r2, #4]
 8018c1a:	b104      	cbz	r4, 8018c1e <forward_sigmoid+0x16>
 8018c1c:	6824      	ldr	r4, [r4, #0]
 8018c1e:	2b01      	cmp	r3, #1
 8018c20:	d034      	beq.n	8018c8c <forward_sigmoid+0x84>
 8018c22:	6915      	ldr	r5, [r2, #16]
 8018c24:	b105      	cbz	r5, 8018c28 <forward_sigmoid+0x20>
 8018c26:	682d      	ldr	r5, [r5, #0]
 8018c28:	68a3      	ldr	r3, [r4, #8]
 8018c2a:	0a1b      	lsrs	r3, r3, #8
 8018c2c:	d031      	beq.n	8018c92 <forward_sigmoid+0x8a>
 8018c2e:	68e0      	ldr	r0, [r4, #12]
 8018c30:	2201      	movs	r2, #1
 8018c32:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8018c36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018c3a:	4298      	cmp	r0, r3
 8018c3c:	fb01 f202 	mul.w	r2, r1, r2
 8018c40:	d1f9      	bne.n	8018c36 <forward_sigmoid+0x2e>
 8018c42:	69a7      	ldr	r7, [r4, #24]
 8018c44:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018c48:	69a9      	ldr	r1, [r5, #24]
 8018c4a:	4413      	add	r3, r2
 8018c4c:	68ba      	ldr	r2, [r7, #8]
 8018c4e:	688e      	ldr	r6, [r1, #8]
 8018c50:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8018c54:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8018c58:	42aa      	cmp	r2, r5
 8018c5a:	d814      	bhi.n	8018c86 <forward_sigmoid+0x7e>
 8018c5c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8018c60:	3504      	adds	r5, #4
 8018c62:	3604      	adds	r6, #4
 8018c64:	462c      	mov	r4, r5
 8018c66:	ed35 0a01 	vldmdb	r5!, {s0}
 8018c6a:	eeb1 0a40 	vneg.f32	s0, s0
 8018c6e:	3c08      	subs	r4, #8
 8018c70:	f000 fab4 	bl	80191dc <expf>
 8018c74:	ee30 0a08 	vadd.f32	s0, s0, s16
 8018c78:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8018c7c:	ed66 7a01 	vstmdb	r6!, {s15}
 8018c80:	68bb      	ldr	r3, [r7, #8]
 8018c82:	42a3      	cmp	r3, r4
 8018c84:	d9ee      	bls.n	8018c64 <forward_sigmoid+0x5c>
 8018c86:	ecbd 8b02 	vpop	{d8}
 8018c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c8c:	2300      	movs	r3, #0
 8018c8e:	685b      	ldr	r3, [r3, #4]
 8018c90:	deff      	udf	#255	; 0xff
 8018c92:	69ab      	ldr	r3, [r5, #24]
 8018c94:	69a7      	ldr	r7, [r4, #24]
 8018c96:	689e      	ldr	r6, [r3, #8]
 8018c98:	68bd      	ldr	r5, [r7, #8]
 8018c9a:	e7df      	b.n	8018c5c <forward_sigmoid+0x54>

08018c9c <nl_func_relu_array_f32>:
 8018c9c:	b410      	push	{r4}
 8018c9e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018ca2:	698c      	ldr	r4, [r1, #24]
 8018ca4:	6981      	ldr	r1, [r0, #24]
 8018ca6:	4413      	add	r3, r2
 8018ca8:	68a0      	ldr	r0, [r4, #8]
 8018caa:	6889      	ldr	r1, [r1, #8]
 8018cac:	009a      	lsls	r2, r3, #2
 8018cae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8018cb2:	4298      	cmp	r0, r3
 8018cb4:	d80f      	bhi.n	8018cd6 <nl_func_relu_array_f32+0x3a>
 8018cb6:	3204      	adds	r2, #4
 8018cb8:	3304      	adds	r3, #4
 8018cba:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8018cdc <nl_func_relu_array_f32+0x40>
 8018cbe:	4411      	add	r1, r2
 8018cc0:	461a      	mov	r2, r3
 8018cc2:	ed73 7a01 	vldmdb	r3!, {s15}
 8018cc6:	3a08      	subs	r2, #8
 8018cc8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8018ccc:	ed61 7a01 	vstmdb	r1!, {s15}
 8018cd0:	68a0      	ldr	r0, [r4, #8]
 8018cd2:	4290      	cmp	r0, r2
 8018cd4:	d9f4      	bls.n	8018cc0 <nl_func_relu_array_f32+0x24>
 8018cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018cda:	4770      	bx	lr
 8018cdc:	00000000 	.word	0x00000000

08018ce0 <nl_func_relu_generic_array_f32>:
 8018ce0:	b430      	push	{r4, r5}
 8018ce2:	edd3 6a02 	vldr	s13, [r3, #8]
 8018ce6:	ed93 7a00 	vldr	s14, [r3]
 8018cea:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8018cee:	ed93 6a01 	vldr	s12, [r3, #4]
 8018cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cf6:	d430      	bmi.n	8018d5a <nl_func_relu_generic_array_f32+0x7a>
 8018cf8:	698c      	ldr	r4, [r1, #24]
 8018cfa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018cfe:	6981      	ldr	r1, [r0, #24]
 8018d00:	4413      	add	r3, r2
 8018d02:	68a0      	ldr	r0, [r4, #8]
 8018d04:	6889      	ldr	r1, [r1, #8]
 8018d06:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8018d0a:	009b      	lsls	r3, r3, #2
 8018d0c:	4290      	cmp	r0, r2
 8018d0e:	d822      	bhi.n	8018d56 <nl_func_relu_generic_array_f32+0x76>
 8018d10:	3304      	adds	r3, #4
 8018d12:	3204      	adds	r2, #4
 8018d14:	4419      	add	r1, r3
 8018d16:	e00e      	b.n	8018d36 <nl_func_relu_generic_array_f32+0x56>
 8018d18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018d1c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8018d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d24:	db01      	blt.n	8018d2a <nl_func_relu_generic_array_f32+0x4a>
 8018d26:	ee65 7a86 	vmul.f32	s15, s11, s12
 8018d2a:	3b08      	subs	r3, #8
 8018d2c:	ed61 7a01 	vstmdb	r1!, {s15}
 8018d30:	68a0      	ldr	r0, [r4, #8]
 8018d32:	4298      	cmp	r0, r3
 8018d34:	d80f      	bhi.n	8018d56 <nl_func_relu_generic_array_f32+0x76>
 8018d36:	4613      	mov	r3, r2
 8018d38:	ed72 7a01 	vldmdb	r2!, {s15}
 8018d3c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8018d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d44:	dae8      	bge.n	8018d18 <nl_func_relu_generic_array_f32+0x38>
 8018d46:	eef0 7a66 	vmov.f32	s15, s13
 8018d4a:	3b08      	subs	r3, #8
 8018d4c:	ed61 7a01 	vstmdb	r1!, {s15}
 8018d50:	68a0      	ldr	r0, [r4, #8]
 8018d52:	4298      	cmp	r0, r3
 8018d54:	d9ef      	bls.n	8018d36 <nl_func_relu_generic_array_f32+0x56>
 8018d56:	bc30      	pop	{r4, r5}
 8018d58:	4770      	bx	lr
 8018d5a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8018d5e:	698d      	ldr	r5, [r1, #24]
 8018d60:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8018d64:	6983      	ldr	r3, [r0, #24]
 8018d66:	68a8      	ldr	r0, [r5, #8]
 8018d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d6c:	4411      	add	r1, r2
 8018d6e:	689a      	ldr	r2, [r3, #8]
 8018d70:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8018d74:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8018d78:	d019      	beq.n	8018dae <nl_func_relu_generic_array_f32+0xce>
 8018d7a:	4298      	cmp	r0, r3
 8018d7c:	d8eb      	bhi.n	8018d56 <nl_func_relu_generic_array_f32+0x76>
 8018d7e:	3104      	adds	r1, #4
 8018d80:	3304      	adds	r3, #4
 8018d82:	440a      	add	r2, r1
 8018d84:	ed53 7a01 	vldr	s15, [r3, #-4]
 8018d88:	1f19      	subs	r1, r3, #4
 8018d8a:	f1a3 0408 	sub.w	r4, r3, #8
 8018d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018d92:	460b      	mov	r3, r1
 8018d94:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8018d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d9c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018da0:	d823      	bhi.n	8018dea <nl_func_relu_generic_array_f32+0x10a>
 8018da2:	ed62 6a01 	vstmdb	r2!, {s13}
 8018da6:	68a9      	ldr	r1, [r5, #8]
 8018da8:	42a1      	cmp	r1, r4
 8018daa:	d9eb      	bls.n	8018d84 <nl_func_relu_generic_array_f32+0xa4>
 8018dac:	e7d3      	b.n	8018d56 <nl_func_relu_generic_array_f32+0x76>
 8018dae:	4298      	cmp	r0, r3
 8018db0:	d8d1      	bhi.n	8018d56 <nl_func_relu_generic_array_f32+0x76>
 8018db2:	3104      	adds	r1, #4
 8018db4:	3304      	adds	r3, #4
 8018db6:	f04f 0c00 	mov.w	ip, #0
 8018dba:	440a      	add	r2, r1
 8018dbc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8018dc0:	1f19      	subs	r1, r3, #4
 8018dc2:	f1a3 0408 	sub.w	r4, r3, #8
 8018dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018dca:	460b      	mov	r3, r1
 8018dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dd0:	dc05      	bgt.n	8018dde <nl_func_relu_generic_array_f32+0xfe>
 8018dd2:	f842 cd04 	str.w	ip, [r2, #-4]!
 8018dd6:	68a9      	ldr	r1, [r5, #8]
 8018dd8:	42a1      	cmp	r1, r4
 8018dda:	d9ef      	bls.n	8018dbc <nl_func_relu_generic_array_f32+0xdc>
 8018ddc:	e7bb      	b.n	8018d56 <nl_func_relu_generic_array_f32+0x76>
 8018dde:	ed62 7a01 	vstmdb	r2!, {s15}
 8018de2:	68a9      	ldr	r1, [r5, #8]
 8018de4:	42a1      	cmp	r1, r4
 8018de6:	d9e9      	bls.n	8018dbc <nl_func_relu_generic_array_f32+0xdc>
 8018de8:	e7b5      	b.n	8018d56 <nl_func_relu_generic_array_f32+0x76>
 8018dea:	ed62 7a01 	vstmdb	r2!, {s15}
 8018dee:	68a9      	ldr	r1, [r5, #8]
 8018df0:	42a1      	cmp	r1, r4
 8018df2:	d9c7      	bls.n	8018d84 <nl_func_relu_generic_array_f32+0xa4>
 8018df4:	e7af      	b.n	8018d56 <nl_func_relu_generic_array_f32+0x76>
 8018df6:	bf00      	nop

08018df8 <forward_relu>:
 8018df8:	6982      	ldr	r2, [r0, #24]
 8018dfa:	8813      	ldrh	r3, [r2, #0]
 8018dfc:	b30b      	cbz	r3, 8018e42 <forward_relu+0x4a>
 8018dfe:	6852      	ldr	r2, [r2, #4]
 8018e00:	6851      	ldr	r1, [r2, #4]
 8018e02:	b101      	cbz	r1, 8018e06 <forward_relu+0xe>
 8018e04:	6809      	ldr	r1, [r1, #0]
 8018e06:	2b01      	cmp	r3, #1
 8018e08:	f000 808d 	beq.w	8018f26 <forward_relu+0x12e>
 8018e0c:	b470      	push	{r4, r5, r6}
 8018e0e:	6916      	ldr	r6, [r2, #16]
 8018e10:	b106      	cbz	r6, 8018e14 <forward_relu+0x1c>
 8018e12:	6836      	ldr	r6, [r6, #0]
 8018e14:	69c0      	ldr	r0, [r0, #28]
 8018e16:	b1b0      	cbz	r0, 8018e46 <forward_relu+0x4e>
 8018e18:	6842      	ldr	r2, [r0, #4]
 8018e1a:	688b      	ldr	r3, [r1, #8]
 8018e1c:	2a01      	cmp	r2, #1
 8018e1e:	d03d      	beq.n	8018e9c <forward_relu+0xa4>
 8018e20:	0a1b      	lsrs	r3, r3, #8
 8018e22:	d071      	beq.n	8018f08 <forward_relu+0x110>
 8018e24:	68cd      	ldr	r5, [r1, #12]
 8018e26:	2201      	movs	r2, #1
 8018e28:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018e2c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8018e30:	42ab      	cmp	r3, r5
 8018e32:	fb04 f202 	mul.w	r2, r4, r2
 8018e36:	d1f9      	bne.n	8018e2c <forward_relu+0x34>
 8018e38:	6883      	ldr	r3, [r0, #8]
 8018e3a:	4630      	mov	r0, r6
 8018e3c:	bc70      	pop	{r4, r5, r6}
 8018e3e:	f7ff bf4f 	b.w	8018ce0 <nl_func_relu_generic_array_f32>
 8018e42:	685b      	ldr	r3, [r3, #4]
 8018e44:	deff      	udf	#255	; 0xff
 8018e46:	688b      	ldr	r3, [r1, #8]
 8018e48:	0a1b      	lsrs	r3, r3, #8
 8018e4a:	d05f      	beq.n	8018f0c <forward_relu+0x114>
 8018e4c:	68cc      	ldr	r4, [r1, #12]
 8018e4e:	2201      	movs	r2, #1
 8018e50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018e54:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8018e58:	429c      	cmp	r4, r3
 8018e5a:	fb00 f202 	mul.w	r2, r0, r2
 8018e5e:	d1f9      	bne.n	8018e54 <forward_relu+0x5c>
 8018e60:	698c      	ldr	r4, [r1, #24]
 8018e62:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018e66:	69b1      	ldr	r1, [r6, #24]
 8018e68:	4413      	add	r3, r2
 8018e6a:	68a0      	ldr	r0, [r4, #8]
 8018e6c:	6889      	ldr	r1, [r1, #8]
 8018e6e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8018e72:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018e76:	4290      	cmp	r0, r2
 8018e78:	d80e      	bhi.n	8018e98 <forward_relu+0xa0>
 8018e7a:	3204      	adds	r2, #4
 8018e7c:	3104      	adds	r1, #4
 8018e7e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8018f2c <forward_relu+0x134>
 8018e82:	4613      	mov	r3, r2
 8018e84:	ed72 7a01 	vldmdb	r2!, {s15}
 8018e88:	3b08      	subs	r3, #8
 8018e8a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8018e8e:	ed61 7a01 	vstmdb	r1!, {s15}
 8018e92:	68a0      	ldr	r0, [r4, #8]
 8018e94:	4298      	cmp	r0, r3
 8018e96:	d9f4      	bls.n	8018e82 <forward_relu+0x8a>
 8018e98:	bc70      	pop	{r4, r5, r6}
 8018e9a:	4770      	bx	lr
 8018e9c:	0a1b      	lsrs	r3, r3, #8
 8018e9e:	d03a      	beq.n	8018f16 <forward_relu+0x11e>
 8018ea0:	68cd      	ldr	r5, [r1, #12]
 8018ea2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018ea6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8018eaa:	429d      	cmp	r5, r3
 8018eac:	fb04 f202 	mul.w	r2, r4, r2
 8018eb0:	d1f9      	bne.n	8018ea6 <forward_relu+0xae>
 8018eb2:	698c      	ldr	r4, [r1, #24]
 8018eb4:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8018eb8:	6883      	ldr	r3, [r0, #8]
 8018eba:	4411      	add	r1, r2
 8018ebc:	68a0      	ldr	r0, [r4, #8]
 8018ebe:	69b5      	ldr	r5, [r6, #24]
 8018ec0:	ed93 7a00 	vldr	s14, [r3]
 8018ec4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8018ec8:	68aa      	ldr	r2, [r5, #8]
 8018eca:	4298      	cmp	r0, r3
 8018ecc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8018ed0:	d8e2      	bhi.n	8018e98 <forward_relu+0xa0>
 8018ed2:	3304      	adds	r3, #4
 8018ed4:	3204      	adds	r2, #4
 8018ed6:	2500      	movs	r5, #0
 8018ed8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8018edc:	1f19      	subs	r1, r3, #4
 8018ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ee6:	d507      	bpl.n	8018ef8 <forward_relu+0x100>
 8018ee8:	3b08      	subs	r3, #8
 8018eea:	ed62 7a01 	vstmdb	r2!, {s15}
 8018eee:	68a0      	ldr	r0, [r4, #8]
 8018ef0:	4298      	cmp	r0, r3
 8018ef2:	d8d1      	bhi.n	8018e98 <forward_relu+0xa0>
 8018ef4:	460b      	mov	r3, r1
 8018ef6:	e7ef      	b.n	8018ed8 <forward_relu+0xe0>
 8018ef8:	3b08      	subs	r3, #8
 8018efa:	f842 5d04 	str.w	r5, [r2, #-4]!
 8018efe:	68a0      	ldr	r0, [r4, #8]
 8018f00:	4298      	cmp	r0, r3
 8018f02:	d8c9      	bhi.n	8018e98 <forward_relu+0xa0>
 8018f04:	460b      	mov	r3, r1
 8018f06:	e7e7      	b.n	8018ed8 <forward_relu+0xe0>
 8018f08:	2201      	movs	r2, #1
 8018f0a:	e795      	b.n	8018e38 <forward_relu+0x40>
 8018f0c:	698c      	ldr	r4, [r1, #24]
 8018f0e:	69b3      	ldr	r3, [r6, #24]
 8018f10:	68a2      	ldr	r2, [r4, #8]
 8018f12:	6899      	ldr	r1, [r3, #8]
 8018f14:	e7b1      	b.n	8018e7a <forward_relu+0x82>
 8018f16:	6883      	ldr	r3, [r0, #8]
 8018f18:	698c      	ldr	r4, [r1, #24]
 8018f1a:	69b2      	ldr	r2, [r6, #24]
 8018f1c:	ed93 7a00 	vldr	s14, [r3]
 8018f20:	6892      	ldr	r2, [r2, #8]
 8018f22:	68a3      	ldr	r3, [r4, #8]
 8018f24:	e7d5      	b.n	8018ed2 <forward_relu+0xda>
 8018f26:	2300      	movs	r3, #0
 8018f28:	685b      	ldr	r3, [r3, #4]
 8018f2a:	deff      	udf	#255	; 0xff
 8018f2c:	00000000 	.word	0x00000000

08018f30 <ai_check_custom_types>:
 8018f30:	b082      	sub	sp, #8
 8018f32:	4b12      	ldr	r3, [pc, #72]	; (8018f7c <ai_check_custom_types+0x4c>)
 8018f34:	9301      	str	r3, [sp, #4]
 8018f36:	b118      	cbz	r0, 8018f40 <ai_check_custom_types+0x10>
 8018f38:	7803      	ldrb	r3, [r0, #0]
 8018f3a:	2b03      	cmp	r3, #3
 8018f3c:	d002      	beq.n	8018f44 <ai_check_custom_types+0x14>
 8018f3e:	2000      	movs	r0, #0
 8018f40:	b002      	add	sp, #8
 8018f42:	4770      	bx	lr
 8018f44:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8018f48:	4293      	cmp	r3, r2
 8018f4a:	d004      	beq.n	8018f56 <ai_check_custom_types+0x26>
 8018f4c:	2001      	movs	r0, #1
 8018f4e:	f080 0001 	eor.w	r0, r0, #1
 8018f52:	b002      	add	sp, #8
 8018f54:	4770      	bx	lr
 8018f56:	7842      	ldrb	r2, [r0, #1]
 8018f58:	3001      	adds	r0, #1
 8018f5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018f5e:	429a      	cmp	r2, r3
 8018f60:	d1f4      	bne.n	8018f4c <ai_check_custom_types+0x1c>
 8018f62:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8018f66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018f6a:	429a      	cmp	r2, r3
 8018f6c:	d1ee      	bne.n	8018f4c <ai_check_custom_types+0x1c>
 8018f6e:	7842      	ldrb	r2, [r0, #1]
 8018f70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018f74:	429a      	cmp	r2, r3
 8018f76:	d1e9      	bne.n	8018f4c <ai_check_custom_types+0x1c>
 8018f78:	2000      	movs	r0, #0
 8018f7a:	e7e8      	b.n	8018f4e <ai_check_custom_types+0x1e>
 8018f7c:	84048403 	.word	0x84048403

08018f80 <ai_layers_init_all>:
 8018f80:	2100      	movs	r1, #0
 8018f82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8018f84:	b13b      	cbz	r3, 8018f96 <ai_layers_init_all+0x16>
 8018f86:	691a      	ldr	r2, [r3, #16]
 8018f88:	3101      	adds	r1, #1
 8018f8a:	60d8      	str	r0, [r3, #12]
 8018f8c:	429a      	cmp	r2, r3
 8018f8e:	4613      	mov	r3, r2
 8018f90:	d001      	beq.n	8018f96 <ai_layers_init_all+0x16>
 8018f92:	2a00      	cmp	r2, #0
 8018f94:	d1f6      	bne.n	8018f84 <ai_layers_init_all+0x4>
 8018f96:	4608      	mov	r0, r1
 8018f98:	4770      	bx	lr
 8018f9a:	bf00      	nop

08018f9c <ai_layers_post_init_all>:
 8018f9c:	b538      	push	{r3, r4, r5, lr}
 8018f9e:	2500      	movs	r5, #0
 8018fa0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8018fa2:	b16c      	cbz	r4, 8018fc0 <ai_layers_post_init_all+0x24>
 8018fa4:	6863      	ldr	r3, [r4, #4]
 8018fa6:	07db      	lsls	r3, r3, #31
 8018fa8:	d504      	bpl.n	8018fb4 <ai_layers_post_init_all+0x18>
 8018faa:	6a23      	ldr	r3, [r4, #32]
 8018fac:	4620      	mov	r0, r4
 8018fae:	b10b      	cbz	r3, 8018fb4 <ai_layers_post_init_all+0x18>
 8018fb0:	3501      	adds	r5, #1
 8018fb2:	4798      	blx	r3
 8018fb4:	6923      	ldr	r3, [r4, #16]
 8018fb6:	42a3      	cmp	r3, r4
 8018fb8:	461c      	mov	r4, r3
 8018fba:	d001      	beq.n	8018fc0 <ai_layers_post_init_all+0x24>
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d1f0      	bne.n	8018fa2 <ai_layers_post_init_all+0x6>
 8018fc0:	4628      	mov	r0, r5
 8018fc2:	bd38      	pop	{r3, r4, r5, pc}

08018fc4 <ai_layers_forward_all>:
 8018fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fc8:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8018fca:	4604      	mov	r4, r0
 8018fcc:	2f00      	cmp	r7, #0
 8018fce:	d02c      	beq.n	801902a <ai_layers_forward_all+0x66>
 8018fd0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8018fd2:	b1e1      	cbz	r1, 801900e <ai_layers_forward_all+0x4a>
 8018fd4:	2600      	movs	r6, #0
 8018fd6:	6381      	str	r1, [r0, #56]	; 0x38
 8018fd8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8018fda:	2001      	movs	r0, #1
 8018fdc:	47b8      	blx	r7
 8018fde:	46b0      	mov	r8, r6
 8018fe0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018fe2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8018fe4:	2002      	movs	r0, #2
 8018fe6:	47b8      	blx	r7
 8018fe8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8018fea:	4628      	mov	r0, r5
 8018fec:	696b      	ldr	r3, [r5, #20]
 8018fee:	4798      	blx	r3
 8018ff0:	692b      	ldr	r3, [r5, #16]
 8018ff2:	2003      	movs	r0, #3
 8018ff4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8018ff6:	429d      	cmp	r5, r3
 8018ff8:	4619      	mov	r1, r3
 8018ffa:	d00c      	beq.n	8019016 <ai_layers_forward_all+0x52>
 8018ffc:	63a3      	str	r3, [r4, #56]	; 0x38
 8018ffe:	3601      	adds	r6, #1
 8019000:	47b8      	blx	r7
 8019002:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019004:	2900      	cmp	r1, #0
 8019006:	d1ec      	bne.n	8018fe2 <ai_layers_forward_all+0x1e>
 8019008:	4630      	mov	r0, r6
 801900a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801900e:	460e      	mov	r6, r1
 8019010:	4630      	mov	r0, r6
 8019012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019016:	2100      	movs	r1, #0
 8019018:	2003      	movs	r0, #3
 801901a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 801901e:	3601      	adds	r6, #1
 8019020:	47b8      	blx	r7
 8019022:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019024:	2900      	cmp	r1, #0
 8019026:	d1dc      	bne.n	8018fe2 <ai_layers_forward_all+0x1e>
 8019028:	e7ee      	b.n	8019008 <ai_layers_forward_all+0x44>
 801902a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801902c:	b19d      	cbz	r5, 8019056 <ai_layers_forward_all+0x92>
 801902e:	463e      	mov	r6, r7
 8019030:	6385      	str	r5, [r0, #56]	; 0x38
 8019032:	e003      	b.n	801903c <ai_layers_forward_all+0x78>
 8019034:	3601      	adds	r6, #1
 8019036:	63a5      	str	r5, [r4, #56]	; 0x38
 8019038:	2d00      	cmp	r5, #0
 801903a:	d0e5      	beq.n	8019008 <ai_layers_forward_all+0x44>
 801903c:	696b      	ldr	r3, [r5, #20]
 801903e:	4628      	mov	r0, r5
 8019040:	4798      	blx	r3
 8019042:	462b      	mov	r3, r5
 8019044:	692d      	ldr	r5, [r5, #16]
 8019046:	429d      	cmp	r5, r3
 8019048:	d1f4      	bne.n	8019034 <ai_layers_forward_all+0x70>
 801904a:	2300      	movs	r3, #0
 801904c:	3601      	adds	r6, #1
 801904e:	63a3      	str	r3, [r4, #56]	; 0x38
 8019050:	4630      	mov	r0, r6
 8019052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019056:	462e      	mov	r6, r5
 8019058:	e7d6      	b.n	8019008 <ai_layers_forward_all+0x44>
 801905a:	bf00      	nop

0801905c <ai_version_get>:
 801905c:	0212      	lsls	r2, r2, #8
 801905e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8019062:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8019066:	4770      	bx	lr

08019068 <get_tensor_byte_size>:
 8019068:	b430      	push	{r4, r5}
 801906a:	6985      	ldr	r5, [r0, #24]
 801906c:	68c4      	ldr	r4, [r0, #12]
 801906e:	6941      	ldr	r1, [r0, #20]
 8019070:	4b06      	ldr	r3, [pc, #24]	; (801908c <get_tensor_byte_size+0x24>)
 8019072:	6828      	ldr	r0, [r5, #0]
 8019074:	4a06      	ldr	r2, [pc, #24]	; (8019090 <get_tensor_byte_size+0x28>)
 8019076:	4003      	ands	r3, r0
 8019078:	68c9      	ldr	r1, [r1, #12]
 801907a:	68e0      	ldr	r0, [r4, #12]
 801907c:	4293      	cmp	r3, r2
 801907e:	fb01 f000 	mul.w	r0, r1, r0
 8019082:	d101      	bne.n	8019088 <get_tensor_byte_size+0x20>
 8019084:	3007      	adds	r0, #7
 8019086:	08c0      	lsrs	r0, r0, #3
 8019088:	bc30      	pop	{r4, r5}
 801908a:	4770      	bx	lr
 801908c:	017fffff 	.word	0x017fffff
 8019090:	000400c0 	.word	0x000400c0

08019094 <ai_array_to_buffer_fmt>:
 8019094:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8019098:	2b02      	cmp	r3, #2
 801909a:	d050      	beq.n	801913e <ai_array_to_buffer_fmt+0xaa>
 801909c:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80190a0:	4b29      	ldr	r3, [pc, #164]	; (8019148 <ai_array_to_buffer_fmt+0xb4>)
 80190a2:	429a      	cmp	r2, r3
 80190a4:	d00b      	beq.n	80190be <ai_array_to_buffer_fmt+0x2a>
 80190a6:	dc1c      	bgt.n	80190e2 <ai_array_to_buffer_fmt+0x4e>
 80190a8:	4b28      	ldr	r3, [pc, #160]	; (801914c <ai_array_to_buffer_fmt+0xb8>)
 80190aa:	429a      	cmp	r2, r3
 80190ac:	d007      	beq.n	80190be <ai_array_to_buffer_fmt+0x2a>
 80190ae:	dd0b      	ble.n	80190c8 <ai_array_to_buffer_fmt+0x34>
 80190b0:	4b27      	ldr	r3, [pc, #156]	; (8019150 <ai_array_to_buffer_fmt+0xbc>)
 80190b2:	429a      	cmp	r2, r3
 80190b4:	d003      	beq.n	80190be <ai_array_to_buffer_fmt+0x2a>
 80190b6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80190ba:	429a      	cmp	r2, r3
 80190bc:	d131      	bne.n	8019122 <ai_array_to_buffer_fmt+0x8e>
 80190be:	4613      	mov	r3, r2
 80190c0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80190c4:	4318      	orrs	r0, r3
 80190c6:	4770      	bx	lr
 80190c8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80190cc:	429a      	cmp	r2, r3
 80190ce:	d0f6      	beq.n	80190be <ai_array_to_buffer_fmt+0x2a>
 80190d0:	dd2c      	ble.n	801912c <ai_array_to_buffer_fmt+0x98>
 80190d2:	4b20      	ldr	r3, [pc, #128]	; (8019154 <ai_array_to_buffer_fmt+0xc0>)
 80190d4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80190d8:	429a      	cmp	r2, r3
 80190da:	bf18      	it	ne
 80190dc:	2340      	movne	r3, #64	; 0x40
 80190de:	4318      	orrs	r0, r3
 80190e0:	4770      	bx	lr
 80190e2:	4b1d      	ldr	r3, [pc, #116]	; (8019158 <ai_array_to_buffer_fmt+0xc4>)
 80190e4:	429a      	cmp	r2, r3
 80190e6:	d0ea      	beq.n	80190be <ai_array_to_buffer_fmt+0x2a>
 80190e8:	dd0e      	ble.n	8019108 <ai_array_to_buffer_fmt+0x74>
 80190ea:	4b1c      	ldr	r3, [pc, #112]	; (801915c <ai_array_to_buffer_fmt+0xc8>)
 80190ec:	429a      	cmp	r2, r3
 80190ee:	d0e6      	beq.n	80190be <ai_array_to_buffer_fmt+0x2a>
 80190f0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80190f4:	429a      	cmp	r2, r3
 80190f6:	d0e2      	beq.n	80190be <ai_array_to_buffer_fmt+0x2a>
 80190f8:	4b19      	ldr	r3, [pc, #100]	; (8019160 <ai_array_to_buffer_fmt+0xcc>)
 80190fa:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80190fe:	429a      	cmp	r2, r3
 8019100:	bf18      	it	ne
 8019102:	2340      	movne	r3, #64	; 0x40
 8019104:	4318      	orrs	r0, r3
 8019106:	4770      	bx	lr
 8019108:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801910c:	429a      	cmp	r2, r3
 801910e:	d0d6      	beq.n	80190be <ai_array_to_buffer_fmt+0x2a>
 8019110:	3307      	adds	r3, #7
 8019112:	429a      	cmp	r2, r3
 8019114:	d0d3      	beq.n	80190be <ai_array_to_buffer_fmt+0x2a>
 8019116:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 801911a:	429a      	cmp	r2, r3
 801911c:	bf18      	it	ne
 801911e:	2340      	movne	r3, #64	; 0x40
 8019120:	e7ce      	b.n	80190c0 <ai_array_to_buffer_fmt+0x2c>
 8019122:	4b10      	ldr	r3, [pc, #64]	; (8019164 <ai_array_to_buffer_fmt+0xd0>)
 8019124:	429a      	cmp	r2, r3
 8019126:	bf18      	it	ne
 8019128:	2340      	movne	r3, #64	; 0x40
 801912a:	e7c9      	b.n	80190c0 <ai_array_to_buffer_fmt+0x2c>
 801912c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8019130:	429a      	cmp	r2, r3
 8019132:	d0c4      	beq.n	80190be <ai_array_to_buffer_fmt+0x2a>
 8019134:	3380      	adds	r3, #128	; 0x80
 8019136:	429a      	cmp	r2, r3
 8019138:	bf18      	it	ne
 801913a:	2340      	movne	r3, #64	; 0x40
 801913c:	e7c0      	b.n	80190c0 <ai_array_to_buffer_fmt+0x2c>
 801913e:	4b0a      	ldr	r3, [pc, #40]	; (8019168 <ai_array_to_buffer_fmt+0xd4>)
 8019140:	4003      	ands	r3, r0
 8019142:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8019146:	e7bb      	b.n	80190c0 <ai_array_to_buffer_fmt+0x2c>
 8019148:	00840040 	.word	0x00840040
 801914c:	00040840 	.word	0x00040840
 8019150:	00041040 	.word	0x00041040
 8019154:	00040447 	.word	0x00040447
 8019158:	00840840 	.word	0x00840840
 801915c:	00841040 	.word	0x00841040
 8019160:	0084084f 	.word	0x0084084f
 8019164:	0004084f 	.word	0x0004084f
 8019168:	00803fff 	.word	0x00803fff

0801916c <ai_array_get_byte_size>:
 801916c:	b319      	cbz	r1, 80191b6 <ai_array_get_byte_size+0x4a>
 801916e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8019172:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8019176:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 801917a:	11c0      	asrs	r0, r0, #7
 801917c:	fb03 f101 	mul.w	r1, r3, r1
 8019180:	2a04      	cmp	r2, #4
 8019182:	f101 0107 	add.w	r1, r1, #7
 8019186:	f021 0107 	bic.w	r1, r1, #7
 801918a:	fa21 f10c 	lsr.w	r1, r1, ip
 801918e:	d00b      	beq.n	80191a8 <ai_array_get_byte_size+0x3c>
 8019190:	2a08      	cmp	r2, #8
 8019192:	d002      	beq.n	801919a <ai_array_get_byte_size+0x2e>
 8019194:	3107      	adds	r1, #7
 8019196:	08c8      	lsrs	r0, r1, #3
 8019198:	4770      	bx	lr
 801919a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801919e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80191a2:	3107      	adds	r1, #7
 80191a4:	08c8      	lsrs	r0, r1, #3
 80191a6:	4770      	bx	lr
 80191a8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80191ac:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80191b0:	3107      	adds	r1, #7
 80191b2:	08c8      	lsrs	r0, r1, #3
 80191b4:	4770      	bx	lr
 80191b6:	4608      	mov	r0, r1
 80191b8:	4770      	bx	lr
 80191ba:	bf00      	nop

080191bc <ai_array_get_data_byte_size>:
 80191bc:	b161      	cbz	r1, 80191d8 <ai_array_get_data_byte_size+0x1c>
 80191be:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80191c2:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80191c6:	fb03 f101 	mul.w	r1, r3, r1
 80191ca:	1dc8      	adds	r0, r1, #7
 80191cc:	f020 0007 	bic.w	r0, r0, #7
 80191d0:	40d0      	lsrs	r0, r2
 80191d2:	3007      	adds	r0, #7
 80191d4:	08c0      	lsrs	r0, r0, #3
 80191d6:	4770      	bx	lr
 80191d8:	4608      	mov	r0, r1
 80191da:	4770      	bx	lr

080191dc <expf>:
 80191dc:	b508      	push	{r3, lr}
 80191de:	ed2d 8b02 	vpush	{d8}
 80191e2:	eef0 8a40 	vmov.f32	s17, s0
 80191e6:	f000 f82f 	bl	8019248 <__ieee754_expf>
 80191ea:	eeb0 8a40 	vmov.f32	s16, s0
 80191ee:	eeb0 0a68 	vmov.f32	s0, s17
 80191f2:	f000 f919 	bl	8019428 <finitef>
 80191f6:	b160      	cbz	r0, 8019212 <expf+0x36>
 80191f8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019238 <expf+0x5c>
 80191fc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019204:	dd0a      	ble.n	801921c <expf+0x40>
 8019206:	f000 f91d 	bl	8019444 <__errno>
 801920a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801923c <expf+0x60>
 801920e:	2322      	movs	r3, #34	; 0x22
 8019210:	6003      	str	r3, [r0, #0]
 8019212:	eeb0 0a48 	vmov.f32	s0, s16
 8019216:	ecbd 8b02 	vpop	{d8}
 801921a:	bd08      	pop	{r3, pc}
 801921c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019240 <expf+0x64>
 8019220:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019228:	d5f3      	bpl.n	8019212 <expf+0x36>
 801922a:	f000 f90b 	bl	8019444 <__errno>
 801922e:	2322      	movs	r3, #34	; 0x22
 8019230:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8019244 <expf+0x68>
 8019234:	6003      	str	r3, [r0, #0]
 8019236:	e7ec      	b.n	8019212 <expf+0x36>
 8019238:	42b17180 	.word	0x42b17180
 801923c:	7f800000 	.word	0x7f800000
 8019240:	c2cff1b5 	.word	0xc2cff1b5
 8019244:	00000000 	.word	0x00000000

08019248 <__ieee754_expf>:
 8019248:	ee10 2a10 	vmov	r2, s0
 801924c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019250:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019254:	d902      	bls.n	801925c <__ieee754_expf+0x14>
 8019256:	ee30 0a00 	vadd.f32	s0, s0, s0
 801925a:	4770      	bx	lr
 801925c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8019260:	d106      	bne.n	8019270 <__ieee754_expf+0x28>
 8019262:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801939c <__ieee754_expf+0x154>
 8019266:	2b00      	cmp	r3, #0
 8019268:	bf18      	it	ne
 801926a:	eeb0 0a67 	vmovne.f32	s0, s15
 801926e:	4770      	bx	lr
 8019270:	484b      	ldr	r0, [pc, #300]	; (80193a0 <__ieee754_expf+0x158>)
 8019272:	4282      	cmp	r2, r0
 8019274:	dd02      	ble.n	801927c <__ieee754_expf+0x34>
 8019276:	2000      	movs	r0, #0
 8019278:	f000 b8d0 	b.w	801941c <__math_oflowf>
 801927c:	2a00      	cmp	r2, #0
 801927e:	da05      	bge.n	801928c <__ieee754_expf+0x44>
 8019280:	4a48      	ldr	r2, [pc, #288]	; (80193a4 <__ieee754_expf+0x15c>)
 8019282:	4291      	cmp	r1, r2
 8019284:	d902      	bls.n	801928c <__ieee754_expf+0x44>
 8019286:	2000      	movs	r0, #0
 8019288:	f000 b8c2 	b.w	8019410 <__math_uflowf>
 801928c:	4a46      	ldr	r2, [pc, #280]	; (80193a8 <__ieee754_expf+0x160>)
 801928e:	4291      	cmp	r1, r2
 8019290:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8019294:	d952      	bls.n	801933c <__ieee754_expf+0xf4>
 8019296:	4a45      	ldr	r2, [pc, #276]	; (80193ac <__ieee754_expf+0x164>)
 8019298:	4291      	cmp	r1, r2
 801929a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801929e:	d834      	bhi.n	801930a <__ieee754_expf+0xc2>
 80192a0:	4943      	ldr	r1, [pc, #268]	; (80193b0 <__ieee754_expf+0x168>)
 80192a2:	4411      	add	r1, r2
 80192a4:	ed91 7a00 	vldr	s14, [r1]
 80192a8:	4942      	ldr	r1, [pc, #264]	; (80193b4 <__ieee754_expf+0x16c>)
 80192aa:	440a      	add	r2, r1
 80192ac:	edd2 7a00 	vldr	s15, [r2]
 80192b0:	ee30 7a47 	vsub.f32	s14, s0, s14
 80192b4:	f1c3 0201 	rsb	r2, r3, #1
 80192b8:	1ad2      	subs	r2, r2, r3
 80192ba:	ee37 0a67 	vsub.f32	s0, s14, s15
 80192be:	ee20 6a00 	vmul.f32	s12, s0, s0
 80192c2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80193b8 <__ieee754_expf+0x170>
 80192c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80193bc <__ieee754_expf+0x174>
 80192ca:	eee6 6a05 	vfma.f32	s13, s12, s10
 80192ce:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80193c0 <__ieee754_expf+0x178>
 80192d2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80192d6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80193c4 <__ieee754_expf+0x17c>
 80192da:	eee5 6a06 	vfma.f32	s13, s10, s12
 80192de:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80193c8 <__ieee754_expf+0x180>
 80192e2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80192e6:	eef0 6a40 	vmov.f32	s13, s0
 80192ea:	eee5 6a46 	vfms.f32	s13, s10, s12
 80192ee:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80192f2:	ee20 5a26 	vmul.f32	s10, s0, s13
 80192f6:	bb92      	cbnz	r2, 801935e <__ieee754_expf+0x116>
 80192f8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80192fc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019300:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019304:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8019308:	4770      	bx	lr
 801930a:	4b30      	ldr	r3, [pc, #192]	; (80193cc <__ieee754_expf+0x184>)
 801930c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80193d0 <__ieee754_expf+0x188>
 8019310:	eddf 6a30 	vldr	s13, [pc, #192]	; 80193d4 <__ieee754_expf+0x18c>
 8019314:	4413      	add	r3, r2
 8019316:	edd3 7a00 	vldr	s15, [r3]
 801931a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801931e:	eeb0 7a40 	vmov.f32	s14, s0
 8019322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019326:	ee17 2a90 	vmov	r2, s15
 801932a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801932e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019332:	eddf 6a29 	vldr	s13, [pc, #164]	; 80193d8 <__ieee754_expf+0x190>
 8019336:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801933a:	e7be      	b.n	80192ba <__ieee754_expf+0x72>
 801933c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8019340:	d20b      	bcs.n	801935a <__ieee754_expf+0x112>
 8019342:	eddf 6a26 	vldr	s13, [pc, #152]	; 80193dc <__ieee754_expf+0x194>
 8019346:	ee70 6a26 	vadd.f32	s13, s0, s13
 801934a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801934e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019352:	dd02      	ble.n	801935a <__ieee754_expf+0x112>
 8019354:	ee30 0a25 	vadd.f32	s0, s0, s11
 8019358:	4770      	bx	lr
 801935a:	2200      	movs	r2, #0
 801935c:	e7af      	b.n	80192be <__ieee754_expf+0x76>
 801935e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019362:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8019366:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801936a:	bfb8      	it	lt
 801936c:	3264      	addlt	r2, #100	; 0x64
 801936e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019372:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019376:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801937a:	ee17 3a90 	vmov	r3, s15
 801937e:	bfab      	itete	ge
 8019380:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8019384:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8019388:	ee00 3a10 	vmovge	s0, r3
 801938c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80193e0 <__ieee754_expf+0x198>
 8019390:	bfbc      	itt	lt
 8019392:	ee00 3a10 	vmovlt	s0, r3
 8019396:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801939a:	4770      	bx	lr
 801939c:	00000000 	.word	0x00000000
 80193a0:	42b17217 	.word	0x42b17217
 80193a4:	42cff1b5 	.word	0x42cff1b5
 80193a8:	3eb17218 	.word	0x3eb17218
 80193ac:	3f851591 	.word	0x3f851591
 80193b0:	080fb8e4 	.word	0x080fb8e4
 80193b4:	080fb8ec 	.word	0x080fb8ec
 80193b8:	3331bb4c 	.word	0x3331bb4c
 80193bc:	b5ddea0e 	.word	0xb5ddea0e
 80193c0:	388ab355 	.word	0x388ab355
 80193c4:	bb360b61 	.word	0xbb360b61
 80193c8:	3e2aaaab 	.word	0x3e2aaaab
 80193cc:	080fb8dc 	.word	0x080fb8dc
 80193d0:	3fb8aa3b 	.word	0x3fb8aa3b
 80193d4:	3f317180 	.word	0x3f317180
 80193d8:	3717f7d1 	.word	0x3717f7d1
 80193dc:	7149f2ca 	.word	0x7149f2ca
 80193e0:	0d800000 	.word	0x0d800000

080193e4 <with_errnof>:
 80193e4:	b513      	push	{r0, r1, r4, lr}
 80193e6:	4604      	mov	r4, r0
 80193e8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80193ec:	f000 f82a 	bl	8019444 <__errno>
 80193f0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80193f4:	6004      	str	r4, [r0, #0]
 80193f6:	b002      	add	sp, #8
 80193f8:	bd10      	pop	{r4, pc}

080193fa <xflowf>:
 80193fa:	b130      	cbz	r0, 801940a <xflowf+0x10>
 80193fc:	eef1 7a40 	vneg.f32	s15, s0
 8019400:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019404:	2022      	movs	r0, #34	; 0x22
 8019406:	f7ff bfed 	b.w	80193e4 <with_errnof>
 801940a:	eef0 7a40 	vmov.f32	s15, s0
 801940e:	e7f7      	b.n	8019400 <xflowf+0x6>

08019410 <__math_uflowf>:
 8019410:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019418 <__math_uflowf+0x8>
 8019414:	f7ff bff1 	b.w	80193fa <xflowf>
 8019418:	10000000 	.word	0x10000000

0801941c <__math_oflowf>:
 801941c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019424 <__math_oflowf+0x8>
 8019420:	f7ff bfeb 	b.w	80193fa <xflowf>
 8019424:	70000000 	.word	0x70000000

08019428 <finitef>:
 8019428:	b082      	sub	sp, #8
 801942a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801942e:	9801      	ldr	r0, [sp, #4]
 8019430:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019434:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019438:	bfac      	ite	ge
 801943a:	2000      	movge	r0, #0
 801943c:	2001      	movlt	r0, #1
 801943e:	b002      	add	sp, #8
 8019440:	4770      	bx	lr
	...

08019444 <__errno>:
 8019444:	4b01      	ldr	r3, [pc, #4]	; (801944c <__errno+0x8>)
 8019446:	6818      	ldr	r0, [r3, #0]
 8019448:	4770      	bx	lr
 801944a:	bf00      	nop
 801944c:	20000f64 	.word	0x20000f64

08019450 <std>:
 8019450:	2300      	movs	r3, #0
 8019452:	b510      	push	{r4, lr}
 8019454:	4604      	mov	r4, r0
 8019456:	e9c0 3300 	strd	r3, r3, [r0]
 801945a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801945e:	6083      	str	r3, [r0, #8]
 8019460:	8181      	strh	r1, [r0, #12]
 8019462:	6643      	str	r3, [r0, #100]	; 0x64
 8019464:	81c2      	strh	r2, [r0, #14]
 8019466:	6183      	str	r3, [r0, #24]
 8019468:	4619      	mov	r1, r3
 801946a:	2208      	movs	r2, #8
 801946c:	305c      	adds	r0, #92	; 0x5c
 801946e:	f000 f923 	bl	80196b8 <memset>
 8019472:	4b05      	ldr	r3, [pc, #20]	; (8019488 <std+0x38>)
 8019474:	6263      	str	r3, [r4, #36]	; 0x24
 8019476:	4b05      	ldr	r3, [pc, #20]	; (801948c <std+0x3c>)
 8019478:	62a3      	str	r3, [r4, #40]	; 0x28
 801947a:	4b05      	ldr	r3, [pc, #20]	; (8019490 <std+0x40>)
 801947c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801947e:	4b05      	ldr	r3, [pc, #20]	; (8019494 <std+0x44>)
 8019480:	6224      	str	r4, [r4, #32]
 8019482:	6323      	str	r3, [r4, #48]	; 0x30
 8019484:	bd10      	pop	{r4, pc}
 8019486:	bf00      	nop
 8019488:	0801a2d9 	.word	0x0801a2d9
 801948c:	0801a2fb 	.word	0x0801a2fb
 8019490:	0801a333 	.word	0x0801a333
 8019494:	0801a357 	.word	0x0801a357

08019498 <_cleanup_r>:
 8019498:	4901      	ldr	r1, [pc, #4]	; (80194a0 <_cleanup_r+0x8>)
 801949a:	f000 b8af 	b.w	80195fc <_fwalk_reent>
 801949e:	bf00      	nop
 80194a0:	0801b329 	.word	0x0801b329

080194a4 <__sfmoreglue>:
 80194a4:	b570      	push	{r4, r5, r6, lr}
 80194a6:	2268      	movs	r2, #104	; 0x68
 80194a8:	1e4d      	subs	r5, r1, #1
 80194aa:	4355      	muls	r5, r2
 80194ac:	460e      	mov	r6, r1
 80194ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80194b2:	f000 f975 	bl	80197a0 <_malloc_r>
 80194b6:	4604      	mov	r4, r0
 80194b8:	b140      	cbz	r0, 80194cc <__sfmoreglue+0x28>
 80194ba:	2100      	movs	r1, #0
 80194bc:	e9c0 1600 	strd	r1, r6, [r0]
 80194c0:	300c      	adds	r0, #12
 80194c2:	60a0      	str	r0, [r4, #8]
 80194c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80194c8:	f000 f8f6 	bl	80196b8 <memset>
 80194cc:	4620      	mov	r0, r4
 80194ce:	bd70      	pop	{r4, r5, r6, pc}

080194d0 <__sfp_lock_acquire>:
 80194d0:	4801      	ldr	r0, [pc, #4]	; (80194d8 <__sfp_lock_acquire+0x8>)
 80194d2:	f000 b8d8 	b.w	8019686 <__retarget_lock_acquire_recursive>
 80194d6:	bf00      	nop
 80194d8:	200234c5 	.word	0x200234c5

080194dc <__sfp_lock_release>:
 80194dc:	4801      	ldr	r0, [pc, #4]	; (80194e4 <__sfp_lock_release+0x8>)
 80194de:	f000 b8d3 	b.w	8019688 <__retarget_lock_release_recursive>
 80194e2:	bf00      	nop
 80194e4:	200234c5 	.word	0x200234c5

080194e8 <__sinit_lock_acquire>:
 80194e8:	4801      	ldr	r0, [pc, #4]	; (80194f0 <__sinit_lock_acquire+0x8>)
 80194ea:	f000 b8cc 	b.w	8019686 <__retarget_lock_acquire_recursive>
 80194ee:	bf00      	nop
 80194f0:	200234c6 	.word	0x200234c6

080194f4 <__sinit_lock_release>:
 80194f4:	4801      	ldr	r0, [pc, #4]	; (80194fc <__sinit_lock_release+0x8>)
 80194f6:	f000 b8c7 	b.w	8019688 <__retarget_lock_release_recursive>
 80194fa:	bf00      	nop
 80194fc:	200234c6 	.word	0x200234c6

08019500 <__sinit>:
 8019500:	b510      	push	{r4, lr}
 8019502:	4604      	mov	r4, r0
 8019504:	f7ff fff0 	bl	80194e8 <__sinit_lock_acquire>
 8019508:	69a3      	ldr	r3, [r4, #24]
 801950a:	b11b      	cbz	r3, 8019514 <__sinit+0x14>
 801950c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019510:	f7ff bff0 	b.w	80194f4 <__sinit_lock_release>
 8019514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019518:	6523      	str	r3, [r4, #80]	; 0x50
 801951a:	4b13      	ldr	r3, [pc, #76]	; (8019568 <__sinit+0x68>)
 801951c:	4a13      	ldr	r2, [pc, #76]	; (801956c <__sinit+0x6c>)
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	62a2      	str	r2, [r4, #40]	; 0x28
 8019522:	42a3      	cmp	r3, r4
 8019524:	bf04      	itt	eq
 8019526:	2301      	moveq	r3, #1
 8019528:	61a3      	streq	r3, [r4, #24]
 801952a:	4620      	mov	r0, r4
 801952c:	f000 f820 	bl	8019570 <__sfp>
 8019530:	6060      	str	r0, [r4, #4]
 8019532:	4620      	mov	r0, r4
 8019534:	f000 f81c 	bl	8019570 <__sfp>
 8019538:	60a0      	str	r0, [r4, #8]
 801953a:	4620      	mov	r0, r4
 801953c:	f000 f818 	bl	8019570 <__sfp>
 8019540:	2200      	movs	r2, #0
 8019542:	60e0      	str	r0, [r4, #12]
 8019544:	2104      	movs	r1, #4
 8019546:	6860      	ldr	r0, [r4, #4]
 8019548:	f7ff ff82 	bl	8019450 <std>
 801954c:	68a0      	ldr	r0, [r4, #8]
 801954e:	2201      	movs	r2, #1
 8019550:	2109      	movs	r1, #9
 8019552:	f7ff ff7d 	bl	8019450 <std>
 8019556:	68e0      	ldr	r0, [r4, #12]
 8019558:	2202      	movs	r2, #2
 801955a:	2112      	movs	r1, #18
 801955c:	f7ff ff78 	bl	8019450 <std>
 8019560:	2301      	movs	r3, #1
 8019562:	61a3      	str	r3, [r4, #24]
 8019564:	e7d2      	b.n	801950c <__sinit+0xc>
 8019566:	bf00      	nop
 8019568:	080fb954 	.word	0x080fb954
 801956c:	08019499 	.word	0x08019499

08019570 <__sfp>:
 8019570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019572:	4607      	mov	r7, r0
 8019574:	f7ff ffac 	bl	80194d0 <__sfp_lock_acquire>
 8019578:	4b1e      	ldr	r3, [pc, #120]	; (80195f4 <__sfp+0x84>)
 801957a:	681e      	ldr	r6, [r3, #0]
 801957c:	69b3      	ldr	r3, [r6, #24]
 801957e:	b913      	cbnz	r3, 8019586 <__sfp+0x16>
 8019580:	4630      	mov	r0, r6
 8019582:	f7ff ffbd 	bl	8019500 <__sinit>
 8019586:	3648      	adds	r6, #72	; 0x48
 8019588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801958c:	3b01      	subs	r3, #1
 801958e:	d503      	bpl.n	8019598 <__sfp+0x28>
 8019590:	6833      	ldr	r3, [r6, #0]
 8019592:	b30b      	cbz	r3, 80195d8 <__sfp+0x68>
 8019594:	6836      	ldr	r6, [r6, #0]
 8019596:	e7f7      	b.n	8019588 <__sfp+0x18>
 8019598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801959c:	b9d5      	cbnz	r5, 80195d4 <__sfp+0x64>
 801959e:	4b16      	ldr	r3, [pc, #88]	; (80195f8 <__sfp+0x88>)
 80195a0:	60e3      	str	r3, [r4, #12]
 80195a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80195a6:	6665      	str	r5, [r4, #100]	; 0x64
 80195a8:	f000 f86c 	bl	8019684 <__retarget_lock_init_recursive>
 80195ac:	f7ff ff96 	bl	80194dc <__sfp_lock_release>
 80195b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80195b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80195b8:	6025      	str	r5, [r4, #0]
 80195ba:	61a5      	str	r5, [r4, #24]
 80195bc:	2208      	movs	r2, #8
 80195be:	4629      	mov	r1, r5
 80195c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80195c4:	f000 f878 	bl	80196b8 <memset>
 80195c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80195cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80195d0:	4620      	mov	r0, r4
 80195d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195d4:	3468      	adds	r4, #104	; 0x68
 80195d6:	e7d9      	b.n	801958c <__sfp+0x1c>
 80195d8:	2104      	movs	r1, #4
 80195da:	4638      	mov	r0, r7
 80195dc:	f7ff ff62 	bl	80194a4 <__sfmoreglue>
 80195e0:	4604      	mov	r4, r0
 80195e2:	6030      	str	r0, [r6, #0]
 80195e4:	2800      	cmp	r0, #0
 80195e6:	d1d5      	bne.n	8019594 <__sfp+0x24>
 80195e8:	f7ff ff78 	bl	80194dc <__sfp_lock_release>
 80195ec:	230c      	movs	r3, #12
 80195ee:	603b      	str	r3, [r7, #0]
 80195f0:	e7ee      	b.n	80195d0 <__sfp+0x60>
 80195f2:	bf00      	nop
 80195f4:	080fb954 	.word	0x080fb954
 80195f8:	ffff0001 	.word	0xffff0001

080195fc <_fwalk_reent>:
 80195fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019600:	4606      	mov	r6, r0
 8019602:	4688      	mov	r8, r1
 8019604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019608:	2700      	movs	r7, #0
 801960a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801960e:	f1b9 0901 	subs.w	r9, r9, #1
 8019612:	d505      	bpl.n	8019620 <_fwalk_reent+0x24>
 8019614:	6824      	ldr	r4, [r4, #0]
 8019616:	2c00      	cmp	r4, #0
 8019618:	d1f7      	bne.n	801960a <_fwalk_reent+0xe>
 801961a:	4638      	mov	r0, r7
 801961c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019620:	89ab      	ldrh	r3, [r5, #12]
 8019622:	2b01      	cmp	r3, #1
 8019624:	d907      	bls.n	8019636 <_fwalk_reent+0x3a>
 8019626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801962a:	3301      	adds	r3, #1
 801962c:	d003      	beq.n	8019636 <_fwalk_reent+0x3a>
 801962e:	4629      	mov	r1, r5
 8019630:	4630      	mov	r0, r6
 8019632:	47c0      	blx	r8
 8019634:	4307      	orrs	r7, r0
 8019636:	3568      	adds	r5, #104	; 0x68
 8019638:	e7e9      	b.n	801960e <_fwalk_reent+0x12>
	...

0801963c <__libc_init_array>:
 801963c:	b570      	push	{r4, r5, r6, lr}
 801963e:	4d0d      	ldr	r5, [pc, #52]	; (8019674 <__libc_init_array+0x38>)
 8019640:	4c0d      	ldr	r4, [pc, #52]	; (8019678 <__libc_init_array+0x3c>)
 8019642:	1b64      	subs	r4, r4, r5
 8019644:	10a4      	asrs	r4, r4, #2
 8019646:	2600      	movs	r6, #0
 8019648:	42a6      	cmp	r6, r4
 801964a:	d109      	bne.n	8019660 <__libc_init_array+0x24>
 801964c:	4d0b      	ldr	r5, [pc, #44]	; (801967c <__libc_init_array+0x40>)
 801964e:	4c0c      	ldr	r4, [pc, #48]	; (8019680 <__libc_init_array+0x44>)
 8019650:	f002 fed6 	bl	801c400 <_init>
 8019654:	1b64      	subs	r4, r4, r5
 8019656:	10a4      	asrs	r4, r4, #2
 8019658:	2600      	movs	r6, #0
 801965a:	42a6      	cmp	r6, r4
 801965c:	d105      	bne.n	801966a <__libc_init_array+0x2e>
 801965e:	bd70      	pop	{r4, r5, r6, pc}
 8019660:	f855 3b04 	ldr.w	r3, [r5], #4
 8019664:	4798      	blx	r3
 8019666:	3601      	adds	r6, #1
 8019668:	e7ee      	b.n	8019648 <__libc_init_array+0xc>
 801966a:	f855 3b04 	ldr.w	r3, [r5], #4
 801966e:	4798      	blx	r3
 8019670:	3601      	adds	r6, #1
 8019672:	e7f2      	b.n	801965a <__libc_init_array+0x1e>
 8019674:	080fbcd4 	.word	0x080fbcd4
 8019678:	080fbcd4 	.word	0x080fbcd4
 801967c:	080fbcd4 	.word	0x080fbcd4
 8019680:	080fbcd8 	.word	0x080fbcd8

08019684 <__retarget_lock_init_recursive>:
 8019684:	4770      	bx	lr

08019686 <__retarget_lock_acquire_recursive>:
 8019686:	4770      	bx	lr

08019688 <__retarget_lock_release_recursive>:
 8019688:	4770      	bx	lr
	...

0801968c <malloc>:
 801968c:	4b02      	ldr	r3, [pc, #8]	; (8019698 <malloc+0xc>)
 801968e:	4601      	mov	r1, r0
 8019690:	6818      	ldr	r0, [r3, #0]
 8019692:	f000 b885 	b.w	80197a0 <_malloc_r>
 8019696:	bf00      	nop
 8019698:	20000f64 	.word	0x20000f64

0801969c <memcpy>:
 801969c:	440a      	add	r2, r1
 801969e:	4291      	cmp	r1, r2
 80196a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80196a4:	d100      	bne.n	80196a8 <memcpy+0xc>
 80196a6:	4770      	bx	lr
 80196a8:	b510      	push	{r4, lr}
 80196aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80196ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80196b2:	4291      	cmp	r1, r2
 80196b4:	d1f9      	bne.n	80196aa <memcpy+0xe>
 80196b6:	bd10      	pop	{r4, pc}

080196b8 <memset>:
 80196b8:	4402      	add	r2, r0
 80196ba:	4603      	mov	r3, r0
 80196bc:	4293      	cmp	r3, r2
 80196be:	d100      	bne.n	80196c2 <memset+0xa>
 80196c0:	4770      	bx	lr
 80196c2:	f803 1b01 	strb.w	r1, [r3], #1
 80196c6:	e7f9      	b.n	80196bc <memset+0x4>

080196c8 <_free_r>:
 80196c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80196ca:	2900      	cmp	r1, #0
 80196cc:	d044      	beq.n	8019758 <_free_r+0x90>
 80196ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196d2:	9001      	str	r0, [sp, #4]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	f1a1 0404 	sub.w	r4, r1, #4
 80196da:	bfb8      	it	lt
 80196dc:	18e4      	addlt	r4, r4, r3
 80196de:	f001 fedb 	bl	801b498 <__malloc_lock>
 80196e2:	4a1e      	ldr	r2, [pc, #120]	; (801975c <_free_r+0x94>)
 80196e4:	9801      	ldr	r0, [sp, #4]
 80196e6:	6813      	ldr	r3, [r2, #0]
 80196e8:	b933      	cbnz	r3, 80196f8 <_free_r+0x30>
 80196ea:	6063      	str	r3, [r4, #4]
 80196ec:	6014      	str	r4, [r2, #0]
 80196ee:	b003      	add	sp, #12
 80196f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80196f4:	f001 bed6 	b.w	801b4a4 <__malloc_unlock>
 80196f8:	42a3      	cmp	r3, r4
 80196fa:	d908      	bls.n	801970e <_free_r+0x46>
 80196fc:	6825      	ldr	r5, [r4, #0]
 80196fe:	1961      	adds	r1, r4, r5
 8019700:	428b      	cmp	r3, r1
 8019702:	bf01      	itttt	eq
 8019704:	6819      	ldreq	r1, [r3, #0]
 8019706:	685b      	ldreq	r3, [r3, #4]
 8019708:	1949      	addeq	r1, r1, r5
 801970a:	6021      	streq	r1, [r4, #0]
 801970c:	e7ed      	b.n	80196ea <_free_r+0x22>
 801970e:	461a      	mov	r2, r3
 8019710:	685b      	ldr	r3, [r3, #4]
 8019712:	b10b      	cbz	r3, 8019718 <_free_r+0x50>
 8019714:	42a3      	cmp	r3, r4
 8019716:	d9fa      	bls.n	801970e <_free_r+0x46>
 8019718:	6811      	ldr	r1, [r2, #0]
 801971a:	1855      	adds	r5, r2, r1
 801971c:	42a5      	cmp	r5, r4
 801971e:	d10b      	bne.n	8019738 <_free_r+0x70>
 8019720:	6824      	ldr	r4, [r4, #0]
 8019722:	4421      	add	r1, r4
 8019724:	1854      	adds	r4, r2, r1
 8019726:	42a3      	cmp	r3, r4
 8019728:	6011      	str	r1, [r2, #0]
 801972a:	d1e0      	bne.n	80196ee <_free_r+0x26>
 801972c:	681c      	ldr	r4, [r3, #0]
 801972e:	685b      	ldr	r3, [r3, #4]
 8019730:	6053      	str	r3, [r2, #4]
 8019732:	4421      	add	r1, r4
 8019734:	6011      	str	r1, [r2, #0]
 8019736:	e7da      	b.n	80196ee <_free_r+0x26>
 8019738:	d902      	bls.n	8019740 <_free_r+0x78>
 801973a:	230c      	movs	r3, #12
 801973c:	6003      	str	r3, [r0, #0]
 801973e:	e7d6      	b.n	80196ee <_free_r+0x26>
 8019740:	6825      	ldr	r5, [r4, #0]
 8019742:	1961      	adds	r1, r4, r5
 8019744:	428b      	cmp	r3, r1
 8019746:	bf04      	itt	eq
 8019748:	6819      	ldreq	r1, [r3, #0]
 801974a:	685b      	ldreq	r3, [r3, #4]
 801974c:	6063      	str	r3, [r4, #4]
 801974e:	bf04      	itt	eq
 8019750:	1949      	addeq	r1, r1, r5
 8019752:	6021      	streq	r1, [r4, #0]
 8019754:	6054      	str	r4, [r2, #4]
 8019756:	e7ca      	b.n	80196ee <_free_r+0x26>
 8019758:	b003      	add	sp, #12
 801975a:	bd30      	pop	{r4, r5, pc}
 801975c:	200234c8 	.word	0x200234c8

08019760 <sbrk_aligned>:
 8019760:	b570      	push	{r4, r5, r6, lr}
 8019762:	4e0e      	ldr	r6, [pc, #56]	; (801979c <sbrk_aligned+0x3c>)
 8019764:	460c      	mov	r4, r1
 8019766:	6831      	ldr	r1, [r6, #0]
 8019768:	4605      	mov	r5, r0
 801976a:	b911      	cbnz	r1, 8019772 <sbrk_aligned+0x12>
 801976c:	f000 fd84 	bl	801a278 <_sbrk_r>
 8019770:	6030      	str	r0, [r6, #0]
 8019772:	4621      	mov	r1, r4
 8019774:	4628      	mov	r0, r5
 8019776:	f000 fd7f 	bl	801a278 <_sbrk_r>
 801977a:	1c43      	adds	r3, r0, #1
 801977c:	d00a      	beq.n	8019794 <sbrk_aligned+0x34>
 801977e:	1cc4      	adds	r4, r0, #3
 8019780:	f024 0403 	bic.w	r4, r4, #3
 8019784:	42a0      	cmp	r0, r4
 8019786:	d007      	beq.n	8019798 <sbrk_aligned+0x38>
 8019788:	1a21      	subs	r1, r4, r0
 801978a:	4628      	mov	r0, r5
 801978c:	f000 fd74 	bl	801a278 <_sbrk_r>
 8019790:	3001      	adds	r0, #1
 8019792:	d101      	bne.n	8019798 <sbrk_aligned+0x38>
 8019794:	f04f 34ff 	mov.w	r4, #4294967295
 8019798:	4620      	mov	r0, r4
 801979a:	bd70      	pop	{r4, r5, r6, pc}
 801979c:	200234cc 	.word	0x200234cc

080197a0 <_malloc_r>:
 80197a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197a4:	1ccd      	adds	r5, r1, #3
 80197a6:	f025 0503 	bic.w	r5, r5, #3
 80197aa:	3508      	adds	r5, #8
 80197ac:	2d0c      	cmp	r5, #12
 80197ae:	bf38      	it	cc
 80197b0:	250c      	movcc	r5, #12
 80197b2:	2d00      	cmp	r5, #0
 80197b4:	4607      	mov	r7, r0
 80197b6:	db01      	blt.n	80197bc <_malloc_r+0x1c>
 80197b8:	42a9      	cmp	r1, r5
 80197ba:	d905      	bls.n	80197c8 <_malloc_r+0x28>
 80197bc:	230c      	movs	r3, #12
 80197be:	603b      	str	r3, [r7, #0]
 80197c0:	2600      	movs	r6, #0
 80197c2:	4630      	mov	r0, r6
 80197c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197c8:	4e2e      	ldr	r6, [pc, #184]	; (8019884 <_malloc_r+0xe4>)
 80197ca:	f001 fe65 	bl	801b498 <__malloc_lock>
 80197ce:	6833      	ldr	r3, [r6, #0]
 80197d0:	461c      	mov	r4, r3
 80197d2:	bb34      	cbnz	r4, 8019822 <_malloc_r+0x82>
 80197d4:	4629      	mov	r1, r5
 80197d6:	4638      	mov	r0, r7
 80197d8:	f7ff ffc2 	bl	8019760 <sbrk_aligned>
 80197dc:	1c43      	adds	r3, r0, #1
 80197de:	4604      	mov	r4, r0
 80197e0:	d14d      	bne.n	801987e <_malloc_r+0xde>
 80197e2:	6834      	ldr	r4, [r6, #0]
 80197e4:	4626      	mov	r6, r4
 80197e6:	2e00      	cmp	r6, #0
 80197e8:	d140      	bne.n	801986c <_malloc_r+0xcc>
 80197ea:	6823      	ldr	r3, [r4, #0]
 80197ec:	4631      	mov	r1, r6
 80197ee:	4638      	mov	r0, r7
 80197f0:	eb04 0803 	add.w	r8, r4, r3
 80197f4:	f000 fd40 	bl	801a278 <_sbrk_r>
 80197f8:	4580      	cmp	r8, r0
 80197fa:	d13a      	bne.n	8019872 <_malloc_r+0xd2>
 80197fc:	6821      	ldr	r1, [r4, #0]
 80197fe:	3503      	adds	r5, #3
 8019800:	1a6d      	subs	r5, r5, r1
 8019802:	f025 0503 	bic.w	r5, r5, #3
 8019806:	3508      	adds	r5, #8
 8019808:	2d0c      	cmp	r5, #12
 801980a:	bf38      	it	cc
 801980c:	250c      	movcc	r5, #12
 801980e:	4629      	mov	r1, r5
 8019810:	4638      	mov	r0, r7
 8019812:	f7ff ffa5 	bl	8019760 <sbrk_aligned>
 8019816:	3001      	adds	r0, #1
 8019818:	d02b      	beq.n	8019872 <_malloc_r+0xd2>
 801981a:	6823      	ldr	r3, [r4, #0]
 801981c:	442b      	add	r3, r5
 801981e:	6023      	str	r3, [r4, #0]
 8019820:	e00e      	b.n	8019840 <_malloc_r+0xa0>
 8019822:	6822      	ldr	r2, [r4, #0]
 8019824:	1b52      	subs	r2, r2, r5
 8019826:	d41e      	bmi.n	8019866 <_malloc_r+0xc6>
 8019828:	2a0b      	cmp	r2, #11
 801982a:	d916      	bls.n	801985a <_malloc_r+0xba>
 801982c:	1961      	adds	r1, r4, r5
 801982e:	42a3      	cmp	r3, r4
 8019830:	6025      	str	r5, [r4, #0]
 8019832:	bf18      	it	ne
 8019834:	6059      	strne	r1, [r3, #4]
 8019836:	6863      	ldr	r3, [r4, #4]
 8019838:	bf08      	it	eq
 801983a:	6031      	streq	r1, [r6, #0]
 801983c:	5162      	str	r2, [r4, r5]
 801983e:	604b      	str	r3, [r1, #4]
 8019840:	4638      	mov	r0, r7
 8019842:	f104 060b 	add.w	r6, r4, #11
 8019846:	f001 fe2d 	bl	801b4a4 <__malloc_unlock>
 801984a:	f026 0607 	bic.w	r6, r6, #7
 801984e:	1d23      	adds	r3, r4, #4
 8019850:	1af2      	subs	r2, r6, r3
 8019852:	d0b6      	beq.n	80197c2 <_malloc_r+0x22>
 8019854:	1b9b      	subs	r3, r3, r6
 8019856:	50a3      	str	r3, [r4, r2]
 8019858:	e7b3      	b.n	80197c2 <_malloc_r+0x22>
 801985a:	6862      	ldr	r2, [r4, #4]
 801985c:	42a3      	cmp	r3, r4
 801985e:	bf0c      	ite	eq
 8019860:	6032      	streq	r2, [r6, #0]
 8019862:	605a      	strne	r2, [r3, #4]
 8019864:	e7ec      	b.n	8019840 <_malloc_r+0xa0>
 8019866:	4623      	mov	r3, r4
 8019868:	6864      	ldr	r4, [r4, #4]
 801986a:	e7b2      	b.n	80197d2 <_malloc_r+0x32>
 801986c:	4634      	mov	r4, r6
 801986e:	6876      	ldr	r6, [r6, #4]
 8019870:	e7b9      	b.n	80197e6 <_malloc_r+0x46>
 8019872:	230c      	movs	r3, #12
 8019874:	603b      	str	r3, [r7, #0]
 8019876:	4638      	mov	r0, r7
 8019878:	f001 fe14 	bl	801b4a4 <__malloc_unlock>
 801987c:	e7a1      	b.n	80197c2 <_malloc_r+0x22>
 801987e:	6025      	str	r5, [r4, #0]
 8019880:	e7de      	b.n	8019840 <_malloc_r+0xa0>
 8019882:	bf00      	nop
 8019884:	200234c8 	.word	0x200234c8

08019888 <__cvt>:
 8019888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801988c:	ec55 4b10 	vmov	r4, r5, d0
 8019890:	2d00      	cmp	r5, #0
 8019892:	460e      	mov	r6, r1
 8019894:	4619      	mov	r1, r3
 8019896:	462b      	mov	r3, r5
 8019898:	bfbb      	ittet	lt
 801989a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801989e:	461d      	movlt	r5, r3
 80198a0:	2300      	movge	r3, #0
 80198a2:	232d      	movlt	r3, #45	; 0x2d
 80198a4:	700b      	strb	r3, [r1, #0]
 80198a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80198a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80198ac:	4691      	mov	r9, r2
 80198ae:	f023 0820 	bic.w	r8, r3, #32
 80198b2:	bfbc      	itt	lt
 80198b4:	4622      	movlt	r2, r4
 80198b6:	4614      	movlt	r4, r2
 80198b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80198bc:	d005      	beq.n	80198ca <__cvt+0x42>
 80198be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80198c2:	d100      	bne.n	80198c6 <__cvt+0x3e>
 80198c4:	3601      	adds	r6, #1
 80198c6:	2102      	movs	r1, #2
 80198c8:	e000      	b.n	80198cc <__cvt+0x44>
 80198ca:	2103      	movs	r1, #3
 80198cc:	ab03      	add	r3, sp, #12
 80198ce:	9301      	str	r3, [sp, #4]
 80198d0:	ab02      	add	r3, sp, #8
 80198d2:	9300      	str	r3, [sp, #0]
 80198d4:	ec45 4b10 	vmov	d0, r4, r5
 80198d8:	4653      	mov	r3, sl
 80198da:	4632      	mov	r2, r6
 80198dc:	f000 feb0 	bl	801a640 <_dtoa_r>
 80198e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80198e4:	4607      	mov	r7, r0
 80198e6:	d102      	bne.n	80198ee <__cvt+0x66>
 80198e8:	f019 0f01 	tst.w	r9, #1
 80198ec:	d022      	beq.n	8019934 <__cvt+0xac>
 80198ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80198f2:	eb07 0906 	add.w	r9, r7, r6
 80198f6:	d110      	bne.n	801991a <__cvt+0x92>
 80198f8:	783b      	ldrb	r3, [r7, #0]
 80198fa:	2b30      	cmp	r3, #48	; 0x30
 80198fc:	d10a      	bne.n	8019914 <__cvt+0x8c>
 80198fe:	2200      	movs	r2, #0
 8019900:	2300      	movs	r3, #0
 8019902:	4620      	mov	r0, r4
 8019904:	4629      	mov	r1, r5
 8019906:	f7e7 f8ff 	bl	8000b08 <__aeabi_dcmpeq>
 801990a:	b918      	cbnz	r0, 8019914 <__cvt+0x8c>
 801990c:	f1c6 0601 	rsb	r6, r6, #1
 8019910:	f8ca 6000 	str.w	r6, [sl]
 8019914:	f8da 3000 	ldr.w	r3, [sl]
 8019918:	4499      	add	r9, r3
 801991a:	2200      	movs	r2, #0
 801991c:	2300      	movs	r3, #0
 801991e:	4620      	mov	r0, r4
 8019920:	4629      	mov	r1, r5
 8019922:	f7e7 f8f1 	bl	8000b08 <__aeabi_dcmpeq>
 8019926:	b108      	cbz	r0, 801992c <__cvt+0xa4>
 8019928:	f8cd 900c 	str.w	r9, [sp, #12]
 801992c:	2230      	movs	r2, #48	; 0x30
 801992e:	9b03      	ldr	r3, [sp, #12]
 8019930:	454b      	cmp	r3, r9
 8019932:	d307      	bcc.n	8019944 <__cvt+0xbc>
 8019934:	9b03      	ldr	r3, [sp, #12]
 8019936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019938:	1bdb      	subs	r3, r3, r7
 801993a:	4638      	mov	r0, r7
 801993c:	6013      	str	r3, [r2, #0]
 801993e:	b004      	add	sp, #16
 8019940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019944:	1c59      	adds	r1, r3, #1
 8019946:	9103      	str	r1, [sp, #12]
 8019948:	701a      	strb	r2, [r3, #0]
 801994a:	e7f0      	b.n	801992e <__cvt+0xa6>

0801994c <__exponent>:
 801994c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801994e:	4603      	mov	r3, r0
 8019950:	2900      	cmp	r1, #0
 8019952:	bfb8      	it	lt
 8019954:	4249      	neglt	r1, r1
 8019956:	f803 2b02 	strb.w	r2, [r3], #2
 801995a:	bfb4      	ite	lt
 801995c:	222d      	movlt	r2, #45	; 0x2d
 801995e:	222b      	movge	r2, #43	; 0x2b
 8019960:	2909      	cmp	r1, #9
 8019962:	7042      	strb	r2, [r0, #1]
 8019964:	dd2a      	ble.n	80199bc <__exponent+0x70>
 8019966:	f10d 0407 	add.w	r4, sp, #7
 801996a:	46a4      	mov	ip, r4
 801996c:	270a      	movs	r7, #10
 801996e:	46a6      	mov	lr, r4
 8019970:	460a      	mov	r2, r1
 8019972:	fb91 f6f7 	sdiv	r6, r1, r7
 8019976:	fb07 1516 	mls	r5, r7, r6, r1
 801997a:	3530      	adds	r5, #48	; 0x30
 801997c:	2a63      	cmp	r2, #99	; 0x63
 801997e:	f104 34ff 	add.w	r4, r4, #4294967295
 8019982:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019986:	4631      	mov	r1, r6
 8019988:	dcf1      	bgt.n	801996e <__exponent+0x22>
 801998a:	3130      	adds	r1, #48	; 0x30
 801998c:	f1ae 0502 	sub.w	r5, lr, #2
 8019990:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019994:	1c44      	adds	r4, r0, #1
 8019996:	4629      	mov	r1, r5
 8019998:	4561      	cmp	r1, ip
 801999a:	d30a      	bcc.n	80199b2 <__exponent+0x66>
 801999c:	f10d 0209 	add.w	r2, sp, #9
 80199a0:	eba2 020e 	sub.w	r2, r2, lr
 80199a4:	4565      	cmp	r5, ip
 80199a6:	bf88      	it	hi
 80199a8:	2200      	movhi	r2, #0
 80199aa:	4413      	add	r3, r2
 80199ac:	1a18      	subs	r0, r3, r0
 80199ae:	b003      	add	sp, #12
 80199b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80199b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80199ba:	e7ed      	b.n	8019998 <__exponent+0x4c>
 80199bc:	2330      	movs	r3, #48	; 0x30
 80199be:	3130      	adds	r1, #48	; 0x30
 80199c0:	7083      	strb	r3, [r0, #2]
 80199c2:	70c1      	strb	r1, [r0, #3]
 80199c4:	1d03      	adds	r3, r0, #4
 80199c6:	e7f1      	b.n	80199ac <__exponent+0x60>

080199c8 <_printf_float>:
 80199c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199cc:	ed2d 8b02 	vpush	{d8}
 80199d0:	b08d      	sub	sp, #52	; 0x34
 80199d2:	460c      	mov	r4, r1
 80199d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80199d8:	4616      	mov	r6, r2
 80199da:	461f      	mov	r7, r3
 80199dc:	4605      	mov	r5, r0
 80199de:	f001 fcdf 	bl	801b3a0 <_localeconv_r>
 80199e2:	f8d0 a000 	ldr.w	sl, [r0]
 80199e6:	4650      	mov	r0, sl
 80199e8:	f7e6 fc12 	bl	8000210 <strlen>
 80199ec:	2300      	movs	r3, #0
 80199ee:	930a      	str	r3, [sp, #40]	; 0x28
 80199f0:	6823      	ldr	r3, [r4, #0]
 80199f2:	9305      	str	r3, [sp, #20]
 80199f4:	f8d8 3000 	ldr.w	r3, [r8]
 80199f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80199fc:	3307      	adds	r3, #7
 80199fe:	f023 0307 	bic.w	r3, r3, #7
 8019a02:	f103 0208 	add.w	r2, r3, #8
 8019a06:	f8c8 2000 	str.w	r2, [r8]
 8019a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019a12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019a16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019a1a:	9307      	str	r3, [sp, #28]
 8019a1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8019a20:	ee08 0a10 	vmov	s16, r0
 8019a24:	4b9f      	ldr	r3, [pc, #636]	; (8019ca4 <_printf_float+0x2dc>)
 8019a26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a2e:	f7e7 f89d 	bl	8000b6c <__aeabi_dcmpun>
 8019a32:	bb88      	cbnz	r0, 8019a98 <_printf_float+0xd0>
 8019a34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019a38:	4b9a      	ldr	r3, [pc, #616]	; (8019ca4 <_printf_float+0x2dc>)
 8019a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a3e:	f7e7 f877 	bl	8000b30 <__aeabi_dcmple>
 8019a42:	bb48      	cbnz	r0, 8019a98 <_printf_float+0xd0>
 8019a44:	2200      	movs	r2, #0
 8019a46:	2300      	movs	r3, #0
 8019a48:	4640      	mov	r0, r8
 8019a4a:	4649      	mov	r1, r9
 8019a4c:	f7e7 f866 	bl	8000b1c <__aeabi_dcmplt>
 8019a50:	b110      	cbz	r0, 8019a58 <_printf_float+0x90>
 8019a52:	232d      	movs	r3, #45	; 0x2d
 8019a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a58:	4b93      	ldr	r3, [pc, #588]	; (8019ca8 <_printf_float+0x2e0>)
 8019a5a:	4894      	ldr	r0, [pc, #592]	; (8019cac <_printf_float+0x2e4>)
 8019a5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019a60:	bf94      	ite	ls
 8019a62:	4698      	movls	r8, r3
 8019a64:	4680      	movhi	r8, r0
 8019a66:	2303      	movs	r3, #3
 8019a68:	6123      	str	r3, [r4, #16]
 8019a6a:	9b05      	ldr	r3, [sp, #20]
 8019a6c:	f023 0204 	bic.w	r2, r3, #4
 8019a70:	6022      	str	r2, [r4, #0]
 8019a72:	f04f 0900 	mov.w	r9, #0
 8019a76:	9700      	str	r7, [sp, #0]
 8019a78:	4633      	mov	r3, r6
 8019a7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8019a7c:	4621      	mov	r1, r4
 8019a7e:	4628      	mov	r0, r5
 8019a80:	f000 f9d8 	bl	8019e34 <_printf_common>
 8019a84:	3001      	adds	r0, #1
 8019a86:	f040 8090 	bne.w	8019baa <_printf_float+0x1e2>
 8019a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8019a8e:	b00d      	add	sp, #52	; 0x34
 8019a90:	ecbd 8b02 	vpop	{d8}
 8019a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a98:	4642      	mov	r2, r8
 8019a9a:	464b      	mov	r3, r9
 8019a9c:	4640      	mov	r0, r8
 8019a9e:	4649      	mov	r1, r9
 8019aa0:	f7e7 f864 	bl	8000b6c <__aeabi_dcmpun>
 8019aa4:	b140      	cbz	r0, 8019ab8 <_printf_float+0xf0>
 8019aa6:	464b      	mov	r3, r9
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	bfbc      	itt	lt
 8019aac:	232d      	movlt	r3, #45	; 0x2d
 8019aae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019ab2:	487f      	ldr	r0, [pc, #508]	; (8019cb0 <_printf_float+0x2e8>)
 8019ab4:	4b7f      	ldr	r3, [pc, #508]	; (8019cb4 <_printf_float+0x2ec>)
 8019ab6:	e7d1      	b.n	8019a5c <_printf_float+0x94>
 8019ab8:	6863      	ldr	r3, [r4, #4]
 8019aba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019abe:	9206      	str	r2, [sp, #24]
 8019ac0:	1c5a      	adds	r2, r3, #1
 8019ac2:	d13f      	bne.n	8019b44 <_printf_float+0x17c>
 8019ac4:	2306      	movs	r3, #6
 8019ac6:	6063      	str	r3, [r4, #4]
 8019ac8:	9b05      	ldr	r3, [sp, #20]
 8019aca:	6861      	ldr	r1, [r4, #4]
 8019acc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	9303      	str	r3, [sp, #12]
 8019ad4:	ab0a      	add	r3, sp, #40	; 0x28
 8019ad6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019ada:	ab09      	add	r3, sp, #36	; 0x24
 8019adc:	ec49 8b10 	vmov	d0, r8, r9
 8019ae0:	9300      	str	r3, [sp, #0]
 8019ae2:	6022      	str	r2, [r4, #0]
 8019ae4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019ae8:	4628      	mov	r0, r5
 8019aea:	f7ff fecd 	bl	8019888 <__cvt>
 8019aee:	9b06      	ldr	r3, [sp, #24]
 8019af0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019af2:	2b47      	cmp	r3, #71	; 0x47
 8019af4:	4680      	mov	r8, r0
 8019af6:	d108      	bne.n	8019b0a <_printf_float+0x142>
 8019af8:	1cc8      	adds	r0, r1, #3
 8019afa:	db02      	blt.n	8019b02 <_printf_float+0x13a>
 8019afc:	6863      	ldr	r3, [r4, #4]
 8019afe:	4299      	cmp	r1, r3
 8019b00:	dd41      	ble.n	8019b86 <_printf_float+0x1be>
 8019b02:	f1ab 0b02 	sub.w	fp, fp, #2
 8019b06:	fa5f fb8b 	uxtb.w	fp, fp
 8019b0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019b0e:	d820      	bhi.n	8019b52 <_printf_float+0x18a>
 8019b10:	3901      	subs	r1, #1
 8019b12:	465a      	mov	r2, fp
 8019b14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019b18:	9109      	str	r1, [sp, #36]	; 0x24
 8019b1a:	f7ff ff17 	bl	801994c <__exponent>
 8019b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019b20:	1813      	adds	r3, r2, r0
 8019b22:	2a01      	cmp	r2, #1
 8019b24:	4681      	mov	r9, r0
 8019b26:	6123      	str	r3, [r4, #16]
 8019b28:	dc02      	bgt.n	8019b30 <_printf_float+0x168>
 8019b2a:	6822      	ldr	r2, [r4, #0]
 8019b2c:	07d2      	lsls	r2, r2, #31
 8019b2e:	d501      	bpl.n	8019b34 <_printf_float+0x16c>
 8019b30:	3301      	adds	r3, #1
 8019b32:	6123      	str	r3, [r4, #16]
 8019b34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d09c      	beq.n	8019a76 <_printf_float+0xae>
 8019b3c:	232d      	movs	r3, #45	; 0x2d
 8019b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b42:	e798      	b.n	8019a76 <_printf_float+0xae>
 8019b44:	9a06      	ldr	r2, [sp, #24]
 8019b46:	2a47      	cmp	r2, #71	; 0x47
 8019b48:	d1be      	bne.n	8019ac8 <_printf_float+0x100>
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d1bc      	bne.n	8019ac8 <_printf_float+0x100>
 8019b4e:	2301      	movs	r3, #1
 8019b50:	e7b9      	b.n	8019ac6 <_printf_float+0xfe>
 8019b52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019b56:	d118      	bne.n	8019b8a <_printf_float+0x1c2>
 8019b58:	2900      	cmp	r1, #0
 8019b5a:	6863      	ldr	r3, [r4, #4]
 8019b5c:	dd0b      	ble.n	8019b76 <_printf_float+0x1ae>
 8019b5e:	6121      	str	r1, [r4, #16]
 8019b60:	b913      	cbnz	r3, 8019b68 <_printf_float+0x1a0>
 8019b62:	6822      	ldr	r2, [r4, #0]
 8019b64:	07d0      	lsls	r0, r2, #31
 8019b66:	d502      	bpl.n	8019b6e <_printf_float+0x1a6>
 8019b68:	3301      	adds	r3, #1
 8019b6a:	440b      	add	r3, r1
 8019b6c:	6123      	str	r3, [r4, #16]
 8019b6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8019b70:	f04f 0900 	mov.w	r9, #0
 8019b74:	e7de      	b.n	8019b34 <_printf_float+0x16c>
 8019b76:	b913      	cbnz	r3, 8019b7e <_printf_float+0x1b6>
 8019b78:	6822      	ldr	r2, [r4, #0]
 8019b7a:	07d2      	lsls	r2, r2, #31
 8019b7c:	d501      	bpl.n	8019b82 <_printf_float+0x1ba>
 8019b7e:	3302      	adds	r3, #2
 8019b80:	e7f4      	b.n	8019b6c <_printf_float+0x1a4>
 8019b82:	2301      	movs	r3, #1
 8019b84:	e7f2      	b.n	8019b6c <_printf_float+0x1a4>
 8019b86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b8c:	4299      	cmp	r1, r3
 8019b8e:	db05      	blt.n	8019b9c <_printf_float+0x1d4>
 8019b90:	6823      	ldr	r3, [r4, #0]
 8019b92:	6121      	str	r1, [r4, #16]
 8019b94:	07d8      	lsls	r0, r3, #31
 8019b96:	d5ea      	bpl.n	8019b6e <_printf_float+0x1a6>
 8019b98:	1c4b      	adds	r3, r1, #1
 8019b9a:	e7e7      	b.n	8019b6c <_printf_float+0x1a4>
 8019b9c:	2900      	cmp	r1, #0
 8019b9e:	bfd4      	ite	le
 8019ba0:	f1c1 0202 	rsble	r2, r1, #2
 8019ba4:	2201      	movgt	r2, #1
 8019ba6:	4413      	add	r3, r2
 8019ba8:	e7e0      	b.n	8019b6c <_printf_float+0x1a4>
 8019baa:	6823      	ldr	r3, [r4, #0]
 8019bac:	055a      	lsls	r2, r3, #21
 8019bae:	d407      	bmi.n	8019bc0 <_printf_float+0x1f8>
 8019bb0:	6923      	ldr	r3, [r4, #16]
 8019bb2:	4642      	mov	r2, r8
 8019bb4:	4631      	mov	r1, r6
 8019bb6:	4628      	mov	r0, r5
 8019bb8:	47b8      	blx	r7
 8019bba:	3001      	adds	r0, #1
 8019bbc:	d12c      	bne.n	8019c18 <_printf_float+0x250>
 8019bbe:	e764      	b.n	8019a8a <_printf_float+0xc2>
 8019bc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019bc4:	f240 80e0 	bls.w	8019d88 <_printf_float+0x3c0>
 8019bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019bcc:	2200      	movs	r2, #0
 8019bce:	2300      	movs	r3, #0
 8019bd0:	f7e6 ff9a 	bl	8000b08 <__aeabi_dcmpeq>
 8019bd4:	2800      	cmp	r0, #0
 8019bd6:	d034      	beq.n	8019c42 <_printf_float+0x27a>
 8019bd8:	4a37      	ldr	r2, [pc, #220]	; (8019cb8 <_printf_float+0x2f0>)
 8019bda:	2301      	movs	r3, #1
 8019bdc:	4631      	mov	r1, r6
 8019bde:	4628      	mov	r0, r5
 8019be0:	47b8      	blx	r7
 8019be2:	3001      	adds	r0, #1
 8019be4:	f43f af51 	beq.w	8019a8a <_printf_float+0xc2>
 8019be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019bec:	429a      	cmp	r2, r3
 8019bee:	db02      	blt.n	8019bf6 <_printf_float+0x22e>
 8019bf0:	6823      	ldr	r3, [r4, #0]
 8019bf2:	07d8      	lsls	r0, r3, #31
 8019bf4:	d510      	bpl.n	8019c18 <_printf_float+0x250>
 8019bf6:	ee18 3a10 	vmov	r3, s16
 8019bfa:	4652      	mov	r2, sl
 8019bfc:	4631      	mov	r1, r6
 8019bfe:	4628      	mov	r0, r5
 8019c00:	47b8      	blx	r7
 8019c02:	3001      	adds	r0, #1
 8019c04:	f43f af41 	beq.w	8019a8a <_printf_float+0xc2>
 8019c08:	f04f 0800 	mov.w	r8, #0
 8019c0c:	f104 091a 	add.w	r9, r4, #26
 8019c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c12:	3b01      	subs	r3, #1
 8019c14:	4543      	cmp	r3, r8
 8019c16:	dc09      	bgt.n	8019c2c <_printf_float+0x264>
 8019c18:	6823      	ldr	r3, [r4, #0]
 8019c1a:	079b      	lsls	r3, r3, #30
 8019c1c:	f100 8105 	bmi.w	8019e2a <_printf_float+0x462>
 8019c20:	68e0      	ldr	r0, [r4, #12]
 8019c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c24:	4298      	cmp	r0, r3
 8019c26:	bfb8      	it	lt
 8019c28:	4618      	movlt	r0, r3
 8019c2a:	e730      	b.n	8019a8e <_printf_float+0xc6>
 8019c2c:	2301      	movs	r3, #1
 8019c2e:	464a      	mov	r2, r9
 8019c30:	4631      	mov	r1, r6
 8019c32:	4628      	mov	r0, r5
 8019c34:	47b8      	blx	r7
 8019c36:	3001      	adds	r0, #1
 8019c38:	f43f af27 	beq.w	8019a8a <_printf_float+0xc2>
 8019c3c:	f108 0801 	add.w	r8, r8, #1
 8019c40:	e7e6      	b.n	8019c10 <_printf_float+0x248>
 8019c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	dc39      	bgt.n	8019cbc <_printf_float+0x2f4>
 8019c48:	4a1b      	ldr	r2, [pc, #108]	; (8019cb8 <_printf_float+0x2f0>)
 8019c4a:	2301      	movs	r3, #1
 8019c4c:	4631      	mov	r1, r6
 8019c4e:	4628      	mov	r0, r5
 8019c50:	47b8      	blx	r7
 8019c52:	3001      	adds	r0, #1
 8019c54:	f43f af19 	beq.w	8019a8a <_printf_float+0xc2>
 8019c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019c5c:	4313      	orrs	r3, r2
 8019c5e:	d102      	bne.n	8019c66 <_printf_float+0x29e>
 8019c60:	6823      	ldr	r3, [r4, #0]
 8019c62:	07d9      	lsls	r1, r3, #31
 8019c64:	d5d8      	bpl.n	8019c18 <_printf_float+0x250>
 8019c66:	ee18 3a10 	vmov	r3, s16
 8019c6a:	4652      	mov	r2, sl
 8019c6c:	4631      	mov	r1, r6
 8019c6e:	4628      	mov	r0, r5
 8019c70:	47b8      	blx	r7
 8019c72:	3001      	adds	r0, #1
 8019c74:	f43f af09 	beq.w	8019a8a <_printf_float+0xc2>
 8019c78:	f04f 0900 	mov.w	r9, #0
 8019c7c:	f104 0a1a 	add.w	sl, r4, #26
 8019c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c82:	425b      	negs	r3, r3
 8019c84:	454b      	cmp	r3, r9
 8019c86:	dc01      	bgt.n	8019c8c <_printf_float+0x2c4>
 8019c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c8a:	e792      	b.n	8019bb2 <_printf_float+0x1ea>
 8019c8c:	2301      	movs	r3, #1
 8019c8e:	4652      	mov	r2, sl
 8019c90:	4631      	mov	r1, r6
 8019c92:	4628      	mov	r0, r5
 8019c94:	47b8      	blx	r7
 8019c96:	3001      	adds	r0, #1
 8019c98:	f43f aef7 	beq.w	8019a8a <_printf_float+0xc2>
 8019c9c:	f109 0901 	add.w	r9, r9, #1
 8019ca0:	e7ee      	b.n	8019c80 <_printf_float+0x2b8>
 8019ca2:	bf00      	nop
 8019ca4:	7fefffff 	.word	0x7fefffff
 8019ca8:	080fb958 	.word	0x080fb958
 8019cac:	080fb95c 	.word	0x080fb95c
 8019cb0:	080fb964 	.word	0x080fb964
 8019cb4:	080fb960 	.word	0x080fb960
 8019cb8:	080fb968 	.word	0x080fb968
 8019cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019cbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019cc0:	429a      	cmp	r2, r3
 8019cc2:	bfa8      	it	ge
 8019cc4:	461a      	movge	r2, r3
 8019cc6:	2a00      	cmp	r2, #0
 8019cc8:	4691      	mov	r9, r2
 8019cca:	dc37      	bgt.n	8019d3c <_printf_float+0x374>
 8019ccc:	f04f 0b00 	mov.w	fp, #0
 8019cd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019cd4:	f104 021a 	add.w	r2, r4, #26
 8019cd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019cda:	9305      	str	r3, [sp, #20]
 8019cdc:	eba3 0309 	sub.w	r3, r3, r9
 8019ce0:	455b      	cmp	r3, fp
 8019ce2:	dc33      	bgt.n	8019d4c <_printf_float+0x384>
 8019ce4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019ce8:	429a      	cmp	r2, r3
 8019cea:	db3b      	blt.n	8019d64 <_printf_float+0x39c>
 8019cec:	6823      	ldr	r3, [r4, #0]
 8019cee:	07da      	lsls	r2, r3, #31
 8019cf0:	d438      	bmi.n	8019d64 <_printf_float+0x39c>
 8019cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cf4:	9a05      	ldr	r2, [sp, #20]
 8019cf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019cf8:	1a9a      	subs	r2, r3, r2
 8019cfa:	eba3 0901 	sub.w	r9, r3, r1
 8019cfe:	4591      	cmp	r9, r2
 8019d00:	bfa8      	it	ge
 8019d02:	4691      	movge	r9, r2
 8019d04:	f1b9 0f00 	cmp.w	r9, #0
 8019d08:	dc35      	bgt.n	8019d76 <_printf_float+0x3ae>
 8019d0a:	f04f 0800 	mov.w	r8, #0
 8019d0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019d12:	f104 0a1a 	add.w	sl, r4, #26
 8019d16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d1a:	1a9b      	subs	r3, r3, r2
 8019d1c:	eba3 0309 	sub.w	r3, r3, r9
 8019d20:	4543      	cmp	r3, r8
 8019d22:	f77f af79 	ble.w	8019c18 <_printf_float+0x250>
 8019d26:	2301      	movs	r3, #1
 8019d28:	4652      	mov	r2, sl
 8019d2a:	4631      	mov	r1, r6
 8019d2c:	4628      	mov	r0, r5
 8019d2e:	47b8      	blx	r7
 8019d30:	3001      	adds	r0, #1
 8019d32:	f43f aeaa 	beq.w	8019a8a <_printf_float+0xc2>
 8019d36:	f108 0801 	add.w	r8, r8, #1
 8019d3a:	e7ec      	b.n	8019d16 <_printf_float+0x34e>
 8019d3c:	4613      	mov	r3, r2
 8019d3e:	4631      	mov	r1, r6
 8019d40:	4642      	mov	r2, r8
 8019d42:	4628      	mov	r0, r5
 8019d44:	47b8      	blx	r7
 8019d46:	3001      	adds	r0, #1
 8019d48:	d1c0      	bne.n	8019ccc <_printf_float+0x304>
 8019d4a:	e69e      	b.n	8019a8a <_printf_float+0xc2>
 8019d4c:	2301      	movs	r3, #1
 8019d4e:	4631      	mov	r1, r6
 8019d50:	4628      	mov	r0, r5
 8019d52:	9205      	str	r2, [sp, #20]
 8019d54:	47b8      	blx	r7
 8019d56:	3001      	adds	r0, #1
 8019d58:	f43f ae97 	beq.w	8019a8a <_printf_float+0xc2>
 8019d5c:	9a05      	ldr	r2, [sp, #20]
 8019d5e:	f10b 0b01 	add.w	fp, fp, #1
 8019d62:	e7b9      	b.n	8019cd8 <_printf_float+0x310>
 8019d64:	ee18 3a10 	vmov	r3, s16
 8019d68:	4652      	mov	r2, sl
 8019d6a:	4631      	mov	r1, r6
 8019d6c:	4628      	mov	r0, r5
 8019d6e:	47b8      	blx	r7
 8019d70:	3001      	adds	r0, #1
 8019d72:	d1be      	bne.n	8019cf2 <_printf_float+0x32a>
 8019d74:	e689      	b.n	8019a8a <_printf_float+0xc2>
 8019d76:	9a05      	ldr	r2, [sp, #20]
 8019d78:	464b      	mov	r3, r9
 8019d7a:	4442      	add	r2, r8
 8019d7c:	4631      	mov	r1, r6
 8019d7e:	4628      	mov	r0, r5
 8019d80:	47b8      	blx	r7
 8019d82:	3001      	adds	r0, #1
 8019d84:	d1c1      	bne.n	8019d0a <_printf_float+0x342>
 8019d86:	e680      	b.n	8019a8a <_printf_float+0xc2>
 8019d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019d8a:	2a01      	cmp	r2, #1
 8019d8c:	dc01      	bgt.n	8019d92 <_printf_float+0x3ca>
 8019d8e:	07db      	lsls	r3, r3, #31
 8019d90:	d538      	bpl.n	8019e04 <_printf_float+0x43c>
 8019d92:	2301      	movs	r3, #1
 8019d94:	4642      	mov	r2, r8
 8019d96:	4631      	mov	r1, r6
 8019d98:	4628      	mov	r0, r5
 8019d9a:	47b8      	blx	r7
 8019d9c:	3001      	adds	r0, #1
 8019d9e:	f43f ae74 	beq.w	8019a8a <_printf_float+0xc2>
 8019da2:	ee18 3a10 	vmov	r3, s16
 8019da6:	4652      	mov	r2, sl
 8019da8:	4631      	mov	r1, r6
 8019daa:	4628      	mov	r0, r5
 8019dac:	47b8      	blx	r7
 8019dae:	3001      	adds	r0, #1
 8019db0:	f43f ae6b 	beq.w	8019a8a <_printf_float+0xc2>
 8019db4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019db8:	2200      	movs	r2, #0
 8019dba:	2300      	movs	r3, #0
 8019dbc:	f7e6 fea4 	bl	8000b08 <__aeabi_dcmpeq>
 8019dc0:	b9d8      	cbnz	r0, 8019dfa <_printf_float+0x432>
 8019dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019dc4:	f108 0201 	add.w	r2, r8, #1
 8019dc8:	3b01      	subs	r3, #1
 8019dca:	4631      	mov	r1, r6
 8019dcc:	4628      	mov	r0, r5
 8019dce:	47b8      	blx	r7
 8019dd0:	3001      	adds	r0, #1
 8019dd2:	d10e      	bne.n	8019df2 <_printf_float+0x42a>
 8019dd4:	e659      	b.n	8019a8a <_printf_float+0xc2>
 8019dd6:	2301      	movs	r3, #1
 8019dd8:	4652      	mov	r2, sl
 8019dda:	4631      	mov	r1, r6
 8019ddc:	4628      	mov	r0, r5
 8019dde:	47b8      	blx	r7
 8019de0:	3001      	adds	r0, #1
 8019de2:	f43f ae52 	beq.w	8019a8a <_printf_float+0xc2>
 8019de6:	f108 0801 	add.w	r8, r8, #1
 8019dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019dec:	3b01      	subs	r3, #1
 8019dee:	4543      	cmp	r3, r8
 8019df0:	dcf1      	bgt.n	8019dd6 <_printf_float+0x40e>
 8019df2:	464b      	mov	r3, r9
 8019df4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019df8:	e6dc      	b.n	8019bb4 <_printf_float+0x1ec>
 8019dfa:	f04f 0800 	mov.w	r8, #0
 8019dfe:	f104 0a1a 	add.w	sl, r4, #26
 8019e02:	e7f2      	b.n	8019dea <_printf_float+0x422>
 8019e04:	2301      	movs	r3, #1
 8019e06:	4642      	mov	r2, r8
 8019e08:	e7df      	b.n	8019dca <_printf_float+0x402>
 8019e0a:	2301      	movs	r3, #1
 8019e0c:	464a      	mov	r2, r9
 8019e0e:	4631      	mov	r1, r6
 8019e10:	4628      	mov	r0, r5
 8019e12:	47b8      	blx	r7
 8019e14:	3001      	adds	r0, #1
 8019e16:	f43f ae38 	beq.w	8019a8a <_printf_float+0xc2>
 8019e1a:	f108 0801 	add.w	r8, r8, #1
 8019e1e:	68e3      	ldr	r3, [r4, #12]
 8019e20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019e22:	1a5b      	subs	r3, r3, r1
 8019e24:	4543      	cmp	r3, r8
 8019e26:	dcf0      	bgt.n	8019e0a <_printf_float+0x442>
 8019e28:	e6fa      	b.n	8019c20 <_printf_float+0x258>
 8019e2a:	f04f 0800 	mov.w	r8, #0
 8019e2e:	f104 0919 	add.w	r9, r4, #25
 8019e32:	e7f4      	b.n	8019e1e <_printf_float+0x456>

08019e34 <_printf_common>:
 8019e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e38:	4616      	mov	r6, r2
 8019e3a:	4699      	mov	r9, r3
 8019e3c:	688a      	ldr	r2, [r1, #8]
 8019e3e:	690b      	ldr	r3, [r1, #16]
 8019e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019e44:	4293      	cmp	r3, r2
 8019e46:	bfb8      	it	lt
 8019e48:	4613      	movlt	r3, r2
 8019e4a:	6033      	str	r3, [r6, #0]
 8019e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019e50:	4607      	mov	r7, r0
 8019e52:	460c      	mov	r4, r1
 8019e54:	b10a      	cbz	r2, 8019e5a <_printf_common+0x26>
 8019e56:	3301      	adds	r3, #1
 8019e58:	6033      	str	r3, [r6, #0]
 8019e5a:	6823      	ldr	r3, [r4, #0]
 8019e5c:	0699      	lsls	r1, r3, #26
 8019e5e:	bf42      	ittt	mi
 8019e60:	6833      	ldrmi	r3, [r6, #0]
 8019e62:	3302      	addmi	r3, #2
 8019e64:	6033      	strmi	r3, [r6, #0]
 8019e66:	6825      	ldr	r5, [r4, #0]
 8019e68:	f015 0506 	ands.w	r5, r5, #6
 8019e6c:	d106      	bne.n	8019e7c <_printf_common+0x48>
 8019e6e:	f104 0a19 	add.w	sl, r4, #25
 8019e72:	68e3      	ldr	r3, [r4, #12]
 8019e74:	6832      	ldr	r2, [r6, #0]
 8019e76:	1a9b      	subs	r3, r3, r2
 8019e78:	42ab      	cmp	r3, r5
 8019e7a:	dc26      	bgt.n	8019eca <_printf_common+0x96>
 8019e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019e80:	1e13      	subs	r3, r2, #0
 8019e82:	6822      	ldr	r2, [r4, #0]
 8019e84:	bf18      	it	ne
 8019e86:	2301      	movne	r3, #1
 8019e88:	0692      	lsls	r2, r2, #26
 8019e8a:	d42b      	bmi.n	8019ee4 <_printf_common+0xb0>
 8019e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019e90:	4649      	mov	r1, r9
 8019e92:	4638      	mov	r0, r7
 8019e94:	47c0      	blx	r8
 8019e96:	3001      	adds	r0, #1
 8019e98:	d01e      	beq.n	8019ed8 <_printf_common+0xa4>
 8019e9a:	6823      	ldr	r3, [r4, #0]
 8019e9c:	68e5      	ldr	r5, [r4, #12]
 8019e9e:	6832      	ldr	r2, [r6, #0]
 8019ea0:	f003 0306 	and.w	r3, r3, #6
 8019ea4:	2b04      	cmp	r3, #4
 8019ea6:	bf08      	it	eq
 8019ea8:	1aad      	subeq	r5, r5, r2
 8019eaa:	68a3      	ldr	r3, [r4, #8]
 8019eac:	6922      	ldr	r2, [r4, #16]
 8019eae:	bf0c      	ite	eq
 8019eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019eb4:	2500      	movne	r5, #0
 8019eb6:	4293      	cmp	r3, r2
 8019eb8:	bfc4      	itt	gt
 8019eba:	1a9b      	subgt	r3, r3, r2
 8019ebc:	18ed      	addgt	r5, r5, r3
 8019ebe:	2600      	movs	r6, #0
 8019ec0:	341a      	adds	r4, #26
 8019ec2:	42b5      	cmp	r5, r6
 8019ec4:	d11a      	bne.n	8019efc <_printf_common+0xc8>
 8019ec6:	2000      	movs	r0, #0
 8019ec8:	e008      	b.n	8019edc <_printf_common+0xa8>
 8019eca:	2301      	movs	r3, #1
 8019ecc:	4652      	mov	r2, sl
 8019ece:	4649      	mov	r1, r9
 8019ed0:	4638      	mov	r0, r7
 8019ed2:	47c0      	blx	r8
 8019ed4:	3001      	adds	r0, #1
 8019ed6:	d103      	bne.n	8019ee0 <_printf_common+0xac>
 8019ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8019edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ee0:	3501      	adds	r5, #1
 8019ee2:	e7c6      	b.n	8019e72 <_printf_common+0x3e>
 8019ee4:	18e1      	adds	r1, r4, r3
 8019ee6:	1c5a      	adds	r2, r3, #1
 8019ee8:	2030      	movs	r0, #48	; 0x30
 8019eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019eee:	4422      	add	r2, r4
 8019ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019ef8:	3302      	adds	r3, #2
 8019efa:	e7c7      	b.n	8019e8c <_printf_common+0x58>
 8019efc:	2301      	movs	r3, #1
 8019efe:	4622      	mov	r2, r4
 8019f00:	4649      	mov	r1, r9
 8019f02:	4638      	mov	r0, r7
 8019f04:	47c0      	blx	r8
 8019f06:	3001      	adds	r0, #1
 8019f08:	d0e6      	beq.n	8019ed8 <_printf_common+0xa4>
 8019f0a:	3601      	adds	r6, #1
 8019f0c:	e7d9      	b.n	8019ec2 <_printf_common+0x8e>
	...

08019f10 <_printf_i>:
 8019f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019f14:	7e0f      	ldrb	r7, [r1, #24]
 8019f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019f18:	2f78      	cmp	r7, #120	; 0x78
 8019f1a:	4691      	mov	r9, r2
 8019f1c:	4680      	mov	r8, r0
 8019f1e:	460c      	mov	r4, r1
 8019f20:	469a      	mov	sl, r3
 8019f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019f26:	d807      	bhi.n	8019f38 <_printf_i+0x28>
 8019f28:	2f62      	cmp	r7, #98	; 0x62
 8019f2a:	d80a      	bhi.n	8019f42 <_printf_i+0x32>
 8019f2c:	2f00      	cmp	r7, #0
 8019f2e:	f000 80d8 	beq.w	801a0e2 <_printf_i+0x1d2>
 8019f32:	2f58      	cmp	r7, #88	; 0x58
 8019f34:	f000 80a3 	beq.w	801a07e <_printf_i+0x16e>
 8019f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019f40:	e03a      	b.n	8019fb8 <_printf_i+0xa8>
 8019f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019f46:	2b15      	cmp	r3, #21
 8019f48:	d8f6      	bhi.n	8019f38 <_printf_i+0x28>
 8019f4a:	a101      	add	r1, pc, #4	; (adr r1, 8019f50 <_printf_i+0x40>)
 8019f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f50:	08019fa9 	.word	0x08019fa9
 8019f54:	08019fbd 	.word	0x08019fbd
 8019f58:	08019f39 	.word	0x08019f39
 8019f5c:	08019f39 	.word	0x08019f39
 8019f60:	08019f39 	.word	0x08019f39
 8019f64:	08019f39 	.word	0x08019f39
 8019f68:	08019fbd 	.word	0x08019fbd
 8019f6c:	08019f39 	.word	0x08019f39
 8019f70:	08019f39 	.word	0x08019f39
 8019f74:	08019f39 	.word	0x08019f39
 8019f78:	08019f39 	.word	0x08019f39
 8019f7c:	0801a0c9 	.word	0x0801a0c9
 8019f80:	08019fed 	.word	0x08019fed
 8019f84:	0801a0ab 	.word	0x0801a0ab
 8019f88:	08019f39 	.word	0x08019f39
 8019f8c:	08019f39 	.word	0x08019f39
 8019f90:	0801a0eb 	.word	0x0801a0eb
 8019f94:	08019f39 	.word	0x08019f39
 8019f98:	08019fed 	.word	0x08019fed
 8019f9c:	08019f39 	.word	0x08019f39
 8019fa0:	08019f39 	.word	0x08019f39
 8019fa4:	0801a0b3 	.word	0x0801a0b3
 8019fa8:	682b      	ldr	r3, [r5, #0]
 8019faa:	1d1a      	adds	r2, r3, #4
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	602a      	str	r2, [r5, #0]
 8019fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019fb8:	2301      	movs	r3, #1
 8019fba:	e0a3      	b.n	801a104 <_printf_i+0x1f4>
 8019fbc:	6820      	ldr	r0, [r4, #0]
 8019fbe:	6829      	ldr	r1, [r5, #0]
 8019fc0:	0606      	lsls	r6, r0, #24
 8019fc2:	f101 0304 	add.w	r3, r1, #4
 8019fc6:	d50a      	bpl.n	8019fde <_printf_i+0xce>
 8019fc8:	680e      	ldr	r6, [r1, #0]
 8019fca:	602b      	str	r3, [r5, #0]
 8019fcc:	2e00      	cmp	r6, #0
 8019fce:	da03      	bge.n	8019fd8 <_printf_i+0xc8>
 8019fd0:	232d      	movs	r3, #45	; 0x2d
 8019fd2:	4276      	negs	r6, r6
 8019fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fd8:	485e      	ldr	r0, [pc, #376]	; (801a154 <_printf_i+0x244>)
 8019fda:	230a      	movs	r3, #10
 8019fdc:	e019      	b.n	801a012 <_printf_i+0x102>
 8019fde:	680e      	ldr	r6, [r1, #0]
 8019fe0:	602b      	str	r3, [r5, #0]
 8019fe2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019fe6:	bf18      	it	ne
 8019fe8:	b236      	sxthne	r6, r6
 8019fea:	e7ef      	b.n	8019fcc <_printf_i+0xbc>
 8019fec:	682b      	ldr	r3, [r5, #0]
 8019fee:	6820      	ldr	r0, [r4, #0]
 8019ff0:	1d19      	adds	r1, r3, #4
 8019ff2:	6029      	str	r1, [r5, #0]
 8019ff4:	0601      	lsls	r1, r0, #24
 8019ff6:	d501      	bpl.n	8019ffc <_printf_i+0xec>
 8019ff8:	681e      	ldr	r6, [r3, #0]
 8019ffa:	e002      	b.n	801a002 <_printf_i+0xf2>
 8019ffc:	0646      	lsls	r6, r0, #25
 8019ffe:	d5fb      	bpl.n	8019ff8 <_printf_i+0xe8>
 801a000:	881e      	ldrh	r6, [r3, #0]
 801a002:	4854      	ldr	r0, [pc, #336]	; (801a154 <_printf_i+0x244>)
 801a004:	2f6f      	cmp	r7, #111	; 0x6f
 801a006:	bf0c      	ite	eq
 801a008:	2308      	moveq	r3, #8
 801a00a:	230a      	movne	r3, #10
 801a00c:	2100      	movs	r1, #0
 801a00e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a012:	6865      	ldr	r5, [r4, #4]
 801a014:	60a5      	str	r5, [r4, #8]
 801a016:	2d00      	cmp	r5, #0
 801a018:	bfa2      	ittt	ge
 801a01a:	6821      	ldrge	r1, [r4, #0]
 801a01c:	f021 0104 	bicge.w	r1, r1, #4
 801a020:	6021      	strge	r1, [r4, #0]
 801a022:	b90e      	cbnz	r6, 801a028 <_printf_i+0x118>
 801a024:	2d00      	cmp	r5, #0
 801a026:	d04d      	beq.n	801a0c4 <_printf_i+0x1b4>
 801a028:	4615      	mov	r5, r2
 801a02a:	fbb6 f1f3 	udiv	r1, r6, r3
 801a02e:	fb03 6711 	mls	r7, r3, r1, r6
 801a032:	5dc7      	ldrb	r7, [r0, r7]
 801a034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a038:	4637      	mov	r7, r6
 801a03a:	42bb      	cmp	r3, r7
 801a03c:	460e      	mov	r6, r1
 801a03e:	d9f4      	bls.n	801a02a <_printf_i+0x11a>
 801a040:	2b08      	cmp	r3, #8
 801a042:	d10b      	bne.n	801a05c <_printf_i+0x14c>
 801a044:	6823      	ldr	r3, [r4, #0]
 801a046:	07de      	lsls	r6, r3, #31
 801a048:	d508      	bpl.n	801a05c <_printf_i+0x14c>
 801a04a:	6923      	ldr	r3, [r4, #16]
 801a04c:	6861      	ldr	r1, [r4, #4]
 801a04e:	4299      	cmp	r1, r3
 801a050:	bfde      	ittt	le
 801a052:	2330      	movle	r3, #48	; 0x30
 801a054:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a058:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a05c:	1b52      	subs	r2, r2, r5
 801a05e:	6122      	str	r2, [r4, #16]
 801a060:	f8cd a000 	str.w	sl, [sp]
 801a064:	464b      	mov	r3, r9
 801a066:	aa03      	add	r2, sp, #12
 801a068:	4621      	mov	r1, r4
 801a06a:	4640      	mov	r0, r8
 801a06c:	f7ff fee2 	bl	8019e34 <_printf_common>
 801a070:	3001      	adds	r0, #1
 801a072:	d14c      	bne.n	801a10e <_printf_i+0x1fe>
 801a074:	f04f 30ff 	mov.w	r0, #4294967295
 801a078:	b004      	add	sp, #16
 801a07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a07e:	4835      	ldr	r0, [pc, #212]	; (801a154 <_printf_i+0x244>)
 801a080:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a084:	6829      	ldr	r1, [r5, #0]
 801a086:	6823      	ldr	r3, [r4, #0]
 801a088:	f851 6b04 	ldr.w	r6, [r1], #4
 801a08c:	6029      	str	r1, [r5, #0]
 801a08e:	061d      	lsls	r5, r3, #24
 801a090:	d514      	bpl.n	801a0bc <_printf_i+0x1ac>
 801a092:	07df      	lsls	r7, r3, #31
 801a094:	bf44      	itt	mi
 801a096:	f043 0320 	orrmi.w	r3, r3, #32
 801a09a:	6023      	strmi	r3, [r4, #0]
 801a09c:	b91e      	cbnz	r6, 801a0a6 <_printf_i+0x196>
 801a09e:	6823      	ldr	r3, [r4, #0]
 801a0a0:	f023 0320 	bic.w	r3, r3, #32
 801a0a4:	6023      	str	r3, [r4, #0]
 801a0a6:	2310      	movs	r3, #16
 801a0a8:	e7b0      	b.n	801a00c <_printf_i+0xfc>
 801a0aa:	6823      	ldr	r3, [r4, #0]
 801a0ac:	f043 0320 	orr.w	r3, r3, #32
 801a0b0:	6023      	str	r3, [r4, #0]
 801a0b2:	2378      	movs	r3, #120	; 0x78
 801a0b4:	4828      	ldr	r0, [pc, #160]	; (801a158 <_printf_i+0x248>)
 801a0b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a0ba:	e7e3      	b.n	801a084 <_printf_i+0x174>
 801a0bc:	0659      	lsls	r1, r3, #25
 801a0be:	bf48      	it	mi
 801a0c0:	b2b6      	uxthmi	r6, r6
 801a0c2:	e7e6      	b.n	801a092 <_printf_i+0x182>
 801a0c4:	4615      	mov	r5, r2
 801a0c6:	e7bb      	b.n	801a040 <_printf_i+0x130>
 801a0c8:	682b      	ldr	r3, [r5, #0]
 801a0ca:	6826      	ldr	r6, [r4, #0]
 801a0cc:	6961      	ldr	r1, [r4, #20]
 801a0ce:	1d18      	adds	r0, r3, #4
 801a0d0:	6028      	str	r0, [r5, #0]
 801a0d2:	0635      	lsls	r5, r6, #24
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	d501      	bpl.n	801a0dc <_printf_i+0x1cc>
 801a0d8:	6019      	str	r1, [r3, #0]
 801a0da:	e002      	b.n	801a0e2 <_printf_i+0x1d2>
 801a0dc:	0670      	lsls	r0, r6, #25
 801a0de:	d5fb      	bpl.n	801a0d8 <_printf_i+0x1c8>
 801a0e0:	8019      	strh	r1, [r3, #0]
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	6123      	str	r3, [r4, #16]
 801a0e6:	4615      	mov	r5, r2
 801a0e8:	e7ba      	b.n	801a060 <_printf_i+0x150>
 801a0ea:	682b      	ldr	r3, [r5, #0]
 801a0ec:	1d1a      	adds	r2, r3, #4
 801a0ee:	602a      	str	r2, [r5, #0]
 801a0f0:	681d      	ldr	r5, [r3, #0]
 801a0f2:	6862      	ldr	r2, [r4, #4]
 801a0f4:	2100      	movs	r1, #0
 801a0f6:	4628      	mov	r0, r5
 801a0f8:	f7e6 f892 	bl	8000220 <memchr>
 801a0fc:	b108      	cbz	r0, 801a102 <_printf_i+0x1f2>
 801a0fe:	1b40      	subs	r0, r0, r5
 801a100:	6060      	str	r0, [r4, #4]
 801a102:	6863      	ldr	r3, [r4, #4]
 801a104:	6123      	str	r3, [r4, #16]
 801a106:	2300      	movs	r3, #0
 801a108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a10c:	e7a8      	b.n	801a060 <_printf_i+0x150>
 801a10e:	6923      	ldr	r3, [r4, #16]
 801a110:	462a      	mov	r2, r5
 801a112:	4649      	mov	r1, r9
 801a114:	4640      	mov	r0, r8
 801a116:	47d0      	blx	sl
 801a118:	3001      	adds	r0, #1
 801a11a:	d0ab      	beq.n	801a074 <_printf_i+0x164>
 801a11c:	6823      	ldr	r3, [r4, #0]
 801a11e:	079b      	lsls	r3, r3, #30
 801a120:	d413      	bmi.n	801a14a <_printf_i+0x23a>
 801a122:	68e0      	ldr	r0, [r4, #12]
 801a124:	9b03      	ldr	r3, [sp, #12]
 801a126:	4298      	cmp	r0, r3
 801a128:	bfb8      	it	lt
 801a12a:	4618      	movlt	r0, r3
 801a12c:	e7a4      	b.n	801a078 <_printf_i+0x168>
 801a12e:	2301      	movs	r3, #1
 801a130:	4632      	mov	r2, r6
 801a132:	4649      	mov	r1, r9
 801a134:	4640      	mov	r0, r8
 801a136:	47d0      	blx	sl
 801a138:	3001      	adds	r0, #1
 801a13a:	d09b      	beq.n	801a074 <_printf_i+0x164>
 801a13c:	3501      	adds	r5, #1
 801a13e:	68e3      	ldr	r3, [r4, #12]
 801a140:	9903      	ldr	r1, [sp, #12]
 801a142:	1a5b      	subs	r3, r3, r1
 801a144:	42ab      	cmp	r3, r5
 801a146:	dcf2      	bgt.n	801a12e <_printf_i+0x21e>
 801a148:	e7eb      	b.n	801a122 <_printf_i+0x212>
 801a14a:	2500      	movs	r5, #0
 801a14c:	f104 0619 	add.w	r6, r4, #25
 801a150:	e7f5      	b.n	801a13e <_printf_i+0x22e>
 801a152:	bf00      	nop
 801a154:	080fb96a 	.word	0x080fb96a
 801a158:	080fb97b 	.word	0x080fb97b

0801a15c <iprintf>:
 801a15c:	b40f      	push	{r0, r1, r2, r3}
 801a15e:	4b0a      	ldr	r3, [pc, #40]	; (801a188 <iprintf+0x2c>)
 801a160:	b513      	push	{r0, r1, r4, lr}
 801a162:	681c      	ldr	r4, [r3, #0]
 801a164:	b124      	cbz	r4, 801a170 <iprintf+0x14>
 801a166:	69a3      	ldr	r3, [r4, #24]
 801a168:	b913      	cbnz	r3, 801a170 <iprintf+0x14>
 801a16a:	4620      	mov	r0, r4
 801a16c:	f7ff f9c8 	bl	8019500 <__sinit>
 801a170:	ab05      	add	r3, sp, #20
 801a172:	9a04      	ldr	r2, [sp, #16]
 801a174:	68a1      	ldr	r1, [r4, #8]
 801a176:	9301      	str	r3, [sp, #4]
 801a178:	4620      	mov	r0, r4
 801a17a:	f001 fee7 	bl	801bf4c <_vfiprintf_r>
 801a17e:	b002      	add	sp, #8
 801a180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a184:	b004      	add	sp, #16
 801a186:	4770      	bx	lr
 801a188:	20000f64 	.word	0x20000f64

0801a18c <_puts_r>:
 801a18c:	b570      	push	{r4, r5, r6, lr}
 801a18e:	460e      	mov	r6, r1
 801a190:	4605      	mov	r5, r0
 801a192:	b118      	cbz	r0, 801a19c <_puts_r+0x10>
 801a194:	6983      	ldr	r3, [r0, #24]
 801a196:	b90b      	cbnz	r3, 801a19c <_puts_r+0x10>
 801a198:	f7ff f9b2 	bl	8019500 <__sinit>
 801a19c:	69ab      	ldr	r3, [r5, #24]
 801a19e:	68ac      	ldr	r4, [r5, #8]
 801a1a0:	b913      	cbnz	r3, 801a1a8 <_puts_r+0x1c>
 801a1a2:	4628      	mov	r0, r5
 801a1a4:	f7ff f9ac 	bl	8019500 <__sinit>
 801a1a8:	4b2c      	ldr	r3, [pc, #176]	; (801a25c <_puts_r+0xd0>)
 801a1aa:	429c      	cmp	r4, r3
 801a1ac:	d120      	bne.n	801a1f0 <_puts_r+0x64>
 801a1ae:	686c      	ldr	r4, [r5, #4]
 801a1b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a1b2:	07db      	lsls	r3, r3, #31
 801a1b4:	d405      	bmi.n	801a1c2 <_puts_r+0x36>
 801a1b6:	89a3      	ldrh	r3, [r4, #12]
 801a1b8:	0598      	lsls	r0, r3, #22
 801a1ba:	d402      	bmi.n	801a1c2 <_puts_r+0x36>
 801a1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a1be:	f7ff fa62 	bl	8019686 <__retarget_lock_acquire_recursive>
 801a1c2:	89a3      	ldrh	r3, [r4, #12]
 801a1c4:	0719      	lsls	r1, r3, #28
 801a1c6:	d51d      	bpl.n	801a204 <_puts_r+0x78>
 801a1c8:	6923      	ldr	r3, [r4, #16]
 801a1ca:	b1db      	cbz	r3, 801a204 <_puts_r+0x78>
 801a1cc:	3e01      	subs	r6, #1
 801a1ce:	68a3      	ldr	r3, [r4, #8]
 801a1d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a1d4:	3b01      	subs	r3, #1
 801a1d6:	60a3      	str	r3, [r4, #8]
 801a1d8:	bb39      	cbnz	r1, 801a22a <_puts_r+0x9e>
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	da38      	bge.n	801a250 <_puts_r+0xc4>
 801a1de:	4622      	mov	r2, r4
 801a1e0:	210a      	movs	r1, #10
 801a1e2:	4628      	mov	r0, r5
 801a1e4:	f000 f8bc 	bl	801a360 <__swbuf_r>
 801a1e8:	3001      	adds	r0, #1
 801a1ea:	d011      	beq.n	801a210 <_puts_r+0x84>
 801a1ec:	250a      	movs	r5, #10
 801a1ee:	e011      	b.n	801a214 <_puts_r+0x88>
 801a1f0:	4b1b      	ldr	r3, [pc, #108]	; (801a260 <_puts_r+0xd4>)
 801a1f2:	429c      	cmp	r4, r3
 801a1f4:	d101      	bne.n	801a1fa <_puts_r+0x6e>
 801a1f6:	68ac      	ldr	r4, [r5, #8]
 801a1f8:	e7da      	b.n	801a1b0 <_puts_r+0x24>
 801a1fa:	4b1a      	ldr	r3, [pc, #104]	; (801a264 <_puts_r+0xd8>)
 801a1fc:	429c      	cmp	r4, r3
 801a1fe:	bf08      	it	eq
 801a200:	68ec      	ldreq	r4, [r5, #12]
 801a202:	e7d5      	b.n	801a1b0 <_puts_r+0x24>
 801a204:	4621      	mov	r1, r4
 801a206:	4628      	mov	r0, r5
 801a208:	f000 f90e 	bl	801a428 <__swsetup_r>
 801a20c:	2800      	cmp	r0, #0
 801a20e:	d0dd      	beq.n	801a1cc <_puts_r+0x40>
 801a210:	f04f 35ff 	mov.w	r5, #4294967295
 801a214:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a216:	07da      	lsls	r2, r3, #31
 801a218:	d405      	bmi.n	801a226 <_puts_r+0x9a>
 801a21a:	89a3      	ldrh	r3, [r4, #12]
 801a21c:	059b      	lsls	r3, r3, #22
 801a21e:	d402      	bmi.n	801a226 <_puts_r+0x9a>
 801a220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a222:	f7ff fa31 	bl	8019688 <__retarget_lock_release_recursive>
 801a226:	4628      	mov	r0, r5
 801a228:	bd70      	pop	{r4, r5, r6, pc}
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	da04      	bge.n	801a238 <_puts_r+0xac>
 801a22e:	69a2      	ldr	r2, [r4, #24]
 801a230:	429a      	cmp	r2, r3
 801a232:	dc06      	bgt.n	801a242 <_puts_r+0xb6>
 801a234:	290a      	cmp	r1, #10
 801a236:	d004      	beq.n	801a242 <_puts_r+0xb6>
 801a238:	6823      	ldr	r3, [r4, #0]
 801a23a:	1c5a      	adds	r2, r3, #1
 801a23c:	6022      	str	r2, [r4, #0]
 801a23e:	7019      	strb	r1, [r3, #0]
 801a240:	e7c5      	b.n	801a1ce <_puts_r+0x42>
 801a242:	4622      	mov	r2, r4
 801a244:	4628      	mov	r0, r5
 801a246:	f000 f88b 	bl	801a360 <__swbuf_r>
 801a24a:	3001      	adds	r0, #1
 801a24c:	d1bf      	bne.n	801a1ce <_puts_r+0x42>
 801a24e:	e7df      	b.n	801a210 <_puts_r+0x84>
 801a250:	6823      	ldr	r3, [r4, #0]
 801a252:	250a      	movs	r5, #10
 801a254:	1c5a      	adds	r2, r3, #1
 801a256:	6022      	str	r2, [r4, #0]
 801a258:	701d      	strb	r5, [r3, #0]
 801a25a:	e7db      	b.n	801a214 <_puts_r+0x88>
 801a25c:	080fb914 	.word	0x080fb914
 801a260:	080fb934 	.word	0x080fb934
 801a264:	080fb8f4 	.word	0x080fb8f4

0801a268 <puts>:
 801a268:	4b02      	ldr	r3, [pc, #8]	; (801a274 <puts+0xc>)
 801a26a:	4601      	mov	r1, r0
 801a26c:	6818      	ldr	r0, [r3, #0]
 801a26e:	f7ff bf8d 	b.w	801a18c <_puts_r>
 801a272:	bf00      	nop
 801a274:	20000f64 	.word	0x20000f64

0801a278 <_sbrk_r>:
 801a278:	b538      	push	{r3, r4, r5, lr}
 801a27a:	4d06      	ldr	r5, [pc, #24]	; (801a294 <_sbrk_r+0x1c>)
 801a27c:	2300      	movs	r3, #0
 801a27e:	4604      	mov	r4, r0
 801a280:	4608      	mov	r0, r1
 801a282:	602b      	str	r3, [r5, #0]
 801a284:	f7e7 fac6 	bl	8001814 <_sbrk>
 801a288:	1c43      	adds	r3, r0, #1
 801a28a:	d102      	bne.n	801a292 <_sbrk_r+0x1a>
 801a28c:	682b      	ldr	r3, [r5, #0]
 801a28e:	b103      	cbz	r3, 801a292 <_sbrk_r+0x1a>
 801a290:	6023      	str	r3, [r4, #0]
 801a292:	bd38      	pop	{r3, r4, r5, pc}
 801a294:	200234d0 	.word	0x200234d0

0801a298 <siprintf>:
 801a298:	b40e      	push	{r1, r2, r3}
 801a29a:	b500      	push	{lr}
 801a29c:	b09c      	sub	sp, #112	; 0x70
 801a29e:	ab1d      	add	r3, sp, #116	; 0x74
 801a2a0:	9002      	str	r0, [sp, #8]
 801a2a2:	9006      	str	r0, [sp, #24]
 801a2a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a2a8:	4809      	ldr	r0, [pc, #36]	; (801a2d0 <siprintf+0x38>)
 801a2aa:	9107      	str	r1, [sp, #28]
 801a2ac:	9104      	str	r1, [sp, #16]
 801a2ae:	4909      	ldr	r1, [pc, #36]	; (801a2d4 <siprintf+0x3c>)
 801a2b0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2b4:	9105      	str	r1, [sp, #20]
 801a2b6:	6800      	ldr	r0, [r0, #0]
 801a2b8:	9301      	str	r3, [sp, #4]
 801a2ba:	a902      	add	r1, sp, #8
 801a2bc:	f001 fd1c 	bl	801bcf8 <_svfiprintf_r>
 801a2c0:	9b02      	ldr	r3, [sp, #8]
 801a2c2:	2200      	movs	r2, #0
 801a2c4:	701a      	strb	r2, [r3, #0]
 801a2c6:	b01c      	add	sp, #112	; 0x70
 801a2c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a2cc:	b003      	add	sp, #12
 801a2ce:	4770      	bx	lr
 801a2d0:	20000f64 	.word	0x20000f64
 801a2d4:	ffff0208 	.word	0xffff0208

0801a2d8 <__sread>:
 801a2d8:	b510      	push	{r4, lr}
 801a2da:	460c      	mov	r4, r1
 801a2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2e0:	f001 ff64 	bl	801c1ac <_read_r>
 801a2e4:	2800      	cmp	r0, #0
 801a2e6:	bfab      	itete	ge
 801a2e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a2ea:	89a3      	ldrhlt	r3, [r4, #12]
 801a2ec:	181b      	addge	r3, r3, r0
 801a2ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a2f2:	bfac      	ite	ge
 801a2f4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a2f6:	81a3      	strhlt	r3, [r4, #12]
 801a2f8:	bd10      	pop	{r4, pc}

0801a2fa <__swrite>:
 801a2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2fe:	461f      	mov	r7, r3
 801a300:	898b      	ldrh	r3, [r1, #12]
 801a302:	05db      	lsls	r3, r3, #23
 801a304:	4605      	mov	r5, r0
 801a306:	460c      	mov	r4, r1
 801a308:	4616      	mov	r6, r2
 801a30a:	d505      	bpl.n	801a318 <__swrite+0x1e>
 801a30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a310:	2302      	movs	r3, #2
 801a312:	2200      	movs	r2, #0
 801a314:	f001 f848 	bl	801b3a8 <_lseek_r>
 801a318:	89a3      	ldrh	r3, [r4, #12]
 801a31a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a31e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a322:	81a3      	strh	r3, [r4, #12]
 801a324:	4632      	mov	r2, r6
 801a326:	463b      	mov	r3, r7
 801a328:	4628      	mov	r0, r5
 801a32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a32e:	f000 b869 	b.w	801a404 <_write_r>

0801a332 <__sseek>:
 801a332:	b510      	push	{r4, lr}
 801a334:	460c      	mov	r4, r1
 801a336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a33a:	f001 f835 	bl	801b3a8 <_lseek_r>
 801a33e:	1c43      	adds	r3, r0, #1
 801a340:	89a3      	ldrh	r3, [r4, #12]
 801a342:	bf15      	itete	ne
 801a344:	6560      	strne	r0, [r4, #84]	; 0x54
 801a346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a34a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a34e:	81a3      	strheq	r3, [r4, #12]
 801a350:	bf18      	it	ne
 801a352:	81a3      	strhne	r3, [r4, #12]
 801a354:	bd10      	pop	{r4, pc}

0801a356 <__sclose>:
 801a356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a35a:	f000 b8d3 	b.w	801a504 <_close_r>
	...

0801a360 <__swbuf_r>:
 801a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a362:	460e      	mov	r6, r1
 801a364:	4614      	mov	r4, r2
 801a366:	4605      	mov	r5, r0
 801a368:	b118      	cbz	r0, 801a372 <__swbuf_r+0x12>
 801a36a:	6983      	ldr	r3, [r0, #24]
 801a36c:	b90b      	cbnz	r3, 801a372 <__swbuf_r+0x12>
 801a36e:	f7ff f8c7 	bl	8019500 <__sinit>
 801a372:	4b21      	ldr	r3, [pc, #132]	; (801a3f8 <__swbuf_r+0x98>)
 801a374:	429c      	cmp	r4, r3
 801a376:	d12b      	bne.n	801a3d0 <__swbuf_r+0x70>
 801a378:	686c      	ldr	r4, [r5, #4]
 801a37a:	69a3      	ldr	r3, [r4, #24]
 801a37c:	60a3      	str	r3, [r4, #8]
 801a37e:	89a3      	ldrh	r3, [r4, #12]
 801a380:	071a      	lsls	r2, r3, #28
 801a382:	d52f      	bpl.n	801a3e4 <__swbuf_r+0x84>
 801a384:	6923      	ldr	r3, [r4, #16]
 801a386:	b36b      	cbz	r3, 801a3e4 <__swbuf_r+0x84>
 801a388:	6923      	ldr	r3, [r4, #16]
 801a38a:	6820      	ldr	r0, [r4, #0]
 801a38c:	1ac0      	subs	r0, r0, r3
 801a38e:	6963      	ldr	r3, [r4, #20]
 801a390:	b2f6      	uxtb	r6, r6
 801a392:	4283      	cmp	r3, r0
 801a394:	4637      	mov	r7, r6
 801a396:	dc04      	bgt.n	801a3a2 <__swbuf_r+0x42>
 801a398:	4621      	mov	r1, r4
 801a39a:	4628      	mov	r0, r5
 801a39c:	f000 ffc4 	bl	801b328 <_fflush_r>
 801a3a0:	bb30      	cbnz	r0, 801a3f0 <__swbuf_r+0x90>
 801a3a2:	68a3      	ldr	r3, [r4, #8]
 801a3a4:	3b01      	subs	r3, #1
 801a3a6:	60a3      	str	r3, [r4, #8]
 801a3a8:	6823      	ldr	r3, [r4, #0]
 801a3aa:	1c5a      	adds	r2, r3, #1
 801a3ac:	6022      	str	r2, [r4, #0]
 801a3ae:	701e      	strb	r6, [r3, #0]
 801a3b0:	6963      	ldr	r3, [r4, #20]
 801a3b2:	3001      	adds	r0, #1
 801a3b4:	4283      	cmp	r3, r0
 801a3b6:	d004      	beq.n	801a3c2 <__swbuf_r+0x62>
 801a3b8:	89a3      	ldrh	r3, [r4, #12]
 801a3ba:	07db      	lsls	r3, r3, #31
 801a3bc:	d506      	bpl.n	801a3cc <__swbuf_r+0x6c>
 801a3be:	2e0a      	cmp	r6, #10
 801a3c0:	d104      	bne.n	801a3cc <__swbuf_r+0x6c>
 801a3c2:	4621      	mov	r1, r4
 801a3c4:	4628      	mov	r0, r5
 801a3c6:	f000 ffaf 	bl	801b328 <_fflush_r>
 801a3ca:	b988      	cbnz	r0, 801a3f0 <__swbuf_r+0x90>
 801a3cc:	4638      	mov	r0, r7
 801a3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3d0:	4b0a      	ldr	r3, [pc, #40]	; (801a3fc <__swbuf_r+0x9c>)
 801a3d2:	429c      	cmp	r4, r3
 801a3d4:	d101      	bne.n	801a3da <__swbuf_r+0x7a>
 801a3d6:	68ac      	ldr	r4, [r5, #8]
 801a3d8:	e7cf      	b.n	801a37a <__swbuf_r+0x1a>
 801a3da:	4b09      	ldr	r3, [pc, #36]	; (801a400 <__swbuf_r+0xa0>)
 801a3dc:	429c      	cmp	r4, r3
 801a3de:	bf08      	it	eq
 801a3e0:	68ec      	ldreq	r4, [r5, #12]
 801a3e2:	e7ca      	b.n	801a37a <__swbuf_r+0x1a>
 801a3e4:	4621      	mov	r1, r4
 801a3e6:	4628      	mov	r0, r5
 801a3e8:	f000 f81e 	bl	801a428 <__swsetup_r>
 801a3ec:	2800      	cmp	r0, #0
 801a3ee:	d0cb      	beq.n	801a388 <__swbuf_r+0x28>
 801a3f0:	f04f 37ff 	mov.w	r7, #4294967295
 801a3f4:	e7ea      	b.n	801a3cc <__swbuf_r+0x6c>
 801a3f6:	bf00      	nop
 801a3f8:	080fb914 	.word	0x080fb914
 801a3fc:	080fb934 	.word	0x080fb934
 801a400:	080fb8f4 	.word	0x080fb8f4

0801a404 <_write_r>:
 801a404:	b538      	push	{r3, r4, r5, lr}
 801a406:	4d07      	ldr	r5, [pc, #28]	; (801a424 <_write_r+0x20>)
 801a408:	4604      	mov	r4, r0
 801a40a:	4608      	mov	r0, r1
 801a40c:	4611      	mov	r1, r2
 801a40e:	2200      	movs	r2, #0
 801a410:	602a      	str	r2, [r5, #0]
 801a412:	461a      	mov	r2, r3
 801a414:	f7e6 fe58 	bl	80010c8 <_write>
 801a418:	1c43      	adds	r3, r0, #1
 801a41a:	d102      	bne.n	801a422 <_write_r+0x1e>
 801a41c:	682b      	ldr	r3, [r5, #0]
 801a41e:	b103      	cbz	r3, 801a422 <_write_r+0x1e>
 801a420:	6023      	str	r3, [r4, #0]
 801a422:	bd38      	pop	{r3, r4, r5, pc}
 801a424:	200234d0 	.word	0x200234d0

0801a428 <__swsetup_r>:
 801a428:	4b32      	ldr	r3, [pc, #200]	; (801a4f4 <__swsetup_r+0xcc>)
 801a42a:	b570      	push	{r4, r5, r6, lr}
 801a42c:	681d      	ldr	r5, [r3, #0]
 801a42e:	4606      	mov	r6, r0
 801a430:	460c      	mov	r4, r1
 801a432:	b125      	cbz	r5, 801a43e <__swsetup_r+0x16>
 801a434:	69ab      	ldr	r3, [r5, #24]
 801a436:	b913      	cbnz	r3, 801a43e <__swsetup_r+0x16>
 801a438:	4628      	mov	r0, r5
 801a43a:	f7ff f861 	bl	8019500 <__sinit>
 801a43e:	4b2e      	ldr	r3, [pc, #184]	; (801a4f8 <__swsetup_r+0xd0>)
 801a440:	429c      	cmp	r4, r3
 801a442:	d10f      	bne.n	801a464 <__swsetup_r+0x3c>
 801a444:	686c      	ldr	r4, [r5, #4]
 801a446:	89a3      	ldrh	r3, [r4, #12]
 801a448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a44c:	0719      	lsls	r1, r3, #28
 801a44e:	d42c      	bmi.n	801a4aa <__swsetup_r+0x82>
 801a450:	06dd      	lsls	r5, r3, #27
 801a452:	d411      	bmi.n	801a478 <__swsetup_r+0x50>
 801a454:	2309      	movs	r3, #9
 801a456:	6033      	str	r3, [r6, #0]
 801a458:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a45c:	81a3      	strh	r3, [r4, #12]
 801a45e:	f04f 30ff 	mov.w	r0, #4294967295
 801a462:	e03e      	b.n	801a4e2 <__swsetup_r+0xba>
 801a464:	4b25      	ldr	r3, [pc, #148]	; (801a4fc <__swsetup_r+0xd4>)
 801a466:	429c      	cmp	r4, r3
 801a468:	d101      	bne.n	801a46e <__swsetup_r+0x46>
 801a46a:	68ac      	ldr	r4, [r5, #8]
 801a46c:	e7eb      	b.n	801a446 <__swsetup_r+0x1e>
 801a46e:	4b24      	ldr	r3, [pc, #144]	; (801a500 <__swsetup_r+0xd8>)
 801a470:	429c      	cmp	r4, r3
 801a472:	bf08      	it	eq
 801a474:	68ec      	ldreq	r4, [r5, #12]
 801a476:	e7e6      	b.n	801a446 <__swsetup_r+0x1e>
 801a478:	0758      	lsls	r0, r3, #29
 801a47a:	d512      	bpl.n	801a4a2 <__swsetup_r+0x7a>
 801a47c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a47e:	b141      	cbz	r1, 801a492 <__swsetup_r+0x6a>
 801a480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a484:	4299      	cmp	r1, r3
 801a486:	d002      	beq.n	801a48e <__swsetup_r+0x66>
 801a488:	4630      	mov	r0, r6
 801a48a:	f7ff f91d 	bl	80196c8 <_free_r>
 801a48e:	2300      	movs	r3, #0
 801a490:	6363      	str	r3, [r4, #52]	; 0x34
 801a492:	89a3      	ldrh	r3, [r4, #12]
 801a494:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a498:	81a3      	strh	r3, [r4, #12]
 801a49a:	2300      	movs	r3, #0
 801a49c:	6063      	str	r3, [r4, #4]
 801a49e:	6923      	ldr	r3, [r4, #16]
 801a4a0:	6023      	str	r3, [r4, #0]
 801a4a2:	89a3      	ldrh	r3, [r4, #12]
 801a4a4:	f043 0308 	orr.w	r3, r3, #8
 801a4a8:	81a3      	strh	r3, [r4, #12]
 801a4aa:	6923      	ldr	r3, [r4, #16]
 801a4ac:	b94b      	cbnz	r3, 801a4c2 <__swsetup_r+0x9a>
 801a4ae:	89a3      	ldrh	r3, [r4, #12]
 801a4b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a4b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a4b8:	d003      	beq.n	801a4c2 <__swsetup_r+0x9a>
 801a4ba:	4621      	mov	r1, r4
 801a4bc:	4630      	mov	r0, r6
 801a4be:	f000 ffab 	bl	801b418 <__smakebuf_r>
 801a4c2:	89a0      	ldrh	r0, [r4, #12]
 801a4c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a4c8:	f010 0301 	ands.w	r3, r0, #1
 801a4cc:	d00a      	beq.n	801a4e4 <__swsetup_r+0xbc>
 801a4ce:	2300      	movs	r3, #0
 801a4d0:	60a3      	str	r3, [r4, #8]
 801a4d2:	6963      	ldr	r3, [r4, #20]
 801a4d4:	425b      	negs	r3, r3
 801a4d6:	61a3      	str	r3, [r4, #24]
 801a4d8:	6923      	ldr	r3, [r4, #16]
 801a4da:	b943      	cbnz	r3, 801a4ee <__swsetup_r+0xc6>
 801a4dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a4e0:	d1ba      	bne.n	801a458 <__swsetup_r+0x30>
 801a4e2:	bd70      	pop	{r4, r5, r6, pc}
 801a4e4:	0781      	lsls	r1, r0, #30
 801a4e6:	bf58      	it	pl
 801a4e8:	6963      	ldrpl	r3, [r4, #20]
 801a4ea:	60a3      	str	r3, [r4, #8]
 801a4ec:	e7f4      	b.n	801a4d8 <__swsetup_r+0xb0>
 801a4ee:	2000      	movs	r0, #0
 801a4f0:	e7f7      	b.n	801a4e2 <__swsetup_r+0xba>
 801a4f2:	bf00      	nop
 801a4f4:	20000f64 	.word	0x20000f64
 801a4f8:	080fb914 	.word	0x080fb914
 801a4fc:	080fb934 	.word	0x080fb934
 801a500:	080fb8f4 	.word	0x080fb8f4

0801a504 <_close_r>:
 801a504:	b538      	push	{r3, r4, r5, lr}
 801a506:	4d06      	ldr	r5, [pc, #24]	; (801a520 <_close_r+0x1c>)
 801a508:	2300      	movs	r3, #0
 801a50a:	4604      	mov	r4, r0
 801a50c:	4608      	mov	r0, r1
 801a50e:	602b      	str	r3, [r5, #0]
 801a510:	f001 ff3c 	bl	801c38c <_close>
 801a514:	1c43      	adds	r3, r0, #1
 801a516:	d102      	bne.n	801a51e <_close_r+0x1a>
 801a518:	682b      	ldr	r3, [r5, #0]
 801a51a:	b103      	cbz	r3, 801a51e <_close_r+0x1a>
 801a51c:	6023      	str	r3, [r4, #0]
 801a51e:	bd38      	pop	{r3, r4, r5, pc}
 801a520:	200234d0 	.word	0x200234d0

0801a524 <quorem>:
 801a524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a528:	6903      	ldr	r3, [r0, #16]
 801a52a:	690c      	ldr	r4, [r1, #16]
 801a52c:	42a3      	cmp	r3, r4
 801a52e:	4607      	mov	r7, r0
 801a530:	f2c0 8081 	blt.w	801a636 <quorem+0x112>
 801a534:	3c01      	subs	r4, #1
 801a536:	f101 0814 	add.w	r8, r1, #20
 801a53a:	f100 0514 	add.w	r5, r0, #20
 801a53e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a542:	9301      	str	r3, [sp, #4]
 801a544:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a548:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a54c:	3301      	adds	r3, #1
 801a54e:	429a      	cmp	r2, r3
 801a550:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a554:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a558:	fbb2 f6f3 	udiv	r6, r2, r3
 801a55c:	d331      	bcc.n	801a5c2 <quorem+0x9e>
 801a55e:	f04f 0e00 	mov.w	lr, #0
 801a562:	4640      	mov	r0, r8
 801a564:	46ac      	mov	ip, r5
 801a566:	46f2      	mov	sl, lr
 801a568:	f850 2b04 	ldr.w	r2, [r0], #4
 801a56c:	b293      	uxth	r3, r2
 801a56e:	fb06 e303 	mla	r3, r6, r3, lr
 801a572:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a576:	b29b      	uxth	r3, r3
 801a578:	ebaa 0303 	sub.w	r3, sl, r3
 801a57c:	f8dc a000 	ldr.w	sl, [ip]
 801a580:	0c12      	lsrs	r2, r2, #16
 801a582:	fa13 f38a 	uxtah	r3, r3, sl
 801a586:	fb06 e202 	mla	r2, r6, r2, lr
 801a58a:	9300      	str	r3, [sp, #0]
 801a58c:	9b00      	ldr	r3, [sp, #0]
 801a58e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a592:	b292      	uxth	r2, r2
 801a594:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a598:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a59c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a5a0:	4581      	cmp	r9, r0
 801a5a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a5a6:	f84c 3b04 	str.w	r3, [ip], #4
 801a5aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a5ae:	d2db      	bcs.n	801a568 <quorem+0x44>
 801a5b0:	f855 300b 	ldr.w	r3, [r5, fp]
 801a5b4:	b92b      	cbnz	r3, 801a5c2 <quorem+0x9e>
 801a5b6:	9b01      	ldr	r3, [sp, #4]
 801a5b8:	3b04      	subs	r3, #4
 801a5ba:	429d      	cmp	r5, r3
 801a5bc:	461a      	mov	r2, r3
 801a5be:	d32e      	bcc.n	801a61e <quorem+0xfa>
 801a5c0:	613c      	str	r4, [r7, #16]
 801a5c2:	4638      	mov	r0, r7
 801a5c4:	f001 f9f6 	bl	801b9b4 <__mcmp>
 801a5c8:	2800      	cmp	r0, #0
 801a5ca:	db24      	blt.n	801a616 <quorem+0xf2>
 801a5cc:	3601      	adds	r6, #1
 801a5ce:	4628      	mov	r0, r5
 801a5d0:	f04f 0c00 	mov.w	ip, #0
 801a5d4:	f858 2b04 	ldr.w	r2, [r8], #4
 801a5d8:	f8d0 e000 	ldr.w	lr, [r0]
 801a5dc:	b293      	uxth	r3, r2
 801a5de:	ebac 0303 	sub.w	r3, ip, r3
 801a5e2:	0c12      	lsrs	r2, r2, #16
 801a5e4:	fa13 f38e 	uxtah	r3, r3, lr
 801a5e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a5ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a5f0:	b29b      	uxth	r3, r3
 801a5f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a5f6:	45c1      	cmp	r9, r8
 801a5f8:	f840 3b04 	str.w	r3, [r0], #4
 801a5fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a600:	d2e8      	bcs.n	801a5d4 <quorem+0xb0>
 801a602:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a60a:	b922      	cbnz	r2, 801a616 <quorem+0xf2>
 801a60c:	3b04      	subs	r3, #4
 801a60e:	429d      	cmp	r5, r3
 801a610:	461a      	mov	r2, r3
 801a612:	d30a      	bcc.n	801a62a <quorem+0x106>
 801a614:	613c      	str	r4, [r7, #16]
 801a616:	4630      	mov	r0, r6
 801a618:	b003      	add	sp, #12
 801a61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a61e:	6812      	ldr	r2, [r2, #0]
 801a620:	3b04      	subs	r3, #4
 801a622:	2a00      	cmp	r2, #0
 801a624:	d1cc      	bne.n	801a5c0 <quorem+0x9c>
 801a626:	3c01      	subs	r4, #1
 801a628:	e7c7      	b.n	801a5ba <quorem+0x96>
 801a62a:	6812      	ldr	r2, [r2, #0]
 801a62c:	3b04      	subs	r3, #4
 801a62e:	2a00      	cmp	r2, #0
 801a630:	d1f0      	bne.n	801a614 <quorem+0xf0>
 801a632:	3c01      	subs	r4, #1
 801a634:	e7eb      	b.n	801a60e <quorem+0xea>
 801a636:	2000      	movs	r0, #0
 801a638:	e7ee      	b.n	801a618 <quorem+0xf4>
 801a63a:	0000      	movs	r0, r0
 801a63c:	0000      	movs	r0, r0
	...

0801a640 <_dtoa_r>:
 801a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a644:	ed2d 8b04 	vpush	{d8-d9}
 801a648:	ec57 6b10 	vmov	r6, r7, d0
 801a64c:	b093      	sub	sp, #76	; 0x4c
 801a64e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a650:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a654:	9106      	str	r1, [sp, #24]
 801a656:	ee10 aa10 	vmov	sl, s0
 801a65a:	4604      	mov	r4, r0
 801a65c:	9209      	str	r2, [sp, #36]	; 0x24
 801a65e:	930c      	str	r3, [sp, #48]	; 0x30
 801a660:	46bb      	mov	fp, r7
 801a662:	b975      	cbnz	r5, 801a682 <_dtoa_r+0x42>
 801a664:	2010      	movs	r0, #16
 801a666:	f7ff f811 	bl	801968c <malloc>
 801a66a:	4602      	mov	r2, r0
 801a66c:	6260      	str	r0, [r4, #36]	; 0x24
 801a66e:	b920      	cbnz	r0, 801a67a <_dtoa_r+0x3a>
 801a670:	4ba7      	ldr	r3, [pc, #668]	; (801a910 <_dtoa_r+0x2d0>)
 801a672:	21ea      	movs	r1, #234	; 0xea
 801a674:	48a7      	ldr	r0, [pc, #668]	; (801a914 <_dtoa_r+0x2d4>)
 801a676:	f001 fdab 	bl	801c1d0 <__assert_func>
 801a67a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a67e:	6005      	str	r5, [r0, #0]
 801a680:	60c5      	str	r5, [r0, #12]
 801a682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a684:	6819      	ldr	r1, [r3, #0]
 801a686:	b151      	cbz	r1, 801a69e <_dtoa_r+0x5e>
 801a688:	685a      	ldr	r2, [r3, #4]
 801a68a:	604a      	str	r2, [r1, #4]
 801a68c:	2301      	movs	r3, #1
 801a68e:	4093      	lsls	r3, r2
 801a690:	608b      	str	r3, [r1, #8]
 801a692:	4620      	mov	r0, r4
 801a694:	f000 ff4c 	bl	801b530 <_Bfree>
 801a698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a69a:	2200      	movs	r2, #0
 801a69c:	601a      	str	r2, [r3, #0]
 801a69e:	1e3b      	subs	r3, r7, #0
 801a6a0:	bfaa      	itet	ge
 801a6a2:	2300      	movge	r3, #0
 801a6a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801a6a8:	f8c8 3000 	strge.w	r3, [r8]
 801a6ac:	4b9a      	ldr	r3, [pc, #616]	; (801a918 <_dtoa_r+0x2d8>)
 801a6ae:	bfbc      	itt	lt
 801a6b0:	2201      	movlt	r2, #1
 801a6b2:	f8c8 2000 	strlt.w	r2, [r8]
 801a6b6:	ea33 030b 	bics.w	r3, r3, fp
 801a6ba:	d11b      	bne.n	801a6f4 <_dtoa_r+0xb4>
 801a6bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a6be:	f242 730f 	movw	r3, #9999	; 0x270f
 801a6c2:	6013      	str	r3, [r2, #0]
 801a6c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a6c8:	4333      	orrs	r3, r6
 801a6ca:	f000 8592 	beq.w	801b1f2 <_dtoa_r+0xbb2>
 801a6ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a6d0:	b963      	cbnz	r3, 801a6ec <_dtoa_r+0xac>
 801a6d2:	4b92      	ldr	r3, [pc, #584]	; (801a91c <_dtoa_r+0x2dc>)
 801a6d4:	e022      	b.n	801a71c <_dtoa_r+0xdc>
 801a6d6:	4b92      	ldr	r3, [pc, #584]	; (801a920 <_dtoa_r+0x2e0>)
 801a6d8:	9301      	str	r3, [sp, #4]
 801a6da:	3308      	adds	r3, #8
 801a6dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a6de:	6013      	str	r3, [r2, #0]
 801a6e0:	9801      	ldr	r0, [sp, #4]
 801a6e2:	b013      	add	sp, #76	; 0x4c
 801a6e4:	ecbd 8b04 	vpop	{d8-d9}
 801a6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6ec:	4b8b      	ldr	r3, [pc, #556]	; (801a91c <_dtoa_r+0x2dc>)
 801a6ee:	9301      	str	r3, [sp, #4]
 801a6f0:	3303      	adds	r3, #3
 801a6f2:	e7f3      	b.n	801a6dc <_dtoa_r+0x9c>
 801a6f4:	2200      	movs	r2, #0
 801a6f6:	2300      	movs	r3, #0
 801a6f8:	4650      	mov	r0, sl
 801a6fa:	4659      	mov	r1, fp
 801a6fc:	f7e6 fa04 	bl	8000b08 <__aeabi_dcmpeq>
 801a700:	ec4b ab19 	vmov	d9, sl, fp
 801a704:	4680      	mov	r8, r0
 801a706:	b158      	cbz	r0, 801a720 <_dtoa_r+0xe0>
 801a708:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a70a:	2301      	movs	r3, #1
 801a70c:	6013      	str	r3, [r2, #0]
 801a70e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a710:	2b00      	cmp	r3, #0
 801a712:	f000 856b 	beq.w	801b1ec <_dtoa_r+0xbac>
 801a716:	4883      	ldr	r0, [pc, #524]	; (801a924 <_dtoa_r+0x2e4>)
 801a718:	6018      	str	r0, [r3, #0]
 801a71a:	1e43      	subs	r3, r0, #1
 801a71c:	9301      	str	r3, [sp, #4]
 801a71e:	e7df      	b.n	801a6e0 <_dtoa_r+0xa0>
 801a720:	ec4b ab10 	vmov	d0, sl, fp
 801a724:	aa10      	add	r2, sp, #64	; 0x40
 801a726:	a911      	add	r1, sp, #68	; 0x44
 801a728:	4620      	mov	r0, r4
 801a72a:	f001 f9e9 	bl	801bb00 <__d2b>
 801a72e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801a732:	ee08 0a10 	vmov	s16, r0
 801a736:	2d00      	cmp	r5, #0
 801a738:	f000 8084 	beq.w	801a844 <_dtoa_r+0x204>
 801a73c:	ee19 3a90 	vmov	r3, s19
 801a740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a744:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801a748:	4656      	mov	r6, sl
 801a74a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801a74e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a752:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801a756:	4b74      	ldr	r3, [pc, #464]	; (801a928 <_dtoa_r+0x2e8>)
 801a758:	2200      	movs	r2, #0
 801a75a:	4630      	mov	r0, r6
 801a75c:	4639      	mov	r1, r7
 801a75e:	f7e5 fdb3 	bl	80002c8 <__aeabi_dsub>
 801a762:	a365      	add	r3, pc, #404	; (adr r3, 801a8f8 <_dtoa_r+0x2b8>)
 801a764:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a768:	f7e5 ff66 	bl	8000638 <__aeabi_dmul>
 801a76c:	a364      	add	r3, pc, #400	; (adr r3, 801a900 <_dtoa_r+0x2c0>)
 801a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a772:	f7e5 fdab 	bl	80002cc <__adddf3>
 801a776:	4606      	mov	r6, r0
 801a778:	4628      	mov	r0, r5
 801a77a:	460f      	mov	r7, r1
 801a77c:	f7e5 fef2 	bl	8000564 <__aeabi_i2d>
 801a780:	a361      	add	r3, pc, #388	; (adr r3, 801a908 <_dtoa_r+0x2c8>)
 801a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a786:	f7e5 ff57 	bl	8000638 <__aeabi_dmul>
 801a78a:	4602      	mov	r2, r0
 801a78c:	460b      	mov	r3, r1
 801a78e:	4630      	mov	r0, r6
 801a790:	4639      	mov	r1, r7
 801a792:	f7e5 fd9b 	bl	80002cc <__adddf3>
 801a796:	4606      	mov	r6, r0
 801a798:	460f      	mov	r7, r1
 801a79a:	f7e6 f9fd 	bl	8000b98 <__aeabi_d2iz>
 801a79e:	2200      	movs	r2, #0
 801a7a0:	9000      	str	r0, [sp, #0]
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	4630      	mov	r0, r6
 801a7a6:	4639      	mov	r1, r7
 801a7a8:	f7e6 f9b8 	bl	8000b1c <__aeabi_dcmplt>
 801a7ac:	b150      	cbz	r0, 801a7c4 <_dtoa_r+0x184>
 801a7ae:	9800      	ldr	r0, [sp, #0]
 801a7b0:	f7e5 fed8 	bl	8000564 <__aeabi_i2d>
 801a7b4:	4632      	mov	r2, r6
 801a7b6:	463b      	mov	r3, r7
 801a7b8:	f7e6 f9a6 	bl	8000b08 <__aeabi_dcmpeq>
 801a7bc:	b910      	cbnz	r0, 801a7c4 <_dtoa_r+0x184>
 801a7be:	9b00      	ldr	r3, [sp, #0]
 801a7c0:	3b01      	subs	r3, #1
 801a7c2:	9300      	str	r3, [sp, #0]
 801a7c4:	9b00      	ldr	r3, [sp, #0]
 801a7c6:	2b16      	cmp	r3, #22
 801a7c8:	d85a      	bhi.n	801a880 <_dtoa_r+0x240>
 801a7ca:	9a00      	ldr	r2, [sp, #0]
 801a7cc:	4b57      	ldr	r3, [pc, #348]	; (801a92c <_dtoa_r+0x2ec>)
 801a7ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7d6:	ec51 0b19 	vmov	r0, r1, d9
 801a7da:	f7e6 f99f 	bl	8000b1c <__aeabi_dcmplt>
 801a7de:	2800      	cmp	r0, #0
 801a7e0:	d050      	beq.n	801a884 <_dtoa_r+0x244>
 801a7e2:	9b00      	ldr	r3, [sp, #0]
 801a7e4:	3b01      	subs	r3, #1
 801a7e6:	9300      	str	r3, [sp, #0]
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	930b      	str	r3, [sp, #44]	; 0x2c
 801a7ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a7ee:	1b5d      	subs	r5, r3, r5
 801a7f0:	1e6b      	subs	r3, r5, #1
 801a7f2:	9305      	str	r3, [sp, #20]
 801a7f4:	bf45      	ittet	mi
 801a7f6:	f1c5 0301 	rsbmi	r3, r5, #1
 801a7fa:	9304      	strmi	r3, [sp, #16]
 801a7fc:	2300      	movpl	r3, #0
 801a7fe:	2300      	movmi	r3, #0
 801a800:	bf4c      	ite	mi
 801a802:	9305      	strmi	r3, [sp, #20]
 801a804:	9304      	strpl	r3, [sp, #16]
 801a806:	9b00      	ldr	r3, [sp, #0]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	db3d      	blt.n	801a888 <_dtoa_r+0x248>
 801a80c:	9b05      	ldr	r3, [sp, #20]
 801a80e:	9a00      	ldr	r2, [sp, #0]
 801a810:	920a      	str	r2, [sp, #40]	; 0x28
 801a812:	4413      	add	r3, r2
 801a814:	9305      	str	r3, [sp, #20]
 801a816:	2300      	movs	r3, #0
 801a818:	9307      	str	r3, [sp, #28]
 801a81a:	9b06      	ldr	r3, [sp, #24]
 801a81c:	2b09      	cmp	r3, #9
 801a81e:	f200 8089 	bhi.w	801a934 <_dtoa_r+0x2f4>
 801a822:	2b05      	cmp	r3, #5
 801a824:	bfc4      	itt	gt
 801a826:	3b04      	subgt	r3, #4
 801a828:	9306      	strgt	r3, [sp, #24]
 801a82a:	9b06      	ldr	r3, [sp, #24]
 801a82c:	f1a3 0302 	sub.w	r3, r3, #2
 801a830:	bfcc      	ite	gt
 801a832:	2500      	movgt	r5, #0
 801a834:	2501      	movle	r5, #1
 801a836:	2b03      	cmp	r3, #3
 801a838:	f200 8087 	bhi.w	801a94a <_dtoa_r+0x30a>
 801a83c:	e8df f003 	tbb	[pc, r3]
 801a840:	59383a2d 	.word	0x59383a2d
 801a844:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801a848:	441d      	add	r5, r3
 801a84a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801a84e:	2b20      	cmp	r3, #32
 801a850:	bfc1      	itttt	gt
 801a852:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a856:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801a85a:	fa0b f303 	lslgt.w	r3, fp, r3
 801a85e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801a862:	bfda      	itte	le
 801a864:	f1c3 0320 	rsble	r3, r3, #32
 801a868:	fa06 f003 	lslle.w	r0, r6, r3
 801a86c:	4318      	orrgt	r0, r3
 801a86e:	f7e5 fe69 	bl	8000544 <__aeabi_ui2d>
 801a872:	2301      	movs	r3, #1
 801a874:	4606      	mov	r6, r0
 801a876:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801a87a:	3d01      	subs	r5, #1
 801a87c:	930e      	str	r3, [sp, #56]	; 0x38
 801a87e:	e76a      	b.n	801a756 <_dtoa_r+0x116>
 801a880:	2301      	movs	r3, #1
 801a882:	e7b2      	b.n	801a7ea <_dtoa_r+0x1aa>
 801a884:	900b      	str	r0, [sp, #44]	; 0x2c
 801a886:	e7b1      	b.n	801a7ec <_dtoa_r+0x1ac>
 801a888:	9b04      	ldr	r3, [sp, #16]
 801a88a:	9a00      	ldr	r2, [sp, #0]
 801a88c:	1a9b      	subs	r3, r3, r2
 801a88e:	9304      	str	r3, [sp, #16]
 801a890:	4253      	negs	r3, r2
 801a892:	9307      	str	r3, [sp, #28]
 801a894:	2300      	movs	r3, #0
 801a896:	930a      	str	r3, [sp, #40]	; 0x28
 801a898:	e7bf      	b.n	801a81a <_dtoa_r+0x1da>
 801a89a:	2300      	movs	r3, #0
 801a89c:	9308      	str	r3, [sp, #32]
 801a89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	dc55      	bgt.n	801a950 <_dtoa_r+0x310>
 801a8a4:	2301      	movs	r3, #1
 801a8a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a8aa:	461a      	mov	r2, r3
 801a8ac:	9209      	str	r2, [sp, #36]	; 0x24
 801a8ae:	e00c      	b.n	801a8ca <_dtoa_r+0x28a>
 801a8b0:	2301      	movs	r3, #1
 801a8b2:	e7f3      	b.n	801a89c <_dtoa_r+0x25c>
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a8b8:	9308      	str	r3, [sp, #32]
 801a8ba:	9b00      	ldr	r3, [sp, #0]
 801a8bc:	4413      	add	r3, r2
 801a8be:	9302      	str	r3, [sp, #8]
 801a8c0:	3301      	adds	r3, #1
 801a8c2:	2b01      	cmp	r3, #1
 801a8c4:	9303      	str	r3, [sp, #12]
 801a8c6:	bfb8      	it	lt
 801a8c8:	2301      	movlt	r3, #1
 801a8ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a8cc:	2200      	movs	r2, #0
 801a8ce:	6042      	str	r2, [r0, #4]
 801a8d0:	2204      	movs	r2, #4
 801a8d2:	f102 0614 	add.w	r6, r2, #20
 801a8d6:	429e      	cmp	r6, r3
 801a8d8:	6841      	ldr	r1, [r0, #4]
 801a8da:	d93d      	bls.n	801a958 <_dtoa_r+0x318>
 801a8dc:	4620      	mov	r0, r4
 801a8de:	f000 fde7 	bl	801b4b0 <_Balloc>
 801a8e2:	9001      	str	r0, [sp, #4]
 801a8e4:	2800      	cmp	r0, #0
 801a8e6:	d13b      	bne.n	801a960 <_dtoa_r+0x320>
 801a8e8:	4b11      	ldr	r3, [pc, #68]	; (801a930 <_dtoa_r+0x2f0>)
 801a8ea:	4602      	mov	r2, r0
 801a8ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a8f0:	e6c0      	b.n	801a674 <_dtoa_r+0x34>
 801a8f2:	2301      	movs	r3, #1
 801a8f4:	e7df      	b.n	801a8b6 <_dtoa_r+0x276>
 801a8f6:	bf00      	nop
 801a8f8:	636f4361 	.word	0x636f4361
 801a8fc:	3fd287a7 	.word	0x3fd287a7
 801a900:	8b60c8b3 	.word	0x8b60c8b3
 801a904:	3fc68a28 	.word	0x3fc68a28
 801a908:	509f79fb 	.word	0x509f79fb
 801a90c:	3fd34413 	.word	0x3fd34413
 801a910:	080fb999 	.word	0x080fb999
 801a914:	080fb9b0 	.word	0x080fb9b0
 801a918:	7ff00000 	.word	0x7ff00000
 801a91c:	080fb995 	.word	0x080fb995
 801a920:	080fb98c 	.word	0x080fb98c
 801a924:	080fb969 	.word	0x080fb969
 801a928:	3ff80000 	.word	0x3ff80000
 801a92c:	080fbaa0 	.word	0x080fbaa0
 801a930:	080fba0b 	.word	0x080fba0b
 801a934:	2501      	movs	r5, #1
 801a936:	2300      	movs	r3, #0
 801a938:	9306      	str	r3, [sp, #24]
 801a93a:	9508      	str	r5, [sp, #32]
 801a93c:	f04f 33ff 	mov.w	r3, #4294967295
 801a940:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a944:	2200      	movs	r2, #0
 801a946:	2312      	movs	r3, #18
 801a948:	e7b0      	b.n	801a8ac <_dtoa_r+0x26c>
 801a94a:	2301      	movs	r3, #1
 801a94c:	9308      	str	r3, [sp, #32]
 801a94e:	e7f5      	b.n	801a93c <_dtoa_r+0x2fc>
 801a950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a952:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a956:	e7b8      	b.n	801a8ca <_dtoa_r+0x28a>
 801a958:	3101      	adds	r1, #1
 801a95a:	6041      	str	r1, [r0, #4]
 801a95c:	0052      	lsls	r2, r2, #1
 801a95e:	e7b8      	b.n	801a8d2 <_dtoa_r+0x292>
 801a960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a962:	9a01      	ldr	r2, [sp, #4]
 801a964:	601a      	str	r2, [r3, #0]
 801a966:	9b03      	ldr	r3, [sp, #12]
 801a968:	2b0e      	cmp	r3, #14
 801a96a:	f200 809d 	bhi.w	801aaa8 <_dtoa_r+0x468>
 801a96e:	2d00      	cmp	r5, #0
 801a970:	f000 809a 	beq.w	801aaa8 <_dtoa_r+0x468>
 801a974:	9b00      	ldr	r3, [sp, #0]
 801a976:	2b00      	cmp	r3, #0
 801a978:	dd32      	ble.n	801a9e0 <_dtoa_r+0x3a0>
 801a97a:	4ab7      	ldr	r2, [pc, #732]	; (801ac58 <_dtoa_r+0x618>)
 801a97c:	f003 030f 	and.w	r3, r3, #15
 801a980:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a984:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a988:	9b00      	ldr	r3, [sp, #0]
 801a98a:	05d8      	lsls	r0, r3, #23
 801a98c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801a990:	d516      	bpl.n	801a9c0 <_dtoa_r+0x380>
 801a992:	4bb2      	ldr	r3, [pc, #712]	; (801ac5c <_dtoa_r+0x61c>)
 801a994:	ec51 0b19 	vmov	r0, r1, d9
 801a998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a99c:	f7e5 ff76 	bl	800088c <__aeabi_ddiv>
 801a9a0:	f007 070f 	and.w	r7, r7, #15
 801a9a4:	4682      	mov	sl, r0
 801a9a6:	468b      	mov	fp, r1
 801a9a8:	2503      	movs	r5, #3
 801a9aa:	4eac      	ldr	r6, [pc, #688]	; (801ac5c <_dtoa_r+0x61c>)
 801a9ac:	b957      	cbnz	r7, 801a9c4 <_dtoa_r+0x384>
 801a9ae:	4642      	mov	r2, r8
 801a9b0:	464b      	mov	r3, r9
 801a9b2:	4650      	mov	r0, sl
 801a9b4:	4659      	mov	r1, fp
 801a9b6:	f7e5 ff69 	bl	800088c <__aeabi_ddiv>
 801a9ba:	4682      	mov	sl, r0
 801a9bc:	468b      	mov	fp, r1
 801a9be:	e028      	b.n	801aa12 <_dtoa_r+0x3d2>
 801a9c0:	2502      	movs	r5, #2
 801a9c2:	e7f2      	b.n	801a9aa <_dtoa_r+0x36a>
 801a9c4:	07f9      	lsls	r1, r7, #31
 801a9c6:	d508      	bpl.n	801a9da <_dtoa_r+0x39a>
 801a9c8:	4640      	mov	r0, r8
 801a9ca:	4649      	mov	r1, r9
 801a9cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a9d0:	f7e5 fe32 	bl	8000638 <__aeabi_dmul>
 801a9d4:	3501      	adds	r5, #1
 801a9d6:	4680      	mov	r8, r0
 801a9d8:	4689      	mov	r9, r1
 801a9da:	107f      	asrs	r7, r7, #1
 801a9dc:	3608      	adds	r6, #8
 801a9de:	e7e5      	b.n	801a9ac <_dtoa_r+0x36c>
 801a9e0:	f000 809b 	beq.w	801ab1a <_dtoa_r+0x4da>
 801a9e4:	9b00      	ldr	r3, [sp, #0]
 801a9e6:	4f9d      	ldr	r7, [pc, #628]	; (801ac5c <_dtoa_r+0x61c>)
 801a9e8:	425e      	negs	r6, r3
 801a9ea:	4b9b      	ldr	r3, [pc, #620]	; (801ac58 <_dtoa_r+0x618>)
 801a9ec:	f006 020f 	and.w	r2, r6, #15
 801a9f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9f8:	ec51 0b19 	vmov	r0, r1, d9
 801a9fc:	f7e5 fe1c 	bl	8000638 <__aeabi_dmul>
 801aa00:	1136      	asrs	r6, r6, #4
 801aa02:	4682      	mov	sl, r0
 801aa04:	468b      	mov	fp, r1
 801aa06:	2300      	movs	r3, #0
 801aa08:	2502      	movs	r5, #2
 801aa0a:	2e00      	cmp	r6, #0
 801aa0c:	d17a      	bne.n	801ab04 <_dtoa_r+0x4c4>
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d1d3      	bne.n	801a9ba <_dtoa_r+0x37a>
 801aa12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	f000 8082 	beq.w	801ab1e <_dtoa_r+0x4de>
 801aa1a:	4b91      	ldr	r3, [pc, #580]	; (801ac60 <_dtoa_r+0x620>)
 801aa1c:	2200      	movs	r2, #0
 801aa1e:	4650      	mov	r0, sl
 801aa20:	4659      	mov	r1, fp
 801aa22:	f7e6 f87b 	bl	8000b1c <__aeabi_dcmplt>
 801aa26:	2800      	cmp	r0, #0
 801aa28:	d079      	beq.n	801ab1e <_dtoa_r+0x4de>
 801aa2a:	9b03      	ldr	r3, [sp, #12]
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d076      	beq.n	801ab1e <_dtoa_r+0x4de>
 801aa30:	9b02      	ldr	r3, [sp, #8]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	dd36      	ble.n	801aaa4 <_dtoa_r+0x464>
 801aa36:	9b00      	ldr	r3, [sp, #0]
 801aa38:	4650      	mov	r0, sl
 801aa3a:	4659      	mov	r1, fp
 801aa3c:	1e5f      	subs	r7, r3, #1
 801aa3e:	2200      	movs	r2, #0
 801aa40:	4b88      	ldr	r3, [pc, #544]	; (801ac64 <_dtoa_r+0x624>)
 801aa42:	f7e5 fdf9 	bl	8000638 <__aeabi_dmul>
 801aa46:	9e02      	ldr	r6, [sp, #8]
 801aa48:	4682      	mov	sl, r0
 801aa4a:	468b      	mov	fp, r1
 801aa4c:	3501      	adds	r5, #1
 801aa4e:	4628      	mov	r0, r5
 801aa50:	f7e5 fd88 	bl	8000564 <__aeabi_i2d>
 801aa54:	4652      	mov	r2, sl
 801aa56:	465b      	mov	r3, fp
 801aa58:	f7e5 fdee 	bl	8000638 <__aeabi_dmul>
 801aa5c:	4b82      	ldr	r3, [pc, #520]	; (801ac68 <_dtoa_r+0x628>)
 801aa5e:	2200      	movs	r2, #0
 801aa60:	f7e5 fc34 	bl	80002cc <__adddf3>
 801aa64:	46d0      	mov	r8, sl
 801aa66:	46d9      	mov	r9, fp
 801aa68:	4682      	mov	sl, r0
 801aa6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801aa6e:	2e00      	cmp	r6, #0
 801aa70:	d158      	bne.n	801ab24 <_dtoa_r+0x4e4>
 801aa72:	4b7e      	ldr	r3, [pc, #504]	; (801ac6c <_dtoa_r+0x62c>)
 801aa74:	2200      	movs	r2, #0
 801aa76:	4640      	mov	r0, r8
 801aa78:	4649      	mov	r1, r9
 801aa7a:	f7e5 fc25 	bl	80002c8 <__aeabi_dsub>
 801aa7e:	4652      	mov	r2, sl
 801aa80:	465b      	mov	r3, fp
 801aa82:	4680      	mov	r8, r0
 801aa84:	4689      	mov	r9, r1
 801aa86:	f7e6 f867 	bl	8000b58 <__aeabi_dcmpgt>
 801aa8a:	2800      	cmp	r0, #0
 801aa8c:	f040 8295 	bne.w	801afba <_dtoa_r+0x97a>
 801aa90:	4652      	mov	r2, sl
 801aa92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801aa96:	4640      	mov	r0, r8
 801aa98:	4649      	mov	r1, r9
 801aa9a:	f7e6 f83f 	bl	8000b1c <__aeabi_dcmplt>
 801aa9e:	2800      	cmp	r0, #0
 801aaa0:	f040 8289 	bne.w	801afb6 <_dtoa_r+0x976>
 801aaa4:	ec5b ab19 	vmov	sl, fp, d9
 801aaa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	f2c0 8148 	blt.w	801ad40 <_dtoa_r+0x700>
 801aab0:	9a00      	ldr	r2, [sp, #0]
 801aab2:	2a0e      	cmp	r2, #14
 801aab4:	f300 8144 	bgt.w	801ad40 <_dtoa_r+0x700>
 801aab8:	4b67      	ldr	r3, [pc, #412]	; (801ac58 <_dtoa_r+0x618>)
 801aaba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801aabe:	e9d3 8900 	ldrd	r8, r9, [r3]
 801aac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	f280 80d5 	bge.w	801ac74 <_dtoa_r+0x634>
 801aaca:	9b03      	ldr	r3, [sp, #12]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	f300 80d1 	bgt.w	801ac74 <_dtoa_r+0x634>
 801aad2:	f040 826f 	bne.w	801afb4 <_dtoa_r+0x974>
 801aad6:	4b65      	ldr	r3, [pc, #404]	; (801ac6c <_dtoa_r+0x62c>)
 801aad8:	2200      	movs	r2, #0
 801aada:	4640      	mov	r0, r8
 801aadc:	4649      	mov	r1, r9
 801aade:	f7e5 fdab 	bl	8000638 <__aeabi_dmul>
 801aae2:	4652      	mov	r2, sl
 801aae4:	465b      	mov	r3, fp
 801aae6:	f7e6 f82d 	bl	8000b44 <__aeabi_dcmpge>
 801aaea:	9e03      	ldr	r6, [sp, #12]
 801aaec:	4637      	mov	r7, r6
 801aaee:	2800      	cmp	r0, #0
 801aaf0:	f040 8245 	bne.w	801af7e <_dtoa_r+0x93e>
 801aaf4:	9d01      	ldr	r5, [sp, #4]
 801aaf6:	2331      	movs	r3, #49	; 0x31
 801aaf8:	f805 3b01 	strb.w	r3, [r5], #1
 801aafc:	9b00      	ldr	r3, [sp, #0]
 801aafe:	3301      	adds	r3, #1
 801ab00:	9300      	str	r3, [sp, #0]
 801ab02:	e240      	b.n	801af86 <_dtoa_r+0x946>
 801ab04:	07f2      	lsls	r2, r6, #31
 801ab06:	d505      	bpl.n	801ab14 <_dtoa_r+0x4d4>
 801ab08:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ab0c:	f7e5 fd94 	bl	8000638 <__aeabi_dmul>
 801ab10:	3501      	adds	r5, #1
 801ab12:	2301      	movs	r3, #1
 801ab14:	1076      	asrs	r6, r6, #1
 801ab16:	3708      	adds	r7, #8
 801ab18:	e777      	b.n	801aa0a <_dtoa_r+0x3ca>
 801ab1a:	2502      	movs	r5, #2
 801ab1c:	e779      	b.n	801aa12 <_dtoa_r+0x3d2>
 801ab1e:	9f00      	ldr	r7, [sp, #0]
 801ab20:	9e03      	ldr	r6, [sp, #12]
 801ab22:	e794      	b.n	801aa4e <_dtoa_r+0x40e>
 801ab24:	9901      	ldr	r1, [sp, #4]
 801ab26:	4b4c      	ldr	r3, [pc, #304]	; (801ac58 <_dtoa_r+0x618>)
 801ab28:	4431      	add	r1, r6
 801ab2a:	910d      	str	r1, [sp, #52]	; 0x34
 801ab2c:	9908      	ldr	r1, [sp, #32]
 801ab2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801ab32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ab36:	2900      	cmp	r1, #0
 801ab38:	d043      	beq.n	801abc2 <_dtoa_r+0x582>
 801ab3a:	494d      	ldr	r1, [pc, #308]	; (801ac70 <_dtoa_r+0x630>)
 801ab3c:	2000      	movs	r0, #0
 801ab3e:	f7e5 fea5 	bl	800088c <__aeabi_ddiv>
 801ab42:	4652      	mov	r2, sl
 801ab44:	465b      	mov	r3, fp
 801ab46:	f7e5 fbbf 	bl	80002c8 <__aeabi_dsub>
 801ab4a:	9d01      	ldr	r5, [sp, #4]
 801ab4c:	4682      	mov	sl, r0
 801ab4e:	468b      	mov	fp, r1
 801ab50:	4649      	mov	r1, r9
 801ab52:	4640      	mov	r0, r8
 801ab54:	f7e6 f820 	bl	8000b98 <__aeabi_d2iz>
 801ab58:	4606      	mov	r6, r0
 801ab5a:	f7e5 fd03 	bl	8000564 <__aeabi_i2d>
 801ab5e:	4602      	mov	r2, r0
 801ab60:	460b      	mov	r3, r1
 801ab62:	4640      	mov	r0, r8
 801ab64:	4649      	mov	r1, r9
 801ab66:	f7e5 fbaf 	bl	80002c8 <__aeabi_dsub>
 801ab6a:	3630      	adds	r6, #48	; 0x30
 801ab6c:	f805 6b01 	strb.w	r6, [r5], #1
 801ab70:	4652      	mov	r2, sl
 801ab72:	465b      	mov	r3, fp
 801ab74:	4680      	mov	r8, r0
 801ab76:	4689      	mov	r9, r1
 801ab78:	f7e5 ffd0 	bl	8000b1c <__aeabi_dcmplt>
 801ab7c:	2800      	cmp	r0, #0
 801ab7e:	d163      	bne.n	801ac48 <_dtoa_r+0x608>
 801ab80:	4642      	mov	r2, r8
 801ab82:	464b      	mov	r3, r9
 801ab84:	4936      	ldr	r1, [pc, #216]	; (801ac60 <_dtoa_r+0x620>)
 801ab86:	2000      	movs	r0, #0
 801ab88:	f7e5 fb9e 	bl	80002c8 <__aeabi_dsub>
 801ab8c:	4652      	mov	r2, sl
 801ab8e:	465b      	mov	r3, fp
 801ab90:	f7e5 ffc4 	bl	8000b1c <__aeabi_dcmplt>
 801ab94:	2800      	cmp	r0, #0
 801ab96:	f040 80b5 	bne.w	801ad04 <_dtoa_r+0x6c4>
 801ab9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab9c:	429d      	cmp	r5, r3
 801ab9e:	d081      	beq.n	801aaa4 <_dtoa_r+0x464>
 801aba0:	4b30      	ldr	r3, [pc, #192]	; (801ac64 <_dtoa_r+0x624>)
 801aba2:	2200      	movs	r2, #0
 801aba4:	4650      	mov	r0, sl
 801aba6:	4659      	mov	r1, fp
 801aba8:	f7e5 fd46 	bl	8000638 <__aeabi_dmul>
 801abac:	4b2d      	ldr	r3, [pc, #180]	; (801ac64 <_dtoa_r+0x624>)
 801abae:	4682      	mov	sl, r0
 801abb0:	468b      	mov	fp, r1
 801abb2:	4640      	mov	r0, r8
 801abb4:	4649      	mov	r1, r9
 801abb6:	2200      	movs	r2, #0
 801abb8:	f7e5 fd3e 	bl	8000638 <__aeabi_dmul>
 801abbc:	4680      	mov	r8, r0
 801abbe:	4689      	mov	r9, r1
 801abc0:	e7c6      	b.n	801ab50 <_dtoa_r+0x510>
 801abc2:	4650      	mov	r0, sl
 801abc4:	4659      	mov	r1, fp
 801abc6:	f7e5 fd37 	bl	8000638 <__aeabi_dmul>
 801abca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801abcc:	9d01      	ldr	r5, [sp, #4]
 801abce:	930f      	str	r3, [sp, #60]	; 0x3c
 801abd0:	4682      	mov	sl, r0
 801abd2:	468b      	mov	fp, r1
 801abd4:	4649      	mov	r1, r9
 801abd6:	4640      	mov	r0, r8
 801abd8:	f7e5 ffde 	bl	8000b98 <__aeabi_d2iz>
 801abdc:	4606      	mov	r6, r0
 801abde:	f7e5 fcc1 	bl	8000564 <__aeabi_i2d>
 801abe2:	3630      	adds	r6, #48	; 0x30
 801abe4:	4602      	mov	r2, r0
 801abe6:	460b      	mov	r3, r1
 801abe8:	4640      	mov	r0, r8
 801abea:	4649      	mov	r1, r9
 801abec:	f7e5 fb6c 	bl	80002c8 <__aeabi_dsub>
 801abf0:	f805 6b01 	strb.w	r6, [r5], #1
 801abf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801abf6:	429d      	cmp	r5, r3
 801abf8:	4680      	mov	r8, r0
 801abfa:	4689      	mov	r9, r1
 801abfc:	f04f 0200 	mov.w	r2, #0
 801ac00:	d124      	bne.n	801ac4c <_dtoa_r+0x60c>
 801ac02:	4b1b      	ldr	r3, [pc, #108]	; (801ac70 <_dtoa_r+0x630>)
 801ac04:	4650      	mov	r0, sl
 801ac06:	4659      	mov	r1, fp
 801ac08:	f7e5 fb60 	bl	80002cc <__adddf3>
 801ac0c:	4602      	mov	r2, r0
 801ac0e:	460b      	mov	r3, r1
 801ac10:	4640      	mov	r0, r8
 801ac12:	4649      	mov	r1, r9
 801ac14:	f7e5 ffa0 	bl	8000b58 <__aeabi_dcmpgt>
 801ac18:	2800      	cmp	r0, #0
 801ac1a:	d173      	bne.n	801ad04 <_dtoa_r+0x6c4>
 801ac1c:	4652      	mov	r2, sl
 801ac1e:	465b      	mov	r3, fp
 801ac20:	4913      	ldr	r1, [pc, #76]	; (801ac70 <_dtoa_r+0x630>)
 801ac22:	2000      	movs	r0, #0
 801ac24:	f7e5 fb50 	bl	80002c8 <__aeabi_dsub>
 801ac28:	4602      	mov	r2, r0
 801ac2a:	460b      	mov	r3, r1
 801ac2c:	4640      	mov	r0, r8
 801ac2e:	4649      	mov	r1, r9
 801ac30:	f7e5 ff74 	bl	8000b1c <__aeabi_dcmplt>
 801ac34:	2800      	cmp	r0, #0
 801ac36:	f43f af35 	beq.w	801aaa4 <_dtoa_r+0x464>
 801ac3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ac3c:	1e6b      	subs	r3, r5, #1
 801ac3e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ac40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ac44:	2b30      	cmp	r3, #48	; 0x30
 801ac46:	d0f8      	beq.n	801ac3a <_dtoa_r+0x5fa>
 801ac48:	9700      	str	r7, [sp, #0]
 801ac4a:	e049      	b.n	801ace0 <_dtoa_r+0x6a0>
 801ac4c:	4b05      	ldr	r3, [pc, #20]	; (801ac64 <_dtoa_r+0x624>)
 801ac4e:	f7e5 fcf3 	bl	8000638 <__aeabi_dmul>
 801ac52:	4680      	mov	r8, r0
 801ac54:	4689      	mov	r9, r1
 801ac56:	e7bd      	b.n	801abd4 <_dtoa_r+0x594>
 801ac58:	080fbaa0 	.word	0x080fbaa0
 801ac5c:	080fba78 	.word	0x080fba78
 801ac60:	3ff00000 	.word	0x3ff00000
 801ac64:	40240000 	.word	0x40240000
 801ac68:	401c0000 	.word	0x401c0000
 801ac6c:	40140000 	.word	0x40140000
 801ac70:	3fe00000 	.word	0x3fe00000
 801ac74:	9d01      	ldr	r5, [sp, #4]
 801ac76:	4656      	mov	r6, sl
 801ac78:	465f      	mov	r7, fp
 801ac7a:	4642      	mov	r2, r8
 801ac7c:	464b      	mov	r3, r9
 801ac7e:	4630      	mov	r0, r6
 801ac80:	4639      	mov	r1, r7
 801ac82:	f7e5 fe03 	bl	800088c <__aeabi_ddiv>
 801ac86:	f7e5 ff87 	bl	8000b98 <__aeabi_d2iz>
 801ac8a:	4682      	mov	sl, r0
 801ac8c:	f7e5 fc6a 	bl	8000564 <__aeabi_i2d>
 801ac90:	4642      	mov	r2, r8
 801ac92:	464b      	mov	r3, r9
 801ac94:	f7e5 fcd0 	bl	8000638 <__aeabi_dmul>
 801ac98:	4602      	mov	r2, r0
 801ac9a:	460b      	mov	r3, r1
 801ac9c:	4630      	mov	r0, r6
 801ac9e:	4639      	mov	r1, r7
 801aca0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801aca4:	f7e5 fb10 	bl	80002c8 <__aeabi_dsub>
 801aca8:	f805 6b01 	strb.w	r6, [r5], #1
 801acac:	9e01      	ldr	r6, [sp, #4]
 801acae:	9f03      	ldr	r7, [sp, #12]
 801acb0:	1bae      	subs	r6, r5, r6
 801acb2:	42b7      	cmp	r7, r6
 801acb4:	4602      	mov	r2, r0
 801acb6:	460b      	mov	r3, r1
 801acb8:	d135      	bne.n	801ad26 <_dtoa_r+0x6e6>
 801acba:	f7e5 fb07 	bl	80002cc <__adddf3>
 801acbe:	4642      	mov	r2, r8
 801acc0:	464b      	mov	r3, r9
 801acc2:	4606      	mov	r6, r0
 801acc4:	460f      	mov	r7, r1
 801acc6:	f7e5 ff47 	bl	8000b58 <__aeabi_dcmpgt>
 801acca:	b9d0      	cbnz	r0, 801ad02 <_dtoa_r+0x6c2>
 801accc:	4642      	mov	r2, r8
 801acce:	464b      	mov	r3, r9
 801acd0:	4630      	mov	r0, r6
 801acd2:	4639      	mov	r1, r7
 801acd4:	f7e5 ff18 	bl	8000b08 <__aeabi_dcmpeq>
 801acd8:	b110      	cbz	r0, 801ace0 <_dtoa_r+0x6a0>
 801acda:	f01a 0f01 	tst.w	sl, #1
 801acde:	d110      	bne.n	801ad02 <_dtoa_r+0x6c2>
 801ace0:	4620      	mov	r0, r4
 801ace2:	ee18 1a10 	vmov	r1, s16
 801ace6:	f000 fc23 	bl	801b530 <_Bfree>
 801acea:	2300      	movs	r3, #0
 801acec:	9800      	ldr	r0, [sp, #0]
 801acee:	702b      	strb	r3, [r5, #0]
 801acf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801acf2:	3001      	adds	r0, #1
 801acf4:	6018      	str	r0, [r3, #0]
 801acf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	f43f acf1 	beq.w	801a6e0 <_dtoa_r+0xa0>
 801acfe:	601d      	str	r5, [r3, #0]
 801ad00:	e4ee      	b.n	801a6e0 <_dtoa_r+0xa0>
 801ad02:	9f00      	ldr	r7, [sp, #0]
 801ad04:	462b      	mov	r3, r5
 801ad06:	461d      	mov	r5, r3
 801ad08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ad0c:	2a39      	cmp	r2, #57	; 0x39
 801ad0e:	d106      	bne.n	801ad1e <_dtoa_r+0x6de>
 801ad10:	9a01      	ldr	r2, [sp, #4]
 801ad12:	429a      	cmp	r2, r3
 801ad14:	d1f7      	bne.n	801ad06 <_dtoa_r+0x6c6>
 801ad16:	9901      	ldr	r1, [sp, #4]
 801ad18:	2230      	movs	r2, #48	; 0x30
 801ad1a:	3701      	adds	r7, #1
 801ad1c:	700a      	strb	r2, [r1, #0]
 801ad1e:	781a      	ldrb	r2, [r3, #0]
 801ad20:	3201      	adds	r2, #1
 801ad22:	701a      	strb	r2, [r3, #0]
 801ad24:	e790      	b.n	801ac48 <_dtoa_r+0x608>
 801ad26:	4ba6      	ldr	r3, [pc, #664]	; (801afc0 <_dtoa_r+0x980>)
 801ad28:	2200      	movs	r2, #0
 801ad2a:	f7e5 fc85 	bl	8000638 <__aeabi_dmul>
 801ad2e:	2200      	movs	r2, #0
 801ad30:	2300      	movs	r3, #0
 801ad32:	4606      	mov	r6, r0
 801ad34:	460f      	mov	r7, r1
 801ad36:	f7e5 fee7 	bl	8000b08 <__aeabi_dcmpeq>
 801ad3a:	2800      	cmp	r0, #0
 801ad3c:	d09d      	beq.n	801ac7a <_dtoa_r+0x63a>
 801ad3e:	e7cf      	b.n	801ace0 <_dtoa_r+0x6a0>
 801ad40:	9a08      	ldr	r2, [sp, #32]
 801ad42:	2a00      	cmp	r2, #0
 801ad44:	f000 80d7 	beq.w	801aef6 <_dtoa_r+0x8b6>
 801ad48:	9a06      	ldr	r2, [sp, #24]
 801ad4a:	2a01      	cmp	r2, #1
 801ad4c:	f300 80ba 	bgt.w	801aec4 <_dtoa_r+0x884>
 801ad50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ad52:	2a00      	cmp	r2, #0
 801ad54:	f000 80b2 	beq.w	801aebc <_dtoa_r+0x87c>
 801ad58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ad5c:	9e07      	ldr	r6, [sp, #28]
 801ad5e:	9d04      	ldr	r5, [sp, #16]
 801ad60:	9a04      	ldr	r2, [sp, #16]
 801ad62:	441a      	add	r2, r3
 801ad64:	9204      	str	r2, [sp, #16]
 801ad66:	9a05      	ldr	r2, [sp, #20]
 801ad68:	2101      	movs	r1, #1
 801ad6a:	441a      	add	r2, r3
 801ad6c:	4620      	mov	r0, r4
 801ad6e:	9205      	str	r2, [sp, #20]
 801ad70:	f000 fc96 	bl	801b6a0 <__i2b>
 801ad74:	4607      	mov	r7, r0
 801ad76:	2d00      	cmp	r5, #0
 801ad78:	dd0c      	ble.n	801ad94 <_dtoa_r+0x754>
 801ad7a:	9b05      	ldr	r3, [sp, #20]
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	dd09      	ble.n	801ad94 <_dtoa_r+0x754>
 801ad80:	42ab      	cmp	r3, r5
 801ad82:	9a04      	ldr	r2, [sp, #16]
 801ad84:	bfa8      	it	ge
 801ad86:	462b      	movge	r3, r5
 801ad88:	1ad2      	subs	r2, r2, r3
 801ad8a:	9204      	str	r2, [sp, #16]
 801ad8c:	9a05      	ldr	r2, [sp, #20]
 801ad8e:	1aed      	subs	r5, r5, r3
 801ad90:	1ad3      	subs	r3, r2, r3
 801ad92:	9305      	str	r3, [sp, #20]
 801ad94:	9b07      	ldr	r3, [sp, #28]
 801ad96:	b31b      	cbz	r3, 801ade0 <_dtoa_r+0x7a0>
 801ad98:	9b08      	ldr	r3, [sp, #32]
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	f000 80af 	beq.w	801aefe <_dtoa_r+0x8be>
 801ada0:	2e00      	cmp	r6, #0
 801ada2:	dd13      	ble.n	801adcc <_dtoa_r+0x78c>
 801ada4:	4639      	mov	r1, r7
 801ada6:	4632      	mov	r2, r6
 801ada8:	4620      	mov	r0, r4
 801adaa:	f000 fd39 	bl	801b820 <__pow5mult>
 801adae:	ee18 2a10 	vmov	r2, s16
 801adb2:	4601      	mov	r1, r0
 801adb4:	4607      	mov	r7, r0
 801adb6:	4620      	mov	r0, r4
 801adb8:	f000 fc88 	bl	801b6cc <__multiply>
 801adbc:	ee18 1a10 	vmov	r1, s16
 801adc0:	4680      	mov	r8, r0
 801adc2:	4620      	mov	r0, r4
 801adc4:	f000 fbb4 	bl	801b530 <_Bfree>
 801adc8:	ee08 8a10 	vmov	s16, r8
 801adcc:	9b07      	ldr	r3, [sp, #28]
 801adce:	1b9a      	subs	r2, r3, r6
 801add0:	d006      	beq.n	801ade0 <_dtoa_r+0x7a0>
 801add2:	ee18 1a10 	vmov	r1, s16
 801add6:	4620      	mov	r0, r4
 801add8:	f000 fd22 	bl	801b820 <__pow5mult>
 801addc:	ee08 0a10 	vmov	s16, r0
 801ade0:	2101      	movs	r1, #1
 801ade2:	4620      	mov	r0, r4
 801ade4:	f000 fc5c 	bl	801b6a0 <__i2b>
 801ade8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adea:	2b00      	cmp	r3, #0
 801adec:	4606      	mov	r6, r0
 801adee:	f340 8088 	ble.w	801af02 <_dtoa_r+0x8c2>
 801adf2:	461a      	mov	r2, r3
 801adf4:	4601      	mov	r1, r0
 801adf6:	4620      	mov	r0, r4
 801adf8:	f000 fd12 	bl	801b820 <__pow5mult>
 801adfc:	9b06      	ldr	r3, [sp, #24]
 801adfe:	2b01      	cmp	r3, #1
 801ae00:	4606      	mov	r6, r0
 801ae02:	f340 8081 	ble.w	801af08 <_dtoa_r+0x8c8>
 801ae06:	f04f 0800 	mov.w	r8, #0
 801ae0a:	6933      	ldr	r3, [r6, #16]
 801ae0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801ae10:	6918      	ldr	r0, [r3, #16]
 801ae12:	f000 fbf5 	bl	801b600 <__hi0bits>
 801ae16:	f1c0 0020 	rsb	r0, r0, #32
 801ae1a:	9b05      	ldr	r3, [sp, #20]
 801ae1c:	4418      	add	r0, r3
 801ae1e:	f010 001f 	ands.w	r0, r0, #31
 801ae22:	f000 8092 	beq.w	801af4a <_dtoa_r+0x90a>
 801ae26:	f1c0 0320 	rsb	r3, r0, #32
 801ae2a:	2b04      	cmp	r3, #4
 801ae2c:	f340 808a 	ble.w	801af44 <_dtoa_r+0x904>
 801ae30:	f1c0 001c 	rsb	r0, r0, #28
 801ae34:	9b04      	ldr	r3, [sp, #16]
 801ae36:	4403      	add	r3, r0
 801ae38:	9304      	str	r3, [sp, #16]
 801ae3a:	9b05      	ldr	r3, [sp, #20]
 801ae3c:	4403      	add	r3, r0
 801ae3e:	4405      	add	r5, r0
 801ae40:	9305      	str	r3, [sp, #20]
 801ae42:	9b04      	ldr	r3, [sp, #16]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	dd07      	ble.n	801ae58 <_dtoa_r+0x818>
 801ae48:	ee18 1a10 	vmov	r1, s16
 801ae4c:	461a      	mov	r2, r3
 801ae4e:	4620      	mov	r0, r4
 801ae50:	f000 fd40 	bl	801b8d4 <__lshift>
 801ae54:	ee08 0a10 	vmov	s16, r0
 801ae58:	9b05      	ldr	r3, [sp, #20]
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	dd05      	ble.n	801ae6a <_dtoa_r+0x82a>
 801ae5e:	4631      	mov	r1, r6
 801ae60:	461a      	mov	r2, r3
 801ae62:	4620      	mov	r0, r4
 801ae64:	f000 fd36 	bl	801b8d4 <__lshift>
 801ae68:	4606      	mov	r6, r0
 801ae6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d06e      	beq.n	801af4e <_dtoa_r+0x90e>
 801ae70:	ee18 0a10 	vmov	r0, s16
 801ae74:	4631      	mov	r1, r6
 801ae76:	f000 fd9d 	bl	801b9b4 <__mcmp>
 801ae7a:	2800      	cmp	r0, #0
 801ae7c:	da67      	bge.n	801af4e <_dtoa_r+0x90e>
 801ae7e:	9b00      	ldr	r3, [sp, #0]
 801ae80:	3b01      	subs	r3, #1
 801ae82:	ee18 1a10 	vmov	r1, s16
 801ae86:	9300      	str	r3, [sp, #0]
 801ae88:	220a      	movs	r2, #10
 801ae8a:	2300      	movs	r3, #0
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	f000 fb71 	bl	801b574 <__multadd>
 801ae92:	9b08      	ldr	r3, [sp, #32]
 801ae94:	ee08 0a10 	vmov	s16, r0
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	f000 81b1 	beq.w	801b200 <_dtoa_r+0xbc0>
 801ae9e:	2300      	movs	r3, #0
 801aea0:	4639      	mov	r1, r7
 801aea2:	220a      	movs	r2, #10
 801aea4:	4620      	mov	r0, r4
 801aea6:	f000 fb65 	bl	801b574 <__multadd>
 801aeaa:	9b02      	ldr	r3, [sp, #8]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	4607      	mov	r7, r0
 801aeb0:	f300 808e 	bgt.w	801afd0 <_dtoa_r+0x990>
 801aeb4:	9b06      	ldr	r3, [sp, #24]
 801aeb6:	2b02      	cmp	r3, #2
 801aeb8:	dc51      	bgt.n	801af5e <_dtoa_r+0x91e>
 801aeba:	e089      	b.n	801afd0 <_dtoa_r+0x990>
 801aebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aebe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801aec2:	e74b      	b.n	801ad5c <_dtoa_r+0x71c>
 801aec4:	9b03      	ldr	r3, [sp, #12]
 801aec6:	1e5e      	subs	r6, r3, #1
 801aec8:	9b07      	ldr	r3, [sp, #28]
 801aeca:	42b3      	cmp	r3, r6
 801aecc:	bfbf      	itttt	lt
 801aece:	9b07      	ldrlt	r3, [sp, #28]
 801aed0:	9607      	strlt	r6, [sp, #28]
 801aed2:	1af2      	sublt	r2, r6, r3
 801aed4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801aed6:	bfb6      	itet	lt
 801aed8:	189b      	addlt	r3, r3, r2
 801aeda:	1b9e      	subge	r6, r3, r6
 801aedc:	930a      	strlt	r3, [sp, #40]	; 0x28
 801aede:	9b03      	ldr	r3, [sp, #12]
 801aee0:	bfb8      	it	lt
 801aee2:	2600      	movlt	r6, #0
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	bfb7      	itett	lt
 801aee8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801aeec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801aef0:	1a9d      	sublt	r5, r3, r2
 801aef2:	2300      	movlt	r3, #0
 801aef4:	e734      	b.n	801ad60 <_dtoa_r+0x720>
 801aef6:	9e07      	ldr	r6, [sp, #28]
 801aef8:	9d04      	ldr	r5, [sp, #16]
 801aefa:	9f08      	ldr	r7, [sp, #32]
 801aefc:	e73b      	b.n	801ad76 <_dtoa_r+0x736>
 801aefe:	9a07      	ldr	r2, [sp, #28]
 801af00:	e767      	b.n	801add2 <_dtoa_r+0x792>
 801af02:	9b06      	ldr	r3, [sp, #24]
 801af04:	2b01      	cmp	r3, #1
 801af06:	dc18      	bgt.n	801af3a <_dtoa_r+0x8fa>
 801af08:	f1ba 0f00 	cmp.w	sl, #0
 801af0c:	d115      	bne.n	801af3a <_dtoa_r+0x8fa>
 801af0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801af12:	b993      	cbnz	r3, 801af3a <_dtoa_r+0x8fa>
 801af14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801af18:	0d1b      	lsrs	r3, r3, #20
 801af1a:	051b      	lsls	r3, r3, #20
 801af1c:	b183      	cbz	r3, 801af40 <_dtoa_r+0x900>
 801af1e:	9b04      	ldr	r3, [sp, #16]
 801af20:	3301      	adds	r3, #1
 801af22:	9304      	str	r3, [sp, #16]
 801af24:	9b05      	ldr	r3, [sp, #20]
 801af26:	3301      	adds	r3, #1
 801af28:	9305      	str	r3, [sp, #20]
 801af2a:	f04f 0801 	mov.w	r8, #1
 801af2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af30:	2b00      	cmp	r3, #0
 801af32:	f47f af6a 	bne.w	801ae0a <_dtoa_r+0x7ca>
 801af36:	2001      	movs	r0, #1
 801af38:	e76f      	b.n	801ae1a <_dtoa_r+0x7da>
 801af3a:	f04f 0800 	mov.w	r8, #0
 801af3e:	e7f6      	b.n	801af2e <_dtoa_r+0x8ee>
 801af40:	4698      	mov	r8, r3
 801af42:	e7f4      	b.n	801af2e <_dtoa_r+0x8ee>
 801af44:	f43f af7d 	beq.w	801ae42 <_dtoa_r+0x802>
 801af48:	4618      	mov	r0, r3
 801af4a:	301c      	adds	r0, #28
 801af4c:	e772      	b.n	801ae34 <_dtoa_r+0x7f4>
 801af4e:	9b03      	ldr	r3, [sp, #12]
 801af50:	2b00      	cmp	r3, #0
 801af52:	dc37      	bgt.n	801afc4 <_dtoa_r+0x984>
 801af54:	9b06      	ldr	r3, [sp, #24]
 801af56:	2b02      	cmp	r3, #2
 801af58:	dd34      	ble.n	801afc4 <_dtoa_r+0x984>
 801af5a:	9b03      	ldr	r3, [sp, #12]
 801af5c:	9302      	str	r3, [sp, #8]
 801af5e:	9b02      	ldr	r3, [sp, #8]
 801af60:	b96b      	cbnz	r3, 801af7e <_dtoa_r+0x93e>
 801af62:	4631      	mov	r1, r6
 801af64:	2205      	movs	r2, #5
 801af66:	4620      	mov	r0, r4
 801af68:	f000 fb04 	bl	801b574 <__multadd>
 801af6c:	4601      	mov	r1, r0
 801af6e:	4606      	mov	r6, r0
 801af70:	ee18 0a10 	vmov	r0, s16
 801af74:	f000 fd1e 	bl	801b9b4 <__mcmp>
 801af78:	2800      	cmp	r0, #0
 801af7a:	f73f adbb 	bgt.w	801aaf4 <_dtoa_r+0x4b4>
 801af7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af80:	9d01      	ldr	r5, [sp, #4]
 801af82:	43db      	mvns	r3, r3
 801af84:	9300      	str	r3, [sp, #0]
 801af86:	f04f 0800 	mov.w	r8, #0
 801af8a:	4631      	mov	r1, r6
 801af8c:	4620      	mov	r0, r4
 801af8e:	f000 facf 	bl	801b530 <_Bfree>
 801af92:	2f00      	cmp	r7, #0
 801af94:	f43f aea4 	beq.w	801ace0 <_dtoa_r+0x6a0>
 801af98:	f1b8 0f00 	cmp.w	r8, #0
 801af9c:	d005      	beq.n	801afaa <_dtoa_r+0x96a>
 801af9e:	45b8      	cmp	r8, r7
 801afa0:	d003      	beq.n	801afaa <_dtoa_r+0x96a>
 801afa2:	4641      	mov	r1, r8
 801afa4:	4620      	mov	r0, r4
 801afa6:	f000 fac3 	bl	801b530 <_Bfree>
 801afaa:	4639      	mov	r1, r7
 801afac:	4620      	mov	r0, r4
 801afae:	f000 fabf 	bl	801b530 <_Bfree>
 801afb2:	e695      	b.n	801ace0 <_dtoa_r+0x6a0>
 801afb4:	2600      	movs	r6, #0
 801afb6:	4637      	mov	r7, r6
 801afb8:	e7e1      	b.n	801af7e <_dtoa_r+0x93e>
 801afba:	9700      	str	r7, [sp, #0]
 801afbc:	4637      	mov	r7, r6
 801afbe:	e599      	b.n	801aaf4 <_dtoa_r+0x4b4>
 801afc0:	40240000 	.word	0x40240000
 801afc4:	9b08      	ldr	r3, [sp, #32]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	f000 80ca 	beq.w	801b160 <_dtoa_r+0xb20>
 801afcc:	9b03      	ldr	r3, [sp, #12]
 801afce:	9302      	str	r3, [sp, #8]
 801afd0:	2d00      	cmp	r5, #0
 801afd2:	dd05      	ble.n	801afe0 <_dtoa_r+0x9a0>
 801afd4:	4639      	mov	r1, r7
 801afd6:	462a      	mov	r2, r5
 801afd8:	4620      	mov	r0, r4
 801afda:	f000 fc7b 	bl	801b8d4 <__lshift>
 801afde:	4607      	mov	r7, r0
 801afe0:	f1b8 0f00 	cmp.w	r8, #0
 801afe4:	d05b      	beq.n	801b09e <_dtoa_r+0xa5e>
 801afe6:	6879      	ldr	r1, [r7, #4]
 801afe8:	4620      	mov	r0, r4
 801afea:	f000 fa61 	bl	801b4b0 <_Balloc>
 801afee:	4605      	mov	r5, r0
 801aff0:	b928      	cbnz	r0, 801affe <_dtoa_r+0x9be>
 801aff2:	4b87      	ldr	r3, [pc, #540]	; (801b210 <_dtoa_r+0xbd0>)
 801aff4:	4602      	mov	r2, r0
 801aff6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801affa:	f7ff bb3b 	b.w	801a674 <_dtoa_r+0x34>
 801affe:	693a      	ldr	r2, [r7, #16]
 801b000:	3202      	adds	r2, #2
 801b002:	0092      	lsls	r2, r2, #2
 801b004:	f107 010c 	add.w	r1, r7, #12
 801b008:	300c      	adds	r0, #12
 801b00a:	f7fe fb47 	bl	801969c <memcpy>
 801b00e:	2201      	movs	r2, #1
 801b010:	4629      	mov	r1, r5
 801b012:	4620      	mov	r0, r4
 801b014:	f000 fc5e 	bl	801b8d4 <__lshift>
 801b018:	9b01      	ldr	r3, [sp, #4]
 801b01a:	f103 0901 	add.w	r9, r3, #1
 801b01e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b022:	4413      	add	r3, r2
 801b024:	9305      	str	r3, [sp, #20]
 801b026:	f00a 0301 	and.w	r3, sl, #1
 801b02a:	46b8      	mov	r8, r7
 801b02c:	9304      	str	r3, [sp, #16]
 801b02e:	4607      	mov	r7, r0
 801b030:	4631      	mov	r1, r6
 801b032:	ee18 0a10 	vmov	r0, s16
 801b036:	f7ff fa75 	bl	801a524 <quorem>
 801b03a:	4641      	mov	r1, r8
 801b03c:	9002      	str	r0, [sp, #8]
 801b03e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b042:	ee18 0a10 	vmov	r0, s16
 801b046:	f000 fcb5 	bl	801b9b4 <__mcmp>
 801b04a:	463a      	mov	r2, r7
 801b04c:	9003      	str	r0, [sp, #12]
 801b04e:	4631      	mov	r1, r6
 801b050:	4620      	mov	r0, r4
 801b052:	f000 fccb 	bl	801b9ec <__mdiff>
 801b056:	68c2      	ldr	r2, [r0, #12]
 801b058:	f109 3bff 	add.w	fp, r9, #4294967295
 801b05c:	4605      	mov	r5, r0
 801b05e:	bb02      	cbnz	r2, 801b0a2 <_dtoa_r+0xa62>
 801b060:	4601      	mov	r1, r0
 801b062:	ee18 0a10 	vmov	r0, s16
 801b066:	f000 fca5 	bl	801b9b4 <__mcmp>
 801b06a:	4602      	mov	r2, r0
 801b06c:	4629      	mov	r1, r5
 801b06e:	4620      	mov	r0, r4
 801b070:	9207      	str	r2, [sp, #28]
 801b072:	f000 fa5d 	bl	801b530 <_Bfree>
 801b076:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b07a:	ea43 0102 	orr.w	r1, r3, r2
 801b07e:	9b04      	ldr	r3, [sp, #16]
 801b080:	430b      	orrs	r3, r1
 801b082:	464d      	mov	r5, r9
 801b084:	d10f      	bne.n	801b0a6 <_dtoa_r+0xa66>
 801b086:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b08a:	d02a      	beq.n	801b0e2 <_dtoa_r+0xaa2>
 801b08c:	9b03      	ldr	r3, [sp, #12]
 801b08e:	2b00      	cmp	r3, #0
 801b090:	dd02      	ble.n	801b098 <_dtoa_r+0xa58>
 801b092:	9b02      	ldr	r3, [sp, #8]
 801b094:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801b098:	f88b a000 	strb.w	sl, [fp]
 801b09c:	e775      	b.n	801af8a <_dtoa_r+0x94a>
 801b09e:	4638      	mov	r0, r7
 801b0a0:	e7ba      	b.n	801b018 <_dtoa_r+0x9d8>
 801b0a2:	2201      	movs	r2, #1
 801b0a4:	e7e2      	b.n	801b06c <_dtoa_r+0xa2c>
 801b0a6:	9b03      	ldr	r3, [sp, #12]
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	db04      	blt.n	801b0b6 <_dtoa_r+0xa76>
 801b0ac:	9906      	ldr	r1, [sp, #24]
 801b0ae:	430b      	orrs	r3, r1
 801b0b0:	9904      	ldr	r1, [sp, #16]
 801b0b2:	430b      	orrs	r3, r1
 801b0b4:	d122      	bne.n	801b0fc <_dtoa_r+0xabc>
 801b0b6:	2a00      	cmp	r2, #0
 801b0b8:	ddee      	ble.n	801b098 <_dtoa_r+0xa58>
 801b0ba:	ee18 1a10 	vmov	r1, s16
 801b0be:	2201      	movs	r2, #1
 801b0c0:	4620      	mov	r0, r4
 801b0c2:	f000 fc07 	bl	801b8d4 <__lshift>
 801b0c6:	4631      	mov	r1, r6
 801b0c8:	ee08 0a10 	vmov	s16, r0
 801b0cc:	f000 fc72 	bl	801b9b4 <__mcmp>
 801b0d0:	2800      	cmp	r0, #0
 801b0d2:	dc03      	bgt.n	801b0dc <_dtoa_r+0xa9c>
 801b0d4:	d1e0      	bne.n	801b098 <_dtoa_r+0xa58>
 801b0d6:	f01a 0f01 	tst.w	sl, #1
 801b0da:	d0dd      	beq.n	801b098 <_dtoa_r+0xa58>
 801b0dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b0e0:	d1d7      	bne.n	801b092 <_dtoa_r+0xa52>
 801b0e2:	2339      	movs	r3, #57	; 0x39
 801b0e4:	f88b 3000 	strb.w	r3, [fp]
 801b0e8:	462b      	mov	r3, r5
 801b0ea:	461d      	mov	r5, r3
 801b0ec:	3b01      	subs	r3, #1
 801b0ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b0f2:	2a39      	cmp	r2, #57	; 0x39
 801b0f4:	d071      	beq.n	801b1da <_dtoa_r+0xb9a>
 801b0f6:	3201      	adds	r2, #1
 801b0f8:	701a      	strb	r2, [r3, #0]
 801b0fa:	e746      	b.n	801af8a <_dtoa_r+0x94a>
 801b0fc:	2a00      	cmp	r2, #0
 801b0fe:	dd07      	ble.n	801b110 <_dtoa_r+0xad0>
 801b100:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b104:	d0ed      	beq.n	801b0e2 <_dtoa_r+0xaa2>
 801b106:	f10a 0301 	add.w	r3, sl, #1
 801b10a:	f88b 3000 	strb.w	r3, [fp]
 801b10e:	e73c      	b.n	801af8a <_dtoa_r+0x94a>
 801b110:	9b05      	ldr	r3, [sp, #20]
 801b112:	f809 ac01 	strb.w	sl, [r9, #-1]
 801b116:	4599      	cmp	r9, r3
 801b118:	d047      	beq.n	801b1aa <_dtoa_r+0xb6a>
 801b11a:	ee18 1a10 	vmov	r1, s16
 801b11e:	2300      	movs	r3, #0
 801b120:	220a      	movs	r2, #10
 801b122:	4620      	mov	r0, r4
 801b124:	f000 fa26 	bl	801b574 <__multadd>
 801b128:	45b8      	cmp	r8, r7
 801b12a:	ee08 0a10 	vmov	s16, r0
 801b12e:	f04f 0300 	mov.w	r3, #0
 801b132:	f04f 020a 	mov.w	r2, #10
 801b136:	4641      	mov	r1, r8
 801b138:	4620      	mov	r0, r4
 801b13a:	d106      	bne.n	801b14a <_dtoa_r+0xb0a>
 801b13c:	f000 fa1a 	bl	801b574 <__multadd>
 801b140:	4680      	mov	r8, r0
 801b142:	4607      	mov	r7, r0
 801b144:	f109 0901 	add.w	r9, r9, #1
 801b148:	e772      	b.n	801b030 <_dtoa_r+0x9f0>
 801b14a:	f000 fa13 	bl	801b574 <__multadd>
 801b14e:	4639      	mov	r1, r7
 801b150:	4680      	mov	r8, r0
 801b152:	2300      	movs	r3, #0
 801b154:	220a      	movs	r2, #10
 801b156:	4620      	mov	r0, r4
 801b158:	f000 fa0c 	bl	801b574 <__multadd>
 801b15c:	4607      	mov	r7, r0
 801b15e:	e7f1      	b.n	801b144 <_dtoa_r+0xb04>
 801b160:	9b03      	ldr	r3, [sp, #12]
 801b162:	9302      	str	r3, [sp, #8]
 801b164:	9d01      	ldr	r5, [sp, #4]
 801b166:	ee18 0a10 	vmov	r0, s16
 801b16a:	4631      	mov	r1, r6
 801b16c:	f7ff f9da 	bl	801a524 <quorem>
 801b170:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b174:	9b01      	ldr	r3, [sp, #4]
 801b176:	f805 ab01 	strb.w	sl, [r5], #1
 801b17a:	1aea      	subs	r2, r5, r3
 801b17c:	9b02      	ldr	r3, [sp, #8]
 801b17e:	4293      	cmp	r3, r2
 801b180:	dd09      	ble.n	801b196 <_dtoa_r+0xb56>
 801b182:	ee18 1a10 	vmov	r1, s16
 801b186:	2300      	movs	r3, #0
 801b188:	220a      	movs	r2, #10
 801b18a:	4620      	mov	r0, r4
 801b18c:	f000 f9f2 	bl	801b574 <__multadd>
 801b190:	ee08 0a10 	vmov	s16, r0
 801b194:	e7e7      	b.n	801b166 <_dtoa_r+0xb26>
 801b196:	9b02      	ldr	r3, [sp, #8]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	bfc8      	it	gt
 801b19c:	461d      	movgt	r5, r3
 801b19e:	9b01      	ldr	r3, [sp, #4]
 801b1a0:	bfd8      	it	le
 801b1a2:	2501      	movle	r5, #1
 801b1a4:	441d      	add	r5, r3
 801b1a6:	f04f 0800 	mov.w	r8, #0
 801b1aa:	ee18 1a10 	vmov	r1, s16
 801b1ae:	2201      	movs	r2, #1
 801b1b0:	4620      	mov	r0, r4
 801b1b2:	f000 fb8f 	bl	801b8d4 <__lshift>
 801b1b6:	4631      	mov	r1, r6
 801b1b8:	ee08 0a10 	vmov	s16, r0
 801b1bc:	f000 fbfa 	bl	801b9b4 <__mcmp>
 801b1c0:	2800      	cmp	r0, #0
 801b1c2:	dc91      	bgt.n	801b0e8 <_dtoa_r+0xaa8>
 801b1c4:	d102      	bne.n	801b1cc <_dtoa_r+0xb8c>
 801b1c6:	f01a 0f01 	tst.w	sl, #1
 801b1ca:	d18d      	bne.n	801b0e8 <_dtoa_r+0xaa8>
 801b1cc:	462b      	mov	r3, r5
 801b1ce:	461d      	mov	r5, r3
 801b1d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b1d4:	2a30      	cmp	r2, #48	; 0x30
 801b1d6:	d0fa      	beq.n	801b1ce <_dtoa_r+0xb8e>
 801b1d8:	e6d7      	b.n	801af8a <_dtoa_r+0x94a>
 801b1da:	9a01      	ldr	r2, [sp, #4]
 801b1dc:	429a      	cmp	r2, r3
 801b1de:	d184      	bne.n	801b0ea <_dtoa_r+0xaaa>
 801b1e0:	9b00      	ldr	r3, [sp, #0]
 801b1e2:	3301      	adds	r3, #1
 801b1e4:	9300      	str	r3, [sp, #0]
 801b1e6:	2331      	movs	r3, #49	; 0x31
 801b1e8:	7013      	strb	r3, [r2, #0]
 801b1ea:	e6ce      	b.n	801af8a <_dtoa_r+0x94a>
 801b1ec:	4b09      	ldr	r3, [pc, #36]	; (801b214 <_dtoa_r+0xbd4>)
 801b1ee:	f7ff ba95 	b.w	801a71c <_dtoa_r+0xdc>
 801b1f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	f47f aa6e 	bne.w	801a6d6 <_dtoa_r+0x96>
 801b1fa:	4b07      	ldr	r3, [pc, #28]	; (801b218 <_dtoa_r+0xbd8>)
 801b1fc:	f7ff ba8e 	b.w	801a71c <_dtoa_r+0xdc>
 801b200:	9b02      	ldr	r3, [sp, #8]
 801b202:	2b00      	cmp	r3, #0
 801b204:	dcae      	bgt.n	801b164 <_dtoa_r+0xb24>
 801b206:	9b06      	ldr	r3, [sp, #24]
 801b208:	2b02      	cmp	r3, #2
 801b20a:	f73f aea8 	bgt.w	801af5e <_dtoa_r+0x91e>
 801b20e:	e7a9      	b.n	801b164 <_dtoa_r+0xb24>
 801b210:	080fba0b 	.word	0x080fba0b
 801b214:	080fb968 	.word	0x080fb968
 801b218:	080fb98c 	.word	0x080fb98c

0801b21c <__sflush_r>:
 801b21c:	898a      	ldrh	r2, [r1, #12]
 801b21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b222:	4605      	mov	r5, r0
 801b224:	0710      	lsls	r0, r2, #28
 801b226:	460c      	mov	r4, r1
 801b228:	d458      	bmi.n	801b2dc <__sflush_r+0xc0>
 801b22a:	684b      	ldr	r3, [r1, #4]
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	dc05      	bgt.n	801b23c <__sflush_r+0x20>
 801b230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b232:	2b00      	cmp	r3, #0
 801b234:	dc02      	bgt.n	801b23c <__sflush_r+0x20>
 801b236:	2000      	movs	r0, #0
 801b238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b23c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b23e:	2e00      	cmp	r6, #0
 801b240:	d0f9      	beq.n	801b236 <__sflush_r+0x1a>
 801b242:	2300      	movs	r3, #0
 801b244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b248:	682f      	ldr	r7, [r5, #0]
 801b24a:	602b      	str	r3, [r5, #0]
 801b24c:	d032      	beq.n	801b2b4 <__sflush_r+0x98>
 801b24e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b250:	89a3      	ldrh	r3, [r4, #12]
 801b252:	075a      	lsls	r2, r3, #29
 801b254:	d505      	bpl.n	801b262 <__sflush_r+0x46>
 801b256:	6863      	ldr	r3, [r4, #4]
 801b258:	1ac0      	subs	r0, r0, r3
 801b25a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b25c:	b10b      	cbz	r3, 801b262 <__sflush_r+0x46>
 801b25e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b260:	1ac0      	subs	r0, r0, r3
 801b262:	2300      	movs	r3, #0
 801b264:	4602      	mov	r2, r0
 801b266:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b268:	6a21      	ldr	r1, [r4, #32]
 801b26a:	4628      	mov	r0, r5
 801b26c:	47b0      	blx	r6
 801b26e:	1c43      	adds	r3, r0, #1
 801b270:	89a3      	ldrh	r3, [r4, #12]
 801b272:	d106      	bne.n	801b282 <__sflush_r+0x66>
 801b274:	6829      	ldr	r1, [r5, #0]
 801b276:	291d      	cmp	r1, #29
 801b278:	d82c      	bhi.n	801b2d4 <__sflush_r+0xb8>
 801b27a:	4a2a      	ldr	r2, [pc, #168]	; (801b324 <__sflush_r+0x108>)
 801b27c:	40ca      	lsrs	r2, r1
 801b27e:	07d6      	lsls	r6, r2, #31
 801b280:	d528      	bpl.n	801b2d4 <__sflush_r+0xb8>
 801b282:	2200      	movs	r2, #0
 801b284:	6062      	str	r2, [r4, #4]
 801b286:	04d9      	lsls	r1, r3, #19
 801b288:	6922      	ldr	r2, [r4, #16]
 801b28a:	6022      	str	r2, [r4, #0]
 801b28c:	d504      	bpl.n	801b298 <__sflush_r+0x7c>
 801b28e:	1c42      	adds	r2, r0, #1
 801b290:	d101      	bne.n	801b296 <__sflush_r+0x7a>
 801b292:	682b      	ldr	r3, [r5, #0]
 801b294:	b903      	cbnz	r3, 801b298 <__sflush_r+0x7c>
 801b296:	6560      	str	r0, [r4, #84]	; 0x54
 801b298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b29a:	602f      	str	r7, [r5, #0]
 801b29c:	2900      	cmp	r1, #0
 801b29e:	d0ca      	beq.n	801b236 <__sflush_r+0x1a>
 801b2a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b2a4:	4299      	cmp	r1, r3
 801b2a6:	d002      	beq.n	801b2ae <__sflush_r+0x92>
 801b2a8:	4628      	mov	r0, r5
 801b2aa:	f7fe fa0d 	bl	80196c8 <_free_r>
 801b2ae:	2000      	movs	r0, #0
 801b2b0:	6360      	str	r0, [r4, #52]	; 0x34
 801b2b2:	e7c1      	b.n	801b238 <__sflush_r+0x1c>
 801b2b4:	6a21      	ldr	r1, [r4, #32]
 801b2b6:	2301      	movs	r3, #1
 801b2b8:	4628      	mov	r0, r5
 801b2ba:	47b0      	blx	r6
 801b2bc:	1c41      	adds	r1, r0, #1
 801b2be:	d1c7      	bne.n	801b250 <__sflush_r+0x34>
 801b2c0:	682b      	ldr	r3, [r5, #0]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d0c4      	beq.n	801b250 <__sflush_r+0x34>
 801b2c6:	2b1d      	cmp	r3, #29
 801b2c8:	d001      	beq.n	801b2ce <__sflush_r+0xb2>
 801b2ca:	2b16      	cmp	r3, #22
 801b2cc:	d101      	bne.n	801b2d2 <__sflush_r+0xb6>
 801b2ce:	602f      	str	r7, [r5, #0]
 801b2d0:	e7b1      	b.n	801b236 <__sflush_r+0x1a>
 801b2d2:	89a3      	ldrh	r3, [r4, #12]
 801b2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2d8:	81a3      	strh	r3, [r4, #12]
 801b2da:	e7ad      	b.n	801b238 <__sflush_r+0x1c>
 801b2dc:	690f      	ldr	r7, [r1, #16]
 801b2de:	2f00      	cmp	r7, #0
 801b2e0:	d0a9      	beq.n	801b236 <__sflush_r+0x1a>
 801b2e2:	0793      	lsls	r3, r2, #30
 801b2e4:	680e      	ldr	r6, [r1, #0]
 801b2e6:	bf08      	it	eq
 801b2e8:	694b      	ldreq	r3, [r1, #20]
 801b2ea:	600f      	str	r7, [r1, #0]
 801b2ec:	bf18      	it	ne
 801b2ee:	2300      	movne	r3, #0
 801b2f0:	eba6 0807 	sub.w	r8, r6, r7
 801b2f4:	608b      	str	r3, [r1, #8]
 801b2f6:	f1b8 0f00 	cmp.w	r8, #0
 801b2fa:	dd9c      	ble.n	801b236 <__sflush_r+0x1a>
 801b2fc:	6a21      	ldr	r1, [r4, #32]
 801b2fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b300:	4643      	mov	r3, r8
 801b302:	463a      	mov	r2, r7
 801b304:	4628      	mov	r0, r5
 801b306:	47b0      	blx	r6
 801b308:	2800      	cmp	r0, #0
 801b30a:	dc06      	bgt.n	801b31a <__sflush_r+0xfe>
 801b30c:	89a3      	ldrh	r3, [r4, #12]
 801b30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b312:	81a3      	strh	r3, [r4, #12]
 801b314:	f04f 30ff 	mov.w	r0, #4294967295
 801b318:	e78e      	b.n	801b238 <__sflush_r+0x1c>
 801b31a:	4407      	add	r7, r0
 801b31c:	eba8 0800 	sub.w	r8, r8, r0
 801b320:	e7e9      	b.n	801b2f6 <__sflush_r+0xda>
 801b322:	bf00      	nop
 801b324:	20400001 	.word	0x20400001

0801b328 <_fflush_r>:
 801b328:	b538      	push	{r3, r4, r5, lr}
 801b32a:	690b      	ldr	r3, [r1, #16]
 801b32c:	4605      	mov	r5, r0
 801b32e:	460c      	mov	r4, r1
 801b330:	b913      	cbnz	r3, 801b338 <_fflush_r+0x10>
 801b332:	2500      	movs	r5, #0
 801b334:	4628      	mov	r0, r5
 801b336:	bd38      	pop	{r3, r4, r5, pc}
 801b338:	b118      	cbz	r0, 801b342 <_fflush_r+0x1a>
 801b33a:	6983      	ldr	r3, [r0, #24]
 801b33c:	b90b      	cbnz	r3, 801b342 <_fflush_r+0x1a>
 801b33e:	f7fe f8df 	bl	8019500 <__sinit>
 801b342:	4b14      	ldr	r3, [pc, #80]	; (801b394 <_fflush_r+0x6c>)
 801b344:	429c      	cmp	r4, r3
 801b346:	d11b      	bne.n	801b380 <_fflush_r+0x58>
 801b348:	686c      	ldr	r4, [r5, #4]
 801b34a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d0ef      	beq.n	801b332 <_fflush_r+0xa>
 801b352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b354:	07d0      	lsls	r0, r2, #31
 801b356:	d404      	bmi.n	801b362 <_fflush_r+0x3a>
 801b358:	0599      	lsls	r1, r3, #22
 801b35a:	d402      	bmi.n	801b362 <_fflush_r+0x3a>
 801b35c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b35e:	f7fe f992 	bl	8019686 <__retarget_lock_acquire_recursive>
 801b362:	4628      	mov	r0, r5
 801b364:	4621      	mov	r1, r4
 801b366:	f7ff ff59 	bl	801b21c <__sflush_r>
 801b36a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b36c:	07da      	lsls	r2, r3, #31
 801b36e:	4605      	mov	r5, r0
 801b370:	d4e0      	bmi.n	801b334 <_fflush_r+0xc>
 801b372:	89a3      	ldrh	r3, [r4, #12]
 801b374:	059b      	lsls	r3, r3, #22
 801b376:	d4dd      	bmi.n	801b334 <_fflush_r+0xc>
 801b378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b37a:	f7fe f985 	bl	8019688 <__retarget_lock_release_recursive>
 801b37e:	e7d9      	b.n	801b334 <_fflush_r+0xc>
 801b380:	4b05      	ldr	r3, [pc, #20]	; (801b398 <_fflush_r+0x70>)
 801b382:	429c      	cmp	r4, r3
 801b384:	d101      	bne.n	801b38a <_fflush_r+0x62>
 801b386:	68ac      	ldr	r4, [r5, #8]
 801b388:	e7df      	b.n	801b34a <_fflush_r+0x22>
 801b38a:	4b04      	ldr	r3, [pc, #16]	; (801b39c <_fflush_r+0x74>)
 801b38c:	429c      	cmp	r4, r3
 801b38e:	bf08      	it	eq
 801b390:	68ec      	ldreq	r4, [r5, #12]
 801b392:	e7da      	b.n	801b34a <_fflush_r+0x22>
 801b394:	080fb914 	.word	0x080fb914
 801b398:	080fb934 	.word	0x080fb934
 801b39c:	080fb8f4 	.word	0x080fb8f4

0801b3a0 <_localeconv_r>:
 801b3a0:	4800      	ldr	r0, [pc, #0]	; (801b3a4 <_localeconv_r+0x4>)
 801b3a2:	4770      	bx	lr
 801b3a4:	200010b8 	.word	0x200010b8

0801b3a8 <_lseek_r>:
 801b3a8:	b538      	push	{r3, r4, r5, lr}
 801b3aa:	4d07      	ldr	r5, [pc, #28]	; (801b3c8 <_lseek_r+0x20>)
 801b3ac:	4604      	mov	r4, r0
 801b3ae:	4608      	mov	r0, r1
 801b3b0:	4611      	mov	r1, r2
 801b3b2:	2200      	movs	r2, #0
 801b3b4:	602a      	str	r2, [r5, #0]
 801b3b6:	461a      	mov	r2, r3
 801b3b8:	f001 f810 	bl	801c3dc <_lseek>
 801b3bc:	1c43      	adds	r3, r0, #1
 801b3be:	d102      	bne.n	801b3c6 <_lseek_r+0x1e>
 801b3c0:	682b      	ldr	r3, [r5, #0]
 801b3c2:	b103      	cbz	r3, 801b3c6 <_lseek_r+0x1e>
 801b3c4:	6023      	str	r3, [r4, #0]
 801b3c6:	bd38      	pop	{r3, r4, r5, pc}
 801b3c8:	200234d0 	.word	0x200234d0

0801b3cc <__swhatbuf_r>:
 801b3cc:	b570      	push	{r4, r5, r6, lr}
 801b3ce:	460e      	mov	r6, r1
 801b3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3d4:	2900      	cmp	r1, #0
 801b3d6:	b096      	sub	sp, #88	; 0x58
 801b3d8:	4614      	mov	r4, r2
 801b3da:	461d      	mov	r5, r3
 801b3dc:	da08      	bge.n	801b3f0 <__swhatbuf_r+0x24>
 801b3de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b3e2:	2200      	movs	r2, #0
 801b3e4:	602a      	str	r2, [r5, #0]
 801b3e6:	061a      	lsls	r2, r3, #24
 801b3e8:	d410      	bmi.n	801b40c <__swhatbuf_r+0x40>
 801b3ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b3ee:	e00e      	b.n	801b40e <__swhatbuf_r+0x42>
 801b3f0:	466a      	mov	r2, sp
 801b3f2:	f000 ff1d 	bl	801c230 <_fstat_r>
 801b3f6:	2800      	cmp	r0, #0
 801b3f8:	dbf1      	blt.n	801b3de <__swhatbuf_r+0x12>
 801b3fa:	9a01      	ldr	r2, [sp, #4]
 801b3fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b400:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b404:	425a      	negs	r2, r3
 801b406:	415a      	adcs	r2, r3
 801b408:	602a      	str	r2, [r5, #0]
 801b40a:	e7ee      	b.n	801b3ea <__swhatbuf_r+0x1e>
 801b40c:	2340      	movs	r3, #64	; 0x40
 801b40e:	2000      	movs	r0, #0
 801b410:	6023      	str	r3, [r4, #0]
 801b412:	b016      	add	sp, #88	; 0x58
 801b414:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b418 <__smakebuf_r>:
 801b418:	898b      	ldrh	r3, [r1, #12]
 801b41a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b41c:	079d      	lsls	r5, r3, #30
 801b41e:	4606      	mov	r6, r0
 801b420:	460c      	mov	r4, r1
 801b422:	d507      	bpl.n	801b434 <__smakebuf_r+0x1c>
 801b424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b428:	6023      	str	r3, [r4, #0]
 801b42a:	6123      	str	r3, [r4, #16]
 801b42c:	2301      	movs	r3, #1
 801b42e:	6163      	str	r3, [r4, #20]
 801b430:	b002      	add	sp, #8
 801b432:	bd70      	pop	{r4, r5, r6, pc}
 801b434:	ab01      	add	r3, sp, #4
 801b436:	466a      	mov	r2, sp
 801b438:	f7ff ffc8 	bl	801b3cc <__swhatbuf_r>
 801b43c:	9900      	ldr	r1, [sp, #0]
 801b43e:	4605      	mov	r5, r0
 801b440:	4630      	mov	r0, r6
 801b442:	f7fe f9ad 	bl	80197a0 <_malloc_r>
 801b446:	b948      	cbnz	r0, 801b45c <__smakebuf_r+0x44>
 801b448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b44c:	059a      	lsls	r2, r3, #22
 801b44e:	d4ef      	bmi.n	801b430 <__smakebuf_r+0x18>
 801b450:	f023 0303 	bic.w	r3, r3, #3
 801b454:	f043 0302 	orr.w	r3, r3, #2
 801b458:	81a3      	strh	r3, [r4, #12]
 801b45a:	e7e3      	b.n	801b424 <__smakebuf_r+0xc>
 801b45c:	4b0d      	ldr	r3, [pc, #52]	; (801b494 <__smakebuf_r+0x7c>)
 801b45e:	62b3      	str	r3, [r6, #40]	; 0x28
 801b460:	89a3      	ldrh	r3, [r4, #12]
 801b462:	6020      	str	r0, [r4, #0]
 801b464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b468:	81a3      	strh	r3, [r4, #12]
 801b46a:	9b00      	ldr	r3, [sp, #0]
 801b46c:	6163      	str	r3, [r4, #20]
 801b46e:	9b01      	ldr	r3, [sp, #4]
 801b470:	6120      	str	r0, [r4, #16]
 801b472:	b15b      	cbz	r3, 801b48c <__smakebuf_r+0x74>
 801b474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b478:	4630      	mov	r0, r6
 801b47a:	f000 feeb 	bl	801c254 <_isatty_r>
 801b47e:	b128      	cbz	r0, 801b48c <__smakebuf_r+0x74>
 801b480:	89a3      	ldrh	r3, [r4, #12]
 801b482:	f023 0303 	bic.w	r3, r3, #3
 801b486:	f043 0301 	orr.w	r3, r3, #1
 801b48a:	81a3      	strh	r3, [r4, #12]
 801b48c:	89a0      	ldrh	r0, [r4, #12]
 801b48e:	4305      	orrs	r5, r0
 801b490:	81a5      	strh	r5, [r4, #12]
 801b492:	e7cd      	b.n	801b430 <__smakebuf_r+0x18>
 801b494:	08019499 	.word	0x08019499

0801b498 <__malloc_lock>:
 801b498:	4801      	ldr	r0, [pc, #4]	; (801b4a0 <__malloc_lock+0x8>)
 801b49a:	f7fe b8f4 	b.w	8019686 <__retarget_lock_acquire_recursive>
 801b49e:	bf00      	nop
 801b4a0:	200234c4 	.word	0x200234c4

0801b4a4 <__malloc_unlock>:
 801b4a4:	4801      	ldr	r0, [pc, #4]	; (801b4ac <__malloc_unlock+0x8>)
 801b4a6:	f7fe b8ef 	b.w	8019688 <__retarget_lock_release_recursive>
 801b4aa:	bf00      	nop
 801b4ac:	200234c4 	.word	0x200234c4

0801b4b0 <_Balloc>:
 801b4b0:	b570      	push	{r4, r5, r6, lr}
 801b4b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b4b4:	4604      	mov	r4, r0
 801b4b6:	460d      	mov	r5, r1
 801b4b8:	b976      	cbnz	r6, 801b4d8 <_Balloc+0x28>
 801b4ba:	2010      	movs	r0, #16
 801b4bc:	f7fe f8e6 	bl	801968c <malloc>
 801b4c0:	4602      	mov	r2, r0
 801b4c2:	6260      	str	r0, [r4, #36]	; 0x24
 801b4c4:	b920      	cbnz	r0, 801b4d0 <_Balloc+0x20>
 801b4c6:	4b18      	ldr	r3, [pc, #96]	; (801b528 <_Balloc+0x78>)
 801b4c8:	4818      	ldr	r0, [pc, #96]	; (801b52c <_Balloc+0x7c>)
 801b4ca:	2166      	movs	r1, #102	; 0x66
 801b4cc:	f000 fe80 	bl	801c1d0 <__assert_func>
 801b4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b4d4:	6006      	str	r6, [r0, #0]
 801b4d6:	60c6      	str	r6, [r0, #12]
 801b4d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b4da:	68f3      	ldr	r3, [r6, #12]
 801b4dc:	b183      	cbz	r3, 801b500 <_Balloc+0x50>
 801b4de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b4e0:	68db      	ldr	r3, [r3, #12]
 801b4e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b4e6:	b9b8      	cbnz	r0, 801b518 <_Balloc+0x68>
 801b4e8:	2101      	movs	r1, #1
 801b4ea:	fa01 f605 	lsl.w	r6, r1, r5
 801b4ee:	1d72      	adds	r2, r6, #5
 801b4f0:	0092      	lsls	r2, r2, #2
 801b4f2:	4620      	mov	r0, r4
 801b4f4:	f000 fb60 	bl	801bbb8 <_calloc_r>
 801b4f8:	b160      	cbz	r0, 801b514 <_Balloc+0x64>
 801b4fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b4fe:	e00e      	b.n	801b51e <_Balloc+0x6e>
 801b500:	2221      	movs	r2, #33	; 0x21
 801b502:	2104      	movs	r1, #4
 801b504:	4620      	mov	r0, r4
 801b506:	f000 fb57 	bl	801bbb8 <_calloc_r>
 801b50a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b50c:	60f0      	str	r0, [r6, #12]
 801b50e:	68db      	ldr	r3, [r3, #12]
 801b510:	2b00      	cmp	r3, #0
 801b512:	d1e4      	bne.n	801b4de <_Balloc+0x2e>
 801b514:	2000      	movs	r0, #0
 801b516:	bd70      	pop	{r4, r5, r6, pc}
 801b518:	6802      	ldr	r2, [r0, #0]
 801b51a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b51e:	2300      	movs	r3, #0
 801b520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b524:	e7f7      	b.n	801b516 <_Balloc+0x66>
 801b526:	bf00      	nop
 801b528:	080fb999 	.word	0x080fb999
 801b52c:	080fba1c 	.word	0x080fba1c

0801b530 <_Bfree>:
 801b530:	b570      	push	{r4, r5, r6, lr}
 801b532:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b534:	4605      	mov	r5, r0
 801b536:	460c      	mov	r4, r1
 801b538:	b976      	cbnz	r6, 801b558 <_Bfree+0x28>
 801b53a:	2010      	movs	r0, #16
 801b53c:	f7fe f8a6 	bl	801968c <malloc>
 801b540:	4602      	mov	r2, r0
 801b542:	6268      	str	r0, [r5, #36]	; 0x24
 801b544:	b920      	cbnz	r0, 801b550 <_Bfree+0x20>
 801b546:	4b09      	ldr	r3, [pc, #36]	; (801b56c <_Bfree+0x3c>)
 801b548:	4809      	ldr	r0, [pc, #36]	; (801b570 <_Bfree+0x40>)
 801b54a:	218a      	movs	r1, #138	; 0x8a
 801b54c:	f000 fe40 	bl	801c1d0 <__assert_func>
 801b550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b554:	6006      	str	r6, [r0, #0]
 801b556:	60c6      	str	r6, [r0, #12]
 801b558:	b13c      	cbz	r4, 801b56a <_Bfree+0x3a>
 801b55a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b55c:	6862      	ldr	r2, [r4, #4]
 801b55e:	68db      	ldr	r3, [r3, #12]
 801b560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b564:	6021      	str	r1, [r4, #0]
 801b566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b56a:	bd70      	pop	{r4, r5, r6, pc}
 801b56c:	080fb999 	.word	0x080fb999
 801b570:	080fba1c 	.word	0x080fba1c

0801b574 <__multadd>:
 801b574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b578:	690d      	ldr	r5, [r1, #16]
 801b57a:	4607      	mov	r7, r0
 801b57c:	460c      	mov	r4, r1
 801b57e:	461e      	mov	r6, r3
 801b580:	f101 0c14 	add.w	ip, r1, #20
 801b584:	2000      	movs	r0, #0
 801b586:	f8dc 3000 	ldr.w	r3, [ip]
 801b58a:	b299      	uxth	r1, r3
 801b58c:	fb02 6101 	mla	r1, r2, r1, r6
 801b590:	0c1e      	lsrs	r6, r3, #16
 801b592:	0c0b      	lsrs	r3, r1, #16
 801b594:	fb02 3306 	mla	r3, r2, r6, r3
 801b598:	b289      	uxth	r1, r1
 801b59a:	3001      	adds	r0, #1
 801b59c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b5a0:	4285      	cmp	r5, r0
 801b5a2:	f84c 1b04 	str.w	r1, [ip], #4
 801b5a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b5aa:	dcec      	bgt.n	801b586 <__multadd+0x12>
 801b5ac:	b30e      	cbz	r6, 801b5f2 <__multadd+0x7e>
 801b5ae:	68a3      	ldr	r3, [r4, #8]
 801b5b0:	42ab      	cmp	r3, r5
 801b5b2:	dc19      	bgt.n	801b5e8 <__multadd+0x74>
 801b5b4:	6861      	ldr	r1, [r4, #4]
 801b5b6:	4638      	mov	r0, r7
 801b5b8:	3101      	adds	r1, #1
 801b5ba:	f7ff ff79 	bl	801b4b0 <_Balloc>
 801b5be:	4680      	mov	r8, r0
 801b5c0:	b928      	cbnz	r0, 801b5ce <__multadd+0x5a>
 801b5c2:	4602      	mov	r2, r0
 801b5c4:	4b0c      	ldr	r3, [pc, #48]	; (801b5f8 <__multadd+0x84>)
 801b5c6:	480d      	ldr	r0, [pc, #52]	; (801b5fc <__multadd+0x88>)
 801b5c8:	21b5      	movs	r1, #181	; 0xb5
 801b5ca:	f000 fe01 	bl	801c1d0 <__assert_func>
 801b5ce:	6922      	ldr	r2, [r4, #16]
 801b5d0:	3202      	adds	r2, #2
 801b5d2:	f104 010c 	add.w	r1, r4, #12
 801b5d6:	0092      	lsls	r2, r2, #2
 801b5d8:	300c      	adds	r0, #12
 801b5da:	f7fe f85f 	bl	801969c <memcpy>
 801b5de:	4621      	mov	r1, r4
 801b5e0:	4638      	mov	r0, r7
 801b5e2:	f7ff ffa5 	bl	801b530 <_Bfree>
 801b5e6:	4644      	mov	r4, r8
 801b5e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b5ec:	3501      	adds	r5, #1
 801b5ee:	615e      	str	r6, [r3, #20]
 801b5f0:	6125      	str	r5, [r4, #16]
 801b5f2:	4620      	mov	r0, r4
 801b5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5f8:	080fba0b 	.word	0x080fba0b
 801b5fc:	080fba1c 	.word	0x080fba1c

0801b600 <__hi0bits>:
 801b600:	0c03      	lsrs	r3, r0, #16
 801b602:	041b      	lsls	r3, r3, #16
 801b604:	b9d3      	cbnz	r3, 801b63c <__hi0bits+0x3c>
 801b606:	0400      	lsls	r0, r0, #16
 801b608:	2310      	movs	r3, #16
 801b60a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b60e:	bf04      	itt	eq
 801b610:	0200      	lsleq	r0, r0, #8
 801b612:	3308      	addeq	r3, #8
 801b614:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b618:	bf04      	itt	eq
 801b61a:	0100      	lsleq	r0, r0, #4
 801b61c:	3304      	addeq	r3, #4
 801b61e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b622:	bf04      	itt	eq
 801b624:	0080      	lsleq	r0, r0, #2
 801b626:	3302      	addeq	r3, #2
 801b628:	2800      	cmp	r0, #0
 801b62a:	db05      	blt.n	801b638 <__hi0bits+0x38>
 801b62c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b630:	f103 0301 	add.w	r3, r3, #1
 801b634:	bf08      	it	eq
 801b636:	2320      	moveq	r3, #32
 801b638:	4618      	mov	r0, r3
 801b63a:	4770      	bx	lr
 801b63c:	2300      	movs	r3, #0
 801b63e:	e7e4      	b.n	801b60a <__hi0bits+0xa>

0801b640 <__lo0bits>:
 801b640:	6803      	ldr	r3, [r0, #0]
 801b642:	f013 0207 	ands.w	r2, r3, #7
 801b646:	4601      	mov	r1, r0
 801b648:	d00b      	beq.n	801b662 <__lo0bits+0x22>
 801b64a:	07da      	lsls	r2, r3, #31
 801b64c:	d423      	bmi.n	801b696 <__lo0bits+0x56>
 801b64e:	0798      	lsls	r0, r3, #30
 801b650:	bf49      	itett	mi
 801b652:	085b      	lsrmi	r3, r3, #1
 801b654:	089b      	lsrpl	r3, r3, #2
 801b656:	2001      	movmi	r0, #1
 801b658:	600b      	strmi	r3, [r1, #0]
 801b65a:	bf5c      	itt	pl
 801b65c:	600b      	strpl	r3, [r1, #0]
 801b65e:	2002      	movpl	r0, #2
 801b660:	4770      	bx	lr
 801b662:	b298      	uxth	r0, r3
 801b664:	b9a8      	cbnz	r0, 801b692 <__lo0bits+0x52>
 801b666:	0c1b      	lsrs	r3, r3, #16
 801b668:	2010      	movs	r0, #16
 801b66a:	b2da      	uxtb	r2, r3
 801b66c:	b90a      	cbnz	r2, 801b672 <__lo0bits+0x32>
 801b66e:	3008      	adds	r0, #8
 801b670:	0a1b      	lsrs	r3, r3, #8
 801b672:	071a      	lsls	r2, r3, #28
 801b674:	bf04      	itt	eq
 801b676:	091b      	lsreq	r3, r3, #4
 801b678:	3004      	addeq	r0, #4
 801b67a:	079a      	lsls	r2, r3, #30
 801b67c:	bf04      	itt	eq
 801b67e:	089b      	lsreq	r3, r3, #2
 801b680:	3002      	addeq	r0, #2
 801b682:	07da      	lsls	r2, r3, #31
 801b684:	d403      	bmi.n	801b68e <__lo0bits+0x4e>
 801b686:	085b      	lsrs	r3, r3, #1
 801b688:	f100 0001 	add.w	r0, r0, #1
 801b68c:	d005      	beq.n	801b69a <__lo0bits+0x5a>
 801b68e:	600b      	str	r3, [r1, #0]
 801b690:	4770      	bx	lr
 801b692:	4610      	mov	r0, r2
 801b694:	e7e9      	b.n	801b66a <__lo0bits+0x2a>
 801b696:	2000      	movs	r0, #0
 801b698:	4770      	bx	lr
 801b69a:	2020      	movs	r0, #32
 801b69c:	4770      	bx	lr
	...

0801b6a0 <__i2b>:
 801b6a0:	b510      	push	{r4, lr}
 801b6a2:	460c      	mov	r4, r1
 801b6a4:	2101      	movs	r1, #1
 801b6a6:	f7ff ff03 	bl	801b4b0 <_Balloc>
 801b6aa:	4602      	mov	r2, r0
 801b6ac:	b928      	cbnz	r0, 801b6ba <__i2b+0x1a>
 801b6ae:	4b05      	ldr	r3, [pc, #20]	; (801b6c4 <__i2b+0x24>)
 801b6b0:	4805      	ldr	r0, [pc, #20]	; (801b6c8 <__i2b+0x28>)
 801b6b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b6b6:	f000 fd8b 	bl	801c1d0 <__assert_func>
 801b6ba:	2301      	movs	r3, #1
 801b6bc:	6144      	str	r4, [r0, #20]
 801b6be:	6103      	str	r3, [r0, #16]
 801b6c0:	bd10      	pop	{r4, pc}
 801b6c2:	bf00      	nop
 801b6c4:	080fba0b 	.word	0x080fba0b
 801b6c8:	080fba1c 	.word	0x080fba1c

0801b6cc <__multiply>:
 801b6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d0:	4691      	mov	r9, r2
 801b6d2:	690a      	ldr	r2, [r1, #16]
 801b6d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b6d8:	429a      	cmp	r2, r3
 801b6da:	bfb8      	it	lt
 801b6dc:	460b      	movlt	r3, r1
 801b6de:	460c      	mov	r4, r1
 801b6e0:	bfbc      	itt	lt
 801b6e2:	464c      	movlt	r4, r9
 801b6e4:	4699      	movlt	r9, r3
 801b6e6:	6927      	ldr	r7, [r4, #16]
 801b6e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b6ec:	68a3      	ldr	r3, [r4, #8]
 801b6ee:	6861      	ldr	r1, [r4, #4]
 801b6f0:	eb07 060a 	add.w	r6, r7, sl
 801b6f4:	42b3      	cmp	r3, r6
 801b6f6:	b085      	sub	sp, #20
 801b6f8:	bfb8      	it	lt
 801b6fa:	3101      	addlt	r1, #1
 801b6fc:	f7ff fed8 	bl	801b4b0 <_Balloc>
 801b700:	b930      	cbnz	r0, 801b710 <__multiply+0x44>
 801b702:	4602      	mov	r2, r0
 801b704:	4b44      	ldr	r3, [pc, #272]	; (801b818 <__multiply+0x14c>)
 801b706:	4845      	ldr	r0, [pc, #276]	; (801b81c <__multiply+0x150>)
 801b708:	f240 115d 	movw	r1, #349	; 0x15d
 801b70c:	f000 fd60 	bl	801c1d0 <__assert_func>
 801b710:	f100 0514 	add.w	r5, r0, #20
 801b714:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b718:	462b      	mov	r3, r5
 801b71a:	2200      	movs	r2, #0
 801b71c:	4543      	cmp	r3, r8
 801b71e:	d321      	bcc.n	801b764 <__multiply+0x98>
 801b720:	f104 0314 	add.w	r3, r4, #20
 801b724:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b728:	f109 0314 	add.w	r3, r9, #20
 801b72c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b730:	9202      	str	r2, [sp, #8]
 801b732:	1b3a      	subs	r2, r7, r4
 801b734:	3a15      	subs	r2, #21
 801b736:	f022 0203 	bic.w	r2, r2, #3
 801b73a:	3204      	adds	r2, #4
 801b73c:	f104 0115 	add.w	r1, r4, #21
 801b740:	428f      	cmp	r7, r1
 801b742:	bf38      	it	cc
 801b744:	2204      	movcc	r2, #4
 801b746:	9201      	str	r2, [sp, #4]
 801b748:	9a02      	ldr	r2, [sp, #8]
 801b74a:	9303      	str	r3, [sp, #12]
 801b74c:	429a      	cmp	r2, r3
 801b74e:	d80c      	bhi.n	801b76a <__multiply+0x9e>
 801b750:	2e00      	cmp	r6, #0
 801b752:	dd03      	ble.n	801b75c <__multiply+0x90>
 801b754:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d05a      	beq.n	801b812 <__multiply+0x146>
 801b75c:	6106      	str	r6, [r0, #16]
 801b75e:	b005      	add	sp, #20
 801b760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b764:	f843 2b04 	str.w	r2, [r3], #4
 801b768:	e7d8      	b.n	801b71c <__multiply+0x50>
 801b76a:	f8b3 a000 	ldrh.w	sl, [r3]
 801b76e:	f1ba 0f00 	cmp.w	sl, #0
 801b772:	d024      	beq.n	801b7be <__multiply+0xf2>
 801b774:	f104 0e14 	add.w	lr, r4, #20
 801b778:	46a9      	mov	r9, r5
 801b77a:	f04f 0c00 	mov.w	ip, #0
 801b77e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b782:	f8d9 1000 	ldr.w	r1, [r9]
 801b786:	fa1f fb82 	uxth.w	fp, r2
 801b78a:	b289      	uxth	r1, r1
 801b78c:	fb0a 110b 	mla	r1, sl, fp, r1
 801b790:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b794:	f8d9 2000 	ldr.w	r2, [r9]
 801b798:	4461      	add	r1, ip
 801b79a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b79e:	fb0a c20b 	mla	r2, sl, fp, ip
 801b7a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b7a6:	b289      	uxth	r1, r1
 801b7a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b7ac:	4577      	cmp	r7, lr
 801b7ae:	f849 1b04 	str.w	r1, [r9], #4
 801b7b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b7b6:	d8e2      	bhi.n	801b77e <__multiply+0xb2>
 801b7b8:	9a01      	ldr	r2, [sp, #4]
 801b7ba:	f845 c002 	str.w	ip, [r5, r2]
 801b7be:	9a03      	ldr	r2, [sp, #12]
 801b7c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b7c4:	3304      	adds	r3, #4
 801b7c6:	f1b9 0f00 	cmp.w	r9, #0
 801b7ca:	d020      	beq.n	801b80e <__multiply+0x142>
 801b7cc:	6829      	ldr	r1, [r5, #0]
 801b7ce:	f104 0c14 	add.w	ip, r4, #20
 801b7d2:	46ae      	mov	lr, r5
 801b7d4:	f04f 0a00 	mov.w	sl, #0
 801b7d8:	f8bc b000 	ldrh.w	fp, [ip]
 801b7dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b7e0:	fb09 220b 	mla	r2, r9, fp, r2
 801b7e4:	4492      	add	sl, r2
 801b7e6:	b289      	uxth	r1, r1
 801b7e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801b7ec:	f84e 1b04 	str.w	r1, [lr], #4
 801b7f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b7f4:	f8be 1000 	ldrh.w	r1, [lr]
 801b7f8:	0c12      	lsrs	r2, r2, #16
 801b7fa:	fb09 1102 	mla	r1, r9, r2, r1
 801b7fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801b802:	4567      	cmp	r7, ip
 801b804:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b808:	d8e6      	bhi.n	801b7d8 <__multiply+0x10c>
 801b80a:	9a01      	ldr	r2, [sp, #4]
 801b80c:	50a9      	str	r1, [r5, r2]
 801b80e:	3504      	adds	r5, #4
 801b810:	e79a      	b.n	801b748 <__multiply+0x7c>
 801b812:	3e01      	subs	r6, #1
 801b814:	e79c      	b.n	801b750 <__multiply+0x84>
 801b816:	bf00      	nop
 801b818:	080fba0b 	.word	0x080fba0b
 801b81c:	080fba1c 	.word	0x080fba1c

0801b820 <__pow5mult>:
 801b820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b824:	4615      	mov	r5, r2
 801b826:	f012 0203 	ands.w	r2, r2, #3
 801b82a:	4606      	mov	r6, r0
 801b82c:	460f      	mov	r7, r1
 801b82e:	d007      	beq.n	801b840 <__pow5mult+0x20>
 801b830:	4c25      	ldr	r4, [pc, #148]	; (801b8c8 <__pow5mult+0xa8>)
 801b832:	3a01      	subs	r2, #1
 801b834:	2300      	movs	r3, #0
 801b836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b83a:	f7ff fe9b 	bl	801b574 <__multadd>
 801b83e:	4607      	mov	r7, r0
 801b840:	10ad      	asrs	r5, r5, #2
 801b842:	d03d      	beq.n	801b8c0 <__pow5mult+0xa0>
 801b844:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b846:	b97c      	cbnz	r4, 801b868 <__pow5mult+0x48>
 801b848:	2010      	movs	r0, #16
 801b84a:	f7fd ff1f 	bl	801968c <malloc>
 801b84e:	4602      	mov	r2, r0
 801b850:	6270      	str	r0, [r6, #36]	; 0x24
 801b852:	b928      	cbnz	r0, 801b860 <__pow5mult+0x40>
 801b854:	4b1d      	ldr	r3, [pc, #116]	; (801b8cc <__pow5mult+0xac>)
 801b856:	481e      	ldr	r0, [pc, #120]	; (801b8d0 <__pow5mult+0xb0>)
 801b858:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b85c:	f000 fcb8 	bl	801c1d0 <__assert_func>
 801b860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b864:	6004      	str	r4, [r0, #0]
 801b866:	60c4      	str	r4, [r0, #12]
 801b868:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b86c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b870:	b94c      	cbnz	r4, 801b886 <__pow5mult+0x66>
 801b872:	f240 2171 	movw	r1, #625	; 0x271
 801b876:	4630      	mov	r0, r6
 801b878:	f7ff ff12 	bl	801b6a0 <__i2b>
 801b87c:	2300      	movs	r3, #0
 801b87e:	f8c8 0008 	str.w	r0, [r8, #8]
 801b882:	4604      	mov	r4, r0
 801b884:	6003      	str	r3, [r0, #0]
 801b886:	f04f 0900 	mov.w	r9, #0
 801b88a:	07eb      	lsls	r3, r5, #31
 801b88c:	d50a      	bpl.n	801b8a4 <__pow5mult+0x84>
 801b88e:	4639      	mov	r1, r7
 801b890:	4622      	mov	r2, r4
 801b892:	4630      	mov	r0, r6
 801b894:	f7ff ff1a 	bl	801b6cc <__multiply>
 801b898:	4639      	mov	r1, r7
 801b89a:	4680      	mov	r8, r0
 801b89c:	4630      	mov	r0, r6
 801b89e:	f7ff fe47 	bl	801b530 <_Bfree>
 801b8a2:	4647      	mov	r7, r8
 801b8a4:	106d      	asrs	r5, r5, #1
 801b8a6:	d00b      	beq.n	801b8c0 <__pow5mult+0xa0>
 801b8a8:	6820      	ldr	r0, [r4, #0]
 801b8aa:	b938      	cbnz	r0, 801b8bc <__pow5mult+0x9c>
 801b8ac:	4622      	mov	r2, r4
 801b8ae:	4621      	mov	r1, r4
 801b8b0:	4630      	mov	r0, r6
 801b8b2:	f7ff ff0b 	bl	801b6cc <__multiply>
 801b8b6:	6020      	str	r0, [r4, #0]
 801b8b8:	f8c0 9000 	str.w	r9, [r0]
 801b8bc:	4604      	mov	r4, r0
 801b8be:	e7e4      	b.n	801b88a <__pow5mult+0x6a>
 801b8c0:	4638      	mov	r0, r7
 801b8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b8c6:	bf00      	nop
 801b8c8:	080fbb68 	.word	0x080fbb68
 801b8cc:	080fb999 	.word	0x080fb999
 801b8d0:	080fba1c 	.word	0x080fba1c

0801b8d4 <__lshift>:
 801b8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8d8:	460c      	mov	r4, r1
 801b8da:	6849      	ldr	r1, [r1, #4]
 801b8dc:	6923      	ldr	r3, [r4, #16]
 801b8de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b8e2:	68a3      	ldr	r3, [r4, #8]
 801b8e4:	4607      	mov	r7, r0
 801b8e6:	4691      	mov	r9, r2
 801b8e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b8ec:	f108 0601 	add.w	r6, r8, #1
 801b8f0:	42b3      	cmp	r3, r6
 801b8f2:	db0b      	blt.n	801b90c <__lshift+0x38>
 801b8f4:	4638      	mov	r0, r7
 801b8f6:	f7ff fddb 	bl	801b4b0 <_Balloc>
 801b8fa:	4605      	mov	r5, r0
 801b8fc:	b948      	cbnz	r0, 801b912 <__lshift+0x3e>
 801b8fe:	4602      	mov	r2, r0
 801b900:	4b2a      	ldr	r3, [pc, #168]	; (801b9ac <__lshift+0xd8>)
 801b902:	482b      	ldr	r0, [pc, #172]	; (801b9b0 <__lshift+0xdc>)
 801b904:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b908:	f000 fc62 	bl	801c1d0 <__assert_func>
 801b90c:	3101      	adds	r1, #1
 801b90e:	005b      	lsls	r3, r3, #1
 801b910:	e7ee      	b.n	801b8f0 <__lshift+0x1c>
 801b912:	2300      	movs	r3, #0
 801b914:	f100 0114 	add.w	r1, r0, #20
 801b918:	f100 0210 	add.w	r2, r0, #16
 801b91c:	4618      	mov	r0, r3
 801b91e:	4553      	cmp	r3, sl
 801b920:	db37      	blt.n	801b992 <__lshift+0xbe>
 801b922:	6920      	ldr	r0, [r4, #16]
 801b924:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b928:	f104 0314 	add.w	r3, r4, #20
 801b92c:	f019 091f 	ands.w	r9, r9, #31
 801b930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b934:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b938:	d02f      	beq.n	801b99a <__lshift+0xc6>
 801b93a:	f1c9 0e20 	rsb	lr, r9, #32
 801b93e:	468a      	mov	sl, r1
 801b940:	f04f 0c00 	mov.w	ip, #0
 801b944:	681a      	ldr	r2, [r3, #0]
 801b946:	fa02 f209 	lsl.w	r2, r2, r9
 801b94a:	ea42 020c 	orr.w	r2, r2, ip
 801b94e:	f84a 2b04 	str.w	r2, [sl], #4
 801b952:	f853 2b04 	ldr.w	r2, [r3], #4
 801b956:	4298      	cmp	r0, r3
 801b958:	fa22 fc0e 	lsr.w	ip, r2, lr
 801b95c:	d8f2      	bhi.n	801b944 <__lshift+0x70>
 801b95e:	1b03      	subs	r3, r0, r4
 801b960:	3b15      	subs	r3, #21
 801b962:	f023 0303 	bic.w	r3, r3, #3
 801b966:	3304      	adds	r3, #4
 801b968:	f104 0215 	add.w	r2, r4, #21
 801b96c:	4290      	cmp	r0, r2
 801b96e:	bf38      	it	cc
 801b970:	2304      	movcc	r3, #4
 801b972:	f841 c003 	str.w	ip, [r1, r3]
 801b976:	f1bc 0f00 	cmp.w	ip, #0
 801b97a:	d001      	beq.n	801b980 <__lshift+0xac>
 801b97c:	f108 0602 	add.w	r6, r8, #2
 801b980:	3e01      	subs	r6, #1
 801b982:	4638      	mov	r0, r7
 801b984:	612e      	str	r6, [r5, #16]
 801b986:	4621      	mov	r1, r4
 801b988:	f7ff fdd2 	bl	801b530 <_Bfree>
 801b98c:	4628      	mov	r0, r5
 801b98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b992:	f842 0f04 	str.w	r0, [r2, #4]!
 801b996:	3301      	adds	r3, #1
 801b998:	e7c1      	b.n	801b91e <__lshift+0x4a>
 801b99a:	3904      	subs	r1, #4
 801b99c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b9a0:	f841 2f04 	str.w	r2, [r1, #4]!
 801b9a4:	4298      	cmp	r0, r3
 801b9a6:	d8f9      	bhi.n	801b99c <__lshift+0xc8>
 801b9a8:	e7ea      	b.n	801b980 <__lshift+0xac>
 801b9aa:	bf00      	nop
 801b9ac:	080fba0b 	.word	0x080fba0b
 801b9b0:	080fba1c 	.word	0x080fba1c

0801b9b4 <__mcmp>:
 801b9b4:	b530      	push	{r4, r5, lr}
 801b9b6:	6902      	ldr	r2, [r0, #16]
 801b9b8:	690c      	ldr	r4, [r1, #16]
 801b9ba:	1b12      	subs	r2, r2, r4
 801b9bc:	d10e      	bne.n	801b9dc <__mcmp+0x28>
 801b9be:	f100 0314 	add.w	r3, r0, #20
 801b9c2:	3114      	adds	r1, #20
 801b9c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b9c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b9cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b9d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b9d4:	42a5      	cmp	r5, r4
 801b9d6:	d003      	beq.n	801b9e0 <__mcmp+0x2c>
 801b9d8:	d305      	bcc.n	801b9e6 <__mcmp+0x32>
 801b9da:	2201      	movs	r2, #1
 801b9dc:	4610      	mov	r0, r2
 801b9de:	bd30      	pop	{r4, r5, pc}
 801b9e0:	4283      	cmp	r3, r0
 801b9e2:	d3f3      	bcc.n	801b9cc <__mcmp+0x18>
 801b9e4:	e7fa      	b.n	801b9dc <__mcmp+0x28>
 801b9e6:	f04f 32ff 	mov.w	r2, #4294967295
 801b9ea:	e7f7      	b.n	801b9dc <__mcmp+0x28>

0801b9ec <__mdiff>:
 801b9ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9f0:	460c      	mov	r4, r1
 801b9f2:	4606      	mov	r6, r0
 801b9f4:	4611      	mov	r1, r2
 801b9f6:	4620      	mov	r0, r4
 801b9f8:	4690      	mov	r8, r2
 801b9fa:	f7ff ffdb 	bl	801b9b4 <__mcmp>
 801b9fe:	1e05      	subs	r5, r0, #0
 801ba00:	d110      	bne.n	801ba24 <__mdiff+0x38>
 801ba02:	4629      	mov	r1, r5
 801ba04:	4630      	mov	r0, r6
 801ba06:	f7ff fd53 	bl	801b4b0 <_Balloc>
 801ba0a:	b930      	cbnz	r0, 801ba1a <__mdiff+0x2e>
 801ba0c:	4b3a      	ldr	r3, [pc, #232]	; (801baf8 <__mdiff+0x10c>)
 801ba0e:	4602      	mov	r2, r0
 801ba10:	f240 2132 	movw	r1, #562	; 0x232
 801ba14:	4839      	ldr	r0, [pc, #228]	; (801bafc <__mdiff+0x110>)
 801ba16:	f000 fbdb 	bl	801c1d0 <__assert_func>
 801ba1a:	2301      	movs	r3, #1
 801ba1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ba20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba24:	bfa4      	itt	ge
 801ba26:	4643      	movge	r3, r8
 801ba28:	46a0      	movge	r8, r4
 801ba2a:	4630      	mov	r0, r6
 801ba2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ba30:	bfa6      	itte	ge
 801ba32:	461c      	movge	r4, r3
 801ba34:	2500      	movge	r5, #0
 801ba36:	2501      	movlt	r5, #1
 801ba38:	f7ff fd3a 	bl	801b4b0 <_Balloc>
 801ba3c:	b920      	cbnz	r0, 801ba48 <__mdiff+0x5c>
 801ba3e:	4b2e      	ldr	r3, [pc, #184]	; (801baf8 <__mdiff+0x10c>)
 801ba40:	4602      	mov	r2, r0
 801ba42:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ba46:	e7e5      	b.n	801ba14 <__mdiff+0x28>
 801ba48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ba4c:	6926      	ldr	r6, [r4, #16]
 801ba4e:	60c5      	str	r5, [r0, #12]
 801ba50:	f104 0914 	add.w	r9, r4, #20
 801ba54:	f108 0514 	add.w	r5, r8, #20
 801ba58:	f100 0e14 	add.w	lr, r0, #20
 801ba5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ba60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ba64:	f108 0210 	add.w	r2, r8, #16
 801ba68:	46f2      	mov	sl, lr
 801ba6a:	2100      	movs	r1, #0
 801ba6c:	f859 3b04 	ldr.w	r3, [r9], #4
 801ba70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ba74:	fa1f f883 	uxth.w	r8, r3
 801ba78:	fa11 f18b 	uxtah	r1, r1, fp
 801ba7c:	0c1b      	lsrs	r3, r3, #16
 801ba7e:	eba1 0808 	sub.w	r8, r1, r8
 801ba82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ba86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ba8a:	fa1f f888 	uxth.w	r8, r8
 801ba8e:	1419      	asrs	r1, r3, #16
 801ba90:	454e      	cmp	r6, r9
 801ba92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ba96:	f84a 3b04 	str.w	r3, [sl], #4
 801ba9a:	d8e7      	bhi.n	801ba6c <__mdiff+0x80>
 801ba9c:	1b33      	subs	r3, r6, r4
 801ba9e:	3b15      	subs	r3, #21
 801baa0:	f023 0303 	bic.w	r3, r3, #3
 801baa4:	3304      	adds	r3, #4
 801baa6:	3415      	adds	r4, #21
 801baa8:	42a6      	cmp	r6, r4
 801baaa:	bf38      	it	cc
 801baac:	2304      	movcc	r3, #4
 801baae:	441d      	add	r5, r3
 801bab0:	4473      	add	r3, lr
 801bab2:	469e      	mov	lr, r3
 801bab4:	462e      	mov	r6, r5
 801bab6:	4566      	cmp	r6, ip
 801bab8:	d30e      	bcc.n	801bad8 <__mdiff+0xec>
 801baba:	f10c 0203 	add.w	r2, ip, #3
 801babe:	1b52      	subs	r2, r2, r5
 801bac0:	f022 0203 	bic.w	r2, r2, #3
 801bac4:	3d03      	subs	r5, #3
 801bac6:	45ac      	cmp	ip, r5
 801bac8:	bf38      	it	cc
 801baca:	2200      	movcc	r2, #0
 801bacc:	441a      	add	r2, r3
 801bace:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801bad2:	b17b      	cbz	r3, 801baf4 <__mdiff+0x108>
 801bad4:	6107      	str	r7, [r0, #16]
 801bad6:	e7a3      	b.n	801ba20 <__mdiff+0x34>
 801bad8:	f856 8b04 	ldr.w	r8, [r6], #4
 801badc:	fa11 f288 	uxtah	r2, r1, r8
 801bae0:	1414      	asrs	r4, r2, #16
 801bae2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801bae6:	b292      	uxth	r2, r2
 801bae8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801baec:	f84e 2b04 	str.w	r2, [lr], #4
 801baf0:	1421      	asrs	r1, r4, #16
 801baf2:	e7e0      	b.n	801bab6 <__mdiff+0xca>
 801baf4:	3f01      	subs	r7, #1
 801baf6:	e7ea      	b.n	801bace <__mdiff+0xe2>
 801baf8:	080fba0b 	.word	0x080fba0b
 801bafc:	080fba1c 	.word	0x080fba1c

0801bb00 <__d2b>:
 801bb00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bb04:	4689      	mov	r9, r1
 801bb06:	2101      	movs	r1, #1
 801bb08:	ec57 6b10 	vmov	r6, r7, d0
 801bb0c:	4690      	mov	r8, r2
 801bb0e:	f7ff fccf 	bl	801b4b0 <_Balloc>
 801bb12:	4604      	mov	r4, r0
 801bb14:	b930      	cbnz	r0, 801bb24 <__d2b+0x24>
 801bb16:	4602      	mov	r2, r0
 801bb18:	4b25      	ldr	r3, [pc, #148]	; (801bbb0 <__d2b+0xb0>)
 801bb1a:	4826      	ldr	r0, [pc, #152]	; (801bbb4 <__d2b+0xb4>)
 801bb1c:	f240 310a 	movw	r1, #778	; 0x30a
 801bb20:	f000 fb56 	bl	801c1d0 <__assert_func>
 801bb24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801bb28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bb2c:	bb35      	cbnz	r5, 801bb7c <__d2b+0x7c>
 801bb2e:	2e00      	cmp	r6, #0
 801bb30:	9301      	str	r3, [sp, #4]
 801bb32:	d028      	beq.n	801bb86 <__d2b+0x86>
 801bb34:	4668      	mov	r0, sp
 801bb36:	9600      	str	r6, [sp, #0]
 801bb38:	f7ff fd82 	bl	801b640 <__lo0bits>
 801bb3c:	9900      	ldr	r1, [sp, #0]
 801bb3e:	b300      	cbz	r0, 801bb82 <__d2b+0x82>
 801bb40:	9a01      	ldr	r2, [sp, #4]
 801bb42:	f1c0 0320 	rsb	r3, r0, #32
 801bb46:	fa02 f303 	lsl.w	r3, r2, r3
 801bb4a:	430b      	orrs	r3, r1
 801bb4c:	40c2      	lsrs	r2, r0
 801bb4e:	6163      	str	r3, [r4, #20]
 801bb50:	9201      	str	r2, [sp, #4]
 801bb52:	9b01      	ldr	r3, [sp, #4]
 801bb54:	61a3      	str	r3, [r4, #24]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	bf14      	ite	ne
 801bb5a:	2202      	movne	r2, #2
 801bb5c:	2201      	moveq	r2, #1
 801bb5e:	6122      	str	r2, [r4, #16]
 801bb60:	b1d5      	cbz	r5, 801bb98 <__d2b+0x98>
 801bb62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801bb66:	4405      	add	r5, r0
 801bb68:	f8c9 5000 	str.w	r5, [r9]
 801bb6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bb70:	f8c8 0000 	str.w	r0, [r8]
 801bb74:	4620      	mov	r0, r4
 801bb76:	b003      	add	sp, #12
 801bb78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bb80:	e7d5      	b.n	801bb2e <__d2b+0x2e>
 801bb82:	6161      	str	r1, [r4, #20]
 801bb84:	e7e5      	b.n	801bb52 <__d2b+0x52>
 801bb86:	a801      	add	r0, sp, #4
 801bb88:	f7ff fd5a 	bl	801b640 <__lo0bits>
 801bb8c:	9b01      	ldr	r3, [sp, #4]
 801bb8e:	6163      	str	r3, [r4, #20]
 801bb90:	2201      	movs	r2, #1
 801bb92:	6122      	str	r2, [r4, #16]
 801bb94:	3020      	adds	r0, #32
 801bb96:	e7e3      	b.n	801bb60 <__d2b+0x60>
 801bb98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bb9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bba0:	f8c9 0000 	str.w	r0, [r9]
 801bba4:	6918      	ldr	r0, [r3, #16]
 801bba6:	f7ff fd2b 	bl	801b600 <__hi0bits>
 801bbaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bbae:	e7df      	b.n	801bb70 <__d2b+0x70>
 801bbb0:	080fba0b 	.word	0x080fba0b
 801bbb4:	080fba1c 	.word	0x080fba1c

0801bbb8 <_calloc_r>:
 801bbb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bbba:	fba1 2402 	umull	r2, r4, r1, r2
 801bbbe:	b94c      	cbnz	r4, 801bbd4 <_calloc_r+0x1c>
 801bbc0:	4611      	mov	r1, r2
 801bbc2:	9201      	str	r2, [sp, #4]
 801bbc4:	f7fd fdec 	bl	80197a0 <_malloc_r>
 801bbc8:	9a01      	ldr	r2, [sp, #4]
 801bbca:	4605      	mov	r5, r0
 801bbcc:	b930      	cbnz	r0, 801bbdc <_calloc_r+0x24>
 801bbce:	4628      	mov	r0, r5
 801bbd0:	b003      	add	sp, #12
 801bbd2:	bd30      	pop	{r4, r5, pc}
 801bbd4:	220c      	movs	r2, #12
 801bbd6:	6002      	str	r2, [r0, #0]
 801bbd8:	2500      	movs	r5, #0
 801bbda:	e7f8      	b.n	801bbce <_calloc_r+0x16>
 801bbdc:	4621      	mov	r1, r4
 801bbde:	f7fd fd6b 	bl	80196b8 <memset>
 801bbe2:	e7f4      	b.n	801bbce <_calloc_r+0x16>

0801bbe4 <_realloc_r>:
 801bbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbe8:	4680      	mov	r8, r0
 801bbea:	4614      	mov	r4, r2
 801bbec:	460e      	mov	r6, r1
 801bbee:	b921      	cbnz	r1, 801bbfa <_realloc_r+0x16>
 801bbf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bbf4:	4611      	mov	r1, r2
 801bbf6:	f7fd bdd3 	b.w	80197a0 <_malloc_r>
 801bbfa:	b92a      	cbnz	r2, 801bc08 <_realloc_r+0x24>
 801bbfc:	f7fd fd64 	bl	80196c8 <_free_r>
 801bc00:	4625      	mov	r5, r4
 801bc02:	4628      	mov	r0, r5
 801bc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc08:	f000 fb60 	bl	801c2cc <_malloc_usable_size_r>
 801bc0c:	4284      	cmp	r4, r0
 801bc0e:	4607      	mov	r7, r0
 801bc10:	d802      	bhi.n	801bc18 <_realloc_r+0x34>
 801bc12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bc16:	d812      	bhi.n	801bc3e <_realloc_r+0x5a>
 801bc18:	4621      	mov	r1, r4
 801bc1a:	4640      	mov	r0, r8
 801bc1c:	f7fd fdc0 	bl	80197a0 <_malloc_r>
 801bc20:	4605      	mov	r5, r0
 801bc22:	2800      	cmp	r0, #0
 801bc24:	d0ed      	beq.n	801bc02 <_realloc_r+0x1e>
 801bc26:	42bc      	cmp	r4, r7
 801bc28:	4622      	mov	r2, r4
 801bc2a:	4631      	mov	r1, r6
 801bc2c:	bf28      	it	cs
 801bc2e:	463a      	movcs	r2, r7
 801bc30:	f7fd fd34 	bl	801969c <memcpy>
 801bc34:	4631      	mov	r1, r6
 801bc36:	4640      	mov	r0, r8
 801bc38:	f7fd fd46 	bl	80196c8 <_free_r>
 801bc3c:	e7e1      	b.n	801bc02 <_realloc_r+0x1e>
 801bc3e:	4635      	mov	r5, r6
 801bc40:	e7df      	b.n	801bc02 <_realloc_r+0x1e>

0801bc42 <__ssputs_r>:
 801bc42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc46:	688e      	ldr	r6, [r1, #8]
 801bc48:	429e      	cmp	r6, r3
 801bc4a:	4682      	mov	sl, r0
 801bc4c:	460c      	mov	r4, r1
 801bc4e:	4690      	mov	r8, r2
 801bc50:	461f      	mov	r7, r3
 801bc52:	d838      	bhi.n	801bcc6 <__ssputs_r+0x84>
 801bc54:	898a      	ldrh	r2, [r1, #12]
 801bc56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bc5a:	d032      	beq.n	801bcc2 <__ssputs_r+0x80>
 801bc5c:	6825      	ldr	r5, [r4, #0]
 801bc5e:	6909      	ldr	r1, [r1, #16]
 801bc60:	eba5 0901 	sub.w	r9, r5, r1
 801bc64:	6965      	ldr	r5, [r4, #20]
 801bc66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bc6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bc6e:	3301      	adds	r3, #1
 801bc70:	444b      	add	r3, r9
 801bc72:	106d      	asrs	r5, r5, #1
 801bc74:	429d      	cmp	r5, r3
 801bc76:	bf38      	it	cc
 801bc78:	461d      	movcc	r5, r3
 801bc7a:	0553      	lsls	r3, r2, #21
 801bc7c:	d531      	bpl.n	801bce2 <__ssputs_r+0xa0>
 801bc7e:	4629      	mov	r1, r5
 801bc80:	f7fd fd8e 	bl	80197a0 <_malloc_r>
 801bc84:	4606      	mov	r6, r0
 801bc86:	b950      	cbnz	r0, 801bc9e <__ssputs_r+0x5c>
 801bc88:	230c      	movs	r3, #12
 801bc8a:	f8ca 3000 	str.w	r3, [sl]
 801bc8e:	89a3      	ldrh	r3, [r4, #12]
 801bc90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc94:	81a3      	strh	r3, [r4, #12]
 801bc96:	f04f 30ff 	mov.w	r0, #4294967295
 801bc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc9e:	6921      	ldr	r1, [r4, #16]
 801bca0:	464a      	mov	r2, r9
 801bca2:	f7fd fcfb 	bl	801969c <memcpy>
 801bca6:	89a3      	ldrh	r3, [r4, #12]
 801bca8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bcac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bcb0:	81a3      	strh	r3, [r4, #12]
 801bcb2:	6126      	str	r6, [r4, #16]
 801bcb4:	6165      	str	r5, [r4, #20]
 801bcb6:	444e      	add	r6, r9
 801bcb8:	eba5 0509 	sub.w	r5, r5, r9
 801bcbc:	6026      	str	r6, [r4, #0]
 801bcbe:	60a5      	str	r5, [r4, #8]
 801bcc0:	463e      	mov	r6, r7
 801bcc2:	42be      	cmp	r6, r7
 801bcc4:	d900      	bls.n	801bcc8 <__ssputs_r+0x86>
 801bcc6:	463e      	mov	r6, r7
 801bcc8:	6820      	ldr	r0, [r4, #0]
 801bcca:	4632      	mov	r2, r6
 801bccc:	4641      	mov	r1, r8
 801bcce:	f000 fae3 	bl	801c298 <memmove>
 801bcd2:	68a3      	ldr	r3, [r4, #8]
 801bcd4:	1b9b      	subs	r3, r3, r6
 801bcd6:	60a3      	str	r3, [r4, #8]
 801bcd8:	6823      	ldr	r3, [r4, #0]
 801bcda:	4433      	add	r3, r6
 801bcdc:	6023      	str	r3, [r4, #0]
 801bcde:	2000      	movs	r0, #0
 801bce0:	e7db      	b.n	801bc9a <__ssputs_r+0x58>
 801bce2:	462a      	mov	r2, r5
 801bce4:	f7ff ff7e 	bl	801bbe4 <_realloc_r>
 801bce8:	4606      	mov	r6, r0
 801bcea:	2800      	cmp	r0, #0
 801bcec:	d1e1      	bne.n	801bcb2 <__ssputs_r+0x70>
 801bcee:	6921      	ldr	r1, [r4, #16]
 801bcf0:	4650      	mov	r0, sl
 801bcf2:	f7fd fce9 	bl	80196c8 <_free_r>
 801bcf6:	e7c7      	b.n	801bc88 <__ssputs_r+0x46>

0801bcf8 <_svfiprintf_r>:
 801bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcfc:	4698      	mov	r8, r3
 801bcfe:	898b      	ldrh	r3, [r1, #12]
 801bd00:	061b      	lsls	r3, r3, #24
 801bd02:	b09d      	sub	sp, #116	; 0x74
 801bd04:	4607      	mov	r7, r0
 801bd06:	460d      	mov	r5, r1
 801bd08:	4614      	mov	r4, r2
 801bd0a:	d50e      	bpl.n	801bd2a <_svfiprintf_r+0x32>
 801bd0c:	690b      	ldr	r3, [r1, #16]
 801bd0e:	b963      	cbnz	r3, 801bd2a <_svfiprintf_r+0x32>
 801bd10:	2140      	movs	r1, #64	; 0x40
 801bd12:	f7fd fd45 	bl	80197a0 <_malloc_r>
 801bd16:	6028      	str	r0, [r5, #0]
 801bd18:	6128      	str	r0, [r5, #16]
 801bd1a:	b920      	cbnz	r0, 801bd26 <_svfiprintf_r+0x2e>
 801bd1c:	230c      	movs	r3, #12
 801bd1e:	603b      	str	r3, [r7, #0]
 801bd20:	f04f 30ff 	mov.w	r0, #4294967295
 801bd24:	e0d1      	b.n	801beca <_svfiprintf_r+0x1d2>
 801bd26:	2340      	movs	r3, #64	; 0x40
 801bd28:	616b      	str	r3, [r5, #20]
 801bd2a:	2300      	movs	r3, #0
 801bd2c:	9309      	str	r3, [sp, #36]	; 0x24
 801bd2e:	2320      	movs	r3, #32
 801bd30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bd34:	f8cd 800c 	str.w	r8, [sp, #12]
 801bd38:	2330      	movs	r3, #48	; 0x30
 801bd3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801bee4 <_svfiprintf_r+0x1ec>
 801bd3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bd42:	f04f 0901 	mov.w	r9, #1
 801bd46:	4623      	mov	r3, r4
 801bd48:	469a      	mov	sl, r3
 801bd4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd4e:	b10a      	cbz	r2, 801bd54 <_svfiprintf_r+0x5c>
 801bd50:	2a25      	cmp	r2, #37	; 0x25
 801bd52:	d1f9      	bne.n	801bd48 <_svfiprintf_r+0x50>
 801bd54:	ebba 0b04 	subs.w	fp, sl, r4
 801bd58:	d00b      	beq.n	801bd72 <_svfiprintf_r+0x7a>
 801bd5a:	465b      	mov	r3, fp
 801bd5c:	4622      	mov	r2, r4
 801bd5e:	4629      	mov	r1, r5
 801bd60:	4638      	mov	r0, r7
 801bd62:	f7ff ff6e 	bl	801bc42 <__ssputs_r>
 801bd66:	3001      	adds	r0, #1
 801bd68:	f000 80aa 	beq.w	801bec0 <_svfiprintf_r+0x1c8>
 801bd6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd6e:	445a      	add	r2, fp
 801bd70:	9209      	str	r2, [sp, #36]	; 0x24
 801bd72:	f89a 3000 	ldrb.w	r3, [sl]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	f000 80a2 	beq.w	801bec0 <_svfiprintf_r+0x1c8>
 801bd7c:	2300      	movs	r3, #0
 801bd7e:	f04f 32ff 	mov.w	r2, #4294967295
 801bd82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bd86:	f10a 0a01 	add.w	sl, sl, #1
 801bd8a:	9304      	str	r3, [sp, #16]
 801bd8c:	9307      	str	r3, [sp, #28]
 801bd8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bd92:	931a      	str	r3, [sp, #104]	; 0x68
 801bd94:	4654      	mov	r4, sl
 801bd96:	2205      	movs	r2, #5
 801bd98:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd9c:	4851      	ldr	r0, [pc, #324]	; (801bee4 <_svfiprintf_r+0x1ec>)
 801bd9e:	f7e4 fa3f 	bl	8000220 <memchr>
 801bda2:	9a04      	ldr	r2, [sp, #16]
 801bda4:	b9d8      	cbnz	r0, 801bdde <_svfiprintf_r+0xe6>
 801bda6:	06d0      	lsls	r0, r2, #27
 801bda8:	bf44      	itt	mi
 801bdaa:	2320      	movmi	r3, #32
 801bdac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bdb0:	0711      	lsls	r1, r2, #28
 801bdb2:	bf44      	itt	mi
 801bdb4:	232b      	movmi	r3, #43	; 0x2b
 801bdb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bdba:	f89a 3000 	ldrb.w	r3, [sl]
 801bdbe:	2b2a      	cmp	r3, #42	; 0x2a
 801bdc0:	d015      	beq.n	801bdee <_svfiprintf_r+0xf6>
 801bdc2:	9a07      	ldr	r2, [sp, #28]
 801bdc4:	4654      	mov	r4, sl
 801bdc6:	2000      	movs	r0, #0
 801bdc8:	f04f 0c0a 	mov.w	ip, #10
 801bdcc:	4621      	mov	r1, r4
 801bdce:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bdd2:	3b30      	subs	r3, #48	; 0x30
 801bdd4:	2b09      	cmp	r3, #9
 801bdd6:	d94e      	bls.n	801be76 <_svfiprintf_r+0x17e>
 801bdd8:	b1b0      	cbz	r0, 801be08 <_svfiprintf_r+0x110>
 801bdda:	9207      	str	r2, [sp, #28]
 801bddc:	e014      	b.n	801be08 <_svfiprintf_r+0x110>
 801bdde:	eba0 0308 	sub.w	r3, r0, r8
 801bde2:	fa09 f303 	lsl.w	r3, r9, r3
 801bde6:	4313      	orrs	r3, r2
 801bde8:	9304      	str	r3, [sp, #16]
 801bdea:	46a2      	mov	sl, r4
 801bdec:	e7d2      	b.n	801bd94 <_svfiprintf_r+0x9c>
 801bdee:	9b03      	ldr	r3, [sp, #12]
 801bdf0:	1d19      	adds	r1, r3, #4
 801bdf2:	681b      	ldr	r3, [r3, #0]
 801bdf4:	9103      	str	r1, [sp, #12]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	bfbb      	ittet	lt
 801bdfa:	425b      	neglt	r3, r3
 801bdfc:	f042 0202 	orrlt.w	r2, r2, #2
 801be00:	9307      	strge	r3, [sp, #28]
 801be02:	9307      	strlt	r3, [sp, #28]
 801be04:	bfb8      	it	lt
 801be06:	9204      	strlt	r2, [sp, #16]
 801be08:	7823      	ldrb	r3, [r4, #0]
 801be0a:	2b2e      	cmp	r3, #46	; 0x2e
 801be0c:	d10c      	bne.n	801be28 <_svfiprintf_r+0x130>
 801be0e:	7863      	ldrb	r3, [r4, #1]
 801be10:	2b2a      	cmp	r3, #42	; 0x2a
 801be12:	d135      	bne.n	801be80 <_svfiprintf_r+0x188>
 801be14:	9b03      	ldr	r3, [sp, #12]
 801be16:	1d1a      	adds	r2, r3, #4
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	9203      	str	r2, [sp, #12]
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	bfb8      	it	lt
 801be20:	f04f 33ff 	movlt.w	r3, #4294967295
 801be24:	3402      	adds	r4, #2
 801be26:	9305      	str	r3, [sp, #20]
 801be28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bef4 <_svfiprintf_r+0x1fc>
 801be2c:	7821      	ldrb	r1, [r4, #0]
 801be2e:	2203      	movs	r2, #3
 801be30:	4650      	mov	r0, sl
 801be32:	f7e4 f9f5 	bl	8000220 <memchr>
 801be36:	b140      	cbz	r0, 801be4a <_svfiprintf_r+0x152>
 801be38:	2340      	movs	r3, #64	; 0x40
 801be3a:	eba0 000a 	sub.w	r0, r0, sl
 801be3e:	fa03 f000 	lsl.w	r0, r3, r0
 801be42:	9b04      	ldr	r3, [sp, #16]
 801be44:	4303      	orrs	r3, r0
 801be46:	3401      	adds	r4, #1
 801be48:	9304      	str	r3, [sp, #16]
 801be4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be4e:	4826      	ldr	r0, [pc, #152]	; (801bee8 <_svfiprintf_r+0x1f0>)
 801be50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801be54:	2206      	movs	r2, #6
 801be56:	f7e4 f9e3 	bl	8000220 <memchr>
 801be5a:	2800      	cmp	r0, #0
 801be5c:	d038      	beq.n	801bed0 <_svfiprintf_r+0x1d8>
 801be5e:	4b23      	ldr	r3, [pc, #140]	; (801beec <_svfiprintf_r+0x1f4>)
 801be60:	bb1b      	cbnz	r3, 801beaa <_svfiprintf_r+0x1b2>
 801be62:	9b03      	ldr	r3, [sp, #12]
 801be64:	3307      	adds	r3, #7
 801be66:	f023 0307 	bic.w	r3, r3, #7
 801be6a:	3308      	adds	r3, #8
 801be6c:	9303      	str	r3, [sp, #12]
 801be6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be70:	4433      	add	r3, r6
 801be72:	9309      	str	r3, [sp, #36]	; 0x24
 801be74:	e767      	b.n	801bd46 <_svfiprintf_r+0x4e>
 801be76:	fb0c 3202 	mla	r2, ip, r2, r3
 801be7a:	460c      	mov	r4, r1
 801be7c:	2001      	movs	r0, #1
 801be7e:	e7a5      	b.n	801bdcc <_svfiprintf_r+0xd4>
 801be80:	2300      	movs	r3, #0
 801be82:	3401      	adds	r4, #1
 801be84:	9305      	str	r3, [sp, #20]
 801be86:	4619      	mov	r1, r3
 801be88:	f04f 0c0a 	mov.w	ip, #10
 801be8c:	4620      	mov	r0, r4
 801be8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be92:	3a30      	subs	r2, #48	; 0x30
 801be94:	2a09      	cmp	r2, #9
 801be96:	d903      	bls.n	801bea0 <_svfiprintf_r+0x1a8>
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d0c5      	beq.n	801be28 <_svfiprintf_r+0x130>
 801be9c:	9105      	str	r1, [sp, #20]
 801be9e:	e7c3      	b.n	801be28 <_svfiprintf_r+0x130>
 801bea0:	fb0c 2101 	mla	r1, ip, r1, r2
 801bea4:	4604      	mov	r4, r0
 801bea6:	2301      	movs	r3, #1
 801bea8:	e7f0      	b.n	801be8c <_svfiprintf_r+0x194>
 801beaa:	ab03      	add	r3, sp, #12
 801beac:	9300      	str	r3, [sp, #0]
 801beae:	462a      	mov	r2, r5
 801beb0:	4b0f      	ldr	r3, [pc, #60]	; (801bef0 <_svfiprintf_r+0x1f8>)
 801beb2:	a904      	add	r1, sp, #16
 801beb4:	4638      	mov	r0, r7
 801beb6:	f7fd fd87 	bl	80199c8 <_printf_float>
 801beba:	1c42      	adds	r2, r0, #1
 801bebc:	4606      	mov	r6, r0
 801bebe:	d1d6      	bne.n	801be6e <_svfiprintf_r+0x176>
 801bec0:	89ab      	ldrh	r3, [r5, #12]
 801bec2:	065b      	lsls	r3, r3, #25
 801bec4:	f53f af2c 	bmi.w	801bd20 <_svfiprintf_r+0x28>
 801bec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801beca:	b01d      	add	sp, #116	; 0x74
 801becc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bed0:	ab03      	add	r3, sp, #12
 801bed2:	9300      	str	r3, [sp, #0]
 801bed4:	462a      	mov	r2, r5
 801bed6:	4b06      	ldr	r3, [pc, #24]	; (801bef0 <_svfiprintf_r+0x1f8>)
 801bed8:	a904      	add	r1, sp, #16
 801beda:	4638      	mov	r0, r7
 801bedc:	f7fe f818 	bl	8019f10 <_printf_i>
 801bee0:	e7eb      	b.n	801beba <_svfiprintf_r+0x1c2>
 801bee2:	bf00      	nop
 801bee4:	080fbb74 	.word	0x080fbb74
 801bee8:	080fbb7e 	.word	0x080fbb7e
 801beec:	080199c9 	.word	0x080199c9
 801bef0:	0801bc43 	.word	0x0801bc43
 801bef4:	080fbb7a 	.word	0x080fbb7a

0801bef8 <__sfputc_r>:
 801bef8:	6893      	ldr	r3, [r2, #8]
 801befa:	3b01      	subs	r3, #1
 801befc:	2b00      	cmp	r3, #0
 801befe:	b410      	push	{r4}
 801bf00:	6093      	str	r3, [r2, #8]
 801bf02:	da08      	bge.n	801bf16 <__sfputc_r+0x1e>
 801bf04:	6994      	ldr	r4, [r2, #24]
 801bf06:	42a3      	cmp	r3, r4
 801bf08:	db01      	blt.n	801bf0e <__sfputc_r+0x16>
 801bf0a:	290a      	cmp	r1, #10
 801bf0c:	d103      	bne.n	801bf16 <__sfputc_r+0x1e>
 801bf0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf12:	f7fe ba25 	b.w	801a360 <__swbuf_r>
 801bf16:	6813      	ldr	r3, [r2, #0]
 801bf18:	1c58      	adds	r0, r3, #1
 801bf1a:	6010      	str	r0, [r2, #0]
 801bf1c:	7019      	strb	r1, [r3, #0]
 801bf1e:	4608      	mov	r0, r1
 801bf20:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf24:	4770      	bx	lr

0801bf26 <__sfputs_r>:
 801bf26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf28:	4606      	mov	r6, r0
 801bf2a:	460f      	mov	r7, r1
 801bf2c:	4614      	mov	r4, r2
 801bf2e:	18d5      	adds	r5, r2, r3
 801bf30:	42ac      	cmp	r4, r5
 801bf32:	d101      	bne.n	801bf38 <__sfputs_r+0x12>
 801bf34:	2000      	movs	r0, #0
 801bf36:	e007      	b.n	801bf48 <__sfputs_r+0x22>
 801bf38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf3c:	463a      	mov	r2, r7
 801bf3e:	4630      	mov	r0, r6
 801bf40:	f7ff ffda 	bl	801bef8 <__sfputc_r>
 801bf44:	1c43      	adds	r3, r0, #1
 801bf46:	d1f3      	bne.n	801bf30 <__sfputs_r+0xa>
 801bf48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bf4c <_vfiprintf_r>:
 801bf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf50:	460d      	mov	r5, r1
 801bf52:	b09d      	sub	sp, #116	; 0x74
 801bf54:	4614      	mov	r4, r2
 801bf56:	4698      	mov	r8, r3
 801bf58:	4606      	mov	r6, r0
 801bf5a:	b118      	cbz	r0, 801bf64 <_vfiprintf_r+0x18>
 801bf5c:	6983      	ldr	r3, [r0, #24]
 801bf5e:	b90b      	cbnz	r3, 801bf64 <_vfiprintf_r+0x18>
 801bf60:	f7fd face 	bl	8019500 <__sinit>
 801bf64:	4b89      	ldr	r3, [pc, #548]	; (801c18c <_vfiprintf_r+0x240>)
 801bf66:	429d      	cmp	r5, r3
 801bf68:	d11b      	bne.n	801bfa2 <_vfiprintf_r+0x56>
 801bf6a:	6875      	ldr	r5, [r6, #4]
 801bf6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bf6e:	07d9      	lsls	r1, r3, #31
 801bf70:	d405      	bmi.n	801bf7e <_vfiprintf_r+0x32>
 801bf72:	89ab      	ldrh	r3, [r5, #12]
 801bf74:	059a      	lsls	r2, r3, #22
 801bf76:	d402      	bmi.n	801bf7e <_vfiprintf_r+0x32>
 801bf78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bf7a:	f7fd fb84 	bl	8019686 <__retarget_lock_acquire_recursive>
 801bf7e:	89ab      	ldrh	r3, [r5, #12]
 801bf80:	071b      	lsls	r3, r3, #28
 801bf82:	d501      	bpl.n	801bf88 <_vfiprintf_r+0x3c>
 801bf84:	692b      	ldr	r3, [r5, #16]
 801bf86:	b9eb      	cbnz	r3, 801bfc4 <_vfiprintf_r+0x78>
 801bf88:	4629      	mov	r1, r5
 801bf8a:	4630      	mov	r0, r6
 801bf8c:	f7fe fa4c 	bl	801a428 <__swsetup_r>
 801bf90:	b1c0      	cbz	r0, 801bfc4 <_vfiprintf_r+0x78>
 801bf92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bf94:	07dc      	lsls	r4, r3, #31
 801bf96:	d50e      	bpl.n	801bfb6 <_vfiprintf_r+0x6a>
 801bf98:	f04f 30ff 	mov.w	r0, #4294967295
 801bf9c:	b01d      	add	sp, #116	; 0x74
 801bf9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfa2:	4b7b      	ldr	r3, [pc, #492]	; (801c190 <_vfiprintf_r+0x244>)
 801bfa4:	429d      	cmp	r5, r3
 801bfa6:	d101      	bne.n	801bfac <_vfiprintf_r+0x60>
 801bfa8:	68b5      	ldr	r5, [r6, #8]
 801bfaa:	e7df      	b.n	801bf6c <_vfiprintf_r+0x20>
 801bfac:	4b79      	ldr	r3, [pc, #484]	; (801c194 <_vfiprintf_r+0x248>)
 801bfae:	429d      	cmp	r5, r3
 801bfb0:	bf08      	it	eq
 801bfb2:	68f5      	ldreq	r5, [r6, #12]
 801bfb4:	e7da      	b.n	801bf6c <_vfiprintf_r+0x20>
 801bfb6:	89ab      	ldrh	r3, [r5, #12]
 801bfb8:	0598      	lsls	r0, r3, #22
 801bfba:	d4ed      	bmi.n	801bf98 <_vfiprintf_r+0x4c>
 801bfbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bfbe:	f7fd fb63 	bl	8019688 <__retarget_lock_release_recursive>
 801bfc2:	e7e9      	b.n	801bf98 <_vfiprintf_r+0x4c>
 801bfc4:	2300      	movs	r3, #0
 801bfc6:	9309      	str	r3, [sp, #36]	; 0x24
 801bfc8:	2320      	movs	r3, #32
 801bfca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bfce:	f8cd 800c 	str.w	r8, [sp, #12]
 801bfd2:	2330      	movs	r3, #48	; 0x30
 801bfd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c198 <_vfiprintf_r+0x24c>
 801bfd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bfdc:	f04f 0901 	mov.w	r9, #1
 801bfe0:	4623      	mov	r3, r4
 801bfe2:	469a      	mov	sl, r3
 801bfe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bfe8:	b10a      	cbz	r2, 801bfee <_vfiprintf_r+0xa2>
 801bfea:	2a25      	cmp	r2, #37	; 0x25
 801bfec:	d1f9      	bne.n	801bfe2 <_vfiprintf_r+0x96>
 801bfee:	ebba 0b04 	subs.w	fp, sl, r4
 801bff2:	d00b      	beq.n	801c00c <_vfiprintf_r+0xc0>
 801bff4:	465b      	mov	r3, fp
 801bff6:	4622      	mov	r2, r4
 801bff8:	4629      	mov	r1, r5
 801bffa:	4630      	mov	r0, r6
 801bffc:	f7ff ff93 	bl	801bf26 <__sfputs_r>
 801c000:	3001      	adds	r0, #1
 801c002:	f000 80aa 	beq.w	801c15a <_vfiprintf_r+0x20e>
 801c006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c008:	445a      	add	r2, fp
 801c00a:	9209      	str	r2, [sp, #36]	; 0x24
 801c00c:	f89a 3000 	ldrb.w	r3, [sl]
 801c010:	2b00      	cmp	r3, #0
 801c012:	f000 80a2 	beq.w	801c15a <_vfiprintf_r+0x20e>
 801c016:	2300      	movs	r3, #0
 801c018:	f04f 32ff 	mov.w	r2, #4294967295
 801c01c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c020:	f10a 0a01 	add.w	sl, sl, #1
 801c024:	9304      	str	r3, [sp, #16]
 801c026:	9307      	str	r3, [sp, #28]
 801c028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c02c:	931a      	str	r3, [sp, #104]	; 0x68
 801c02e:	4654      	mov	r4, sl
 801c030:	2205      	movs	r2, #5
 801c032:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c036:	4858      	ldr	r0, [pc, #352]	; (801c198 <_vfiprintf_r+0x24c>)
 801c038:	f7e4 f8f2 	bl	8000220 <memchr>
 801c03c:	9a04      	ldr	r2, [sp, #16]
 801c03e:	b9d8      	cbnz	r0, 801c078 <_vfiprintf_r+0x12c>
 801c040:	06d1      	lsls	r1, r2, #27
 801c042:	bf44      	itt	mi
 801c044:	2320      	movmi	r3, #32
 801c046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c04a:	0713      	lsls	r3, r2, #28
 801c04c:	bf44      	itt	mi
 801c04e:	232b      	movmi	r3, #43	; 0x2b
 801c050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c054:	f89a 3000 	ldrb.w	r3, [sl]
 801c058:	2b2a      	cmp	r3, #42	; 0x2a
 801c05a:	d015      	beq.n	801c088 <_vfiprintf_r+0x13c>
 801c05c:	9a07      	ldr	r2, [sp, #28]
 801c05e:	4654      	mov	r4, sl
 801c060:	2000      	movs	r0, #0
 801c062:	f04f 0c0a 	mov.w	ip, #10
 801c066:	4621      	mov	r1, r4
 801c068:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c06c:	3b30      	subs	r3, #48	; 0x30
 801c06e:	2b09      	cmp	r3, #9
 801c070:	d94e      	bls.n	801c110 <_vfiprintf_r+0x1c4>
 801c072:	b1b0      	cbz	r0, 801c0a2 <_vfiprintf_r+0x156>
 801c074:	9207      	str	r2, [sp, #28]
 801c076:	e014      	b.n	801c0a2 <_vfiprintf_r+0x156>
 801c078:	eba0 0308 	sub.w	r3, r0, r8
 801c07c:	fa09 f303 	lsl.w	r3, r9, r3
 801c080:	4313      	orrs	r3, r2
 801c082:	9304      	str	r3, [sp, #16]
 801c084:	46a2      	mov	sl, r4
 801c086:	e7d2      	b.n	801c02e <_vfiprintf_r+0xe2>
 801c088:	9b03      	ldr	r3, [sp, #12]
 801c08a:	1d19      	adds	r1, r3, #4
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	9103      	str	r1, [sp, #12]
 801c090:	2b00      	cmp	r3, #0
 801c092:	bfbb      	ittet	lt
 801c094:	425b      	neglt	r3, r3
 801c096:	f042 0202 	orrlt.w	r2, r2, #2
 801c09a:	9307      	strge	r3, [sp, #28]
 801c09c:	9307      	strlt	r3, [sp, #28]
 801c09e:	bfb8      	it	lt
 801c0a0:	9204      	strlt	r2, [sp, #16]
 801c0a2:	7823      	ldrb	r3, [r4, #0]
 801c0a4:	2b2e      	cmp	r3, #46	; 0x2e
 801c0a6:	d10c      	bne.n	801c0c2 <_vfiprintf_r+0x176>
 801c0a8:	7863      	ldrb	r3, [r4, #1]
 801c0aa:	2b2a      	cmp	r3, #42	; 0x2a
 801c0ac:	d135      	bne.n	801c11a <_vfiprintf_r+0x1ce>
 801c0ae:	9b03      	ldr	r3, [sp, #12]
 801c0b0:	1d1a      	adds	r2, r3, #4
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	9203      	str	r2, [sp, #12]
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	bfb8      	it	lt
 801c0ba:	f04f 33ff 	movlt.w	r3, #4294967295
 801c0be:	3402      	adds	r4, #2
 801c0c0:	9305      	str	r3, [sp, #20]
 801c0c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c1a8 <_vfiprintf_r+0x25c>
 801c0c6:	7821      	ldrb	r1, [r4, #0]
 801c0c8:	2203      	movs	r2, #3
 801c0ca:	4650      	mov	r0, sl
 801c0cc:	f7e4 f8a8 	bl	8000220 <memchr>
 801c0d0:	b140      	cbz	r0, 801c0e4 <_vfiprintf_r+0x198>
 801c0d2:	2340      	movs	r3, #64	; 0x40
 801c0d4:	eba0 000a 	sub.w	r0, r0, sl
 801c0d8:	fa03 f000 	lsl.w	r0, r3, r0
 801c0dc:	9b04      	ldr	r3, [sp, #16]
 801c0de:	4303      	orrs	r3, r0
 801c0e0:	3401      	adds	r4, #1
 801c0e2:	9304      	str	r3, [sp, #16]
 801c0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0e8:	482c      	ldr	r0, [pc, #176]	; (801c19c <_vfiprintf_r+0x250>)
 801c0ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c0ee:	2206      	movs	r2, #6
 801c0f0:	f7e4 f896 	bl	8000220 <memchr>
 801c0f4:	2800      	cmp	r0, #0
 801c0f6:	d03f      	beq.n	801c178 <_vfiprintf_r+0x22c>
 801c0f8:	4b29      	ldr	r3, [pc, #164]	; (801c1a0 <_vfiprintf_r+0x254>)
 801c0fa:	bb1b      	cbnz	r3, 801c144 <_vfiprintf_r+0x1f8>
 801c0fc:	9b03      	ldr	r3, [sp, #12]
 801c0fe:	3307      	adds	r3, #7
 801c100:	f023 0307 	bic.w	r3, r3, #7
 801c104:	3308      	adds	r3, #8
 801c106:	9303      	str	r3, [sp, #12]
 801c108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c10a:	443b      	add	r3, r7
 801c10c:	9309      	str	r3, [sp, #36]	; 0x24
 801c10e:	e767      	b.n	801bfe0 <_vfiprintf_r+0x94>
 801c110:	fb0c 3202 	mla	r2, ip, r2, r3
 801c114:	460c      	mov	r4, r1
 801c116:	2001      	movs	r0, #1
 801c118:	e7a5      	b.n	801c066 <_vfiprintf_r+0x11a>
 801c11a:	2300      	movs	r3, #0
 801c11c:	3401      	adds	r4, #1
 801c11e:	9305      	str	r3, [sp, #20]
 801c120:	4619      	mov	r1, r3
 801c122:	f04f 0c0a 	mov.w	ip, #10
 801c126:	4620      	mov	r0, r4
 801c128:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c12c:	3a30      	subs	r2, #48	; 0x30
 801c12e:	2a09      	cmp	r2, #9
 801c130:	d903      	bls.n	801c13a <_vfiprintf_r+0x1ee>
 801c132:	2b00      	cmp	r3, #0
 801c134:	d0c5      	beq.n	801c0c2 <_vfiprintf_r+0x176>
 801c136:	9105      	str	r1, [sp, #20]
 801c138:	e7c3      	b.n	801c0c2 <_vfiprintf_r+0x176>
 801c13a:	fb0c 2101 	mla	r1, ip, r1, r2
 801c13e:	4604      	mov	r4, r0
 801c140:	2301      	movs	r3, #1
 801c142:	e7f0      	b.n	801c126 <_vfiprintf_r+0x1da>
 801c144:	ab03      	add	r3, sp, #12
 801c146:	9300      	str	r3, [sp, #0]
 801c148:	462a      	mov	r2, r5
 801c14a:	4b16      	ldr	r3, [pc, #88]	; (801c1a4 <_vfiprintf_r+0x258>)
 801c14c:	a904      	add	r1, sp, #16
 801c14e:	4630      	mov	r0, r6
 801c150:	f7fd fc3a 	bl	80199c8 <_printf_float>
 801c154:	4607      	mov	r7, r0
 801c156:	1c78      	adds	r0, r7, #1
 801c158:	d1d6      	bne.n	801c108 <_vfiprintf_r+0x1bc>
 801c15a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c15c:	07d9      	lsls	r1, r3, #31
 801c15e:	d405      	bmi.n	801c16c <_vfiprintf_r+0x220>
 801c160:	89ab      	ldrh	r3, [r5, #12]
 801c162:	059a      	lsls	r2, r3, #22
 801c164:	d402      	bmi.n	801c16c <_vfiprintf_r+0x220>
 801c166:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c168:	f7fd fa8e 	bl	8019688 <__retarget_lock_release_recursive>
 801c16c:	89ab      	ldrh	r3, [r5, #12]
 801c16e:	065b      	lsls	r3, r3, #25
 801c170:	f53f af12 	bmi.w	801bf98 <_vfiprintf_r+0x4c>
 801c174:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c176:	e711      	b.n	801bf9c <_vfiprintf_r+0x50>
 801c178:	ab03      	add	r3, sp, #12
 801c17a:	9300      	str	r3, [sp, #0]
 801c17c:	462a      	mov	r2, r5
 801c17e:	4b09      	ldr	r3, [pc, #36]	; (801c1a4 <_vfiprintf_r+0x258>)
 801c180:	a904      	add	r1, sp, #16
 801c182:	4630      	mov	r0, r6
 801c184:	f7fd fec4 	bl	8019f10 <_printf_i>
 801c188:	e7e4      	b.n	801c154 <_vfiprintf_r+0x208>
 801c18a:	bf00      	nop
 801c18c:	080fb914 	.word	0x080fb914
 801c190:	080fb934 	.word	0x080fb934
 801c194:	080fb8f4 	.word	0x080fb8f4
 801c198:	080fbb74 	.word	0x080fbb74
 801c19c:	080fbb7e 	.word	0x080fbb7e
 801c1a0:	080199c9 	.word	0x080199c9
 801c1a4:	0801bf27 	.word	0x0801bf27
 801c1a8:	080fbb7a 	.word	0x080fbb7a

0801c1ac <_read_r>:
 801c1ac:	b538      	push	{r3, r4, r5, lr}
 801c1ae:	4d07      	ldr	r5, [pc, #28]	; (801c1cc <_read_r+0x20>)
 801c1b0:	4604      	mov	r4, r0
 801c1b2:	4608      	mov	r0, r1
 801c1b4:	4611      	mov	r1, r2
 801c1b6:	2200      	movs	r2, #0
 801c1b8:	602a      	str	r2, [r5, #0]
 801c1ba:	461a      	mov	r2, r3
 801c1bc:	f000 f916 	bl	801c3ec <_read>
 801c1c0:	1c43      	adds	r3, r0, #1
 801c1c2:	d102      	bne.n	801c1ca <_read_r+0x1e>
 801c1c4:	682b      	ldr	r3, [r5, #0]
 801c1c6:	b103      	cbz	r3, 801c1ca <_read_r+0x1e>
 801c1c8:	6023      	str	r3, [r4, #0]
 801c1ca:	bd38      	pop	{r3, r4, r5, pc}
 801c1cc:	200234d0 	.word	0x200234d0

0801c1d0 <__assert_func>:
 801c1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c1d2:	4614      	mov	r4, r2
 801c1d4:	461a      	mov	r2, r3
 801c1d6:	4b09      	ldr	r3, [pc, #36]	; (801c1fc <__assert_func+0x2c>)
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	4605      	mov	r5, r0
 801c1dc:	68d8      	ldr	r0, [r3, #12]
 801c1de:	b14c      	cbz	r4, 801c1f4 <__assert_func+0x24>
 801c1e0:	4b07      	ldr	r3, [pc, #28]	; (801c200 <__assert_func+0x30>)
 801c1e2:	9100      	str	r1, [sp, #0]
 801c1e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c1e8:	4906      	ldr	r1, [pc, #24]	; (801c204 <__assert_func+0x34>)
 801c1ea:	462b      	mov	r3, r5
 801c1ec:	f000 f80e 	bl	801c20c <fiprintf>
 801c1f0:	f000 f881 	bl	801c2f6 <abort>
 801c1f4:	4b04      	ldr	r3, [pc, #16]	; (801c208 <__assert_func+0x38>)
 801c1f6:	461c      	mov	r4, r3
 801c1f8:	e7f3      	b.n	801c1e2 <__assert_func+0x12>
 801c1fa:	bf00      	nop
 801c1fc:	20000f64 	.word	0x20000f64
 801c200:	080fbb85 	.word	0x080fbb85
 801c204:	080fbb92 	.word	0x080fbb92
 801c208:	0801c525 	.word	0x0801c525

0801c20c <fiprintf>:
 801c20c:	b40e      	push	{r1, r2, r3}
 801c20e:	b503      	push	{r0, r1, lr}
 801c210:	4601      	mov	r1, r0
 801c212:	ab03      	add	r3, sp, #12
 801c214:	4805      	ldr	r0, [pc, #20]	; (801c22c <fiprintf+0x20>)
 801c216:	f853 2b04 	ldr.w	r2, [r3], #4
 801c21a:	6800      	ldr	r0, [r0, #0]
 801c21c:	9301      	str	r3, [sp, #4]
 801c21e:	f7ff fe95 	bl	801bf4c <_vfiprintf_r>
 801c222:	b002      	add	sp, #8
 801c224:	f85d eb04 	ldr.w	lr, [sp], #4
 801c228:	b003      	add	sp, #12
 801c22a:	4770      	bx	lr
 801c22c:	20000f64 	.word	0x20000f64

0801c230 <_fstat_r>:
 801c230:	b538      	push	{r3, r4, r5, lr}
 801c232:	4d07      	ldr	r5, [pc, #28]	; (801c250 <_fstat_r+0x20>)
 801c234:	2300      	movs	r3, #0
 801c236:	4604      	mov	r4, r0
 801c238:	4608      	mov	r0, r1
 801c23a:	4611      	mov	r1, r2
 801c23c:	602b      	str	r3, [r5, #0]
 801c23e:	f000 f8ad 	bl	801c39c <_fstat>
 801c242:	1c43      	adds	r3, r0, #1
 801c244:	d102      	bne.n	801c24c <_fstat_r+0x1c>
 801c246:	682b      	ldr	r3, [r5, #0]
 801c248:	b103      	cbz	r3, 801c24c <_fstat_r+0x1c>
 801c24a:	6023      	str	r3, [r4, #0]
 801c24c:	bd38      	pop	{r3, r4, r5, pc}
 801c24e:	bf00      	nop
 801c250:	200234d0 	.word	0x200234d0

0801c254 <_isatty_r>:
 801c254:	b538      	push	{r3, r4, r5, lr}
 801c256:	4d06      	ldr	r5, [pc, #24]	; (801c270 <_isatty_r+0x1c>)
 801c258:	2300      	movs	r3, #0
 801c25a:	4604      	mov	r4, r0
 801c25c:	4608      	mov	r0, r1
 801c25e:	602b      	str	r3, [r5, #0]
 801c260:	f000 f8ac 	bl	801c3bc <_isatty>
 801c264:	1c43      	adds	r3, r0, #1
 801c266:	d102      	bne.n	801c26e <_isatty_r+0x1a>
 801c268:	682b      	ldr	r3, [r5, #0]
 801c26a:	b103      	cbz	r3, 801c26e <_isatty_r+0x1a>
 801c26c:	6023      	str	r3, [r4, #0]
 801c26e:	bd38      	pop	{r3, r4, r5, pc}
 801c270:	200234d0 	.word	0x200234d0

0801c274 <__ascii_mbtowc>:
 801c274:	b082      	sub	sp, #8
 801c276:	b901      	cbnz	r1, 801c27a <__ascii_mbtowc+0x6>
 801c278:	a901      	add	r1, sp, #4
 801c27a:	b142      	cbz	r2, 801c28e <__ascii_mbtowc+0x1a>
 801c27c:	b14b      	cbz	r3, 801c292 <__ascii_mbtowc+0x1e>
 801c27e:	7813      	ldrb	r3, [r2, #0]
 801c280:	600b      	str	r3, [r1, #0]
 801c282:	7812      	ldrb	r2, [r2, #0]
 801c284:	1e10      	subs	r0, r2, #0
 801c286:	bf18      	it	ne
 801c288:	2001      	movne	r0, #1
 801c28a:	b002      	add	sp, #8
 801c28c:	4770      	bx	lr
 801c28e:	4610      	mov	r0, r2
 801c290:	e7fb      	b.n	801c28a <__ascii_mbtowc+0x16>
 801c292:	f06f 0001 	mvn.w	r0, #1
 801c296:	e7f8      	b.n	801c28a <__ascii_mbtowc+0x16>

0801c298 <memmove>:
 801c298:	4288      	cmp	r0, r1
 801c29a:	b510      	push	{r4, lr}
 801c29c:	eb01 0402 	add.w	r4, r1, r2
 801c2a0:	d902      	bls.n	801c2a8 <memmove+0x10>
 801c2a2:	4284      	cmp	r4, r0
 801c2a4:	4623      	mov	r3, r4
 801c2a6:	d807      	bhi.n	801c2b8 <memmove+0x20>
 801c2a8:	1e43      	subs	r3, r0, #1
 801c2aa:	42a1      	cmp	r1, r4
 801c2ac:	d008      	beq.n	801c2c0 <memmove+0x28>
 801c2ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c2b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c2b6:	e7f8      	b.n	801c2aa <memmove+0x12>
 801c2b8:	4402      	add	r2, r0
 801c2ba:	4601      	mov	r1, r0
 801c2bc:	428a      	cmp	r2, r1
 801c2be:	d100      	bne.n	801c2c2 <memmove+0x2a>
 801c2c0:	bd10      	pop	{r4, pc}
 801c2c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c2c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c2ca:	e7f7      	b.n	801c2bc <memmove+0x24>

0801c2cc <_malloc_usable_size_r>:
 801c2cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c2d0:	1f18      	subs	r0, r3, #4
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	bfbc      	itt	lt
 801c2d6:	580b      	ldrlt	r3, [r1, r0]
 801c2d8:	18c0      	addlt	r0, r0, r3
 801c2da:	4770      	bx	lr

0801c2dc <__ascii_wctomb>:
 801c2dc:	b149      	cbz	r1, 801c2f2 <__ascii_wctomb+0x16>
 801c2de:	2aff      	cmp	r2, #255	; 0xff
 801c2e0:	bf85      	ittet	hi
 801c2e2:	238a      	movhi	r3, #138	; 0x8a
 801c2e4:	6003      	strhi	r3, [r0, #0]
 801c2e6:	700a      	strbls	r2, [r1, #0]
 801c2e8:	f04f 30ff 	movhi.w	r0, #4294967295
 801c2ec:	bf98      	it	ls
 801c2ee:	2001      	movls	r0, #1
 801c2f0:	4770      	bx	lr
 801c2f2:	4608      	mov	r0, r1
 801c2f4:	4770      	bx	lr

0801c2f6 <abort>:
 801c2f6:	b508      	push	{r3, lr}
 801c2f8:	2006      	movs	r0, #6
 801c2fa:	f000 f82b 	bl	801c354 <raise>
 801c2fe:	2001      	movs	r0, #1
 801c300:	f000 f87c 	bl	801c3fc <_exit>

0801c304 <_raise_r>:
 801c304:	291f      	cmp	r1, #31
 801c306:	b538      	push	{r3, r4, r5, lr}
 801c308:	4604      	mov	r4, r0
 801c30a:	460d      	mov	r5, r1
 801c30c:	d904      	bls.n	801c318 <_raise_r+0x14>
 801c30e:	2316      	movs	r3, #22
 801c310:	6003      	str	r3, [r0, #0]
 801c312:	f04f 30ff 	mov.w	r0, #4294967295
 801c316:	bd38      	pop	{r3, r4, r5, pc}
 801c318:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c31a:	b112      	cbz	r2, 801c322 <_raise_r+0x1e>
 801c31c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c320:	b94b      	cbnz	r3, 801c336 <_raise_r+0x32>
 801c322:	4620      	mov	r0, r4
 801c324:	f000 f830 	bl	801c388 <_getpid_r>
 801c328:	462a      	mov	r2, r5
 801c32a:	4601      	mov	r1, r0
 801c32c:	4620      	mov	r0, r4
 801c32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c332:	f000 b817 	b.w	801c364 <_kill_r>
 801c336:	2b01      	cmp	r3, #1
 801c338:	d00a      	beq.n	801c350 <_raise_r+0x4c>
 801c33a:	1c59      	adds	r1, r3, #1
 801c33c:	d103      	bne.n	801c346 <_raise_r+0x42>
 801c33e:	2316      	movs	r3, #22
 801c340:	6003      	str	r3, [r0, #0]
 801c342:	2001      	movs	r0, #1
 801c344:	e7e7      	b.n	801c316 <_raise_r+0x12>
 801c346:	2400      	movs	r4, #0
 801c348:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c34c:	4628      	mov	r0, r5
 801c34e:	4798      	blx	r3
 801c350:	2000      	movs	r0, #0
 801c352:	e7e0      	b.n	801c316 <_raise_r+0x12>

0801c354 <raise>:
 801c354:	4b02      	ldr	r3, [pc, #8]	; (801c360 <raise+0xc>)
 801c356:	4601      	mov	r1, r0
 801c358:	6818      	ldr	r0, [r3, #0]
 801c35a:	f7ff bfd3 	b.w	801c304 <_raise_r>
 801c35e:	bf00      	nop
 801c360:	20000f64 	.word	0x20000f64

0801c364 <_kill_r>:
 801c364:	b538      	push	{r3, r4, r5, lr}
 801c366:	4d07      	ldr	r5, [pc, #28]	; (801c384 <_kill_r+0x20>)
 801c368:	2300      	movs	r3, #0
 801c36a:	4604      	mov	r4, r0
 801c36c:	4608      	mov	r0, r1
 801c36e:	4611      	mov	r1, r2
 801c370:	602b      	str	r3, [r5, #0]
 801c372:	f000 f82b 	bl	801c3cc <_kill>
 801c376:	1c43      	adds	r3, r0, #1
 801c378:	d102      	bne.n	801c380 <_kill_r+0x1c>
 801c37a:	682b      	ldr	r3, [r5, #0]
 801c37c:	b103      	cbz	r3, 801c380 <_kill_r+0x1c>
 801c37e:	6023      	str	r3, [r4, #0]
 801c380:	bd38      	pop	{r3, r4, r5, pc}
 801c382:	bf00      	nop
 801c384:	200234d0 	.word	0x200234d0

0801c388 <_getpid_r>:
 801c388:	f000 b810 	b.w	801c3ac <_getpid>

0801c38c <_close>:
 801c38c:	4b02      	ldr	r3, [pc, #8]	; (801c398 <_close+0xc>)
 801c38e:	2258      	movs	r2, #88	; 0x58
 801c390:	601a      	str	r2, [r3, #0]
 801c392:	f04f 30ff 	mov.w	r0, #4294967295
 801c396:	4770      	bx	lr
 801c398:	200234d0 	.word	0x200234d0

0801c39c <_fstat>:
 801c39c:	4b02      	ldr	r3, [pc, #8]	; (801c3a8 <_fstat+0xc>)
 801c39e:	2258      	movs	r2, #88	; 0x58
 801c3a0:	601a      	str	r2, [r3, #0]
 801c3a2:	f04f 30ff 	mov.w	r0, #4294967295
 801c3a6:	4770      	bx	lr
 801c3a8:	200234d0 	.word	0x200234d0

0801c3ac <_getpid>:
 801c3ac:	4b02      	ldr	r3, [pc, #8]	; (801c3b8 <_getpid+0xc>)
 801c3ae:	2258      	movs	r2, #88	; 0x58
 801c3b0:	601a      	str	r2, [r3, #0]
 801c3b2:	f04f 30ff 	mov.w	r0, #4294967295
 801c3b6:	4770      	bx	lr
 801c3b8:	200234d0 	.word	0x200234d0

0801c3bc <_isatty>:
 801c3bc:	4b02      	ldr	r3, [pc, #8]	; (801c3c8 <_isatty+0xc>)
 801c3be:	2258      	movs	r2, #88	; 0x58
 801c3c0:	601a      	str	r2, [r3, #0]
 801c3c2:	2000      	movs	r0, #0
 801c3c4:	4770      	bx	lr
 801c3c6:	bf00      	nop
 801c3c8:	200234d0 	.word	0x200234d0

0801c3cc <_kill>:
 801c3cc:	4b02      	ldr	r3, [pc, #8]	; (801c3d8 <_kill+0xc>)
 801c3ce:	2258      	movs	r2, #88	; 0x58
 801c3d0:	601a      	str	r2, [r3, #0]
 801c3d2:	f04f 30ff 	mov.w	r0, #4294967295
 801c3d6:	4770      	bx	lr
 801c3d8:	200234d0 	.word	0x200234d0

0801c3dc <_lseek>:
 801c3dc:	4b02      	ldr	r3, [pc, #8]	; (801c3e8 <_lseek+0xc>)
 801c3de:	2258      	movs	r2, #88	; 0x58
 801c3e0:	601a      	str	r2, [r3, #0]
 801c3e2:	f04f 30ff 	mov.w	r0, #4294967295
 801c3e6:	4770      	bx	lr
 801c3e8:	200234d0 	.word	0x200234d0

0801c3ec <_read>:
 801c3ec:	4b02      	ldr	r3, [pc, #8]	; (801c3f8 <_read+0xc>)
 801c3ee:	2258      	movs	r2, #88	; 0x58
 801c3f0:	601a      	str	r2, [r3, #0]
 801c3f2:	f04f 30ff 	mov.w	r0, #4294967295
 801c3f6:	4770      	bx	lr
 801c3f8:	200234d0 	.word	0x200234d0

0801c3fc <_exit>:
 801c3fc:	e7fe      	b.n	801c3fc <_exit>
	...

0801c400 <_init>:
 801c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c402:	bf00      	nop
 801c404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c406:	bc08      	pop	{r3}
 801c408:	469e      	mov	lr, r3
 801c40a:	4770      	bx	lr

0801c40c <_fini>:
 801c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c40e:	bf00      	nop
 801c410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c412:	bc08      	pop	{r3}
 801c414:	469e      	mov	lr, r3
 801c416:	4770      	bx	lr
