
LibJPEG_Decoding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006260  0800e150  0800e150  0001e150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080143b0  080143b0  000243b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080143b8  080143b8  000243b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080143bc  080143bc  000243bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  20000000  080143c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001448  200000a8  08014464  000300a8  2**3
                  ALLOC
  8 ._user_heap_stack 0000b000  200014f0  08014464  000314f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 10 .debug_line   0003fa3b  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0004a3fd  00000000  00000000  0006fb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008ea9  00000000  00000000  000b9f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001820  00000000  00000000  000c2db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    001086ae  00000000  00000000  000c45d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002830  00000000  00000000  001ccc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000276e9  00000000  00000000  001cf4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003385d  00000000  00000000  001f6ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0022a3fe  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004d50  00000000  00000000  0022a450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e138 	.word	0x0800e138

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	0800e138 	.word	0x0800e138

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000df4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000df6:	e003      	b.n	8000e00 <LoopCopyDataInit>

08000df8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dfe:	3104      	adds	r1, #4

08000e00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e00:	480b      	ldr	r0, [pc, #44]	; (8000e30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e08:	d3f6      	bcc.n	8000df8 <CopyDataInit>
  ldr  r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e0c:	e002      	b.n	8000e14 <LoopFillZerobss>

08000e0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e10:	f842 3b04 	str.w	r3, [r2], #4

08000e14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e18:	d3f9      	bcc.n	8000e0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1a:	f000 ff61 	bl	8001ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f00c fcd3 	bl	800d7c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f000 f8c1 	bl	8000fa8 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000e2c:	080143c0 	.word	0x080143c0
  ldr  r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e34:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8000e38:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8000e3c:	200014f0 	.word	0x200014f0

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>
	...

08000e44 <jpeg_decode>:
  * @retval None
  */


void jpeg_decode(JFILE *file, uint32_t width, uint8_t * buff, uint8_t (*callback)(uint8_t*, uint32_t))
{ 
 8000e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t row_stride = 0; /* physical row width in image buffer */
  
  buffer[0] = buff;
	
  /* Step 1: allocate and initialize JPEG decompression object */
  cinfo.err = jpeg_std_error(&jerr);
 8000e46:	4c20      	ldr	r4, [pc, #128]	; (8000ec8 <jpeg_decode+0x84>)
{ 
 8000e48:	461e      	mov	r6, r3
  JSAMPROW buffer[2] = {0}; /* Output row buffer */
 8000e4a:	2300      	movs	r3, #0
{ 
 8000e4c:	4607      	mov	r7, r0
  cinfo.err = jpeg_std_error(&jerr);
 8000e4e:	4620      	mov	r0, r4
{ 
 8000e50:	460d      	mov	r5, r1
  buffer[0] = buff;
 8000e52:	e9cd 2300 	strd	r2, r3, [sp]
  cinfo.err = jpeg_std_error(&jerr);
 8000e56:	f00a f9f9 	bl	800b24c <jpeg_std_error>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4620      	mov	r0, r4

  /* Initialize the JPEG decompression object */  
  jpeg_create_decompress(&cinfo);
 8000e5e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8000e62:	2150      	movs	r1, #80	; 0x50
  cinfo.dct_method = JDCT_FLOAT;

  /* Step 5: start decompressor */
  jpeg_start_decompress(&cinfo);

  row_stride = width * 3;
 8000e64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  cinfo.err = jpeg_std_error(&jerr);
 8000e68:	f840 3f88 	str.w	r3, [r0, #136]!
  jpeg_create_decompress(&cinfo);
 8000e6c:	f004 ff2b 	bl	8005cc6 <jpeg_CreateDecompress>
  jpeg_stdio_src (&cinfo, file);
 8000e70:	4639      	mov	r1, r7
 8000e72:	f104 0088 	add.w	r0, r4, #136	; 0x88
  while (cinfo.output_scanline < cinfo.output_height)
  {
    (void) jpeg_read_scanlines(&cinfo, buffer, 1);
 8000e76:	f104 0788 	add.w	r7, r4, #136	; 0x88
  jpeg_stdio_src (&cinfo, file);
 8000e7a:	f005 feb3 	bl	8006be4 <jpeg_stdio_src>
  jpeg_read_header(&cinfo, TRUE);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8000e84:	f005 f828 	bl	8005ed8 <jpeg_read_header>
  cinfo.dct_method = JDCT_FLOAT;
 8000e88:	2302      	movs	r3, #2
  jpeg_start_decompress(&cinfo);
 8000e8a:	f104 0088 	add.w	r0, r4, #136	; 0x88
  cinfo.dct_method = JDCT_FLOAT;
 8000e8e:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
  jpeg_start_decompress(&cinfo);
 8000e92:	f005 f87c 	bl	8005f8e <jpeg_start_decompress>
  while (cinfo.output_scanline < cinfo.output_height)
 8000e96:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 8000e9a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d209      	bcs.n	8000eb6 <jpeg_decode+0x72>
    (void) jpeg_read_scanlines(&cinfo, buffer, 1);
 8000ea2:	4669      	mov	r1, sp
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4638      	mov	r0, r7
 8000ea8:	f005 f8e1 	bl	800606e <jpeg_read_scanlines>
    
    if (callback(buffer[0], row_stride) != 0)
 8000eac:	4629      	mov	r1, r5
 8000eae:	9800      	ldr	r0, [sp, #0]
 8000eb0:	47b0      	blx	r6
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d0ef      	beq.n	8000e96 <jpeg_decode+0x52>
      break;
    }
  }

  /* Step 6: Finish decompression */
  jpeg_finish_decompress(&cinfo);
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <jpeg_decode+0x88>)
 8000eb8:	f005 f830 	bl	8005f1c <jpeg_finish_decompress>

  /* Step 7: Release JPEG decompression object */
  jpeg_destroy_decompress(&cinfo);
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <jpeg_decode+0x88>)
 8000ebe:	f004 ff4f 	bl	8005d60 <jpeg_destroy_decompress>
    
}
 8000ec2:	b003      	add	sp, #12
 8000ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000c8 	.word	0x200000c8
 8000ecc:	20000150 	.word	0x20000150

08000ed0 <read_file>:
 * The modules that use fread() and fwrite() always invoke them through
 * these macros.  On some systems you may need to twiddle the argument casts.
 * CAUTION: argument order is different from underlying functions!
 */
size_t read_file (JFILE  *file, uint8_t *buf, uint32_t sizeofbuf)
{
 8000ed0:	b510      	push	{r4, lr}
  static size_t BytesReadfile ;  
  f_read (file, buf , sizeofbuf, &BytesReadfile); 
 8000ed2:	4c03      	ldr	r4, [pc, #12]	; (8000ee0 <read_file+0x10>)
 8000ed4:	4623      	mov	r3, r4
 8000ed6:	f004 fcbf 	bl	8005858 <f_read>
  return BytesReadfile; 
}
 8000eda:	6820      	ldr	r0, [r4, #0]
 8000edc:	bd10      	pop	{r4, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000338 	.word	0x20000338

08000ee4 <Jpeg_CallbackFunction>:
  * @param  Row: Output row buffer
  * @param  DataLength: Row width in output buffer
  * @retval None
  */
static uint8_t Jpeg_CallbackFunction(uint8_t* Row, uint32_t DataLength)
{
 8000ee4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#ifdef USE_DMA2D  
  static DMA2D_HandleTypeDef hdma2d_eval;
  
  offset = (LCD_FRAME_BUFFER + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4));
 8000ee8:	4e28      	ldr	r6, [pc, #160]	; (8000f8c <Jpeg_CallbackFunction+0xa8>)
  hdma2d_eval.Init.OutputOffset = 0;     
  
  /* Foreground Configuration */
  hdma2d_eval.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d_eval.LayerCfg[1].InputAlpha = 0xFF;
  hdma2d_eval.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000eea:	f04f 0801 	mov.w	r8, #1
  offset = (LCD_FRAME_BUFFER + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4));
 8000eee:	4928      	ldr	r1, [pc, #160]	; (8000f90 <Jpeg_CallbackFunction+0xac>)
{
 8000ef0:	4607      	mov	r7, r0
  offset = (LCD_FRAME_BUFFER + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4));
 8000ef2:	6832      	ldr	r2, [r6, #0]
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <Jpeg_CallbackFunction+0xb0>)
 8000ef6:	4c28      	ldr	r4, [pc, #160]	; (8000f98 <Jpeg_CallbackFunction+0xb4>)
 8000ef8:	fb01 3302 	mla	r3, r1, r2, r3
  hdma2d_eval.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8000efc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hdma2d_eval.LayerCfg[1].InputOffset = 0;
  
  hdma2d_eval.Instance = DMA2D; 
 8000f00:	4625      	mov	r5, r4
  offset = (LCD_FRAME_BUFFER + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4));
 8000f02:	6023      	str	r3, [r4, #0]
  hdma2d_eval.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8000f04:	2300      	movs	r3, #0
 8000f06:	e9c4 2302 	strd	r2, r3, [r4, #8]
  hdma2d_eval.Init.OutputOffset = 0;     
 8000f0a:	6123      	str	r3, [r4, #16]
  hdma2d_eval.LayerCfg[1].InputAlpha = 0xFF;
 8000f0c:	22ff      	movs	r2, #255	; 0xff
  hdma2d_eval.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f0e:	6363      	str	r3, [r4, #52]	; 0x34
  hdma2d_eval.LayerCfg[1].InputAlpha = 0xFF;
 8000f10:	63a2      	str	r2, [r4, #56]	; 0x38
  hdma2d_eval.LayerCfg[1].InputOffset = 0;
 8000f12:	e9c4 380b 	strd	r3, r8, [r4, #44]	; 0x2c
  hdma2d_eval.Instance = DMA2D; 
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <Jpeg_CallbackFunction+0xb8>)
 8000f18:	f845 3f04 	str.w	r3, [r5, #4]!
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK) 
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	f001 f912 	bl	8002146 <HAL_DMA2D_Init>
 8000f22:	b990      	cbnz	r0, 8000f4a <Jpeg_CallbackFunction+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, 1) == HAL_OK) 
 8000f24:	4641      	mov	r1, r8
 8000f26:	4628      	mov	r0, r5
 8000f28:	f001 f9d4 	bl	80022d4 <HAL_DMA2D_ConfigLayer>
 8000f2c:	b968      	cbnz	r0, 8000f4a <Jpeg_CallbackFunction+0x66>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, (uint32_t)Row, (uint32_t)offset, IMAGE_WIDTH, 1) == HAL_OK)
 8000f2e:	f8cd 8000 	str.w	r8, [sp]
 8000f32:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f36:	6822      	ldr	r2, [r4, #0]
 8000f38:	4639      	mov	r1, r7
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	f001 f92f 	bl	800219e <HAL_DMA2D_Start>
 8000f40:	b918      	cbnz	r0, 8000f4a <Jpeg_CallbackFunction+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8000f42:	210a      	movs	r1, #10
 8000f44:	4628      	mov	r0, r5
 8000f46:	f001 f944 	bl	80021d2 <HAL_DMA2D_PollForTransfer>
{
 8000f4a:	2000      	movs	r0, #0
#ifdef SWAP_RB 
  uint32_t pixel = 0, width_counter, result = 0, result1 = 0;
  
   for(width_counter = 0; width_counter < IMAGE_WIDTH; width_counter++)
   {
     pixel = *(__IO uint32_t *)(LCD_FRAME_BUFFER + (width_counter*4) + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4)); 
 8000f4c:	4f14      	ldr	r7, [pc, #80]	; (8000fa0 <Jpeg_CallbackFunction+0xbc>)
 8000f4e:	4d15      	ldr	r5, [pc, #84]	; (8000fa4 <Jpeg_CallbackFunction+0xc0>)
 8000f50:	6833      	ldr	r3, [r6, #0]
 8000f52:	fb07 5303 	mla	r3, r7, r3, r5
 8000f56:	4403      	add	r3, r0
   for(width_counter = 0; width_counter < IMAGE_WIDTH; width_counter++)
 8000f58:	3001      	adds	r0, #1
     pixel = *(__IO uint32_t *)(LCD_FRAME_BUFFER + (width_counter*4) + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4)); 
 8000f5a:	009b      	lsls	r3, r3, #2
   for(width_counter = 0; width_counter < IMAGE_WIDTH; width_counter++)
 8000f5c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
     pixel = *(__IO uint32_t *)(LCD_FRAME_BUFFER + (width_counter*4) + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4)); 
 8000f60:	6819      	ldr	r1, [r3, #0]
     result1 = (((pixel & 0x00FF0000) >> 16) | ((pixel & 0x000000FF) << 16));
 8000f62:	ea4f 4401 	mov.w	r4, r1, lsl #16
 8000f66:	f3c1 4207 	ubfx	r2, r1, #16, #8
     pixel = pixel & 0xFF00FF00;
 8000f6a:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
     result1 = (((pixel & 0x00FF0000) >> 16) | ((pixel & 0x000000FF) << 16));
 8000f6e:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8000f72:	ea42 0204 	orr.w	r2, r2, r4
     result = (result1 | pixel);
 8000f76:	ea42 0201 	orr.w	r2, r2, r1
     *(__IO uint32_t *)(LCD_FRAME_BUFFER + (width_counter*4) + (IMAGE_WIDTH * (IMAGE_HEIGHT - line_counter - 1) * 4)) = result;
 8000f7a:	601a      	str	r2, [r3, #0]
   for(width_counter = 0; width_counter < IMAGE_WIDTH; width_counter++)
 8000f7c:	d1e8      	bne.n	8000f50 <Jpeg_CallbackFunction+0x6c>
     
   }  
#endif

  line_counter--;
 8000f7e:	6833      	ldr	r3, [r6, #0]
  return 0;
}
 8000f80:	2000      	movs	r0, #0
  line_counter--;
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6033      	str	r3, [r6, #0]
}
 8000f86:	b002      	add	sp, #8
 8000f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	fffffb00 	.word	0xfffffb00
 8000f94:	c004ab00 	.word	0xc004ab00
 8000f98:	20000340 	.word	0x20000340
 8000f9c:	4002b000 	.word	0x4002b000
 8000fa0:	3ffffec0 	.word	0x3ffffec0
 8000fa4:	30012ac0 	.word	0x30012ac0

08000fa8 <main>:
{
 8000fa8:	b500      	push	{lr}
 8000faa:	b095      	sub	sp, #84	; 0x54
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fac:	f240 1501 	movw	r5, #257	; 0x101
  HAL_MPU_Disable();
 8000fb0:	f000 ff7c 	bl	8001eac <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fb4:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fb6:	2400      	movs	r4, #0

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fb8:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fba:	f8ad 3020 	strh.w	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fbe:	f248 731f 	movw	r3, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fc2:	950b      	str	r5, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fc4:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fc8:	f000 ff8e 	bl	8001ee8 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0xC0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000fcc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8000fd0:	4b6f      	ldr	r3, [pc, #444]	; (8001190 <main+0x1e8>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fd2:	f8ad 5020 	strh.w	r5, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /* Configure the MPU attributes FMC control registers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0xA0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8000fd6:	f04f 4520 	mov.w	r5, #2684354560	; 0xa0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000fda:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000fde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fe2:	a808      	add	r0, sp, #32
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000fe4:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fe6:	f000 ff7f 	bl	8001ee8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fea:	f240 2301 	movw	r3, #513	; 0x201
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fee:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ff0:	f8ad 3020 	strh.w	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8000ff4:	4b67      	ldr	r3, [pc, #412]	; (8001194 <main+0x1ec>)
 8000ff6:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ffa:	4b67      	ldr	r3, [pc, #412]	; (8001198 <main+0x1f0>)
 8000ffc:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ffe:	f000 ff73 	bl	8001ee8 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001002:	2004      	movs	r0, #4
 8001004:	f000 ff60 	bl	8001ec8 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001008:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800100c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001010:	4a62      	ldr	r2, [pc, #392]	; (800119c <main+0x1f4>)
 8001012:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001016:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800101a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800101e:	6953      	ldr	r3, [r2, #20]
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001026:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800102a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800102e:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001032:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001036:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800103a:	f643 70e0 	movw	r0, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800103e:	f3c3 01c9 	ubfx	r1, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001042:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001046:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001048:	ea03 0600 	and.w	r6, r3, r0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800104c:	460d      	mov	r5, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800104e:	ea46 7485 	orr.w	r4, r6, r5, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001052:	3d01      	subs	r5, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001054:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001058:	d2f9      	bcs.n	800104e <main+0xa6>
    } while(sets-- != 0U);
 800105a:	3b20      	subs	r3, #32
 800105c:	f113 0f20 	cmn.w	r3, #32
 8001060:	d1f2      	bne.n	8001048 <main+0xa0>
 8001062:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001066:	6953      	ldr	r3, [r2, #20]
 8001068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001072:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001076:	f000 fe7d 	bl	8001d74 <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107a:	2601      	movs	r6, #1
 800107c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001080:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001082:	2119      	movs	r1, #25
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001084:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001086:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001088:	e9cd 6308 	strd	r6, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001090:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001094:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001098:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800109c:	2308      	movs	r3, #8
 800109e:	9313      	str	r3, [sp, #76]	; 0x4c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80010a0:	f001 fc00 	bl	80028a4 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 80010a4:	b100      	cbz	r0, 80010a8 <main+0x100>
    while(1) { ; }
 80010a6:	e7fe      	b.n	80010a6 <main+0xfe>
  ret = HAL_PWREx_EnableOverDrive();
 80010a8:	f001 fbc4 	bl	8002834 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 80010ac:	b100      	cbz	r0, 80010b0 <main+0x108>
    while(1) { ; }
 80010ae:	e7fe      	b.n	80010ae <main+0x106>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80010b0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; 
 80010b2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 80010b8:	2106      	movs	r1, #6
 80010ba:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010bc:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; 
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 80010c8:	f001 fdd8 	bl	8002c7c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 80010cc:	4604      	mov	r4, r0
 80010ce:	b100      	cbz	r0, 80010d2 <main+0x12a>
    while(1) { ; }
 80010d0:	e7fe      	b.n	80010d0 <main+0x128>
  BSP_LCD_Init();
 80010d2:	f000 fb19 	bl	8001708 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 80010d6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80010da:	4620      	mov	r0, r4
 80010dc:	f000 f8d2 	bl	8001284 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 80010e0:	4620      	mov	r0, r4
 80010e2:	f000 f90b 	bl	80012fc <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();  
 80010e6:	f000 fa3f 	bl	8001568 <BSP_LCD_DisplayOn>
  BSP_LCD_SetLayerWindow(0, 0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);
 80010ea:	23f0      	movs	r3, #240	; 0xf0
 80010ec:	4622      	mov	r2, r4
 80010ee:	4621      	mov	r1, r4
 80010f0:	4620      	mov	r0, r4
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010f8:	f000 f906 	bl	8001308 <BSP_LCD_SetLayerWindow>
  BSP_LCD_Clear(LCD_COLOR_WHITE); 
 80010fc:	4628      	mov	r0, r5
 80010fe:	f000 f933 	bl	8001368 <BSP_LCD_Clear>
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8001102:	4927      	ldr	r1, [pc, #156]	; (80011a0 <main+0x1f8>)
 8001104:	4827      	ldr	r0, [pc, #156]	; (80011a4 <main+0x1fc>)
 8001106:	f004 fcd5 	bl	8005ab4 <FATFS_LinkDriver>
 800110a:	4602      	mov	r2, r0
 800110c:	b9c8      	cbnz	r0, 8001142 <main+0x19a>
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 800110e:	4924      	ldr	r1, [pc, #144]	; (80011a0 <main+0x1f8>)
 8001110:	1d08      	adds	r0, r1, #4
 8001112:	f004 fa5d 	bl	80055d0 <f_mount>
 8001116:	b9a0      	cbnz	r0, 8001142 <main+0x19a>
       if(f_open(&MyFile, "image.jpg", FA_READ) == FR_OK)
 8001118:	4632      	mov	r2, r6
 800111a:	4923      	ldr	r1, [pc, #140]	; (80011a8 <main+0x200>)
 800111c:	4823      	ldr	r0, [pc, #140]	; (80011ac <main+0x204>)
 800111e:	f004 fa83 	bl	8005628 <f_open>
 8001122:	bb58      	cbnz	r0, 800117c <main+0x1d4>
    		  HAL_Delay(2000);
 8001124:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001128:	f000 fe48 	bl	8001dbc <HAL_Delay>
    		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 800112c:	4820      	ldr	r0, [pc, #128]	; (80011b0 <main+0x208>)
 800112e:	f000 f91b 	bl	8001368 <BSP_LCD_Clear>
    		  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"dorost");
 8001132:	4920      	ldr	r1, [pc, #128]	; (80011b4 <main+0x20c>)
    		  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"fuat");
 8001134:	2005      	movs	r0, #5
 8001136:	f000 fa05 	bl	8001544 <BSP_LCD_DisplayStringAtLine>
    		  HAL_Delay(2000);
 800113a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800113e:	f000 fe3d 	bl	8001dbc <HAL_Delay>
  jpeg_decode(&MyFile, IMAGE_WIDTH, _aucLine, Jpeg_CallbackFunction);
 8001142:	4a1d      	ldr	r2, [pc, #116]	; (80011b8 <main+0x210>)
 8001144:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <main+0x214>)
 800114a:	f5a2 700c 	sub.w	r0, r2, #560	; 0x230
	  BSP_LCD_Clear(LCD_COLOR_BLUE);
 800114e:	4d18      	ldr	r5, [pc, #96]	; (80011b0 <main+0x208>)
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"1111");
 8001150:	4c1b      	ldr	r4, [pc, #108]	; (80011c0 <main+0x218>)
  jpeg_decode(&MyFile, IMAGE_WIDTH, _aucLine, Jpeg_CallbackFunction);
 8001152:	f7ff fe77 	bl	8000e44 <jpeg_decode>
  f_close(&MyFile);
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <main+0x204>)
 8001158:	f004 fc79 	bl	8005a4e <f_close>
	  HAL_Delay(2000);
 800115c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001160:	f000 fe2c 	bl	8001dbc <HAL_Delay>
	  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001164:	4628      	mov	r0, r5
 8001166:	f000 f8ff 	bl	8001368 <BSP_LCD_Clear>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"1111");
 800116a:	4621      	mov	r1, r4
 800116c:	2005      	movs	r0, #5
 800116e:	f000 f9e9 	bl	8001544 <BSP_LCD_DisplayStringAtLine>
	  HAL_Delay(2000);
 8001172:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001176:	f000 fe21 	bl	8001dbc <HAL_Delay>
  while (1)
 800117a:	e7ef      	b.n	800115c <main+0x1b4>
    		  HAL_Delay(2000);
 800117c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001180:	f000 fe1c 	bl	8001dbc <HAL_Delay>
    		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001184:	480a      	ldr	r0, [pc, #40]	; (80011b0 <main+0x208>)
 8001186:	f000 f8ef 	bl	8001368 <BSP_LCD_Clear>
    		  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"fuat");
 800118a:	490e      	ldr	r1, [pc, #56]	; (80011c4 <main+0x21c>)
 800118c:	e7d2      	b.n	8001134 <main+0x18c>
 800118e:	bf00      	nop
 8001190:	03000018 	.word	0x03000018
 8001194:	0300000c 	.word	0x0300000c
 8001198:	01000101 	.word	0x01000101
 800119c:	e000ed00 	.word	0xe000ed00
 80011a0:	20000384 	.word	0x20000384
 80011a4:	08011ef8 	.word	0x08011ef8
 80011a8:	080130cc 	.word	0x080130cc
 80011ac:	200005bc 	.word	0x200005bc
 80011b0:	ff0000ff 	.word	0xff0000ff
 80011b4:	080130d6 	.word	0x080130d6
 80011b8:	200007ec 	.word	0x200007ec
 80011bc:	08000ee5 	.word	0x08000ee5
 80011c0:	080130e2 	.word	0x080130e2
 80011c4:	080130dd 	.word	0x080130dd

080011c8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80011c8:	4770      	bx	lr

080011ca <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler>

080011cc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler>

080011ce <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler>

080011d0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler>

080011d2 <SVC_Handler>:
 80011d2:	4770      	bx	lr

080011d4 <DebugMon_Handler>:
 80011d4:	4770      	bx	lr

080011d6 <PendSV_Handler>:
 80011d6:	4770      	bx	lr

080011d8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80011d8:	f000 bdde 	b.w	8001d98 <HAL_IncTick>

080011dc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80011dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80011e0:	4c1a      	ldr	r4, [pc, #104]	; (800124c <LL_FillBuffer+0x70>)
{
 80011e2:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80011e4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 80011e8:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80011ea:	2234      	movs	r2, #52	; 0x34
{
 80011ec:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80011ee:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80011f0:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80011f2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
{
 80011f6:	460e      	mov	r6, r1
 80011f8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80011fc:	fb02 4303 	mla	r3, r2, r3, r4
 8001200:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001206:	2d02      	cmp	r5, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001208:	60e3      	str	r3, [r4, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800120a:	bf18      	it	ne
 800120c:	2500      	movne	r5, #0
  hDma2dHandler.Instance = DMA2D;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <LL_FillBuffer+0x74>)
 8001210:	60a5      	str	r5, [r4, #8]
 8001212:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001214:	f000 ff97 	bl	8002146 <HAL_DMA2D_Init>
 8001218:	b9a0      	cbnz	r0, 8001244 <LL_FillBuffer+0x68>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800121a:	4649      	mov	r1, r9
 800121c:	4620      	mov	r0, r4
 800121e:	f001 f859 	bl	80022d4 <HAL_DMA2D_ConfigLayer>
 8001222:	b978      	cbnz	r0, 8001244 <LL_FillBuffer+0x68>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4632      	mov	r2, r6
 8001228:	4651      	mov	r1, sl
 800122a:	4620      	mov	r0, r4
 800122c:	f8cd 8000 	str.w	r8, [sp]
 8001230:	f000 ffb5 	bl	800219e <HAL_DMA2D_Start>
 8001234:	b930      	cbnz	r0, 8001244 <LL_FillBuffer+0x68>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001236:	210a      	movs	r1, #10
 8001238:	4620      	mov	r0, r4
      }
    }
  } 
}
 800123a:	b002      	add	sp, #8
 800123c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001240:	f000 bfc7 	b.w	80021d2 <HAL_DMA2D_PollForTransfer>
}
 8001244:	b002      	add	sp, #8
 8001246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124a:	bf00      	nop
 800124c:	20000ff0 	.word	0x20000ff0
 8001250:	4002b000 	.word	0x4002b000

08001254 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <BSP_LCD_GetXSize+0x14>)
 8001256:	2134      	movs	r1, #52	; 0x34
 8001258:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800125c:	fb01 3302 	mla	r3, r1, r2, r3
}
 8001260:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000ff0 	.word	0x20000ff0

0800126c <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <BSP_LCD_GetYSize+0x14>)
 800126e:	2134      	movs	r1, #52	; 0x34
 8001270:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001274:	fb01 3302 	mla	r3, r1, r2, r3
}
 8001278:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000ff0 	.word	0x20000ff0

08001284 <BSP_LCD_LayerDefaultInit>:
{     
 8001284:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
 8001286:	2400      	movs	r4, #0
{     
 8001288:	b08e      	sub	sp, #56	; 0x38
 800128a:	460e      	mov	r6, r1
 800128c:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
 800128e:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001290:	f7ff ffe0 	bl	8001254 <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
 8001294:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001298:	f7ff ffe8 	bl	800126c <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
 800129c:	23ff      	movs	r3, #255	; 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800129e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  layer_cfg.Backcolor.Blue = 0;
 80012a2:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
 80012a6:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.FBStartAdress = FB_Address;
 80012aa:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha0 = 0;
 80012ac:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80012b0:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80012b4:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80012b6:	4c0f      	ldr	r4, [pc, #60]	; (80012f4 <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80012b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80012bc:	f7ff ffca 	bl	8001254 <BSP_LCD_GetXSize>
 80012c0:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80012c2:	f7ff ffd3 	bl	800126c <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80012c6:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80012c8:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80012ca:	a901      	add	r1, sp, #4
 80012cc:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80012d0:	f001 fa2a 	bl	8002728 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80012d4:	200c      	movs	r0, #12
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	fb00 4005 	mla	r0, r0, r5, r4
 80012de:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <BSP_LCD_LayerDefaultInit+0x74>)
 80012e4:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80012e8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80012ec:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
}
 80012f0:	b00e      	add	sp, #56	; 0x38
 80012f2:	bd70      	pop	{r4, r5, r6, pc}
 80012f4:	20000ff0 	.word	0x20000ff0
 80012f8:	20000004 	.word	0x20000004

080012fc <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80012fc:	4b01      	ldr	r3, [pc, #4]	; (8001304 <BSP_LCD_SelectLayer+0x8>)
 80012fe:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
} 
 8001302:	4770      	bx	lr
 8001304:	20000ff0 	.word	0x20000ff0

08001308 <BSP_LCD_SetLayerWindow>:
{
 8001308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_LTDC_SetWindowSize(&hLtdcHandler, Width, Height, LayerIndex);
 800130c:	4f09      	ldr	r7, [pc, #36]	; (8001334 <BSP_LCD_SetLayerWindow+0x2c>)
{
 800130e:	4604      	mov	r4, r0
 8001310:	460d      	mov	r5, r1
 8001312:	4616      	mov	r6, r2
 8001314:	4619      	mov	r1, r3
  HAL_LTDC_SetWindowSize(&hLtdcHandler, Width, Height, LayerIndex);
 8001316:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800131a:	4603      	mov	r3, r0
 800131c:	4638      	mov	r0, r7
 800131e:	f001 fa30 	bl	8002782 <HAL_LTDC_SetWindowSize>
  HAL_LTDC_SetWindowPosition(&hLtdcHandler, Xpos, Ypos, LayerIndex); 
 8001322:	4623      	mov	r3, r4
 8001324:	4632      	mov	r2, r6
 8001326:	4629      	mov	r1, r5
 8001328:	4638      	mov	r0, r7
}
 800132a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_LTDC_SetWindowPosition(&hLtdcHandler, Xpos, Ypos, LayerIndex); 
 800132e:	f001 ba55 	b.w	80027dc <HAL_LTDC_SetWindowPosition>
 8001332:	bf00      	nop
 8001334:	20001030 	.word	0x20001030

08001338 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <BSP_LCD_SetFont+0x14>)
 800133a:	210c      	movs	r1, #12
 800133c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001340:	fb01 3302 	mla	r3, r1, r2, r3
 8001344:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000ff0 	.word	0x20000ff0

08001350 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <BSP_LCD_GetFont+0x14>)
 8001352:	210c      	movs	r1, #12
 8001354:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001358:	fb01 3302 	mla	r3, r1, r2, r3
}
 800135c:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000ff0 	.word	0x20000ff0

08001368 <BSP_LCD_Clear>:
{ 
 8001368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800136a:	4c0c      	ldr	r4, [pc, #48]	; (800139c <BSP_LCD_Clear+0x34>)
{ 
 800136c:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800136e:	f7ff ff71 	bl	8001254 <BSP_LCD_GetXSize>
 8001372:	9003      	str	r0, [sp, #12]
 8001374:	f8d4 60e8 	ldr.w	r6, [r4, #232]	; 0xe8
 8001378:	f7ff ff78 	bl	800126c <BSP_LCD_GetYSize>
 800137c:	2134      	movs	r1, #52	; 0x34
 800137e:	4603      	mov	r3, r0
 8001380:	9501      	str	r5, [sp, #4]
 8001382:	4630      	mov	r0, r6
 8001384:	fb01 4406 	mla	r4, r1, r6, r4
 8001388:	2100      	movs	r1, #0
 800138a:	9a03      	ldr	r2, [sp, #12]
 800138c:	9100      	str	r1, [sp, #0]
 800138e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8001392:	f7ff ff23 	bl	80011dc <LL_FillBuffer>
}
 8001396:	b004      	add	sp, #16
 8001398:	bd70      	pop	{r4, r5, r6, pc}
 800139a:	bf00      	nop
 800139c:	20000ff0 	.word	0x20000ff0

080013a0 <BSP_LCD_DrawPixel>:
{
 80013a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80013a4:	4d0d      	ldr	r5, [pc, #52]	; (80013dc <BSP_LCD_DrawPixel+0x3c>)
{
 80013a6:	4614      	mov	r4, r2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80013a8:	2234      	movs	r2, #52	; 0x34
{
 80013aa:	4606      	mov	r6, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80013ac:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
{
 80013b0:	460f      	mov	r7, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80013b2:	fb02 5503 	mla	r5, r2, r3, r5
 80013b6:	f7ff ff4d 	bl	8001254 <BSP_LCD_GetXSize>
 80013ba:	fb00 6007 	mla	r0, r0, r7, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80013be:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80013c2:	f8d5 809c 	ldr.w	r8, [r5, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d104      	bne.n	80013d4 <BSP_LCD_DrawPixel+0x34>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80013ca:	b2a4      	uxth	r4, r4
 80013cc:	f828 4010 	strh.w	r4, [r8, r0, lsl #1]
}
 80013d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80013d4:	f848 4020 	str.w	r4, [r8, r0, lsl #2]
}
 80013d8:	e7fa      	b.n	80013d0 <BSP_LCD_DrawPixel+0x30>
 80013da:	bf00      	nop
 80013dc:	20000ff0 	.word	0x20000ff0

080013e0 <BSP_LCD_DisplayChar>:
{
 80013e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e4:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013e6:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
 80013e8:	f04f 0800 	mov.w	r8, #0
{
 80013ec:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013f0:	4929      	ldr	r1, [pc, #164]	; (8001498 <BSP_LCD_DisplayChar+0xb8>)
 80013f2:	200c      	movs	r0, #12
 80013f4:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	; 0xe8
 80013f8:	fb00 110b 	mla	r1, r0, fp, r1
 80013fc:	f8d1 10f4 	ldr.w	r1, [r1, #244]	; 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001400:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8001404:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8001408:	f109 0607 	add.w	r6, r9, #7
 800140c:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800140e:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001412:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 8001414:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 8001418:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
 800141c:	f109 32ff 	add.w	r2, r9, #4294967295
 8001420:	fa52 f380 	uxtab	r3, r2, r0
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
 8001428:	45d0      	cmp	r8, sl
 800142a:	eb03 0108 	add.w	r1, r3, r8
 800142e:	b289      	uxth	r1, r1
 8001430:	d302      	bcc.n	8001438 <BSP_LCD_DisplayChar+0x58>
}
 8001432:	b005      	add	sp, #20
 8001434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001438:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 800143a:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 800143c:	d004      	beq.n	8001448 <BSP_LCD_DisplayChar+0x68>
 800143e:	2e02      	cmp	r6, #2
 8001440:	d109      	bne.n	8001456 <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
 8001442:	882c      	ldrh	r4, [r5, #0]
 8001444:	ba64      	rev16	r4, r4
 8001446:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8001448:	2700      	movs	r7, #0
 800144a:	45b9      	cmp	r9, r7
 800144c:	d80a      	bhi.n	8001464 <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
 800144e:	f108 0801 	add.w	r8, r8, #1
 8001452:	4435      	add	r5, r6
 8001454:	e7e7      	b.n	8001426 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001456:	786a      	ldrb	r2, [r5, #1]
 8001458:	0424      	lsls	r4, r4, #16
 800145a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800145e:	78aa      	ldrb	r2, [r5, #2]
 8001460:	4314      	orrs	r4, r2
      break;
 8001462:	e7f1      	b.n	8001448 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
 8001464:	9b00      	ldr	r3, [sp, #0]
 8001466:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001468:	9103      	str	r1, [sp, #12]
 800146a:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 800146c:	9b02      	ldr	r3, [sp, #8]
 800146e:	eba3 0c07 	sub.w	ip, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <BSP_LCD_DisplayChar+0xb8>)
 8001474:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 8001476:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 8001478:	fa02 f20c 	lsl.w	r2, r2, ip
 800147c:	4222      	tst	r2, r4
 800147e:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001482:	fb02 320b 	mla	r2, r2, fp, r3
 8001486:	bf14      	ite	ne
 8001488:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800148c:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
 8001490:	f7ff ff86 	bl	80013a0 <BSP_LCD_DrawPixel>
 8001494:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
 8001496:	e7d8      	b.n	800144a <BSP_LCD_DisplayChar+0x6a>
 8001498:	20000ff0 	.word	0x20000ff0

0800149c <BSP_LCD_DisplayStringAt>:
{
 800149c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014a0:	4699      	mov	r9, r3
 80014a2:	4605      	mov	r5, r0
 80014a4:	460f      	mov	r7, r1
 80014a6:	4616      	mov	r6, r2
  uint8_t  *ptr = Text;
 80014a8:	4613      	mov	r3, r2
 80014aa:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 80014ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014b0:	2a00      	cmp	r2, #0
 80014b2:	d1fa      	bne.n	80014aa <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80014b4:	f7ff fece 	bl	8001254 <BSP_LCD_GetXSize>
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <BSP_LCD_DisplayStringAt+0xa4>)
 80014ba:	210c      	movs	r1, #12
  switch (Mode)
 80014bc:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80014c0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80014c4:	fb01 3302 	mla	r3, r1, r2, r3
 80014c8:	f8d3 80f4 	ldr.w	r8, [r3, #244]	; 0xf4
 80014cc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80014d0:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (Mode)
 80014d4:	d01d      	beq.n	8001512 <BSP_LCD_DisplayStringAt+0x76>
 80014d6:	f1b9 0f02 	cmp.w	r9, #2
 80014da:	d021      	beq.n	8001520 <BSP_LCD_DisplayStringAt+0x84>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80014dc:	b22b      	sxth	r3, r5
    ref_column = 1;
 80014de:	2400      	movs	r4, #0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bfd8      	it	le
 80014e4:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80014e6:	f7ff feb5 	bl	8001254 <BSP_LCD_GetXSize>
 80014ea:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80014ee:	b2a2      	uxth	r2, r4
 80014f0:	f816 9004 	ldrb.w	r9, [r6, r4]
 80014f4:	3401      	adds	r4, #1
 80014f6:	fb03 0012 	mls	r0, r3, r2, r0
 80014fa:	b280      	uxth	r0, r0
 80014fc:	4298      	cmp	r0, r3
 80014fe:	bf34      	ite	cc
 8001500:	2000      	movcc	r0, #0
 8001502:	2001      	movcs	r0, #1
 8001504:	f1b9 0f00 	cmp.w	r9, #0
 8001508:	bf08      	it	eq
 800150a:	2000      	moveq	r0, #0
 800150c:	b970      	cbnz	r0, 800152c <BSP_LCD_DisplayStringAt+0x90>
}
 800150e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001512:	1b34      	subs	r4, r6, r4
 8001514:	4420      	add	r0, r4
 8001516:	4358      	muls	r0, r3
 8001518:	eb05 0050 	add.w	r0, r5, r0, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800151c:	b285      	uxth	r5, r0
      break;
 800151e:	e7dd      	b.n	80014dc <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001520:	1b34      	subs	r4, r6, r4
 8001522:	4404      	add	r4, r0
 8001524:	fb14 f403 	smulbb	r4, r4, r3
 8001528:	1b60      	subs	r0, r4, r5
 800152a:	e7f7      	b.n	800151c <BSP_LCD_DisplayStringAt+0x80>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800152c:	4628      	mov	r0, r5
 800152e:	464a      	mov	r2, r9
 8001530:	4639      	mov	r1, r7
 8001532:	f7ff ff55 	bl	80013e0 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001536:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800153a:	4428      	add	r0, r5
 800153c:	b285      	uxth	r5, r0
    i++;
 800153e:	e7d2      	b.n	80014e6 <BSP_LCD_DisplayStringAt+0x4a>
 8001540:	20000ff0 	.word	0x20000ff0

08001544 <BSP_LCD_DisplayStringAtLine>:
{  
 8001544:	b513      	push	{r0, r1, r4, lr}
 8001546:	4604      	mov	r4, r0
 8001548:	9101      	str	r1, [sp, #4]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800154a:	f7ff ff01 	bl	8001350 <BSP_LCD_GetFont>
 800154e:	88c3      	ldrh	r3, [r0, #6]
 8001550:	9a01      	ldr	r2, [sp, #4]
 8001552:	2000      	movs	r0, #0
 8001554:	fb13 f104 	smulbb	r1, r3, r4
 8001558:	2303      	movs	r3, #3
 800155a:	b289      	uxth	r1, r1
}
 800155c:	b002      	add	sp, #8
 800155e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001562:	f7ff bf9b 	b.w	800149c <BSP_LCD_DisplayStringAt>
	...

08001568 <BSP_LCD_DisplayOn>:
{
 8001568:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800156c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001570:	4808      	ldr	r0, [pc, #32]	; (8001594 <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8001572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001574:	6993      	ldr	r3, [r2, #24]
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800157c:	2201      	movs	r2, #1
 800157e:	f000 ffdb 	bl	8002538 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001582:	2201      	movs	r2, #1
 8001584:	2108      	movs	r1, #8
 8001586:	4804      	ldr	r0, [pc, #16]	; (8001598 <BSP_LCD_DisplayOn+0x30>)
}
 8001588:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800158c:	f000 bfd4 	b.w	8002538 <HAL_GPIO_WritePin>
 8001590:	20000ff0 	.word	0x20000ff0
 8001594:	40022000 	.word	0x40022000
 8001598:	40022800 	.word	0x40022800

0800159c <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 800159c:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800159e:	484c      	ldr	r0, [pc, #304]	; (80016d0 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80015a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 80015a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 80015a8:	645a      	str	r2, [r3, #68]	; 0x44
{
 80015aa:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 80015ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80015ae:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80015b0:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80015b2:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 80015b4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80015b8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80015bc:	4e45      	ldr	r6, [pc, #276]	; (80016d4 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80015be:	9200      	str	r2, [sp, #0]
 80015c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80015c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
 80015ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015cc:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80015d0:	9201      	str	r2, [sp, #4]
 80015d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d6:	f042 0210 	orr.w	r2, r2, #16
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
 80015dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015de:	f002 0210 	and.w	r2, r2, #16
 80015e2:	9202      	str	r2, [sp, #8]
 80015e4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015ec:	631a      	str	r2, [r3, #48]	; 0x30
 80015ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80015f4:	9203      	str	r2, [sp, #12]
 80015f6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001602:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001606:	9204      	str	r2, [sp, #16]
 8001608:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800160a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800160c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001610:	631a      	str	r2, [r3, #48]	; 0x30
 8001612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001614:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001618:	9205      	str	r2, [sp, #20]
 800161a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800161c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800161e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
 8001624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001626:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800162a:	9206      	str	r2, [sp, #24]
 800162c:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 800162e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001634:	631a      	str	r2, [r3, #48]	; 0x30
 8001636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001638:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800163c:	9207      	str	r2, [sp, #28]
 800163e:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001642:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800164a:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800164c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001650:	9308      	str	r3, [sp, #32]
 8001652:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001654:	2310      	movs	r3, #16
 8001656:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800165c:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001660:	f000 fe80 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001664:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001666:	a909      	add	r1, sp, #36	; 0x24
 8001668:	481b      	ldr	r0, [pc, #108]	; (80016d8 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800166a:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800166c:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001670:	f000 fe78 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8001674:	f44f 4346 	mov.w	r3, #50688	; 0xc600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001678:	a909      	add	r1, sp, #36	; 0x24
 800167a:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800167c:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800167e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001682:	f000 fe6f 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001686:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800168a:	a909      	add	r1, sp, #36	; 0x24
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800168e:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001690:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001694:	f000 fe66 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001698:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800169a:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800169c:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800169e:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80016a0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80016a4:	4c0e      	ldr	r4, [pc, #56]	; (80016e0 <BSP_LCD_MspInit+0x144>)
 80016a6:	4620      	mov	r0, r4
 80016a8:	f000 fe5c 	bl	8002364 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80016ac:	a909      	add	r1, sp, #36	; 0x24
 80016ae:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80016b0:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80016b2:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80016b4:	f000 fe56 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80016b8:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80016ba:	a909      	add	r1, sp, #36	; 0x24
 80016bc:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80016be:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80016c2:	f000 fe4f 	bl	8002364 <HAL_GPIO_Init>
}
 80016c6:	b00f      	add	sp, #60	; 0x3c
 80016c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40022000 	.word	0x40022000
 80016d8:	40021800 	.word	0x40021800
 80016dc:	40022400 	.word	0x40022400
 80016e0:	40022800 	.word	0x40022800

080016e4 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80016e4:	4807      	ldr	r0, [pc, #28]	; (8001704 <BSP_LCD_ClockConfig+0x20>)
 80016e6:	2308      	movs	r3, #8
 80016e8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80016ec:	23c0      	movs	r3, #192	; 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80016ee:	f500 7082 	add.w	r0, r0, #260	; 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80016f2:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80016f4:	2305      	movs	r3, #5
 80016f6:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80016f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80016fe:	f001 bb5d 	b.w	8002dbc <HAL_RCCEx_PeriphCLKConfig>
 8001702:	bf00      	nop
 8001704:	20000ff0 	.word	0x20000ff0

08001708 <BSP_LCD_Init>:
{    
 8001708:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800170a:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800170c:	4c24      	ldr	r4, [pc, #144]	; (80017a0 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800170e:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001710:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001712:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001716:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800171a:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800171e:	230b      	movs	r3, #11
 8001720:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001724:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001728:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800172a:	e9c4 3019 	strd	r3, r0, [r4, #100]	; 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800172e:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001732:	f104 0040 	add.w	r0, r4, #64	; 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001736:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	; 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800173a:	f7ff ffd3 	bl	80016e4 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800173e:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 8001742:	f44f 7388 	mov.w	r3, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
 8001746:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001748:	e9c4 e328 	strd	lr, r3, [r4, #160]	; 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001752:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001756:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800175a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hLtdcHandler.Instance = LTDC;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <BSP_LCD_Init+0x9c>)
 8001760:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001764:	f001 f863 	bl	800282e <HAL_LTDC_GetState>
 8001768:	4601      	mov	r1, r0
 800176a:	b918      	cbnz	r0, 8001774 <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800176c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001770:	f7ff ff14 	bl	800159c <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <BSP_LCD_Init+0xa0>)
 8001776:	f000 ff6b 	bl	8002650 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001780:	480a      	ldr	r0, [pc, #40]	; (80017ac <BSP_LCD_Init+0xa4>)
 8001782:	f000 fed9 	bl	8002538 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	2108      	movs	r1, #8
 800178a:	4809      	ldr	r0, [pc, #36]	; (80017b0 <BSP_LCD_Init+0xa8>)
 800178c:	f000 fed4 	bl	8002538 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8001790:	f000 fa68 	bl	8001c64 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001794:	4807      	ldr	r0, [pc, #28]	; (80017b4 <BSP_LCD_Init+0xac>)
 8001796:	f7ff fdcf 	bl	8001338 <BSP_LCD_SetFont>
}
 800179a:	2000      	movs	r0, #0
 800179c:	bd10      	pop	{r4, pc}
 800179e:	bf00      	nop
 80017a0:	20000ff0 	.word	0x20000ff0
 80017a4:	40016800 	.word	0x40016800
 80017a8:	20001030 	.word	0x20001030
 80017ac:	40022000 	.word	0x40022000
 80017b0:	40022800 	.word	0x40022800
 80017b4:	20000004 	.word	0x20000004

080017b8 <BSP_SD_IsDetected>:
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t      status = SD_PRESENT;
 80017b8:	2301      	movs	r3, #1
{
 80017ba:	b507      	push	{r0, r1, r2, lr}
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80017bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c0:	4807      	ldr	r0, [pc, #28]	; (80017e0 <BSP_SD_IsDetected+0x28>)
  __IO uint8_t      status = SD_PRESENT;
 80017c2:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80017c6:	f000 feb1 	bl	800252c <HAL_GPIO_ReadPin>
 80017ca:	2801      	cmp	r0, #1
 80017cc:	d102      	bne.n	80017d4 <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 80017d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80017d8:	b003      	add	sp, #12
 80017da:	f85d fb04 	ldr.w	pc, [sp], #4
 80017de:	bf00      	nop
 80017e0:	40020800 	.word	0x40020800

080017e4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80017e4:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	4613      	mov	r3, r2
 80017ea:	460a      	mov	r2, r1
 80017ec:	4601      	mov	r1, r0
 80017ee:	4804      	ldr	r0, [pc, #16]	; (8001800 <BSP_SD_ReadBlocks+0x1c>)
 80017f0:	f001 fdd4 	bl	800339c <HAL_SD_ReadBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 80017f4:	3800      	subs	r0, #0
 80017f6:	bf18      	it	ne
 80017f8:	2001      	movne	r0, #1
 80017fa:	b003      	add	sp, #12
 80017fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001800:	20001178 	.word	0x20001178

08001804 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8001804:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4613      	mov	r3, r2
 800180a:	460a      	mov	r2, r1
 800180c:	4601      	mov	r1, r0
 800180e:	4804      	ldr	r0, [pc, #16]	; (8001820 <BSP_SD_WriteBlocks+0x1c>)
 8001810:	f001 fec0 	bl	8003594 <HAL_SD_WriteBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8001814:	3800      	subs	r0, #0
 8001816:	bf18      	it	ne
 8001818:	2001      	movne	r0, #1
 800181a:	b003      	add	sp, #12
 800181c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001820:	20001178 	.word	0x20001178

08001824 <BSP_SD_MspInit>:
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001824:	4b58      	ldr	r3, [pc, #352]	; (8001988 <BSP_SD_MspInit+0x164>)
 8001826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
{
 800182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001830:	645a      	str	r2, [r3, #68]	; 0x44
{
 8001832:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8001836:	f04f 0803 	mov.w	r8, #3
{
 800183a:	4605      	mov	r5, r0
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 800183c:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001840:	f402 6200 	and.w	r2, r2, #2048	; 0x800
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001844:	a905      	add	r1, sp, #20
 8001846:	4851      	ldr	r0, [pc, #324]	; (800198c <BSP_SD_MspInit+0x168>)
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001848:	2600      	movs	r6, #0
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800184a:	9201      	str	r2, [sp, #4]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 800184c:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001850:	9a01      	ldr	r2, [sp, #4]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8001852:	f04f 0a20 	mov.w	sl, #32
  __DMAx_TxRx_CLK_ENABLE();
 8001856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8001858:	4c4d      	ldr	r4, [pc, #308]	; (8001990 <BSP_SD_MspInit+0x16c>)
  __DMAx_TxRx_CLK_ENABLE();
 800185a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 800185e:	4627      	mov	r7, r4
  __DMAx_TxRx_CLK_ENABLE();
 8001860:	631a      	str	r2, [r3, #48]	; 0x30
 8001862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001864:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001868:	9202      	str	r2, [sp, #8]
 800186a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800186e:	f042 0204 	orr.w	r2, r2, #4
 8001872:	631a      	str	r2, [r3, #48]	; 0x30
 8001874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001876:	f002 0204 	and.w	r2, r2, #4
 800187a:	9203      	str	r2, [sp, #12]
 800187c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001880:	f042 0208 	orr.w	r2, r2, #8
 8001884:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001886:	2202      	movs	r2, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	9304      	str	r3, [sp, #16]
 8001890:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001892:	2301      	movs	r3, #1
 8001894:	e9cd 2306 	strd	r2, r3, [sp, #24]
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8001898:	230c      	movs	r3, #12
 800189a:	e9cd 8308 	strd	r8, r3, [sp, #32]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800189e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80018a2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80018a4:	f000 fd5e 	bl	8002364 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80018a8:	a905      	add	r1, sp, #20
 80018aa:	483a      	ldr	r0, [pc, #232]	; (8001994 <BSP_SD_MspInit+0x170>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 80018ac:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80018b0:	f000 fd58 	bl	8002364 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	210e      	movs	r1, #14
 80018b8:	2031      	movs	r0, #49	; 0x31
 80018ba:	f000 faa3 	bl	8001e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80018be:	2031      	movs	r0, #49	; 0x31
 80018c0:	f000 fad2 	bl	8001e68 <HAL_NVIC_EnableIRQ>
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80018cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80018d0:	4831      	ldr	r0, [pc, #196]	; (8001998 <BSP_SD_MspInit+0x174>)
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80018d2:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80018d6:	f847 0f84 	str.w	r0, [r7, #132]!
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 80018da:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80018dc:	642f      	str	r7, [r5, #64]	; 0x40
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80018de:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80018e2:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018e6:	e9c4 2325 	strd	r2, r3, [r4, #148]	; 0x94
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80018ea:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80018ee:	e9c4 1622 	strd	r1, r6, [r4, #136]	; 0x88
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80018f2:	e9c4 3929 	strd	r3, r9, [r4, #164]	; 0xa4
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80018f6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80018fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 80018fe:	e9c4 ba27 	strd	fp, sl, [r4, #156]	; 0x9c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8001902:	e9c4 132c 	strd	r1, r3, [r4, #176]	; 0xb0
  HAL_DMA_DeInit(&dma_rx_handle);
 8001906:	f000 fbb1 	bl	800206c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 800190a:	4638      	mov	r0, r7
 800190c:	f000 fb2e 	bl	8001f6c <HAL_DMA_Init>
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8001918:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800191c:	2140      	movs	r1, #64	; 0x40
 800191e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001922:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001926:	f8c4 810c 	str.w	r8, [r4, #268]	; 0x10c
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 800192a:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800192e:	e9c4 233d 	strd	r2, r3, [r4, #244]	; 0xf4
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8001932:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8001936:	e9c4 3941 	strd	r3, r9, [r4, #260]	; 0x104
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800193a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800193e:	e9c4 7344 	strd	r7, r3, [r4, #272]	; 0x110
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <BSP_SD_MspInit+0x178>)
 8001944:	4627      	mov	r7, r4
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001946:	e9c4 013a 	strd	r0, r1, [r4, #232]	; 0xe8
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 800194a:	f847 3fe4 	str.w	r3, [r7, #228]!
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 800194e:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8001950:	63ef      	str	r7, [r5, #60]	; 0x3c
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8001952:	e9c4 ba3f 	strd	fp, sl, [r4, #252]	; 0xfc
  HAL_DMA_DeInit(&dma_tx_handle);
 8001956:	f000 fb89 	bl	800206c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 800195a:	4638      	mov	r0, r7
 800195c:	f000 fb06 	bl	8001f6c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8001960:	4632      	mov	r2, r6
 8001962:	210f      	movs	r1, #15
 8001964:	203b      	movs	r0, #59	; 0x3b
 8001966:	f000 fa4d 	bl	8001e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 800196a:	203b      	movs	r0, #59	; 0x3b
 800196c:	f000 fa7c 	bl	8001e68 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8001970:	4632      	mov	r2, r6
 8001972:	210f      	movs	r1, #15
 8001974:	2045      	movs	r0, #69	; 0x45
 8001976:	f000 fa45 	bl	8001e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 800197a:	2045      	movs	r0, #69	; 0x45
 800197c:	f000 fa74 	bl	8001e68 <HAL_NVIC_EnableIRQ>
}
 8001980:	b00b      	add	sp, #44	; 0x2c
 8001982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40020800 	.word	0x40020800
 8001990:	20001178 	.word	0x20001178
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40026458 	.word	0x40026458
 800199c:	400264a0 	.word	0x400264a0

080019a0 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80019a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <BSP_SD_Detect_MspInit+0x38>)

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80019a4:	2101      	movs	r1, #1
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80019a6:	480d      	ldr	r0, [pc, #52]	; (80019dc <BSP_SD_Detect_MspInit+0x3c>)
  SD_DETECT_GPIO_CLK_ENABLE();
 80019a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019aa:	f042 0204 	orr.w	r2, r2, #4
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80019b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  SD_DETECT_GPIO_CLK_ENABLE();
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80019be:	2300      	movs	r3, #0
 80019c0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80019ca:	a901      	add	r1, sp, #4
 80019cc:	f000 fcca 	bl	8002364 <HAL_GPIO_Init>
}
 80019d0:	b007      	add	sp, #28
 80019d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020800 	.word	0x40020800

080019e0 <BSP_SD_Init>:
{ 
 80019e0:	b570      	push	{r4, r5, r6, lr}
  uSdHandle.Instance = SDMMC1;
 80019e2:	4c13      	ldr	r4, [pc, #76]	; (8001a30 <BSP_SD_Init+0x50>)
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80019e4:	2600      	movs	r6, #0
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <BSP_SD_Init+0x54>)
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80019e8:	4631      	mov	r1, r6
 80019ea:	4620      	mov	r0, r4
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80019ec:	61a6      	str	r6, [r4, #24]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80019ee:	e9c4 3600 	strd	r3, r6, [r4]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80019f2:	e9c4 6602 	strd	r6, r6, [r4, #8]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80019f6:	e9c4 6604 	strd	r6, r6, [r4, #16]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80019fa:	f7ff ffd1 	bl	80019a0 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 80019fe:	f7ff fedb 	bl	80017b8 <BSP_SD_IsDetected>
 8001a02:	2801      	cmp	r0, #1
 8001a04:	4605      	mov	r5, r0
 8001a06:	d111      	bne.n	8001a2c <BSP_SD_Init+0x4c>
  BSP_SD_MspInit(&uSdHandle, NULL);
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4631      	mov	r1, r6
 8001a0c:	f7ff ff0a 	bl	8001824 <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8001a10:	4620      	mov	r0, r4
 8001a12:	f002 f845 	bl	8003aa0 <HAL_SD_Init>
 8001a16:	b938      	cbnz	r0, 8001a28 <BSP_SD_Init+0x48>
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f002 f86d 	bl	8003afc <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8001a22:	1b85      	subs	r5, r0, r6
 8001a24:	bf18      	it	ne
 8001a26:	2501      	movne	r5, #1
}
 8001a28:	4628      	mov	r0, r5
 8001a2a:	bd70      	pop	{r4, r5, r6, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 8001a2c:	2502      	movs	r5, #2
 8001a2e:	e7fb      	b.n	8001a28 <BSP_SD_Init+0x48>
 8001a30:	20001178 	.word	0x20001178
 8001a34:	40012c00 	.word	0x40012c00

08001a38 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8001a38:	b508      	push	{r3, lr}
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <BSP_SD_GetCardState+0x10>)
 8001a3c:	f002 f8e8 	bl	8003c10 <HAL_SD_GetCardState>
}
 8001a40:	3804      	subs	r0, #4
 8001a42:	bf18      	it	ne
 8001a44:	2001      	movne	r0, #1
 8001a46:	bd08      	pop	{r3, pc}
 8001a48:	20001178 	.word	0x20001178

08001a4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8001a4c:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8001a4e:	4801      	ldr	r0, [pc, #4]	; (8001a54 <BSP_SD_GetCardInfo+0x8>)
 8001a50:	f002 b841 	b.w	8003ad6 <HAL_SD_GetCardInfo>
 8001a54:	20001178 	.word	0x20001178

08001a58 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001a5c:	4c21      	ldr	r4, [pc, #132]	; (8001ae4 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a5e:	2710      	movs	r7, #16
 8001a60:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8001a62:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a66:	19e5      	adds	r5, r4, r7
 8001a68:	4621      	mov	r1, r4
{
 8001a6a:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a70:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8001a72:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a76:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001a7a:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001a7e:	f002 f8fc 	bl	8003c7a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001a82:	4630      	mov	r0, r6
 8001a84:	f000 f99a 	bl	8001dbc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001a88:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a90:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a92:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001a96:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001a9a:	f002 f8ee 	bl	8003c7a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001a9e:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa6:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001aa8:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8001aac:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8001aae:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001ab2:	f002 f8e2 	bl	8003c7a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001ab6:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001aba:	4621      	mov	r1, r4
 8001abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001ac0:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001ac2:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001ac4:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8001ac6:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001ac8:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8001acc:	9b01      	ldr	r3, [sp, #4]
 8001ace:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001ad0:	f002 f8d3 	bl	8003c7a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	4628      	mov	r0, r5
}
 8001ad8:	b003      	add	sp, #12
 8001ada:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001ade:	f002 b8eb 	b.w	8003cb8 <HAL_SDRAM_ProgramRefreshRate>
 8001ae2:	bf00      	nop
 8001ae4:	2000137c 	.word	0x2000137c

08001ae8 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ae8:	4b55      	ldr	r3, [pc, #340]	; (8001c40 <BSP_SDRAM_MspInit+0x158>)
 8001aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aec:	f042 0201 	orr.w	r2, r2, #1
{  
 8001af0:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8001af2:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8001af4:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8001af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8001af8:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001afa:	a909      	add	r1, sp, #36	; 0x24
 8001afc:	4851      	ldr	r0, [pc, #324]	; (8001c44 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001afe:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001b02:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b04:	9201      	str	r2, [sp, #4]
 8001b06:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b0a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b12:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001b16:	9202      	str	r2, [sp, #8]
 8001b18:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b1c:	f042 0204 	orr.w	r2, r2, #4
 8001b20:	631a      	str	r2, [r3, #48]	; 0x30
 8001b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b24:	f002 0204 	and.w	r2, r2, #4
 8001b28:	9203      	str	r2, [sp, #12]
 8001b2a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b2e:	f042 0208 	orr.w	r2, r2, #8
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
 8001b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b36:	f002 0208 	and.w	r2, r2, #8
 8001b3a:	9204      	str	r2, [sp, #16]
 8001b3c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b40:	f042 0210 	orr.w	r2, r2, #16
 8001b44:	631a      	str	r2, [r3, #48]	; 0x30
 8001b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b48:	f002 0210 	and.w	r2, r2, #16
 8001b4c:	9205      	str	r2, [sp, #20]
 8001b4e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b52:	f042 0220 	orr.w	r2, r2, #32
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
 8001b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b5a:	f002 0220 	and.w	r2, r2, #32
 8001b5e:	9206      	str	r2, [sp, #24]
 8001b60:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30
 8001b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b6c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001b70:	9207      	str	r2, [sp, #28]
 8001b72:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b7a:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001b7c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b84:	9308      	str	r3, [sp, #32]
 8001b86:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001b8e:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001b90:	230c      	movs	r3, #12
 8001b92:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001b94:	2308      	movs	r3, #8
 8001b96:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001b98:	f000 fbe4 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001b9c:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001ba0:	a909      	add	r1, sp, #36	; 0x24
 8001ba2:	4829      	ldr	r0, [pc, #164]	; (8001c48 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001ba4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001ba6:	f000 fbdd 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001baa:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001bae:	a909      	add	r1, sp, #36	; 0x24
 8001bb0:	4826      	ldr	r0, [pc, #152]	; (8001c4c <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001bb2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001bb4:	f000 fbd6 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001bb8:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001bbc:	a909      	add	r1, sp, #36	; 0x24
 8001bbe:	4824      	ldr	r0, [pc, #144]	; (8001c50 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001bc0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001bc2:	f000 fbcf 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001bc6:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001bca:	a909      	add	r1, sp, #36	; 0x24
 8001bcc:	4821      	ldr	r0, [pc, #132]	; (8001c54 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001bce:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001bd0:	f000 fbc8 	bl	8002364 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001bd4:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001bd6:	a909      	add	r1, sp, #36	; 0x24
 8001bd8:	481f      	ldr	r0, [pc, #124]	; (8001c58 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001bda:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001bdc:	f000 fbc2 	bl	8002364 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001be2:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001be4:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001be8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001bec:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001bee:	675c      	str	r4, [r3, #116]	; 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001bf0:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001bf2:	e9c3 4212 	strd	r4, r2, [r3, #72]	; 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfa:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c02:	e9c3 0216 	strd	r0, r2, [r3, #88]	; 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001c06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001c0a:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001c0e:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001c10:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001c14:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <BSP_SDRAM_MspInit+0x178>)
 8001c16:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001c1a:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001c1c:	6335      	str	r5, [r6, #48]	; 0x30
 8001c1e:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dma_handle);
 8001c20:	f000 fa24 	bl	800206c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001c24:	4628      	mov	r0, r5
 8001c26:	f000 f9a1 	bl	8001f6c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	210f      	movs	r1, #15
 8001c2e:	2038      	movs	r0, #56	; 0x38
 8001c30:	f000 f8e8 	bl	8001e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001c34:	2038      	movs	r0, #56	; 0x38
 8001c36:	f000 f917 	bl	8001e68 <HAL_NVIC_EnableIRQ>
}
 8001c3a:	b00e      	add	sp, #56	; 0x38
 8001c3c:	bd70      	pop	{r4, r5, r6, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40021400 	.word	0x40021400
 8001c54:	40021800 	.word	0x40021800
 8001c58:	40021c00 	.word	0x40021c00
 8001c5c:	2000137c 	.word	0x2000137c
 8001c60:	40026410 	.word	0x40026410

08001c64 <BSP_SDRAM_Init>:
{ 
 8001c64:	b510      	push	{r4, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 8001c68:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001c6a:	4c1b      	ldr	r4, [pc, #108]	; (8001cd8 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8001c6c:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c6e:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001c70:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001c74:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 8001c76:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c78:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 8001c7a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  Timing.ExitSelfRefreshDelay = 7;
 8001c7e:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 8001c82:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c86:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
 8001c88:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c8c:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001c90:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001c92:	f44f 7380 	mov.w	r3, #256	; 0x100
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001c96:	f104 0010 	add.w	r0, r4, #16
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001c9a:	63a1      	str	r1, [r4, #56]	; 0x38
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c9c:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001ca4:	e9c4 1105 	strd	r1, r1, [r4, #20]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001ca8:	e9c4 c30c 	strd	ip, r3, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001cac:	f7ff ff1c 	bl	8001ae8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001cb0:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8001cb4:	4c09      	ldr	r4, [pc, #36]	; (8001cdc <BSP_SDRAM_Init+0x78>)
 8001cb6:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 8001cba:	f001 ffbe 	bl	8003c3a <HAL_SDRAM_Init>
 8001cbe:	3800      	subs	r0, #0
 8001cc0:	bf18      	it	ne
 8001cc2:	2001      	movne	r0, #1
 8001cc4:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001cc6:	f240 6003 	movw	r0, #1539	; 0x603
 8001cca:	f7ff fec5 	bl	8001a58 <BSP_SDRAM_Initialization_sequence>
}
 8001cce:	7820      	ldrb	r0, [r4, #0]
 8001cd0:	bd10      	pop	{r4, pc}
 8001cd2:	bf00      	nop
 8001cd4:	a0000140 	.word	0xa0000140
 8001cd8:	2000137c 	.word	0x2000137c
 8001cdc:	2000002c 	.word	0x2000002c

08001ce0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce0:	490f      	ldr	r1, [pc, #60]	; (8001d20 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ce2:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <SystemInit+0x44>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001cfa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d06:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <SystemInit+0x48>)
 8001d0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d12:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d14:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d1a:	608b      	str	r3, [r1, #8]
#endif
}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00
 8001d24:	40023800 	.word	0x40023800
 8001d28:	24003010 	.word	0x24003010

08001d2c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d32:	4e0e      	ldr	r6, [pc, #56]	; (8001d6c <HAL_InitTick+0x3c>)
{
 8001d34:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3a:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_InitTick+0x40>)
 8001d3c:	7830      	ldrb	r0, [r6, #0]
 8001d3e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d42:	6810      	ldr	r0, [r2, #0]
 8001d44:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d48:	f000 f89c 	bl	8001e84 <HAL_SYSTICK_Config>
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	b950      	cbnz	r0, 8001d66 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d50:	2d0f      	cmp	r5, #15
 8001d52:	d808      	bhi.n	8001d66 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d54:	4602      	mov	r2, r0
 8001d56:	4629      	mov	r1, r5
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f000 f852 	bl	8001e04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d60:	4620      	mov	r0, r4
 8001d62:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001d64:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001d66:	2001      	movs	r0, #1
 8001d68:	e7fc      	b.n	8001d64 <HAL_InitTick+0x34>
 8001d6a:	bf00      	nop
 8001d6c:	20000034 	.word	0x20000034
 8001d70:	20000030 	.word	0x20000030

08001d74 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d76:	2003      	movs	r0, #3
{
 8001d78:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8001d7a:	6813      	ldr	r3, [r2, #0]
 8001d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d80:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d82:	f000 f82d 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d86:	200f      	movs	r0, #15
 8001d88:	f7ff ffd2 	bl	8001d30 <HAL_InitTick>
  HAL_MspInit();
 8001d8c:	f7ff ffce 	bl	8001d2c <HAL_MspInit>
}
 8001d90:	2000      	movs	r0, #0
 8001d92:	bd08      	pop	{r3, pc}
 8001d94:	40023c00 	.word	0x40023c00

08001d98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d98:	4a03      	ldr	r2, [pc, #12]	; (8001da8 <HAL_IncTick+0x10>)
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_IncTick+0x14>)
 8001d9c:	6811      	ldr	r1, [r2, #0]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	440b      	add	r3, r1
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	2000149c 	.word	0x2000149c
 8001dac:	20000034 	.word	0x20000034

08001db0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001db0:	4b01      	ldr	r3, [pc, #4]	; (8001db8 <HAL_GetTick+0x8>)
 8001db2:	6818      	ldr	r0, [r3, #0]
}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	2000149c 	.word	0x2000149c

08001dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dbc:	b538      	push	{r3, r4, r5, lr}
 8001dbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001dc0:	f7ff fff6 	bl	8001db0 <HAL_GetTick>
 8001dc4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc8:	bf1e      	ittt	ne
 8001dca:	4b04      	ldrne	r3, [pc, #16]	; (8001ddc <HAL_Delay+0x20>)
 8001dcc:	781b      	ldrbne	r3, [r3, #0]
 8001dce:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd0:	f7ff ffee 	bl	8001db0 <HAL_GetTick>
 8001dd4:	1b43      	subs	r3, r0, r5
 8001dd6:	42a3      	cmp	r3, r4
 8001dd8:	d3fa      	bcc.n	8001dd0 <HAL_Delay+0x14>
  {
  }
}
 8001dda:	bd38      	pop	{r3, r4, r5, pc}
 8001ddc:	20000034 	.word	0x20000034

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dee:	0412      	lsls	r2, r2, #16
 8001df0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001dfc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b530      	push	{r4, r5, lr}
 8001e08:	68dc      	ldr	r4, [r3, #12]
 8001e0a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	2d04      	cmp	r5, #4
 8001e16:	bf28      	it	cs
 8001e18:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e20:	bf8c      	ite	hi
 8001e22:	3c03      	subhi	r4, #3
 8001e24:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e26:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	fa01 f104 	lsl.w	r1, r1, r4
 8001e3c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001e44:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001e46:	db06      	blt.n	8001e56 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001e4c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001e50:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e54:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	f000 000f 	and.w	r0, r0, #15
 8001e5a:	4a02      	ldr	r2, [pc, #8]	; (8001e64 <HAL_NVIC_SetPriority+0x60>)
 8001e5c:	5413      	strb	r3, [r2, r0]
 8001e5e:	e7f9      	b.n	8001e54 <HAL_NVIC_SetPriority+0x50>
 8001e60:	e000ed00 	.word	0xe000ed00
 8001e64:	e000ed14 	.word	0xe000ed14

08001e68 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	db08      	blt.n	8001e7e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6c:	0942      	lsrs	r2, r0, #5
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f000 001f 	and.w	r0, r0, #31
 8001e74:	fa03 f000 	lsl.w	r0, r3, r0
 8001e78:	4b01      	ldr	r3, [pc, #4]	; (8001e80 <HAL_NVIC_EnableIRQ+0x18>)
 8001e7a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	3801      	subs	r0, #1
 8001e86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e8a:	d20b      	bcs.n	8001ea4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <HAL_SYSTICK_Config+0x24>)
 8001e92:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e94:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e96:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e9e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ea4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001eac:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <HAL_MPU_Disable+0x18>)
 8001eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_MPU_Enable+0x1c>)
 8001eca:	f040 0001 	orr.w	r0, r0, #1
 8001ece:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001eda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ede:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ee8:	7843      	ldrb	r3, [r0, #1]
 8001eea:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <HAL_MPU_ConfigRegion+0x54>)
{
 8001eec:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8001eee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8001ef2:	7801      	ldrb	r1, [r0, #0]
 8001ef4:	b1e9      	cbz	r1, 8001f32 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001ef6:	6843      	ldr	r3, [r0, #4]
 8001ef8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001efc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001efe:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f00:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f02:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f06:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f08:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f0a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f0e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f10:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f14:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f16:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f1a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f20:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f22:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f26:	7a01      	ldrb	r1, [r0, #8]
 8001f28:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f2c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001f30:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8001f32:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8001f36:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8001f3a:	e7f9      	b.n	8001f30 <HAL_MPU_ConfigRegion+0x48>
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f40:	6803      	ldr	r3, [r0, #0]
{
 8001f42:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f44:	2018      	movs	r0, #24
 8001f46:	b2d9      	uxtb	r1, r3
 8001f48:	3910      	subs	r1, #16
 8001f4a:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8001f4e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f50:	4c05      	ldr	r4, [pc, #20]	; (8001f68 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001f52:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f54:	5c20      	ldrb	r0, [r4, r0]
 8001f56:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f58:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001f5c:	f020 0003 	bic.w	r0, r0, #3
 8001f60:	bf88      	it	hi
 8001f62:	3004      	addhi	r0, #4
 8001f64:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001f66:	bd10      	pop	{r4, pc}
 8001f68:	08011e44 	.word	0x08011e44

08001f6c <HAL_DMA_Init>:
{
 8001f6c:	b570      	push	{r4, r5, r6, lr}
 8001f6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff ff1e 	bl	8001db0 <HAL_GetTick>
 8001f74:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001f76:	2c00      	cmp	r4, #0
 8001f78:	d073      	beq.n	8002062 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f7a:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8001f7c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f7e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001f82:	2300      	movs	r3, #0
 8001f84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001f88:	6813      	ldr	r3, [r2, #0]
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f90:	6821      	ldr	r1, [r4, #0]
 8001f92:	680b      	ldr	r3, [r1, #0]
 8001f94:	07d8      	lsls	r0, r3, #31
 8001f96:	d42f      	bmi.n	8001ff8 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8001f98:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f9a:	4d33      	ldr	r5, [pc, #204]	; (8002068 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9c:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f9e:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	68e2      	ldr	r2, [r4, #12]
 8001fa8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	6922      	ldr	r2, [r4, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	6962      	ldr	r2, [r4, #20]
 8001fb0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	69e2      	ldr	r2, [r4, #28]
 8001fb4:	4303      	orrs	r3, r0
 8001fb6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb8:	6a22      	ldr	r2, [r4, #32]
 8001fba:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fbe:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fc0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc4:	bf02      	ittt	eq
 8001fc6:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001fca:	4335      	orreq	r5, r6
 8001fcc:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fce:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001fd0:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001fd2:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fd4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001fd8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fdc:	d133      	bne.n	8002046 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8001fde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fe0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001fe2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fe4:	b37d      	cbz	r5, 8002046 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fe6:	b990      	cbnz	r0, 800200e <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8001fe8:	2a01      	cmp	r2, #1
 8001fea:	d021      	beq.n	8002030 <HAL_DMA_Init+0xc4>
 8001fec:	f032 0202 	bics.w	r2, r2, #2
 8001ff0:	d129      	bne.n	8002046 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff2:	01ea      	lsls	r2, r5, #7
 8001ff4:	d527      	bpl.n	8002046 <HAL_DMA_Init+0xda>
 8001ff6:	e01e      	b.n	8002036 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ff8:	f7ff feda 	bl	8001db0 <HAL_GetTick>
 8001ffc:	1b40      	subs	r0, r0, r5
 8001ffe:	2805      	cmp	r0, #5
 8002000:	d9c6      	bls.n	8001f90 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002002:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002004:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002006:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002008:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800200c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800200e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002012:	d114      	bne.n	800203e <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002014:	2a03      	cmp	r2, #3
 8002016:	d816      	bhi.n	8002046 <HAL_DMA_Init+0xda>
 8002018:	a001      	add	r0, pc, #4	; (adr r0, 8002020 <HAL_DMA_Init+0xb4>)
 800201a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002037 	.word	0x08002037
 8002024:	08001ff3 	.word	0x08001ff3
 8002028:	08002037 	.word	0x08002037
 800202c:	08002031 	.word	0x08002031
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002030:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002034:	d107      	bne.n	8002046 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002036:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8002038:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800203a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800203c:	e7e4      	b.n	8002008 <HAL_DMA_Init+0x9c>
    switch (tmp)
 800203e:	2a02      	cmp	r2, #2
 8002040:	d9f9      	bls.n	8002036 <HAL_DMA_Init+0xca>
 8002042:	2a03      	cmp	r2, #3
 8002044:	d0d5      	beq.n	8001ff2 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002046:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002048:	4620      	mov	r0, r4
 800204a:	f7ff ff79 	bl	8001f40 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002050:	233f      	movs	r3, #63	; 0x3f
 8002052:	4093      	lsls	r3, r2
 8002054:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002056:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002058:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800205a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800205c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002060:	e7d4      	b.n	800200c <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8002062:	2001      	movs	r0, #1
 8002064:	e7d2      	b.n	800200c <HAL_DMA_Init+0xa0>
 8002066:	bf00      	nop
 8002068:	f010803f 	.word	0xf010803f

0800206c <HAL_DMA_DeInit>:
{
 800206c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800206e:	4605      	mov	r5, r0
 8002070:	b320      	cbz	r0, 80020bc <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002072:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002076:	2b02      	cmp	r3, #2
 8002078:	b2dc      	uxtb	r4, r3
 800207a:	d01d      	beq.n	80020b8 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 800207c:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 800207e:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002088:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800208a:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 800208c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800208e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002090:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002092:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002094:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002096:	f7ff ff53 	bl	8001f40 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800209c:	233f      	movs	r3, #63	; 0x3f
 800209e:	4093      	lsls	r3, r2
 80020a0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a2:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80020a4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80020a8:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80020ac:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80020b0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80020b4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 80020b8:	4620      	mov	r0, r4
 80020ba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80020bc:	2401      	movs	r4, #1
 80020be:	e7fb      	b.n	80020b8 <HAL_DMA_DeInit+0x4c>

080020c0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80020c0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80020c2:	6804      	ldr	r4, [r0, #0]
 80020c4:	9d04      	ldr	r5, [sp, #16]
 80020c6:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80020c8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80020cc:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 80020d0:	4333      	orrs	r3, r6
 80020d2:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80020d4:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80020d6:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80020d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020dc:	d130      	bne.n	8002140 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80020de:	6886      	ldr	r6, [r0, #8]
 80020e0:	b11e      	cbz	r6, 80020ea <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80020e2:	2e01      	cmp	r6, #1
 80020e4:	d103      	bne.n	80020ee <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80020e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80020ea:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80020ec:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80020ee:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80020f0:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80020f4:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80020f8:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80020fa:	d107      	bne.n	800210c <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 80020fc:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 80020fe:	0aa9      	lsrs	r1, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002100:	02db      	lsls	r3, r3, #11
 8002102:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8002106:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 800210a:	e7ee      	b.n	80020ea <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800210c:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800210e:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002112:	d10a      	bne.n	800212a <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8002114:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002116:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002118:	0289      	lsls	r1, r1, #10
      tmp1 = (tmp1 >> 31U);
 800211a:	0fd3      	lsrs	r3, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800211c:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002120:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8002124:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 8002128:	e7df      	b.n	80020ea <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 800212a:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 800212c:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800212e:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8002130:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002132:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002136:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 800213a:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 800213e:	e7d4      	b.n	80020ea <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002140:	60e1      	str	r1, [r4, #12]
}
 8002142:	e7d3      	b.n	80020ec <DMA2D_SetConfig+0x2c>

08002144 <HAL_DMA2D_MspInit>:
}
 8002144:	4770      	bx	lr

08002146 <HAL_DMA2D_Init>:
{
 8002146:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8002148:	4604      	mov	r4, r0
 800214a:	b330      	cbz	r0, 800219a <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800214c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002150:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002154:	b91b      	cbnz	r3, 800215e <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8002156:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800215a:	f7ff fff3 	bl	8002144 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800215e:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002160:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002162:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002164:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002166:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800216a:	6813      	ldr	r3, [r2, #0]
 800216c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002170:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002172:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002174:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002176:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002178:	f023 0307 	bic.w	r3, r3, #7
 800217c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800217e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002180:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002182:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002184:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002188:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800218c:	430b      	orrs	r3, r1
 800218e:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002190:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002192:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002194:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002198:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800219a:	2001      	movs	r0, #1
 800219c:	e7fc      	b.n	8002198 <HAL_DMA2D_Init+0x52>

0800219e <HAL_DMA2D_Start>:
{
 800219e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80021a0:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
 80021a4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 80021a6:	2d01      	cmp	r5, #1
 80021a8:	f04f 0502 	mov.w	r5, #2
 80021ac:	d00f      	beq.n	80021ce <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021ae:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80021b2:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80021b4:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 80021b6:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80021ba:	9500      	str	r5, [sp, #0]
 80021bc:	f7ff ff80 	bl	80020c0 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80021c0:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80021c2:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80021c4:	6813      	ldr	r3, [r2, #0]
 80021c6:	4333      	orrs	r3, r6
 80021c8:	6013      	str	r3, [r2, #0]
}
 80021ca:	b002      	add	sp, #8
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80021ce:	4628      	mov	r0, r5
 80021d0:	e7fb      	b.n	80021ca <HAL_DMA2D_Start+0x2c>

080021d2 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 80021d2:	2300      	movs	r3, #0
{
 80021d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80021d6:	9301      	str	r3, [sp, #4]
{
 80021d8:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80021da:	6803      	ldr	r3, [r0, #0]
{
 80021dc:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	07db      	lsls	r3, r3, #31
 80021e2:	d417      	bmi.n	8002214 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80021e4:	6822      	ldr	r2, [r4, #0]
 80021e6:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80021e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021ea:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80021ec:	069e      	lsls	r6, r3, #26
 80021ee:	d506      	bpl.n	80021fe <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 80021f0:	f7ff fdde 	bl	8001db0 <HAL_GetTick>
 80021f4:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	06d2      	lsls	r2, r2, #27
 80021fc:	d543      	bpl.n	8002286 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8002202:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002204:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002206:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8002208:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800220c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002210:	b002      	add	sp, #8
 8002212:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002214:	f7ff fdcc 	bl	8001db0 <HAL_GetTick>
 8002218:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	0792      	lsls	r2, r2, #30
 8002220:	d4e0      	bmi.n	80021e4 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002226:	9a01      	ldr	r2, [sp, #4]
 8002228:	f012 0f21 	tst.w	r2, #33	; 0x21
 800222c:	d017      	beq.n	800225e <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800222e:	9a01      	ldr	r2, [sp, #4]
 8002230:	0695      	lsls	r5, r2, #26
 8002232:	d503      	bpl.n	800223c <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002234:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002236:	f042 0202 	orr.w	r2, r2, #2
 800223a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800223c:	9a01      	ldr	r2, [sp, #4]
 800223e:	07d0      	lsls	r0, r2, #31
 8002240:	d503      	bpl.n	800224a <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002242:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800224a:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800224c:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800224e:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002250:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002252:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002256:	2300      	movs	r3, #0
 8002258:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 800225c:	e7d8      	b.n	8002210 <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 800225e:	1c69      	adds	r1, r5, #1
 8002260:	d0dc      	beq.n	800221c <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7ff fda5 	bl	8001db0 <HAL_GetTick>
 8002266:	1b80      	subs	r0, r0, r6
 8002268:	42a8      	cmp	r0, r5
 800226a:	d801      	bhi.n	8002270 <HAL_DMA2D_PollForTransfer+0x9e>
 800226c:	2d00      	cmp	r5, #0
 800226e:	d1d4      	bne.n	800221a <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002270:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002272:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002274:	f043 0320 	orr.w	r3, r3, #32
 8002278:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 800227a:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800227c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002280:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002284:	e7c4      	b.n	8002210 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800228a:	9a01      	ldr	r2, [sp, #4]
 800228c:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002290:	d016      	beq.n	80022c0 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002292:	9a01      	ldr	r2, [sp, #4]
 8002294:	0716      	lsls	r6, r2, #28
 8002296:	d503      	bpl.n	80022a0 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002298:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800229a:	f042 0204 	orr.w	r2, r2, #4
 800229e:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80022a0:	9a01      	ldr	r2, [sp, #4]
 80022a2:	0695      	lsls	r5, r2, #26
 80022a4:	d503      	bpl.n	80022ae <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80022a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80022a8:	f042 0202 	orr.w	r2, r2, #2
 80022ac:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80022ae:	9a01      	ldr	r2, [sp, #4]
 80022b0:	07d0      	lsls	r0, r2, #31
 80022b2:	d503      	bpl.n	80022bc <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80022bc:	2229      	movs	r2, #41	; 0x29
 80022be:	e7c5      	b.n	800224c <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 80022c0:	1c69      	adds	r1, r5, #1
 80022c2:	d099      	beq.n	80021f8 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022c4:	f7ff fd74 	bl	8001db0 <HAL_GetTick>
 80022c8:	1b80      	subs	r0, r0, r6
 80022ca:	42a8      	cmp	r0, r5
 80022cc:	d8d0      	bhi.n	8002270 <HAL_DMA2D_PollForTransfer+0x9e>
 80022ce:	2d00      	cmp	r5, #0
 80022d0:	d191      	bne.n	80021f6 <HAL_DMA2D_PollForTransfer+0x24>
 80022d2:	e7cd      	b.n	8002270 <HAL_DMA2D_PollForTransfer+0x9e>

080022d4 <HAL_DMA2D_ConfigLayer>:
{
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80022d6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022da:	2b01      	cmp	r3, #1
 80022dc:	f04f 0302 	mov.w	r3, #2
 80022e0:	d02b      	beq.n	800233a <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80022e2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80022e6:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80022e8:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80022ec:	4f1c      	ldr	r7, [pc, #112]	; (8002360 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 80022ee:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80022f2:	010e      	lsls	r6, r1, #4
 80022f4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80022f6:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 80022fa:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022fe:	3c09      	subs	r4, #9
 8002300:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002302:	bf96      	itet	ls
 8002304:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002308:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800230c:	431a      	orrls	r2, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800230e:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002310:	b9a9      	cbnz	r1, 800233e <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002312:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002314:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002316:	ea01 0107 	and.w	r1, r1, r7
 800231a:	ea42 0201 	orr.w	r2, r2, r1
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002320:	6982      	ldr	r2, [r0, #24]
 8002322:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002324:	d803      	bhi.n	800232e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002326:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002328:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800232c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800232e:	2301      	movs	r3, #1
 8002330:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002334:	2300      	movs	r3, #0
 8002336:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800233a:	4618      	mov	r0, r3
}
 800233c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800233e:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002340:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002342:	ea01 0107 	and.w	r1, r1, r7
 8002346:	ea42 0201 	orr.w	r2, r2, r1
 800234a:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800234c:	eb00 0206 	add.w	r2, r0, r6
 8002350:	6992      	ldr	r2, [r2, #24]
 8002352:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002354:	d8eb      	bhi.n	800232e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002356:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800235a:	621d      	str	r5, [r3, #32]
 800235c:	e7e7      	b.n	800232e <HAL_DMA2D_ConfigLayer+0x5a>
 800235e:	bf00      	nop
 8002360:	00fcfff0 	.word	0x00fcfff0

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002368:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002528 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800236e:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8002370:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002372:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8002374:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002376:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800237a:	43ac      	bics	r4, r5
 800237c:	f040 80b6 	bne.w	80024ec <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002380:	684d      	ldr	r5, [r1, #4]
 8002382:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002386:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002388:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800238c:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002390:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002392:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002394:	2f01      	cmp	r7, #1
 8002396:	d834      	bhi.n	8002402 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8002398:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800239a:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800239e:	68cf      	ldr	r7, [r1, #12]
 80023a0:	fa07 f708 	lsl.w	r7, r7, r8
 80023a4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80023a8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80023aa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ac:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b0:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80023b4:	409f      	lsls	r7, r3
 80023b6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80023ba:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80023bc:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023be:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023c0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023c4:	688f      	ldr	r7, [r1, #8]
 80023c6:	fa07 f708 	lsl.w	r7, r7, r8
 80023ca:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80023ce:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d0:	d119      	bne.n	8002406 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 80023d2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023d6:	f003 0b07 	and.w	fp, r3, #7
 80023da:	f04f 0e0f 	mov.w	lr, #15
 80023de:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80023e2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80023e6:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023ea:	fa0e fe0b 	lsl.w	lr, lr, fp
 80023ee:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023f2:	690f      	ldr	r7, [r1, #16]
 80023f4:	fa07 f70b 	lsl.w	r7, r7, fp
 80023f8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80023fc:	f8ca 7020 	str.w	r7, [sl, #32]
 8002400:	e001      	b.n	8002406 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002402:	2c03      	cmp	r4, #3
 8002404:	d1da      	bne.n	80023bc <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8002406:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002408:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800240c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002410:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002414:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8002418:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800241a:	d067      	beq.n	80024ec <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241c:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8002420:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002424:	f003 0703 	and.w	r7, r3, #3
 8002428:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002430:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002434:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800243a:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 800243e:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8002442:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8002446:	9401      	str	r4, [sp, #4]
 8002448:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800244a:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 800244e:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002452:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002456:	4c33      	ldr	r4, [pc, #204]	; (8002524 <HAL_GPIO_Init+0x1c0>)
 8002458:	42a0      	cmp	r0, r4
 800245a:	d04e      	beq.n	80024fa <HAL_GPIO_Init+0x196>
 800245c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002460:	42a0      	cmp	r0, r4
 8002462:	d04c      	beq.n	80024fe <HAL_GPIO_Init+0x19a>
 8002464:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002468:	42a0      	cmp	r0, r4
 800246a:	d04a      	beq.n	8002502 <HAL_GPIO_Init+0x19e>
 800246c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002470:	42a0      	cmp	r0, r4
 8002472:	d048      	beq.n	8002506 <HAL_GPIO_Init+0x1a2>
 8002474:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002478:	42a0      	cmp	r0, r4
 800247a:	d046      	beq.n	800250a <HAL_GPIO_Init+0x1a6>
 800247c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002480:	42a0      	cmp	r0, r4
 8002482:	d044      	beq.n	800250e <HAL_GPIO_Init+0x1aa>
 8002484:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002488:	42a0      	cmp	r0, r4
 800248a:	d042      	beq.n	8002512 <HAL_GPIO_Init+0x1ae>
 800248c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002490:	42a0      	cmp	r0, r4
 8002492:	d040      	beq.n	8002516 <HAL_GPIO_Init+0x1b2>
 8002494:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002498:	42a0      	cmp	r0, r4
 800249a:	d03e      	beq.n	800251a <HAL_GPIO_Init+0x1b6>
 800249c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024a0:	42a0      	cmp	r0, r4
 80024a2:	bf0c      	ite	eq
 80024a4:	2409      	moveq	r4, #9
 80024a6:	240a      	movne	r4, #10
 80024a8:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024aa:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024ac:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80024b0:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 80024b6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	bf54      	ite	pl
 80024ba:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024bc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c0:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 80024c2:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80024c4:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80024c6:	bf54      	ite	pl
 80024c8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024ca:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ce:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 80024d0:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80024d2:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	bf54      	ite	pl
 80024d6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024d8:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024dc:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80024de:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80024e0:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	bf54      	ite	pl
 80024e4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024e6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80024ea:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024ec:	3301      	adds	r3, #1
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	f47f af3e 	bne.w	8002370 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80024f4:	b003      	add	sp, #12
 80024f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024fa:	2400      	movs	r4, #0
 80024fc:	e7d4      	b.n	80024a8 <HAL_GPIO_Init+0x144>
 80024fe:	2401      	movs	r4, #1
 8002500:	e7d2      	b.n	80024a8 <HAL_GPIO_Init+0x144>
 8002502:	2402      	movs	r4, #2
 8002504:	e7d0      	b.n	80024a8 <HAL_GPIO_Init+0x144>
 8002506:	2403      	movs	r4, #3
 8002508:	e7ce      	b.n	80024a8 <HAL_GPIO_Init+0x144>
 800250a:	2404      	movs	r4, #4
 800250c:	e7cc      	b.n	80024a8 <HAL_GPIO_Init+0x144>
 800250e:	2405      	movs	r4, #5
 8002510:	e7ca      	b.n	80024a8 <HAL_GPIO_Init+0x144>
 8002512:	2406      	movs	r4, #6
 8002514:	e7c8      	b.n	80024a8 <HAL_GPIO_Init+0x144>
 8002516:	2407      	movs	r4, #7
 8002518:	e7c6      	b.n	80024a8 <HAL_GPIO_Init+0x144>
 800251a:	2408      	movs	r4, #8
 800251c:	e7c4      	b.n	80024a8 <HAL_GPIO_Init+0x144>
 800251e:	bf00      	nop
 8002520:	40013c00 	.word	0x40013c00
 8002524:	40020000 	.word	0x40020000
 8002528:	40023800 	.word	0x40023800

0800252c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800252c:	6903      	ldr	r3, [r0, #16]
 800252e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002530:	bf14      	ite	ne
 8002532:	2001      	movne	r0, #1
 8002534:	2000      	moveq	r0, #0
 8002536:	4770      	bx	lr

08002538 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002538:	b10a      	cbz	r2, 800253e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800253a:	6181      	str	r1, [r0, #24]
  }
}
 800253c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800253e:	0409      	lsls	r1, r1, #16
 8002540:	e7fb      	b.n	800253a <HAL_GPIO_WritePin+0x2>

08002542 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002542:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002544:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002546:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800254a:	3284      	adds	r2, #132	; 0x84
 800254c:	1883      	adds	r3, r0, r2
{
 800254e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002552:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002554:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002558:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800255a:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800255e:	684c      	ldr	r4, [r1, #4]
 8002560:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002564:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002568:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800256c:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800256e:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002570:	68c5      	ldr	r5, [r0, #12]
 8002572:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8002576:	443d      	add	r5, r7
 8002578:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800257c:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800257e:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002580:	68c5      	ldr	r5, [r0, #12]
 8002582:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8002586:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002588:	689d      	ldr	r5, [r3, #8]
 800258a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800258e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002590:	688d      	ldr	r5, [r1, #8]
 8002592:	68c7      	ldr	r7, [r0, #12]
 8002594:	3501      	adds	r5, #1
 8002596:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800259a:	443d      	add	r5, r7
 800259c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80025a0:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80025a2:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80025a4:	691d      	ldr	r5, [r3, #16]
 80025a6:	f025 0507 	bic.w	r5, r5, #7
 80025aa:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80025ac:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80025ae:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80025b0:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80025b4:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80025b8:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80025bc:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80025c0:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80025c4:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80025c8:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80025cc:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80025ce:	695d      	ldr	r5, [r3, #20]
 80025d0:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80025d4:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80025d6:	694d      	ldr	r5, [r1, #20]
 80025d8:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80025da:	69dd      	ldr	r5, [r3, #28]
 80025dc:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 80025e0:	f025 0507 	bic.w	r5, r5, #7
 80025e4:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80025e6:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80025ea:	433d      	orrs	r5, r7
 80025ec:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80025ee:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80025f0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80025f2:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80025f6:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80025f8:	b31e      	cbz	r6, 8002642 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80025fa:	2e01      	cmp	r6, #1
 80025fc:	d023      	beq.n	8002646 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80025fe:	1eb5      	subs	r5, r6, #2
 8002600:	2d02      	cmp	r5, #2
 8002602:	d922      	bls.n	800264a <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8002604:	2e07      	cmp	r6, #7
 8002606:	bf0c      	ite	eq
 8002608:	2502      	moveq	r5, #2
 800260a:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800260c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800260e:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002612:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002616:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002618:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800261a:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800261c:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800261e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002620:	436e      	muls	r6, r5
 8002622:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8002626:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002628:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800262a:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800262e:	f024 0407 	bic.w	r4, r4, #7
 8002632:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002634:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002636:	5883      	ldr	r3, [r0, r2]
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	5083      	str	r3, [r0, r2]
}
 800263e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8002642:	2504      	movs	r5, #4
 8002644:	e7e2      	b.n	800260c <LTDC_SetConfig+0xca>
    tmp = 3U;
 8002646:	2503      	movs	r5, #3
 8002648:	e7e0      	b.n	800260c <LTDC_SetConfig+0xca>
    tmp = 2U;
 800264a:	2502      	movs	r5, #2
 800264c:	e7de      	b.n	800260c <LTDC_SetConfig+0xca>

0800264e <HAL_LTDC_MspInit>:
}
 800264e:	4770      	bx	lr

08002650 <HAL_LTDC_Init>:
{
 8002650:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8002652:	4604      	mov	r4, r0
 8002654:	2800      	cmp	r0, #0
 8002656:	d063      	beq.n	8002720 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002658:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800265c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002660:	b91b      	cbnz	r3, 800266a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8002662:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002666:	f7ff fff2 	bl	800264e <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800266a:	2302      	movs	r3, #2
 800266c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	699a      	ldr	r2, [r3, #24]
 8002674:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002678:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800267a:	6999      	ldr	r1, [r3, #24]
 800267c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8002680:	4302      	orrs	r2, r0
 8002682:	68e0      	ldr	r0, [r4, #12]
 8002684:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002686:	6920      	ldr	r0, [r4, #16]
 8002688:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800268a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800268c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800268e:	4925      	ldr	r1, [pc, #148]	; (8002724 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002690:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	400a      	ands	r2, r1
 8002696:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800269e:	69a0      	ldr	r0, [r4, #24]
 80026a0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80026a2:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80026a4:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	400a      	ands	r2, r1
 80026aa:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80026b2:	6a20      	ldr	r0, [r4, #32]
 80026b4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80026b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80026b8:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	400a      	ands	r2, r1
 80026be:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80026c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80026c8:	4302      	orrs	r2, r0
 80026ca:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	4011      	ands	r1, r2
 80026d0:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80026d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80026dc:	430a      	orrs	r2, r1
 80026de:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80026e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80026e2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80026e6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80026ea:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80026ee:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80026f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026f2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80026f6:	430a      	orrs	r2, r1
 80026f8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80026fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002700:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002706:	f042 0206 	orr.w	r2, r2, #6
 800270a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8002714:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002716:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800271a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800271e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002720:	2001      	movs	r0, #1
 8002722:	e7fc      	b.n	800271e <HAL_LTDC_Init+0xce>
 8002724:	f000f800 	.word	0xf000f800

08002728 <HAL_LTDC_ConfigLayer>:
{
 8002728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800272c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8002730:	4606      	mov	r6, r0
 8002732:	460f      	mov	r7, r1
 8002734:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8002736:	2b01      	cmp	r3, #1
 8002738:	f04f 0002 	mov.w	r0, #2
 800273c:	d01f      	beq.n	800277e <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800273e:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8002740:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002744:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002746:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800274a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800274e:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002752:	3438      	adds	r4, #56	; 0x38
 8002754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002760:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002762:	4630      	mov	r0, r6
 8002764:	4662      	mov	r2, ip
 8002766:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002768:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800276a:	f7ff feea 	bl	8002542 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800276e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8002770:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002772:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002776:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800277a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800277e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002782 <HAL_LTDC_SetWindowSize>:
{
 8002782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8002784:	f890 50a0 	ldrb.w	r5, [r0, #160]	; 0xa0
{
 8002788:	4604      	mov	r4, r0
 800278a:	469e      	mov	lr, r3
  __HAL_LOCK(hltdc);
 800278c:	2d01      	cmp	r5, #1
 800278e:	f04f 0502 	mov.w	r5, #2
 8002792:	d021      	beq.n	80027d8 <HAL_LTDC_SetWindowSize+0x56>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002794:	f880 50a1 	strb.w	r5, [r0, #161]	; 0xa1
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 8002798:	2534      	movs	r5, #52	; 0x34
  __HAL_LOCK(hltdc);
 800279a:	2701      	movs	r7, #1
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 800279c:	435d      	muls	r5, r3
  __HAL_LOCK(hltdc);
 800279e:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 80027a2:	1946      	adds	r6, r0, r5
 80027a4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80027a6:	eb03 0c01 	add.w	ip, r3, r1
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 80027aa:	6c33      	ldr	r3, [r6, #64]	; 0x40
  pLayerCfg->ImageHeight = YSize;
 80027ac:	e9c6 1218 	strd	r1, r2, [r6, #96]	; 0x60
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 80027b0:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80027b4:	f105 0138 	add.w	r1, r5, #56	; 0x38
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 80027b8:	eb03 0c02 	add.w	ip, r3, r2
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80027bc:	4672      	mov	r2, lr
 80027be:	4401      	add	r1, r0
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 80027c0:	f8c6 c044 	str.w	ip, [r6, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80027c4:	f7ff febd 	bl	8002542 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80027c8:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 80027ca:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80027cc:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80027ce:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80027d2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80027d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 80027d8:	4628      	mov	r0, r5
 80027da:	e7fc      	b.n	80027d6 <HAL_LTDC_SetWindowSize+0x54>

080027dc <HAL_LTDC_SetWindowPosition>:
{
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80027de:	f890 50a0 	ldrb.w	r5, [r0, #160]	; 0xa0
{
 80027e2:	4604      	mov	r4, r0
 80027e4:	469c      	mov	ip, r3
  __HAL_LOCK(hltdc);
 80027e6:	2d01      	cmp	r5, #1
 80027e8:	f04f 0502 	mov.w	r5, #2
 80027ec:	d01d      	beq.n	800282a <HAL_LTDC_SetWindowPosition+0x4e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80027ee:	f880 50a1 	strb.w	r5, [r0, #161]	; 0xa1
  pLayerCfg->WindowX0 = X0;
 80027f2:	2534      	movs	r5, #52	; 0x34
  __HAL_LOCK(hltdc);
 80027f4:	2701      	movs	r7, #1
  pLayerCfg->WindowX0 = X0;
 80027f6:	435d      	muls	r5, r3
  __HAL_LOCK(hltdc);
 80027f8:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->WindowX0 = X0;
 80027fc:	1946      	adds	r6, r0, r5
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80027fe:	6e33      	ldr	r3, [r6, #96]	; 0x60
  pLayerCfg->WindowX0 = X0;
 8002800:	63b1      	str	r1, [r6, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8002802:	4419      	add	r1, r3
  pLayerCfg->WindowY0 = Y0;
 8002804:	e9c6 120f 	strd	r1, r2, [r6, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8002808:	6e71      	ldr	r1, [r6, #100]	; 0x64
 800280a:	440a      	add	r2, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800280c:	f105 0138 	add.w	r1, r5, #56	; 0x38
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8002810:	6472      	str	r2, [r6, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002812:	4401      	add	r1, r0
 8002814:	4662      	mov	r2, ip
 8002816:	f7ff fe94 	bl	8002542 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800281a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 800281c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800281e:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8002820:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002824:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8002828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 800282a:	4628      	mov	r0, r5
 800282c:	e7fc      	b.n	8002828 <HAL_LTDC_SetWindowPosition+0x4c>

0800282e <HAL_LTDC_GetState>:
  return hltdc->State;
 800282e:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8002832:	4770      	bx	lr

08002834 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002836:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800283a:	4c19      	ldr	r4, [pc, #100]	; (80028a0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800283c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002852:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002854:	f7ff faac 	bl	8001db0 <HAL_GetTick>
 8002858:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800285a:	6863      	ldr	r3, [r4, #4]
 800285c:	03da      	lsls	r2, r3, #15
 800285e:	d50c      	bpl.n	800287a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002860:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002862:	4d0f      	ldr	r5, [pc, #60]	; (80028a0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002868:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800286a:	f7ff faa1 	bl	8001db0 <HAL_GetTick>
 800286e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002870:	686b      	ldr	r3, [r5, #4]
 8002872:	039b      	lsls	r3, r3, #14
 8002874:	d50a      	bpl.n	800288c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002876:	2000      	movs	r0, #0
 8002878:	e006      	b.n	8002888 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800287a:	f7ff fa99 	bl	8001db0 <HAL_GetTick>
 800287e:	1b40      	subs	r0, r0, r5
 8002880:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002884:	d9e9      	bls.n	800285a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8002886:	2003      	movs	r0, #3
}
 8002888:	b003      	add	sp, #12
 800288a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800288c:	f7ff fa90 	bl	8001db0 <HAL_GetTick>
 8002890:	1b00      	subs	r0, r0, r4
 8002892:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002896:	d9eb      	bls.n	8002870 <HAL_PWREx_EnableOverDrive+0x3c>
 8002898:	e7f5      	b.n	8002886 <HAL_PWREx_EnableOverDrive+0x52>
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800
 80028a0:	40007000 	.word	0x40007000

080028a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a8:	4604      	mov	r4, r0
 80028aa:	b340      	cbz	r0, 80028fe <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ac:	6803      	ldr	r3, [r0, #0]
 80028ae:	07db      	lsls	r3, r3, #31
 80028b0:	d410      	bmi.n	80028d4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	079f      	lsls	r7, r3, #30
 80028b6:	d464      	bmi.n	8002982 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	0719      	lsls	r1, r3, #28
 80028bc:	f100 80aa 	bmi.w	8002a14 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	075a      	lsls	r2, r3, #29
 80028c4:	f100 80cb 	bmi.w	8002a5e <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c8:	69a2      	ldr	r2, [r4, #24]
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	f040 8134 	bne.w	8002b38 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80028d0:	2000      	movs	r0, #0
 80028d2:	e02b      	b.n	800292c <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028d4:	4b96      	ldr	r3, [pc, #600]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	f002 020c 	and.w	r2, r2, #12
 80028dc:	2a04      	cmp	r2, #4
 80028de:	d007      	beq.n	80028f0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	f002 020c 	and.w	r2, r2, #12
 80028e6:	2a08      	cmp	r2, #8
 80028e8:	d10b      	bne.n	8002902 <HAL_RCC_OscConfig+0x5e>
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	0256      	lsls	r6, r2, #9
 80028ee:	d508      	bpl.n	8002902 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	4b8f      	ldr	r3, [pc, #572]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	039d      	lsls	r5, r3, #14
 80028f6:	d5dc      	bpl.n	80028b2 <HAL_RCC_OscConfig+0xe>
 80028f8:	6863      	ldr	r3, [r4, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1d9      	bne.n	80028b2 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80028fe:	2001      	movs	r0, #1
 8002900:	e014      	b.n	800292c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002902:	6862      	ldr	r2, [r4, #4]
 8002904:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002908:	d113      	bne.n	8002932 <HAL_RCC_OscConfig+0x8e>
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002910:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002912:	f7ff fa4d 	bl	8001db0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4e86      	ldr	r6, [pc, #536]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002918:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	6833      	ldr	r3, [r6, #0]
 800291c:	0398      	lsls	r0, r3, #14
 800291e:	d4c8      	bmi.n	80028b2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7ff fa46 	bl	8001db0 <HAL_GetTick>
 8002924:	1b40      	subs	r0, r0, r5
 8002926:	2864      	cmp	r0, #100	; 0x64
 8002928:	d9f7      	bls.n	800291a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800292a:	2003      	movs	r0, #3
}
 800292c:	b002      	add	sp, #8
 800292e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002932:	4d7f      	ldr	r5, [pc, #508]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	b992      	cbnz	r2, 800295e <HAL_RCC_OscConfig+0xba>
 8002938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293c:	602b      	str	r3, [r5, #0]
 800293e:	682b      	ldr	r3, [r5, #0]
 8002940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002944:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002946:	f7ff fa33 	bl	8001db0 <HAL_GetTick>
 800294a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294c:	682b      	ldr	r3, [r5, #0]
 800294e:	0399      	lsls	r1, r3, #14
 8002950:	d5af      	bpl.n	80028b2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002952:	f7ff fa2d 	bl	8001db0 <HAL_GetTick>
 8002956:	1b80      	subs	r0, r0, r6
 8002958:	2864      	cmp	r0, #100	; 0x64
 800295a:	d9f7      	bls.n	800294c <HAL_RCC_OscConfig+0xa8>
 800295c:	e7e5      	b.n	800292a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800295e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0xd0>
 8002964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002968:	602b      	str	r3, [r5, #0]
 800296a:	682b      	ldr	r3, [r5, #0]
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	602b      	str	r3, [r5, #0]
 8002972:	e7ce      	b.n	8002912 <HAL_RCC_OscConfig+0x6e>
 8002974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002978:	602b      	str	r3, [r5, #0]
 800297a:	682b      	ldr	r3, [r5, #0]
 800297c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002980:	e7f6      	b.n	8002970 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002982:	4b6b      	ldr	r3, [pc, #428]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	f012 0f0c 	tst.w	r2, #12
 800298a:	d007      	beq.n	800299c <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	f002 020c 	and.w	r2, r2, #12
 8002992:	2a08      	cmp	r2, #8
 8002994:	d111      	bne.n	80029ba <HAL_RCC_OscConfig+0x116>
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	0252      	lsls	r2, r2, #9
 800299a:	d40e      	bmi.n	80029ba <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299c:	4a64      	ldr	r2, [pc, #400]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
 800299e:	6813      	ldr	r3, [r2, #0]
 80029a0:	079b      	lsls	r3, r3, #30
 80029a2:	d502      	bpl.n	80029aa <HAL_RCC_OscConfig+0x106>
 80029a4:	68e3      	ldr	r3, [r4, #12]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d1a9      	bne.n	80028fe <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	6813      	ldr	r3, [r2, #0]
 80029ac:	6921      	ldr	r1, [r4, #16]
 80029ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029b2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029b6:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b8:	e77e      	b.n	80028b8 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029ba:	68e2      	ldr	r2, [r4, #12]
 80029bc:	b1c2      	cbz	r2, 80029f0 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 80029be:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	4d5b      	ldr	r5, [pc, #364]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029c8:	f7ff f9f2 	bl	8001db0 <HAL_GetTick>
 80029cc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	682b      	ldr	r3, [r5, #0]
 80029d0:	079f      	lsls	r7, r3, #30
 80029d2:	d507      	bpl.n	80029e4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	682b      	ldr	r3, [r5, #0]
 80029d6:	6922      	ldr	r2, [r4, #16]
 80029d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80029e0:	602b      	str	r3, [r5, #0]
 80029e2:	e769      	b.n	80028b8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e4:	f7ff f9e4 	bl	8001db0 <HAL_GetTick>
 80029e8:	1b80      	subs	r0, r0, r6
 80029ea:	2802      	cmp	r0, #2
 80029ec:	d9ef      	bls.n	80029ce <HAL_RCC_OscConfig+0x12a>
 80029ee:	e79c      	b.n	800292a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80029f0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f2:	4e4f      	ldr	r6, [pc, #316]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029fa:	f7ff f9d9 	bl	8001db0 <HAL_GetTick>
 80029fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a00:	6833      	ldr	r3, [r6, #0]
 8002a02:	0798      	lsls	r0, r3, #30
 8002a04:	f57f af58 	bpl.w	80028b8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a08:	f7ff f9d2 	bl	8001db0 <HAL_GetTick>
 8002a0c:	1b40      	subs	r0, r0, r5
 8002a0e:	2802      	cmp	r0, #2
 8002a10:	d9f6      	bls.n	8002a00 <HAL_RCC_OscConfig+0x15c>
 8002a12:	e78a      	b.n	800292a <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a14:	6963      	ldr	r3, [r4, #20]
 8002a16:	4d46      	ldr	r5, [pc, #280]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
 8002a18:	b183      	cbz	r3, 8002a3c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8002a1a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002a22:	f7ff f9c5 	bl	8001db0 <HAL_GetTick>
 8002a26:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a28:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002a2a:	079b      	lsls	r3, r3, #30
 8002a2c:	f53f af48 	bmi.w	80028c0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a30:	f7ff f9be 	bl	8001db0 <HAL_GetTick>
 8002a34:	1b80      	subs	r0, r0, r6
 8002a36:	2802      	cmp	r0, #2
 8002a38:	d9f6      	bls.n	8002a28 <HAL_RCC_OscConfig+0x184>
 8002a3a:	e776      	b.n	800292a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002a3c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002a44:	f7ff f9b4 	bl	8001db0 <HAL_GetTick>
 8002a48:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002a4c:	079f      	lsls	r7, r3, #30
 8002a4e:	f57f af37 	bpl.w	80028c0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a52:	f7ff f9ad 	bl	8001db0 <HAL_GetTick>
 8002a56:	1b80      	subs	r0, r0, r6
 8002a58:	2802      	cmp	r0, #2
 8002a5a:	d9f6      	bls.n	8002a4a <HAL_RCC_OscConfig+0x1a6>
 8002a5c:	e765      	b.n	800292a <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5e:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
 8002a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a62:	00d0      	lsls	r0, r2, #3
 8002a64:	d427      	bmi.n	8002ab6 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002a68:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7a:	4d2e      	ldr	r5, [pc, #184]	; (8002b34 <HAL_RCC_OscConfig+0x290>)
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	05d9      	lsls	r1, r3, #23
 8002a80:	d51b      	bpl.n	8002aba <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a82:	68a3      	ldr	r3, [r4, #8]
 8002a84:	4d2a      	ldr	r5, [pc, #168]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d127      	bne.n	8002ada <HAL_RCC_OscConfig+0x236>
 8002a8a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002a96:	f7ff f98b 	bl	8001db0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9a:	4e25      	ldr	r6, [pc, #148]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002a9c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002aa0:	079b      	lsls	r3, r3, #30
 8002aa2:	d53f      	bpl.n	8002b24 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8002aa4:	2f00      	cmp	r7, #0
 8002aa6:	f43f af0f 	beq.w	80028c8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aaa:	4a21      	ldr	r2, [pc, #132]	; (8002b30 <HAL_RCC_OscConfig+0x28c>)
 8002aac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab4:	e708      	b.n	80028c8 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8002ab6:	2700      	movs	r7, #0
 8002ab8:	e7df      	b.n	8002a7a <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002ac2:	f7ff f975 	bl	8001db0 <HAL_GetTick>
 8002ac6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac8:	682b      	ldr	r3, [r5, #0]
 8002aca:	05da      	lsls	r2, r3, #23
 8002acc:	d4d9      	bmi.n	8002a82 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7ff f96f 	bl	8001db0 <HAL_GetTick>
 8002ad2:	1b80      	subs	r0, r0, r6
 8002ad4:	2864      	cmp	r0, #100	; 0x64
 8002ad6:	d9f7      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x224>
 8002ad8:	e727      	b.n	800292a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ada:	b9ab      	cbnz	r3, 8002b08 <HAL_RCC_OscConfig+0x264>
 8002adc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	672b      	str	r3, [r5, #112]	; 0x70
 8002ae8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002aea:	f023 0304 	bic.w	r3, r3, #4
 8002aee:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002af0:	f7ff f95e 	bl	8001db0 <HAL_GetTick>
 8002af4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002af8:	0798      	lsls	r0, r3, #30
 8002afa:	d5d3      	bpl.n	8002aa4 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7ff f958 	bl	8001db0 <HAL_GetTick>
 8002b00:	1b80      	subs	r0, r0, r6
 8002b02:	4540      	cmp	r0, r8
 8002b04:	d9f7      	bls.n	8002af6 <HAL_RCC_OscConfig+0x252>
 8002b06:	e710      	b.n	800292a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002b0c:	d103      	bne.n	8002b16 <HAL_RCC_OscConfig+0x272>
 8002b0e:	f043 0304 	orr.w	r3, r3, #4
 8002b12:	672b      	str	r3, [r5, #112]	; 0x70
 8002b14:	e7b9      	b.n	8002a8a <HAL_RCC_OscConfig+0x1e6>
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	672b      	str	r3, [r5, #112]	; 0x70
 8002b1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002b1e:	f023 0304 	bic.w	r3, r3, #4
 8002b22:	e7b5      	b.n	8002a90 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7ff f944 	bl	8001db0 <HAL_GetTick>
 8002b28:	1b40      	subs	r0, r0, r5
 8002b2a:	4540      	cmp	r0, r8
 8002b2c:	d9b7      	bls.n	8002a9e <HAL_RCC_OscConfig+0x1fa>
 8002b2e:	e6fc      	b.n	800292a <HAL_RCC_OscConfig+0x86>
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b38:	4d38      	ldr	r5, [pc, #224]	; (8002c1c <HAL_RCC_OscConfig+0x378>)
 8002b3a:	68ab      	ldr	r3, [r5, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d041      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8002b44:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b46:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4e:	d12e      	bne.n	8002bae <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8002b50:	f7ff f92e 	bl	8001db0 <HAL_GetTick>
 8002b54:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	682b      	ldr	r3, [r5, #0]
 8002b58:	0199      	lsls	r1, r3, #6
 8002b5a:	d422      	bmi.n	8002ba2 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	1e5a      	subs	r2, r3, #1
 8002b62:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002b66:	430b      	orrs	r3, r1
 8002b68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b6e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b7c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002b7e:	682b      	ldr	r3, [r5, #0]
 8002b80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b84:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b86:	f7ff f913 	bl	8001db0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4d24      	ldr	r5, [pc, #144]	; (8002c1c <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8002b8c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	682b      	ldr	r3, [r5, #0]
 8002b90:	019a      	lsls	r2, r3, #6
 8002b92:	f53f ae9d 	bmi.w	80028d0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b96:	f7ff f90b 	bl	8001db0 <HAL_GetTick>
 8002b9a:	1b00      	subs	r0, r0, r4
 8002b9c:	2802      	cmp	r0, #2
 8002b9e:	d9f6      	bls.n	8002b8e <HAL_RCC_OscConfig+0x2ea>
 8002ba0:	e6c3      	b.n	800292a <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7ff f905 	bl	8001db0 <HAL_GetTick>
 8002ba6:	1b80      	subs	r0, r0, r6
 8002ba8:	2802      	cmp	r0, #2
 8002baa:	d9d4      	bls.n	8002b56 <HAL_RCC_OscConfig+0x2b2>
 8002bac:	e6bd      	b.n	800292a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002bae:	f7ff f8ff 	bl	8001db0 <HAL_GetTick>
 8002bb2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	019b      	lsls	r3, r3, #6
 8002bb8:	f57f ae8a 	bpl.w	80028d0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7ff f8f8 	bl	8001db0 <HAL_GetTick>
 8002bc0:	1b00      	subs	r0, r0, r4
 8002bc2:	2802      	cmp	r0, #2
 8002bc4:	d9f6      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x310>
 8002bc6:	e6b0      	b.n	800292a <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc8:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8002bca:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bcc:	f43f ae97 	beq.w	80028fe <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd4:	69e1      	ldr	r1, [r4, #28]
 8002bd6:	428a      	cmp	r2, r1
 8002bd8:	f47f ae91 	bne.w	80028fe <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be0:	6a21      	ldr	r1, [r4, #32]
 8002be2:	428a      	cmp	r2, r1
 8002be4:	f47f ae8b 	bne.w	80028fe <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bec:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bee:	401a      	ands	r2, r3
 8002bf0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002bf4:	f47f ae83 	bne.w	80028fe <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bf8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002bfa:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002bfe:	0852      	lsrs	r2, r2, #1
 8002c00:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c02:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002c06:	f47f ae7a 	bne.w	80028fe <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c0a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002c0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c10:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002c14:	f43f ae5c 	beq.w	80028d0 <HAL_RCC_OscConfig+0x2c>
 8002c18:	e671      	b.n	80028fe <HAL_RCC_OscConfig+0x5a>
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800

08002c20 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c20:	4913      	ldr	r1, [pc, #76]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002c22:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c24:	688b      	ldr	r3, [r1, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d01b      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x46>
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d11b      	bne.n	8002c6a <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c32:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c34:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c36:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c38:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c3c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c40:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002c44:	bf1a      	itte	ne
 8002c46:	480b      	ldrne	r0, [pc, #44]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x54>)
 8002c48:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4a:	480b      	ldreq	r0, [pc, #44]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x58>)
 8002c4c:	fba1 0100 	umull	r0, r1, r1, r0
 8002c50:	f7fd ff4c 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x50>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002c60:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002c64:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c66:	4803      	ldr	r0, [pc, #12]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x54>)
 8002c68:	e7fc      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8002c6a:	4803      	ldr	r0, [pc, #12]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002c6c:	e7fa      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x44>
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	017d7840 	.word	0x017d7840
 8002c78:	00f42400 	.word	0x00f42400

08002c7c <HAL_RCC_ClockConfig>:
{
 8002c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c80:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002c82:	4604      	mov	r4, r0
 8002c84:	b910      	cbnz	r0, 8002c8c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002c86:	2001      	movs	r0, #1
}
 8002c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c8c:	4a46      	ldr	r2, [pc, #280]	; (8002da8 <HAL_RCC_ClockConfig+0x12c>)
 8002c8e:	6813      	ldr	r3, [r2, #0]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	428b      	cmp	r3, r1
 8002c96:	d328      	bcc.n	8002cea <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	6822      	ldr	r2, [r4, #0]
 8002c9a:	0797      	lsls	r7, r2, #30
 8002c9c:	d430      	bmi.n	8002d00 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9e:	07d0      	lsls	r0, r2, #31
 8002ca0:	d444      	bmi.n	8002d2c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca2:	4a41      	ldr	r2, [pc, #260]	; (8002da8 <HAL_RCC_ClockConfig+0x12c>)
 8002ca4:	6813      	ldr	r3, [r2, #0]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	42ab      	cmp	r3, r5
 8002cac:	d867      	bhi.n	8002d7e <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cae:	6822      	ldr	r2, [r4, #0]
 8002cb0:	0751      	lsls	r1, r2, #29
 8002cb2:	d470      	bmi.n	8002d96 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	0713      	lsls	r3, r2, #28
 8002cb6:	d507      	bpl.n	8002cc8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cb8:	4a3c      	ldr	r2, [pc, #240]	; (8002dac <HAL_RCC_ClockConfig+0x130>)
 8002cba:	6921      	ldr	r1, [r4, #16]
 8002cbc:	6893      	ldr	r3, [r2, #8]
 8002cbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002cc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cc6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cc8:	f7ff ffaa 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002ccc:	4b37      	ldr	r3, [pc, #220]	; (8002dac <HAL_RCC_ClockConfig+0x130>)
 8002cce:	4a38      	ldr	r2, [pc, #224]	; (8002db0 <HAL_RCC_ClockConfig+0x134>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	40d8      	lsrs	r0, r3
 8002cda:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <HAL_RCC_ClockConfig+0x138>)
 8002cdc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002cde:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <HAL_RCC_ClockConfig+0x13c>)
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	f7ff f825 	bl	8001d30 <HAL_InitTick>
  return HAL_OK;
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	e7ce      	b.n	8002c88 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	6813      	ldr	r3, [r2, #0]
 8002cec:	f023 030f 	bic.w	r3, r3, #15
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf4:	6813      	ldr	r3, [r2, #0]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	428b      	cmp	r3, r1
 8002cfc:	d1c3      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xa>
 8002cfe:	e7cb      	b.n	8002c98 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	f012 0f04 	tst.w	r2, #4
 8002d04:	4b29      	ldr	r3, [pc, #164]	; (8002dac <HAL_RCC_ClockConfig+0x130>)
 8002d06:	d003      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8002d0e:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d10:	0716      	lsls	r6, r2, #28
 8002d12:	d503      	bpl.n	8002d1c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d14:	6899      	ldr	r1, [r3, #8]
 8002d16:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8002d1a:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4923      	ldr	r1, [pc, #140]	; (8002dac <HAL_RCC_ClockConfig+0x130>)
 8002d1e:	68a0      	ldr	r0, [r4, #8]
 8002d20:	688b      	ldr	r3, [r1, #8]
 8002d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d26:	4303      	orrs	r3, r0
 8002d28:	608b      	str	r3, [r1, #8]
 8002d2a:	e7b8      	b.n	8002c9e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2c:	6861      	ldr	r1, [r4, #4]
 8002d2e:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <HAL_RCC_ClockConfig+0x130>)
 8002d30:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d34:	d11b      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	d0a4      	beq.n	8002c86 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	4f1a      	ldr	r7, [pc, #104]	; (8002dac <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d44:	f022 0203 	bic.w	r2, r2, #3
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002d4c:	f7ff f830 	bl	8001db0 <HAL_GetTick>
 8002d50:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6862      	ldr	r2, [r4, #4]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d5e:	d0a0      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d60:	f7ff f826 	bl	8001db0 <HAL_GetTick>
 8002d64:	1b80      	subs	r0, r0, r6
 8002d66:	4540      	cmp	r0, r8
 8002d68:	d9f3      	bls.n	8002d52 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8002d6a:	2003      	movs	r0, #3
 8002d6c:	e78c      	b.n	8002c88 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6e:	2902      	cmp	r1, #2
 8002d70:	d102      	bne.n	8002d78 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d72:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002d76:	e7e0      	b.n	8002d3a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	f012 0f02 	tst.w	r2, #2
 8002d7c:	e7dd      	b.n	8002d3a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	6813      	ldr	r3, [r2, #0]
 8002d80:	f023 030f 	bic.w	r3, r3, #15
 8002d84:	432b      	orrs	r3, r5
 8002d86:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d88:	6813      	ldr	r3, [r2, #0]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	42ab      	cmp	r3, r5
 8002d90:	f47f af79 	bne.w	8002c86 <HAL_RCC_ClockConfig+0xa>
 8002d94:	e78b      	b.n	8002cae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d96:	4905      	ldr	r1, [pc, #20]	; (8002dac <HAL_RCC_ClockConfig+0x130>)
 8002d98:	68e0      	ldr	r0, [r4, #12]
 8002d9a:	688b      	ldr	r3, [r1, #8]
 8002d9c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002da0:	4303      	orrs	r3, r0
 8002da2:	608b      	str	r3, [r1, #8]
 8002da4:	e786      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x38>
 8002da6:	bf00      	nop
 8002da8:	40023c00 	.word	0x40023c00
 8002dac:	40023800 	.word	0x40023800
 8002db0:	08011e2c 	.word	0x08011e2c
 8002db4:	20000030 	.word	0x20000030
 8002db8:	20000038 	.word	0x20000038

08002dbc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dbc:	6803      	ldr	r3, [r0, #0]
{
 8002dbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dc2:	f013 0601 	ands.w	r6, r3, #1
{
 8002dc6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dca:	4aaa      	ldr	r2, [pc, #680]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002dcc:	6891      	ldr	r1, [r2, #8]
 8002dce:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002dd2:	6091      	str	r1, [r2, #8]
 8002dd4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002dd6:	6891      	ldr	r1, [r2, #8]
 8002dd8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002dda:	fab6 f686 	clz	r6, r6
 8002dde:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002de0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002de2:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8002de6:	d012      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002de8:	49a2      	ldr	r1, [pc, #648]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002dea:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002dec:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002df0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002df4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8002df8:	bf08      	it	eq
 8002dfa:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dfc:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e00:	bf16      	itet	ne
 8002e02:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8002e06:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e08:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e0a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e0e:	02d8      	lsls	r0, r3, #11
 8002e10:	d510      	bpl.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e12:	4898      	ldr	r0, [pc, #608]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002e14:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002e16:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e1a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e1e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002e22:	ea42 0201 	orr.w	r2, r2, r1
 8002e26:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e2a:	f000 8184 	beq.w	8003136 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002e2e:	2900      	cmp	r1, #0
 8002e30:	bf08      	it	eq
 8002e32:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002e34:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002e38:	bf18      	it	ne
 8002e3a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e3c:	0699      	lsls	r1, r3, #26
 8002e3e:	d531      	bpl.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e40:	4b8c      	ldr	r3, [pc, #560]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e42:	4f8d      	ldr	r7, [pc, #564]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5e:	f7fe ffa7 	bl	8001db0 <HAL_GetTick>
 8002e62:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	05da      	lsls	r2, r3, #23
 8002e68:	f140 8167 	bpl.w	800313a <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e6c:	4f81      	ldr	r7, [pc, #516]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e70:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002e74:	f040 816c 	bne.w	8003150 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e7a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002e7e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002e82:	4a7c      	ldr	r2, [pc, #496]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002e84:	f040 818a 	bne.w	800319c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002e88:	6891      	ldr	r1, [r2, #8]
 8002e8a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002e8e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002e92:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002e96:	4301      	orrs	r1, r0
 8002e98:	6091      	str	r1, [r2, #8]
 8002e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	06d9      	lsls	r1, r3, #27
 8002ea8:	d50c      	bpl.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002eaa:	4a72      	ldr	r2, [pc, #456]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002eac:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002eb0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002eb4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002eb8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002ebc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002ebe:	4301      	orrs	r1, r0
 8002ec0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ec4:	045a      	lsls	r2, r3, #17
 8002ec6:	d508      	bpl.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ec8:	496a      	ldr	r1, [pc, #424]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002eca:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002ecc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ed0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002ed4:	4302      	orrs	r2, r0
 8002ed6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eda:	041f      	lsls	r7, r3, #16
 8002edc:	d508      	bpl.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ede:	4965      	ldr	r1, [pc, #404]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002ee0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002ee2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ee6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002eea:	4302      	orrs	r2, r0
 8002eec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ef0:	03d8      	lsls	r0, r3, #15
 8002ef2:	d508      	bpl.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ef4:	495f      	ldr	r1, [pc, #380]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002ef6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002ef8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002efc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002f00:	4302      	orrs	r2, r0
 8002f02:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f06:	0399      	lsls	r1, r3, #14
 8002f08:	d508      	bpl.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f0a:	495a      	ldr	r1, [pc, #360]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002f0c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002f0e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002f12:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002f16:	4302      	orrs	r2, r0
 8002f18:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f1c:	065a      	lsls	r2, r3, #25
 8002f1e:	d508      	bpl.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f20:	4954      	ldr	r1, [pc, #336]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002f22:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002f24:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002f28:	f022 0203 	bic.w	r2, r2, #3
 8002f2c:	4302      	orrs	r2, r0
 8002f2e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f32:	061f      	lsls	r7, r3, #24
 8002f34:	d508      	bpl.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f36:	494f      	ldr	r1, [pc, #316]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002f38:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002f3a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002f3e:	f022 020c 	bic.w	r2, r2, #12
 8002f42:	4302      	orrs	r2, r0
 8002f44:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f48:	05d8      	lsls	r0, r3, #23
 8002f4a:	d508      	bpl.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f4c:	4949      	ldr	r1, [pc, #292]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002f4e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002f50:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002f54:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002f58:	4302      	orrs	r2, r0
 8002f5a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f5e:	0599      	lsls	r1, r3, #22
 8002f60:	d508      	bpl.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f62:	4944      	ldr	r1, [pc, #272]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002f64:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002f66:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002f6a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002f6e:	4302      	orrs	r2, r0
 8002f70:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f74:	055a      	lsls	r2, r3, #21
 8002f76:	d508      	bpl.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f78:	493e      	ldr	r1, [pc, #248]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002f7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f7c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002f80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f84:	4302      	orrs	r2, r0
 8002f86:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f8a:	051f      	lsls	r7, r3, #20
 8002f8c:	d508      	bpl.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f8e:	4939      	ldr	r1, [pc, #228]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f92:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002f96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f9a:	4302      	orrs	r2, r0
 8002f9c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fa0:	04d8      	lsls	r0, r3, #19
 8002fa2:	d508      	bpl.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fa4:	4933      	ldr	r1, [pc, #204]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002fa6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002fa8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002fac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002fb0:	4302      	orrs	r2, r0
 8002fb2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fb6:	0499      	lsls	r1, r3, #18
 8002fb8:	d508      	bpl.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fba:	492e      	ldr	r1, [pc, #184]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002fbc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002fbe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002fc2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002fc6:	4302      	orrs	r2, r0
 8002fc8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fcc:	025a      	lsls	r2, r3, #9
 8002fce:	d508      	bpl.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fd0:	4928      	ldr	r1, [pc, #160]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002fd2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002fd4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002fd8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002fdc:	4302      	orrs	r2, r0
 8002fde:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fe2:	029f      	lsls	r7, r3, #10
 8002fe4:	d50c      	bpl.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fe6:	4823      	ldr	r0, [pc, #140]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002fe8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002fea:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002fee:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ff2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8002ff6:	bf08      	it	eq
 8002ff8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003000:	f013 0f08 	tst.w	r3, #8
 8003004:	bf18      	it	ne
 8003006:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003008:	0358      	lsls	r0, r3, #13
 800300a:	d508      	bpl.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800300c:	4919      	ldr	r1, [pc, #100]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800300e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003010:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003014:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003018:	4302      	orrs	r2, r0
 800301a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800301e:	0219      	lsls	r1, r3, #8
 8003020:	d509      	bpl.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003022:	4914      	ldr	r1, [pc, #80]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003024:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003028:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800302c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003030:	4302      	orrs	r2, r0
 8003032:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003036:	2e01      	cmp	r6, #1
 8003038:	f000 80b4 	beq.w	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800303c:	019a      	lsls	r2, r3, #6
 800303e:	f100 80b1 	bmi.w	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003042:	2d01      	cmp	r5, #1
 8003044:	d175      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003046:	4d0b      	ldr	r5, [pc, #44]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304e:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003050:	f7fe feae 	bl	8001db0 <HAL_GetTick>
 8003054:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003056:	682b      	ldr	r3, [r5, #0]
 8003058:	009f      	lsls	r7, r3, #2
 800305a:	f100 8127 	bmi.w	80032ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800305e:	6822      	ldr	r2, [r4, #0]
 8003060:	0316      	lsls	r6, r2, #12
 8003062:	d501      	bpl.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003064:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003066:	b14b      	cbz	r3, 800307c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003068:	02d0      	lsls	r0, r2, #11
 800306a:	d522      	bpl.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800306c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800306e:	bb03      	cbnz	r3, 80030b2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8003070:	e004      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800307c:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003080:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003088:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800308c:	430b      	orrs	r3, r1
 800308e:	6961      	ldr	r1, [r4, #20]
 8003090:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003094:	69a1      	ldr	r1, [r4, #24]
 8003096:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800309a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800309e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80030a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80030a4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80030a8:	3901      	subs	r1, #1
 80030aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80030ae:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030b2:	0291      	lsls	r1, r2, #10
 80030b4:	d515      	bpl.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80030b6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80030b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030bc:	d111      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030be:	4982      	ldr	r1, [pc, #520]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030c0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030c4:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030c8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80030cc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80030d0:	4303      	orrs	r3, r0
 80030d2:	6960      	ldr	r0, [r4, #20]
 80030d4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80030d8:	6a20      	ldr	r0, [r4, #32]
 80030da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030e2:	0712      	lsls	r2, r2, #28
 80030e4:	d519      	bpl.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030e6:	4a78      	ldr	r2, [pc, #480]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030e8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030f0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80030f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6961      	ldr	r1, [r4, #20]
 80030fc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003100:	69e1      	ldr	r1, [r4, #28]
 8003102:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003106:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800310a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800310e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003110:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003114:	430b      	orrs	r3, r1
 8003116:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800311a:	4c6b      	ldr	r4, [pc, #428]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003122:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003124:	f7fe fe44 	bl	8001db0 <HAL_GetTick>
 8003128:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	f140 80c4 	bpl.w	80032ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003132:	2000      	movs	r0, #0
 8003134:	e009      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8003136:	2601      	movs	r6, #1
 8003138:	e67c      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7fe fe39 	bl	8001db0 <HAL_GetTick>
 800313e:	eba0 0008 	sub.w	r0, r0, r8
 8003142:	2864      	cmp	r0, #100	; 0x64
 8003144:	f67f ae8e 	bls.w	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8003148:	2003      	movs	r0, #3
}
 800314a:	b003      	add	sp, #12
 800314c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003150:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003152:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003156:	4293      	cmp	r3, r2
 8003158:	f43f ae8e 	beq.w	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800315c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800315e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003164:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003168:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800316a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800316c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003170:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003172:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003176:	07db      	lsls	r3, r3, #31
 8003178:	f57f ae7e 	bpl.w	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800317c:	f7fe fe18 	bl	8001db0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003184:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003188:	0798      	lsls	r0, r3, #30
 800318a:	f53f ae75 	bmi.w	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fe fe0f 	bl	8001db0 <HAL_GetTick>
 8003192:	eba0 0008 	sub.w	r0, r0, r8
 8003196:	4548      	cmp	r0, r9
 8003198:	d9f5      	bls.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 800319a:	e7d5      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800319c:	6891      	ldr	r1, [r2, #8]
 800319e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80031a2:	e679      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80031a4:	4e48      	ldr	r6, [pc, #288]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031a6:	6833      	ldr	r3, [r6, #0]
 80031a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031ac:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80031ae:	f7fe fdff 	bl	8001db0 <HAL_GetTick>
 80031b2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031b4:	6833      	ldr	r3, [r6, #0]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	d472      	bmi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031ba:	6822      	ldr	r2, [r4, #0]
 80031bc:	07d7      	lsls	r7, r2, #31
 80031be:	d512      	bpl.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80031c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031c2:	b983      	cbnz	r3, 80031e6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031c4:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031c8:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031d0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6861      	ldr	r1, [r4, #4]
 80031d8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80031dc:	68a1      	ldr	r1, [r4, #8]
 80031de:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80031e2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031e6:	0316      	lsls	r6, r2, #12
 80031e8:	d503      	bpl.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80031ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f0:	d005      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x442>
 80031f2:	02d0      	lsls	r0, r2, #11
 80031f4:	d51e      	bpl.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fc:	d11a      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031fe:	4932      	ldr	r1, [pc, #200]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003200:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003204:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800320c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003210:	4303      	orrs	r3, r0
 8003212:	6860      	ldr	r0, [r4, #4]
 8003214:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003218:	68e0      	ldr	r0, [r4, #12]
 800321a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800321e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003222:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8003226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003228:	f020 001f 	bic.w	r0, r0, #31
 800322c:	3b01      	subs	r3, #1
 800322e:	4303      	orrs	r3, r0
 8003230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003234:	01d1      	lsls	r1, r2, #7
 8003236:	d511      	bpl.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003238:	4923      	ldr	r1, [pc, #140]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800323a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800323e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003242:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003246:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800324a:	4303      	orrs	r3, r0
 800324c:	6860      	ldr	r0, [r4, #4]
 800324e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003252:	6920      	ldr	r0, [r4, #16]
 8003254:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003258:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800325c:	0192      	lsls	r2, r2, #6
 800325e:	d50d      	bpl.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003260:	6923      	ldr	r3, [r4, #16]
 8003262:	6862      	ldr	r2, [r4, #4]
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800326a:	68e2      	ldr	r2, [r4, #12]
 800326c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003270:	68a2      	ldr	r2, [r4, #8]
 8003272:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003276:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003278:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800327c:	4e12      	ldr	r6, [pc, #72]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800327e:	6833      	ldr	r3, [r6, #0]
 8003280:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003284:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003286:	f7fe fd93 	bl	8001db0 <HAL_GetTick>
 800328a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800328c:	6833      	ldr	r3, [r6, #0]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	f53f aed7 	bmi.w	8003042 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003294:	f7fe fd8c 	bl	8001db0 <HAL_GetTick>
 8003298:	1bc0      	subs	r0, r0, r7
 800329a:	2864      	cmp	r0, #100	; 0x64
 800329c:	d9f6      	bls.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800329e:	e753      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032a0:	f7fe fd86 	bl	8001db0 <HAL_GetTick>
 80032a4:	1bc0      	subs	r0, r0, r7
 80032a6:	2864      	cmp	r0, #100	; 0x64
 80032a8:	d984      	bls.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80032aa:	e74d      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032ac:	f7fe fd80 	bl	8001db0 <HAL_GetTick>
 80032b0:	1b80      	subs	r0, r0, r6
 80032b2:	2864      	cmp	r0, #100	; 0x64
 80032b4:	f67f aecf 	bls.w	8003056 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80032b8:	e746      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032ba:	f7fe fd79 	bl	8001db0 <HAL_GetTick>
 80032be:	1b40      	subs	r0, r0, r5
 80032c0:	2864      	cmp	r0, #100	; 0x64
 80032c2:	f67f af32 	bls.w	800312a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80032c6:	e73f      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80032c8:	40023800 	.word	0x40023800

080032cc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80032cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ce:	4605      	mov	r5, r0
 80032d0:	b089      	sub	sp, #36	; 0x24
 80032d2:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7fe fd6c 	bl	8001db0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80032d8:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 80032da:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80032dc:	2108      	movs	r1, #8
 80032de:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 80032e0:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80032e4:	f000 fe98 	bl	8004018 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80032e8:	4604      	mov	r4, r0
 80032ea:	b9d8      	cbnz	r0, 8003324 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80032ec:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80032ee:	6828      	ldr	r0, [r5, #0]
 80032f0:	0409      	lsls	r1, r1, #16
 80032f2:	f000 ff3b 	bl	800416c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80032f6:	4604      	mov	r4, r0
 80032f8:	b9a0      	cbnz	r0, 8003324 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 80032fa:	f04f 32ff 	mov.w	r2, #4294967295
 80032fe:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003300:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003302:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003304:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 8003306:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800330a:	2302      	movs	r3, #2
 800330c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003310:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003312:	a902      	add	r1, sp, #8
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003314:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003316:	f000 fdb6 	bl	8003e86 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800331a:	6828      	ldr	r0, [r5, #0]
 800331c:	f000 ff56 	bl	80041cc <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003320:	4604      	mov	r4, r0
 8003322:	b190      	cbz	r0, 800334a <SD_FindSCR+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8003324:	4620      	mov	r0, r4
 8003326:	b009      	add	sp, #36	; 0x24
 8003328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800332a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800332c:	0293      	lsls	r3, r2, #10
 800332e:	d512      	bpl.n	8003356 <SD_FindSCR+0x8a>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8003330:	f000 fd83 	bl	8003e3a <SDMMC_ReadFIFO>
 8003334:	ab08      	add	r3, sp, #32
 8003336:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 800333a:	3401      	adds	r4, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800333c:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003340:	f7fe fd36 	bl	8001db0 <HAL_GetTick>
 8003344:	1bc0      	subs	r0, r0, r7
 8003346:	3001      	adds	r0, #1
 8003348:	d023      	beq.n	8003392 <SD_FindSCR+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800334a:	6828      	ldr	r0, [r5, #0]
 800334c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800334e:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 8003352:	d0ea      	beq.n	800332a <SD_FindSCR+0x5e>
 8003354:	e002      	b.n	800335c <SD_FindSCR+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8003356:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003358:	0491      	lsls	r1, r2, #18
 800335a:	d4f1      	bmi.n	8003340 <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800335c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800335e:	0712      	lsls	r2, r2, #28
 8003360:	d502      	bpl.n	8003368 <SD_FindSCR+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8003362:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8003364:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8003366:	e7dd      	b.n	8003324 <SD_FindSCR+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003368:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800336a:	0793      	lsls	r3, r2, #30
 800336c:	d501      	bpl.n	8003372 <SD_FindSCR+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800336e:	2402      	movs	r4, #2
 8003370:	e7f8      	b.n	8003364 <SD_FindSCR+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003372:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003374:	f014 0420 	ands.w	r4, r4, #32
 8003378:	d001      	beq.n	800337e <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800337a:	2420      	movs	r4, #32
 800337c:	e7f2      	b.n	8003364 <SD_FindSCR+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800337e:	9b01      	ldr	r3, [sp, #4]
 8003380:	f240 523a 	movw	r2, #1338	; 0x53a
 8003384:	ba1b      	rev	r3, r3
 8003386:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003388:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800338a:	9b00      	ldr	r3, [sp, #0]
 800338c:	ba1b      	rev	r3, r3
 800338e:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8003390:	e7c8      	b.n	8003324 <SD_FindSCR+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 8003392:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003396:	e7c5      	b.n	8003324 <SD_FindSCR+0x58>

08003398 <HAL_SD_MspInit>:
}
 8003398:	4770      	bx	lr
	...

0800339c <HAL_SD_ReadBlocks>:
{
 800339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a0:	460d      	mov	r5, r1
 80033a2:	b087      	sub	sp, #28
 80033a4:	4604      	mov	r4, r0
 80033a6:	4616      	mov	r6, r2
 80033a8:	469a      	mov	sl, r3
  uint32_t tickstart = HAL_GetTick();
 80033aa:	f7fe fd01 	bl	8001db0 <HAL_GetTick>
 80033ae:	4680      	mov	r8, r0
  if(NULL == pData)
 80033b0:	b92d      	cbnz	r5, 80033be <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 80033b8:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80033ba:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80033bc:	e010      	b.n	80033e0 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 80033be:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	b2df      	uxtb	r7, r3
 80033c6:	f040 80df 	bne.w	8003588 <HAL_SD_ReadBlocks+0x1ec>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033ca:	eb06 030a 	add.w	r3, r6, sl
 80033ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033d0:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033d2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033d4:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033d6:	d907      	bls.n	80033e8 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80033d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033de:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80033e0:	4638      	mov	r0, r7
 80033e2:	b007      	add	sp, #28
 80033e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 80033e8:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 80033ea:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80033ec:	2200      	movs	r2, #0
 80033ee:	f04f 0b01 	mov.w	fp, #1
    hsd->State = HAL_SD_STATE_BUSY;
 80033f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80033f6:	f04f 0902 	mov.w	r9, #2
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 80033fc:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80033fe:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003400:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003402:	f04f 33ff 	mov.w	r3, #4294967295
 8003406:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003408:	ea4f 234a 	mov.w	r3, sl, lsl #9
      add *= 512U;
 800340c:	bf18      	it	ne
 800340e:	0276      	lslne	r6, r6, #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003410:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003412:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003414:	e9cd 2b04 	strd	r2, fp, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003418:	e9cd 3902 	strd	r3, r9, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800341c:	f000 fd33 	bl	8003e86 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8003420:	45da      	cmp	sl, fp
 8003422:	d912      	bls.n	800344a <HAL_SD_ReadBlocks+0xae>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003424:	4631      	mov	r1, r6
 8003426:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003428:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800342c:	f000 fe24 	bl	8004078 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003430:	b190      	cbz	r0, 8003458 <HAL_SD_ReadBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	4a56      	ldr	r2, [pc, #344]	; (8003590 <HAL_SD_ReadBlocks+0x1f4>)
 8003436:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800343a:	4318      	orrs	r0, r3
 800343c:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800343e:	2301      	movs	r3, #1
 8003440:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003444:	2300      	movs	r3, #0
 8003446:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8003448:	e7ca      	b.n	80033e0 <HAL_SD_ReadBlocks+0x44>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800344a:	4631      	mov	r1, r6
 800344c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800344e:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003452:	f000 fdf9 	bl	8004048 <SDMMC_CmdReadSingleBlock>
 8003456:	e7eb      	b.n	8003430 <HAL_SD_ReadBlocks+0x94>
    dataremaining = config.DataLength;
 8003458:	9e01      	ldr	r6, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800345e:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003462:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003464:	d017      	beq.n	8003496 <HAL_SD_ReadBlocks+0xfa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003466:	05db      	lsls	r3, r3, #23
 8003468:	d509      	bpl.n	800347e <HAL_SD_ReadBlocks+0xe2>
 800346a:	f1ba 0f01 	cmp.w	sl, #1
 800346e:	d906      	bls.n	800347e <HAL_SD_ReadBlocks+0xe2>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003470:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003472:	2b03      	cmp	r3, #3
 8003474:	d003      	beq.n	800347e <HAL_SD_ReadBlocks+0xe2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003476:	f000 fe47 	bl	8004108 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800347a:	2800      	cmp	r0, #0
 800347c:	d1d9      	bne.n	8003432 <HAL_SD_ReadBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003482:	f011 0108 	ands.w	r1, r1, #8
 8003486:	d036      	beq.n	80034f6 <HAL_SD_ReadBlocks+0x15a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003488:	4a41      	ldr	r2, [pc, #260]	; (8003590 <HAL_SD_ReadBlocks+0x1f4>)
 800348a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800348c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800348e:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003492:	63a3      	str	r3, [r4, #56]	; 0x38
 8003494:	e7d3      	b.n	800343e <HAL_SD_ReadBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003496:	041a      	lsls	r2, r3, #16
 8003498:	d518      	bpl.n	80034cc <HAL_SD_ReadBlocks+0x130>
 800349a:	b1be      	cbz	r6, 80034cc <HAL_SD_ReadBlocks+0x130>
 800349c:	f105 0b04 	add.w	fp, r5, #4
 80034a0:	f105 0924 	add.w	r9, r5, #36	; 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 80034a4:	6820      	ldr	r0, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80034a6:	f10b 0b04 	add.w	fp, fp, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 80034aa:	f000 fcc6 	bl	8003e3a <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 80034ae:	f80b 0c08 	strb.w	r0, [fp, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80034b2:	0a02      	lsrs	r2, r0, #8
 80034b4:	f80b 2c07 	strb.w	r2, [fp, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80034b8:	0c02      	lsrs	r2, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80034ba:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80034bc:	f80b 2c06 	strb.w	r2, [fp, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80034c0:	f80b 0c05 	strb.w	r0, [fp, #-5]
        for(count = 0U; count < 8U; count++)
 80034c4:	45d9      	cmp	r9, fp
 80034c6:	d1ed      	bne.n	80034a4 <HAL_SD_ReadBlocks+0x108>
          tempbuff++;
 80034c8:	3520      	adds	r5, #32
          dataremaining--;
 80034ca:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80034cc:	f7fe fc70 	bl	8001db0 <HAL_GetTick>
 80034d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034d2:	eba0 0008 	sub.w	r0, r0, r8
 80034d6:	4298      	cmp	r0, r3
 80034d8:	d3bf      	bcc.n	800345a <HAL_SD_ReadBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034da:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 80034dc:	2703      	movs	r7, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034de:	4a2c      	ldr	r2, [pc, #176]	; (8003590 <HAL_SD_ReadBlocks+0x1f4>)
 80034e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80034e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034e8:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80034f4:	e774      	b.n	80033e0 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80034f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f8:	f012 0202 	ands.w	r2, r2, #2
 80034fc:	d00a      	beq.n	8003514 <HAL_SD_ReadBlocks+0x178>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034fe:	4a24      	ldr	r2, [pc, #144]	; (8003590 <HAL_SD_ReadBlocks+0x1f4>)
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003502:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800350a:	2301      	movs	r3, #1
 800350c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003510:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003512:	e765      	b.n	80033e0 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003514:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003516:	0689      	lsls	r1, r1, #26
 8003518:	d527      	bpl.n	800356a <HAL_SD_ReadBlocks+0x1ce>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800351a:	491d      	ldr	r1, [pc, #116]	; (8003590 <HAL_SD_ReadBlocks+0x1f4>)
 800351c:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800351e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003520:	f043 0320 	orr.w	r3, r3, #32
 8003524:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003526:	2301      	movs	r3, #1
 8003528:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800352c:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800352e:	e757      	b.n	80033e0 <HAL_SD_ReadBlocks+0x44>
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003530:	f000 fc83 	bl	8003e3a <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003534:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003538:	0a03      	lsrs	r3, r0, #8
      dataremaining--;
 800353a:	3e04      	subs	r6, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800353c:	3504      	adds	r5, #4
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800353e:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003542:	0c03      	lsrs	r3, r0, #16
 8003544:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003548:	0e03      	lsrs	r3, r0, #24
 800354a:	f805 3c05 	strb.w	r3, [r5, #-5]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800354e:	f7fe fc2f 	bl	8001db0 <HAL_GetTick>
 8003552:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003554:	eba0 0008 	sub.w	r0, r0, r8
 8003558:	4298      	cmp	r0, r3
 800355a:	d307      	bcc.n	800356c <HAL_SD_ReadBlocks+0x1d0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	4a0c      	ldr	r2, [pc, #48]	; (8003590 <HAL_SD_ReadBlocks+0x1f4>)
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003562:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003568:	e793      	b.n	8003492 <HAL_SD_ReadBlocks+0xf6>
 800356a:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800356c:	6820      	ldr	r0, [r4, #0]
 800356e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003570:	029b      	lsls	r3, r3, #10
 8003572:	d501      	bpl.n	8003578 <HAL_SD_ReadBlocks+0x1dc>
 8003574:	2e00      	cmp	r6, #0
 8003576:	d1db      	bne.n	8003530 <HAL_SD_ReadBlocks+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003578:	f240 533a 	movw	r3, #1338	; 0x53a
    return HAL_OK;
 800357c:	2700      	movs	r7, #0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800357e:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003580:	2301      	movs	r3, #1
 8003582:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8003586:	e72b      	b.n	80033e0 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800358a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800358e:	e713      	b.n	80033b8 <HAL_SD_ReadBlocks+0x1c>
 8003590:	004005ff 	.word	0x004005ff

08003594 <HAL_SD_WriteBlocks>:
{
 8003594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003598:	460d      	mov	r5, r1
 800359a:	b089      	sub	sp, #36	; 0x24
 800359c:	4604      	mov	r4, r0
 800359e:	4692      	mov	sl, r2
 80035a0:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80035a2:	f7fe fc05 	bl	8001db0 <HAL_GetTick>
 80035a6:	4681      	mov	r9, r0
  if(NULL == pData)
 80035a8:	b935      	cbnz	r5, 80035b8 <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80035aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 80035b0:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80035b4:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80035b6:	e011      	b.n	80035dc <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 80035b8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80035bc:	2b01      	cmp	r3, #1
 80035be:	fa5f f883 	uxtb.w	r8, r3
 80035c2:	f040 80ac 	bne.w	800371e <HAL_SD_WriteBlocks+0x18a>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80035c6:	eb0a 0307 	add.w	r3, sl, r7
 80035ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035cc:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80035ce:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035d0:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80035d2:	d907      	bls.n	80035e4 <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80035d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035da:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80035dc:	4640      	mov	r0, r8
 80035de:	b009      	add	sp, #36	; 0x24
 80035e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 80035e4:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 80035e6:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 80035e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80035ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 80035ee:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80035f0:	2190      	movs	r1, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80035f2:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80035f4:	f04f 33ff 	mov.w	r3, #4294967295
 80035f8:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80035fa:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 80035fe:	bf18      	it	ne
 8003600:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003604:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003606:	2300      	movs	r3, #0
 8003608:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800360c:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800360e:	2301      	movs	r3, #1
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003610:	a902      	add	r1, sp, #8
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003612:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003614:	f000 fc37 	bl	8003e86 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8003618:	2f01      	cmp	r7, #1
 800361a:	d912      	bls.n	8003642 <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800361c:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800361e:	4651      	mov	r1, sl
 8003620:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003622:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003624:	f000 fd58 	bl	80040d8 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003628:	b190      	cbz	r0, 8003650 <HAL_SD_WriteBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	4a3e      	ldr	r2, [pc, #248]	; (8003728 <HAL_SD_WriteBlocks+0x194>)
 800362e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003630:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003632:	4318      	orrs	r0, r3
 8003634:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003636:	2301      	movs	r3, #1
 8003638:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800363c:	2300      	movs	r3, #0
 800363e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003640:	e7cc      	b.n	80035dc <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003642:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003644:	4651      	mov	r1, sl
 8003646:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003648:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800364a:	f000 fd2d 	bl	80040a8 <SDMMC_CmdWriteSingleBlock>
 800364e:	e7eb      	b.n	8003628 <HAL_SD_WriteBlocks+0x94>
    dataremaining = config.DataLength;
 8003650:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003652:	6820      	ldr	r0, [r4, #0]
 8003654:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003656:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800365a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800365c:	d016      	beq.n	800368c <HAL_SD_WriteBlocks+0xf8>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800365e:	05db      	lsls	r3, r3, #23
 8003660:	d508      	bpl.n	8003674 <HAL_SD_WriteBlocks+0xe0>
 8003662:	2f01      	cmp	r7, #1
 8003664:	d906      	bls.n	8003674 <HAL_SD_WriteBlocks+0xe0>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003666:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003668:	2b03      	cmp	r3, #3
 800366a:	d003      	beq.n	8003674 <HAL_SD_WriteBlocks+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800366c:	f000 fd4c 	bl	8004108 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003670:	2800      	cmp	r0, #0
 8003672:	d1da      	bne.n	800362a <HAL_SD_WriteBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003678:	f010 0008 	ands.w	r0, r0, #8
 800367c:	d029      	beq.n	80036d2 <HAL_SD_WriteBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800367e:	4a2a      	ldr	r2, [pc, #168]	; (8003728 <HAL_SD_WriteBlocks+0x194>)
 8003680:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003682:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003684:	f043 0308 	orr.w	r3, r3, #8
 8003688:	63a3      	str	r3, [r4, #56]	; 0x38
 800368a:	e7d4      	b.n	8003636 <HAL_SD_WriteBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800368c:	045a      	lsls	r2, r3, #17
 800368e:	d50c      	bpl.n	80036aa <HAL_SD_WriteBlocks+0x116>
 8003690:	b15e      	cbz	r6, 80036aa <HAL_SD_WriteBlocks+0x116>
 8003692:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003696:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800369a:	a901      	add	r1, sp, #4
 800369c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800369e:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80036a0:	f000 fbce 	bl	8003e40 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80036a4:	45ab      	cmp	fp, r5
 80036a6:	d1f6      	bne.n	8003696 <HAL_SD_WriteBlocks+0x102>
          dataremaining--;
 80036a8:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80036aa:	f7fe fb81 	bl	8001db0 <HAL_GetTick>
 80036ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036b0:	eba0 0009 	sub.w	r0, r0, r9
 80036b4:	4298      	cmp	r0, r3
 80036b6:	d3cc      	bcc.n	8003652 <HAL_SD_WriteBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036b8:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 80036ba:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036be:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <HAL_SD_WriteBlocks+0x194>)
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80036c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036c4:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80036d0:	e784      	b.n	80035dc <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80036d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036d4:	f011 0102 	ands.w	r1, r1, #2
 80036d8:	d00a      	beq.n	80036f0 <HAL_SD_WriteBlocks+0x15c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036da:	4a13      	ldr	r2, [pc, #76]	; (8003728 <HAL_SD_WriteBlocks+0x194>)
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036ec:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 80036ee:	e775      	b.n	80035dc <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80036f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f2:	f012 0210 	ands.w	r2, r2, #16
 80036f6:	d00a      	beq.n	800370e <HAL_SD_WriteBlocks+0x17a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036f8:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <HAL_SD_WriteBlocks+0x194>)
 80036fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80036fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036fe:	f043 0310 	orr.w	r3, r3, #16
 8003702:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003704:	2301      	movs	r3, #1
 8003706:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800370a:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800370c:	e766      	b.n	80035dc <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800370e:	f240 513a 	movw	r1, #1338	; 0x53a
    return HAL_OK;
 8003712:	4690      	mov	r8, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003714:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003716:	2301      	movs	r3, #1
 8003718:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800371c:	e75e      	b.n	80035dc <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800371e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003724:	e744      	b.n	80035b0 <HAL_SD_WriteBlocks+0x1c>
 8003726:	bf00      	nop
 8003728:	004005ff 	.word	0x004005ff

0800372c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800372c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800372e:	0f9a      	lsrs	r2, r3, #30
 8003730:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003732:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8003736:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003738:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800373c:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800373e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003742:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003744:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003748:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800374a:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800374c:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800374e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003750:	0d1a      	lsrs	r2, r3, #20
 8003752:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003754:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8003758:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800375a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800375e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003760:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8003764:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003766:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800376a:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800376c:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8003770:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003772:	2200      	movs	r2, #0
 8003774:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003776:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8003778:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 800377a:	2a00      	cmp	r2, #0
 800377c:	d16c      	bne.n	8003858 <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800377e:	f640 74fc 	movw	r4, #4092	; 0xffc
 8003782:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8003784:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8003788:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800378c:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800378e:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8003792:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003794:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8003798:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800379a:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800379e:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80037a0:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80037a4:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80037a8:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80037aa:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80037ac:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80037ae:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80037b0:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80037b2:	f002 0207 	and.w	r2, r2, #7
 80037b6:	3202      	adds	r2, #2
 80037b8:	fa03 f202 	lsl.w	r2, r3, r2
 80037bc:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80037be:	7a0b      	ldrb	r3, [r1, #8]
 80037c0:	f003 040f 	and.w	r4, r3, #15
 80037c4:	2301      	movs	r3, #1
 80037c6:	40a3      	lsls	r3, r4
 80037c8:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80037ca:	0a5b      	lsrs	r3, r3, #9
 80037cc:	4353      	muls	r3, r2
 80037ce:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80037d0:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80037d4:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80037d6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80037d8:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80037dc:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80037de:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80037e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80037e6:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80037e8:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80037ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->Reserved3 = 0;
 80037ec:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80037ee:	0fda      	lsrs	r2, r3, #31
 80037f0:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80037f2:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80037f6:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80037f8:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80037fc:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80037fe:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8003802:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003804:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8003808:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800380c:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8003810:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003814:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003818:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800381c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003820:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8003824:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003828:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800382c:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003830:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8003834:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003838:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800383c:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003840:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003844:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003848:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800384c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003850:	2301      	movs	r3, #1
 8003852:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8003856:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003858:	2a01      	cmp	r2, #1
 800385a:	d10f      	bne.n	800387c <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800385c:	041b      	lsls	r3, r3, #16
 800385e:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8003862:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003866:	4313      	orrs	r3, r2
 8003868:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800386a:	690b      	ldr	r3, [r1, #16]
 800386c:	3301      	adds	r3, #1
 800386e:	029b      	lsls	r3, r3, #10
 8003870:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003872:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003878:	6583      	str	r3, [r0, #88]	; 0x58
 800387a:	e7ab      	b.n	80037d4 <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800387c:	6803      	ldr	r3, [r0, #0]
 800387e:	4a05      	ldr	r2, [pc, #20]	; (8003894 <HAL_SD_GetCardCSD+0x168>)
 8003880:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003882:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003888:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800388a:	2301      	movs	r3, #1
 800388c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8003890:	4618      	mov	r0, r3
 8003892:	e7e0      	b.n	8003856 <HAL_SD_GetCardCSD+0x12a>
 8003894:	004005ff 	.word	0x004005ff

08003898 <HAL_SD_InitCard>:
{
 8003898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800389c:	2300      	movs	r3, #0
{
 800389e:	b098      	sub	sp, #96	; 0x60
 80038a0:	4604      	mov	r4, r0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80038a2:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80038a4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80038a8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80038ac:	2376      	movs	r3, #118	; 0x76
 80038ae:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 80038b0:	ab0a      	add	r3, sp, #40	; 0x28
 80038b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038b6:	ab07      	add	r3, sp, #28
 80038b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80038bc:	6820      	ldr	r0, [r4, #0]
 80038be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038c0:	f000 fa9f 	bl	8003e02 <SDMMC_Init>
  if(status != HAL_OK)
 80038c4:	4605      	mov	r5, r0
 80038c6:	2800      	cmp	r0, #0
 80038c8:	f040 80e3 	bne.w	8003a92 <HAL_SD_InitCard+0x1fa>
  __HAL_SD_DISABLE(hsd);
 80038cc:	6820      	ldr	r0, [r4, #0]
 80038ce:	6843      	ldr	r3, [r0, #4]
 80038d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d4:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80038d6:	f000 fab8 	bl	8003e4a <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80038da:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 80038dc:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 80038de:	6853      	ldr	r3, [r2, #4]
 80038e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e4:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 80038e6:	f7fe fa69 	bl	8001dbc <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80038ea:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80038ec:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80038ee:	f000 fadd 	bl	8003eac <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80038f2:	4605      	mov	r5, r0
 80038f4:	b940      	cbnz	r0, 8003908 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80038f6:	6820      	ldr	r0, [r4, #0]
 80038f8:	f000 fda8 	bl	800444c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80038fc:	b170      	cbz	r0, 800391c <HAL_SD_InitCard+0x84>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80038fe:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003900:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003902:	f000 fad3 	bl	8003eac <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003906:	b198      	cbz	r0, 8003930 <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 8003908:	2501      	movs	r5, #1
 800390a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800390e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003910:	4303      	orrs	r3, r0
 8003912:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003914:	4628      	mov	r0, r5
 8003916:	b018      	add	sp, #96	; 0x60
 8003918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V2_X;
 800391c:	2301      	movs	r3, #1
 800391e:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003920:	2100      	movs	r1, #0
 8003922:	6820      	ldr	r0, [r4, #0]
 8003924:	f000 fc22 	bl	800416c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003928:	b128      	cbz	r0, 8003936 <HAL_SD_InitCard+0x9e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800392a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800392e:	e7eb      	b.n	8003908 <HAL_SD_InitCard+0x70>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003930:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003932:	2b01      	cmp	r3, #1
 8003934:	d0f4      	beq.n	8003920 <HAL_SD_InitCard+0x88>
{
 8003936:	2600      	movs	r6, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003938:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800393c:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8003a9c <HAL_SD_InitCard+0x204>
 8003940:	e014      	b.n	800396c <HAL_SD_InitCard+0xd4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003942:	4631      	mov	r1, r6
 8003944:	6820      	ldr	r0, [r4, #0]
 8003946:	f000 fc11 	bl	800416c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800394a:	2800      	cmp	r0, #0
 800394c:	d1dc      	bne.n	8003908 <HAL_SD_InitCard+0x70>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800394e:	4641      	mov	r1, r8
 8003950:	6820      	ldr	r0, [r4, #0]
 8003952:	f000 fcdd 	bl	8004310 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003956:	2800      	cmp	r0, #0
 8003958:	d1e7      	bne.n	800392a <HAL_SD_InitCard+0x92>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800395a:	4631      	mov	r1, r6
 800395c:	6820      	ldr	r0, [r4, #0]
 800395e:	f000 fa8f 	bl	8003e80 <SDMMC_GetResponse>
    count++;
 8003962:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003964:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003966:	0fc6      	lsrs	r6, r0, #31
    count++;
 8003968:	3301      	adds	r3, #1
 800396a:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800396c:	9b06      	ldr	r3, [sp, #24]
 800396e:	42bb      	cmp	r3, r7
 8003970:	d801      	bhi.n	8003976 <HAL_SD_InitCard+0xde>
 8003972:	2e00      	cmp	r6, #0
 8003974:	d0e5      	beq.n	8003942 <HAL_SD_InitCard+0xaa>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003976:	9b06      	ldr	r3, [sp, #24]
 8003978:	42bb      	cmp	r3, r7
 800397a:	d80c      	bhi.n	8003996 <HAL_SD_InitCard+0xfe>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800397c:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8003980:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003982:	6820      	ldr	r0, [r4, #0]
 8003984:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 8003986:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800398a:	f000 fa62 	bl	8003e52 <SDMMC_GetPowerState>
 800398e:	b928      	cbnz	r0, 800399c <HAL_SD_InitCard+0x104>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003990:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003994:	e7b8      	b.n	8003908 <HAL_SD_InitCard+0x70>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003996:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 800399a:	e7b5      	b.n	8003908 <HAL_SD_InitCard+0x70>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800399c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d043      	beq.n	8003a2a <HAL_SD_InitCard+0x192>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	f000 fc68 	bl	8004278 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d1ad      	bne.n	8003908 <HAL_SD_InitCard+0x70>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80039ac:	4601      	mov	r1, r0
 80039ae:	6820      	ldr	r0, [r4, #0]
 80039b0:	f000 fa66 	bl	8003e80 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80039b4:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80039b6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80039b8:	6820      	ldr	r0, [r4, #0]
 80039ba:	f000 fa61 	bl	8003e80 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80039be:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80039c0:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80039c2:	6820      	ldr	r0, [r4, #0]
 80039c4:	f000 fa5c 	bl	8003e80 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80039c8:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80039ca:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80039cc:	6820      	ldr	r0, [r4, #0]
 80039ce:	f000 fa57 	bl	8003e80 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80039d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80039d4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d026      	beq.n	8003a2a <HAL_SD_InitCard+0x192>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039dc:	f10d 0116 	add.w	r1, sp, #22
 80039e0:	6820      	ldr	r0, [r4, #0]
 80039e2:	f000 fcf1 	bl	80043c8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d18e      	bne.n	8003908 <HAL_SD_InitCard+0x70>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80039ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039ec:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d01b      	beq.n	8003a2a <HAL_SD_InitCard+0x192>
    hsd->SdCard.RelCardAdd = sd_rca;
 80039f2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80039f6:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039f8:	0409      	lsls	r1, r1, #16
 80039fa:	f000 fc52 	bl	80042a2 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d182      	bne.n	8003908 <HAL_SD_InitCard+0x70>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003a02:	4601      	mov	r1, r0
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	f000 fa3b 	bl	8003e80 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003a0a:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003a0c:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003a0e:	6820      	ldr	r0, [r4, #0]
 8003a10:	f000 fa36 	bl	8003e80 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003a14:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003a16:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003a18:	6820      	ldr	r0, [r4, #0]
 8003a1a:	f000 fa31 	bl	8003e80 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003a1e:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003a20:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003a22:	6820      	ldr	r0, [r4, #0]
 8003a24:	f000 fa2c 	bl	8003e80 <SDMMC_GetResponse>
 8003a28:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003a2a:	2104      	movs	r1, #4
 8003a2c:	6820      	ldr	r0, [r4, #0]
 8003a2e:	f000 fa27 	bl	8003e80 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a32:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003a34:	0d00      	lsrs	r0, r0, #20
 8003a36:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7ff fe77 	bl	800372c <HAL_SD_GetCardCSD>
 8003a3e:	4605      	mov	r5, r0
 8003a40:	2800      	cmp	r0, #0
 8003a42:	f47f af72 	bne.w	800392a <HAL_SD_InitCard+0x92>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a46:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003a48:	4603      	mov	r3, r0
 8003a4a:	6820      	ldr	r0, [r4, #0]
 8003a4c:	0412      	lsls	r2, r2, #16
 8003a4e:	f000 fb75 	bl	800413c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a52:	2800      	cmp	r0, #0
 8003a54:	f47f af58 	bne.w	8003908 <HAL_SD_InitCard+0x70>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003a58:	f104 0310 	add.w	r3, r4, #16
 8003a5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a60:	1d23      	adds	r3, r4, #4
 8003a62:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003a66:	6820      	ldr	r0, [r4, #0]
 8003a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a6a:	f000 f9ca 	bl	8003e02 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a72:	6820      	ldr	r0, [r4, #0]
 8003a74:	f000 fad0 	bl	8004018 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	f43f af4b 	beq.w	8003914 <HAL_SD_InitCard+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a7e:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8003a80:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <HAL_SD_InitCard+0x200>)
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003a86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a88:	4318      	orrs	r0, r3
 8003a8a:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a8c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003a90:	e740      	b.n	8003914 <HAL_SD_InitCard+0x7c>
    return HAL_ERROR;
 8003a92:	2501      	movs	r5, #1
 8003a94:	e73e      	b.n	8003914 <HAL_SD_InitCard+0x7c>
 8003a96:	bf00      	nop
 8003a98:	004005ff 	.word	0x004005ff
 8003a9c:	c1100000 	.word	0xc1100000

08003aa0 <HAL_SD_Init>:
{
 8003aa0:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	b908      	cbnz	r0, 8003aaa <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8003aa6:	2001      	movs	r0, #1
}
 8003aa8:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8003aaa:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8003aae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ab2:	b913      	cbnz	r3, 8003aba <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8003ab4:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003ab6:	f7ff fc6f 	bl	8003398 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8003aba:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003abc:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8003abe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003ac2:	f7ff fee9 	bl	8003898 <HAL_SD_InitCard>
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d1ed      	bne.n	8003aa6 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8003aca:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003acc:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003ace:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003ad0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8003ad4:	e7e8      	b.n	8003aa8 <HAL_SD_Init+0x8>

08003ad6 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003ad6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ad8:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003ada:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003adc:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003ade:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003ae0:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003ae2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003ae4:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003ae6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003ae8:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003aea:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003aec:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003aee:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003af0:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003af2:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 8003af4:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003af6:	61cb      	str	r3, [r1, #28]
}
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8003afc:	2303      	movs	r3, #3
{
 8003afe:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8003b00:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8003b04:	b08b      	sub	sp, #44	; 0x2c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b06:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003b08:	4604      	mov	r4, r0
 8003b0a:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d002      	beq.n	8003b16 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003b10:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003b14:	d103      	bne.n	8003b1e <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	e05d      	b.n	8003bda <HAL_SD_ConfigWideBusOperation+0xde>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003b1e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003b22:	6800      	ldr	r0, [r0, #0]
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003b24:	d137      	bne.n	8003b96 <HAL_SD_ConfigWideBusOperation+0x9a>
  uint32_t scr[2U] = {0U, 0U};
 8003b26:	2100      	movs	r1, #0
 8003b28:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003b2c:	f000 f9a8 	bl	8003e80 <SDMMC_GetResponse>
 8003b30:	0180      	lsls	r0, r0, #6
 8003b32:	d449      	bmi.n	8003bc8 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8003b34:	a904      	add	r1, sp, #16
 8003b36:	4620      	mov	r0, r4
 8003b38:	f7ff fbc8 	bl	80032cc <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b3c:	b960      	cbnz	r0, 8003b58 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003b3e:	9b05      	ldr	r3, [sp, #20]
 8003b40:	0359      	lsls	r1, r3, #13
 8003b42:	d544      	bpl.n	8003bce <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b44:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003b46:	6820      	ldr	r0, [r4, #0]
 8003b48:	0409      	lsls	r1, r1, #16
 8003b4a:	f000 fb0f 	bl	800416c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b4e:	b918      	cbnz	r0, 8003b58 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003b50:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003b52:	6820      	ldr	r0, [r4, #0]
 8003b54:	f000 fb22 	bl	800419c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8003b58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b5a:	4318      	orrs	r0, r3
 8003b5c:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003b5e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b60:	6827      	ldr	r7, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003b62:	2e00      	cmp	r6, #0
 8003b64:	d03b      	beq.n	8003bde <HAL_SD_ConfigWideBusOperation+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b66:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <HAL_SD_ConfigWideBusOperation+0x110>)
    hsd->State = HAL_SD_STATE_READY;
 8003b68:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b6a:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b6c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003b70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	f000 fa4f 	bl	8004018 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b7a:	b130      	cbz	r0, 8003b8a <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b7c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8003b7e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b80:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <HAL_SD_ConfigWideBusOperation+0x110>)
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003b84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b86:	4318      	orrs	r0, r3
 8003b88:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8003b8a:	2301      	movs	r3, #1
}
 8003b8c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8003b8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003b92:	b00b      	add	sp, #44	; 0x2c
 8003b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003b96:	b9e9      	cbnz	r1, 8003bd4 <HAL_SD_ConfigWideBusOperation+0xd8>
  uint32_t scr[2U] = {0U, 0U};
 8003b98:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003b9c:	f000 f970 	bl	8003e80 <SDMMC_GetResponse>
 8003ba0:	0182      	lsls	r2, r0, #6
 8003ba2:	d411      	bmi.n	8003bc8 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8003ba4:	a904      	add	r1, sp, #16
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f7ff fb90 	bl	80032cc <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d1d3      	bne.n	8003b58 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003bb0:	9b05      	ldr	r3, [sp, #20]
 8003bb2:	03db      	lsls	r3, r3, #15
 8003bb4:	d50b      	bpl.n	8003bce <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003bb6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003bb8:	6820      	ldr	r0, [r4, #0]
 8003bba:	0409      	lsls	r1, r1, #16
 8003bbc:	f000 fad6 	bl	800416c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d1c9      	bne.n	8003b58 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003bc4:	4601      	mov	r1, r0
 8003bc6:	e7c4      	b.n	8003b52 <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003bc8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003bcc:	e7c4      	b.n	8003b58 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003bce:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003bd2:	e7c1      	b.n	8003b58 <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003bda:	63a3      	str	r3, [r4, #56]	; 0x38
 8003bdc:	e7bf      	b.n	8003b5e <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003bde:	6863      	ldr	r3, [r4, #4]
 8003be0:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003be2:	68a3      	ldr	r3, [r4, #8]
 8003be4:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003be6:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8003be8:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003bec:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	4635      	mov	r5, r6
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003bf0:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003bf2:	69a3      	ldr	r3, [r4, #24]
 8003bf4:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 8003bf6:	ab0a      	add	r3, sp, #40	; 0x28
 8003bf8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003bfc:	ab04      	add	r3, sp, #16
 8003bfe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003c02:	4638      	mov	r0, r7
 8003c04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c06:	f000 f8fc 	bl	8003e02 <SDMMC_Init>
 8003c0a:	e7b1      	b.n	8003b70 <HAL_SD_ConfigWideBusOperation+0x74>
 8003c0c:	004005ff 	.word	0x004005ff

08003c10 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c10:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8003c12:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c14:	0409      	lsls	r1, r1, #16
{
 8003c16:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c18:	6800      	ldr	r0, [r0, #0]
 8003c1a:	f000 faef 	bl	80041fc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c1e:	4601      	mov	r1, r0
 8003c20:	b928      	cbnz	r0, 8003c2e <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003c22:	6820      	ldr	r0, [r4, #0]
 8003c24:	f000 f92c 	bl	8003e80 <SDMMC_GetResponse>
}
 8003c28:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8003c2c:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8003c2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c30:	4308      	orrs	r0, r1
 8003c32:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8003c34:	2000      	movs	r0, #0
 8003c36:	e7f7      	b.n	8003c28 <HAL_SD_GetCardState+0x18>

08003c38 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8003c38:	4770      	bx	lr

08003c3a <HAL_SDRAM_Init>:
{
 8003c3a:	b538      	push	{r3, r4, r5, lr}
 8003c3c:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8003c3e:	4604      	mov	r4, r0
 8003c40:	b1c8      	cbz	r0, 8003c76 <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003c42:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003c46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c4a:	b91b      	cbnz	r3, 8003c54 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8003c4c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003c50:	f7ff fff2 	bl	8003c38 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003c54:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003c56:	1d21      	adds	r1, r4, #4
 8003c58:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003c5a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003c5e:	f000 f843 	bl	8003ce8 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8003c62:	6862      	ldr	r2, [r4, #4]
 8003c64:	4629      	mov	r1, r5
 8003c66:	6820      	ldr	r0, [r4, #0]
 8003c68:	f000 f879 	bl	8003d5e <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003c6c:	2301      	movs	r3, #1
  return HAL_OK;
 8003c6e:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003c70:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8003c74:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003c76:	2001      	movs	r0, #1
 8003c78:	e7fc      	b.n	8003c74 <HAL_SDRAM_Init+0x3a>

08003c7a <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8003c7a:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8003c7c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8003c80:	4605      	mov	r5, r0
 8003c82:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8003c84:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8003c86:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8003c88:	d010      	beq.n	8003cac <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8003c8a:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8003c8e:	2c01      	cmp	r4, #1
 8003c90:	d110      	bne.n	8003cb4 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003c92:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003c94:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003c96:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003c9a:	f000 f896 	bl	8003dca <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003c9e:	6833      	ldr	r3, [r6, #0]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d104      	bne.n	8003cae <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003ca4:	2305      	movs	r3, #5
 8003ca6:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003caa:	2000      	movs	r0, #0
}
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8003cae:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8003cb2:	e7fa      	b.n	8003caa <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	e7f9      	b.n	8003cac <HAL_SDRAM_SendCommand+0x32>

08003cb8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003cb8:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003cba:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8003cbe:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	b2d8      	uxtb	r0, r3
 8003cc4:	d00d      	beq.n	8003ce2 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8003cc6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	b2dd      	uxtb	r5, r3
 8003cce:	d109      	bne.n	8003ce4 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003cd0:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8003cd2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003cd4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8003cd8:	f000 f889 	bl	8003dee <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003cdc:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003cde:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	e7fc      	b.n	8003ce2 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08003ce8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003cec:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003cee:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8003cf2:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8003cf6:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8003cfa:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8003cfe:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8003d02:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003d04:	b9a2      	cbnz	r2, 8003d30 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003d06:	ea43 0209 	orr.w	r2, r3, r9
 8003d0a:	6801      	ldr	r1, [r0, #0]
 8003d0c:	432a      	orrs	r2, r5
 8003d0e:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8003d12:	ea42 0308 	orr.w	r3, r2, r8
 8003d16:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8003d1a:	ea43 030e 	orr.w	r3, r3, lr
 8003d1e:	ea43 030c 	orr.w	r3, r3, ip
 8003d22:	433b      	orrs	r3, r7
 8003d24:	4333      	orrs	r3, r6
 8003d26:	430b      	orrs	r3, r1
 8003d28:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003d30:	6802      	ldr	r2, [r0, #0]
 8003d32:	ea43 0309 	orr.w	r3, r3, r9
 8003d36:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8003d3e:	ea45 0308 	orr.w	r3, r5, r8
 8003d42:	6842      	ldr	r2, [r0, #4]
 8003d44:	ea43 030e 	orr.w	r3, r3, lr
 8003d48:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8003d4c:	ea43 030c 	orr.w	r3, r3, ip
 8003d50:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003d54:	433b      	orrs	r3, r7
 8003d56:	4333      	orrs	r3, r6
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	6043      	str	r3, [r0, #4]
 8003d5c:	e7e5      	b.n	8003d2a <FMC_SDRAM_Init+0x42>

08003d5e <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003d5e:	68cb      	ldr	r3, [r1, #12]
 8003d60:	f103 3cff 	add.w	ip, r3, #4294967295
 8003d64:	694b      	ldr	r3, [r1, #20]
{
 8003d66:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	680f      	ldr	r7, [r1, #0]
 8003d6c:	684c      	ldr	r4, [r1, #4]
 8003d6e:	688e      	ldr	r6, [r1, #8]
 8003d70:	051b      	lsls	r3, r3, #20
 8003d72:	690d      	ldr	r5, [r1, #16]
 8003d74:	3c01      	subs	r4, #1
 8003d76:	6989      	ldr	r1, [r1, #24]
 8003d78:	3e01      	subs	r6, #1
 8003d7a:	3d01      	subs	r5, #1
 8003d7c:	3f01      	subs	r7, #1
 8003d7e:	3901      	subs	r1, #1
 8003d80:	0124      	lsls	r4, r4, #4
 8003d82:	0236      	lsls	r6, r6, #8
 8003d84:	042d      	lsls	r5, r5, #16
 8003d86:	0609      	lsls	r1, r1, #24
 8003d88:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8003d8c:	b95a      	cbnz	r2, 8003da6 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003d8e:	433b      	orrs	r3, r7
 8003d90:	6882      	ldr	r2, [r0, #8]
 8003d92:	4323      	orrs	r3, r4
 8003d94:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8003d98:	4333      	orrs	r3, r6
 8003d9a:	432b      	orrs	r3, r5
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8003da2:	2000      	movs	r0, #0
 8003da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003da6:	6882      	ldr	r2, [r0, #8]
 8003da8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003dac:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8003db0:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003db2:	ea44 0306 	orr.w	r3, r4, r6
 8003db6:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003db8:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003dba:	68c2      	ldr	r2, [r0, #12]
 8003dbc:	432b      	orrs	r3, r5
 8003dbe:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60c3      	str	r3, [r0, #12]
 8003dc8:	e7eb      	b.n	8003da2 <FMC_SDRAM_Timing_Init+0x44>

08003dca <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8003dca:	6902      	ldr	r2, [r0, #16]
{
 8003dcc:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8003dce:	e9d1 3400 	ldrd	r3, r4, [r1]
 8003dd2:	0d92      	lsrs	r2, r2, #22
 8003dd4:	4323      	orrs	r3, r4
 8003dd6:	68cc      	ldr	r4, [r1, #12]
 8003dd8:	0592      	lsls	r2, r2, #22
 8003dda:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8003dde:	4313      	orrs	r3, r2
 8003de0:	688a      	ldr	r2, [r1, #8]
 8003de2:	3a01      	subs	r2, #1
 8003de4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003de8:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8003dea:	2000      	movs	r0, #0
 8003dec:	bd10      	pop	{r4, pc}

08003dee <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8003dee:	6943      	ldr	r3, [r0, #20]
 8003df0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003df4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8003df8:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8003dfc:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8003dfe:	2000      	movs	r0, #0
 8003e00:	4770      	bx	lr

08003e02 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8003e02:	b084      	sub	sp, #16
 8003e04:	b510      	push	{r4, lr}
 8003e06:	ac03      	add	r4, sp, #12
 8003e08:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003e10:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8003e12:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8003e14:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003e16:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 8003e1a:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8003e1c:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003e1e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8003e22:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8003e24:	9907      	ldr	r1, [sp, #28]
 8003e26:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8003e28:	9908      	ldr	r1, [sp, #32]
 8003e2a:	430b      	orrs	r3, r1

  return HAL_OK;
}
 8003e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003e30:	4313      	orrs	r3, r2
}
 8003e32:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003e34:	6043      	str	r3, [r0, #4]
}
 8003e36:	2000      	movs	r0, #0
 8003e38:	4770      	bx	lr

08003e3a <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8003e3a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8003e3e:	4770      	bx	lr

08003e40 <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8003e40:	680b      	ldr	r3, [r1, #0]
 8003e42:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8003e46:	2000      	movs	r0, #0
 8003e48:	4770      	bx	lr

08003e4a <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8003e4e:	2000      	movs	r0, #0
 8003e50:	4770      	bx	lr

08003e52 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8003e52:	6800      	ldr	r0, [r0, #0]
}
 8003e54:	f000 0003 	and.w	r0, r0, #3
 8003e58:	4770      	bx	lr

08003e5a <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8003e5a:	680b      	ldr	r3, [r1, #0]
{
 8003e5c:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8003e5e:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003e60:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e62:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003e66:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e6a:	4323      	orrs	r3, r4
                       Command->Response         |\
 8003e6c:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8003e6e:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003e70:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 8003e74:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8003e76:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	bd10      	pop	{r4, pc}

08003e80 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8003e80:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8003e82:	5840      	ldr	r0, [r0, r1]
}  
 8003e84:	4770      	bx	lr

08003e86 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8003e86:	680b      	ldr	r3, [r1, #0]
{
 8003e88:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8003e8a:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8003e8c:	684b      	ldr	r3, [r1, #4]
 8003e8e:	6283      	str	r3, [r0, #40]	; 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003e90:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003e92:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003e96:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003e9a:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8003e9c:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8003e9e:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8003ea0:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8003ea2:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	bd10      	pop	{r4, pc}

08003eac <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8003eac:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003eae:	2300      	movs	r3, #0
{
 8003eb0:	b086      	sub	sp, #24
 8003eb2:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003eb4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003eb6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003eba:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ec2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003ec4:	f7ff ffc9 	bl	8003e5a <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <SDMMC_CmdGoIdleState+0x48>)
 8003eca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003eda:	3b01      	subs	r3, #1
 8003edc:	d307      	bcc.n	8003eee <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8003ede:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003ee0:	0612      	lsls	r2, r2, #24
 8003ee2:	d5fa      	bpl.n	8003eda <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003ee4:	23c5      	movs	r3, #197	; 0xc5
  
  return SDMMC_ERROR_NONE;
 8003ee6:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003ee8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003eea:	b006      	add	sp, #24
 8003eec:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8003eee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8003ef2:	e7fa      	b.n	8003eea <SDMMC_CmdGoIdleState+0x3e>
 8003ef4:	20000030 	.word	0x20000030

08003ef8 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003ef8:	4b45      	ldr	r3, [pc, #276]	; (8004010 <SDMMC_GetCmdResp1+0x118>)
{
 8003efa:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003efc:	681b      	ldr	r3, [r3, #0]
{
 8003efe:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003f00:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8003f04:	fbb3 f3f0 	udiv	r3, r3, r0
 8003f08:	435a      	muls	r2, r3
    if (count-- == 0U)
 8003f0a:	2a00      	cmp	r2, #0
 8003f0c:	d049      	beq.n	8003fa2 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 8003f0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003f10:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003f14:	d007      	beq.n	8003f26 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003f16:	051b      	lsls	r3, r3, #20
 8003f18:	d405      	bmi.n	8003f26 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003f1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f1c:	0758      	lsls	r0, r3, #29
 8003f1e:	d504      	bpl.n	8003f2a <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003f20:	2004      	movs	r0, #4
 8003f22:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8003f24:	bd10      	pop	{r4, pc}
 8003f26:	3a01      	subs	r2, #1
 8003f28:	e7ef      	b.n	8003f0a <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003f2a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003f2c:	f010 0001 	ands.w	r0, r0, #1
 8003f30:	d002      	beq.n	8003f38 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003f32:	2301      	movs	r3, #1
 8003f34:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f36:	e7f5      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003f38:	23c5      	movs	r3, #197	; 0xc5
 8003f3a:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8003f3c:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	4299      	cmp	r1, r3
 8003f42:	d131      	bne.n	8003fa8 <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8003f44:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003f46:	4833      	ldr	r0, [pc, #204]	; (8004014 <SDMMC_GetCmdResp1+0x11c>)
 8003f48:	4018      	ands	r0, r3
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d0ea      	beq.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	db2c      	blt.n	8003fac <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003f52:	005a      	lsls	r2, r3, #1
 8003f54:	d42d      	bmi.n	8003fb2 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003f56:	009c      	lsls	r4, r3, #2
 8003f58:	d42d      	bmi.n	8003fb6 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003f5a:	00d9      	lsls	r1, r3, #3
 8003f5c:	d42d      	bmi.n	8003fba <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003f5e:	011a      	lsls	r2, r3, #4
 8003f60:	d42e      	bmi.n	8003fc0 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003f62:	015c      	lsls	r4, r3, #5
 8003f64:	d42f      	bmi.n	8003fc6 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003f66:	01d9      	lsls	r1, r3, #7
 8003f68:	d430      	bmi.n	8003fcc <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003f6a:	021a      	lsls	r2, r3, #8
 8003f6c:	d431      	bmi.n	8003fd2 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003f6e:	025c      	lsls	r4, r3, #9
 8003f70:	d432      	bmi.n	8003fd8 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003f72:	0299      	lsls	r1, r3, #10
 8003f74:	d433      	bmi.n	8003fde <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003f76:	02da      	lsls	r2, r3, #11
 8003f78:	d434      	bmi.n	8003fe4 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003f7a:	035c      	lsls	r4, r3, #13
 8003f7c:	d435      	bmi.n	8003fea <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003f7e:	0399      	lsls	r1, r3, #14
 8003f80:	d436      	bmi.n	8003ff0 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003f82:	03da      	lsls	r2, r3, #15
 8003f84:	d437      	bmi.n	8003ff6 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003f86:	041c      	lsls	r4, r3, #16
 8003f88:	d438      	bmi.n	8003ffc <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003f8a:	0459      	lsls	r1, r3, #17
 8003f8c:	d439      	bmi.n	8004002 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003f8e:	049a      	lsls	r2, r3, #18
 8003f90:	d43a      	bmi.n	8004008 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003f92:	f013 0f08 	tst.w	r3, #8
 8003f96:	bf14      	ite	ne
 8003f98:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8003f9c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8003fa0:	e7c0      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8003fa2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003fa6:	e7bd      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fa8:	2001      	movs	r0, #1
 8003faa:	e7bb      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003fac:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8003fb0:	e7b8      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003fb2:	2040      	movs	r0, #64	; 0x40
 8003fb4:	e7b6      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003fb6:	2080      	movs	r0, #128	; 0x80
 8003fb8:	e7b4      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003fba:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003fbe:	e7b1      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003fc0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003fc4:	e7ae      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003fc6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003fca:	e7ab      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003fcc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003fd0:	e7a8      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003fd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003fd6:	e7a5      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003fd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003fdc:	e7a2      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003fde:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003fe2:	e79f      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8003fe4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003fe8:	e79c      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003fea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003fee:	e799      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003ff0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003ff4:	e796      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003ff6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ffa:	e793      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003ffc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004000:	e790      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004002:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004006:	e78d      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8004008:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800400c:	e78a      	b.n	8003f24 <SDMMC_GetCmdResp1+0x2c>
 800400e:	bf00      	nop
 8004010:	20000030 	.word	0x20000030
 8004014:	fdffe008 	.word	0xfdffe008

08004018 <SDMMC_CmdBlockLength>:
{
 8004018:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800401a:	2340      	movs	r3, #64	; 0x40
{
 800401c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800401e:	2510      	movs	r5, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004020:	2200      	movs	r2, #0
{
 8004022:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004024:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004026:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004028:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800402c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004030:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004034:	f7ff ff11 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	4629      	mov	r1, r5
 800403e:	4620      	mov	r0, r4
 8004040:	f7ff ff5a 	bl	8003ef8 <SDMMC_GetCmdResp1>
}
 8004044:	b007      	add	sp, #28
 8004046:	bd30      	pop	{r4, r5, pc}

08004048 <SDMMC_CmdReadSingleBlock>:
{
 8004048:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800404a:	2340      	movs	r3, #64	; 0x40
{
 800404c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800404e:	2511      	movs	r5, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004050:	2200      	movs	r2, #0
{
 8004052:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004054:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004056:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004058:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800405c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004060:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004064:	f7ff fef9 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	4629      	mov	r1, r5
 800406e:	4620      	mov	r0, r4
 8004070:	f7ff ff42 	bl	8003ef8 <SDMMC_GetCmdResp1>
}
 8004074:	b007      	add	sp, #28
 8004076:	bd30      	pop	{r4, r5, pc}

08004078 <SDMMC_CmdReadMultiBlock>:
{
 8004078:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800407a:	2340      	movs	r3, #64	; 0x40
{
 800407c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800407e:	2512      	movs	r5, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004080:	2200      	movs	r2, #0
{
 8004082:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004084:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004086:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004088:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800408c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004090:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004094:	f7ff fee1 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4629      	mov	r1, r5
 800409e:	4620      	mov	r0, r4
 80040a0:	f7ff ff2a 	bl	8003ef8 <SDMMC_GetCmdResp1>
}
 80040a4:	b007      	add	sp, #28
 80040a6:	bd30      	pop	{r4, r5, pc}

080040a8 <SDMMC_CmdWriteSingleBlock>:
{
 80040a8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040aa:	2340      	movs	r3, #64	; 0x40
{
 80040ac:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040ae:	2518      	movs	r5, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80040b0:	2200      	movs	r2, #0
{
 80040b2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80040b4:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80040b6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040b8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80040bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80040c4:	f7ff fec9 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80040c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040cc:	4629      	mov	r1, r5
 80040ce:	4620      	mov	r0, r4
 80040d0:	f7ff ff12 	bl	8003ef8 <SDMMC_GetCmdResp1>
}
 80040d4:	b007      	add	sp, #28
 80040d6:	bd30      	pop	{r4, r5, pc}

080040d8 <SDMMC_CmdWriteMultiBlock>:
{
 80040d8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040da:	2340      	movs	r3, #64	; 0x40
{
 80040dc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040de:	2519      	movs	r5, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80040e0:	2200      	movs	r2, #0
{
 80040e2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80040e4:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80040e6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040e8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80040ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80040f4:	f7ff feb1 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80040f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fc:	4629      	mov	r1, r5
 80040fe:	4620      	mov	r0, r4
 8004100:	f7ff fefa 	bl	8003ef8 <SDMMC_GetCmdResp1>
}
 8004104:	b007      	add	sp, #28
 8004106:	bd30      	pop	{r4, r5, pc}

08004108 <SDMMC_CmdStopTransfer>:
{
 8004108:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800410a:	2300      	movs	r3, #0
{
 800410c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800410e:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004110:	2240      	movs	r2, #64	; 0x40
{
 8004112:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004114:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004116:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800411a:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800411e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004122:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004124:	f7ff fe99 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004128:	4a03      	ldr	r2, [pc, #12]	; (8004138 <SDMMC_CmdStopTransfer+0x30>)
 800412a:	4629      	mov	r1, r5
 800412c:	4620      	mov	r0, r4
 800412e:	f7ff fee3 	bl	8003ef8 <SDMMC_GetCmdResp1>
}
 8004132:	b007      	add	sp, #28
 8004134:	bd30      	pop	{r4, r5, pc}
 8004136:	bf00      	nop
 8004138:	05f5e100 	.word	0x05f5e100

0800413c <SDMMC_CmdSelDesel>:
{
 800413c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800413e:	2340      	movs	r3, #64	; 0x40
{
 8004140:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004142:	2507      	movs	r5, #7
{
 8004144:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004146:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004148:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800414a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800414c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004154:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004158:	f7ff fe7f 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800415c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004160:	4629      	mov	r1, r5
 8004162:	4620      	mov	r0, r4
 8004164:	f7ff fec8 	bl	8003ef8 <SDMMC_GetCmdResp1>
}
 8004168:	b007      	add	sp, #28
 800416a:	bd30      	pop	{r4, r5, pc}

0800416c <SDMMC_CmdAppCommand>:
{
 800416c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800416e:	2340      	movs	r3, #64	; 0x40
{
 8004170:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004172:	2537      	movs	r5, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004174:	2200      	movs	r2, #0
{
 8004176:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004178:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800417a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800417c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004184:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004188:	f7ff fe67 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4629      	mov	r1, r5
 8004192:	4620      	mov	r0, r4
 8004194:	f7ff feb0 	bl	8003ef8 <SDMMC_GetCmdResp1>
}
 8004198:	b007      	add	sp, #28
 800419a:	bd30      	pop	{r4, r5, pc}

0800419c <SDMMC_CmdBusWidth>:
{
 800419c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800419e:	2340      	movs	r3, #64	; 0x40
{
 80041a0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80041a2:	2506      	movs	r5, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80041a4:	2200      	movs	r2, #0
{
 80041a6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80041a8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80041aa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80041ac:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80041b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80041b8:	f7ff fe4f 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	4629      	mov	r1, r5
 80041c2:	4620      	mov	r0, r4
 80041c4:	f7ff fe98 	bl	8003ef8 <SDMMC_GetCmdResp1>
}
 80041c8:	b007      	add	sp, #28
 80041ca:	bd30      	pop	{r4, r5, pc}

080041cc <SDMMC_CmdSendSCR>:
{
 80041cc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80041ce:	2300      	movs	r3, #0
{
 80041d0:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80041d2:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80041d4:	2240      	movs	r2, #64	; 0x40
{
 80041d6:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80041d8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80041da:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80041de:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80041e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041e6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80041e8:	f7ff fe37 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80041ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f0:	4629      	mov	r1, r5
 80041f2:	4620      	mov	r0, r4
 80041f4:	f7ff fe80 	bl	8003ef8 <SDMMC_GetCmdResp1>
}
 80041f8:	b007      	add	sp, #28
 80041fa:	bd30      	pop	{r4, r5, pc}

080041fc <SDMMC_CmdSendStatus>:
{
 80041fc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80041fe:	2340      	movs	r3, #64	; 0x40
{
 8004200:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004202:	250d      	movs	r5, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004204:	2200      	movs	r2, #0
{
 8004206:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004208:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800420a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800420c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004214:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004218:	f7ff fe1f 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800421c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004220:	4629      	mov	r1, r5
 8004222:	4620      	mov	r0, r4
 8004224:	f7ff fe68 	bl	8003ef8 <SDMMC_GetCmdResp1>
}
 8004228:	b007      	add	sp, #28
 800422a:	bd30      	pop	{r4, r5, pc}

0800422c <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800422c:	4b11      	ldr	r3, [pc, #68]	; (8004274 <SDMMC_GetCmdResp2+0x48>)
 800422e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8004232:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	fbb3 f3f1 	udiv	r3, r3, r1
 800423a:	f241 3188 	movw	r1, #5000	; 0x1388
 800423e:	434b      	muls	r3, r1
    if (count-- == 0U)
 8004240:	3b01      	subs	r3, #1
 8004242:	d313      	bcc.n	800426c <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDMMCx->STA;
 8004244:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004246:	f011 0f45 	tst.w	r1, #69	; 0x45
 800424a:	d0f9      	beq.n	8004240 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800424c:	0509      	lsls	r1, r1, #20
 800424e:	d4f7      	bmi.n	8004240 <SDMMC_GetCmdResp2+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004250:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004252:	075b      	lsls	r3, r3, #29
 8004254:	d502      	bpl.n	800425c <SDMMC_GetCmdResp2+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004256:	2004      	movs	r0, #4
 8004258:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800425a:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800425c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800425e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004266:	23c5      	moveq	r3, #197	; 0xc5
 8004268:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800426a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800426c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000030 	.word	0x20000030

08004278 <SDMMC_CmdSendCID>:
{
 8004278:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800427a:	2300      	movs	r3, #0
{
 800427c:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800427e:	2202      	movs	r2, #2
{
 8004280:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004282:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004284:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004288:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800428a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800428e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004292:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004294:	f7ff fde1 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004298:	4620      	mov	r0, r4
 800429a:	f7ff ffc7 	bl	800422c <SDMMC_GetCmdResp2>
}
 800429e:	b006      	add	sp, #24
 80042a0:	bd10      	pop	{r4, pc}

080042a2 <SDMMC_CmdSendCSD>:
{
 80042a2:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80042a4:	2209      	movs	r2, #9
{
 80042a6:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80042a8:	23c0      	movs	r3, #192	; 0xc0
{
 80042aa:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80042ac:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80042ae:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80042b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80042b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042b8:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80042bc:	a901      	add	r1, sp, #4
 80042be:	f7ff fdcc 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7ff ffb2 	bl	800422c <SDMMC_GetCmdResp2>
}
 80042c8:	b006      	add	sp, #24
 80042ca:	bd10      	pop	{r4, pc}

080042cc <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <SDMMC_GetCmdResp3+0x40>)
 80042ce:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 80042d2:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042da:	f241 3188 	movw	r1, #5000	; 0x1388
 80042de:	434b      	muls	r3, r1
    if (count-- == 0U)
 80042e0:	3b01      	subs	r3, #1
 80042e2:	d30f      	bcc.n	8004304 <SDMMC_GetCmdResp3+0x38>
    sta_reg = SDMMCx->STA;
 80042e4:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80042e6:	f011 0f45 	tst.w	r1, #69	; 0x45
 80042ea:	d0f9      	beq.n	80042e0 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80042ec:	0509      	lsls	r1, r1, #20
 80042ee:	d4f7      	bmi.n	80042e0 <SDMMC_GetCmdResp3+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80042f0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80042f2:	f010 0004 	ands.w	r0, r0, #4
 80042f6:	d002      	beq.n	80042fe <SDMMC_GetCmdResp3+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80042f8:	2004      	movs	r0, #4
 80042fa:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80042fc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80042fe:	23c5      	movs	r3, #197	; 0xc5
 8004300:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004302:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004304:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000030 	.word	0x20000030

08004310 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004310:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004314:	2229      	movs	r2, #41	; 0x29
 8004316:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004318:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
{
 800431c:	b510      	push	{r4, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	4604      	mov	r4, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004322:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004326:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800432c:	2100      	movs	r1, #0
 800432e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004332:	a901      	add	r1, sp, #4
 8004334:	f7ff fd91 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004338:	4620      	mov	r0, r4
 800433a:	f7ff ffc7 	bl	80042cc <SDMMC_GetCmdResp3>
}
 800433e:	b006      	add	sp, #24
 8004340:	bd10      	pop	{r4, pc}
	...

08004344 <SDMMC_GetCmdResp6>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004344:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <SDMMC_GetCmdResp6+0x80>)
{
 8004346:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004348:	681b      	ldr	r3, [r3, #0]
{
 800434a:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800434c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8004350:	fbb3 f3f0 	udiv	r3, r3, r0
 8004354:	f241 3088 	movw	r0, #5000	; 0x1388
 8004358:	4343      	muls	r3, r0
    if (count-- == 0U)
 800435a:	3b01      	subs	r3, #1
 800435c:	d329      	bcc.n	80043b2 <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDMMCx->STA;
 800435e:	6b60      	ldr	r0, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004360:	f010 0f45 	tst.w	r0, #69	; 0x45
 8004364:	d0f9      	beq.n	800435a <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004366:	0500      	lsls	r0, r0, #20
 8004368:	d4f7      	bmi.n	800435a <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800436a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800436c:	0758      	lsls	r0, r3, #29
 800436e:	d502      	bpl.n	8004376 <SDMMC_GetCmdResp6+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004370:	2004      	movs	r0, #4
 8004372:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8004374:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004376:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004378:	f010 0001 	ands.w	r0, r0, #1
 800437c:	d002      	beq.n	8004384 <SDMMC_GetCmdResp6+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800437e:	2301      	movs	r3, #1
 8004380:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004382:	e7f7      	b.n	8004374 <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDMMCx->RESPCMD);
 8004384:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004386:	b2db      	uxtb	r3, r3
 8004388:	4299      	cmp	r1, r3
 800438a:	d115      	bne.n	80043b8 <SDMMC_GetCmdResp6+0x74>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800438c:	23c5      	movs	r3, #197	; 0xc5
 800438e:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8004390:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004392:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8004396:	d102      	bne.n	800439e <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 800439c:	e7ea      	b.n	8004374 <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800439e:	045a      	lsls	r2, r3, #17
 80043a0:	d40c      	bmi.n	80043bc <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80043a2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80043a6:	bf14      	ite	ne
 80043a8:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80043ac:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80043b0:	e7e0      	b.n	8004374 <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80043b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80043b6:	e7dd      	b.n	8004374 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043b8:	2001      	movs	r0, #1
 80043ba:	e7db      	b.n	8004374 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80043bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80043c0:	e7d8      	b.n	8004374 <SDMMC_GetCmdResp6+0x30>
 80043c2:	bf00      	nop
 80043c4:	20000030 	.word	0x20000030

080043c8 <SDMMC_CmdSetRelAdd>:
{
 80043c8:	b530      	push	{r4, r5, lr}
 80043ca:	b089      	sub	sp, #36	; 0x24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80043cc:	2300      	movs	r3, #0
 80043ce:	2503      	movs	r5, #3
{
 80043d0:	4604      	mov	r4, r0
 80043d2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80043d4:	2140      	movs	r1, #64	; 0x40
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80043d6:	e9cd 3503 	strd	r3, r5, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80043da:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80043de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80043e2:	a903      	add	r1, sp, #12
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80043e4:	9307      	str	r3, [sp, #28]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80043e6:	f7ff fd38 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80043ea:	9a01      	ldr	r2, [sp, #4]
 80043ec:	4629      	mov	r1, r5
 80043ee:	4620      	mov	r0, r4
 80043f0:	f7ff ffa8 	bl	8004344 <SDMMC_GetCmdResp6>
}
 80043f4:	b009      	add	sp, #36	; 0x24
 80043f6:	bd30      	pop	{r4, r5, pc}

080043f8 <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043f8:	4b13      	ldr	r3, [pc, #76]	; (8004448 <SDMMC_GetCmdResp7+0x50>)
 80043fa:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 80043fe:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	fbb3 f3f1 	udiv	r3, r3, r1
 8004406:	f241 3188 	movw	r1, #5000	; 0x1388
 800440a:	434b      	muls	r3, r1
    if (count-- == 0U)
 800440c:	3b01      	subs	r3, #1
 800440e:	d317      	bcc.n	8004440 <SDMMC_GetCmdResp7+0x48>
    sta_reg = SDMMCx->STA;
 8004410:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004412:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004416:	d0f9      	beq.n	800440c <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004418:	0508      	lsls	r0, r1, #20
 800441a:	d4f7      	bmi.n	800440c <SDMMC_GetCmdResp7+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800441c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800441e:	0759      	lsls	r1, r3, #29
 8004420:	d502      	bpl.n	8004428 <SDMMC_GetCmdResp7+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004422:	2004      	movs	r0, #4
 8004424:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004426:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004428:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800442a:	f010 0001 	ands.w	r0, r0, #1
 800442e:	d002      	beq.n	8004436 <SDMMC_GetCmdResp7+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004430:	2301      	movs	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004432:	6393      	str	r3, [r2, #56]	; 0x38
 8004434:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8004436:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004438:	065b      	lsls	r3, r3, #25
 800443a:	d503      	bpl.n	8004444 <SDMMC_GetCmdResp7+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800443c:	2340      	movs	r3, #64	; 0x40
 800443e:	e7f8      	b.n	8004432 <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 8004440:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000030 	.word	0x20000030

0800444c <SDMMC_CmdOperCond>:
{
 800444c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800444e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
{
 8004452:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004454:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004456:	2140      	movs	r1, #64	; 0x40
{
 8004458:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800445a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800445e:	2300      	movs	r3, #0
 8004460:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004464:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004468:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800446a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800446c:	f7ff fcf5 	bl	8003e5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004470:	4620      	mov	r0, r4
 8004472:	f7ff ffc1 	bl	80043f8 <SDMMC_GetCmdResp7>
}
 8004476:	b006      	add	sp, #24
 8004478:	bd10      	pop	{r4, pc}
	...

0800447c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <disk_status+0x10>)
 800447e:	181a      	adds	r2, r3, r0
 8004480:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	7b10      	ldrb	r0, [r2, #12]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4718      	bx	r3
 800448c:	200014cc 	.word	0x200014cc

08004490 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <disk_initialize+0x1c>)
 8004492:	5c1a      	ldrb	r2, [r3, r0]
 8004494:	b942      	cbnz	r2, 80044a8 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8004496:	2201      	movs	r2, #1
 8004498:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800449a:	181a      	adds	r2, r3, r0
 800449c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80044a0:	7b10      	ldrb	r0, [r2, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4718      	bx	r3
  }
  return stat;
}
 80044a8:	2000      	movs	r0, #0
 80044aa:	4770      	bx	lr
 80044ac:	200014cc 	.word	0x200014cc

080044b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80044b0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80044b2:	4c05      	ldr	r4, [pc, #20]	; (80044c8 <disk_read+0x18>)
 80044b4:	1825      	adds	r5, r4, r0
 80044b6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80044ba:	6860      	ldr	r0, [r4, #4]
 80044bc:	6884      	ldr	r4, [r0, #8]
 80044be:	7b28      	ldrb	r0, [r5, #12]
 80044c0:	46a4      	mov	ip, r4
  return res;
}
 80044c2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80044c4:	4760      	bx	ip
 80044c6:	bf00      	nop
 80044c8:	200014cc 	.word	0x200014cc

080044cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80044cc:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80044ce:	4c05      	ldr	r4, [pc, #20]	; (80044e4 <disk_write+0x18>)
 80044d0:	1825      	adds	r5, r4, r0
 80044d2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80044d6:	6860      	ldr	r0, [r4, #4]
 80044d8:	68c4      	ldr	r4, [r0, #12]
 80044da:	7b28      	ldrb	r0, [r5, #12]
 80044dc:	46a4      	mov	ip, r4
  return res;
}
 80044de:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80044e0:	4760      	bx	ip
 80044e2:	bf00      	nop
 80044e4:	200014cc 	.word	0x200014cc

080044e8 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <disk_ioctl+0x18>)
{
 80044ea:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80044ec:	181c      	adds	r4, r3, r0
 80044ee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	7b20      	ldrb	r0, [r4, #12]
 80044f6:	691b      	ldr	r3, [r3, #16]
  return res;
}
 80044f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80044fc:	4718      	bx	r3
 80044fe:	bf00      	nop
 8004500:	200014cc 	.word	0x200014cc

08004504 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8004504:	2000      	movs	r0, #0
 8004506:	4770      	bx	lr

08004508 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8004508:	6800      	ldr	r0, [r0, #0]
 800450a:	4770      	bx	lr

0800450c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800450c:	0a0b      	lsrs	r3, r1, #8
 800450e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004510:	7043      	strb	r3, [r0, #1]
 8004512:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004514:	0e09      	lsrs	r1, r1, #24
 8004516:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8004518:	70c1      	strb	r1, [r0, #3]
}
 800451a:	4770      	bx	lr

0800451c <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 800451c:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 800451e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8004522:	4290      	cmp	r0, r2
 8004524:	d1fb      	bne.n	800451e <mem_set+0x2>
}
 8004526:	4770      	bx	lr

08004528 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8004528:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <chk_lock+0x70>)
 800452a:	6813      	ldr	r3, [r2, #0]
{
 800452c:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 800452e:	b163      	cbz	r3, 800454a <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004530:	6804      	ldr	r4, [r0, #0]
 8004532:	429c      	cmp	r4, r3
 8004534:	d107      	bne.n	8004546 <chk_lock+0x1e>
 8004536:	6854      	ldr	r4, [r2, #4]
 8004538:	6883      	ldr	r3, [r0, #8]
 800453a:	429c      	cmp	r4, r3
 800453c:	d103      	bne.n	8004546 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 800453e:	6894      	ldr	r4, [r2, #8]
 8004540:	6943      	ldr	r3, [r0, #20]
 8004542:	429c      	cmp	r4, r3
 8004544:	d020      	beq.n	8004588 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004546:	2400      	movs	r4, #0
 8004548:	e000      	b.n	800454c <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800454a:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 800454c:	6913      	ldr	r3, [r2, #16]
 800454e:	b1cb      	cbz	r3, 8004584 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004550:	6805      	ldr	r5, [r0, #0]
 8004552:	42ab      	cmp	r3, r5
 8004554:	d107      	bne.n	8004566 <chk_lock+0x3e>
 8004556:	6955      	ldr	r5, [r2, #20]
 8004558:	6883      	ldr	r3, [r0, #8]
 800455a:	429d      	cmp	r5, r3
 800455c:	d103      	bne.n	8004566 <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 800455e:	6995      	ldr	r5, [r2, #24]
 8004560:	6943      	ldr	r3, [r0, #20]
 8004562:	429d      	cmp	r5, r3
 8004564:	d015      	beq.n	8004592 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004566:	b96c      	cbnz	r4, 8004584 <chk_lock+0x5c>
 8004568:	2902      	cmp	r1, #2
 800456a:	bf0c      	ite	eq
 800456c:	2000      	moveq	r0, #0
 800456e:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8004570:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004572:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8004576:	899b      	ldrh	r3, [r3, #12]
 8004578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457c:	bf14      	ite	ne
 800457e:	2000      	movne	r0, #0
 8004580:	2010      	moveq	r0, #16
 8004582:	e7f5      	b.n	8004570 <chk_lock+0x48>
 8004584:	2000      	movs	r0, #0
 8004586:	e7f3      	b.n	8004570 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004588:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800458a:	2900      	cmp	r1, #0
 800458c:	d0f1      	beq.n	8004572 <chk_lock+0x4a>
 800458e:	2010      	movs	r0, #16
 8004590:	e7ee      	b.n	8004570 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004592:	2301      	movs	r3, #1
 8004594:	e7f9      	b.n	800458a <chk_lock+0x62>
 8004596:	bf00      	nop
 8004598:	200014a0 	.word	0x200014a0

0800459c <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800459c:	4a1f      	ldr	r2, [pc, #124]	; (800461c <inc_lock+0x80>)
{
 800459e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 80045a0:	6813      	ldr	r3, [r2, #0]
 80045a2:	6806      	ldr	r6, [r0, #0]
 80045a4:	429e      	cmp	r6, r3
 80045a6:	d107      	bne.n	80045b8 <inc_lock+0x1c>
 80045a8:	6855      	ldr	r5, [r2, #4]
 80045aa:	6884      	ldr	r4, [r0, #8]
 80045ac:	42a5      	cmp	r5, r4
 80045ae:	d103      	bne.n	80045b8 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 80045b0:	6945      	ldr	r5, [r0, #20]
 80045b2:	6894      	ldr	r4, [r2, #8]
 80045b4:	42a5      	cmp	r5, r4
 80045b6:	d022      	beq.n	80045fe <inc_lock+0x62>
		if (Files[i].fs == dp->obj.fs &&
 80045b8:	6914      	ldr	r4, [r2, #16]
 80045ba:	42b4      	cmp	r4, r6
 80045bc:	d107      	bne.n	80045ce <inc_lock+0x32>
 80045be:	6957      	ldr	r7, [r2, #20]
 80045c0:	6885      	ldr	r5, [r0, #8]
 80045c2:	42af      	cmp	r7, r5
 80045c4:	d103      	bne.n	80045ce <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 80045c6:	6997      	ldr	r7, [r2, #24]
 80045c8:	6945      	ldr	r5, [r0, #20]
 80045ca:	42af      	cmp	r7, r5
 80045cc:	d021      	beq.n	8004612 <inc_lock+0x76>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80045ce:	b10b      	cbz	r3, 80045d4 <inc_lock+0x38>
 80045d0:	bb0c      	cbnz	r4, 8004616 <inc_lock+0x7a>
 80045d2:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 80045d4:	011d      	lsls	r5, r3, #4
 80045d6:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 80045da:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 80045dc:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 80045de:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 80045e0:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 80045e2:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 80045e4:	2000      	movs	r0, #0
 80045e6:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80045e8:	b981      	cbnz	r1, 800460c <inc_lock+0x70>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80045ea:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 80045ee:	8989      	ldrh	r1, [r1, #12]
 80045f0:	3101      	adds	r1, #1
 80045f2:	b289      	uxth	r1, r1
 80045f4:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 80045f8:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80045fa:	8191      	strh	r1, [r2, #12]
}
 80045fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80045fe:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004600:	2900      	cmp	r1, #0
 8004602:	d0f2      	beq.n	80045ea <inc_lock+0x4e>
 8004604:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8004608:	8989      	ldrh	r1, [r1, #12]
 800460a:	b921      	cbnz	r1, 8004616 <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800460c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004610:	e7f0      	b.n	80045f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004612:	2301      	movs	r3, #1
 8004614:	e7f4      	b.n	8004600 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004616:	2000      	movs	r0, #0
 8004618:	e7f0      	b.n	80045fc <inc_lock+0x60>
 800461a:	bf00      	nop
 800461c:	200014a0 	.word	0x200014a0

08004620 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004620:	3801      	subs	r0, #1
 8004622:	2801      	cmp	r0, #1
 8004624:	d815      	bhi.n	8004652 <dec_lock+0x32>
		n = Files[i].ctr;
 8004626:	4a0c      	ldr	r2, [pc, #48]	; (8004658 <dec_lock+0x38>)
 8004628:	0101      	lsls	r1, r0, #4
 800462a:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 800462e:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004634:	d104      	bne.n	8004640 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8004636:	2300      	movs	r3, #0
 8004638:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800463a:	2000      	movs	r0, #0
 800463c:	5050      	str	r0, [r2, r1]
 800463e:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0fa      	beq.n	800463a <dec_lock+0x1a>
 8004644:	3b01      	subs	r3, #1
 8004646:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8004648:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f5      	beq.n	800463a <dec_lock+0x1a>
		res = FR_OK;
 800464e:	2000      	movs	r0, #0
 8004650:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004652:	2002      	movs	r0, #2
	}
	return res;
}
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	200014a0 	.word	0x200014a0

0800465c <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <clear_lock+0x18>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4290      	cmp	r0, r2
 8004662:	bf04      	itt	eq
 8004664:	2200      	moveq	r2, #0
 8004666:	601a      	streq	r2, [r3, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	4290      	cmp	r0, r2
 800466c:	bf04      	itt	eq
 800466e:	2200      	moveq	r2, #0
 8004670:	611a      	streq	r2, [r3, #16]
	}
}
 8004672:	4770      	bx	lr
 8004674:	200014a0 	.word	0x200014a0

08004678 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004678:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 800467a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800467c:	3b02      	subs	r3, #2
 800467e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8004680:	bf83      	ittte	hi
 8004682:	8943      	ldrhhi	r3, [r0, #10]
 8004684:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 8004686:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800468a:	2000      	movls	r0, #0
}
 800468c:	4770      	bx	lr

0800468e <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800468e:	6802      	ldr	r2, [r0, #0]
 8004690:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004692:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004694:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004696:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004698:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800469c:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800469e:	b130      	cbz	r0, 80046ae <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 80046a0:	4281      	cmp	r1, r0
 80046a2:	d302      	bcc.n	80046aa <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 80046a4:	1a09      	subs	r1, r1, r0
 80046a6:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80046a8:	e7f8      	b.n	800469c <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 80046aa:	6858      	ldr	r0, [r3, #4]
 80046ac:	4408      	add	r0, r1
}
 80046ae:	4770      	bx	lr

080046b0 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 80046b0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80046b4:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 80046b6:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
 80046b8:	7803      	ldrb	r3, [r0, #0]
 80046ba:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80046bc:	bf01      	itttt	eq
 80046be:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80046c0:	750a      	strbeq	r2, [r1, #20]
 80046c2:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 80046c4:	754a      	strbeq	r2, [r1, #21]
	}
}
 80046c6:	4770      	bx	lr

080046c8 <sum_sfn>:
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
 80046c8:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 80046cc:	2200      	movs	r2, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80046ce:	01d3      	lsls	r3, r2, #7
 80046d0:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 80046d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046d8:	fa52 f383 	uxtab	r3, r2, r3
	} while (--n);
 80046dc:	4288      	cmp	r0, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80046de:	b2da      	uxtb	r2, r3
	} while (--n);
 80046e0:	d1f5      	bne.n	80046ce <sum_sfn+0x6>
	return sum;
}
 80046e2:	4610      	mov	r0, r2
 80046e4:	4770      	bx	lr

080046e6 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80046e6:	6803      	ldr	r3, [r0, #0]
{
 80046e8:	4601      	mov	r1, r0
 80046ea:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80046ec:	b153      	cbz	r3, 8004704 <get_ldnumber+0x1e>
 80046ee:	4618      	mov	r0, r3
 80046f0:	4602      	mov	r2, r0
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80046f2:	f810 4b01 	ldrb.w	r4, [r0], #1
 80046f6:	2c1f      	cmp	r4, #31
 80046f8:	d910      	bls.n	800471c <get_ldnumber+0x36>
 80046fa:	2c3a      	cmp	r4, #58	; 0x3a
 80046fc:	d1f8      	bne.n	80046f0 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 80046fe:	1c58      	adds	r0, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004700:	4282      	cmp	r2, r0
 8004702:	d002      	beq.n	800470a <get_ldnumber+0x24>
	int vol = -1;
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	e007      	b.n	800471a <get_ldnumber+0x34>
			i = *tp++ - '0';
 800470a:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800470c:	3b30      	subs	r3, #48	; 0x30
 800470e:	b2d8      	uxtb	r0, r3
 8004710:	2801      	cmp	r0, #1
 8004712:	d8f7      	bhi.n	8004704 <get_ldnumber+0x1e>
					vol = (int)i;
					*path = ++tt;
 8004714:	3201      	adds	r2, #1
			i = *tp++ - '0';
 8004716:	4618      	mov	r0, r3
					*path = ++tt;
 8004718:	600a      	str	r2, [r1, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 800471a:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 800471c:	2000      	movs	r0, #0
 800471e:	e7fc      	b.n	800471a <get_ldnumber+0x34>

08004720 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004724:	4604      	mov	r4, r0
 8004726:	b918      	cbnz	r0, 8004730 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8004728:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800472a:	2300      	movs	r3, #0
 800472c:	602b      	str	r3, [r5, #0]
	return res;
}
 800472e:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004730:	6803      	ldr	r3, [r0, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f8      	beq.n	8004728 <validate+0x8>
 8004736:	781a      	ldrb	r2, [r3, #0]
 8004738:	2a00      	cmp	r2, #0
 800473a:	d0f5      	beq.n	8004728 <validate+0x8>
 800473c:	8881      	ldrh	r1, [r0, #4]
 800473e:	88da      	ldrh	r2, [r3, #6]
 8004740:	4291      	cmp	r1, r2
 8004742:	d1f1      	bne.n	8004728 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004744:	7858      	ldrb	r0, [r3, #1]
 8004746:	f7ff fe99 	bl	800447c <disk_status>
 800474a:	f010 0001 	ands.w	r0, r0, #1
 800474e:	d1eb      	bne.n	8004728 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	e7eb      	b.n	800472c <validate+0xc>

08004754 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004754:	3801      	subs	r0, #1
 8004756:	440a      	add	r2, r1
			*d++ = *s++;
 8004758:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800475c:	4291      	cmp	r1, r2
			*d++ = *s++;
 800475e:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8004762:	d1f9      	bne.n	8004758 <mem_cpy.part.0+0x4>
}
 8004764:	4770      	bx	lr

08004766 <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 800476a:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800476c:	f100 0834 	add.w	r8, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004770:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004772:	2301      	movs	r3, #1
 8004774:	4632      	mov	r2, r6
 8004776:	4641      	mov	r1, r8
 8004778:	7840      	ldrb	r0, [r0, #1]
 800477a:	f7ff fea7 	bl	80044cc <disk_write>
 800477e:	4605      	mov	r5, r0
 8004780:	b9a8      	cbnz	r0, 80047ae <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004784:	69e2      	ldr	r2, [r4, #28]
 8004786:	1af3      	subs	r3, r6, r3
			fs->wflag = 0;
 8004788:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800478a:	4293      	cmp	r3, r2
 800478c:	d202      	bcs.n	8004794 <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800478e:	78a7      	ldrb	r7, [r4, #2]
 8004790:	2f01      	cmp	r7, #1
 8004792:	d802      	bhi.n	800479a <sync_window.part.0+0x34>
}
 8004794:	4628      	mov	r0, r5
 8004796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
 800479a:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800479c:	4641      	mov	r1, r8
 800479e:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80047a0:	3f01      	subs	r7, #1
					wsect += fs->fsize;
 80047a2:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80047a4:	2301      	movs	r3, #1
 80047a6:	4632      	mov	r2, r6
 80047a8:	f7ff fe90 	bl	80044cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80047ac:	e7f0      	b.n	8004790 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
 80047ae:	2501      	movs	r5, #1
 80047b0:	e7f0      	b.n	8004794 <sync_window.part.0+0x2e>

080047b2 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80047b2:	78c3      	ldrb	r3, [r0, #3]
 80047b4:	b10b      	cbz	r3, 80047ba <sync_window+0x8>
 80047b6:	f7ff bfd6 	b.w	8004766 <sync_window.part.0>
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	4770      	bx	lr

080047be <move_window>:
{
 80047be:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80047c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 80047c2:	4605      	mov	r5, r0
 80047c4:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80047c6:	428b      	cmp	r3, r1
 80047c8:	d010      	beq.n	80047ec <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 80047ca:	f7ff fff2 	bl	80047b2 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80047ce:	b960      	cbnz	r0, 80047ea <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80047d0:	4622      	mov	r2, r4
 80047d2:	2301      	movs	r3, #1
 80047d4:	f105 0134 	add.w	r1, r5, #52	; 0x34
 80047d8:	7868      	ldrb	r0, [r5, #1]
 80047da:	f7ff fe69 	bl	80044b0 <disk_read>
				res = FR_DISK_ERR;
 80047de:	2800      	cmp	r0, #0
 80047e0:	bf1c      	itt	ne
 80047e2:	f04f 34ff 	movne.w	r4, #4294967295
 80047e6:	2001      	movne	r0, #1
			fs->winsect = sector;
 80047e8:	632c      	str	r4, [r5, #48]	; 0x30
}
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 80047ec:	2000      	movs	r0, #0
 80047ee:	e7fc      	b.n	80047ea <move_window+0x2c>

080047f0 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80047f0:	2300      	movs	r3, #0
{
 80047f2:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80047f4:	70c3      	strb	r3, [r0, #3]
 80047f6:	f04f 33ff 	mov.w	r3, #4294967295
{
 80047fa:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80047fc:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80047fe:	f7ff ffde 	bl	80047be <move_window>
 8004802:	4603      	mov	r3, r0
 8004804:	bb18      	cbnz	r0, 800484e <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004806:	f8b4 1232 	ldrh.w	r1, [r4, #562]	; 0x232
 800480a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800480e:	4291      	cmp	r1, r2
 8004810:	d11f      	bne.n	8004852 <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004812:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8004816:	2ae9      	cmp	r2, #233	; 0xe9
 8004818:	d005      	beq.n	8004826 <check_fs+0x36>
 800481a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800481c:	490f      	ldr	r1, [pc, #60]	; (800485c <check_fs+0x6c>)
 800481e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8004822:	428a      	cmp	r2, r1
 8004824:	d117      	bne.n	8004856 <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004826:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800482a:	4a0d      	ldr	r2, [pc, #52]	; (8004860 <check_fs+0x70>)
 800482c:	f7ff fe6c 	bl	8004508 <ld_dword>
 8004830:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004834:	4290      	cmp	r0, r2
 8004836:	d008      	beq.n	800484a <check_fs+0x5a>
	return 2;
 8004838:	f102 524c 	add.w	r2, r2, #855638016	; 0x33000000
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800483c:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8004840:	f7ff fe62 	bl	8004508 <ld_dword>
	return 2;
 8004844:	4290      	cmp	r0, r2
 8004846:	bf18      	it	ne
 8004848:	2302      	movne	r3, #2
}
 800484a:	4618      	mov	r0, r3
 800484c:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800484e:	2304      	movs	r3, #4
 8004850:	e7fb      	b.n	800484a <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004852:	2303      	movs	r3, #3
 8004854:	e7f9      	b.n	800484a <check_fs+0x5a>
	return 2;
 8004856:	2302      	movs	r3, #2
 8004858:	e7f7      	b.n	800484a <check_fs+0x5a>
 800485a:	bf00      	nop
 800485c:	009000eb 	.word	0x009000eb
 8004860:	00544146 	.word	0x00544146

08004864 <find_volume>:
{
 8004864:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8004868:	2300      	movs	r3, #0
{
 800486a:	4688      	mov	r8, r1
 800486c:	4615      	mov	r5, r2
	*rfs = 0;
 800486e:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8004870:	f7ff ff39 	bl	80046e6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004874:	1e07      	subs	r7, r0, #0
 8004876:	f2c0 8116 	blt.w	8004aa6 <find_volume+0x242>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800487a:	4e8e      	ldr	r6, [pc, #568]	; (8004ab4 <find_volume+0x250>)
 800487c:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 8004880:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004882:	2c00      	cmp	r4, #0
 8004884:	f000 8111 	beq.w	8004aaa <find_volume+0x246>
	*rfs = fs;							/* Return pointer to the file system object */
 8004888:	f8c8 4000 	str.w	r4, [r8]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800488c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004890:	7823      	ldrb	r3, [r4, #0]
 8004892:	b16b      	cbz	r3, 80048b0 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8004894:	7860      	ldrb	r0, [r4, #1]
 8004896:	f7ff fdf1 	bl	800447c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800489a:	07c1      	lsls	r1, r0, #31
 800489c:	d408      	bmi.n	80048b0 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800489e:	b11d      	cbz	r5, 80048a8 <find_volume+0x44>
 80048a0:	f010 0504 	ands.w	r5, r0, #4
 80048a4:	d000      	beq.n	80048a8 <find_volume+0x44>
				return FR_WRITE_PROTECTED;
 80048a6:	250a      	movs	r5, #10
}
 80048a8:	4628      	mov	r0, r5
 80048aa:	b004      	add	sp, #16
 80048ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80048b0:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80048b2:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
 80048b4:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80048b6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80048b8:	f7ff fdea 	bl	8004490 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80048bc:	07c2      	lsls	r2, r0, #31
 80048be:	f100 80f6 	bmi.w	8004aae <find_volume+0x24a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80048c2:	b10d      	cbz	r5, 80048c8 <find_volume+0x64>
 80048c4:	0743      	lsls	r3, r0, #29
 80048c6:	d4ee      	bmi.n	80048a6 <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80048c8:	2100      	movs	r1, #0
 80048ca:	4620      	mov	r0, r4
 80048cc:	f7ff ff90 	bl	80047f0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80048d0:	2802      	cmp	r0, #2
 80048d2:	f040 80ce 	bne.w	8004a72 <find_volume+0x20e>
 80048d6:	466d      	mov	r5, sp
 80048d8:	f504 73fd 	add.w	r3, r4, #506	; 0x1fa
 80048dc:	f204 213a 	addw	r1, r4, #570	; 0x23a
 80048e0:	462a      	mov	r2, r5
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80048e2:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 80048e6:	b110      	cbz	r0, 80048ee <find_volume+0x8a>
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fe0d 	bl	8004508 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80048ee:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80048f0:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80048f4:	428b      	cmp	r3, r1
 80048f6:	d1f4      	bne.n	80048e2 <find_volume+0x7e>
 80048f8:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
 80048fc:	f855 7b04 	ldr.w	r7, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004900:	2f00      	cmp	r7, #0
 8004902:	f000 80ab 	beq.w	8004a5c <find_volume+0x1f8>
 8004906:	4639      	mov	r1, r7
 8004908:	4620      	mov	r0, r4
 800490a:	f7ff ff71 	bl	80047f0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800490e:	2801      	cmp	r0, #1
 8004910:	f200 80a5 	bhi.w	8004a5e <find_volume+0x1fa>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004914:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
 8004918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800491c:	f040 80ad 	bne.w	8004a7a <find_volume+0x216>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004920:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004924:	b921      	cbnz	r1, 8004930 <find_volume+0xcc>
 8004926:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800492a:	f7ff fded 	bl	8004508 <ld_dword>
 800492e:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004930:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8004934:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004936:	1e5a      	subs	r2, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004938:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800493a:	2a01      	cmp	r2, #1
 800493c:	f200 809d 	bhi.w	8004a7a <find_volume+0x216>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004940:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8004944:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004946:	2d00      	cmp	r5, #0
 8004948:	f000 8097 	beq.w	8004a7a <find_volume+0x216>
 800494c:	1e6a      	subs	r2, r5, #1
 800494e:	422a      	tst	r2, r5
 8004950:	f040 8093 	bne.w	8004a7a <find_volume+0x216>
	rv = ptr[1];
 8004954:	f8b4 8045 	ldrh.w	r8, [r4, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004958:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800495c:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004960:	f040 808b 	bne.w	8004a7a <find_volume+0x216>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004964:	f8b4 0047 	ldrh.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004968:	b918      	cbnz	r0, 8004972 <find_volume+0x10e>
 800496a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800496e:	f7ff fdcb 	bl	8004508 <ld_dword>
	rv = ptr[1];
 8004972:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004976:	2a00      	cmp	r2, #0
 8004978:	d07f      	beq.n	8004a7a <find_volume+0x216>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800497a:	fb01 fe03 	mul.w	lr, r1, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800497e:	eb02 1c18 	add.w	ip, r2, r8, lsr #4
 8004982:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004984:	4560      	cmp	r0, ip
 8004986:	d378      	bcc.n	8004a7a <find_volume+0x216>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004988:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800498c:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800498e:	fbb0 f3f5 	udiv	r3, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004992:	d372      	bcc.n	8004a7a <find_volume+0x216>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004994:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8004998:	4283      	cmp	r3, r0
 800499a:	d872      	bhi.n	8004a82 <find_volume+0x21e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800499c:	f640 75f5 	movw	r5, #4085	; 0xff5
 80049a0:	42ab      	cmp	r3, r5
 80049a2:	bf8c      	ite	hi
 80049a4:	2502      	movhi	r5, #2
 80049a6:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80049a8:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80049aa:	443a      	add	r2, r7
		fs->database = bsect + sysect;					/* Data start sector */
 80049ac:	eb0c 0007 	add.w	r0, ip, r7
		if (fmt == FS_FAT32) {
 80049b0:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80049b2:	61a3      	str	r3, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80049b4:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80049b6:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80049b8:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80049ba:	d164      	bne.n	8004a86 <find_volume+0x222>
	rv = rv << 8 | ptr[0];
 80049bc:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80049c0:	ea52 0208 	orrs.w	r2, r2, r8
 80049c4:	d159      	bne.n	8004a7a <find_volume+0x216>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80049c6:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80049c8:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80049cc:	f7ff fd9c 	bl	8004508 <ld_dword>
 80049d0:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80049d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80049d6:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80049da:	d34e      	bcc.n	8004a7a <find_volume+0x216>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80049dc:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80049e0:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80049e2:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 80049e6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80049ea:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80049ec:	d12b      	bne.n	8004a46 <find_volume+0x1e2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80049ee:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d127      	bne.n	8004a46 <find_volume+0x1e2>
			&& move_window(fs, bsect + 1) == FR_OK)
 80049f6:	1c79      	adds	r1, r7, #1
 80049f8:	4620      	mov	r0, r4
 80049fa:	f7ff fee0 	bl	80047be <move_window>
 80049fe:	bb10      	cbnz	r0, 8004a46 <find_volume+0x1e2>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004a00:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 8004a04:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
 8004a08:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d11b      	bne.n	8004a46 <find_volume+0x1e2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004a0e:	4b2a      	ldr	r3, [pc, #168]	; (8004ab8 <find_volume+0x254>)
 8004a10:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8004a14:	f7ff fd78 	bl	8004508 <ld_dword>
 8004a18:	4298      	cmp	r0, r3
 8004a1a:	d114      	bne.n	8004a46 <find_volume+0x1e2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004a1c:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8004a20:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8004a24:	f7ff fd70 	bl	8004508 <ld_dword>
 8004a28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004a2c:	3320      	adds	r3, #32
 8004a2e:	4298      	cmp	r0, r3
 8004a30:	d109      	bne.n	8004a46 <find_volume+0x1e2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004a32:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8004a36:	f7ff fd67 	bl	8004508 <ld_dword>
 8004a3a:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004a3c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8004a40:	f7ff fd62 	bl	8004508 <ld_dword>
 8004a44:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8004a46:	8d33      	ldrh	r3, [r6, #40]	; 0x28
	clear_lock(fs);
 8004a48:	4620      	mov	r0, r4
	fs->fs_type = fmt;		/* FAT sub-type */
 8004a4a:	7025      	strb	r5, [r4, #0]
	return FR_OK;
 8004a4c:	2500      	movs	r5, #0
	fs->id = ++Fsid;		/* File system mount ID */
 8004a4e:	3301      	adds	r3, #1
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	80e3      	strh	r3, [r4, #6]
 8004a54:	8533      	strh	r3, [r6, #40]	; 0x28
	clear_lock(fs);
 8004a56:	f7ff fe01 	bl	800465c <clear_lock>
	return FR_OK;
 8004a5a:	e725      	b.n	80048a8 <find_volume+0x44>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004a5c:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004a5e:	f108 0801 	add.w	r8, r8, #1
 8004a62:	f1b8 0f04 	cmp.w	r8, #4
 8004a66:	f47f af49 	bne.w	80048fc <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004a6a:	2804      	cmp	r0, #4
 8004a6c:	d105      	bne.n	8004a7a <find_volume+0x216>
 8004a6e:	2501      	movs	r5, #1
 8004a70:	e71a      	b.n	80048a8 <find_volume+0x44>
 8004a72:	2804      	cmp	r0, #4
 8004a74:	d0fb      	beq.n	8004a6e <find_volume+0x20a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004a76:	2801      	cmp	r0, #1
 8004a78:	d901      	bls.n	8004a7e <find_volume+0x21a>
 8004a7a:	250d      	movs	r5, #13
 8004a7c:	e714      	b.n	80048a8 <find_volume+0x44>
	bsect = 0;
 8004a7e:	2700      	movs	r7, #0
 8004a80:	e748      	b.n	8004914 <find_volume+0xb0>
		fmt = FS_FAT32;
 8004a82:	2503      	movs	r5, #3
 8004a84:	e790      	b.n	80049a8 <find_volume+0x144>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004a86:	f1b8 0f00 	cmp.w	r8, #0
 8004a8a:	d0f6      	beq.n	8004a7a <find_volume+0x216>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004a8c:	4472      	add	r2, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004a8e:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004a90:	62a2      	str	r2, [r4, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004a92:	ea4f 0243 	mov.w	r2, r3, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004a96:	bf1b      	ittet	ne
 8004a98:	18d2      	addne	r2, r2, r3
 8004a9a:	f003 0301 	andne.w	r3, r3, #1
 8004a9e:	4613      	moveq	r3, r2
 8004aa0:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8004aa4:	e795      	b.n	80049d2 <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004aa6:	250b      	movs	r5, #11
 8004aa8:	e6fe      	b.n	80048a8 <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004aaa:	250c      	movs	r5, #12
 8004aac:	e6fc      	b.n	80048a8 <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004aae:	2503      	movs	r5, #3
 8004ab0:	e6fa      	b.n	80048a8 <find_volume+0x44>
 8004ab2:	bf00      	nop
 8004ab4:	200014a0 	.word	0x200014a0
 8004ab8:	41615252 	.word	0x41615252

08004abc <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004abc:	2901      	cmp	r1, #1
{
 8004abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004ac8:	d974      	bls.n	8004bb4 <put_fat+0xf8>
 8004aca:	6983      	ldr	r3, [r0, #24]
 8004acc:	428b      	cmp	r3, r1
 8004ace:	d971      	bls.n	8004bb4 <put_fat+0xf8>
		switch (fs->fs_type) {
 8004ad0:	7803      	ldrb	r3, [r0, #0]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d040      	beq.n	8004b58 <put_fat+0x9c>
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d051      	beq.n	8004b7e <put_fat+0xc2>
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d16a      	bne.n	8004bb4 <put_fat+0xf8>
			bc = (UINT)clst; bc += bc / 2;
 8004ade:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ae2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004ae4:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004ae8:	f7ff fe69 	bl	80047be <move_window>
 8004aec:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 8004aee:	bb40      	cbnz	r0, 8004b42 <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004af0:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 8004af4:	f106 0934 	add.w	r9, r6, #52	; 0x34
 8004af8:	f108 0a01 	add.w	sl, r8, #1
 8004afc:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004b00:	bf08      	it	eq
 8004b02:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b04:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004b06:	bf1f      	itttt	ne
 8004b08:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8004b0c:	f003 020f 	andne.w	r2, r3, #15
 8004b10:	013b      	lslne	r3, r7, #4
 8004b12:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8004b16:	bf18      	it	ne
 8004b18:	4313      	orrne	r3, r2
 8004b1a:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8004b1e:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b20:	6a71      	ldr	r1, [r6, #36]	; 0x24
			fs->wflag = 1;
 8004b22:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b24:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8004b28:	f7ff fe49 	bl	80047be <move_window>
			if (res != FR_OK) break;
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	b940      	cbnz	r0, 8004b42 <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 8004b30:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b34:	b144      	cbz	r4, 8004b48 <put_fat+0x8c>
 8004b36:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8004b3a:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	70f3      	strb	r3, [r6, #3]
}
 8004b42:	4628      	mov	r0, r5
 8004b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b48:	f819 300a 	ldrb.w	r3, [r9, sl]
 8004b4c:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8004b50:	f023 030f 	bic.w	r3, r3, #15
 8004b54:	431f      	orrs	r7, r3
 8004b56:	e7f0      	b.n	8004b3a <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b58:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004b5a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004b5e:	f7ff fe2e 	bl	80047be <move_window>
			if (res != FR_OK) break;
 8004b62:	4605      	mov	r5, r0
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d1ec      	bne.n	8004b42 <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b68:	0064      	lsls	r4, r4, #1
 8004b6a:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8004b6e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8004b72:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b74:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8004b76:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8004b7a:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 8004b7c:	e7df      	b.n	8004b3e <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b7e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004b80:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004b84:	f7ff fe1b 	bl	80047be <move_window>
			if (res != FR_OK) break;
 8004b88:	4605      	mov	r5, r0
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d1d9      	bne.n	8004b42 <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004b8e:	00a4      	lsls	r4, r4, #2
 8004b90:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8004b94:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8004b98:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004b9c:	441c      	add	r4, r3
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f7ff fcb2 	bl	8004508 <ld_dword>
 8004ba4:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004ba8:	ea47 0100 	orr.w	r1, r7, r0
 8004bac:	4620      	mov	r0, r4
 8004bae:	f7ff fcad 	bl	800450c <st_dword>
 8004bb2:	e7c4      	b.n	8004b3e <put_fat+0x82>
		switch (fs->fs_type) {
 8004bb4:	2502      	movs	r5, #2
 8004bb6:	e7c4      	b.n	8004b42 <put_fat+0x86>

08004bb8 <sync_fs>:
{
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	4604      	mov	r4, r0
	res = sync_window(fs);
 8004bbc:	f7ff fdf9 	bl	80047b2 <sync_window>
 8004bc0:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d142      	bne.n	8004c4c <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004bc6:	7823      	ldrb	r3, [r4, #0]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d137      	bne.n	8004c3c <sync_fs+0x84>
 8004bcc:	7927      	ldrb	r7, [r4, #4]
 8004bce:	2f01      	cmp	r7, #1
 8004bd0:	d134      	bne.n	8004c3c <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8004bd2:	f104 0634 	add.w	r6, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8004bd6:	2355      	movs	r3, #85	; 0x55
			mem_set(fs->win, 0, SS(fs));
 8004bd8:	4601      	mov	r1, r0
 8004bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bde:	4630      	mov	r0, r6
 8004be0:	f7ff fc9c 	bl	800451c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004be4:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8004be8:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
 8004bea:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004bec:	2172      	movs	r1, #114	; 0x72
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004bee:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
 8004bf2:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8004bf6:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8004bf8:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8004bfc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8004c00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8004c04:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 8004c06:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8004c0a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8004c0e:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 8004c12:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
	*ptr++ = (BYTE)val; val >>= 8;
 8004c16:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004c1a:	6961      	ldr	r1, [r4, #20]
 8004c1c:	f7ff fc76 	bl	800450c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004c20:	6921      	ldr	r1, [r4, #16]
 8004c22:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8004c26:	f7ff fc71 	bl	800450c <st_dword>
			fs->winsect = fs->volbase + 1;
 8004c2a:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004c2c:	463b      	mov	r3, r7
 8004c2e:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 8004c30:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004c32:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8004c34:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004c36:	f7ff fc49 	bl	80044cc <disk_write>
			fs->fsi_flag = 0;
 8004c3a:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	7860      	ldrb	r0, [r4, #1]
 8004c40:	4611      	mov	r1, r2
 8004c42:	f7ff fc51 	bl	80044e8 <disk_ioctl>
	res = sync_window(fs);
 8004c46:	3800      	subs	r0, #0
 8004c48:	bf18      	it	ne
 8004c4a:	2001      	movne	r0, #1
}
 8004c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c4e <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8004c4e:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8004c50:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004c52:	bf04      	itt	eq
 8004c54:	8a8a      	ldrheq	r2, [r1, #20]
 8004c56:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	4770      	bx	lr

08004c5e <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004c5e:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	4606      	mov	r6, r0
 8004c64:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004c66:	d94e      	bls.n	8004d06 <get_fat.isra.0+0xa8>
 8004c68:	6983      	ldr	r3, [r0, #24]
 8004c6a:	4299      	cmp	r1, r3
 8004c6c:	d24b      	bcs.n	8004d06 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 8004c6e:	7803      	ldrb	r3, [r0, #0]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d029      	beq.n	8004cc8 <get_fat.isra.0+0x6a>
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d034      	beq.n	8004ce2 <get_fat.isra.0+0x84>
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d144      	bne.n	8004d06 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 8004c7c:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c80:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004c82:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8004c86:	f7ff fd9a 	bl	80047be <move_window>
 8004c8a:	b110      	cbz	r0, 8004c92 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8004c92:	1c6f      	adds	r7, r5, #1
 8004c94:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c98:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8004c9a:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 8004c9c:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c9e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8004ca2:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ca6:	f7ff fd8a 	bl	80047be <move_window>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d1ee      	bne.n	8004c8c <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004cae:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004cb2:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8004cb4:	443e      	add	r6, r7
 8004cb6:	f896 0034 	ldrb.w	r0, [r6, #52]	; 0x34
 8004cba:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004cbe:	bf4c      	ite	mi
 8004cc0:	0900      	lsrmi	r0, r0, #4
 8004cc2:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004cc6:	e7e3      	b.n	8004c90 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004cc8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004cca:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004cce:	f7ff fd76 	bl	80047be <move_window>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d1da      	bne.n	8004c8c <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004cd6:	0064      	lsls	r4, r4, #1
 8004cd8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8004cdc:	4426      	add	r6, r4
 8004cde:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
			break;
 8004ce0:	e7d6      	b.n	8004c90 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ce2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004ce4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004ce8:	f7ff fd69 	bl	80047be <move_window>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d1cd      	bne.n	8004c8c <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004cf0:	00a4      	lsls	r4, r4, #2
 8004cf2:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8004cf6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004cfa:	4420      	add	r0, r4
 8004cfc:	f7ff fc04 	bl	8004508 <ld_dword>
 8004d00:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8004d04:	e7c4      	b.n	8004c90 <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 8004d06:	2001      	movs	r0, #1
	return val;
 8004d08:	e7c2      	b.n	8004c90 <get_fat.isra.0+0x32>

08004d0a <remove_chain>:
{
 8004d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	4606      	mov	r6, r0
 8004d10:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
 8004d12:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004d14:	2c01      	cmp	r4, #1
 8004d16:	d92c      	bls.n	8004d72 <remove_chain+0x68>
 8004d18:	69ab      	ldr	r3, [r5, #24]
 8004d1a:	42a3      	cmp	r3, r4
 8004d1c:	d929      	bls.n	8004d72 <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004d1e:	b12a      	cbz	r2, 8004d2c <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004d20:	f04f 32ff 	mov.w	r2, #4294967295
 8004d24:	4628      	mov	r0, r5
 8004d26:	f7ff fec9 	bl	8004abc <put_fat>
		if (res != FR_OK) return res;
 8004d2a:	b940      	cbnz	r0, 8004d3e <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	6830      	ldr	r0, [r6, #0]
 8004d30:	9401      	str	r4, [sp, #4]
 8004d32:	f7ff ff94 	bl	8004c5e <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004d36:	9901      	ldr	r1, [sp, #4]
 8004d38:	4604      	mov	r4, r0
 8004d3a:	b910      	cbnz	r0, 8004d42 <remove_chain+0x38>
	return FR_OK;
 8004d3c:	2000      	movs	r0, #0
}
 8004d3e:	b002      	add	sp, #8
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004d42:	2801      	cmp	r0, #1
 8004d44:	d015      	beq.n	8004d72 <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004d46:	1c43      	adds	r3, r0, #1
 8004d48:	d015      	beq.n	8004d76 <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f7ff feb5 	bl	8004abc <put_fat>
			if (res != FR_OK) return res;
 8004d52:	2800      	cmp	r0, #0
 8004d54:	d1f3      	bne.n	8004d3e <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004d56:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8004d5a:	1e91      	subs	r1, r2, #2
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	d205      	bcs.n	8004d6c <remove_chain+0x62>
			fs->free_clst++;
 8004d60:	3301      	adds	r3, #1
 8004d62:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8004d64:	792b      	ldrb	r3, [r5, #4]
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004d6c:	42a2      	cmp	r2, r4
 8004d6e:	d8dd      	bhi.n	8004d2c <remove_chain+0x22>
 8004d70:	e7e4      	b.n	8004d3c <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004d72:	2002      	movs	r0, #2
 8004d74:	e7e3      	b.n	8004d3e <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004d76:	2001      	movs	r0, #1
 8004d78:	e7e1      	b.n	8004d3e <remove_chain+0x34>

08004d7a <create_chain>:
{
 8004d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d7e:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8004d80:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8004d82:	460f      	mov	r7, r1
 8004d84:	b971      	cbnz	r1, 8004da4 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004d86:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004d88:	b1ee      	cbz	r6, 8004dc6 <create_chain+0x4c>
 8004d8a:	69ab      	ldr	r3, [r5, #24]
 8004d8c:	42b3      	cmp	r3, r6
 8004d8e:	bf98      	it	ls
 8004d90:	2601      	movls	r6, #1
		ncl = scl;	/* Start cluster */
 8004d92:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8004d94:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004d96:	69ab      	ldr	r3, [r5, #24]
 8004d98:	42a3      	cmp	r3, r4
 8004d9a:	d817      	bhi.n	8004dcc <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 8004d9c:	2e01      	cmp	r6, #1
 8004d9e:	d814      	bhi.n	8004dca <create_chain+0x50>
 8004da0:	2400      	movs	r4, #0
 8004da2:	e006      	b.n	8004db2 <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004da4:	4628      	mov	r0, r5
 8004da6:	f7ff ff5a 	bl	8004c5e <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004daa:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004dac:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004dae:	d803      	bhi.n	8004db8 <create_chain+0x3e>
 8004db0:	2401      	movs	r4, #1
}
 8004db2:	4620      	mov	r0, r4
 8004db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d030      	beq.n	8004e1e <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004dbc:	69ab      	ldr	r3, [r5, #24]
 8004dbe:	4283      	cmp	r3, r0
 8004dc0:	d8f7      	bhi.n	8004db2 <create_chain+0x38>
 8004dc2:	463e      	mov	r6, r7
 8004dc4:	e7e5      	b.n	8004d92 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004dc6:	2601      	movs	r6, #1
 8004dc8:	e7e3      	b.n	8004d92 <create_chain+0x18>
				ncl = 2;
 8004dca:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004dcc:	4621      	mov	r1, r4
 8004dce:	f8d8 0000 	ldr.w	r0, [r8]
 8004dd2:	f7ff ff44 	bl	8004c5e <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 8004dd6:	b130      	cbz	r0, 8004de6 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004dd8:	2801      	cmp	r0, #1
 8004dda:	d0e9      	beq.n	8004db0 <create_chain+0x36>
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d01e      	beq.n	8004e1e <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 8004de0:	42b4      	cmp	r4, r6
 8004de2:	d1d7      	bne.n	8004d94 <create_chain+0x1a>
 8004de4:	e7dc      	b.n	8004da0 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004de6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dea:	4621      	mov	r1, r4
 8004dec:	4628      	mov	r0, r5
 8004dee:	f7ff fe65 	bl	8004abc <put_fat>
		if (res == FR_OK && clst != 0) {
 8004df2:	b990      	cbnz	r0, 8004e1a <create_chain+0xa0>
 8004df4:	b957      	cbnz	r7, 8004e0c <create_chain+0x92>
		fs->last_clst = ncl;
 8004df6:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004df8:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8004dfc:	3a02      	subs	r2, #2
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d910      	bls.n	8004e24 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8004e02:	792b      	ldrb	r3, [r5, #4]
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	712b      	strb	r3, [r5, #4]
 8004e0a:	e7d2      	b.n	8004db2 <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004e0c:	4622      	mov	r2, r4
 8004e0e:	4639      	mov	r1, r7
 8004e10:	4628      	mov	r0, r5
 8004e12:	f7ff fe53 	bl	8004abc <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d0ed      	beq.n	8004df6 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004e1a:	2801      	cmp	r0, #1
 8004e1c:	d1c8      	bne.n	8004db0 <create_chain+0x36>
 8004e1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004e22:	e7c6      	b.n	8004db2 <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004e24:	3b01      	subs	r3, #1
 8004e26:	616b      	str	r3, [r5, #20]
 8004e28:	e7eb      	b.n	8004e02 <create_chain+0x88>

08004e2a <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004e2a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 8004e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e30:	4606      	mov	r6, r0
 8004e32:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004e34:	d301      	bcc.n	8004e3a <dir_sdi+0x10>
		return FR_INT_ERR;
 8004e36:	2002      	movs	r0, #2
}
 8004e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004e3a:	06ca      	lsls	r2, r1, #27
 8004e3c:	d1fb      	bne.n	8004e36 <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004e3e:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8004e40:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8004e42:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004e44:	b9ca      	cbnz	r2, 8004e7a <dir_sdi+0x50>
 8004e46:	782b      	ldrb	r3, [r5, #0]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <dir_sdi+0x26>
		clst = fs->dirbase;
 8004e4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004e4e:	b99b      	cbnz	r3, 8004e78 <dir_sdi+0x4e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004e50:	892b      	ldrh	r3, [r5, #8]
 8004e52:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8004e56:	d9ee      	bls.n	8004e36 <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 8004e58:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004e5a:	61f3      	str	r3, [r6, #28]
	if (!dp->sect) return FR_INT_ERR;
 8004e5c:	69f3      	ldr	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8004e5e:	61b2      	str	r2, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0e8      	beq.n	8004e36 <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004e64:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004e68:	3534      	adds	r5, #52	; 0x34
 8004e6a:	f3c4 0408 	ubfx	r4, r4, #0, #9
	return FR_OK;
 8004e6e:	2000      	movs	r0, #0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004e70:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004e72:	442c      	add	r4, r5
 8004e74:	6234      	str	r4, [r6, #32]
	return FR_OK;
 8004e76:	e7df      	b.n	8004e38 <dir_sdi+0xe>
 8004e78:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004e7a:	896f      	ldrh	r7, [r5, #10]
 8004e7c:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8004e7e:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004e80:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8004e82:	d204      	bcs.n	8004e8e <dir_sdi+0x64>
		dp->sect = clust2sect(fs, clst);
 8004e84:	4628      	mov	r0, r5
 8004e86:	f7ff fbf7 	bl	8004678 <clust2sect>
 8004e8a:	61f0      	str	r0, [r6, #28]
 8004e8c:	e7e6      	b.n	8004e5c <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004e8e:	6830      	ldr	r0, [r6, #0]
 8004e90:	f7ff fee5 	bl	8004c5e <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e94:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004e96:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e98:	d006      	beq.n	8004ea8 <dir_sdi+0x7e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004e9a:	2801      	cmp	r0, #1
 8004e9c:	d9cb      	bls.n	8004e36 <dir_sdi+0xc>
 8004e9e:	69ab      	ldr	r3, [r5, #24]
 8004ea0:	4283      	cmp	r3, r0
 8004ea2:	d9c8      	bls.n	8004e36 <dir_sdi+0xc>
			ofs -= csz;
 8004ea4:	1be4      	subs	r4, r4, r7
 8004ea6:	e7ea      	b.n	8004e7e <dir_sdi+0x54>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	e7c5      	b.n	8004e38 <dir_sdi+0xe>

08004eac <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004eac:	6943      	ldr	r3, [r0, #20]
{
 8004eae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004eb2:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004eb6:	69c3      	ldr	r3, [r0, #28]
{
 8004eb8:	4605      	mov	r5, r0
 8004eba:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004ebc:	b193      	cbz	r3, 8004ee4 <dir_next+0x38>
 8004ebe:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8004ec2:	d20f      	bcs.n	8004ee4 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004ec4:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8004ec8:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004eca:	f1b9 0f00 	cmp.w	r9, #0
 8004ece:	d14d      	bne.n	8004f6c <dir_next+0xc0>
		dp->sect++;				/* Next sector */
 8004ed0:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8004ed2:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8004ed4:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8004ed6:	b939      	cbnz	r1, 8004ee8 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004ed8:	8923      	ldrh	r3, [r4, #8]
 8004eda:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8004ede:	d845      	bhi.n	8004f6c <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004ee4:	2004      	movs	r0, #4
 8004ee6:	e00b      	b.n	8004f00 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004ee8:	8967      	ldrh	r7, [r4, #10]
 8004eea:	3f01      	subs	r7, #1
 8004eec:	ea17 2758 	ands.w	r7, r7, r8, lsr #9
 8004ef0:	d13c      	bne.n	8004f6c <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f7ff feb3 	bl	8004c5e <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004ef8:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004efa:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004efc:	d802      	bhi.n	8004f04 <dir_next+0x58>
 8004efe:	2002      	movs	r0, #2
}
 8004f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004f04:	1c42      	adds	r2, r0, #1
 8004f06:	d101      	bne.n	8004f0c <dir_next+0x60>
 8004f08:	2001      	movs	r0, #1
 8004f0a:	e7f9      	b.n	8004f00 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004f0c:	69a3      	ldr	r3, [r4, #24]
 8004f0e:	4283      	cmp	r3, r0
 8004f10:	d826      	bhi.n	8004f60 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 8004f12:	f1ba 0f00 	cmp.w	sl, #0
 8004f16:	d0e3      	beq.n	8004ee0 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004f18:	69a9      	ldr	r1, [r5, #24]
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f7ff ff2d 	bl	8004d7a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004f20:	4606      	mov	r6, r0
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d035      	beq.n	8004f92 <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004f26:	2801      	cmp	r0, #1
 8004f28:	d0e9      	beq.n	8004efe <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004f2a:	1c43      	adds	r3, r0, #1
 8004f2c:	d0ec      	beq.n	8004f08 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f7ff fc3f 	bl	80047b2 <sync_window>
 8004f34:	4601      	mov	r1, r0
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d1e6      	bne.n	8004f08 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004f3a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8004f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
						fs->wflag = 1;
 8004f42:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004f46:	f7ff fae9 	bl	800451c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f7ff fb93 	bl	8004678 <clust2sect>
 8004f52:	6320      	str	r0, [r4, #48]	; 0x30
 8004f54:	8963      	ldrh	r3, [r4, #10]
 8004f56:	429f      	cmp	r7, r3
 8004f58:	d30f      	bcc.n	8004f7a <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 8004f5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f5c:	1bdb      	subs	r3, r3, r7
 8004f5e:	6323      	str	r3, [r4, #48]	; 0x30
				dp->sect = clust2sect(fs, clst);
 8004f60:	4631      	mov	r1, r6
 8004f62:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 8004f64:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8004f66:	f7ff fb87 	bl	8004678 <clust2sect>
 8004f6a:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f6c:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
 8004f6e:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8004f70:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f74:	444c      	add	r4, r9
 8004f76:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8004f78:	e7c2      	b.n	8004f00 <dir_next+0x54>
						fs->wflag = 1;
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004f80:	f7ff fbf1 	bl	8004766 <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d1bf      	bne.n	8004f08 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f8a:	3701      	adds	r7, #1
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8004f90:	e7e0      	b.n	8004f54 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004f92:	2007      	movs	r0, #7
 8004f94:	e7b4      	b.n	8004f00 <dir_next+0x54>
	...

08004f98 <dir_find>:
{
 8004f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004f9c:	2100      	movs	r1, #0
{
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8004fa2:	f8d0 b000 	ldr.w	fp, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004fa6:	f7ff ff40 	bl	8004e2a <dir_sdi>
	if (res != FR_OK) return res;
 8004faa:	4606      	mov	r6, r0
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f040 8098 	bne.w	80050e2 <dir_find+0x14a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004fb2:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8004fb6:	f04f 3aff 	mov.w	sl, #4294967295
 8004fba:	46c1      	mov	r9, r8
 8004fbc:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
		res = move_window(fs, dp->sect);
 8004fc0:	69e1      	ldr	r1, [r4, #28]
 8004fc2:	4658      	mov	r0, fp
 8004fc4:	f7ff fbfb 	bl	80047be <move_window>
		if (res != FR_OK) break;
 8004fc8:	4606      	mov	r6, r0
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	f040 8089 	bne.w	80050e2 <dir_find+0x14a>
		c = dp->dir[DIR_Name];
 8004fd0:	6a25      	ldr	r5, [r4, #32]
 8004fd2:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004fd4:	2f00      	cmp	r7, #0
 8004fd6:	f000 8088 	beq.w	80050ea <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004fda:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004fdc:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004fde:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8004fe2:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004fe4:	d003      	beq.n	8004fee <dir_find+0x56>
 8004fe6:	0710      	lsls	r0, r2, #28
 8004fe8:	d504      	bpl.n	8004ff4 <dir_find+0x5c>
 8004fea:	2b0f      	cmp	r3, #15
 8004fec:	d004      	beq.n	8004ff8 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004fee:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
 8004ff2:	e050      	b.n	8005096 <dir_find+0xfe>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004ff4:	2b0f      	cmp	r3, #15
 8004ff6:	d156      	bne.n	80050a6 <dir_find+0x10e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004ff8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8004ffc:	0659      	lsls	r1, r3, #25
 8004ffe:	d440      	bmi.n	8005082 <dir_find+0xea>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005000:	067a      	lsls	r2, r7, #25
 8005002:	d546      	bpl.n	8005092 <dir_find+0xfa>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005004:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005006:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800500a:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800500e:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005010:	7b6b      	ldrb	r3, [r5, #13]
 8005012:	4543      	cmp	r3, r8
 8005014:	d13f      	bne.n	8005096 <dir_find+0xfe>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005016:	8b6b      	ldrh	r3, [r5, #26]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d13c      	bne.n	8005096 <dir_find+0xfe>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800501c:	782e      	ldrb	r6, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800501e:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005020:	f8db 300c 	ldr.w	r3, [fp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005024:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8005028:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80050f4 <dir_find+0x15c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800502c:	9300      	str	r3, [sp, #0]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800502e:	230d      	movs	r3, #13
 8005030:	3e01      	subs	r6, #1
 8005032:	435e      	muls	r6, r3
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005034:	f819 3b01 	ldrb.w	r3, [r9], #1
	rv = ptr[1];
 8005038:	5aeb      	ldrh	r3, [r5, r3]
		if (wc) {
 800503a:	b37a      	cbz	r2, 800509c <dir_find+0x104>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800503c:	2efe      	cmp	r6, #254	; 0xfe
 800503e:	d82a      	bhi.n	8005096 <dir_find+0xfe>
 8005040:	4618      	mov	r0, r3
 8005042:	9303      	str	r3, [sp, #12]
 8005044:	f000 fdcc 	bl	8005be0 <ff_wtoupper>
 8005048:	9b00      	ldr	r3, [sp, #0]
 800504a:	1c71      	adds	r1, r6, #1
 800504c:	9002      	str	r0, [sp, #8]
 800504e:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 8005052:	9101      	str	r1, [sp, #4]
 8005054:	f000 fdc4 	bl	8005be0 <ff_wtoupper>
 8005058:	9a02      	ldr	r2, [sp, #8]
 800505a:	4282      	cmp	r2, r0
 800505c:	d11b      	bne.n	8005096 <dir_find+0xfe>
 800505e:	9b03      	ldr	r3, [sp, #12]
 8005060:	9901      	ldr	r1, [sp, #4]
 8005062:	461a      	mov	r2, r3
 8005064:	460e      	mov	r6, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005066:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <dir_find+0x158>)
 8005068:	4599      	cmp	r9, r3
 800506a:	d1e3      	bne.n	8005034 <dir_find+0x9c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800506c:	782b      	ldrb	r3, [r5, #0]
 800506e:	065b      	lsls	r3, r3, #25
 8005070:	d504      	bpl.n	800507c <dir_find+0xe4>
 8005072:	b11a      	cbz	r2, 800507c <dir_find+0xe4>
 8005074:	9b00      	ldr	r3, [sp, #0]
 8005076:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800507a:	b963      	cbnz	r3, 8005096 <dir_find+0xfe>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800507c:	3f01      	subs	r7, #1
 800507e:	fa5f f987 	uxtb.w	r9, r7
		res = dir_next(dp, 0);	/* Next entry */
 8005082:	2100      	movs	r1, #0
 8005084:	4620      	mov	r0, r4
 8005086:	f7ff ff11 	bl	8004eac <dir_next>
	} while (res == FR_OK);
 800508a:	4606      	mov	r6, r0
 800508c:	2800      	cmp	r0, #0
 800508e:	d097      	beq.n	8004fc0 <dir_find+0x28>
 8005090:	e027      	b.n	80050e2 <dir_find+0x14a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005092:	45b9      	cmp	r9, r7
 8005094:	d0bc      	beq.n	8005010 <dir_find+0x78>
 8005096:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800509a:	e7f2      	b.n	8005082 <dir_find+0xea>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800509c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050a0:	428b      	cmp	r3, r1
 80050a2:	d0e0      	beq.n	8005066 <dir_find+0xce>
 80050a4:	e7f7      	b.n	8005096 <dir_find+0xfe>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80050a6:	f1b9 0f00 	cmp.w	r9, #0
 80050aa:	d104      	bne.n	80050b6 <dir_find+0x11e>
 80050ac:	4628      	mov	r0, r5
 80050ae:	f7ff fb0b 	bl	80046c8 <sum_sfn>
 80050b2:	4540      	cmp	r0, r8
 80050b4:	d015      	beq.n	80050e2 <dir_find+0x14a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80050b6:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
 80050ba:	f016 0601 	ands.w	r6, r6, #1
 80050be:	d196      	bne.n	8004fee <dir_find+0x56>
 80050c0:	f104 0224 	add.w	r2, r4, #36	; 0x24
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80050c4:	f105 010b 	add.w	r1, r5, #11
		r = *d++ - *s++;
 80050c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80050cc:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 80050d0:	428d      	cmp	r5, r1
		r = *d++ - *s++;
 80050d2:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 80050d6:	d002      	beq.n	80050de <dir_find+0x146>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f5      	beq.n	80050c8 <dir_find+0x130>
 80050dc:	e787      	b.n	8004fee <dir_find+0x56>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d185      	bne.n	8004fee <dir_find+0x56>
}
 80050e2:	4630      	mov	r0, r6
 80050e4:	b005      	add	sp, #20
 80050e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80050ea:	2604      	movs	r6, #4
 80050ec:	e7f9      	b.n	80050e2 <dir_find+0x14a>
 80050ee:	bf00      	nop
 80050f0:	08011e59 	.word	0x08011e59
 80050f4:	08011e4c 	.word	0x08011e4c

080050f8 <dir_register>:
{
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80050fc:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
{
 8005100:	b089      	sub	sp, #36	; 0x24
 8005102:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005104:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
 8005108:	f040 808e 	bne.w	8005228 <dir_register+0x130>
	FATFS *fs = dp->obj.fs;
 800510c:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800510e:	68f2      	ldr	r2, [r6, #12]
 8005110:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d166      	bne.n	80051e6 <dir_register+0xee>
	mem_cpy(sn, dp->fn, 12);
 8005118:	f104 0724 	add.w	r7, r4, #36	; 0x24
	if (cnt) {
 800511c:	220c      	movs	r2, #12
 800511e:	a805      	add	r0, sp, #20
 8005120:	4639      	mov	r1, r7
 8005122:	f7ff fb17 	bl	8004754 <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005126:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800512a:	07db      	lsls	r3, r3, #31
 800512c:	f140 8085 	bpl.w	800523a <dir_register+0x142>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005130:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 8005132:	f04f 0a01 	mov.w	sl, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005136:	f8df 8234 	ldr.w	r8, [pc, #564]	; 800536c <dir_register+0x274>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800513a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800513e:	220b      	movs	r2, #11
 8005140:	a905      	add	r1, sp, #20
 8005142:	4638      	mov	r0, r7
 8005144:	f8d6 900c 	ldr.w	r9, [r6, #12]
	if (cnt) {
 8005148:	f7ff fb04 	bl	8004754 <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800514c:	f1ba 0f05 	cmp.w	sl, #5
 8005150:	d959      	bls.n	8005206 <dir_register+0x10e>
 8005152:	f1a9 0102 	sub.w	r1, r9, #2
 8005156:	4653      	mov	r3, sl
		while (*lfn) {	/* Create a CRC */
 8005158:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800515c:	2a00      	cmp	r2, #0
 800515e:	d144      	bne.n	80051ea <dir_register+0xf2>
 8005160:	f10d 0013 	add.w	r0, sp, #19
 8005164:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 8005166:	f003 0c0f 	and.w	ip, r3, #15
		ns[i--] = c;
 800516a:	3a01      	subs	r2, #1
		c = (BYTE)((seq % 16) + '0');
 800516c:	f10c 0130 	add.w	r1, ip, #48	; 0x30
		if (c > '9') c += 7;
 8005170:	2939      	cmp	r1, #57	; 0x39
 8005172:	bf88      	it	hi
 8005174:	f10c 0137 	addhi.w	r1, ip, #55	; 0x37
	} while (seq);
 8005178:	2b0f      	cmp	r3, #15
		ns[i--] = c;
 800517a:	f800 1901 	strb.w	r1, [r0], #-1
		seq /= 16;
 800517e:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
 8005182:	d842      	bhi.n	800520a <dir_register+0x112>
	ns[i] = '~';
 8005184:	f102 0320 	add.w	r3, r2, #32
 8005188:	217e      	movs	r1, #126	; 0x7e
 800518a:	446b      	add	r3, sp
 800518c:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005190:	4639      	mov	r1, r7
 8005192:	2300      	movs	r3, #0
 8005194:	429a      	cmp	r2, r3
 8005196:	d005      	beq.n	80051a4 <dir_register+0xac>
 8005198:	f811 0b01 	ldrb.w	r0, [r1], #1
 800519c:	f103 0c01 	add.w	ip, r3, #1
 80051a0:	2820      	cmp	r0, #32
 80051a2:	d134      	bne.n	800520e <dir_register+0x116>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80051a4:	f104 0023 	add.w	r0, r4, #35	; 0x23
 80051a8:	2a07      	cmp	r2, #7
 80051aa:	f103 0301 	add.w	r3, r3, #1
 80051ae:	bf97      	itett	ls
 80051b0:	f102 0120 	addls.w	r1, r2, #32
 80051b4:	2120      	movhi	r1, #32
 80051b6:	3201      	addls	r2, #1
 80051b8:	4469      	addls	r1, sp
 80051ba:	bf98      	it	ls
 80051bc:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
	} while (j < 8);
 80051c0:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80051c2:	54c1      	strb	r1, [r0, r3]
	} while (j < 8);
 80051c4:	d9f0      	bls.n	80051a8 <dir_register+0xb0>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80051c6:	4620      	mov	r0, r4
 80051c8:	f7ff fee6 	bl	8004f98 <dir_find>
 80051cc:	4681      	mov	r9, r0
			if (res != FR_OK) break;
 80051ce:	bb70      	cbnz	r0, 800522e <dir_register+0x136>
		for (n = 1; n < 100; n++) {
 80051d0:	f10a 0a01 	add.w	sl, sl, #1
 80051d4:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 80051d8:	d1b1      	bne.n	800513e <dir_register+0x46>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80051da:	f04f 0907 	mov.w	r9, #7
}
 80051de:	4648      	mov	r0, r9
 80051e0:	b009      	add	sp, #36	; 0x24
 80051e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80051e6:	3501      	adds	r5, #1
 80051e8:	e792      	b.n	8005110 <dir_register+0x18>
 80051ea:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 80051ec:	f002 0c01 	and.w	ip, r2, #1
				wc >>= 1;
 80051f0:	0852      	lsrs	r2, r2, #1
				sr = (sr << 1) + (wc & 1);
 80051f2:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80051f6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80051fa:	bf18      	it	ne
 80051fc:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8005200:	3801      	subs	r0, #1
 8005202:	d1f3      	bne.n	80051ec <dir_register+0xf4>
 8005204:	e7a8      	b.n	8005158 <dir_register+0x60>
 8005206:	4653      	mov	r3, sl
 8005208:	e7aa      	b.n	8005160 <dir_register+0x68>
		seq /= 16;
 800520a:	460b      	mov	r3, r1
 800520c:	e7ab      	b.n	8005166 <dir_register+0x6e>
 800520e:	4663      	mov	r3, ip
 8005210:	e7c0      	b.n	8005194 <dir_register+0x9c>
				n = 0;					/* Not a blank entry. Restart to search */
 8005212:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 8005214:	2101      	movs	r1, #1
 8005216:	4620      	mov	r0, r4
 8005218:	f7ff fe48 	bl	8004eac <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800521c:	4681      	mov	r9, r0
 800521e:	b308      	cbz	r0, 8005264 <dir_register+0x16c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005220:	f1b9 0f04 	cmp.w	r9, #4
 8005224:	d0d9      	beq.n	80051da <dir_register+0xe2>
 8005226:	e7da      	b.n	80051de <dir_register+0xe6>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005228:	f04f 0906 	mov.w	r9, #6
 800522c:	e7d7      	b.n	80051de <dir_register+0xe6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800522e:	2804      	cmp	r0, #4
 8005230:	d1d5      	bne.n	80051de <dir_register+0xe6>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005232:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005236:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800523a:	f89d 301f 	ldrb.w	r3, [sp, #31]
	res = dir_sdi(dp, 0);
 800523e:	2100      	movs	r1, #0
 8005240:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 8005242:	f8d4 a000 	ldr.w	sl, [r4]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005246:	079b      	lsls	r3, r3, #30
 8005248:	bf45      	ittet	mi
 800524a:	350c      	addmi	r5, #12
 800524c:	230d      	movmi	r3, #13
 800524e:	2501      	movpl	r5, #1
 8005250:	fbb5 f5f3 	udivmi	r5, r5, r3
 8005254:	bf48      	it	mi
 8005256:	3501      	addmi	r5, #1
	res = dir_sdi(dp, 0);
 8005258:	f7ff fde7 	bl	8004e2a <dir_sdi>
	if (res == FR_OK) {
 800525c:	4681      	mov	r9, r0
 800525e:	2800      	cmp	r0, #0
 8005260:	d1de      	bne.n	8005220 <dir_register+0x128>
		n = 0;
 8005262:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 8005264:	69e1      	ldr	r1, [r4, #28]
 8005266:	4650      	mov	r0, sl
 8005268:	f7ff faa9 	bl	80047be <move_window>
			if (res != FR_OK) break;
 800526c:	4681      	mov	r9, r0
 800526e:	2800      	cmp	r0, #0
 8005270:	d1d6      	bne.n	8005220 <dir_register+0x128>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005272:	6a23      	ldr	r3, [r4, #32]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2be5      	cmp	r3, #229	; 0xe5
 8005278:	d001      	beq.n	800527e <dir_register+0x186>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1c9      	bne.n	8005212 <dir_register+0x11a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800527e:	f108 0801 	add.w	r8, r8, #1
 8005282:	4545      	cmp	r5, r8
 8005284:	d1c6      	bne.n	8005214 <dir_register+0x11c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005286:	3d01      	subs	r5, #1
 8005288:	d055      	beq.n	8005336 <dir_register+0x23e>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800528a:	6961      	ldr	r1, [r4, #20]
 800528c:	4620      	mov	r0, r4
 800528e:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8005292:	f7ff fdca 	bl	8004e2a <dir_sdi>
		if (res == FR_OK) {
 8005296:	4681      	mov	r9, r0
 8005298:	2800      	cmp	r0, #0
 800529a:	d1a0      	bne.n	80051de <dir_register+0xe6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800529c:	f64f 78ff 	movw	r8, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80052a0:	4638      	mov	r0, r7
 80052a2:	f7ff fa11 	bl	80046c8 <sum_sfn>
 80052a6:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
 80052a8:	69e1      	ldr	r1, [r4, #28]
 80052aa:	4630      	mov	r0, r6
 80052ac:	f7ff fa87 	bl	80047be <move_window>
 80052b0:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d193      	bne.n	80051de <dir_register+0xe6>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80052b6:	6a23      	ldr	r3, [r4, #32]
 80052b8:	b2e9      	uxtb	r1, r5
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80052ba:	9a01      	ldr	r2, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80052bc:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80052c0:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80052c4:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80052c6:	f04f 020f 	mov.w	r2, #15
 80052ca:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8005370 <dir_register+0x278>
 80052ce:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80052d0:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Type] = 0;
 80052d2:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80052d4:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
 80052d8:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
 80052da:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 80052dc:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80052de:	4540      	cmp	r0, r8
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80052e0:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++s < 13);
 80052e4:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80052e8:	bf18      	it	ne
 80052ea:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80052ee:	eb03 0b09 	add.w	fp, r3, r9
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80052f2:	bf18      	it	ne
 80052f4:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80052f6:	f803 0009 	strb.w	r0, [r3, r9]
 80052fa:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80052fe:	2800      	cmp	r0, #0
 8005300:	bf08      	it	eq
 8005302:	4640      	moveq	r0, r8
	} while (++s < 13);
 8005304:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8005308:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
 800530c:	d1e7      	bne.n	80052de <dir_register+0x1e6>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800530e:	4540      	cmp	r0, r8
 8005310:	d002      	beq.n	8005318 <dir_register+0x220>
 8005312:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8005316:	b90a      	cbnz	r2, 800531c <dir_register+0x224>
 8005318:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800531c:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 800531e:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8005320:	2100      	movs	r1, #0
 8005322:	4620      	mov	r0, r4
				fs->wflag = 1;
 8005324:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005326:	f7ff fdc1 	bl	8004eac <dir_next>
			} while (res == FR_OK && --nent);
 800532a:	4681      	mov	r9, r0
 800532c:	2800      	cmp	r0, #0
 800532e:	f47f af56 	bne.w	80051de <dir_register+0xe6>
 8005332:	3d01      	subs	r5, #1
 8005334:	d1b8      	bne.n	80052a8 <dir_register+0x1b0>
		res = move_window(fs, dp->sect);
 8005336:	69e1      	ldr	r1, [r4, #28]
 8005338:	4630      	mov	r0, r6
 800533a:	f7ff fa40 	bl	80047be <move_window>
		if (res == FR_OK) {
 800533e:	4681      	mov	r9, r0
 8005340:	2800      	cmp	r0, #0
 8005342:	f47f af4c 	bne.w	80051de <dir_register+0xe6>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005346:	4601      	mov	r1, r0
 8005348:	2220      	movs	r2, #32
 800534a:	6a20      	ldr	r0, [r4, #32]
 800534c:	f7ff f8e6 	bl	800451c <mem_set>
	if (cnt) {
 8005350:	220b      	movs	r2, #11
 8005352:	4639      	mov	r1, r7
 8005354:	6a20      	ldr	r0, [r4, #32]
 8005356:	f7ff f9fd 	bl	8004754 <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800535a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800535e:	6a22      	ldr	r2, [r4, #32]
 8005360:	f003 0318 	and.w	r3, r3, #24
 8005364:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8005366:	2301      	movs	r3, #1
 8005368:	70f3      	strb	r3, [r6, #3]
 800536a:	e738      	b.n	80051de <dir_register+0xe6>
 800536c:	00011021 	.word	0x00011021
 8005370:	08011e4c 	.word	0x08011e4c

08005374 <follow_path>:
{
 8005374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005378:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 800537a:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800537e:	4689      	mov	r9, r1
 8005380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005384:	2b2f      	cmp	r3, #47	; 0x2f
 8005386:	d0fa      	beq.n	800537e <follow_path+0xa>
 8005388:	2b5c      	cmp	r3, #92	; 0x5c
 800538a:	d0f8      	beq.n	800537e <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 800538c:	2100      	movs	r1, #0
 800538e:	60b1      	str	r1, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005390:	f899 3000 	ldrb.w	r3, [r9]
 8005394:	2b1f      	cmp	r3, #31
 8005396:	f200 80af 	bhi.w	80054f8 <follow_path+0x184>
		dp->fn[NSFLAG] = NS_NONAME;
 800539a:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800539c:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 800539e:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
 80053a2:	b003      	add	sp, #12
 80053a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 80053a8:	f7ff bd3f 	b.w	8004e2a <dir_sdi>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80053ac:	3401      	adds	r4, #1
 80053ae:	e0b6      	b.n	800551e <follow_path+0x1aa>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80053b0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	d00c      	beq.n	80053d2 <follow_path+0x5e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80053b8:	2101      	movs	r1, #1
 80053ba:	f000 fbf3 	bl	8005ba4 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80053be:	b140      	cbz	r0, 80053d2 <follow_path+0x5e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80053c0:	287f      	cmp	r0, #127	; 0x7f
 80053c2:	9b00      	ldr	r3, [sp, #0]
 80053c4:	d807      	bhi.n	80053d6 <follow_path+0x62>
 80053c6:	497f      	ldr	r1, [pc, #508]	; (80055c4 <follow_path+0x250>)
	while (*str && *str != chr) str++;
 80053c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053cc:	b11a      	cbz	r2, 80053d6 <follow_path+0x62>
 80053ce:	4290      	cmp	r0, r2
 80053d0:	d1fa      	bne.n	80053c8 <follow_path+0x54>
				cf |= NS_LOSS | NS_LFN; break;
 80053d2:	2006      	movs	r0, #6
 80053d4:	e04d      	b.n	8005472 <follow_path+0xfe>
		w = p[si++];					/* Get a character */
 80053d6:	4627      	mov	r7, r4
		lfn[di++] = w;					/* Store the Unicode character */
 80053d8:	f828 0f02 	strh.w	r0, [r8, #2]!
		w = p[si++];					/* Get a character */
 80053dc:	e095      	b.n	800550a <follow_path+0x196>
		w = lfn[di - 1];
 80053de:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
		if (w != ' ' && w != '.') break;
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d002      	beq.n	80053ec <follow_path+0x78>
 80053e6:	2b2e      	cmp	r3, #46	; 0x2e
 80053e8:	f040 80a9 	bne.w	800553e <follow_path+0x1ca>
		di--;
 80053ec:	3f01      	subs	r7, #1
 80053ee:	e0a3      	b.n	8005538 <follow_path+0x1c4>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80053f0:	3101      	adds	r1, #1
 80053f2:	e0b1      	b.n	8005558 <follow_path+0x1e4>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80053f4:	4543      	cmp	r3, r8
 80053f6:	d205      	bcs.n	8005404 <follow_path+0x90>
 80053f8:	42ba      	cmp	r2, r7
 80053fa:	d149      	bne.n	8005490 <follow_path+0x11c>
			if (ni == 11) {				/* Long extension */
 80053fc:	f1b8 0f0b 	cmp.w	r8, #11
 8005400:	d13f      	bne.n	8005482 <follow_path+0x10e>
 8005402:	e002      	b.n	800540a <follow_path+0x96>
 8005404:	f1b8 0f0b 	cmp.w	r8, #11
 8005408:	d136      	bne.n	8005478 <follow_path+0x104>
				cf |= NS_LOSS | NS_LFN; break;
 800540a:	f044 0403 	orr.w	r4, r4, #3
 800540e:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005412:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8005416:	2be5      	cmp	r3, #229	; 0xe5
 8005418:	bf04      	itt	eq
 800541a:	2305      	moveq	r3, #5
 800541c:	f886 3024 	strbeq.w	r3, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8005420:	f1b8 0f08 	cmp.w	r8, #8
 8005424:	bf04      	itt	eq
 8005426:	00ad      	lsleq	r5, r5, #2
 8005428:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800542a:	f005 030c 	and.w	r3, r5, #12
 800542e:	2b0c      	cmp	r3, #12
 8005430:	d003      	beq.n	800543a <follow_path+0xc6>
 8005432:	f005 0203 	and.w	r2, r5, #3
 8005436:	2a03      	cmp	r2, #3
 8005438:	d101      	bne.n	800543e <follow_path+0xca>
 800543a:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800543e:	07a1      	lsls	r1, r4, #30
 8005440:	d409      	bmi.n	8005456 <follow_path+0xe2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005442:	f005 0503 	and.w	r5, r5, #3
 8005446:	2d01      	cmp	r5, #1
 8005448:	bf08      	it	eq
 800544a:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800544e:	2b04      	cmp	r3, #4
 8005450:	bf08      	it	eq
 8005452:	f044 0408 	orreq.w	r4, r4, #8
			res = dir_find(dp);				/* Find an object with the segment name */
 8005456:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005458:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800545c:	f7ff fd9c 	bl	8004f98 <dir_find>
			ns = dp->fn[NSFLAG];
 8005460:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8005464:	b3c0      	cbz	r0, 80054d8 <follow_path+0x164>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005466:	2804      	cmp	r0, #4
 8005468:	d103      	bne.n	8005472 <follow_path+0xfe>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800546a:	f013 0f04 	tst.w	r3, #4
 800546e:	bf08      	it	eq
 8005470:	2005      	moveq	r0, #5
}
 8005472:	b003      	add	sp, #12
 8005474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005478:	42ba      	cmp	r2, r7
 800547a:	d002      	beq.n	8005482 <follow_path+0x10e>
 800547c:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8005480:	d8c7      	bhi.n	8005412 <follow_path+0x9e>
			b <<= 2; continue;
 8005482:	00ad      	lsls	r5, r5, #2
 8005484:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005486:	f04f 080b 	mov.w	r8, #11
 800548a:	2308      	movs	r3, #8
			b <<= 2; continue;
 800548c:	b2ed      	uxtb	r5, r5
 800548e:	e088      	b.n	80055a2 <follow_path+0x22e>
		if (w >= 0x80) {				/* Non ASCII character */
 8005490:	287f      	cmp	r0, #127	; 0x7f
 8005492:	d90e      	bls.n	80054b2 <follow_path+0x13e>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005494:	2100      	movs	r1, #0
			cf |= NS_LFN;				/* Force create LFN entry */
 8005496:	f044 0402 	orr.w	r4, r4, #2
 800549a:	e9cd 2300 	strd	r2, r3, [sp]
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800549e:	f000 fb81 	bl	8005ba4 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80054a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054a6:	b160      	cbz	r0, 80054c2 <follow_path+0x14e>
 80054a8:	4947      	ldr	r1, [pc, #284]	; (80055c8 <follow_path+0x254>)
 80054aa:	4408      	add	r0, r1
 80054ac:	f810 0c73 	ldrb.w	r0, [r0, #-115]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80054b0:	b138      	cbz	r0, 80054c2 <follow_path+0x14e>
	while (*str && *str != chr) str++;
 80054b2:	f8df c118 	ldr.w	ip, [pc, #280]	; 80055cc <follow_path+0x258>
 80054b6:	f81c 1b01 	ldrb.w	r1, [ip], #1
 80054ba:	2900      	cmp	r1, #0
 80054bc:	d075      	beq.n	80055aa <follow_path+0x236>
 80054be:	4281      	cmp	r1, r0
 80054c0:	d1f9      	bne.n	80054b6 <follow_path+0x142>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80054c2:	f044 0403 	orr.w	r4, r4, #3
 80054c6:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 80054c8:	18f1      	adds	r1, r6, r3
 80054ca:	3301      	adds	r3, #1
 80054cc:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 80054d0:	e067      	b.n	80055a2 <follow_path+0x22e>
					b |= 2;
 80054d2:	f045 0502 	orr.w	r5, r5, #2
 80054d6:	e7f7      	b.n	80054c8 <follow_path+0x154>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80054d8:	075a      	lsls	r2, r3, #29
 80054da:	d4ca      	bmi.n	8005472 <follow_path+0xfe>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80054dc:	79b3      	ldrb	r3, [r6, #6]
 80054de:	06db      	lsls	r3, r3, #27
 80054e0:	d561      	bpl.n	80055a6 <follow_path+0x232>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80054e2:	6971      	ldr	r1, [r6, #20]
 80054e4:	f10b 0334 	add.w	r3, fp, #52	; 0x34
 80054e8:	f89b 0000 	ldrb.w	r0, [fp]
 80054ec:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80054f0:	4419      	add	r1, r3
 80054f2:	f7ff fbac 	bl	8004c4e <ld_clust.isra.0>
 80054f6:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80054f8:	6833      	ldr	r3, [r6, #0]
 80054fa:	2700      	movs	r7, #0
 80054fc:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8005500:	f109 33ff 	add.w	r3, r9, #4294967295
 8005504:	f1aa 0502 	sub.w	r5, sl, #2
 8005508:	46a8      	mov	r8, r5
		w = p[si++];					/* Get a character */
 800550a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800550e:	1c7c      	adds	r4, r7, #1
		if (w < ' ') break;				/* Break if end of the path name */
 8005510:	281f      	cmp	r0, #31
 8005512:	d90c      	bls.n	800552e <follow_path+0x1ba>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005514:	282f      	cmp	r0, #47	; 0x2f
 8005516:	d002      	beq.n	800551e <follow_path+0x1aa>
 8005518:	285c      	cmp	r0, #92	; 0x5c
 800551a:	f47f af49 	bne.w	80053b0 <follow_path+0x3c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800551e:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005522:	2b2f      	cmp	r3, #47	; 0x2f
 8005524:	f43f af42 	beq.w	80053ac <follow_path+0x38>
 8005528:	2b5c      	cmp	r3, #92	; 0x5c
 800552a:	f43f af3f 	beq.w	80053ac <follow_path+0x38>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800552e:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 8005530:	44a1      	add	r9, r4
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005532:	bf34      	ite	cc
 8005534:	2404      	movcc	r4, #4
 8005536:	2400      	movcs	r4, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005538:	2f00      	cmp	r7, #0
 800553a:	f47f af50 	bne.w	80053de <follow_path+0x6a>
	lfn[di] = 0;						/* LFN is created */
 800553e:	2300      	movs	r3, #0
 8005540:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005544:	2f00      	cmp	r7, #0
 8005546:	f43f af44 	beq.w	80053d2 <follow_path+0x5e>
	mem_set(dp->fn, ' ', 11);
 800554a:	2120      	movs	r1, #32
 800554c:	220b      	movs	r2, #11
 800554e:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8005552:	f7fe ffe3 	bl	800451c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005556:	4619      	mov	r1, r3
 8005558:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
 800555c:	2b20      	cmp	r3, #32
 800555e:	f43f af47 	beq.w	80053f0 <follow_path+0x7c>
 8005562:	2b2e      	cmp	r3, #46	; 0x2e
 8005564:	f43f af44 	beq.w	80053f0 <follow_path+0x7c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005568:	b109      	cbz	r1, 800556e <follow_path+0x1fa>
 800556a:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800556e:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
 8005572:	2b2e      	cmp	r3, #46	; 0x2e
 8005574:	d001      	beq.n	800557a <follow_path+0x206>
 8005576:	3f01      	subs	r7, #1
 8005578:	d1f9      	bne.n	800556e <follow_path+0x1fa>
		dp->fn[i++] = (BYTE)w;
 800557a:	2300      	movs	r3, #0
 800557c:	f04f 0808 	mov.w	r8, #8
 8005580:	461d      	mov	r5, r3
		w = lfn[si++];					/* Get an LFN character */
 8005582:	f83a 0011 	ldrh.w	r0, [sl, r1, lsl #1]
 8005586:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8005588:	2800      	cmp	r0, #0
 800558a:	f43f af42 	beq.w	8005412 <follow_path+0x9e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800558e:	2820      	cmp	r0, #32
 8005590:	d005      	beq.n	800559e <follow_path+0x22a>
 8005592:	282e      	cmp	r0, #46	; 0x2e
 8005594:	f47f af2e 	bne.w	80053f4 <follow_path+0x80>
 8005598:	42ba      	cmp	r2, r7
 800559a:	f43f af2f 	beq.w	80053fc <follow_path+0x88>
			cf |= NS_LOSS | NS_LFN; continue;
 800559e:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 80055a2:	4611      	mov	r1, r2
 80055a4:	e7ed      	b.n	8005582 <follow_path+0x20e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80055a6:	2005      	movs	r0, #5
	return res;
 80055a8:	e763      	b.n	8005472 <follow_path+0xfe>
				if (IsUpper(w)) {		/* ASCII large capital */
 80055aa:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80055ae:	2919      	cmp	r1, #25
 80055b0:	d98f      	bls.n	80054d2 <follow_path+0x15e>
					if (IsLower(w)) {	/* ASCII small capital */
 80055b2:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80055b6:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 80055b8:	bf9e      	ittt	ls
 80055ba:	3820      	subls	r0, #32
 80055bc:	f045 0501 	orrls.w	r5, r5, #1
 80055c0:	b280      	uxthls	r0, r0
 80055c2:	e781      	b.n	80054c8 <follow_path+0x154>
 80055c4:	080130e7 	.word	0x080130e7
 80055c8:	08011e4c 	.word	0x08011e4c
 80055cc:	080130f0 	.word	0x080130f0

080055d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80055d0:	b530      	push	{r4, r5, lr}
 80055d2:	b085      	sub	sp, #20
 80055d4:	4614      	mov	r4, r2
 80055d6:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80055da:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 80055dc:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80055de:	f7ff f882 	bl	80046e6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80055e2:	2800      	cmp	r0, #0
 80055e4:	db19      	blt.n	800561a <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80055e6:	490f      	ldr	r1, [pc, #60]	; (8005624 <f_mount+0x54>)
 80055e8:	0085      	lsls	r5, r0, #2
 80055ea:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80055ee:	6a00      	ldr	r0, [r0, #32]

	if (cfs) {
 80055f0:	b118      	cbz	r0, 80055fa <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80055f2:	f7ff f833 	bl	800465c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80055f6:	2300      	movs	r3, #0
 80055f8:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
 80055fa:	9801      	ldr	r0, [sp, #4]
 80055fc:	b108      	cbz	r0, 8005602 <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
 80055fe:	2300      	movs	r3, #0
 8005600:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005602:	4429      	add	r1, r5
 8005604:	6208      	str	r0, [r1, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005606:	b130      	cbz	r0, 8005616 <f_mount+0x46>
 8005608:	2c01      	cmp	r4, #1
 800560a:	d108      	bne.n	800561e <f_mount+0x4e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800560c:	2200      	movs	r2, #0
 800560e:	a901      	add	r1, sp, #4
 8005610:	4668      	mov	r0, sp
 8005612:	f7ff f927 	bl	8004864 <find_volume>
	LEAVE_FF(fs, res);
}
 8005616:	b005      	add	sp, #20
 8005618:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800561a:	200b      	movs	r0, #11
 800561c:	e7fb      	b.n	8005616 <f_mount+0x46>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800561e:	2000      	movs	r0, #0
 8005620:	e7f9      	b.n	8005616 <f_mount+0x46>
 8005622:	bf00      	nop
 8005624:	200014a0 	.word	0x200014a0

08005628 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800562c:	b091      	sub	sp, #68	; 0x44
 800562e:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005630:	4605      	mov	r5, r0
{
 8005632:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8005634:	2800      	cmp	r0, #0
 8005636:	f000 8108 	beq.w	800584a <f_open+0x222>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800563a:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800563e:	a902      	add	r1, sp, #8
 8005640:	a801      	add	r0, sp, #4
 8005642:	4632      	mov	r2, r6
 8005644:	f7ff f90e 	bl	8004864 <find_volume>
	if (res == FR_OK) {
 8005648:	2800      	cmp	r0, #0
 800564a:	f040 80fc 	bne.w	8005846 <f_open+0x21e>
		dj.obj.fs = fs;
 800564e:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
 8005650:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
 8005654:	9303      	str	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8005656:	f000 faa1 	bl	8005b9c <ff_memalloc>
 800565a:	4607      	mov	r7, r0
 800565c:	2800      	cmp	r0, #0
 800565e:	f000 80f6 	beq.w	800584e <f_open+0x226>
 8005662:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 8005664:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8005666:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8005668:	a803      	add	r0, sp, #12
 800566a:	f7ff fe83 	bl	8005374 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800566e:	4604      	mov	r4, r0
 8005670:	b960      	cbnz	r0, 800568c <f_open+0x64>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005672:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8005676:	2b00      	cmp	r3, #0
 8005678:	db60      	blt.n	800573c <f_open+0x114>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800567a:	f016 0f3e 	tst.w	r6, #62	; 0x3e
 800567e:	a803      	add	r0, sp, #12
 8005680:	bf14      	ite	ne
 8005682:	2101      	movne	r1, #1
 8005684:	2100      	moveq	r1, #0
 8005686:	f7fe ff4f 	bl	8004528 <chk_lock>
 800568a:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800568c:	f018 0f1c 	tst.w	r8, #28
 8005690:	d076      	beq.n	8005780 <f_open+0x158>
			if (res != FR_OK) {					/* No file, create new */
 8005692:	2c00      	cmp	r4, #0
 8005694:	d054      	beq.n	8005740 <f_open+0x118>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005696:	2c04      	cmp	r4, #4
 8005698:	d146      	bne.n	8005728 <f_open+0x100>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800569a:	4b6e      	ldr	r3, [pc, #440]	; (8005854 <f_open+0x22c>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	b11a      	cbz	r2, 80056a8 <f_open+0x80>
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 80c9 	bne.w	800583a <f_open+0x212>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80056a8:	a803      	add	r0, sp, #12
 80056aa:	f7ff fd25 	bl	80050f8 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80056ae:	4604      	mov	r4, r0
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d139      	bne.n	8005728 <f_open+0x100>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80056b4:	f046 0608 	orr.w	r6, r6, #8
				dw = GET_FATTIME();
 80056b8:	f7fe ff24 	bl	8004504 <get_fattime>
 80056bc:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80056be:	9000      	str	r0, [sp, #0]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80056c0:	2220      	movs	r2, #32
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80056c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80056c4:	300e      	adds	r0, #14
 80056c6:	f7fe ff21 	bl	800450c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80056ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80056cc:	9900      	ldr	r1, [sp, #0]
 80056ce:	3016      	adds	r0, #22
 80056d0:	f7fe ff1c 	bl	800450c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80056d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80056d6:	9c02      	ldr	r4, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80056d8:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80056da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056dc:	7820      	ldrb	r0, [r4, #0]
 80056de:	f7ff fab6 	bl	8004c4e <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80056e2:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80056e4:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7fe ffe2 	bl	80046b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80056ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 80056ee:	2200      	movs	r2, #0
					fs->wflag = 1;
 80056f0:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80056f2:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80056f4:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80056f6:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80056f8:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 80056fa:	9b02      	ldr	r3, [sp, #8]
 80056fc:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80056fe:	f1b8 0f00 	cmp.w	r8, #0
 8005702:	d028      	beq.n	8005756 <f_open+0x12e>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 8005704:	4641      	mov	r1, r8
 8005706:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 8005708:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800570c:	f7ff fafd 	bl	8004d0a <remove_chain>
						if (res == FR_OK) {
 8005710:	4604      	mov	r4, r0
 8005712:	b948      	cbnz	r0, 8005728 <f_open+0x100>
							res = move_window(fs, dw);
 8005714:	4649      	mov	r1, r9
 8005716:	9802      	ldr	r0, [sp, #8]
 8005718:	f7ff f851 	bl	80047be <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800571c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005720:	9a02      	ldr	r2, [sp, #8]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8005722:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005724:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 8005726:	b1b0      	cbz	r0, 8005756 <f_open+0x12e>
				}
			}
#endif
		}

		FREE_NAMBUF();
 8005728:	4638      	mov	r0, r7
 800572a:	f000 fa39 	bl	8005ba0 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800572e:	b10c      	cbz	r4, 8005734 <f_open+0x10c>
 8005730:	2300      	movs	r3, #0
 8005732:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8005734:	4620      	mov	r0, r4
 8005736:	b011      	add	sp, #68	; 0x44
 8005738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				res = FR_INVALID_NAME;
 800573c:	2406      	movs	r4, #6
 800573e:	e7a5      	b.n	800568c <f_open+0x64>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005740:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005744:	f013 0f11 	tst.w	r3, #17
 8005748:	d125      	bne.n	8005796 <f_open+0x16e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800574a:	f018 0f04 	tst.w	r8, #4
 800574e:	d176      	bne.n	800583e <f_open+0x216>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005750:	f018 0f08 	tst.w	r8, #8
 8005754:	d1b0      	bne.n	80056b8 <f_open+0x90>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005756:	0730      	lsls	r0, r6, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005758:	9b02      	ldr	r3, [sp, #8]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800575a:	a803      	add	r0, sp, #12
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				mode |= FA_MODIFIED;
 800575e:	bf48      	it	mi
 8005760:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005764:	626b      	str	r3, [r5, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005766:	f016 0ffe 	tst.w	r6, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 800576a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800576c:	bf14      	ite	ne
 800576e:	2101      	movne	r1, #1
 8005770:	2100      	moveq	r1, #0
			fp->dir_ptr = dj.dir;
 8005772:	62ab      	str	r3, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005774:	f7fe ff12 	bl	800459c <inc_lock>
 8005778:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800577a:	b970      	cbnz	r0, 800579a <f_open+0x172>
 800577c:	2402      	movs	r4, #2
 800577e:	e7d3      	b.n	8005728 <f_open+0x100>
			if (res == FR_OK) {					/* Following succeeded */
 8005780:	2c00      	cmp	r4, #0
 8005782:	d1d1      	bne.n	8005728 <f_open+0x100>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005784:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005788:	06da      	lsls	r2, r3, #27
 800578a:	d45a      	bmi.n	8005842 <f_open+0x21a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800578c:	f018 0f02 	tst.w	r8, #2
 8005790:	d0e1      	beq.n	8005756 <f_open+0x12e>
 8005792:	07dc      	lsls	r4, r3, #31
 8005794:	d5df      	bpl.n	8005756 <f_open+0x12e>
					res = FR_DENIED;
 8005796:	2407      	movs	r4, #7
 8005798:	e7c6      	b.n	8005728 <f_open+0x100>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800579a:	9c02      	ldr	r4, [sp, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800579c:	f105 0830 	add.w	r8, r5, #48	; 0x30
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80057a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057a2:	7820      	ldrb	r0, [r4, #0]
 80057a4:	f7ff fa53 	bl	8004c4e <ld_clust.isra.0>
 80057a8:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80057aa:	f101 001c 	add.w	r0, r1, #28
			fp->cltbl = 0;			/* Disable fast seek mode */
 80057ae:	2100      	movs	r1, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80057b0:	f7fe feaa 	bl	8004508 <ld_dword>
			fp->obj.id = fs->id;
 80057b4:	88e3      	ldrh	r3, [r4, #6]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80057b6:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80057ba:	60e8      	str	r0, [r5, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80057bc:	62e9      	str	r1, [r5, #44]	; 0x2c
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80057be:	4640      	mov	r0, r8
			fp->obj.fs = fs;	 	/* Validate the file object */
 80057c0:	602c      	str	r4, [r5, #0]
			fp->obj.id = fs->id;
 80057c2:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 80057c4:	752e      	strb	r6, [r5, #20]
			fp->err = 0;			/* Clear error flag */
 80057c6:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80057c8:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80057ca:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80057cc:	f7fe fea6 	bl	800451c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80057d0:	06b2      	lsls	r2, r6, #26
 80057d2:	d401      	bmi.n	80057d8 <f_open+0x1b0>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80057d4:	2400      	movs	r4, #0
 80057d6:	e7a7      	b.n	8005728 <f_open+0x100>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80057d8:	68ee      	ldr	r6, [r5, #12]
 80057da:	2e00      	cmp	r6, #0
 80057dc:	d0fa      	beq.n	80057d4 <f_open+0x1ac>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80057de:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80057e0:	68a9      	ldr	r1, [r5, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80057e2:	895c      	ldrh	r4, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80057e4:	61ae      	str	r6, [r5, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80057e6:	0264      	lsls	r4, r4, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80057e8:	42b4      	cmp	r4, r6
 80057ea:	d319      	bcc.n	8005820 <f_open+0x1f8>
 80057ec:	2400      	movs	r4, #0
				fp->clust = clst;
 80057ee:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80057f0:	2c00      	cmp	r4, #0
 80057f2:	d199      	bne.n	8005728 <f_open+0x100>
 80057f4:	f3c6 0308 	ubfx	r3, r6, #0, #9
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0eb      	beq.n	80057d4 <f_open+0x1ac>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80057fc:	9c02      	ldr	r4, [sp, #8]
 80057fe:	4620      	mov	r0, r4
 8005800:	f7fe ff3a 	bl	8004678 <clust2sect>
 8005804:	2800      	cmp	r0, #0
 8005806:	d0b9      	beq.n	800577c <f_open+0x154>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005808:	eb00 2256 	add.w	r2, r0, r6, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800580c:	2301      	movs	r3, #1
 800580e:	4641      	mov	r1, r8
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005810:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005812:	7860      	ldrb	r0, [r4, #1]
 8005814:	f7fe fe4c 	bl	80044b0 <disk_read>
						res = FR_DENIED;
 8005818:	1e04      	subs	r4, r0, #0
 800581a:	bf18      	it	ne
 800581c:	2401      	movne	r4, #1
 800581e:	e783      	b.n	8005728 <f_open+0x100>
					clst = get_fat(&fp->obj, clst);
 8005820:	6828      	ldr	r0, [r5, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005822:	1b36      	subs	r6, r6, r4
					clst = get_fat(&fp->obj, clst);
 8005824:	f7ff fa1b 	bl	8004c5e <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8005828:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800582a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800582c:	d903      	bls.n	8005836 <f_open+0x20e>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	d1da      	bne.n	80057e8 <f_open+0x1c0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005832:	2401      	movs	r4, #1
 8005834:	e7db      	b.n	80057ee <f_open+0x1c6>
					if (clst <= 1) res = FR_INT_ERR;
 8005836:	2402      	movs	r4, #2
 8005838:	e7d9      	b.n	80057ee <f_open+0x1c6>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800583a:	2412      	movs	r4, #18
 800583c:	e774      	b.n	8005728 <f_open+0x100>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800583e:	2408      	movs	r4, #8
 8005840:	e772      	b.n	8005728 <f_open+0x100>
					res = FR_NO_FILE;
 8005842:	2404      	movs	r4, #4
 8005844:	e770      	b.n	8005728 <f_open+0x100>
 8005846:	4604      	mov	r4, r0
 8005848:	e772      	b.n	8005730 <f_open+0x108>
	if (!fp) return FR_INVALID_OBJECT;
 800584a:	2409      	movs	r4, #9
 800584c:	e772      	b.n	8005734 <f_open+0x10c>
		INIT_NAMBUF(fs);
 800584e:	2411      	movs	r4, #17
 8005850:	e770      	b.n	8005734 <f_open+0x10c>
 8005852:	bf00      	nop
 8005854:	200014a0 	.word	0x200014a0

08005858 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585c:	b087      	sub	sp, #28
 800585e:	4616      	mov	r6, r2
 8005860:	4689      	mov	r9, r1
 8005862:	4604      	mov	r4, r0
 8005864:	9301      	str	r3, [sp, #4]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8005866:	2300      	movs	r3, #0
 8005868:	9a01      	ldr	r2, [sp, #4]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800586a:	a905      	add	r1, sp, #20
	*br = 0;	/* Clear read byte counter */
 800586c:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800586e:	f7fe ff57 	bl	8004720 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005872:	4605      	mov	r5, r0
 8005874:	bb18      	cbnz	r0, 80058be <f_read+0x66>
 8005876:	7d65      	ldrb	r5, [r4, #21]
 8005878:	bb0d      	cbnz	r5, 80058be <f_read+0x66>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800587a:	7d23      	ldrb	r3, [r4, #20]
 800587c:	f013 0301 	ands.w	r3, r3, #1
 8005880:	9302      	str	r3, [sp, #8]
 8005882:	f000 8099 	beq.w	80059b8 <f_read+0x160>
	remain = fp->obj.objsize - fp->fptr;
 8005886:	68e2      	ldr	r2, [r4, #12]
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005888:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	remain = fp->obj.objsize - fp->fptr;
 800588c:	69a3      	ldr	r3, [r4, #24]
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	4296      	cmp	r6, r2
 8005892:	bf28      	it	cs
 8005894:	4616      	movcs	r6, r2
	for ( ;  btr;								/* Repeat until all data read */
 8005896:	b196      	cbz	r6, 80058be <f_read+0x66>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005898:	69a1      	ldr	r1, [r4, #24]
 800589a:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d17c      	bne.n	800599c <f_read+0x144>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80058a2:	9b05      	ldr	r3, [sp, #20]
 80058a4:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 80058a8:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
 80058ac:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
 80058b0:	d11b      	bne.n	80058ea <f_read+0x92>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80058b2:	b941      	cbnz	r1, 80058c6 <f_read+0x6e>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80058b4:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80058b6:	2801      	cmp	r0, #1
 80058b8:	d810      	bhi.n	80058dc <f_read+0x84>
 80058ba:	2502      	movs	r5, #2
 80058bc:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80058be:	4628      	mov	r0, r5
 80058c0:	b007      	add	sp, #28
 80058c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 80058c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80058c8:	b11b      	cbz	r3, 80058d2 <f_read+0x7a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80058ca:	4620      	mov	r0, r4
 80058cc:	f7fe fedf 	bl	800468e <clmt_clust>
 80058d0:	e7f1      	b.n	80058b6 <f_read+0x5e>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80058d2:	69e1      	ldr	r1, [r4, #28]
 80058d4:	6820      	ldr	r0, [r4, #0]
 80058d6:	f7ff f9c2 	bl	8004c5e <get_fat.isra.0>
 80058da:	e7ec      	b.n	80058b6 <f_read+0x5e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d103      	bne.n	80058e8 <f_read+0x90>
 80058e0:	2301      	movs	r3, #1
 80058e2:	9d02      	ldr	r5, [sp, #8]
 80058e4:	7563      	strb	r3, [r4, #21]
 80058e6:	e7ea      	b.n	80058be <f_read+0x66>
				fp->clust = clst;				/* Update current cluster */
 80058e8:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80058ea:	f8dd b014 	ldr.w	fp, [sp, #20]
 80058ee:	69e1      	ldr	r1, [r4, #28]
 80058f0:	4658      	mov	r0, fp
 80058f2:	f7fe fec1 	bl	8004678 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d0df      	beq.n	80058ba <f_read+0x62>
			if (cc) {							/* Read maximum contiguous sectors directly */
 80058fa:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 80058fe:	eb08 0700 	add.w	r7, r8, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005902:	d32e      	bcc.n	8005962 <f_read+0x10a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005904:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8005908:	eb08 2156 	add.w	r1, r8, r6, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800590c:	0a73      	lsrs	r3, r6, #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800590e:	f89b 0001 	ldrb.w	r0, [fp, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005912:	4291      	cmp	r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005914:	4649      	mov	r1, r9
					cc = fs->csize - csect;
 8005916:	bf88      	it	hi
 8005918:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800591c:	463a      	mov	r2, r7
 800591e:	9303      	str	r3, [sp, #12]
 8005920:	f7fe fdc6 	bl	80044b0 <disk_read>
 8005924:	2800      	cmp	r0, #0
 8005926:	d1db      	bne.n	80058e0 <f_read+0x88>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005928:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800592c:	9b03      	ldr	r3, [sp, #12]
 800592e:	2a00      	cmp	r2, #0
 8005930:	da0b      	bge.n	800594a <f_read+0xf2>
 8005932:	6a20      	ldr	r0, [r4, #32]
 8005934:	1bc0      	subs	r0, r0, r7
 8005936:	4298      	cmp	r0, r3
 8005938:	d207      	bcs.n	800594a <f_read+0xf2>
	if (cnt) {
 800593a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800593e:	4651      	mov	r1, sl
 8005940:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8005944:	f7fe ff06 	bl	8004754 <mem_cpy.part.0>
 8005948:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800594a:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800594c:	69a3      	ldr	r3, [r4, #24]
 800594e:	44b9      	add	r9, r7
 8005950:	9a01      	ldr	r2, [sp, #4]
 8005952:	1bf6      	subs	r6, r6, r7
 8005954:	443b      	add	r3, r7
 8005956:	61a3      	str	r3, [r4, #24]
 8005958:	9b01      	ldr	r3, [sp, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	443b      	add	r3, r7
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	e799      	b.n	8005896 <f_read+0x3e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005962:	6a22      	ldr	r2, [r4, #32]
 8005964:	42ba      	cmp	r2, r7
 8005966:	d018      	beq.n	800599a <f_read+0x142>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005968:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	da0b      	bge.n	8005988 <f_read+0x130>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005970:	2301      	movs	r3, #1
 8005972:	4651      	mov	r1, sl
 8005974:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8005978:	f7fe fda8 	bl	80044cc <disk_write>
 800597c:	2800      	cmp	r0, #0
 800597e:	d1af      	bne.n	80058e0 <f_read+0x88>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005980:	7d23      	ldrb	r3, [r4, #20]
 8005982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005986:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005988:	9805      	ldr	r0, [sp, #20]
 800598a:	2301      	movs	r3, #1
 800598c:	463a      	mov	r2, r7
 800598e:	4651      	mov	r1, sl
 8005990:	7840      	ldrb	r0, [r0, #1]
 8005992:	f7fe fd8d 	bl	80044b0 <disk_read>
 8005996:	2800      	cmp	r0, #0
 8005998:	d1a2      	bne.n	80058e0 <f_read+0x88>
			fp->sect = sect;
 800599a:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800599c:	69a1      	ldr	r1, [r4, #24]
 800599e:	4648      	mov	r0, r9
 80059a0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80059a4:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80059a8:	4451      	add	r1, sl
 80059aa:	42b7      	cmp	r7, r6
 80059ac:	bf28      	it	cs
 80059ae:	4637      	movcs	r7, r6
	if (cnt) {
 80059b0:	463a      	mov	r2, r7
 80059b2:	f7fe fecf 	bl	8004754 <mem_cpy.part.0>
}
 80059b6:	e7c9      	b.n	800594c <f_read+0xf4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80059b8:	2507      	movs	r5, #7
 80059ba:	e780      	b.n	80058be <f_read+0x66>

080059bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80059bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80059be:	a901      	add	r1, sp, #4
{
 80059c0:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80059c2:	f7fe fead 	bl	8004720 <validate>
	if (res == FR_OK) {
 80059c6:	4604      	mov	r4, r0
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d13b      	bne.n	8005a44 <f_sync+0x88>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80059cc:	7d2b      	ldrb	r3, [r5, #20]
 80059ce:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 80059d2:	d037      	beq.n	8005a44 <f_sync+0x88>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80059d4:	061b      	lsls	r3, r3, #24
 80059d6:	d50c      	bpl.n	80059f2 <f_sync+0x36>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80059d8:	9801      	ldr	r0, [sp, #4]
 80059da:	2301      	movs	r3, #1
 80059dc:	6a2a      	ldr	r2, [r5, #32]
 80059de:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80059e2:	7840      	ldrb	r0, [r0, #1]
 80059e4:	f7fe fd72 	bl	80044cc <disk_write>
 80059e8:	bb78      	cbnz	r0, 8005a4a <f_sync+0x8e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80059ea:	7d2b      	ldrb	r3, [r5, #20]
 80059ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059f0:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80059f2:	f7fe fd87 	bl	8004504 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80059f6:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 80059f8:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 80059fa:	9801      	ldr	r0, [sp, #4]
 80059fc:	f7fe fedf 	bl	80047be <move_window>
				if (res == FR_OK) {
 8005a00:	4604      	mov	r4, r0
 8005a02:	b9f8      	cbnz	r0, 8005a44 <f_sync+0x88>
					dir = fp->dir_ptr;
 8005a04:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005a06:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005a08:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005a0a:	f043 0320 	orr.w	r3, r3, #32
 8005a0e:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005a10:	68aa      	ldr	r2, [r5, #8]
 8005a12:	6828      	ldr	r0, [r5, #0]
 8005a14:	f7fe fe4c 	bl	80046b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005a18:	68e9      	ldr	r1, [r5, #12]
 8005a1a:	f106 001c 	add.w	r0, r6, #28
 8005a1e:	f7fe fd75 	bl	800450c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005a22:	4639      	mov	r1, r7
 8005a24:	f106 0016 	add.w	r0, r6, #22
 8005a28:	f7fe fd70 	bl	800450c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a30:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 8005a32:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 8005a34:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005a36:	f7ff f8bf 	bl	8004bb8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005a3a:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005a3c:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a42:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8005a44:	4620      	mov	r0, r4
 8005a46:	b003      	add	sp, #12
 8005a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005a4a:	2401      	movs	r4, #1
 8005a4c:	e7fa      	b.n	8005a44 <f_sync+0x88>

08005a4e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005a4e:	b513      	push	{r0, r1, r4, lr}
 8005a50:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005a52:	f7ff ffb3 	bl	80059bc <f_sync>
	if (res == FR_OK)
 8005a56:	b948      	cbnz	r0, 8005a6c <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005a58:	a901      	add	r1, sp, #4
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f7fe fe60 	bl	8004720 <validate>
		if (res == FR_OK) {
 8005a60:	b920      	cbnz	r0, 8005a6c <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005a62:	6920      	ldr	r0, [r4, #16]
 8005a64:	f7fe fddc 	bl	8004620 <dec_lock>
			if (res == FR_OK)
 8005a68:	b900      	cbnz	r0, 8005a6c <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005a6a:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8005a6c:	b002      	add	sp, #8
 8005a6e:	bd10      	pop	{r4, pc}

08005a70 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8005a70:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <FATFS_LinkDriverEx+0x40>)
{
 8005a72:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8005a74:	7b9c      	ldrb	r4, [r3, #14]
 8005a76:	2c01      	cmp	r4, #1
 8005a78:	d817      	bhi.n	8005aaa <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005a7a:	7b9d      	ldrb	r5, [r3, #14]
 8005a7c:	2400      	movs	r4, #0
 8005a7e:	b2ed      	uxtb	r5, r5
 8005a80:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8005a82:	7b9d      	ldrb	r5, [r3, #14]
 8005a84:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005a88:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8005a8a:	7b98      	ldrb	r0, [r3, #14]
 8005a8c:	4418      	add	r0, r3
 8005a8e:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 8005a90:	7b9a      	ldrb	r2, [r3, #14]
 8005a92:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8005a94:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8005a96:	b2c0      	uxtb	r0, r0
 8005a98:	7398      	strb	r0, [r3, #14]
    path[1] = ':';
 8005a9a:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
 8005a9c:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8005a9e:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8005aa0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8005aa2:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8005aa4:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 8005aa6:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 8005aa8:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8005aaa:	2001      	movs	r0, #1
 8005aac:	e7fc      	b.n	8005aa8 <FATFS_LinkDriverEx+0x38>
 8005aae:	bf00      	nop
 8005ab0:	200014cc 	.word	0x200014cc

08005ab4 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f7ff bfdb 	b.w	8005a70 <FATFS_LinkDriverEx>
	...

08005abc <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005abc:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <SD_ioctl+0x50>)
{
 8005abe:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005ac0:	781c      	ldrb	r4, [r3, #0]
{
 8005ac2:	b089      	sub	sp, #36	; 0x24
 8005ac4:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005ac6:	f014 0401 	ands.w	r4, r4, #1
 8005aca:	d11b      	bne.n	8005b04 <SD_ioctl+0x48>

  switch (cmd)
 8005acc:	2903      	cmp	r1, #3
 8005ace:	d803      	bhi.n	8005ad8 <SD_ioctl+0x1c>
 8005ad0:	e8df f001 	tbb	[pc, r1]
 8005ad4:	120c061a 	.word	0x120c061a
 8005ad8:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 8005ada:	4620      	mov	r0, r4
 8005adc:	b009      	add	sp, #36	; 0x24
 8005ade:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8005ae0:	4668      	mov	r0, sp
 8005ae2:	f7fb ffb3 	bl	8001a4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005ae6:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005ae8:	602b      	str	r3, [r5, #0]
    break;
 8005aea:	e7f6      	b.n	8005ada <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8005aec:	4668      	mov	r0, sp
 8005aee:	f7fb ffad 	bl	8001a4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005af2:	9b07      	ldr	r3, [sp, #28]
 8005af4:	802b      	strh	r3, [r5, #0]
    break;
 8005af6:	e7f0      	b.n	8005ada <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8005af8:	4668      	mov	r0, sp
 8005afa:	f7fb ffa7 	bl	8001a4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005afe:	9b07      	ldr	r3, [sp, #28]
 8005b00:	0a5b      	lsrs	r3, r3, #9
 8005b02:	e7f1      	b.n	8005ae8 <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005b04:	2403      	movs	r4, #3
 8005b06:	e7e8      	b.n	8005ada <SD_ioctl+0x1e>
    res = RES_OK;
 8005b08:	460c      	mov	r4, r1
 8005b0a:	e7e6      	b.n	8005ada <SD_ioctl+0x1e>
 8005b0c:	2000003c 	.word	0x2000003c

08005b10 <SD_read>:
{
 8005b10:	b508      	push	{r3, lr}
 8005b12:	4608      	mov	r0, r1
 8005b14:	4611      	mov	r1, r2
 8005b16:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1c:	f7fb fe62 	bl	80017e4 <BSP_SD_ReadBlocks>
 8005b20:	b920      	cbnz	r0, 8005b2c <SD_read+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005b22:	f7fb ff89 	bl	8001a38 <BSP_SD_GetCardState>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d1fb      	bne.n	8005b22 <SD_read+0x12>
}
 8005b2a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	e7fc      	b.n	8005b2a <SD_read+0x1a>

08005b30 <SD_status>:
{
 8005b30:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8005b32:	2301      	movs	r3, #1
 8005b34:	4c05      	ldr	r4, [pc, #20]	; (8005b4c <SD_status+0x1c>)
 8005b36:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8005b38:	f7fb ff7e 	bl	8001a38 <BSP_SD_GetCardState>
 8005b3c:	b918      	cbnz	r0, 8005b46 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8005b3e:	7823      	ldrb	r3, [r4, #0]
 8005b40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005b44:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005b46:	7820      	ldrb	r0, [r4, #0]
}
 8005b48:	bd10      	pop	{r4, pc}
 8005b4a:	bf00      	nop
 8005b4c:	2000003c 	.word	0x2000003c

08005b50 <SD_write>:
{
 8005b50:	b508      	push	{r3, lr}
 8005b52:	4608      	mov	r0, r1
 8005b54:	4611      	mov	r1, r2
 8005b56:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005b58:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5c:	f7fb fe52 	bl	8001804 <BSP_SD_WriteBlocks>
 8005b60:	b920      	cbnz	r0, 8005b6c <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005b62:	f7fb ff69 	bl	8001a38 <BSP_SD_GetCardState>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d1fb      	bne.n	8005b62 <SD_write+0x12>
}
 8005b6a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005b6c:	2001      	movs	r0, #1
 8005b6e:	e7fc      	b.n	8005b6a <SD_write+0x1a>

08005b70 <SD_initialize>:
{
 8005b70:	b538      	push	{r3, r4, r5, lr}
  Stat = STA_NOINIT;
 8005b72:	4c09      	ldr	r4, [pc, #36]	; (8005b98 <SD_initialize+0x28>)
 8005b74:	2501      	movs	r5, #1
 8005b76:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_Init() == MSD_OK)
 8005b78:	f7fb ff32 	bl	80019e0 <BSP_SD_Init>
 8005b7c:	b950      	cbnz	r0, 8005b94 <SD_initialize+0x24>
  Stat = STA_NOINIT;
 8005b7e:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8005b80:	f7fb ff5a 	bl	8001a38 <BSP_SD_GetCardState>
 8005b84:	b918      	cbnz	r0, 8005b8e <SD_initialize+0x1e>
    Stat &= ~STA_NOINIT;
 8005b86:	7823      	ldrb	r3, [r4, #0]
 8005b88:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005b8c:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005b8e:	7823      	ldrb	r3, [r4, #0]
 8005b90:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8005b92:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005b94:	7820      	ldrb	r0, [r4, #0]
}
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	2000003c 	.word	0x2000003c

08005b9c <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8005b9c:	f007 be38 	b.w	800d810 <malloc>

08005ba0 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8005ba0:	f007 be3e 	b.w	800d820 <free>

08005ba4 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005ba4:	287f      	cmp	r0, #127	; 0x7f
{
 8005ba6:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8005ba8:	d906      	bls.n	8005bb8 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005baa:	b131      	cbz	r1, 8005bba <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005bac:	28ff      	cmp	r0, #255	; 0xff
 8005bae:	d812      	bhi.n	8005bd6 <ff_convert+0x32>
 8005bb0:	3880      	subs	r0, #128	; 0x80
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <ff_convert+0x38>)
 8005bb4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	4a08      	ldr	r2, [pc, #32]	; (8005bdc <ff_convert+0x38>)
				if (chr == Tbl[c]) break;
 8005bbc:	f832 4b02 	ldrh.w	r4, [r2], #2
 8005bc0:	b28b      	uxth	r3, r1
 8005bc2:	4284      	cmp	r4, r0
 8005bc4:	d003      	beq.n	8005bce <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8005bc6:	3101      	adds	r1, #1
 8005bc8:	2980      	cmp	r1, #128	; 0x80
 8005bca:	d1f7      	bne.n	8005bbc <ff_convert+0x18>
 8005bcc:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 8005bce:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8005bd2:	b2c0      	uxtb	r0, r0
 8005bd4:	e7f0      	b.n	8005bb8 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	e7ee      	b.n	8005bb8 <ff_convert+0x14>
 8005bda:	bf00      	nop
 8005bdc:	08011f0c 	.word	0x08011f0c

08005be0 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8005be0:	4b1f      	ldr	r3, [pc, #124]	; (8005c60 <ff_wtoupper+0x80>)
 8005be2:	f503 72f9 	add.w	r2, r3, #498	; 0x1f2
 8005be6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8005bea:	bf28      	it	cs
 8005bec:	4613      	movcs	r3, r2
{
 8005bee:	b570      	push	{r4, r5, r6, lr}
 8005bf0:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 8005bf2:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	b1ab      	cbz	r3, 8005c26 <ff_wtoupper+0x46>
 8005bfa:	4298      	cmp	r0, r3
 8005bfc:	d313      	bcc.n	8005c26 <ff_wtoupper+0x46>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8005bfe:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 8005c02:	0a25      	lsrs	r5, r4, #8
 8005c04:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
 8005c06:	fa53 f484 	uxtab	r4, r3, r4
 8005c0a:	42a0      	cmp	r0, r4
 8005c0c:	da21      	bge.n	8005c52 <ff_wtoupper+0x72>
			switch (cmd) {
 8005c0e:	2d08      	cmp	r5, #8
 8005c10:	d809      	bhi.n	8005c26 <ff_wtoupper+0x46>
 8005c12:	e8df f005 	tbb	[pc, r5]
 8005c16:	0905      	.short	0x0905
 8005c18:	1513110f 	.word	0x1513110f
 8005c1c:	1917      	.short	0x1917
 8005c1e:	1b          	.byte	0x1b
 8005c1f:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005c20:	1ac0      	subs	r0, r0, r3
 8005c22:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 8005c26:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005c28:	1ac3      	subs	r3, r0, r3
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005c30:	b280      	uxth	r0, r0
 8005c32:	e7f8      	b.n	8005c26 <ff_wtoupper+0x46>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005c34:	3810      	subs	r0, #16
 8005c36:	e7fb      	b.n	8005c30 <ff_wtoupper+0x50>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005c38:	3820      	subs	r0, #32
 8005c3a:	e7f9      	b.n	8005c30 <ff_wtoupper+0x50>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005c3c:	3830      	subs	r0, #48	; 0x30
 8005c3e:	e7f7      	b.n	8005c30 <ff_wtoupper+0x50>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005c40:	381a      	subs	r0, #26
 8005c42:	e7f5      	b.n	8005c30 <ff_wtoupper+0x50>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005c44:	3008      	adds	r0, #8
 8005c46:	e7f3      	b.n	8005c30 <ff_wtoupper+0x50>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005c48:	3850      	subs	r0, #80	; 0x50
 8005c4a:	e7f1      	b.n	8005c30 <ff_wtoupper+0x50>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005c4c:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8005c50:	e7ee      	b.n	8005c30 <ff_wtoupper+0x50>
		if (!cmd) p += nc;
 8005c52:	3104      	adds	r1, #4
 8005c54:	2d00      	cmp	r5, #0
 8005c56:	d1cc      	bne.n	8005bf2 <ff_wtoupper+0x12>
 8005c58:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 8005c5c:	e7c8      	b.n	8005bf0 <ff_wtoupper+0x10>
 8005c5e:	bf00      	nop
 8005c60:	0801200c 	.word	0x0801200c

08005c64 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 8005c64:	6843      	ldr	r3, [r0, #4]
{
 8005c66:	b510      	push	{r4, lr}
 8005c68:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 8005c6a:	b14b      	cbz	r3, 8005c80 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	2101      	movs	r1, #1
 8005c70:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 8005c72:	6923      	ldr	r3, [r4, #16]
 8005c74:	b12b      	cbz	r3, 8005c82 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 8005c76:	23c8      	movs	r3, #200	; 0xc8
 8005c78:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 8005c80:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 8005c82:	2364      	movs	r3, #100	; 0x64
 8005c84:	6163      	str	r3, [r4, #20]
 8005c86:	e7fb      	b.n	8005c80 <jpeg_abort+0x1c>

08005c88 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 8005c88:	6843      	ldr	r3, [r0, #4]
{
 8005c8a:	b510      	push	{r4, lr}
 8005c8c:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 8005c8e:	b10b      	cbz	r3, 8005c94 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 8005c94:	2300      	movs	r3, #0
 8005c96:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 8005c98:	6163      	str	r3, [r4, #20]
}
 8005c9a:	bd10      	pop	{r4, pc}

08005c9c <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 8005c9c:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 8005c9e:	6843      	ldr	r3, [r0, #4]
 8005ca0:	2284      	movs	r2, #132	; 0x84
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 8005cae:	bd08      	pop	{r3, pc}

08005cb0 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8005cb0:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 8005cb2:	6843      	ldr	r3, [r0, #4]
 8005cb4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005cb8:	2100      	movs	r1, #0
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 8005cc4:	bd08      	pop	{r3, pc}

08005cc6 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8005cc6:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 8005cc8:	2950      	cmp	r1, #80	; 0x50
{
 8005cca:	b570      	push	{r4, r5, r6, lr}
 8005ccc:	4604      	mov	r4, r0
 8005cce:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8005cd0:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 8005cd2:	d007      	beq.n	8005ce4 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 8005cd4:	6803      	ldr	r3, [r0, #0]
 8005cd6:	260d      	movs	r6, #13
 8005cd8:	2250      	movs	r2, #80	; 0x50
 8005cda:	61d9      	str	r1, [r3, #28]
 8005cdc:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 8005ce4:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 8005ce8:	d009      	beq.n	8005cfe <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	2116      	movs	r1, #22
 8005cee:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	61dd      	str	r5, [r3, #28]
 8005cf6:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 8005cfe:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005d02:	2100      	movs	r1, #0
 8005d04:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 8005d06:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 8005d08:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 8005d0a:	f007 fd9f 	bl	800d84c <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 8005d0e:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 8005d10:	4620      	mov	r0, r4
    cinfo->err = err;
 8005d12:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 8005d14:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 8005d16:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 8005d18:	f006 fb18 	bl	800c34c <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 8005d1c:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 8005d1e:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 8005d20:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 8005d22:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8005d24:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8005d28:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8005d2c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8005d30:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8005d34:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8005d38:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8005d3c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8005d40:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 8005d44:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 8005d48:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8005d4c:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 8005d50:	f004 fb26 	bl	800a3a0 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 8005d54:	4620      	mov	r0, r4
 8005d56:	f003 f81d 	bl	8008d94 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 8005d5a:	23c8      	movs	r3, #200	; 0xc8
 8005d5c:	6163      	str	r3, [r4, #20]
}
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}

08005d60 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8005d60:	f7ff bf92 	b.w	8005c88 <jpeg_destroy>

08005d64 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 8005d64:	6942      	ldr	r2, [r0, #20]
 8005d66:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 8005d6a:	b570      	push	{r4, r5, r6, lr}
 8005d6c:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 8005d6e:	2b0a      	cmp	r3, #10
 8005d70:	f200 80a5 	bhi.w	8005ebe <jpeg_consume_input+0x15a>
 8005d74:	e8df f003 	tbb	[pc, r3]
 8005d78:	9dab1006 	.word	0x9dab1006
 8005d7c:	9d9d9d9d 	.word	0x9d9d9d9d
 8005d80:	a39d      	.short	0xa39d
 8005d82:	9d          	.byte	0x9d
 8005d83:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 8005d84:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 8005d8c:	69a3      	ldr	r3, [r4, #24]
 8005d8e:	4620      	mov	r0, r4
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 8005d94:	23c9      	movs	r3, #201	; 0xc9
 8005d96:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8005d98:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8005da2:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8005da4:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8005da6:	d146      	bne.n	8005e36 <jpeg_consume_input+0xd2>
  switch (cinfo->num_components) {
 8005da8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005daa:	2d03      	cmp	r5, #3
 8005dac:	d007      	beq.n	8005dbe <jpeg_consume_input+0x5a>
 8005dae:	2d04      	cmp	r5, #4
 8005db0:	d064      	beq.n	8005e7c <jpeg_consume_input+0x118>
 8005db2:	2d01      	cmp	r5, #1
 8005db4:	d17b      	bne.n	8005eae <jpeg_consume_input+0x14a>
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 8005db6:	f240 1301 	movw	r3, #257	; 0x101
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8005dba:	8523      	strh	r3, [r4, #40]	; 0x28
    break;
 8005dbc:	e01c      	b.n	8005df8 <jpeg_consume_input+0x94>
    if (cinfo->saw_JFIF_marker) {
 8005dbe:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8005dc2:	b10b      	cbz	r3, 8005dc8 <jpeg_consume_input+0x64>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e056      	b.n	8005e76 <jpeg_consume_input+0x112>
    } else if (cinfo->saw_Adobe_marker) {
 8005dc8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d034      	beq.n	8005e3a <jpeg_consume_input+0xd6>
      switch (cinfo->Adobe_transform) {
 8005dd0:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	d04d      	beq.n	8005e74 <jpeg_consume_input+0x110>
 8005dd8:	2a01      	cmp	r2, #1
 8005dda:	d008      	beq.n	8005dee <jpeg_consume_input+0x8a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	2174      	movs	r1, #116	; 0x74
 8005de0:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8005de2:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f04f 31ff 	mov.w	r1, #4294967295
 8005dec:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8005dee:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_RGB;
 8005df2:	2302      	movs	r3, #2
    cinfo->out_color_space = JCS_CMYK;
 8005df4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 8005df8:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->output_gamma = 1.0;
 8005dfc:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 8005dfe:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 8005e00:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 8005e04:	4b33      	ldr	r3, [pc, #204]	; (8005ed4 <jpeg_consume_input+0x170>)
  cinfo->dither_mode = JDITHER_FS;
 8005e06:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 8005e0a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 8005e0e:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 8005e10:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 8005e12:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 8005e16:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 8005e1a:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 8005e1c:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 8005e1e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 8005e22:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 8005e24:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 8005e28:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 8005e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 8005e30:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 8005e32:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 8005e34:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 8005e36:	4630      	mov	r0, r6
 8005e38:	bd70      	pop	{r4, r5, r6, pc}
      int cid0 = cinfo->comp_info[0].component_id;
 8005e3a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8005e3e:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 8005e40:	6d99      	ldr	r1, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8005e42:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 8005e44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8005e48:	d10e      	bne.n	8005e68 <jpeg_consume_input+0x104>
 8005e4a:	2902      	cmp	r1, #2
 8005e4c:	d101      	bne.n	8005e52 <jpeg_consume_input+0xee>
 8005e4e:	2a03      	cmp	r2, #3
 8005e50:	d0b8      	beq.n	8005dc4 <jpeg_consume_input+0x60>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	621a      	str	r2, [r3, #32]
 8005e56:	2271      	movs	r2, #113	; 0x71
 8005e58:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8005e5c:	615a      	str	r2, [r3, #20]
 8005e5e:	2101      	movs	r1, #1
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	4620      	mov	r0, r4
 8005e64:	4798      	blx	r3
 8005e66:	e7ad      	b.n	8005dc4 <jpeg_consume_input+0x60>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 8005e68:	2852      	cmp	r0, #82	; 0x52
 8005e6a:	d1f2      	bne.n	8005e52 <jpeg_consume_input+0xee>
 8005e6c:	2947      	cmp	r1, #71	; 0x47
 8005e6e:	d1f0      	bne.n	8005e52 <jpeg_consume_input+0xee>
 8005e70:	2a42      	cmp	r2, #66	; 0x42
 8005e72:	d1ee      	bne.n	8005e52 <jpeg_consume_input+0xee>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 8005e74:	2302      	movs	r3, #2
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8005e76:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8005e7a:	e7ba      	b.n	8005df2 <jpeg_consume_input+0x8e>
    if (cinfo->saw_Adobe_marker) {
 8005e7c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005e80:	b193      	cbz	r3, 8005ea8 <jpeg_consume_input+0x144>
      switch (cinfo->Adobe_transform) {
 8005e82:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8005e86:	b17a      	cbz	r2, 8005ea8 <jpeg_consume_input+0x144>
 8005e88:	2a02      	cmp	r2, #2
 8005e8a:	d008      	beq.n	8005e9e <jpeg_consume_input+0x13a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	2174      	movs	r1, #116	; 0x74
 8005e90:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8005e92:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f04f 31ff 	mov.w	r1, #4294967295
 8005e9c:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 8005e9e:	2305      	movs	r3, #5
 8005ea0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_CMYK;
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	e7a5      	b.n	8005df4 <jpeg_consume_input+0x90>
      cinfo->jpeg_color_space = JCS_CMYK;
 8005ea8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 8005eac:	e7fa      	b.n	8005ea4 <jpeg_consume_input+0x140>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e783      	b.n	8005dba <jpeg_consume_input+0x56>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8005eb2:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 8005eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8005ebe:	6803      	ldr	r3, [r0, #0]
 8005ec0:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 8005ec2:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8005ec4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4798      	blx	r3
 8005ecc:	e7b3      	b.n	8005e36 <jpeg_consume_input+0xd2>
  switch (cinfo->global_state) {
 8005ece:	2601      	movs	r6, #1
  return retcode;
 8005ed0:	e7b1      	b.n	8005e36 <jpeg_consume_input+0xd2>
 8005ed2:	bf00      	nop
 8005ed4:	3ff00000 	.word	0x3ff00000

08005ed8 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 8005ed8:	6942      	ldr	r2, [r0, #20]
 8005eda:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 8005ede:	2b01      	cmp	r3, #1
{
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 8005ee6:	d905      	bls.n	8005ef4 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8005ee8:	6803      	ldr	r3, [r0, #0]
 8005eea:	2115      	movs	r1, #21
 8005eec:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f7ff ff35 	bl	8005d64 <jpeg_consume_input>
  switch (retcode) {
 8005efa:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 8005efc:	4605      	mov	r5, r0
  switch (retcode) {
 8005efe:	d00b      	beq.n	8005f18 <jpeg_read_header+0x40>
 8005f00:	2802      	cmp	r0, #2
 8005f02:	d109      	bne.n	8005f18 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 8005f04:	b12e      	cbz	r6, 8005f12 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	2235      	movs	r2, #53	; 0x35
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	615a      	str	r2, [r3, #20]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 8005f12:	4620      	mov	r0, r4
 8005f14:	f7ff fea6 	bl	8005c64 <jpeg_abort>
}
 8005f18:	4628      	mov	r0, r5
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}

08005f1c <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8005f1c:	6943      	ldr	r3, [r0, #20]
 8005f1e:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 8005f22:	2a01      	cmp	r2, #1
{
 8005f24:	b510      	push	{r4, lr}
 8005f26:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8005f28:	d81f      	bhi.n	8005f6a <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 8005f2a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005f2c:	bb0a      	cbnz	r2, 8005f72 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 8005f2e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8005f32:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d204      	bcs.n	8005f42 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 8005f38:	6803      	ldr	r3, [r0, #0]
 8005f3a:	2245      	movs	r2, #69	; 0x45
 8005f3c:	615a      	str	r2, [r3, #20]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 8005f42:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8005f46:	4620      	mov	r0, r4
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 8005f4c:	23d2      	movs	r3, #210	; 0xd2
 8005f4e:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 8005f50:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8005f54:	695a      	ldr	r2, [r3, #20]
 8005f56:	b1a2      	cbz	r2, 8005f82 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 8005f58:	69a3      	ldr	r3, [r4, #24]
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 8005f60:	4620      	mov	r0, r4
 8005f62:	f7ff fe7f 	bl	8005c64 <jpeg_abort>
  return TRUE;
 8005f66:	2001      	movs	r0, #1
 8005f68:	e010      	b.n	8005f8c <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 8005f6a:	2bcf      	cmp	r3, #207	; 0xcf
 8005f6c:	d0ee      	beq.n	8005f4c <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 8005f6e:	2bd2      	cmp	r3, #210	; 0xd2
 8005f70:	d0ee      	beq.n	8005f50 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8005f72:	6822      	ldr	r2, [r4, #0]
 8005f74:	2115      	movs	r1, #21
 8005f76:	4620      	mov	r0, r4
 8005f78:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8005f7c:	6813      	ldr	r3, [r2, #0]
 8005f7e:	4798      	blx	r3
 8005f80:	e7e6      	b.n	8005f50 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4620      	mov	r0, r4
 8005f86:	4798      	blx	r3
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d1e1      	bne.n	8005f50 <jpeg_finish_decompress+0x34>
}
 8005f8c:	bd10      	pop	{r4, pc}

08005f8e <jpeg_start_decompress>:
 */

GLOBAL(boolean)
jpeg_start_decompress (j_decompress_ptr cinfo)
{
  if (cinfo->global_state == DSTATE_READY) {
 8005f8e:	6943      	ldr	r3, [r0, #20]
 8005f90:	2bca      	cmp	r3, #202	; 0xca
{
 8005f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f96:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 8005f98:	d10a      	bne.n	8005fb0 <jpeg_start_decompress+0x22>
    /* First call: initialize master control, select active modules */
    jinit_master_decompress(cinfo);
 8005f9a:	f004 fb3d 	bl	800a618 <jinit_master_decompress>
    if (cinfo->buffered_image) {
 8005f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fa0:	b123      	cbz	r3, 8005fac <jpeg_start_decompress+0x1e>
      /* No more work here; expecting jpeg_start_output next */
      cinfo->global_state = DSTATE_BUFIMAGE;
 8005fa2:	23cf      	movs	r3, #207	; 0xcf
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
  return TRUE;
 8005fa4:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8005fa6:	6163      	str	r3, [r4, #20]
}
 8005fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 8005fac:	23cb      	movs	r3, #203	; 0xcb
 8005fae:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 8005fb0:	6962      	ldr	r2, [r4, #20]
 8005fb2:	2acb      	cmp	r2, #203	; 0xcb
 8005fb4:	d127      	bne.n	8006006 <jpeg_start_decompress+0x78>
    if (cinfo->inputctl->has_multiple_scans) {
 8005fb6:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	b12b      	cbz	r3, 8005fca <jpeg_start_decompress+0x3c>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	2231      	movs	r2, #49	; 0x31
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	615a      	str	r2, [r3, #20]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4798      	blx	r3
    cinfo->output_scan_number = cinfo->input_scan_number;
 8005fca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005fce:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8005fd2:	6962      	ldr	r2, [r4, #20]
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8005fd4:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8005fd8:	2acc      	cmp	r2, #204	; 0xcc
 8005fda:	d007      	beq.n	8005fec <jpeg_start_decompress+0x5e>
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 8005fe8:	23cc      	movs	r3, #204	; 0xcc
 8005fea:	6163      	str	r3, [r4, #20]
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8005fec:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8005ff0:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 8005ff2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	bb2b      	cbnz	r3, 8006046 <jpeg_start_decompress+0xb8>
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8005ffa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bf14      	ite	ne
 8006000:	23ce      	movne	r3, #206	; 0xce
 8006002:	23cd      	moveq	r3, #205	; 0xcd
 8006004:	e7ce      	b.n	8005fa4 <jpeg_start_decompress+0x16>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 8006006:	2acc      	cmp	r2, #204	; 0xcc
 8006008:	d0f0      	beq.n	8005fec <jpeg_start_decompress+0x5e>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	2115      	movs	r1, #21
 800600e:	4620      	mov	r0, r4
 8006010:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4798      	blx	r3
 8006018:	e7db      	b.n	8005fd2 <jpeg_start_decompress+0x44>
      if (cinfo->progress != NULL) {
 800601a:	68a3      	ldr	r3, [r4, #8]
 800601c:	b123      	cbz	r3, 8006028 <jpeg_start_decompress+0x9a>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800601e:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 8006020:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8006028:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800602c:	462a      	mov	r2, r5
 800602e:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 8006030:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8006034:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006038:	2300      	movs	r3, #0
 800603a:	4619      	mov	r1, r3
 800603c:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 800603e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006042:	429f      	cmp	r7, r3
 8006044:	d011      	beq.n	800606a <jpeg_start_decompress+0xdc>
    while (cinfo->output_scanline < cinfo->output_height) {
 8006046:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800604a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800604c:	4291      	cmp	r1, r2
 800604e:	d3e4      	bcc.n	800601a <jpeg_start_decompress+0x8c>
    (*cinfo->master->finish_output_pass) (cinfo);
 8006050:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8006054:	4620      	mov	r0, r4
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800605a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800605e:	4620      	mov	r0, r4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8006064:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8006068:	e7c3      	b.n	8005ff2 <jpeg_start_decompress+0x64>
	return FALSE;		/* No progress made, must suspend */
 800606a:	2000      	movs	r0, #0
 800606c:	e79c      	b.n	8005fa8 <jpeg_start_decompress+0x1a>

0800606e <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 800606e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006070:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 8006072:	6942      	ldr	r2, [r0, #20]
{
 8006074:	4604      	mov	r4, r0
 8006076:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 8006078:	2acd      	cmp	r2, #205	; 0xcd
 800607a:	d005      	beq.n	8006088 <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800607c:	6803      	ldr	r3, [r0, #0]
 800607e:	2115      	movs	r1, #21
 8006080:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 8006088:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800608c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800608e:	429a      	cmp	r2, r3
 8006090:	d30a      	bcc.n	80060a8 <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	227e      	movs	r2, #126	; 0x7e
 8006096:	4620      	mov	r0, r4
 8006098:	f04f 31ff 	mov.w	r1, #4294967295
 800609c:	615a      	str	r2, [r3, #20]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	4798      	blx	r3
    return 0;
 80060a2:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 80060a4:	b003      	add	sp, #12
 80060a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 80060a8:	68a0      	ldr	r0, [r4, #8]
 80060aa:	b120      	cbz	r0, 80060b6 <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 80060ac:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 80060b0:	6803      	ldr	r3, [r0, #0]
 80060b2:	4620      	mov	r0, r4
 80060b4:	4798      	blx	r3
  row_ctr = 0;
 80060b6:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 80060b8:	4620      	mov	r0, r4
 80060ba:	aa01      	add	r2, sp, #4
 80060bc:	4629      	mov	r1, r5
  row_ctr = 0;
 80060be:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 80060c0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 80060c4:	685f      	ldr	r7, [r3, #4]
 80060c6:	4633      	mov	r3, r6
 80060c8:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 80060ca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80060ce:	9801      	ldr	r0, [sp, #4]
 80060d0:	4403      	add	r3, r0
 80060d2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 80060d6:	e7e5      	b.n	80060a4 <jpeg_read_scanlines+0x36>

080060d8 <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 80060d8:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 80060da:	6984      	ldr	r4, [r0, #24]
{
 80060dc:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 80060de:	6863      	ldr	r3, [r4, #4]
 80060e0:	b943      	cbnz	r3, 80060f4 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 80060e2:	68e3      	ldr	r3, [r4, #12]
 80060e4:	4798      	blx	r3
 80060e6:	b928      	cbnz	r0, 80060f4 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	2219      	movs	r2, #25
 80060ec:	4628      	mov	r0, r5
 80060ee:	615a      	str	r2, [r3, #20]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4798      	blx	r3
  src->bytes_in_buffer--;
 80060f4:	6863      	ldr	r3, [r4, #4]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	6022      	str	r2, [r4, #0]
}
 8006100:	7818      	ldrb	r0, [r3, #0]
 8006102:	bd38      	pop	{r3, r4, r5, pc}

08006104 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 8006104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006108:	4680      	mov	r8, r0
 800610a:	460e      	mov	r6, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 800610c:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8006110:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 8006114:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
  while (e->a < 0x8000L) {
 8006118:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800611c:	db20      	blt.n	8006160 <arith_decode+0x5c>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 800611e:	7830      	ldrb	r0, [r6, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8006120:	4b2e      	ldr	r3, [pc, #184]	; (80061dc <arith_decode+0xd8>)
 8006122:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8006126:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 800612a:	68a5      	ldr	r5, [r4, #8]
  temp = e->a - qe;
 800612c:	eba2 4227 	sub.w	r2, r2, r7, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8006130:	ea4f 2e27 	mov.w	lr, r7, asr #8
  temp <<= e->ct;
 8006134:	fa02 f101 	lsl.w	r1, r2, r1
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 8006138:	ea4f 4c27 	mov.w	ip, r7, asr #16
  e->a = temp;
 800613c:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 800613e:	428d      	cmp	r5, r1
 8006140:	db3c      	blt.n	80061bc <arith_decode+0xb8>
    e->c -= temp;
 8006142:	1a69      	subs	r1, r5, r1
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 8006144:	4594      	cmp	ip, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8006146:	f020 057f 	bic.w	r5, r0, #127	; 0x7f
      e->a = qe;
 800614a:	f8c4 c00c 	str.w	ip, [r4, #12]
    e->c -= temp;
 800614e:	60a1      	str	r1, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8006150:	b26d      	sxtb	r5, r5
    if (e->a < qe) {
 8006152:	dd2e      	ble.n	80061b2 <arith_decode+0xae>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8006154:	ea85 050e 	eor.w	r5, r5, lr
 8006158:	7035      	strb	r5, [r6, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 800615a:	09c0      	lsrs	r0, r0, #7
 800615c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (--e->ct < 0) {
 8006160:	3901      	subs	r1, #1
 8006162:	2900      	cmp	r1, #0
 8006164:	6121      	str	r1, [r4, #16]
 8006166:	da1a      	bge.n	800619e <arith_decode+0x9a>
      if (cinfo->unread_marker)
 8006168:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 800616c:	b96b      	cbnz	r3, 800618a <arith_decode+0x86>
	data = get_byte(cinfo);	/* read next input byte */
 800616e:	4640      	mov	r0, r8
 8006170:	f7ff ffb2 	bl	80060d8 <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 8006174:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 8006176:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 8006178:	d108      	bne.n	800618c <arith_decode+0x88>
	  do data = get_byte(cinfo);
 800617a:	4640      	mov	r0, r8
 800617c:	f7ff ffac 	bl	80060d8 <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 8006180:	28ff      	cmp	r0, #255	; 0xff
 8006182:	d0fa      	beq.n	800617a <arith_decode+0x76>
	  if (data == 0)
 8006184:	b110      	cbz	r0, 800618c <arith_decode+0x88>
	    cinfo->unread_marker = data;
 8006186:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 800618a:	2500      	movs	r5, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 800618c:	68a0      	ldr	r0, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800618e:	6923      	ldr	r3, [r4, #16]
      e->c = (e->c << 8) | data; /* insert data into C register */
 8006190:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8006194:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 8006198:	60a5      	str	r5, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800619a:	d404      	bmi.n	80061a6 <arith_decode+0xa2>
 800619c:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 800619e:	68e3      	ldr	r3, [r4, #12]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	60e3      	str	r3, [r4, #12]
 80061a4:	e7b6      	b.n	8006114 <arith_decode+0x10>
	if (++e->ct == 0)
 80061a6:	3309      	adds	r3, #9
 80061a8:	6123      	str	r3, [r4, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f7      	bne.n	800619e <arith_decode+0x9a>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 80061ae:	60e7      	str	r7, [r4, #12]
 80061b0:	e7f5      	b.n	800619e <arith_decode+0x9a>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 80061b2:	407d      	eors	r5, r7
 80061b4:	7035      	strb	r5, [r6, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 80061b6:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 80061ba:	e7ce      	b.n	800615a <arith_decode+0x56>
  } else if (e->a < 0x8000L) {
 80061bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80061c0:	dacb      	bge.n	800615a <arith_decode+0x56>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 80061c2:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 80061c6:	4594      	cmp	ip, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 80061c8:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 80061ca:	dd02      	ble.n	80061d2 <arith_decode+0xce>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 80061cc:	407b      	eors	r3, r7
 80061ce:	7033      	strb	r3, [r6, #0]
 80061d0:	e7f1      	b.n	80061b6 <arith_decode+0xb2>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 80061d2:	ea83 030e 	eor.w	r3, r3, lr
 80061d6:	7033      	strb	r3, [r6, #0]
 80061d8:	e7bf      	b.n	800615a <arith_decode+0x56>
 80061da:	bf00      	nop
 80061dc:	080122bc 	.word	0x080122bc

080061e0 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 80061e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 80061e4:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 80061e8:	f500 71aa 	add.w	r1, r0, #340	; 0x154
{
 80061ec:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 80061ee:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 80061f2:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 80061f6:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 808a 	beq.w	8006312 <start_pass+0x132>
    if (cinfo->Ss == 0) {
 80061fe:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 8006202:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 8006206:	b95a      	cbnz	r2, 8006220 <start_pass+0x40>
      if (cinfo->Se != 0)
 8006208:	b1a1      	cbz	r1, 8006234 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	2611      	movs	r6, #17
 800620e:	e9c3 1707 	strd	r1, r7, [r3, #28]
 8006212:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8006216:	6258      	str	r0, [r3, #36]	; 0x24
 8006218:	4620      	mov	r0, r4
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4798      	blx	r3
 800621e:	e00f      	b.n	8006240 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 8006220:	428a      	cmp	r2, r1
 8006222:	dcf2      	bgt.n	800620a <start_pass+0x2a>
 8006224:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8006228:	428b      	cmp	r3, r1
 800622a:	dbee      	blt.n	800620a <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 800622c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8006230:	2b01      	cmp	r3, #1
 8006232:	d1ea      	bne.n	800620a <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 8006234:	b117      	cbz	r7, 800623c <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 8006236:	1e7b      	subs	r3, r7, #1
 8006238:	4283      	cmp	r3, r0
 800623a:	d1e6      	bne.n	800620a <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800623c:	280d      	cmp	r0, #13
 800623e:	dce4      	bgt.n	800620a <start_pass+0x2a>
 8006240:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 8006244:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8006248:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800624c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8006250:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8006254:	454b      	cmp	r3, r9
 8006256:	dc1d      	bgt.n	8006294 <start_pass+0xb4>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 8006258:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d153      	bne.n	8006308 <start_pass+0x128>
      if (cinfo->Ss == 0)
 8006260:	2a00      	cmp	r2, #0
 8006262:	d14f      	bne.n	8006304 <start_pass+0x124>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 8006264:	4b63      	ldr	r3, [pc, #396]	; (80063f4 <start_pass+0x214>)
{
 8006266:	f04f 0800 	mov.w	r8, #0
 800626a:	f105 0914 	add.w	r9, r5, #20
 800626e:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8006270:	46c2      	mov	sl, r8
    entropy->pub.decode_mcu = decode_mcu;
 8006272:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8006274:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8006278:	4543      	cmp	r3, r8
 800627a:	dc63      	bgt.n	8006344 <start_pass+0x164>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 800627c:	2300      	movs	r3, #0
  entropy->a = 0;
 800627e:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 8006282:	f06f 030f 	mvn.w	r3, #15
 8006286:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 8006288:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800628c:	636b      	str	r3, [r5, #52]	; 0x34
}
 800628e:	b003      	add	sp, #12
 8006290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8006294:	f85a 3b04 	ldr.w	r3, [sl], #4
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8006298:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800629c:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800629e:	0230      	lsls	r0, r6, #8
 80062a0:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 80062a4:	b162      	cbz	r2, 80062c0 <start_pass+0xe0>
 80062a6:	580a      	ldr	r2, [r1, r0]
 80062a8:	2a00      	cmp	r2, #0
 80062aa:	da09      	bge.n	80062c0 <start_pass+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 80062ac:	6822      	ldr	r2, [r4, #0]
 80062ae:	2300      	movs	r3, #0
 80062b0:	f04f 31ff 	mov.w	r1, #4294967295
 80062b4:	4620      	mov	r0, r4
 80062b6:	61d3      	str	r3, [r2, #28]
 80062b8:	e9c2 b605 	strd	fp, r6, [r2, #20]
 80062bc:	6852      	ldr	r2, [r2, #4]
 80062be:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 80062c0:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 80062c4:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 80062c8:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 80062cc:	42ba      	cmp	r2, r7
 80062ce:	da02      	bge.n	80062d6 <start_pass+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80062d0:	f109 0901 	add.w	r9, r9, #1
 80062d4:	e7ba      	b.n	800624c <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 80062d6:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 80062da:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 80062de:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 80062e2:	4291      	cmp	r1, r2
 80062e4:	d008      	beq.n	80062f8 <start_pass+0x118>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 80062e6:	6822      	ldr	r2, [r4, #0]
 80062e8:	f04f 31ff 	mov.w	r1, #4294967295
 80062ec:	4620      	mov	r0, r4
 80062ee:	61d7      	str	r7, [r2, #28]
 80062f0:	e9c2 b605 	strd	fp, r6, [r2, #20]
 80062f4:	6852      	ldr	r2, [r2, #4]
 80062f6:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 80062f8:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 80062fc:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 80062fe:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8006302:	e7e1      	b.n	80062c8 <start_pass+0xe8>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 8006304:	4b3c      	ldr	r3, [pc, #240]	; (80063f8 <start_pass+0x218>)
 8006306:	e7ae      	b.n	8006266 <start_pass+0x86>
      if (cinfo->Ss == 0)
 8006308:	b90a      	cbnz	r2, 800630e <start_pass+0x12e>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800630a:	4b3c      	ldr	r3, [pc, #240]	; (80063fc <start_pass+0x21c>)
 800630c:	e7ab      	b.n	8006266 <start_pass+0x86>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800630e:	4b3c      	ldr	r3, [pc, #240]	; (8006400 <start_pass+0x220>)
 8006310:	e7a9      	b.n	8006266 <start_pass+0x86>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8006312:	b96a      	cbnz	r2, 8006330 <start_pass+0x150>
 8006314:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 8006318:	b953      	cbnz	r3, 8006330 <start_pass+0x150>
 800631a:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800631e:	b93b      	cbnz	r3, 8006330 <start_pass+0x150>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8006320:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8006324:	2b3f      	cmp	r3, #63	; 0x3f
 8006326:	dc0b      	bgt.n	8006340 <start_pass+0x160>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8006328:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 800632c:	4293      	cmp	r3, r2
 800632e:	d007      	beq.n	8006340 <start_pass+0x160>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	227d      	movs	r2, #125	; 0x7d
 8006334:	f04f 31ff 	mov.w	r1, #4294967295
 8006338:	4620      	mov	r0, r4
 800633a:	615a      	str	r2, [r3, #20]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 8006340:	4b30      	ldr	r3, [pc, #192]	; (8006404 <start_pass+0x224>)
 8006342:	e790      	b.n	8006266 <start_pass+0x86>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8006344:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 8006348:	f856 bb04 	ldr.w	fp, [r6], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800634c:	b133      	cbz	r3, 800635c <start_pass+0x17c>
 800634e:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8006352:	bb43      	cbnz	r3, 80063a6 <start_pass+0x1c6>
 8006354:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d13a      	bne.n	80063d2 <start_pass+0x1f2>
      tbl = compptr->dc_tbl_no;
 800635c:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8006360:	2f0f      	cmp	r7, #15
 8006362:	d906      	bls.n	8006372 <start_pass+0x192>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	2232      	movs	r2, #50	; 0x32
 8006368:	4620      	mov	r0, r4
 800636a:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 8006372:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	b933      	cbnz	r3, 8006388 <start_pass+0x1a8>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800637a:	6863      	ldr	r3, [r4, #4]
 800637c:	2240      	movs	r2, #64	; 0x40
 800637e:	2101      	movs	r1, #1
 8006380:	4620      	mov	r0, r4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4798      	blx	r3
 8006386:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 8006388:	2240      	movs	r2, #64	; 0x40
 800638a:	2100      	movs	r1, #0
 800638c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800638e:	f007 fa5d 	bl	800d84c <memset>
      entropy->last_dc_val[ci] = 0;
 8006392:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 8006396:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800639a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800639e:	b9eb      	cbnz	r3, 80063dc <start_pass+0x1fc>
 80063a0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80063a4:	b1ab      	cbz	r3, 80063d2 <start_pass+0x1f2>
      tbl = compptr->ac_tbl_no;
 80063a6:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 80063aa:	2f0f      	cmp	r7, #15
 80063ac:	d819      	bhi.n	80063e2 <start_pass+0x202>
      if (entropy->ac_stats[tbl] == NULL)
 80063ae:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80063b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b4:	b93b      	cbnz	r3, 80063c6 <start_pass+0x1e6>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 80063b6:	6863      	ldr	r3, [r4, #4]
 80063b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063bc:	2101      	movs	r1, #1
 80063be:	4620      	mov	r0, r4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4798      	blx	r3
 80063c4:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 80063c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ca:	2100      	movs	r1, #0
 80063cc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80063ce:	f007 fa3d 	bl	800d84c <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80063d2:	f108 0801 	add.w	r8, r8, #1
 80063d6:	f109 0904 	add.w	r9, r9, #4
 80063da:	e74b      	b.n	8006274 <start_pass+0x94>
	(cinfo->progressive_mode && cinfo->Ss)) {
 80063dc:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 80063e0:	e7e0      	b.n	80063a4 <start_pass+0x1c4>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	2232      	movs	r2, #50	; 0x32
 80063e6:	4620      	mov	r0, r4
 80063e8:	e9c3 2705 	strd	r2, r7, [r3, #20]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4798      	blx	r3
 80063f0:	e7dd      	b.n	80063ae <start_pass+0x1ce>
 80063f2:	bf00      	nop
 80063f4:	080069ab 	.word	0x080069ab
 80063f8:	08006877 	.word	0x08006877
 80063fc:	08006825 	.word	0x08006825
 8006400:	080066ff 	.word	0x080066ff
 8006404:	080064ab 	.word	0x080064ab

08006408 <process_restart>:
{
 8006408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800640c:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 8006410:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	4798      	blx	r3
 8006416:	b928      	cbnz	r0, 8006424 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	2219      	movs	r2, #25
 800641c:	4620      	mov	r0, r4
 800641e:	615a      	str	r2, [r3, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4798      	blx	r3
{
 8006424:	2600      	movs	r6, #0
 8006426:	f105 0714 	add.w	r7, r5, #20
 800642a:	f504 78aa 	add.w	r8, r4, #340	; 0x154
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800642e:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8006430:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8006434:	42b3      	cmp	r3, r6
 8006436:	dc0a      	bgt.n	800644e <process_restart+0x46>
  entropy->c = 0;
 8006438:	2300      	movs	r3, #0
  entropy->a = 0;
 800643a:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800643e:	f06f 030f 	mvn.w	r3, #15
 8006442:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 8006444:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8006448:	636b      	str	r3, [r5, #52]	; 0x34
}
 800644a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800644e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 8006452:	f858 ab04 	ldr.w	sl, [r8], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8006456:	b12b      	cbz	r3, 8006464 <process_restart+0x5c>
 8006458:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800645c:	b9ab      	cbnz	r3, 800648a <process_restart+0x82>
 800645e:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8006462:	b9e3      	cbnz	r3, 800649e <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 8006464:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006468:	2240      	movs	r2, #64	; 0x40
 800646a:	2100      	movs	r1, #0
 800646c:	330e      	adds	r3, #14
 800646e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8006472:	f007 f9eb 	bl	800d84c <memset>
      entropy->last_dc_val[ci] = 0;
 8006476:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 800647a:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800647e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006482:	b97b      	cbnz	r3, 80064a4 <process_restart+0x9c>
 8006484:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8006488:	b14b      	cbz	r3, 800649e <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800648a:	f8da 3018 	ldr.w	r3, [sl, #24]
 800648e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006492:	2100      	movs	r1, #0
 8006494:	331e      	adds	r3, #30
 8006496:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800649a:	f007 f9d7 	bl	800d84c <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800649e:	3601      	adds	r6, #1
 80064a0:	3704      	adds	r7, #4
 80064a2:	e7c5      	b.n	8006430 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 80064a4:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 80064a8:	e7ee      	b.n	8006488 <process_restart+0x80>

080064aa <decode_mcu>:
{
 80064aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 80064ae:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 80064b2:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 80064b4:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 80064b8:	ed2d 8b02 	vpush	{d8}
 80064bc:	b087      	sub	sp, #28
 80064be:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 80064c0:	b133      	cbz	r3, 80064d0 <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 80064c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80064c4:	b90b      	cbnz	r3, 80064ca <decode_mcu+0x20>
      process_restart(cinfo);
 80064c6:	f7ff ff9f 	bl	8006408 <process_restart>
    entropy->restarts_to_go--;
 80064ca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80064cc:	3b01      	subs	r3, #1
 80064ce:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 80064d0:	692b      	ldr	r3, [r5, #16]
 80064d2:	3301      	adds	r3, #1
 80064d4:	f000 809f 	beq.w	8006616 <decode_mcu+0x16c>
  natural_order = cinfo->natural_order;
 80064d8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80064dc:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 80064de:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80064e0:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 80064e4:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 80064e6:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 80064ea:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80064ee:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 80064f2:	42bb      	cmp	r3, r7
 80064f4:	f340 808f 	ble.w	8006616 <decode_mcu+0x16c>
    block = MCU_data[blkn];
 80064f8:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 80064fa:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 80064fc:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 80064fe:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8006502:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 8006504:	f852 3b04 	ldr.w	r3, [r2], #4
 8006508:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 800650a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800650e:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8006512:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8006516:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 800651a:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 800651c:	6952      	ldr	r2, [r2, #20]
 800651e:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 8006522:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8006524:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 8006528:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 800652a:	4631      	mov	r1, r6
 800652c:	f7ff fdea 	bl	8006104 <arith_decode>
 8006530:	bb68      	cbnz	r0, 800658e <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 8006532:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 8006536:	f8db 3014 	ldr.w	r3, [fp, #20]
 800653a:	9a00      	ldr	r2, [sp, #0]
 800653c:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 800653e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80c4 	beq.w	80066d0 <decode_mcu+0x226>
    tbl = compptr->ac_tbl_no;
 8006548:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 800654a:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 800654c:	699b      	ldr	r3, [r3, #24]
    k = 0;
 800654e:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8006552:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 8006556:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800655a:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800655e:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 8006560:	eb03 0901 	add.w	r9, r3, r1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8006564:	4649      	mov	r1, r9
 8006566:	f7ff fdcd 	bl	8006104 <arith_decode>
 800656a:	2800      	cmp	r0, #0
 800656c:	f040 80b0 	bne.w	80066d0 <decode_mcu+0x226>
	if (arith_decode(cinfo, st + 1)) break;
 8006570:	f109 0101 	add.w	r1, r9, #1
 8006574:	4620      	mov	r0, r4
	k++;
 8006576:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 8006578:	f7ff fdc4 	bl	8006104 <arith_decode>
 800657c:	2800      	cmp	r0, #0
 800657e:	d16e      	bne.n	800665e <decode_mcu+0x1b4>
	if (k >= cinfo->lim_Se) {
 8006580:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 8006584:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 8006588:	42b2      	cmp	r2, r6
 800658a:	dcf1      	bgt.n	8006570 <decode_mcu+0xc6>
 800658c:	e038      	b.n	8006600 <decode_mcu+0x156>
      sign = arith_decode(cinfo, st + 1);
 800658e:	1c71      	adds	r1, r6, #1
 8006590:	4620      	mov	r0, r4
 8006592:	f7ff fdb7 	bl	8006104 <arith_decode>
      st += 2; st += sign;
 8006596:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 8006598:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800659a:	4620      	mov	r0, r4
      st += 2; st += sign;
 800659c:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 80065a0:	4651      	mov	r1, sl
 80065a2:	f7ff fdaf 	bl	8006104 <arith_decode>
 80065a6:	4606      	mov	r6, r0
 80065a8:	b140      	cbz	r0, 80065bc <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 80065aa:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 80065ae:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 80065b2:	4651      	mov	r1, sl
 80065b4:	4620      	mov	r0, r4
 80065b6:	f7ff fda5 	bl	8006104 <arith_decode>
 80065ba:	b9e8      	cbnz	r0, 80065f8 <decode_mcu+0x14e>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 80065bc:	9b02      	ldr	r3, [sp, #8]
 80065be:	4423      	add	r3, r4
 80065c0:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 80065c4:	4699      	mov	r9, r3
 80065c6:	2301      	movs	r3, #1
 80065c8:	fa03 f202 	lsl.w	r2, r3, r2
 80065cc:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 80065d0:	da2a      	bge.n	8006628 <decode_mcu+0x17e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 80065d2:	2200      	movs	r2, #0
      st += 14;
 80065d4:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 80065d8:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 80065da:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 80065de:	1076      	asrs	r6, r6, #1
 80065e0:	d130      	bne.n	8006644 <decode_mcu+0x19a>
      v += 1; if (sign) v = -v;
 80065e2:	f1b8 0f00 	cmp.w	r8, #0
 80065e6:	d137      	bne.n	8006658 <decode_mcu+0x1ae>
 80065e8:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 80065ec:	f8db 2014 	ldr.w	r2, [fp, #20]
 80065f0:	444a      	add	r2, r9
 80065f2:	f8cb 2014 	str.w	r2, [fp, #20]
 80065f6:	e79e      	b.n	8006536 <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 80065f8:	0076      	lsls	r6, r6, #1
 80065fa:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80065fe:	d110      	bne.n	8006622 <decode_mcu+0x178>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	2275      	movs	r2, #117	; 0x75
 8006604:	f04f 31ff 	mov.w	r1, #4294967295
 8006608:	4620      	mov	r0, r4
 800660a:	615a      	str	r2, [r3, #20]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 8006610:	f04f 33ff 	mov.w	r3, #4294967295
 8006614:	612b      	str	r3, [r5, #16]
}
 8006616:	2001      	movs	r0, #1
 8006618:	b007      	add	sp, #28
 800661a:	ecbd 8b02 	vpop	{d8}
 800661e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 8006622:	f10a 0a01 	add.w	sl, sl, #1
 8006626:	e7c4      	b.n	80065b2 <decode_mcu+0x108>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8006628:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800662c:	2301      	movs	r3, #1
 800662e:	fa03 f202 	lsl.w	r2, r3, r2
 8006632:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8006636:	bfcc      	ite	gt
 8006638:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800663c:	f108 0201 	addle.w	r2, r8, #1
 8006640:	0092      	lsls	r2, r2, #2
 8006642:	e7c7      	b.n	80065d4 <decode_mcu+0x12a>
	if (arith_decode(cinfo, st)) v |= m;
 8006644:	4620      	mov	r0, r4
 8006646:	9102      	str	r1, [sp, #8]
 8006648:	f7ff fd5c 	bl	8006104 <arith_decode>
 800664c:	9902      	ldr	r1, [sp, #8]
 800664e:	2800      	cmp	r0, #0
 8006650:	d0c5      	beq.n	80065de <decode_mcu+0x134>
 8006652:	ea49 0906 	orr.w	r9, r9, r6
 8006656:	e7c2      	b.n	80065de <decode_mcu+0x134>
      v += 1; if (sign) v = -v;
 8006658:	ea6f 0909 	mvn.w	r9, r9
 800665c:	e7c6      	b.n	80065ec <decode_mcu+0x142>
      st += 2;
 800665e:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8006662:	ee18 1a10 	vmov	r1, s16
 8006666:	4620      	mov	r0, r4
 8006668:	f7ff fd4c 	bl	8006104 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 800666c:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800666e:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 8006670:	4620      	mov	r0, r4
 8006672:	f7ff fd47 	bl	8006104 <arith_decode>
 8006676:	4680      	mov	r8, r0
 8006678:	b1a8      	cbz	r0, 80066a6 <decode_mcu+0x1fc>
	if (arith_decode(cinfo, st)) {
 800667a:	4649      	mov	r1, r9
 800667c:	4620      	mov	r0, r4
 800667e:	f7ff fd41 	bl	8006104 <arith_decode>
 8006682:	b180      	cbz	r0, 80066a6 <decode_mcu+0x1fc>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8006684:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 8006688:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 800668c:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8006690:	42b1      	cmp	r1, r6
 8006692:	bfac      	ite	ge
 8006694:	21bd      	movge	r1, #189	; 0xbd
 8006696:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 8006698:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 800669c:	4649      	mov	r1, r9
 800669e:	4620      	mov	r0, r4
 80066a0:	f7ff fd30 	bl	8006104 <arith_decode>
 80066a4:	b9b0      	cbnz	r0, 80066d4 <decode_mcu+0x22a>
      st += 14;
 80066a6:	f109 010e 	add.w	r1, r9, #14
      v = m;
 80066aa:	46c1      	mov	r9, r8
      while (m >>= 1)
 80066ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80066b0:	d118      	bne.n	80066e4 <decode_mcu+0x23a>
      v += 1; if (sign) v = -v;
 80066b2:	9b01      	ldr	r3, [sp, #4]
 80066b4:	bb03      	cbnz	r3, 80066f8 <decode_mcu+0x24e>
 80066b6:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 80066ba:	9b04      	ldr	r3, [sp, #16]
 80066bc:	9900      	ldr	r1, [sp, #0]
 80066be:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80066c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 80066c6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80066ca:	42b3      	cmp	r3, r6
 80066cc:	f73f af43 	bgt.w	8006556 <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80066d0:	3701      	adds	r7, #1
 80066d2:	e70c      	b.n	80064ee <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 80066d4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80066d8:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 80066dc:	d090      	beq.n	8006600 <decode_mcu+0x156>
	    st += 1;
 80066de:	f109 0901 	add.w	r9, r9, #1
 80066e2:	e7db      	b.n	800669c <decode_mcu+0x1f2>
	if (arith_decode(cinfo, st)) v |= m;
 80066e4:	4620      	mov	r0, r4
 80066e6:	9102      	str	r1, [sp, #8]
 80066e8:	f7ff fd0c 	bl	8006104 <arith_decode>
 80066ec:	9902      	ldr	r1, [sp, #8]
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d0dc      	beq.n	80066ac <decode_mcu+0x202>
 80066f2:	ea49 0908 	orr.w	r9, r9, r8
 80066f6:	e7d9      	b.n	80066ac <decode_mcu+0x202>
      v += 1; if (sign) v = -v;
 80066f8:	ea6f 0209 	mvn.w	r2, r9
 80066fc:	e7dd      	b.n	80066ba <decode_mcu+0x210>

080066fe <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 80066fe:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8006702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006706:	4604      	mov	r4, r0
 8006708:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800670a:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800670e:	ed2d 8b02 	vpush	{d8}
 8006712:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 8006714:	b133      	cbz	r3, 8006724 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 8006716:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006718:	b90b      	cbnz	r3, 800671e <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 800671a:	f7ff fe75 	bl	8006408 <process_restart>
    entropy->restarts_to_go--;
 800671e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006720:	3b01      	subs	r3, #1
 8006722:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8006724:	6933      	ldr	r3, [r6, #16]
 8006726:	3301      	adds	r3, #1
 8006728:	d076      	beq.n	8006818 <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800672a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800672e:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8006730:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 8006734:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8006738:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800673a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 800673e:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8006742:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 8006744:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8006748:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800674c:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800674e:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 8006750:	2f00      	cmp	r7, #0
 8006752:	dc37      	bgt.n	80067c4 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8006754:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8006758:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800675c:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 800675e:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 8006762:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8006766:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800676a:	42ab      	cmp	r3, r5
 800676c:	db54      	blt.n	8006818 <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800676e:	1e6b      	subs	r3, r5, #1
 8006770:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 8006772:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8006774:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006778:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800677c:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 8006780:	dd05      	ble.n	800678e <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8006782:	4651      	mov	r1, sl
 8006784:	4620      	mov	r0, r4
 8006786:	f7ff fcbd 	bl	8006104 <arith_decode>
 800678a:	2800      	cmp	r0, #0
 800678c:	d144      	bne.n	8006818 <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 800678e:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 8006792:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 8006794:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 8006798:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800679c:	b1d1      	cbz	r1, 80067d4 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 800679e:	f10a 0102 	add.w	r1, sl, #2
 80067a2:	4620      	mov	r0, r4
 80067a4:	f7ff fcae 	bl	8006104 <arith_decode>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d0dc      	beq.n	8006766 <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 80067ac:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 80067b0:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 80067b4:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 80067b6:	bfb4      	ite	lt
 80067b8:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 80067ba:	9a01      	ldrge	r2, [sp, #4]
 80067bc:	4413      	add	r3, r2
 80067be:	f8a8 3000 	strh.w	r3, [r8]
 80067c2:	e7d0      	b.n	8006766 <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 80067c4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80067c8:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1c1      	bne.n	8006754 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 80067d0:	3f01      	subs	r7, #1
 80067d2:	e7bd      	b.n	8006750 <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 80067d4:	f10a 0101 	add.w	r1, sl, #1
 80067d8:	4620      	mov	r0, r4
 80067da:	f7ff fc93 	bl	8006104 <arith_decode>
 80067de:	b150      	cbz	r0, 80067f6 <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 80067e0:	ee18 1a10 	vmov	r1, s16
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7ff fc8d 	bl	8006104 <arith_decode>
	  *thiscoef = m1;
 80067ea:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80067ee:	2800      	cmp	r0, #0
 80067f0:	bf18      	it	ne
 80067f2:	4613      	movne	r3, r2
 80067f4:	e7e3      	b.n	80067be <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 80067f6:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 80067fa:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 80067fe:	42aa      	cmp	r2, r5
 8006800:	dac5      	bge.n	800678e <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	2275      	movs	r2, #117	; 0x75
 8006806:	f04f 31ff 	mov.w	r1, #4294967295
 800680a:	4620      	mov	r0, r4
 800680c:	615a      	str	r2, [r3, #20]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 8006812:	f04f 33ff 	mov.w	r3, #4294967295
 8006816:	6133      	str	r3, [r6, #16]
}
 8006818:	2001      	movs	r0, #1
 800681a:	b005      	add	sp, #20
 800681c:	ecbd 8b02 	vpop	{d8}
 8006820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006824 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 8006824:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8006828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682c:	4604      	mov	r4, r0
 800682e:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8006830:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8006834:	b133      	cbz	r3, 8006844 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 8006836:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006838:	b90b      	cbnz	r3, 800683e <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 800683a:	f7ff fde5 	bl	8006408 <process_restart>
    entropy->restarts_to_go--;
 800683e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006840:	3b01      	subs	r3, #1
 8006842:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8006844:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8006848:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800684a:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800684c:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800684e:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8006850:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8006854:	42ab      	cmp	r3, r5
 8006856:	dc02      	bgt.n	800685e <decode_mcu_DC_refine+0x3a>
}
 8006858:	2001      	movs	r0, #1
 800685a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 800685e:	4631      	mov	r1, r6
 8006860:	4620      	mov	r0, r4
 8006862:	f7ff fc4f 	bl	8006104 <arith_decode>
 8006866:	b120      	cbz	r0, 8006872 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 8006868:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800686c:	8813      	ldrh	r3, [r2, #0]
 800686e:	433b      	orrs	r3, r7
 8006870:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8006872:	3501      	adds	r5, #1
 8006874:	e7ec      	b.n	8006850 <decode_mcu_DC_refine+0x2c>

08006876 <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 8006876:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800687a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687e:	4604      	mov	r4, r0
 8006880:	b087      	sub	sp, #28
 8006882:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8006884:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8006888:	b133      	cbz	r3, 8006898 <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800688a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800688c:	b90b      	cbnz	r3, 8006892 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 800688e:	f7ff fdbb 	bl	8006408 <process_restart>
    entropy->restarts_to_go--;
 8006892:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006894:	3b01      	subs	r3, #1
 8006896:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8006898:	6933      	ldr	r3, [r6, #16]
 800689a:	3301      	adds	r3, #1
 800689c:	d01d      	beq.n	80068da <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 800689e:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 80068a0:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 80068a4:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 80068a8:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 80068aa:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 80068ae:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 80068b8:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 80068ba:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 80068be:	42ab      	cmp	r3, r5
 80068c0:	db0b      	blt.n	80068da <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 80068c2:	1e69      	subs	r1, r5, #1
 80068c4:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 80068c8:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 80068ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80068ce:	eb03 0801 	add.w	r8, r3, r1
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 80068d2:	4641      	mov	r1, r8
 80068d4:	f7ff fc16 	bl	8006104 <arith_decode>
 80068d8:	b1b0      	cbz	r0, 8006908 <decode_mcu_AC_first+0x92>
}
 80068da:	2001      	movs	r0, #1
 80068dc:	b007      	add	sp, #28
 80068de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 80068e2:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 80068e4:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 80068e8:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 80068ec:	42aa      	cmp	r2, r5
 80068ee:	da0b      	bge.n	8006908 <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	2275      	movs	r2, #117	; 0x75
 80068f4:	f04f 31ff 	mov.w	r1, #4294967295
 80068f8:	4620      	mov	r0, r4
 80068fa:	615a      	str	r2, [r3, #20]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8006900:	f04f 33ff 	mov.w	r3, #4294967295
 8006904:	6133      	str	r3, [r6, #16]
	    return TRUE;
 8006906:	e7e8      	b.n	80068da <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 8006908:	f108 0101 	add.w	r1, r8, #1
 800690c:	4620      	mov	r0, r4
 800690e:	f7ff fbf9 	bl	8006104 <arith_decode>
 8006912:	2800      	cmp	r0, #0
 8006914:	d0e5      	beq.n	80068e2 <decode_mcu_AC_first+0x6c>
    st += 2;
 8006916:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800691a:	4659      	mov	r1, fp
 800691c:	4620      	mov	r0, r4
 800691e:	f7ff fbf1 	bl	8006104 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 8006922:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 8006924:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 8006926:	4620      	mov	r0, r4
 8006928:	f7ff fbec 	bl	8006104 <arith_decode>
 800692c:	4607      	mov	r7, r0
 800692e:	b1b0      	cbz	r0, 800695e <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 8006930:	4641      	mov	r1, r8
 8006932:	4620      	mov	r0, r4
 8006934:	f7ff fbe6 	bl	8006104 <arith_decode>
 8006938:	b188      	cbz	r0, 800695e <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800693a:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 800693c:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 800693e:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8006942:	18e1      	adds	r1, r4, r3
 8006944:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 8006948:	42a9      	cmp	r1, r5
 800694a:	bfac      	ite	ge
 800694c:	21bd      	movge	r1, #189	; 0xbd
 800694e:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 8006950:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 8006954:	4641      	mov	r1, r8
 8006956:	4620      	mov	r0, r4
 8006958:	f7ff fbd4 	bl	8006104 <arith_decode>
 800695c:	b988      	cbnz	r0, 8006982 <decode_mcu_AC_first+0x10c>
    st += 14;
 800695e:	f108 010e 	add.w	r1, r8, #14
    v = m;
 8006962:	463a      	mov	r2, r7
    while (m >>= 1)
 8006964:	107f      	asrs	r7, r7, #1
 8006966:	d113      	bne.n	8006990 <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	b9e3      	cbnz	r3, 80069a6 <decode_mcu_AC_first+0x130>
 800696c:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800696e:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 8006972:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8006976:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 8006978:	408a      	lsls	r2, r1
 800697a:	9902      	ldr	r1, [sp, #8]
 800697c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8006980:	e79b      	b.n	80068ba <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 8006982:	007f      	lsls	r7, r7, #1
 8006984:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 8006988:	d0b2      	beq.n	80068f0 <decode_mcu_AC_first+0x7a>
	  st += 1;
 800698a:	f108 0801 	add.w	r8, r8, #1
 800698e:	e7e1      	b.n	8006954 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 8006990:	4620      	mov	r0, r4
 8006992:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8006996:	f7ff fbb5 	bl	8006104 <arith_decode>
 800699a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800699e:	2800      	cmp	r0, #0
 80069a0:	d0e0      	beq.n	8006964 <decode_mcu_AC_first+0xee>
 80069a2:	433a      	orrs	r2, r7
 80069a4:	e7de      	b.n	8006964 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 80069a6:	43d2      	mvns	r2, r2
 80069a8:	e7e1      	b.n	800696e <decode_mcu_AC_first+0xf8>

080069aa <decode_mcu_DC_first>:
{
 80069aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 80069ae:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 80069b2:	b085      	sub	sp, #20
 80069b4:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 80069b6:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 80069ba:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 80069bc:	b133      	cbz	r3, 80069cc <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 80069be:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80069c0:	b90b      	cbnz	r3, 80069c6 <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 80069c2:	f7ff fd21 	bl	8006408 <process_restart>
    entropy->restarts_to_go--;
 80069c6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80069c8:	3b01      	subs	r3, #1
 80069ca:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 80069cc:	6933      	ldr	r3, [r6, #16]
 80069ce:	3301      	adds	r3, #1
 80069d0:	d073      	beq.n	8006aba <decode_mcu_DC_first+0x110>
 80069d2:	f504 73b8 	add.w	r3, r4, #368	; 0x170
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80069d6:	f04f 0800 	mov.w	r8, #0
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 80069e0:	4543      	cmp	r3, r8
 80069e2:	dd6a      	ble.n	8006aba <decode_mcu_DC_first+0x110>
    block = MCU_data[blkn];
 80069e4:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 80069e6:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 80069e8:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 80069ea:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80069ee:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 80069f0:	f852 3b04 	ldr.w	r3, [r2], #4
 80069f4:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 80069f6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80069fa:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 80069fe:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8006a02:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 8006a06:	6952      	ldr	r2, [r2, #20]
 8006a08:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 8006a0c:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8006a0e:	f8d9 5038 	ldr.w	r5, [r9, #56]	; 0x38
 8006a12:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 8006a14:	4629      	mov	r1, r5
 8006a16:	f7ff fb75 	bl	8006104 <arith_decode>
 8006a1a:	b958      	cbnz	r0, 8006a34 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 8006a1c:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 8006a20:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8006a24:	f108 0801 	add.w	r8, r8, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 8006a28:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006a2c:	4093      	lsls	r3, r2
 8006a2e:	9a02      	ldr	r2, [sp, #8]
 8006a30:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8006a32:	e7d3      	b.n	80069dc <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 8006a34:	1c69      	adds	r1, r5, #1
 8006a36:	4620      	mov	r0, r4
 8006a38:	f7ff fb64 	bl	8006104 <arith_decode>
      st += 2; st += sign;
 8006a3c:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 8006a3e:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 8006a40:	4620      	mov	r0, r4
      st += 2; st += sign;
 8006a42:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 8006a46:	4659      	mov	r1, fp
 8006a48:	f7ff fb5c 	bl	8006104 <arith_decode>
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	b140      	cbz	r0, 8006a62 <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 8006a50:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8006a54:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 8006a58:	4659      	mov	r1, fp
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f7ff fb52 	bl	8006104 <arith_decode>
 8006a60:	b9e0      	cbnz	r0, 8006a9c <decode_mcu_DC_first+0xf2>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8006a62:	9b00      	ldr	r3, [sp, #0]
 8006a64:	4423      	add	r3, r4
 8006a66:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8006a6a:	4699      	mov	r9, r3
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	fa03 f202 	lsl.w	r2, r3, r2
 8006a72:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 8006a76:	da27      	bge.n	8006ac8 <decode_mcu_DC_first+0x11e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      st += 14;
 8006a7e:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 8006a82:	46a9      	mov	r9, r5
 8006a84:	106d      	asrs	r5, r5, #1
 8006a86:	d12d      	bne.n	8006ae4 <decode_mcu_DC_first+0x13a>
      v += 1; if (sign) v = -v;
 8006a88:	2f00      	cmp	r7, #0
 8006a8a:	d135      	bne.n	8006af8 <decode_mcu_DC_first+0x14e>
 8006a8c:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 8006a90:	f8da 2014 	ldr.w	r2, [sl, #20]
 8006a94:	444a      	add	r2, r9
 8006a96:	f8ca 2014 	str.w	r2, [sl, #20]
 8006a9a:	e7c1      	b.n	8006a20 <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 8006a9c:	006d      	lsls	r5, r5, #1
 8006a9e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8006aa2:	d10e      	bne.n	8006ac2 <decode_mcu_DC_first+0x118>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	2275      	movs	r2, #117	; 0x75
 8006aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8006aac:	4620      	mov	r0, r4
 8006aae:	615a      	str	r2, [r3, #20]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8006ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab8:	6133      	str	r3, [r6, #16]
}
 8006aba:	2001      	movs	r0, #1
 8006abc:	b005      	add	sp, #20
 8006abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 8006ac2:	f10b 0b01 	add.w	fp, fp, #1
 8006ac6:	e7c7      	b.n	8006a58 <decode_mcu_DC_first+0xae>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8006ac8:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 8006acc:	2301      	movs	r3, #1
 8006ace:	fa03 f202 	lsl.w	r2, r3, r2
 8006ad2:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8006ad6:	bfcc      	ite	gt
 8006ad8:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8006ada:	1c7a      	addle	r2, r7, #1
 8006adc:	0092      	lsls	r2, r2, #2
 8006ade:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 8006ae2:	e7cc      	b.n	8006a7e <decode_mcu_DC_first+0xd4>
	if (arith_decode(cinfo, st)) v |= m;
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	9100      	str	r1, [sp, #0]
 8006ae8:	f7ff fb0c 	bl	8006104 <arith_decode>
 8006aec:	9900      	ldr	r1, [sp, #0]
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d0c8      	beq.n	8006a84 <decode_mcu_DC_first+0xda>
 8006af2:	ea49 0905 	orr.w	r9, r9, r5
 8006af6:	e7c5      	b.n	8006a84 <decode_mcu_DC_first+0xda>
      v += 1; if (sign) v = -v;
 8006af8:	ea6f 0909 	mvn.w	r9, r9
 8006afc:	e7c8      	b.n	8006a90 <decode_mcu_DC_first+0xe6>
	...

08006b00 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006b00:	6843      	ldr	r3, [r0, #4]
 8006b02:	22bc      	movs	r2, #188	; 0xbc
 8006b04:	2101      	movs	r1, #1
 8006b06:	681b      	ldr	r3, [r3, #0]
{
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006b0c:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 8006b0e:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006b10:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 8006b12:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 8006b16:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 8006b18:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	f006 fe95 	bl	800d84c <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 8006b22:	2371      	movs	r3, #113	; 0x71
 8006b24:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 8006b28:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006b2c:	b17b      	cbz	r3, 8006b4e <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006b2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b30:	2101      	movs	r1, #1
 8006b32:	6863      	ldr	r3, [r4, #4]
 8006b34:	4620      	mov	r0, r4
 8006b36:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8006b38:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4798      	blx	r3
 8006b3e:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 8006b40:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8006b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b46:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 8006b4a:	42ab      	cmp	r3, r5
 8006b4c:	dc00      	bgt.n	8006b50 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 8006b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b54:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8006b56:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 8006b58:	f006 fe78 	bl	800d84c <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 8006b5c:	e7f2      	b.n	8006b44 <jinit_arith_decoder+0x44>
 8006b5e:	bf00      	nop
 8006b60:	080061e1 	.word	0x080061e1

08006b64 <init_source>:

  /* We reset the empty-input-file flag for each image,
   * but we don't clear the input buffer.
   * This is correct behavior for reading a series of images from one source.
   */
  src->start_of_file = TRUE;
 8006b64:	6983      	ldr	r3, [r0, #24]
 8006b66:	2201      	movs	r2, #1
 8006b68:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006b6a:	4770      	bx	lr

08006b6c <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 8006b6c:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 8006b6e:	1e0c      	subs	r4, r1, #0
{
 8006b70:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 8006b72:	dd08      	ble.n	8006b86 <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 8006b74:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 8006b76:	6869      	ldr	r1, [r5, #4]
 8006b78:	42a1      	cmp	r1, r4
 8006b7a:	db05      	blt.n	8006b88 <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 8006b7c:	682b      	ldr	r3, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 8006b7e:	1b09      	subs	r1, r1, r4
    src->next_input_byte += (size_t) num_bytes;
 8006b80:	4423      	add	r3, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 8006b82:	6069      	str	r1, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 8006b84:	602b      	str	r3, [r5, #0]
  }
}
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
      (void) (*src->fill_input_buffer) (cinfo);
 8006b88:	68eb      	ldr	r3, [r5, #12]
 8006b8a:	4630      	mov	r0, r6
      num_bytes -= (long) src->bytes_in_buffer;
 8006b8c:	1a64      	subs	r4, r4, r1
      (void) (*src->fill_input_buffer) (cinfo);
 8006b8e:	4798      	blx	r3
 8006b90:	e7f1      	b.n	8006b76 <skip_input_data+0xa>

08006b92 <fill_input_buffer>:
{
 8006b92:	b538      	push	{r3, r4, r5, lr}
  my_src_ptr src = (my_src_ptr) cinfo->src;
 8006b94:	6984      	ldr	r4, [r0, #24]
{
 8006b96:	4605      	mov	r5, r0
  nbytes = JFREAD(src->infile, src->buffer, INPUT_BUF_SIZE);
 8006b98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b9c:	e9d4 0107 	ldrd	r0, r1, [r4, #28]
 8006ba0:	f7fa f996 	bl	8000ed0 <read_file>
  if (nbytes <= 0) {
 8006ba4:	b9b0      	cbnz	r0, 8006bd4 <fill_input_buffer+0x42>
    if (src->start_of_file)	/* Treat empty input file as fatal error */
 8006ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ba8:	b12b      	cbz	r3, 8006bb6 <fill_input_buffer+0x24>
      ERREXIT(cinfo, JERR_INPUT_EMPTY);
 8006baa:	682b      	ldr	r3, [r5, #0]
 8006bac:	222b      	movs	r2, #43	; 0x2b
 8006bae:	4628      	mov	r0, r5
 8006bb0:	615a      	str	r2, [r3, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4798      	blx	r3
    WARNMS(cinfo, JWRN_JPEG_EOF);
 8006bb6:	682b      	ldr	r3, [r5, #0]
 8006bb8:	227b      	movs	r2, #123	; 0x7b
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8006bc0:	615a      	str	r2, [r3, #20]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	4798      	blx	r3
    src->buffer[0] = (JOCTET) 0xFF;
 8006bc6:	6a23      	ldr	r3, [r4, #32]
 8006bc8:	22ff      	movs	r2, #255	; 0xff
    nbytes = 2;
 8006bca:	2002      	movs	r0, #2
    src->buffer[0] = (JOCTET) 0xFF;
 8006bcc:	701a      	strb	r2, [r3, #0]
    src->buffer[1] = (JOCTET) JPEG_EOI;
 8006bce:	22d9      	movs	r2, #217	; 0xd9
 8006bd0:	6a23      	ldr	r3, [r4, #32]
 8006bd2:	705a      	strb	r2, [r3, #1]
  src->pub.next_input_byte = src->buffer;
 8006bd4:	6a23      	ldr	r3, [r4, #32]
  src->pub.bytes_in_buffer = nbytes;
 8006bd6:	e9c4 3000 	strd	r3, r0, [r4]
  src->start_of_file = FALSE;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	2001      	movs	r0, #1
  src->start_of_file = FALSE;
 8006bde:	6263      	str	r3, [r4, #36]	; 0x24
}
 8006be0:	bd38      	pop	{r3, r4, r5, pc}

08006be2 <term_source>:
 8006be2:	4770      	bx	lr

08006be4 <jpeg_stdio_src>:
 * for closing it after finishing decompression.
 */
#ifdef JFILE
GLOBAL(void)
jpeg_stdio_src (j_decompress_ptr cinfo, JFILE * infile)
{
 8006be4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006be6:	460e      	mov	r6, r1
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 8006be8:	6981      	ldr	r1, [r0, #24]
{
 8006bea:	4604      	mov	r4, r0
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 8006bec:	b971      	cbnz	r1, 8006c0c <jpeg_stdio_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8006bee:	6843      	ldr	r3, [r0, #4]
 8006bf0:	2228      	movs	r2, #40	; 0x28
 8006bf2:	9101      	str	r1, [sp, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4798      	blx	r3
				  SIZEOF(my_source_mgr));
    src = (my_src_ptr) cinfo->src;
    src->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8006bf8:	6863      	ldr	r3, [r4, #4]
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8006bfa:	4605      	mov	r5, r0
    cinfo->src = (struct jpeg_source_mgr *)
 8006bfc:	61a0      	str	r0, [r4, #24]
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c04:	9901      	ldr	r1, [sp, #4]
 8006c06:	4620      	mov	r0, r4
 8006c08:	4798      	blx	r3
    src->buffer = (JOCTET *)
 8006c0a:	6228      	str	r0, [r5, #32]
				  INPUT_BUF_SIZE * SIZEOF(JOCTET));
  }

  src = (my_src_ptr) cinfo->src;
 8006c0c:	69a3      	ldr	r3, [r4, #24]
  src->pub.init_source = init_source;
 8006c0e:	4a08      	ldr	r2, [pc, #32]	; (8006c30 <jpeg_stdio_src+0x4c>)
 8006c10:	609a      	str	r2, [r3, #8]
  src->pub.fill_input_buffer = fill_input_buffer;
 8006c12:	4a08      	ldr	r2, [pc, #32]	; (8006c34 <jpeg_stdio_src+0x50>)
 8006c14:	60da      	str	r2, [r3, #12]
  src->pub.skip_input_data = skip_input_data;
 8006c16:	4a08      	ldr	r2, [pc, #32]	; (8006c38 <jpeg_stdio_src+0x54>)
 8006c18:	611a      	str	r2, [r3, #16]
  src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
 8006c1a:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <jpeg_stdio_src+0x58>)
 8006c1c:	615a      	str	r2, [r3, #20]
  src->pub.term_source = term_source;
 8006c1e:	4a08      	ldr	r2, [pc, #32]	; (8006c40 <jpeg_stdio_src+0x5c>)
  src->infile = infile;
 8006c20:	e9c3 2606 	strd	r2, r6, [r3, #24]
  src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
 8006c24:	2200      	movs	r2, #0
  src->pub.next_input_byte = NULL; /* until buffer loaded */
 8006c26:	e9c3 2200 	strd	r2, r2, [r3]
}
 8006c2a:	b002      	add	sp, #8
 8006c2c:	bd70      	pop	{r4, r5, r6, pc}
 8006c2e:	bf00      	nop
 8006c30:	08006b65 	.word	0x08006b65
 8006c34:	08006b93 	.word	0x08006b93
 8006c38:	08006b6d 	.word	0x08006b6d
 8006c3c:	0800a301 	.word	0x0800a301
 8006c40:	08006be3 	.word	0x08006be3

08006c44 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 8006c44:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8006c48:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 8006c4c:	2a01      	cmp	r2, #1
 8006c4e:	dd05      	ble.n	8006c5c <start_iMCU_row+0x18>
    coef->MCU_rows_per_iMCU_row = 1;
 8006c50:	2201      	movs	r2, #1
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 8006c52:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 8006c54:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 8006c56:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 8006c5a:	4770      	bx	lr
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 8006c5c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 8006c60:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 8006c64:	3a01      	subs	r2, #1
 8006c66:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8006c6a:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 8006c6c:	bf34      	ite	cc
 8006c6e:	68ca      	ldrcc	r2, [r1, #12]
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 8006c70:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
 8006c72:	e7ee      	b.n	8006c52 <start_iMCU_row+0xe>

08006c74 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 8006c74:	2200      	movs	r2, #0
 8006c76:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 8006c7a:	f7ff bfe3 	b.w	8006c44 <start_iMCU_row>

08006c7e <start_output_pass>:
      coef->pub.decompress_data = decompress_smooth_data;
    else
      coef->pub.decompress_data = decompress_data;
  }
#endif
  cinfo->output_iMCU_row = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
}
 8006c84:	4770      	bx	lr

08006c86 <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 8006c86:	2000      	movs	r0, #0
 8006c88:	4770      	bx	lr

08006c8a <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 8006c8a:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 8006c8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 8006c92:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8006c94:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 8006c98:	4604      	mov	r4, r0
 8006c9a:	ed2d 8b02 	vpush	{d8}
 8006c9e:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 8006ca0:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8006ca2:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 8006ca6:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8006cac:	69ab      	ldr	r3, [r5, #24]
 8006cae:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 8006cb0:	f105 0320 	add.w	r3, r5, #32
 8006cb4:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8006cb8:	69eb      	ldr	r3, [r5, #28]
 8006cba:	9a03      	ldr	r2, [sp, #12]
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	dc13      	bgt.n	8006ce8 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 8006cc0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 8006cc4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 8006cc8:	3301      	adds	r3, #1
 8006cca:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 8006cce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8006cda:	f080 808e 	bcs.w	8006dfa <decompress_onepass+0x170>
    start_iMCU_row(cinfo);
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7ff ffb0 	bl	8006c44 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 8006ce4:	2003      	movs	r0, #3
 8006ce6:	e02a      	b.n	8006d3e <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 8006ce8:	696f      	ldr	r7, [r5, #20]
 8006cea:	9b08      	ldr	r3, [sp, #32]
 8006cec:	429f      	cmp	r7, r3
 8006cee:	d905      	bls.n	8006cfc <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	616b      	str	r3, [r5, #20]
       yoffset++) {
 8006cf4:	9b03      	ldr	r3, [sp, #12]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	9303      	str	r3, [sp, #12]
 8006cfa:	e7dd      	b.n	8006cb8 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 8006cfc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8006d00:	b133      	cbz	r3, 8006d10 <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 8006d02:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 8006d06:	2100      	movs	r1, #0
 8006d08:	6a28      	ldr	r0, [r5, #32]
 8006d0a:	01d2      	lsls	r2, r2, #7
 8006d0c:	f006 fd9e 	bl	800d84c <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 8006d10:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 8006d14:	ee18 1a10 	vmov	r1, s16
 8006d18:	4620      	mov	r0, r4
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4798      	blx	r3
 8006d1e:	b158      	cbz	r0, 8006d38 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8006d20:	f04f 0b00 	mov.w	fp, #0
 8006d24:	f504 73aa 	add.w	r3, r4, #340	; 0x154
      blkn = 0;			/* index of current DCT block within MCU */
 8006d28:	46da      	mov	sl, fp
 8006d2a:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8006d2c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8006d30:	455b      	cmp	r3, fp
 8006d32:	dc09      	bgt.n	8006d48 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 8006d34:	3701      	adds	r7, #1
 8006d36:	e7d8      	b.n	8006cea <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 8006d38:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 8006d3a:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 8006d3e:	b00f      	add	sp, #60	; 0x3c
 8006d40:	ecbd 8b02 	vpop	{d8}
 8006d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 8006d48:	9b05      	ldr	r3, [sp, #20]
 8006d4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8006d4e:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 8006d50:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006d52:	b923      	cbnz	r3, 8006d5e <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 8006d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d56:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8006d58:	f10b 0b01 	add.w	fp, fp, #1
 8006d5c:	e7e6      	b.n	8006d2c <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 8006d5e:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8006d60:	f04f 0800 	mov.w	r8, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 8006d64:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 8006d68:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 8006d6a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 8006d72:	9b08      	ldr	r3, [sp, #32]
 8006d74:	429f      	cmp	r7, r3
 8006d76:	bf34      	ite	cc
 8006d78:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 8006d7a:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 8006d7c:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 8006d7e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006d80:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 8006d82:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006d84:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006d88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 8006d8c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8006d8e:	437a      	muls	r2, r7
 8006d90:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8006d92:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8006d94:	4542      	cmp	r2, r8
 8006d96:	dddf      	ble.n	8006d58 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 8006d98:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8006d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d9e:	4282      	cmp	r2, r0
 8006da0:	d304      	bcc.n	8006dac <decompress_onepass+0x122>
 8006da2:	9a03      	ldr	r2, [sp, #12]
 8006da4:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8006da6:	4442      	add	r2, r8
 8006da8:	4290      	cmp	r0, r2
 8006daa:	dd0b      	ble.n	8006dc4 <decompress_onepass+0x13a>
 8006dac:	f10a 0908 	add.w	r9, sl, #8
 8006db0:	eb05 0289 	add.w	r2, r5, r9, lsl #2
{
 8006db4:	f04f 0900 	mov.w	r9, #0
 8006db8:	9207      	str	r2, [sp, #28]
 8006dba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dbc:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 8006dbe:	9a06      	ldr	r2, [sp, #24]
 8006dc0:	4591      	cmp	r9, r2
 8006dc2:	db07      	blt.n	8006dd4 <decompress_onepass+0x14a>
	  blkn += compptr->MCU_width;
 8006dc4:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8006dc6:	f108 0801 	add.w	r8, r8, #1
	  blkn += compptr->MCU_width;
 8006dca:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 8006dcc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006dce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8006dd2:	e7de      	b.n	8006d92 <decompress_onepass+0x108>
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 8006dd4:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 8006dd6:	f109 0901 	add.w	r9, r9, #1
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 8006dda:	f850 2b04 	ldr.w	r2, [r0], #4
 8006dde:	9007      	str	r0, [sp, #28]
	      (*inverse_DCT) (cinfo, compptr,
 8006de0:	9804      	ldr	r0, [sp, #16]
 8006de2:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 8006de6:	9000      	str	r0, [sp, #0]
 8006de8:	4620      	mov	r0, r4
 8006dea:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 8006dec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8006df2:	4413      	add	r3, r2
 8006df4:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 8006df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006df8:	e7e1      	b.n	8006dbe <decompress_onepass+0x134>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 8006dfa:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8006dfe:	4620      	mov	r0, r4
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 8006e04:	2004      	movs	r0, #4
 8006e06:	e79a      	b.n	8006d3e <decompress_onepass+0xb4>

08006e08 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006e08:	6843      	ldr	r3, [r0, #4]
 8006e0a:	2248      	movs	r2, #72	; 0x48
{
 8006e0c:	b570      	push	{r4, r5, r6, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006e0e:	681b      	ldr	r3, [r3, #0]
{
 8006e10:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006e12:	2101      	movs	r1, #1
{
 8006e14:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006e16:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 8006e18:	4b17      	ldr	r3, [pc, #92]	; (8006e78 <jinit_d_coef_controller+0x70>)
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 8006e1a:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006e1e:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 8006e20:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 8006e22:	4b16      	ldr	r3, [pc, #88]	; (8006e7c <jinit_d_coef_controller+0x74>)
 8006e24:	6083      	str	r3, [r0, #8]
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 8006e26:	b13e      	cbz	r6, 8006e38 <jinit_d_coef_controller+0x30>
    }
    coef->pub.consume_data = consume_data;
    coef->pub.decompress_data = decompress_data;
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	2231      	movs	r2, #49	; 0x31
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	615a      	str	r2, [r3, #20]
 8006e30:	681b      	ldr	r3, [r3, #0]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 8006e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8006e36:	4718      	bx	r3
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006e38:	686b      	ldr	r3, [r5, #4]
 8006e3a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8006e3e:	2101      	movs	r1, #1
 8006e40:	4628      	mov	r0, r5
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 8006e46:	f104 0320 	add.w	r3, r4, #32
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	f104 0148 	add.w	r1, r4, #72	; 0x48
      coef->MCU_buffer[i] = buffer + i;
 8006e50:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 8006e54:	428b      	cmp	r3, r1
 8006e56:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8006e5a:	d1f9      	bne.n	8006e50 <jinit_d_coef_controller+0x48>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 8006e5c:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 8006e60:	b919      	cbnz	r1, 8006e6a <jinit_d_coef_controller+0x62>
      FMEMZERO((void FAR *) buffer,
 8006e62:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8006e66:	f006 fcf1 	bl	800d84c <memset>
    coef->pub.consume_data = dummy_consume_data;
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <jinit_d_coef_controller+0x78>)
 8006e6c:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_onepass;
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <jinit_d_coef_controller+0x7c>)
 8006e70:	60e3      	str	r3, [r4, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 8006e72:	2300      	movs	r3, #0
 8006e74:	6123      	str	r3, [r4, #16]
}
 8006e76:	bd70      	pop	{r4, r5, r6, pc}
 8006e78:	08006c75 	.word	0x08006c75
 8006e7c:	08006c7f 	.word	0x08006c7f
 8006e80:	08006c87 	.word	0x08006c87
 8006e84:	08006c8b 	.word	0x08006c8b

08006e88 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006e88:	6843      	ldr	r3, [r0, #4]
 8006e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e8e:	2101      	movs	r1, #1
 8006e90:	681b      	ldr	r3, [r3, #0]
{
 8006e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e96:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8006e98:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006e9c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ea2:	6863      	ldr	r3, [r4, #4]
 8006ea4:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 8006ea6:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006eae:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 8006eb0:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2101      	movs	r1, #1
 8006eba:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8006ebc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8006f3c <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006ec0:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006ec2:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 8006ec4:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8006ed0:	4f17      	ldr	r7, [pc, #92]	; (8006f30 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006ed2:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8006ed4:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 8006ed6:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8006ed8:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8006eda:	f8df e064 	ldr.w	lr, [pc, #100]	; 8006f40 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8006ede:	4915      	ldr	r1, [pc, #84]	; (8006f34 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 8006ee0:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8006ee4:	4d14      	ldr	r5, [pc, #80]	; (8006f38 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8006ee6:	fb08 e203 	mla	r2, r8, r3, lr
 8006eea:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 8006eec:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8006ef0:	fb07 f203 	mul.w	r2, r7, r3
 8006ef4:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 8006ef8:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 8006efc:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 8006efe:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8006f02:	fb05 f203 	mul.w	r2, r5, r3
 8006f06:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 8006f0a:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 8006f0e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8006f12:	fb01 f203 	mul.w	r2, r1, r3
 8006f16:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 8006f1a:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 8006f1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8006f22:	3301      	adds	r3, #1
 8006f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f28:	d1dd      	bne.n	8006ee6 <build_ycc_rgb_table+0x5e>
  }
}
 8006f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f2e:	bf00      	nop
 8006f30:	0001c5a2 	.word	0x0001c5a2
 8006f34:	ffffa7e6 	.word	0xffffa7e6
 8006f38:	ffff492e 	.word	0xffff492e
 8006f3c:	000166e9 	.word	0x000166e9
 8006f40:	ff4d0b80 	.word	0xff4d0b80

08006f44 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 8006f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8006f48:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 8006f4c:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8006f4e:	6f05      	ldr	r5, [r0, #112]	; 0x70
 8006f50:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8006f54:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 8006f58:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8006f5c:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 8006f5e:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 8006f60:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 8006f62:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 8006f66:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 8006f68:	6920      	ldr	r0, [r4, #16]
 8006f6a:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 8006f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f6e:	3a01      	subs	r2, #1
 8006f70:	9210      	str	r2, [sp, #64]	; 0x40
 8006f72:	d502      	bpl.n	8006f7a <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 8006f74:	b007      	add	sp, #28
 8006f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 8006f7a:	9a05      	ldr	r2, [sp, #20]
 8006f7c:	680c      	ldr	r4, [r1, #0]
 8006f7e:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 8006f80:	f853 0b04 	ldr.w	r0, [r3], #4
 8006f84:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 8006f88:	684c      	ldr	r4, [r1, #4]
 8006f8a:	5964      	ldr	r4, [r4, r5]
 8006f8c:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 8006f90:	688c      	ldr	r4, [r1, #8]
 8006f92:	5967      	ldr	r7, [r4, r5]
 8006f94:	9c01      	ldr	r4, [sp, #4]
 8006f96:	3f01      	subs	r7, #1
 8006f98:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 8006f9c:	45d0      	cmp	r8, sl
 8006f9e:	f100 0003 	add.w	r0, r0, #3
 8006fa2:	d0e3      	beq.n	8006f6c <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8006fa4:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 8006fa8:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8006fac:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 8006fae:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8006fb2:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 8006fb6:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8006fb8:	fa0f fb8b 	sxth.w	fp, fp
 8006fbc:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8006fbe:	5d65      	ldrb	r5, [r4, r5]
 8006fc0:	f800 5c03 	strb.w	r5, [r0, #-3]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8006fc4:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 8006fc8:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 8006fcc:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 8006fce:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8006fd0:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 8006fd2:	5d65      	ldrb	r5, [r4, r5]
 8006fd4:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 8006fd8:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 8006fdc:	5d64      	ldrb	r4, [r4, r5]
 8006fde:	f800 4c01 	strb.w	r4, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 8006fe2:	e7db      	b.n	8006f9c <ycc_rgb_convert+0x58>

08006fe4 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 8006fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 8006fe8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 8006fec:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 8006ff0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 8006ff2:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8006ff4:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 8006ff6:	3d01      	subs	r5, #1
 8006ff8:	d501      	bpl.n	8006ffe <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 8006ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 8006ffe:	189c      	adds	r4, r3, r2
 8007000:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 8007002:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 8007006:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800700a:	6848      	ldr	r0, [r1, #4]
 800700c:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 8007010:	6888      	ldr	r0, [r1, #8]
 8007012:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 8007016:	2000      	movs	r0, #0
 8007018:	42b8      	cmp	r0, r7
 800701a:	d0ec      	beq.n	8006ff6 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800701c:	f81e 4000 	ldrb.w	r4, [lr, r0]
 8007020:	f81c b000 	ldrb.w	fp, [ip, r0]
 8007024:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8007028:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800702c:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 8007030:	4454      	add	r4, sl
 8007032:	f818 a000 	ldrb.w	sl, [r8, r0]
 8007036:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800703a:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800703e:	4454      	add	r4, sl
		 >> SCALEBITS);
 8007040:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 8007042:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 8007046:	3001      	adds	r0, #1
 8007048:	e7e6      	b.n	8007018 <rgb_gray_convert+0x34>

0800704a <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800704a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800704e:	9d06      	ldr	r5, [sp, #24]
 8007050:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8007054:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 8007056:	3d01      	subs	r5, #1
 8007058:	d501      	bpl.n	800705e <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800705a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800705e:	1898      	adds	r0, r3, r2
 8007060:	680c      	ldr	r4, [r1, #0]
 8007062:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 8007064:	684c      	ldr	r4, [r1, #4]
 8007066:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800706a:	688c      	ldr	r4, [r1, #8]
 800706c:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 8007070:	2000      	movs	r0, #0
 8007072:	f853 4b04 	ldr.w	r4, [r3], #4
 8007076:	42b0      	cmp	r0, r6
 8007078:	f104 0403 	add.w	r4, r4, #3
 800707c:	d0eb      	beq.n	8007056 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800707e:	f817 8000 	ldrb.w	r8, [r7, r0]
 8007082:	f804 8c03 	strb.w	r8, [r4, #-3]
      outptr[RGB_GREEN] = inptr1[col];
 8007086:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800708a:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800708e:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 8007092:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 8007094:	f804 8c01 	strb.w	r8, [r4, #-1]
    for (col = 0; col < num_cols; col++) {
 8007098:	e7ed      	b.n	8007076 <rgb_convert+0x2c>

0800709a <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800709a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800709e:	9e07      	ldr	r6, [sp, #28]
 80070a0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 80070a4:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 80070a6:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 80070aa:	3e01      	subs	r6, #1
 80070ac:	d418      	bmi.n	80070e0 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 80070ae:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 80070b2:	2000      	movs	r0, #0
 80070b4:	e00a      	b.n	80070cc <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 80070b6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80070ba:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 80070be:	681c      	ldr	r4, [r3, #0]
 80070c0:	eb05 080e 	add.w	r8, r5, lr
 80070c4:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 80070c6:	4545      	cmp	r5, r8
 80070c8:	d104      	bne.n	80070d4 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 80070ca:	3001      	adds	r0, #1
 80070cc:	42b8      	cmp	r0, r7
 80070ce:	dbf2      	blt.n	80070b6 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 80070d0:	3304      	adds	r3, #4
 80070d2:	e7ea      	b.n	80070aa <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 80070d4:	f815 9b01 	ldrb.w	r9, [r5], #1
 80070d8:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 80070dc:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 80070de:	e7f2      	b.n	80070c6 <null_convert+0x2c>
  }
}
 80070e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080070e4 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 80070e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e6:	9d05      	ldr	r5, [sp, #20]
 80070e8:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 80070ec:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 80070ee:	3d01      	subs	r5, #1
 80070f0:	d500      	bpl.n	80070f4 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 80070f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 80070f4:	6808      	ldr	r0, [r1, #0]
 80070f6:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 80070f8:	f853 0b04 	ldr.w	r0, [r3], #4
 80070fc:	58a4      	ldr	r4, [r4, r2]
 80070fe:	eb04 0c07 	add.w	ip, r4, r7
 8007102:	4564      	cmp	r4, ip
 8007104:	f100 0003 	add.w	r0, r0, #3
 8007108:	d0f1      	beq.n	80070ee <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800710a:	f814 6b01 	ldrb.w	r6, [r4], #1
 800710e:	f800 6c01 	strb.w	r6, [r0, #-1]
 8007112:	f800 6c02 	strb.w	r6, [r0, #-2]
 8007116:	f800 6c03 	strb.w	r6, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800711a:	e7f2      	b.n	8007102 <gray_rgb_convert+0x1e>

0800711c <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8007120:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 8007124:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8007126:	6f05      	ldr	r5, [r0, #112]	; 0x70
 8007128:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800712c:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 8007130:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 8007134:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 8007136:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800713a:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800713c:	6920      	ldr	r0, [r4, #16]
 800713e:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 8007140:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007142:	3a01      	subs	r2, #1
 8007144:	9210      	str	r2, [sp, #64]	; 0x40
 8007146:	d502      	bpl.n	800714e <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 8007148:	b007      	add	sp, #28
 800714a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800714e:	eb03 0008 	add.w	r0, r3, r8
 8007152:	680a      	ldr	r2, [r1, #0]
 8007154:	f853 5b04 	ldr.w	r5, [r3], #4
 8007158:	5812      	ldr	r2, [r2, r0]
 800715a:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800715c:	684a      	ldr	r2, [r1, #4]
 800715e:	5812      	ldr	r2, [r2, r0]
 8007160:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 8007162:	688a      	ldr	r2, [r1, #8]
 8007164:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 8007168:	68ca      	ldr	r2, [r1, #12]
 800716a:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800716e:	2200      	movs	r2, #0
 8007170:	9800      	ldr	r0, [sp, #0]
 8007172:	3504      	adds	r5, #4
 8007174:	4282      	cmp	r2, r0
 8007176:	d0e3      	beq.n	8007140 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 8007178:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800717c:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800717e:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 8007180:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 8007184:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 8007186:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800718a:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800718e:	4404      	add	r4, r0
 8007190:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 8007194:	5d34      	ldrb	r4, [r6, r4]
 8007196:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800719a:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800719e:	9405      	str	r4, [sp, #20]
 80071a0:	9c02      	ldr	r4, [sp, #8]
 80071a2:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 80071a6:	9c05      	ldr	r4, [sp, #20]
 80071a8:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 80071aa:	eb00 4424 	add.w	r4, r0, r4, asr #16
 80071ae:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 80071b2:	5d34      	ldrb	r4, [r6, r4]
 80071b4:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 80071b8:	9c01      	ldr	r4, [sp, #4]
 80071ba:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 80071be:	4420      	add	r0, r4
 80071c0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80071c4:	5c30      	ldrb	r0, [r6, r0]
 80071c6:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 80071ca:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 80071ce:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 80071d0:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 80071d4:	e7cc      	b.n	8007170 <ycck_cmyk_convert+0x54>

080071d6 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 80071d6:	4770      	bx	lr

080071d8 <grayscale_convert>:
{
 80071d8:	b513      	push	{r0, r1, r4, lr}
 80071da:	460c      	mov	r4, r1
 80071dc:	4611      	mov	r1, r2
 80071de:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 80071e0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	9b04      	ldr	r3, [sp, #16]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	2300      	movs	r3, #0
 80071ec:	f006 fad9 	bl	800d7a2 <jcopy_sample_rows>
}
 80071f0:	b002      	add	sp, #8
 80071f2:	bd10      	pop	{r4, pc}

080071f4 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80071f4:	6843      	ldr	r3, [r0, #4]
 80071f6:	221c      	movs	r2, #28
 80071f8:	2101      	movs	r1, #1
 80071fa:	681b      	ldr	r3, [r3, #0]
{
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007200:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 8007202:	4b4a      	ldr	r3, [pc, #296]	; (800732c <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007204:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 8007206:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800720a:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800720c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007210:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007212:	2b03      	cmp	r3, #3
 8007214:	d821      	bhi.n	800725a <jinit_color_deconverter+0x66>
 8007216:	2b01      	cmp	r3, #1
 8007218:	d82d      	bhi.n	8007276 <jinit_color_deconverter+0x82>
 800721a:	d023      	beq.n	8007264 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800721c:	2a00      	cmp	r2, #0
 800721e:	dd23      	ble.n	8007268 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 8007220:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 8007224:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 8007228:	2902      	cmp	r1, #2
 800722a:	d055      	beq.n	80072d8 <jinit_color_deconverter+0xe4>
 800722c:	2904      	cmp	r1, #4
 800722e:	d066      	beq.n	80072fe <jinit_color_deconverter+0x10a>
 8007230:	2901      	cmp	r1, #1
 8007232:	d16d      	bne.n	8007310 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 8007234:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 8007238:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800723a:	2a01      	cmp	r2, #1
 800723c:	d124      	bne.n	8007288 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800723e:	4b3c      	ldr	r3, [pc, #240]	; (8007330 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 8007240:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 8007242:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 8007244:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 8007246:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 8007248:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800724a:	4299      	cmp	r1, r3
 800724c:	dc15      	bgt.n	800727a <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800724e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007250:	2b00      	cmp	r3, #0
 8007252:	d169      	bne.n	8007328 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 8007254:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007256:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8007258:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800725a:	3b04      	subs	r3, #4
 800725c:	2b01      	cmp	r3, #1
 800725e:	d8dd      	bhi.n	800721c <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 8007260:	2a04      	cmp	r2, #4
 8007262:	e000      	b.n	8007266 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 8007264:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 8007266:	d0db      	beq.n	8007220 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	220b      	movs	r2, #11
 800726c:	4620      	mov	r0, r4
 800726e:	615a      	str	r2, [r3, #20]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4798      	blx	r3
 8007274:	e7d4      	b.n	8007220 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 8007276:	2a03      	cmp	r2, #3
 8007278:	e7f5      	b.n	8007266 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800727a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800727e:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 8007282:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 8007284:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 8007286:	e7e0      	b.n	800724a <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 8007288:	2b02      	cmp	r3, #2
 800728a:	d146      	bne.n	800731a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800728c:	4b29      	ldr	r3, [pc, #164]	; (8007334 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800728e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8007292:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 8007294:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 8007298:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800729a:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800729c:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 80072a4:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 80072a6:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 80072a8:	f641 512f 	movw	r1, #7471	; 0x1d2f
 80072ac:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 80072ae:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 80072b2:	fb06 f203 	mul.w	r2, r6, r3
 80072b6:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 80072ba:	fb05 f203 	mul.w	r2, r5, r3
 80072be:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 80072c2:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 80072c6:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 80072c8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 80072cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 80072d0:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 80072d4:	d1ed      	bne.n	80072b2 <jinit_color_deconverter+0xbe>
 80072d6:	e7ba      	b.n	800724e <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 80072d8:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 80072da:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 80072dc:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 80072de:	d105      	bne.n	80072ec <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 80072e0:	4b15      	ldr	r3, [pc, #84]	; (8007338 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 80072e2:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 80072e4:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 80072e6:	f7ff fdcf 	bl	8006e88 <build_ycc_rgb_table>
 80072ea:	e7b0      	b.n	800724e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d102      	bne.n	80072f6 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 80072f0:	4b12      	ldr	r3, [pc, #72]	; (800733c <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 80072f2:	606b      	str	r3, [r5, #4]
 80072f4:	e7ab      	b.n	800724e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d10f      	bne.n	800731a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 80072fa:	4b11      	ldr	r3, [pc, #68]	; (8007340 <jinit_color_deconverter+0x14c>)
 80072fc:	e7f9      	b.n	80072f2 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 80072fe:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 8007300:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 8007302:	d101      	bne.n	8007308 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 8007304:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <jinit_color_deconverter+0x150>)
 8007306:	e7ec      	b.n	80072e2 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 8007308:	2b04      	cmp	r3, #4
 800730a:	d106      	bne.n	800731a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800730c:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <jinit_color_deconverter+0x154>)
 800730e:	e7f0      	b.n	80072f2 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 8007310:	4299      	cmp	r1, r3
 8007312:	d102      	bne.n	800731a <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 8007314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007316:	67a3      	str	r3, [r4, #120]	; 0x78
 8007318:	e7f8      	b.n	800730c <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	221c      	movs	r2, #28
 800731e:	4620      	mov	r0, r4
 8007320:	615a      	str	r2, [r3, #20]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4798      	blx	r3
 8007326:	e792      	b.n	800724e <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 8007328:	2301      	movs	r3, #1
 800732a:	e794      	b.n	8007256 <jinit_color_deconverter+0x62>
 800732c:	080071d7 	.word	0x080071d7
 8007330:	080071d9 	.word	0x080071d9
 8007334:	08006fe5 	.word	0x08006fe5
 8007338:	08006f45 	.word	0x08006f45
 800733c:	080070e5 	.word	0x080070e5
 8007340:	0800704b 	.word	0x0800704b
 8007344:	0800711d 	.word	0x0800711d
 8007348:	0800709b 	.word	0x0800709b

0800734c <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800734c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007350:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 8007354:	f04f 0800 	mov.w	r8, #0
{
 8007358:	4605      	mov	r5, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800735a:	f8d0 60d8 	ldr.w	r6, [r0, #216]	; 0xd8
 800735e:	f103 0904 	add.w	r9, r3, #4
  int method = 0;
 8007362:	4647      	mov	r7, r8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8007364:	46c3      	mov	fp, r8
{
 8007366:	ed2d 8b04 	vpush	{d8-d9}
 800736a:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800736c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800736e:	455b      	cmp	r3, fp
 8007370:	dc04      	bgt.n	800737c <start_pass+0x30>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 8007372:	b007      	add	sp, #28
 8007374:	ecbd 8b04 	vpop	{d8-d9}
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800737c:	e9d6 1209 	ldrd	r1, r2, [r6, #36]	; 0x24
 8007380:	f640 0308 	movw	r3, #2056	; 0x808
 8007384:	eb02 2001 	add.w	r0, r2, r1, lsl #8
 8007388:	4298      	cmp	r0, r3
 800738a:	d12d      	bne.n	80073e8 <start_pass+0x9c>
      switch (cinfo->dct_method) {
 800738c:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8007390:	2b02      	cmp	r3, #2
 8007392:	d822      	bhi.n	80073da <start_pass+0x8e>
 8007394:	461f      	mov	r7, r3
 8007396:	4b43      	ldr	r3, [pc, #268]	; (80074a4 <start_pass+0x158>)
 8007398:	f853 8027 	ldr.w	r8, [r3, r7, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800739c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800739e:	f849 8b04 	str.w	r8, [r9], #4
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 80073a2:	b1b3      	cbz	r3, 80073d2 <start_pass+0x86>
 80073a4:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80073a8:	42bb      	cmp	r3, r7
 80073aa:	d012      	beq.n	80073d2 <start_pass+0x86>
    qtbl = compptr->quant_table;
 80073ac:	6d34      	ldr	r4, [r6, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 80073ae:	b184      	cbz	r4, 80073d2 <start_pass+0x86>
    switch (method) {
 80073b0:	2f01      	cmp	r7, #1
    idct->cur_method[ci] = method;
 80073b2:	f8c9 7024 	str.w	r7, [r9, #36]	; 0x24
    switch (method) {
 80073b6:	d01d      	beq.n	80073f4 <start_pass+0xa8>
 80073b8:	2f02      	cmp	r7, #2
 80073ba:	d02d      	beq.n	8007418 <start_pass+0xcc>
 80073bc:	2f00      	cmp	r7, #0
 80073be:	d16a      	bne.n	8007496 <start_pass+0x14a>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80073c0:	6d72      	ldr	r2, [r6, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 80073c2:	463b      	mov	r3, r7
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 80073c4:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
 80073c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 80073cc:	3301      	adds	r3, #1
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d1f8      	bne.n	80073c4 <start_pass+0x78>
       ci++, compptr++) {
 80073d2:	f10b 0b01 	add.w	fp, fp, #1
 80073d6:	3658      	adds	r6, #88	; 0x58
 80073d8:	e7c8      	b.n	800736c <start_pass+0x20>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 80073da:	682b      	ldr	r3, [r5, #0]
 80073dc:	2231      	movs	r2, #49	; 0x31
 80073de:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4628      	mov	r0, r5
 80073e4:	4798      	blx	r3
      break;
 80073e6:	e7d9      	b.n	800739c <start_pass+0x50>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	2007      	movs	r0, #7
 80073ec:	61da      	str	r2, [r3, #28]
 80073ee:	e9c3 0105 	strd	r0, r1, [r3, #20]
 80073f2:	e7f5      	b.n	80073e0 <start_pass+0x94>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 80073f4:	6d70      	ldr	r0, [r6, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 80073f6:	2200      	movs	r2, #0
 80073f8:	492b      	ldr	r1, [pc, #172]	; (80074a8 <start_pass+0x15c>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 80073fa:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 80073fe:	f931 cb02 	ldrsh.w	ip, [r1], #2
 8007402:	fb0c f303 	mul.w	r3, ip, r3
 8007406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740a:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800740c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 8007410:	3201      	adds	r2, #1
 8007412:	2a40      	cmp	r2, #64	; 0x40
 8007414:	d1f1      	bne.n	80073fa <start_pass+0xae>
 8007416:	e7dc      	b.n	80073d2 <start_pass+0x86>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 8007418:	6d73      	ldr	r3, [r6, #84]	; 0x54
	i = 0;
 800741a:	f04f 0a00 	mov.w	sl, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800741e:	9304      	str	r3, [sp, #16]
 8007420:	4b22      	ldr	r3, [pc, #136]	; (80074ac <start_pass+0x160>)
 8007422:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 8007424:	9b03      	ldr	r3, [sp, #12]
 8007426:	ecb3 7b02 	vldmia	r3!, {d7}
 800742a:	9303      	str	r3, [sp, #12]
 800742c:	eeb0 8a47 	vmov.f32	s16, s14
 8007430:	eef0 8a67 	vmov.f32	s17, s15
 8007434:	9b04      	ldr	r3, [sp, #16]
 8007436:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800743a:	9301      	str	r3, [sp, #4]
 800743c:	4b1b      	ldr	r3, [pc, #108]	; (80074ac <start_pass+0x160>)
 800743e:	9302      	str	r3, [sp, #8]
 8007440:	f104 0310 	add.w	r3, r4, #16
 8007444:	9305      	str	r3, [sp, #20]
 8007446:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 8007448:	f834 0b02 	ldrh.w	r0, [r4], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800744c:	ecb3 7b02 	vldmia	r3!, {d7}
 8007450:	eeb0 9a47 	vmov.f32	s18, s14
 8007454:	eef0 9a67 	vmov.f32	s19, s15
 8007458:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800745a:	f7f9 f86b 	bl	8000534 <__aeabi_ui2d>
 800745e:	ec53 2b18 	vmov	r2, r3, d8
 8007462:	f7f9 f8e1 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 8007466:	ec53 2b19 	vmov	r2, r3, d9
 800746a:	f7f9 f8dd 	bl	8000628 <__aeabi_dmul>
 800746e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007472:	2200      	movs	r2, #0
 8007474:	f7f9 f8d8 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 8007478:	f7f9 fae8 	bl	8000a4c <__aeabi_d2f>
 800747c:	9b01      	ldr	r3, [sp, #4]
 800747e:	f843 0b04 	str.w	r0, [r3], #4
 8007482:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 8007484:	9b05      	ldr	r3, [sp, #20]
 8007486:	429c      	cmp	r4, r3
 8007488:	d1dd      	bne.n	8007446 <start_pass+0xfa>
	    i++;
 800748a:	f10a 0a08 	add.w	sl, sl, #8
	for (row = 0; row < DCTSIZE; row++) {
 800748e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8007492:	d1c7      	bne.n	8007424 <start_pass+0xd8>
 8007494:	e79d      	b.n	80073d2 <start_pass+0x86>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 8007496:	682b      	ldr	r3, [r5, #0]
 8007498:	2231      	movs	r2, #49	; 0x31
 800749a:	4628      	mov	r0, r5
 800749c:	615a      	str	r2, [r3, #20]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4798      	blx	r3
      break;
 80074a2:	e796      	b.n	80073d2 <start_pass+0x86>
 80074a4:	08012488 	.word	0x08012488
 80074a8:	08012494 	.word	0x08012494
 80074ac:	08012518 	.word	0x08012518

080074b0 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 80074b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80074b2:	6843      	ldr	r3, [r0, #4]
{
 80074b4:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80074b6:	2254      	movs	r2, #84	; 0x54
 80074b8:	2101      	movs	r1, #1
 80074ba:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80074bc:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80074be:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 80074c0:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <jinit_inverse_dct+0x50>)
 80074c2:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80074c4:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 80074c8:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 80074cc:	f844 3b2c 	str.w	r3, [r4], #44
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80074d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074d2:	42b3      	cmp	r3, r6
 80074d4:	dc00      	bgt.n	80074d8 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 80074d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80074d8:	686b      	ldr	r3, [r5, #4]
 80074da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074de:	2101      	movs	r1, #1
 80074e0:	4628      	mov	r0, r5
 80074e2:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 80074e4:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80074e6:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 80074e8:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 80074ec:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 80074ee:	2100      	movs	r1, #0
 80074f0:	f006 f9ac 	bl	800d84c <memset>
    idct->cur_method[ci] = -1;
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 80074f8:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 80074fa:	f844 3b04 	str.w	r3, [r4], #4
       ci++, compptr++) {
 80074fe:	e7e7      	b.n	80074d0 <jinit_inverse_dct+0x20>
 8007500:	0800734d 	.word	0x0800734d

08007504 <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 8007504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 8007508:	6905      	ldr	r5, [r0, #16]
{
 800750a:	4607      	mov	r7, r0
 800750c:	4688      	mov	r8, r1
 800750e:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 8007510:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 8007514:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 8007516:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800751a:	f1bb 0f00 	cmp.w	fp, #0
 800751e:	d042      	beq.n	80075a6 <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 8007520:	454e      	cmp	r6, r9
 8007522:	da42      	bge.n	80075aa <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 8007524:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	b95b      	cbnz	r3, 8007544 <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	2278      	movs	r2, #120	; 0x78
 8007530:	f04f 31ff 	mov.w	r1, #4294967295
 8007534:	4628      	mov	r0, r5
 8007536:	615a      	str	r2, [r3, #20]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800753c:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 8007540:	2201      	movs	r2, #1
 8007542:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 8007544:	f1c6 0619 	rsb	r6, r6, #25
 8007548:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800754c:	2619      	movs	r6, #25
 800754e:	e02c      	b.n	80075aa <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 8007550:	f1ba 0f00 	cmp.w	sl, #0
 8007554:	d107      	bne.n	8007566 <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 8007556:	69ab      	ldr	r3, [r5, #24]
 8007558:	4628      	mov	r0, r5
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	4798      	blx	r3
 800755e:	b350      	cbz	r0, 80075b6 <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 8007560:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 8007562:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 8007566:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800756a:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800756e:	2aff      	cmp	r2, #255	; 0xff
 8007570:	d116      	bne.n	80075a0 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 8007572:	f1ba 0f00 	cmp.w	sl, #0
 8007576:	d109      	bne.n	800758c <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 8007578:	69ab      	ldr	r3, [r5, #24]
 800757a:	4628      	mov	r0, r5
 800757c:	9201      	str	r2, [sp, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	4798      	blx	r3
 8007582:	b1c0      	cbz	r0, 80075b6 <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 8007584:	69ab      	ldr	r3, [r5, #24]
 8007586:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 8007588:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800758c:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 8007590:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 8007594:	2bff      	cmp	r3, #255	; 0xff
 8007596:	d0ec      	beq.n	8007572 <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 8007598:	b113      	cbz	r3, 80075a0 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800759a:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800759e:	e7bf      	b.n	8007520 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 80075a0:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 80075a4:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 80075a6:	2e18      	cmp	r6, #24
 80075a8:	ddd2      	ble.n	8007550 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 80075aa:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 80075ae:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 80075b2:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 80075b6:	4658      	mov	r0, fp
 80075b8:	b003      	add	sp, #12
 80075ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080075c0 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 80075c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c2:	9d06      	ldr	r5, [sp, #24]
 80075c4:	4606      	mov	r6, r0
 80075c6:	468c      	mov	ip, r1
 80075c8:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 80075ca:	4295      	cmp	r5, r2
{
 80075cc:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 80075ce:	dd08      	ble.n	80075e2 <jpeg_huff_decode+0x22>
 80075d0:	462b      	mov	r3, r5
 80075d2:	f7ff ff97 	bl	8007504 <jpeg_fill_bit_buffer>
 80075d6:	b910      	cbnz	r0, 80075de <jpeg_huff_decode+0x1e>
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 80075dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 80075de:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 80075e2:	1b62      	subs	r2, r4, r5
 80075e4:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <jpeg_huff_decode+0x90>)
 80075e6:	fa4c f002 	asr.w	r0, ip, r2
 80075ea:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80075ee:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 80075f0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80075f4:	4283      	cmp	r3, r0
 80075f6:	db0d      	blt.n	8007614 <jpeg_huff_decode+0x54>
  if (l > 16) {
 80075f8:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 80075fa:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 80075fe:	dd1e      	ble.n	800763e <jpeg_huff_decode+0x7e>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 8007600:	6930      	ldr	r0, [r6, #16]
 8007602:	2279      	movs	r2, #121	; 0x79
 8007604:	f04f 31ff 	mov.w	r1, #4294967295
 8007608:	6803      	ldr	r3, [r0, #0]
 800760a:	615a      	str	r2, [r3, #20]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 8007610:	2000      	movs	r0, #0
 8007612:	e7e3      	b.n	80075dc <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 8007614:	2a00      	cmp	r2, #0
    code <<= 1;
 8007616:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800761a:	dc08      	bgt.n	800762e <jpeg_huff_decode+0x6e>
 800761c:	2301      	movs	r3, #1
 800761e:	4661      	mov	r1, ip
 8007620:	4630      	mov	r0, r6
 8007622:	f7ff ff6f 	bl	8007504 <jpeg_fill_bit_buffer>
 8007626:	2800      	cmp	r0, #0
 8007628:	d0d6      	beq.n	80075d8 <jpeg_huff_decode+0x18>
 800762a:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800762e:	3a01      	subs	r2, #1
    l++;
 8007630:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 8007632:	fa4c f002 	asr.w	r0, ip, r2
 8007636:	f000 0001 	and.w	r0, r0, #1
 800763a:	4320      	orrs	r0, r4
    l++;
 800763c:	e7d8      	b.n	80075f0 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800763e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007642:	3512      	adds	r5, #18
 8007644:	4418      	add	r0, r3
 8007646:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800764a:	4410      	add	r0, r2
 800764c:	7c40      	ldrb	r0, [r0, #17]
 800764e:	e7c5      	b.n	80075dc <jpeg_huff_decode+0x1c>
 8007650:	08012558 	.word	0x08012558

08007654 <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 8007654:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 8007656:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800765a:	2600      	movs	r6, #0
{
 800765c:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800765e:	68eb      	ldr	r3, [r5, #12]
 8007660:	6991      	ldr	r1, [r2, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	bfb8      	it	lt
 8007666:	3307      	addlt	r3, #7
 8007668:	eb01 03e3 	add.w	r3, r1, r3, asr #3
 800766c:	6193      	str	r3, [r2, #24]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800766e:	6893      	ldr	r3, [r2, #8]
  entropy->bitstate.bits_left = 0;
 8007670:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8007672:	4798      	blx	r3
 8007674:	b190      	cbz	r0, 800769c <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 8007676:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800767a:	4631      	mov	r1, r6
 800767c:	f105 0014 	add.w	r0, r5, #20
 8007680:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007684:	0092      	lsls	r2, r2, #2
 8007686:	f006 f8e1 	bl	800d84c <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800768a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800768e:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 8007690:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 8007692:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 8007696:	b903      	cbnz	r3, 800769a <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 8007698:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800769a:	2001      	movs	r0, #1
}
 800769c:	bd70      	pop	{r4, r5, r6, pc}
	...

080076a0 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 80076a4:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 80076a8:	b091      	sub	sp, #68	; 0x44
 80076aa:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 80076ac:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 80076b0:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 80076b2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 80076b6:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 80076b8:	b933      	cbnz	r3, 80076c8 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 80076ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80076bc:	b17e      	cbz	r6, 80076de <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 80076be:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 80076c0:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 80076c2:	3b01      	subs	r3, #1
 80076c4:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 80076c6:	e007      	b.n	80076d8 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 80076c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1f5      	bne.n	80076ba <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 80076ce:	f7ff ffc1 	bl	8007654 <process_restart>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d1f1      	bne.n	80076ba <decode_mcu_DC_first+0x1a>
	return FALSE;
 80076d6:	2000      	movs	r0, #0
}
 80076d8:	b011      	add	sp, #68	; 0x44
 80076da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 80076de:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 80076e0:	f104 0810 	add.w	r8, r4, #16
 80076e4:	af0b      	add	r7, sp, #44	; 0x2c
 80076e6:	f505 79b8 	add.w	r9, r5, #368	; 0x170
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	f104 0b10 	add.w	fp, r4, #16
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	9206      	str	r2, [sp, #24]
 80076f4:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 80076f6:	f8df a118 	ldr.w	sl, [pc, #280]	; 8007810 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 80076fa:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 80076fc:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007700:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 8007704:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8007706:	f8d8 3000 	ldr.w	r3, [r8]
 800770a:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800770c:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 8007710:	42b3      	cmp	r3, r6
 8007712:	dc0d      	bgt.n	8007730 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007714:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 8007716:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007718:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800771a:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	9a07      	ldr	r2, [sp, #28]
 8007720:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 8007722:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007724:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 8007728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800772a:	6833      	ldr	r3, [r6, #0]
 800772c:	602b      	str	r3, [r5, #0]
 800772e:	e7c6      	b.n	80076be <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 8007730:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 8007732:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 8007736:	f859 7b04 	ldr.w	r7, [r9], #4
      block = MCU_data[blkn];
 800773a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800773e:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 8007740:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 8007744:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800774e:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 8007752:	dc0c      	bgt.n	800776e <decode_mcu_DC_first+0xce>
 8007754:	2300      	movs	r3, #0
 8007756:	4662      	mov	r2, ip
 8007758:	4671      	mov	r1, lr
 800775a:	a806      	add	r0, sp, #24
 800775c:	f7ff fed2 	bl	8007504 <jpeg_fill_bit_buffer>
 8007760:	2800      	cmp	r0, #0
 8007762:	d0b8      	beq.n	80076d6 <decode_mcu_DC_first+0x36>
 8007764:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 8007768:	f1bc 0f07 	cmp.w	ip, #7
 800776c:	dd3e      	ble.n	80077ec <decode_mcu_DC_first+0x14c>
 800776e:	f1ac 0308 	sub.w	r3, ip, #8
 8007772:	fa4e f303 	asr.w	r3, lr, r3
 8007776:	b2db      	uxtb	r3, r3
 8007778:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800777c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8007780:	2a00      	cmp	r2, #0
 8007782:	d042      	beq.n	800780a <decode_mcu_DC_first+0x16a>
 8007784:	4443      	add	r3, r8
 8007786:	ebac 0c02 	sub.w	ip, ip, r2
 800778a:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800778e:	f1b8 0f00 	cmp.w	r8, #0
 8007792:	d01b      	beq.n	80077cc <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8007794:	45e0      	cmp	r8, ip
 8007796:	dd09      	ble.n	80077ac <decode_mcu_DC_first+0x10c>
 8007798:	4643      	mov	r3, r8
 800779a:	4662      	mov	r2, ip
 800779c:	4671      	mov	r1, lr
 800779e:	a806      	add	r0, sp, #24
 80077a0:	f7ff feb0 	bl	8007504 <jpeg_fill_bit_buffer>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d096      	beq.n	80076d6 <decode_mcu_DC_first+0x36>
 80077a8:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 80077ac:	ebac 0c08 	sub.w	ip, ip, r8
 80077b0:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 80077b4:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 80077b8:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 80077bc:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 80077c0:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 80077c2:	4299      	cmp	r1, r3
 80077c4:	bfac      	ite	ge
 80077c6:	eba3 0802 	subge.w	r8, r3, r2
 80077ca:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 80077cc:	ab10      	add	r3, sp, #64	; 0x40
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80077ce:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 80077d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
      (*block)[0] = (JCOEF) (s << Al);
 80077d4:	9b03      	ldr	r3, [sp, #12]
      s += state.last_dc_val[ci];
 80077d6:	f857 0c10 	ldr.w	r0, [r7, #-16]
 80077da:	4440      	add	r0, r8
      (*block)[0] = (JCOEF) (s << Al);
 80077dc:	fa00 f803 	lsl.w	r8, r0, r3
 80077e0:	9b04      	ldr	r3, [sp, #16]
      state.last_dc_val[ci] = s;
 80077e2:	f847 0c10 	str.w	r0, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 80077e6:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80077ea:	e78f      	b.n	800770c <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 80077ec:	2301      	movs	r3, #1
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	4662      	mov	r2, ip
 80077f2:	4643      	mov	r3, r8
 80077f4:	4671      	mov	r1, lr
 80077f6:	a806      	add	r0, sp, #24
 80077f8:	f7ff fee2 	bl	80075c0 <jpeg_huff_decode>
 80077fc:	f1b0 0800 	subs.w	r8, r0, #0
 8007800:	f6ff af69 	blt.w	80076d6 <decode_mcu_DC_first+0x36>
 8007804:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 8007808:	e7c1      	b.n	800778e <decode_mcu_DC_first+0xee>
 800780a:	2309      	movs	r3, #9
 800780c:	e7ef      	b.n	80077ee <decode_mcu_DC_first+0x14e>
 800780e:	bf00      	nop
 8007810:	08012558 	.word	0x08012558

08007814 <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 8007814:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 8007818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	4607      	mov	r7, r0
 800781e:	b08d      	sub	sp, #52	; 0x34
 8007820:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007822:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8007826:	b933      	cbnz	r3, 8007836 <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 8007828:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800782a:	b17b      	cbz	r3, 800784c <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800782c:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800782e:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 8007830:	3b01      	subs	r3, #1
 8007832:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 8007834:	e007      	b.n	8007846 <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 8007836:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1f5      	bne.n	8007828 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800783c:	f7ff ff0a 	bl	8007654 <process_restart>
 8007840:	2800      	cmp	r0, #0
 8007842:	d1f1      	bne.n	8007828 <decode_mcu_AC_first+0x14>
	return FALSE;
 8007844:	2000      	movs	r0, #0
}
 8007846:	b00d      	add	sp, #52	; 0x34
 8007848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800784c:	692e      	ldr	r6, [r5, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800784e:	b116      	cbz	r6, 8007856 <decode_mcu_AC_first+0x42>
      EOBRUN--;			/* ...process it now (we do nothing) */
 8007850:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 8007852:	612e      	str	r6, [r5, #16]
 8007854:	e7ea      	b.n	800782c <decode_mcu_AC_first+0x18>
    Se = cinfo->Se;
 8007856:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    natural_order = cinfo->natural_order;
 800785a:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Se = cinfo->Se;
 800785e:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 8007860:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
      tbl = entropy->ac_derived_tbl;
 8007864:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
    Al = cinfo->Al;
 8007868:	9304      	str	r3, [sp, #16]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800786a:	69bb      	ldr	r3, [r7, #24]
      for (k = cinfo->Ss; k <= Se; k++) {
 800786c:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	9207      	str	r2, [sp, #28]
 8007876:	9308      	str	r3, [sp, #32]
	  r = GET_BITS(s);
 8007878:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8007970 <decode_mcu_AC_first+0x15c>
      block = MCU_data[0];
 800787c:	6823      	ldr	r3, [r4, #0]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800787e:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 8007880:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007882:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 8007886:	9b03      	ldr	r3, [sp, #12]
 8007888:	4598      	cmp	r8, r3
 800788a:	dc69      	bgt.n	8007960 <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800788c:	2a07      	cmp	r2, #7
 800788e:	dc09      	bgt.n	80078a4 <decode_mcu_AC_first+0x90>
 8007890:	2300      	movs	r3, #0
 8007892:	a807      	add	r0, sp, #28
 8007894:	f7ff fe36 	bl	8007504 <jpeg_fill_bit_buffer>
 8007898:	2800      	cmp	r0, #0
 800789a:	d0d3      	beq.n	8007844 <decode_mcu_AC_first+0x30>
 800789c:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 80078a0:	2a07      	cmp	r2, #7
 80078a2:	dd33      	ble.n	800790c <decode_mcu_AC_first+0xf8>
 80078a4:	f1a2 0308 	sub.w	r3, r2, #8
 80078a8:	fa41 f303 	asr.w	r3, r1, r3
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80078b2:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 80078b6:	b3a0      	cbz	r0, 8007922 <decode_mcu_AC_first+0x10e>
 80078b8:	444b      	add	r3, r9
 80078ba:	1a12      	subs	r2, r2, r0
 80078bc:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 80078c0:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 80078c4:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 80078c8:	d02d      	beq.n	8007926 <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 80078ca:	42a2      	cmp	r2, r4
	  k += r;
 80078cc:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 80078ce:	da07      	bge.n	80078e0 <decode_mcu_AC_first+0xcc>
 80078d0:	4623      	mov	r3, r4
 80078d2:	a807      	add	r0, sp, #28
 80078d4:	f7ff fe16 	bl	8007504 <jpeg_fill_bit_buffer>
 80078d8:	2800      	cmp	r0, #0
 80078da:	d0b3      	beq.n	8007844 <decode_mcu_AC_first+0x30>
 80078dc:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 80078e0:	1b12      	subs	r2, r2, r4
 80078e2:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 80078e6:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 80078e8:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 80078ec:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 80078f0:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 80078f2:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 80078f4:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 80078f6:	bfa8      	it	ge
 80078f8:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 80078fa:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 80078fe:	40a3      	lsls	r3, r4
 8007900:	9c05      	ldr	r4, [sp, #20]
 8007902:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 8007906:	f108 0801 	add.w	r8, r8, #1
 800790a:	e7bc      	b.n	8007886 <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800790c:	2301      	movs	r3, #1
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	a807      	add	r0, sp, #28
 8007912:	464b      	mov	r3, r9
 8007914:	f7ff fe54 	bl	80075c0 <jpeg_huff_decode>
 8007918:	2800      	cmp	r0, #0
 800791a:	db93      	blt.n	8007844 <decode_mcu_AC_first+0x30>
 800791c:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 8007920:	e7ce      	b.n	80078c0 <decode_mcu_AC_first+0xac>
 8007922:	2309      	movs	r3, #9
 8007924:	e7f3      	b.n	800790e <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 8007926:	2b0f      	cmp	r3, #15
 8007928:	d102      	bne.n	8007930 <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800792a:	f108 080f 	add.w	r8, r8, #15
 800792e:	e7ea      	b.n	8007906 <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 8007930:	2601      	movs	r6, #1
 8007932:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 8007934:	b19b      	cbz	r3, 800795e <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 8007936:	429a      	cmp	r2, r3
 8007938:	da09      	bge.n	800794e <decode_mcu_AC_first+0x13a>
 800793a:	a807      	add	r0, sp, #28
 800793c:	9303      	str	r3, [sp, #12]
 800793e:	f7ff fde1 	bl	8007504 <jpeg_fill_bit_buffer>
 8007942:	2800      	cmp	r0, #0
 8007944:	f43f af7e 	beq.w	8007844 <decode_mcu_AC_first+0x30>
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	4807      	ldr	r0, [pc, #28]	; (8007970 <decode_mcu_AC_first+0x15c>)
 8007952:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007956:	fa41 f302 	asr.w	r3, r1, r2
 800795a:	4003      	ands	r3, r0
	      EOBRUN += r;
 800795c:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800795e:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	9807      	ldr	r0, [sp, #28]
 8007964:	6018      	str	r0, [r3, #0]
 8007966:	9808      	ldr	r0, [sp, #32]
 8007968:	6058      	str	r0, [r3, #4]
 800796a:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800796e:	e770      	b.n	8007852 <decode_mcu_AC_first+0x3e>
 8007970:	08012558 	.word	0x08012558

08007974 <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 8007974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 8007978:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800797c:	2701      	movs	r7, #1
{   
 800797e:	b087      	sub	sp, #28
 8007980:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 8007982:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 8007984:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 8007988:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800798a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800798e:	b9c3      	cbnz	r3, 80079c2 <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007990:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007992:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007994:	9405      	str	r4, [sp, #20]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	9201      	str	r2, [sp, #4]
 800799c:	9302      	str	r3, [sp, #8]
 800799e:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80079a2:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 80079a6:	42b3      	cmp	r3, r6
 80079a8:	dc16      	bgt.n	80079d8 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 80079aa:	69a3      	ldr	r3, [r4, #24]
 80079ac:	9801      	ldr	r0, [sp, #4]
 80079ae:	6018      	str	r0, [r3, #0]
 80079b0:	9802      	ldr	r0, [sp, #8]
 80079b2:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 80079b4:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 80079b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80079b8:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 80079ba:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 80079be:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 80079c0:	e007      	b.n	80079d2 <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 80079c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e3      	bne.n	8007990 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 80079c8:	f7ff fe44 	bl	8007654 <process_restart>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d1df      	bne.n	8007990 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 80079d0:	2000      	movs	r0, #0
}
 80079d2:	b007      	add	sp, #28
 80079d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 80079d8:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 80079da:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 80079de:	dc07      	bgt.n	80079f0 <decode_mcu_DC_refine+0x7c>
 80079e0:	2301      	movs	r3, #1
 80079e2:	a801      	add	r0, sp, #4
 80079e4:	f7ff fd8e 	bl	8007504 <jpeg_fill_bit_buffer>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d0f1      	beq.n	80079d0 <decode_mcu_DC_refine+0x5c>
 80079ec:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 80079f0:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80079f2:	3601      	adds	r6, #1
    if (GET_BITS(1))
 80079f4:	fa41 f302 	asr.w	r3, r1, r2
 80079f8:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 80079fa:	bf42      	ittt	mi
 80079fc:	f8b9 3000 	ldrhmi.w	r3, [r9]
 8007a00:	433b      	orrmi	r3, r7
 8007a02:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007a06:	e7cc      	b.n	80079a2 <decode_mcu_DC_refine+0x2e>

08007a08 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 8007a08:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 8007a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a10:	4606      	mov	r6, r0
 8007a12:	b0d1      	sub	sp, #324	; 0x144
 8007a14:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007a16:	f8d0 81d0 	ldr.w	r8, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 8007a1a:	b95b      	cbnz	r3, 8007a34 <decode_mcu_AC_refine+0x2c>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 8007a1c:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 8007a20:	f1bb 0f00 	cmp.w	fp, #0
 8007a24:	d012      	beq.n	8007a4c <decode_mcu_AC_refine+0x44>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 8007a26:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

  return TRUE;
 8007a2a:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  return TRUE;
 8007a32:	e008      	b.n	8007a46 <decode_mcu_AC_refine+0x3e>
    if (entropy->restarts_to_go == 0)
 8007a34:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1ef      	bne.n	8007a1c <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 8007a3c:	f7ff fe0a 	bl	8007654 <process_restart>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d1eb      	bne.n	8007a1c <decode_mcu_AC_refine+0x14>
	return FALSE;
 8007a44:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 8007a46:	b051      	add	sp, #324	; 0x144
 8007a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 8007a4c:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 8007a50:	2201      	movs	r2, #1
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007a52:	ad0b      	add	r5, sp, #44	; 0x2c
    block = MCU_data[0];
 8007a54:	f8d7 9000 	ldr.w	r9, [r7]
    Se = cinfo->Se;
 8007a58:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 8007a5a:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    k = cinfo->Ss;
 8007a5e:	f8d6 7198 	ldr.w	r7, [r6, #408]	; 0x198
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 8007a62:	409a      	lsls	r2, r3
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007a64:	612e      	str	r6, [r5, #16]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 8007a66:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8007a68:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a70:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 8007a72:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
 8007a76:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007a78:	69b3      	ldr	r3, [r6, #24]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	602a      	str	r2, [r5, #0]
 8007a80:	606b      	str	r3, [r5, #4]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 8007a82:	f8d8 3010 	ldr.w	r3, [r8, #16]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007a86:	e9d8 4202 	ldrd	r4, r2, [r8, #8]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 8007a8a:	9302      	str	r3, [sp, #8]
    if (EOBRUN == 0) {
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f040 80bf 	bne.w	8007c10 <decode_mcu_AC_refine+0x208>
    tbl = entropy->ac_derived_tbl;
 8007a92:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8007a96:	9309      	str	r3, [sp, #36]	; 0x24
      for (; k <= Se; k++) {
 8007a98:	9b06      	ldr	r3, [sp, #24]
 8007a9a:	429f      	cmp	r7, r3
 8007a9c:	dd0a      	ble.n	8007ab4 <decode_mcu_AC_refine+0xac>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007a9e:	69b3      	ldr	r3, [r6, #24]
 8007aa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007aa2:	6019      	str	r1, [r3, #0]
 8007aa4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007aa6:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 8007aa8:	9b02      	ldr	r3, [sp, #8]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007aaa:	e9c8 4202 	strd	r4, r2, [r8, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 8007aae:	f8c8 3010 	str.w	r3, [r8, #16]
 8007ab2:	e7b8      	b.n	8007a26 <decode_mcu_AC_refine+0x1e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 8007ab4:	2a07      	cmp	r2, #7
 8007ab6:	dc0a      	bgt.n	8007ace <decode_mcu_AC_refine+0xc6>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4621      	mov	r1, r4
 8007abc:	4628      	mov	r0, r5
 8007abe:	f7ff fd21 	bl	8007504 <jpeg_fill_bit_buffer>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d06e      	beq.n	8007ba4 <decode_mcu_AC_refine+0x19c>
 8007ac6:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 8007aca:	2a07      	cmp	r2, #7
 8007acc:	dd61      	ble.n	8007b92 <decode_mcu_AC_refine+0x18a>
 8007ace:	f1a2 0308 	sub.w	r3, r2, #8
 8007ad2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ad4:	fa44 f303 	asr.w	r3, r4, r3
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007ade:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8007ae2:	2900      	cmp	r1, #0
 8007ae4:	d06b      	beq.n	8007bbe <decode_mcu_AC_refine+0x1b6>
 8007ae6:	4403      	add	r3, r0
 8007ae8:	1a52      	subs	r2, r2, r1
 8007aea:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 8007aee:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 8007af2:	ea4f 1a20 	mov.w	sl, r0, asr #4
	if (s) {
 8007af6:	9304      	str	r3, [sp, #16]
 8007af8:	d066      	beq.n	8007bc8 <decode_mcu_AC_refine+0x1c0>
	  if (s != 1)		/* size of new coef should always be 1 */
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d009      	beq.n	8007b12 <decode_mcu_AC_refine+0x10a>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 8007afe:	6833      	ldr	r3, [r6, #0]
 8007b00:	2179      	movs	r1, #121	; 0x79
 8007b02:	4630      	mov	r0, r6
 8007b04:	9204      	str	r2, [sp, #16]
 8007b06:	6159      	str	r1, [r3, #20]
 8007b08:	f04f 31ff 	mov.w	r1, #4294967295
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	4798      	blx	r3
 8007b10:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 8007b12:	2a00      	cmp	r2, #0
 8007b14:	dc08      	bgt.n	8007b28 <decode_mcu_AC_refine+0x120>
 8007b16:	2301      	movs	r3, #1
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f7ff fcf2 	bl	8007504 <jpeg_fill_bit_buffer>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d03f      	beq.n	8007ba4 <decode_mcu_AC_refine+0x19c>
 8007b24:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	  if (GET_BITS(1))
 8007b28:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 8007b2a:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 8007b2c:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 8007b30:	f013 0f01 	tst.w	r3, #1
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	bf08      	it	eq
 8007b38:	460b      	moveq	r3, r1
 8007b3a:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 8007b3c:	9b08      	ldr	r3, [sp, #32]
 8007b3e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8007b42:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 8007b44:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d068      	beq.n	8007c1e <decode_mcu_AC_refine+0x216>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 8007b4c:	2a00      	cmp	r2, #0
 8007b4e:	dc07      	bgt.n	8007b60 <decode_mcu_AC_refine+0x158>
 8007b50:	2301      	movs	r3, #1
 8007b52:	4621      	mov	r1, r4
 8007b54:	4628      	mov	r0, r5
 8007b56:	f7ff fcd5 	bl	8007504 <jpeg_fill_bit_buffer>
 8007b5a:	b318      	cbz	r0, 8007ba4 <decode_mcu_AC_refine+0x19c>
 8007b5c:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	    if (GET_BITS(1)) {
 8007b60:	3a01      	subs	r2, #1
 8007b62:	fa44 f302 	asr.w	r3, r4, r2
 8007b66:	07d9      	lsls	r1, r3, #31
 8007b68:	d50e      	bpl.n	8007b88 <decode_mcu_AC_refine+0x180>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 8007b6a:	9b05      	ldr	r3, [sp, #20]
 8007b6c:	f939 1013 	ldrsh.w	r1, [r9, r3, lsl #1]
 8007b70:	9b03      	ldr	r3, [sp, #12]
 8007b72:	4219      	tst	r1, r3
 8007b74:	d108      	bne.n	8007b88 <decode_mcu_AC_refine+0x180>
		if (*thiscoef >= 0)
 8007b76:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 8007b78:	b28b      	uxth	r3, r1
 8007b7a:	bfac      	ite	ge
 8007b7c:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 8007b7e:	9907      	ldrlt	r1, [sp, #28]
 8007b80:	440b      	add	r3, r1
 8007b82:	9905      	ldr	r1, [sp, #20]
 8007b84:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
	  k++;
 8007b88:	3701      	adds	r7, #1
	} while (k <= Se);
 8007b8a:	9b06      	ldr	r3, [sp, #24]
 8007b8c:	42bb      	cmp	r3, r7
 8007b8e:	dad5      	bge.n	8007b3c <decode_mcu_AC_refine+0x134>
 8007b90:	e048      	b.n	8007c24 <decode_mcu_AC_refine+0x21c>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 8007b92:	2301      	movs	r3, #1
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	4621      	mov	r1, r4
 8007b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f7ff fd10 	bl	80075c0 <jpeg_huff_decode>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	da0e      	bge.n	8007bc2 <decode_mcu_AC_refine+0x1ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 8007ba4:	ab10      	add	r3, sp, #64	; 0x40
 8007ba6:	2200      	movs	r2, #0
  while (num_newnz > 0)
 8007ba8:	f1bb 0f00 	cmp.w	fp, #0
 8007bac:	f43f af4a 	beq.w	8007a44 <decode_mcu_AC_refine+0x3c>
    (*block)[newnz_pos[--num_newnz]] = 0;
 8007bb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007bb4:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 8007bb8:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
 8007bbc:	e7f4      	b.n	8007ba8 <decode_mcu_AC_refine+0x1a0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 8007bbe:	2309      	movs	r3, #9
 8007bc0:	e7e8      	b.n	8007b94 <decode_mcu_AC_refine+0x18c>
 8007bc2:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 8007bc6:	e792      	b.n	8007aee <decode_mcu_AC_refine+0xe6>
	  if (r != 15) {
 8007bc8:	f1ba 0f0f 	cmp.w	sl, #15
 8007bcc:	d0b6      	beq.n	8007b3c <decode_mcu_AC_refine+0x134>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 8007bce:	2301      	movs	r3, #1
 8007bd0:	fa03 f30a 	lsl.w	r3, r3, sl
 8007bd4:	9302      	str	r3, [sp, #8]
	    if (r) {
 8007bd6:	f1ba 0f00 	cmp.w	sl, #0
 8007bda:	d015      	beq.n	8007c08 <decode_mcu_AC_refine+0x200>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 8007bdc:	4552      	cmp	r2, sl
 8007bde:	da08      	bge.n	8007bf2 <decode_mcu_AC_refine+0x1ea>
 8007be0:	4653      	mov	r3, sl
 8007be2:	4621      	mov	r1, r4
 8007be4:	a80b      	add	r0, sp, #44	; 0x2c
 8007be6:	f7ff fc8d 	bl	8007504 <jpeg_fill_bit_buffer>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d0da      	beq.n	8007ba4 <decode_mcu_AC_refine+0x19c>
 8007bee:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 8007bf2:	4b26      	ldr	r3, [pc, #152]	; (8007c8c <decode_mcu_AC_refine+0x284>)
 8007bf4:	eba2 020a 	sub.w	r2, r2, sl
 8007bf8:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8007bfc:	fa44 f302 	asr.w	r3, r4, r2
 8007c00:	400b      	ands	r3, r1
	      EOBRUN += r;
 8007c02:	9902      	ldr	r1, [sp, #8]
 8007c04:	4419      	add	r1, r3
 8007c06:	9102      	str	r1, [sp, #8]
    if (EOBRUN > 0) {
 8007c08:	9b02      	ldr	r3, [sp, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f43f af47 	beq.w	8007a9e <decode_mcu_AC_refine+0x96>
      for (; k <= Se; k++) {
 8007c10:	9b06      	ldr	r3, [sp, #24]
 8007c12:	429f      	cmp	r7, r3
 8007c14:	dd15      	ble.n	8007c42 <decode_mcu_AC_refine+0x23a>
      EOBRUN--;
 8007c16:	9b02      	ldr	r3, [sp, #8]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	9302      	str	r3, [sp, #8]
 8007c1c:	e73f      	b.n	8007a9e <decode_mcu_AC_refine+0x96>
	    if (--r < 0)
 8007c1e:	f1ba 0a01 	subs.w	sl, sl, #1
 8007c22:	d2b1      	bcs.n	8007b88 <decode_mcu_AC_refine+0x180>
	if (s) {
 8007c24:	9b04      	ldr	r3, [sp, #16]
 8007c26:	b153      	cbz	r3, 8007c3e <decode_mcu_AC_refine+0x236>
	  int pos = natural_order[k];
 8007c28:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 8007c2a:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 8007c2c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 8007c30:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 8007c34:	a910      	add	r1, sp, #64	; 0x40
 8007c36:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
 8007c3a:	f10b 0b01 	add.w	fp, fp, #1
      for (; k <= Se; k++) {
 8007c3e:	3701      	adds	r7, #1
 8007c40:	e72a      	b.n	8007a98 <decode_mcu_AC_refine+0x90>
	thiscoef = *block + natural_order[k];
 8007c42:	9b08      	ldr	r3, [sp, #32]
 8007c44:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (*thiscoef != 0) {
 8007c48:	f939 3015 	ldrsh.w	r3, [r9, r5, lsl #1]
 8007c4c:	b1e3      	cbz	r3, 8007c88 <decode_mcu_AC_refine+0x280>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	dc08      	bgt.n	8007c64 <decode_mcu_AC_refine+0x25c>
 8007c52:	2301      	movs	r3, #1
 8007c54:	4621      	mov	r1, r4
 8007c56:	a80b      	add	r0, sp, #44	; 0x2c
 8007c58:	f7ff fc54 	bl	8007504 <jpeg_fill_bit_buffer>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d0a1      	beq.n	8007ba4 <decode_mcu_AC_refine+0x19c>
 8007c60:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 8007c64:	3a01      	subs	r2, #1
 8007c66:	fa44 f302 	asr.w	r3, r4, r2
 8007c6a:	07db      	lsls	r3, r3, #31
 8007c6c:	d50c      	bpl.n	8007c88 <decode_mcu_AC_refine+0x280>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 8007c6e:	f939 1015 	ldrsh.w	r1, [r9, r5, lsl #1]
 8007c72:	9b03      	ldr	r3, [sp, #12]
 8007c74:	4219      	tst	r1, r3
 8007c76:	d107      	bne.n	8007c88 <decode_mcu_AC_refine+0x280>
	      if (*thiscoef >= 0)
 8007c78:	2900      	cmp	r1, #0
		*thiscoef += p1;
 8007c7a:	b28b      	uxth	r3, r1
 8007c7c:	bfac      	ite	ge
 8007c7e:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 8007c80:	9907      	ldrlt	r1, [sp, #28]
 8007c82:	440b      	add	r3, r1
 8007c84:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
      for (; k <= Se; k++) {
 8007c88:	3701      	adds	r7, #1
 8007c8a:	e7c1      	b.n	8007c10 <decode_mcu_AC_refine+0x208>
 8007c8c:	08012558 	.word	0x08012558

08007c90 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8007c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 8007c94:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8007c98:	b093      	sub	sp, #76	; 0x4c
 8007c9a:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007c9c:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 8007ca0:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 8007ca2:	b933      	cbnz	r3, 8007cb2 <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 8007ca4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8007ca6:	b17f      	cbz	r7, 8007cc8 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 8007ca8:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 8007caa:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 8007cac:	3b01      	subs	r3, #1
 8007cae:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 8007cb0:	e007      	b.n	8007cc2 <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 8007cb2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1f5      	bne.n	8007ca4 <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 8007cb8:	f7ff fccc 	bl	8007654 <process_restart>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d1f1      	bne.n	8007ca4 <decode_mcu_sub+0x14>
	return FALSE;
 8007cc0:	2000      	movs	r0, #0
}
 8007cc2:	b013      	add	sp, #76	; 0x4c
 8007cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 8007cc8:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 8007ccc:	f105 0810 	add.w	r8, r5, #16
 8007cd0:	ac0d      	add	r4, sp, #52	; 0x34
 8007cd2:	f105 0960 	add.w	r9, r5, #96	; 0x60
    natural_order = cinfo->natural_order;
 8007cd6:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 8007cd8:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 8007cdc:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8007f7c <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 8007ce0:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007ce2:	69b3      	ldr	r3, [r6, #24]
 8007ce4:	960c      	str	r6, [sp, #48]	; 0x30
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	9208      	str	r2, [sp, #32]
 8007cec:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 8007cee:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007cf2:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 8007cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8007cfc:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007cfe:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 8007d02:	42bb      	cmp	r3, r7
 8007d04:	dc0e      	bgt.n	8007d24 <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007d06:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 8007d08:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007d0a:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 8007d0c:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d14:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 8007d16:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007d18:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 8007d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d1e:	6833      	ldr	r3, [r6, #0]
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	e7c1      	b.n	8007ca8 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 8007d24:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 8007d26:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 8007d2a:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 8007d2e:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 8007d32:	dc0c      	bgt.n	8007d4e <decode_mcu_sub+0xbe>
 8007d34:	2300      	movs	r3, #0
 8007d36:	4662      	mov	r2, ip
 8007d38:	4671      	mov	r1, lr
 8007d3a:	a808      	add	r0, sp, #32
 8007d3c:	f7ff fbe2 	bl	8007504 <jpeg_fill_bit_buffer>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d0bd      	beq.n	8007cc0 <decode_mcu_sub+0x30>
 8007d44:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 8007d48:	f1bc 0f07 	cmp.w	ip, #7
 8007d4c:	dd4a      	ble.n	8007de4 <decode_mcu_sub+0x154>
 8007d4e:	f1ac 0308 	sub.w	r3, ip, #8
 8007d52:	fa4e f303 	asr.w	r3, lr, r3
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8007d5c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d60:	2a00      	cmp	r2, #0
 8007d62:	d04d      	beq.n	8007e00 <decode_mcu_sub+0x170>
 8007d64:	4423      	add	r3, r4
 8007d66:	ebac 0c02 	sub.w	ip, ip, r2
 8007d6a:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 8007d6e:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 8007d72:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 8007d76:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 80a0 	beq.w	8007ebe <decode_mcu_sub+0x22e>
	if (s) {
 8007d7e:	b1cc      	cbz	r4, 8007db4 <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8007d80:	45a4      	cmp	ip, r4
 8007d82:	da09      	bge.n	8007d98 <decode_mcu_sub+0x108>
 8007d84:	4623      	mov	r3, r4
 8007d86:	4662      	mov	r2, ip
 8007d88:	4671      	mov	r1, lr
 8007d8a:	a808      	add	r0, sp, #32
 8007d8c:	f7ff fbba 	bl	8007504 <jpeg_fill_bit_buffer>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d095      	beq.n	8007cc0 <decode_mcu_sub+0x30>
 8007d94:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 8007d98:	ebac 0c04 	sub.w	ip, ip, r4
 8007d9c:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 8007da0:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 8007da2:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 8007da6:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 8007daa:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 8007dac:	4299      	cmp	r1, r3
 8007dae:	bfac      	ite	ge
 8007db0:	1a9c      	subge	r4, r3, r2
 8007db2:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 8007db4:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 8007db8:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 8007dbc:	ab12      	add	r3, sp, #72	; 0x48
 8007dbe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007dc2:	f852 3c10 	ldr.w	r3, [r2, #-16]
 8007dc6:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 8007dc8:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 8007dcc:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 8007dd0:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 8007dd2:	9b03      	ldr	r3, [sp, #12]
 8007dd4:	429c      	cmp	r4, r3
 8007dd6:	db15      	blt.n	8007e04 <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 8007dd8:	9b05      	ldr	r3, [sp, #20]
 8007dda:	429c      	cmp	r4, r3
 8007ddc:	f340 8081 	ble.w	8007ee2 <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007de0:	3701      	adds	r7, #1
 8007de2:	e78c      	b.n	8007cfe <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 8007de4:	2301      	movs	r3, #1
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	4662      	mov	r2, ip
 8007dea:	4623      	mov	r3, r4
 8007dec:	4671      	mov	r1, lr
 8007dee:	a808      	add	r0, sp, #32
 8007df0:	f7ff fbe6 	bl	80075c0 <jpeg_huff_decode>
 8007df4:	1e04      	subs	r4, r0, #0
 8007df6:	f6ff af63 	blt.w	8007cc0 <decode_mcu_sub+0x30>
 8007dfa:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 8007dfe:	e7b6      	b.n	8007d6e <decode_mcu_sub+0xde>
 8007e00:	2309      	movs	r3, #9
 8007e02:	e7f0      	b.n	8007de6 <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 8007e04:	f1bc 0f07 	cmp.w	ip, #7
 8007e08:	dc0d      	bgt.n	8007e26 <decode_mcu_sub+0x196>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4662      	mov	r2, ip
 8007e0e:	4671      	mov	r1, lr
 8007e10:	a808      	add	r0, sp, #32
 8007e12:	f7ff fb77 	bl	8007504 <jpeg_fill_bit_buffer>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	f43f af52 	beq.w	8007cc0 <decode_mcu_sub+0x30>
 8007e1c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 8007e20:	f1bc 0f07 	cmp.w	ip, #7
 8007e24:	dd37      	ble.n	8007e96 <decode_mcu_sub+0x206>
 8007e26:	f1ac 0308 	sub.w	r3, ip, #8
 8007e2a:	fa4e f303 	asr.w	r3, lr, r3
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8007e34:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	d03a      	beq.n	8007eb2 <decode_mcu_sub+0x222>
 8007e3c:	4443      	add	r3, r8
 8007e3e:	ebac 0c02 	sub.w	ip, ip, r2
 8007e42:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 8007e46:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 8007e4a:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 8007e4e:	d032      	beq.n	8007eb6 <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8007e50:	459c      	cmp	ip, r3
	    k += r;
 8007e52:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8007e54:	da0b      	bge.n	8007e6e <decode_mcu_sub+0x1de>
 8007e56:	4662      	mov	r2, ip
 8007e58:	4671      	mov	r1, lr
 8007e5a:	a808      	add	r0, sp, #32
 8007e5c:	9307      	str	r3, [sp, #28]
 8007e5e:	f7ff fb51 	bl	8007504 <jpeg_fill_bit_buffer>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	f43f af2c 	beq.w	8007cc0 <decode_mcu_sub+0x30>
 8007e68:	9b07      	ldr	r3, [sp, #28]
 8007e6a:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 8007e6e:	ebac 0c03 	sub.w	ip, ip, r3
 8007e72:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 8007e76:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 8007e78:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 8007e7c:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 8007e80:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 8007e82:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 8007e84:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 8007e86:	bfa8      	it	ge
 8007e88:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 8007e8a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e8e:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 8007e92:	3401      	adds	r4, #1
 8007e94:	e79d      	b.n	8007dd2 <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 8007e96:	2301      	movs	r3, #1
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	4662      	mov	r2, ip
 8007e9c:	4643      	mov	r3, r8
 8007e9e:	4671      	mov	r1, lr
 8007ea0:	a808      	add	r0, sp, #32
 8007ea2:	f7ff fb8d 	bl	80075c0 <jpeg_huff_decode>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	f6ff af0a 	blt.w	8007cc0 <decode_mcu_sub+0x30>
 8007eac:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 8007eb0:	e7c9      	b.n	8007e46 <decode_mcu_sub+0x1b6>
 8007eb2:	2309      	movs	r3, #9
 8007eb4:	e7f0      	b.n	8007e98 <decode_mcu_sub+0x208>
	    if (r != 15)
 8007eb6:	2a0f      	cmp	r2, #15
 8007eb8:	d192      	bne.n	8007de0 <decode_mcu_sub+0x150>
	    k += 15;
 8007eba:	340f      	adds	r4, #15
 8007ebc:	e7e9      	b.n	8007e92 <decode_mcu_sub+0x202>
	if (s) {
 8007ebe:	b174      	cbz	r4, 8007ede <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8007ec0:	45a4      	cmp	ip, r4
 8007ec2:	da0a      	bge.n	8007eda <decode_mcu_sub+0x24a>
 8007ec4:	4623      	mov	r3, r4
 8007ec6:	4662      	mov	r2, ip
 8007ec8:	4671      	mov	r1, lr
 8007eca:	a808      	add	r0, sp, #32
 8007ecc:	f7ff fb1a 	bl	8007504 <jpeg_fill_bit_buffer>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	f43f aef5 	beq.w	8007cc0 <decode_mcu_sub+0x30>
 8007ed6:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 8007eda:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 8007ede:	2401      	movs	r4, #1
 8007ee0:	e77a      	b.n	8007dd8 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 8007ee2:	f1bc 0f07 	cmp.w	ip, #7
 8007ee6:	dc0d      	bgt.n	8007f04 <decode_mcu_sub+0x274>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	4662      	mov	r2, ip
 8007eec:	4671      	mov	r1, lr
 8007eee:	a808      	add	r0, sp, #32
 8007ef0:	f7ff fb08 	bl	8007504 <jpeg_fill_bit_buffer>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f43f aee3 	beq.w	8007cc0 <decode_mcu_sub+0x30>
 8007efa:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 8007efe:	f1bc 0f07 	cmp.w	ip, #7
 8007f02:	dd25      	ble.n	8007f50 <decode_mcu_sub+0x2c0>
 8007f04:	f1ac 0308 	sub.w	r3, ip, #8
 8007f08:	fa4e f303 	asr.w	r3, lr, r3
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8007f12:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8007f16:	b34a      	cbz	r2, 8007f6c <decode_mcu_sub+0x2dc>
 8007f18:	4443      	add	r3, r8
 8007f1a:	ebac 0c02 	sub.w	ip, ip, r2
 8007f1e:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 8007f22:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 8007f26:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 8007f2a:	d021      	beq.n	8007f70 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8007f2c:	45dc      	cmp	ip, fp
	  k += r;
 8007f2e:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8007f30:	da0a      	bge.n	8007f48 <decode_mcu_sub+0x2b8>
 8007f32:	465b      	mov	r3, fp
 8007f34:	4662      	mov	r2, ip
 8007f36:	4671      	mov	r1, lr
 8007f38:	a808      	add	r0, sp, #32
 8007f3a:	f7ff fae3 	bl	8007504 <jpeg_fill_bit_buffer>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f43f aebe 	beq.w	8007cc0 <decode_mcu_sub+0x30>
 8007f44:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 8007f48:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 8007f4c:	3401      	adds	r4, #1
 8007f4e:	e743      	b.n	8007dd8 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 8007f50:	2301      	movs	r3, #1
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	4662      	mov	r2, ip
 8007f56:	4643      	mov	r3, r8
 8007f58:	4671      	mov	r1, lr
 8007f5a:	a808      	add	r0, sp, #32
 8007f5c:	f7ff fb30 	bl	80075c0 <jpeg_huff_decode>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	f6ff aead 	blt.w	8007cc0 <decode_mcu_sub+0x30>
 8007f66:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 8007f6a:	e7da      	b.n	8007f22 <decode_mcu_sub+0x292>
 8007f6c:	2309      	movs	r3, #9
 8007f6e:	e7f0      	b.n	8007f52 <decode_mcu_sub+0x2c2>
	  if (r != 15)
 8007f70:	2b0f      	cmp	r3, #15
 8007f72:	f47f af35 	bne.w	8007de0 <decode_mcu_sub+0x150>
	  k += 15;
 8007f76:	340f      	adds	r4, #15
 8007f78:	e7e8      	b.n	8007f4c <decode_mcu_sub+0x2bc>
 8007f7a:	bf00      	nop
 8007f7c:	08012558 	.word	0x08012558

08007f80 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 8007f84:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8007f88:	b091      	sub	sp, #68	; 0x44
 8007f8a:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007f8c:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 8007f90:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 8007f92:	b933      	cbnz	r3, 8007fa2 <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 8007f94:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8007f96:	b17f      	cbz	r7, 8007fb8 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 8007f98:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 8007f9a:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 8007fa0:	e007      	b.n	8007fb2 <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 8007fa2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1f5      	bne.n	8007f94 <decode_mcu+0x14>
      if (! process_restart(cinfo))
 8007fa8:	f7ff fb54 	bl	8007654 <process_restart>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d1f1      	bne.n	8007f94 <decode_mcu+0x14>
	return FALSE;
 8007fb0:	2000      	movs	r0, #0
}
 8007fb2:	b011      	add	sp, #68	; 0x44
 8007fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007fb8:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 8007fba:	f105 0810 	add.w	r8, r5, #16
 8007fbe:	ac0b      	add	r4, sp, #44	; 0x2c
 8007fc0:	f105 0960 	add.w	r9, r5, #96	; 0x60
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	9206      	str	r2, [sp, #24]
 8007fca:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 8007fcc:	f8df a290 	ldr.w	sl, [pc, #656]	; 8008260 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007fd0:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 8007fd2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007fd6:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 8007fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8007fe0:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007fe2:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 8007fe6:	42bb      	cmp	r3, r7
 8007fe8:	dc0e      	bgt.n	8008008 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007fea:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 8007fec:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007fee:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 8007ff0:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	9a07      	ldr	r2, [sp, #28]
 8007ff8:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 8007ffa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007ffc:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 8008000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008002:	6833      	ldr	r3, [r6, #0]
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	e7c7      	b.n	8007f98 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 8008008:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800800a:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800800e:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 8008012:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 8008016:	dc0c      	bgt.n	8008032 <decode_mcu+0xb2>
 8008018:	2300      	movs	r3, #0
 800801a:	4662      	mov	r2, ip
 800801c:	4671      	mov	r1, lr
 800801e:	a806      	add	r0, sp, #24
 8008020:	f7ff fa70 	bl	8007504 <jpeg_fill_bit_buffer>
 8008024:	2800      	cmp	r0, #0
 8008026:	d0c3      	beq.n	8007fb0 <decode_mcu+0x30>
 8008028:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800802c:	f1bc 0f07 	cmp.w	ip, #7
 8008030:	dd49      	ble.n	80080c6 <decode_mcu+0x146>
 8008032:	f1ac 0308 	sub.w	r3, ip, #8
 8008036:	fa4e f303 	asr.w	r3, lr, r3
 800803a:	b2db      	uxtb	r3, r3
 800803c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8008040:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008044:	2a00      	cmp	r2, #0
 8008046:	d04c      	beq.n	80080e2 <decode_mcu+0x162>
 8008048:	4423      	add	r3, r4
 800804a:	ebac 0c02 	sub.w	ip, ip, r2
 800804e:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 8008052:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 8008056:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800805a:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 809f 	beq.w	80081a0 <decode_mcu+0x220>
	if (s) {
 8008062:	b1cc      	cbz	r4, 8008098 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8008064:	45a4      	cmp	ip, r4
 8008066:	da09      	bge.n	800807c <decode_mcu+0xfc>
 8008068:	4623      	mov	r3, r4
 800806a:	4662      	mov	r2, ip
 800806c:	4671      	mov	r1, lr
 800806e:	a806      	add	r0, sp, #24
 8008070:	f7ff fa48 	bl	8007504 <jpeg_fill_bit_buffer>
 8008074:	2800      	cmp	r0, #0
 8008076:	d09b      	beq.n	8007fb0 <decode_mcu+0x30>
 8008078:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800807c:	ebac 0c04 	sub.w	ip, ip, r4
 8008080:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 8008084:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 8008086:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800808a:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800808e:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 8008090:	4299      	cmp	r1, r3
 8008092:	bfac      	ite	ge
 8008094:	1a9c      	subge	r4, r3, r2
 8008096:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 8008098:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800809c:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 80080a0:	ab10      	add	r3, sp, #64	; 0x40
 80080a2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80080a6:	f852 3c10 	ldr.w	r3, [r2, #-16]
 80080aa:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 80080ac:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 80080b0:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 80080b4:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 80080b6:	9b03      	ldr	r3, [sp, #12]
 80080b8:	429c      	cmp	r4, r3
 80080ba:	db14      	blt.n	80080e6 <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 80080bc:	2c3f      	cmp	r4, #63	; 0x3f
 80080be:	f340 8081 	ble.w	80081c4 <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80080c2:	3701      	adds	r7, #1
 80080c4:	e78d      	b.n	8007fe2 <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 80080c6:	2301      	movs	r3, #1
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	4662      	mov	r2, ip
 80080cc:	4623      	mov	r3, r4
 80080ce:	4671      	mov	r1, lr
 80080d0:	a806      	add	r0, sp, #24
 80080d2:	f7ff fa75 	bl	80075c0 <jpeg_huff_decode>
 80080d6:	1e04      	subs	r4, r0, #0
 80080d8:	f6ff af6a 	blt.w	8007fb0 <decode_mcu+0x30>
 80080dc:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 80080e0:	e7b7      	b.n	8008052 <decode_mcu+0xd2>
 80080e2:	2309      	movs	r3, #9
 80080e4:	e7f0      	b.n	80080c8 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 80080e6:	f1bc 0f07 	cmp.w	ip, #7
 80080ea:	dc0d      	bgt.n	8008108 <decode_mcu+0x188>
 80080ec:	2300      	movs	r3, #0
 80080ee:	4662      	mov	r2, ip
 80080f0:	4671      	mov	r1, lr
 80080f2:	a806      	add	r0, sp, #24
 80080f4:	f7ff fa06 	bl	8007504 <jpeg_fill_bit_buffer>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	f43f af59 	beq.w	8007fb0 <decode_mcu+0x30>
 80080fe:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 8008102:	f1bc 0f07 	cmp.w	ip, #7
 8008106:	dd37      	ble.n	8008178 <decode_mcu+0x1f8>
 8008108:	f1ac 0308 	sub.w	r3, ip, #8
 800810c:	fa4e f303 	asr.w	r3, lr, r3
 8008110:	b2db      	uxtb	r3, r3
 8008112:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8008116:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800811a:	2a00      	cmp	r2, #0
 800811c:	d03a      	beq.n	8008194 <decode_mcu+0x214>
 800811e:	4443      	add	r3, r8
 8008120:	ebac 0c02 	sub.w	ip, ip, r2
 8008124:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 8008128:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800812c:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 8008130:	d032      	beq.n	8008198 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8008132:	459c      	cmp	ip, r3
	    k += r;
 8008134:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8008136:	da0b      	bge.n	8008150 <decode_mcu+0x1d0>
 8008138:	4662      	mov	r2, ip
 800813a:	4671      	mov	r1, lr
 800813c:	a806      	add	r0, sp, #24
 800813e:	9305      	str	r3, [sp, #20]
 8008140:	f7ff f9e0 	bl	8007504 <jpeg_fill_bit_buffer>
 8008144:	2800      	cmp	r0, #0
 8008146:	f43f af33 	beq.w	8007fb0 <decode_mcu+0x30>
 800814a:	9b05      	ldr	r3, [sp, #20]
 800814c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 8008150:	ebac 0c03 	sub.w	ip, ip, r3
 8008154:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 8008158:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800815a:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800815e:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 8008162:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 8008164:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 8008166:	4b3d      	ldr	r3, [pc, #244]	; (800825c <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 8008168:	bfa8      	it	ge
 800816a:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800816c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008170:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 8008174:	3401      	adds	r4, #1
 8008176:	e79e      	b.n	80080b6 <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 8008178:	2301      	movs	r3, #1
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	4662      	mov	r2, ip
 800817e:	4643      	mov	r3, r8
 8008180:	4671      	mov	r1, lr
 8008182:	a806      	add	r0, sp, #24
 8008184:	f7ff fa1c 	bl	80075c0 <jpeg_huff_decode>
 8008188:	2800      	cmp	r0, #0
 800818a:	f6ff af11 	blt.w	8007fb0 <decode_mcu+0x30>
 800818e:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 8008192:	e7c9      	b.n	8008128 <decode_mcu+0x1a8>
 8008194:	2309      	movs	r3, #9
 8008196:	e7f0      	b.n	800817a <decode_mcu+0x1fa>
	    if (r != 15)
 8008198:	2a0f      	cmp	r2, #15
 800819a:	d192      	bne.n	80080c2 <decode_mcu+0x142>
	    k += 15;
 800819c:	340f      	adds	r4, #15
 800819e:	e7e9      	b.n	8008174 <decode_mcu+0x1f4>
	if (s) {
 80081a0:	b174      	cbz	r4, 80081c0 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 80081a2:	45a4      	cmp	ip, r4
 80081a4:	da0a      	bge.n	80081bc <decode_mcu+0x23c>
 80081a6:	4623      	mov	r3, r4
 80081a8:	4662      	mov	r2, ip
 80081aa:	4671      	mov	r1, lr
 80081ac:	a806      	add	r0, sp, #24
 80081ae:	f7ff f9a9 	bl	8007504 <jpeg_fill_bit_buffer>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	f43f aefc 	beq.w	8007fb0 <decode_mcu+0x30>
 80081b8:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 80081bc:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 80081c0:	2401      	movs	r4, #1
 80081c2:	e77b      	b.n	80080bc <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 80081c4:	f1bc 0f07 	cmp.w	ip, #7
 80081c8:	dc0d      	bgt.n	80081e6 <decode_mcu+0x266>
 80081ca:	2300      	movs	r3, #0
 80081cc:	4662      	mov	r2, ip
 80081ce:	4671      	mov	r1, lr
 80081d0:	a806      	add	r0, sp, #24
 80081d2:	f7ff f997 	bl	8007504 <jpeg_fill_bit_buffer>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	f43f aeea 	beq.w	8007fb0 <decode_mcu+0x30>
 80081dc:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 80081e0:	f1bc 0f07 	cmp.w	ip, #7
 80081e4:	dd25      	ble.n	8008232 <decode_mcu+0x2b2>
 80081e6:	f1ac 0308 	sub.w	r3, ip, #8
 80081ea:	fa4e f303 	asr.w	r3, lr, r3
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80081f4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80081f8:	b34a      	cbz	r2, 800824e <decode_mcu+0x2ce>
 80081fa:	4443      	add	r3, r8
 80081fc:	ebac 0c02 	sub.w	ip, ip, r2
 8008200:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 8008204:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 8008208:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800820c:	d021      	beq.n	8008252 <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800820e:	45dc      	cmp	ip, fp
	  k += r;
 8008210:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8008212:	da0a      	bge.n	800822a <decode_mcu+0x2aa>
 8008214:	465b      	mov	r3, fp
 8008216:	4662      	mov	r2, ip
 8008218:	4671      	mov	r1, lr
 800821a:	a806      	add	r0, sp, #24
 800821c:	f7ff f972 	bl	8007504 <jpeg_fill_bit_buffer>
 8008220:	2800      	cmp	r0, #0
 8008222:	f43f aec5 	beq.w	8007fb0 <decode_mcu+0x30>
 8008226:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800822a:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800822e:	3401      	adds	r4, #1
 8008230:	e744      	b.n	80080bc <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 8008232:	2301      	movs	r3, #1
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	4662      	mov	r2, ip
 8008238:	4643      	mov	r3, r8
 800823a:	4671      	mov	r1, lr
 800823c:	a806      	add	r0, sp, #24
 800823e:	f7ff f9bf 	bl	80075c0 <jpeg_huff_decode>
 8008242:	2800      	cmp	r0, #0
 8008244:	f6ff aeb4 	blt.w	8007fb0 <decode_mcu+0x30>
 8008248:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800824c:	e7da      	b.n	8008204 <decode_mcu+0x284>
 800824e:	2309      	movs	r3, #9
 8008250:	e7f0      	b.n	8008234 <decode_mcu+0x2b4>
	  if (r != 15)
 8008252:	2b0f      	cmp	r3, #15
 8008254:	f47f af35 	bne.w	80080c2 <decode_mcu+0x142>
	  k += 15;
 8008258:	340f      	adds	r4, #15
 800825a:	e7e8      	b.n	800822e <decode_mcu+0x2ae>
 800825c:	08012f8c 	.word	0x08012f8c
 8008260:	08012558 	.word	0x08012558

08008264 <jpeg_make_d_derived_tbl>:
{
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 8008268:	2a03      	cmp	r2, #3
{
 800826a:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800826e:	4604      	mov	r4, r0
 8008270:	4616      	mov	r6, r2
 8008272:	461f      	mov	r7, r3
 8008274:	9103      	str	r1, [sp, #12]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 8008276:	d905      	bls.n	8008284 <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 8008278:	6803      	ldr	r3, [r0, #0]
 800827a:	2234      	movs	r2, #52	; 0x34
 800827c:	e9c3 2605 	strd	r2, r6, [r3, #20]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 8008284:	9b03      	ldr	r3, [sp, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d044      	beq.n	8008314 <jpeg_make_d_derived_tbl+0xb0>
 800828a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800828e:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 8008292:	b935      	cbnz	r5, 80082a2 <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	2234      	movs	r2, #52	; 0x34
 8008298:	4620      	mov	r0, r4
 800829a:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4798      	blx	r3
  if (*pdtbl == NULL)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	b93b      	cbnz	r3, 80082b6 <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80082a6:	6863      	ldr	r3, [r4, #4]
 80082a8:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 80082ac:	2101      	movs	r1, #1
 80082ae:	4620      	mov	r0, r4
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 80082b4:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 80082b6:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 80082ba:	2601      	movs	r6, #1
  p = 0;
 80082bc:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 80082be:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 80082c2:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 80082c6:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 80082ca:	46ba      	mov	sl, r7
 80082cc:	444f      	add	r7, r9
 80082ce:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80082d2:	dd05      	ble.n	80082e0 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	4620      	mov	r0, r4
 80082d8:	f8c3 b014 	str.w	fp, [r3, #20]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4798      	blx	r3
 80082e0:	f10a 0318 	add.w	r3, sl, #24
 80082e4:	446b      	add	r3, sp
    while (i--)
 80082e6:	f1b9 0901 	subs.w	r9, r9, #1
 80082ea:	d218      	bcs.n	800831e <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 80082ec:	3601      	adds	r6, #1
 80082ee:	2e11      	cmp	r6, #17
 80082f0:	d1e9      	bne.n	80082c6 <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 80082f2:	2200      	movs	r2, #0
 80082f4:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 80082f6:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 80082fa:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 80082fe:	55da      	strb	r2, [r3, r7]
  p = 0;
 8008300:	4691      	mov	r9, r2
  si = huffsize[0];
 8008302:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 8008306:	ab06      	add	r3, sp, #24
 8008308:	f813 3009 	ldrb.w	r3, [r3, r9]
 800830c:	b313      	cbz	r3, 8008354 <jpeg_make_d_derived_tbl+0xf0>
 800830e:	4649      	mov	r1, r9
 8008310:	1a52      	subs	r2, r2, r1
 8008312:	e00a      	b.n	800832a <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 8008314:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008318:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800831c:	e7b9      	b.n	8008292 <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800831e:	f803 6b01 	strb.w	r6, [r3], #1
 8008322:	e7e0      	b.n	80082e6 <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 8008324:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 8008328:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800832a:	a806      	add	r0, sp, #24
 800832c:	1853      	adds	r3, r2, r1
 800832e:	4689      	mov	r9, r1
 8008330:	5c40      	ldrb	r0, [r0, r1]
 8008332:	42b0      	cmp	r0, r6
 8008334:	d0f6      	beq.n	8008324 <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 8008336:	fa0b f206 	lsl.w	r2, fp, r6
 800833a:	429a      	cmp	r2, r3
 800833c:	dc07      	bgt.n	800834e <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800833e:	6822      	ldr	r2, [r4, #0]
 8008340:	2109      	movs	r1, #9
 8008342:	4620      	mov	r0, r4
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	6151      	str	r1, [r2, #20]
 8008348:	6812      	ldr	r2, [r2, #0]
 800834a:	4790      	blx	r2
 800834c:	9b01      	ldr	r3, [sp, #4]
    code <<= 1;
 800834e:	005a      	lsls	r2, r3, #1
    si++;
 8008350:	3601      	adds	r6, #1
 8008352:	e7d8      	b.n	8008306 <jpeg_make_d_derived_tbl+0xa2>
 8008354:	1c68      	adds	r0, r5, #1
 8008356:	f108 0204 	add.w	r2, r8, #4
 800835a:	f108 0c44 	add.w	ip, r8, #68	; 0x44
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800835e:	f04f 3eff 	mov.w	lr, #4294967295
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 8008362:	ae47      	add	r6, sp, #284	; 0x11c
    if (htbl->bits[l]) {
 8008364:	f810 9b01 	ldrb.w	r9, [r0], #1
 8008368:	f1b9 0f00 	cmp.w	r9, #0
 800836c:	d029      	beq.n	80083c2 <jpeg_make_d_derived_tbl+0x15e>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800836e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8008372:	1a59      	subs	r1, r3, r1
      p += htbl->bits[l];
 8008374:	444b      	add	r3, r9
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 8008376:	6491      	str	r1, [r2, #72]	; 0x48
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 8008378:	1e59      	subs	r1, r3, #1
 800837a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800837e:	6011      	str	r1, [r2, #0]
  for (l = 1; l <= 16; l++) {
 8008380:	3204      	adds	r2, #4
 8008382:	4594      	cmp	ip, r2
 8008384:	d1ee      	bne.n	8008364 <jpeg_make_d_derived_tbl+0x100>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 8008386:	4b2d      	ldr	r3, [pc, #180]	; (800843c <jpeg_make_d_derived_tbl+0x1d8>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 8008388:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800838c:	2100      	movs	r1, #0
 800838e:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 8008392:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 8008396:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 8008398:	f005 fa58 	bl	800d84c <memset>
  p = 0;
 800839c:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 80083a0:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 80083a2:	5daa      	ldrb	r2, [r5, r6]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 80083a4:	2101      	movs	r1, #1
 80083a6:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 80083a8:	9201      	str	r2, [sp, #4]
 80083aa:	f1c6 0208 	rsb	r2, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 80083ae:	fa01 fb02 	lsl.w	fp, r1, r2
 80083b2:	9202      	str	r2, [sp, #8]
 80083b4:	9a01      	ldr	r2, [sp, #4]
 80083b6:	4452      	add	r2, sl
 80083b8:	9204      	str	r2, [sp, #16]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 80083ba:	f105 0211 	add.w	r2, r5, #17
 80083be:	9205      	str	r2, [sp, #20]
 80083c0:	e020      	b.n	8008404 <jpeg_make_d_derived_tbl+0x1a0>
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 80083c2:	f8c2 e000 	str.w	lr, [r2]
 80083c6:	e7db      	b.n	8008380 <jpeg_make_d_derived_tbl+0x11c>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 80083c8:	9a02      	ldr	r2, [sp, #8]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 80083ca:	46dc      	mov	ip, fp
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 80083cc:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80083d0:	4090      	lsls	r0, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 80083d2:	9a05      	ldr	r2, [sp, #20]
 80083d4:	f812 1009 	ldrb.w	r1, [r2, r9]
 80083d8:	f100 0224 	add.w	r2, r0, #36	; 0x24
 80083dc:	eb08 0282 	add.w	r2, r8, r2, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 80083e0:	f1bc 0c01 	subs.w	ip, ip, #1
	dtbl->look_nbits[lookbits] = l;
 80083e4:	f842 6b04 	str.w	r6, [r2], #4
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 80083e8:	d1fa      	bne.n	80083e0 <jpeg_make_d_derived_tbl+0x17c>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 80083ea:	f1bb 0f00 	cmp.w	fp, #0
 80083ee:	f500 6092 	add.w	r0, r0, #1168	; 0x490
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 80083f2:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 80083f6:	bfcc      	ite	gt
 80083f8:	465a      	movgt	r2, fp
 80083fa:	2201      	movle	r2, #1
 80083fc:	4440      	add	r0, r8
 80083fe:	f005 fa25 	bl	800d84c <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 8008402:	ab47      	add	r3, sp, #284	; 0x11c
 8008404:	9a04      	ldr	r2, [sp, #16]
 8008406:	4591      	cmp	r9, r2
 8008408:	d1de      	bne.n	80083c8 <jpeg_make_d_derived_tbl+0x164>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800840a:	3601      	adds	r6, #1
 800840c:	9a01      	ldr	r2, [sp, #4]
 800840e:	2e09      	cmp	r6, #9
 8008410:	4492      	add	sl, r2
 8008412:	d1c6      	bne.n	80083a2 <jpeg_make_d_derived_tbl+0x13e>
  if (isDC) {
 8008414:	9b03      	ldr	r3, [sp, #12]
 8008416:	b11b      	cbz	r3, 8008420 <jpeg_make_d_derived_tbl+0x1bc>
 8008418:	3511      	adds	r5, #17
 800841a:	442f      	add	r7, r5
    for (i = 0; i < numsymbols; i++) {
 800841c:	42af      	cmp	r7, r5
 800841e:	d103      	bne.n	8008428 <jpeg_make_d_derived_tbl+0x1c4>
}
 8008420:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 8008424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int sym = htbl->huffval[i];
 8008428:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (sym < 0 || sym > 15)
 800842c:	2b0f      	cmp	r3, #15
 800842e:	d9f5      	bls.n	800841c <jpeg_make_d_derived_tbl+0x1b8>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	4620      	mov	r0, r4
 8008434:	615e      	str	r6, [r3, #20]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800843a:	e7ef      	b.n	800841c <jpeg_make_d_derived_tbl+0x1b8>
 800843c:	000fffff 	.word	0x000fffff

08008440 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 8008440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 8008444:	f8d0 70e0 	ldr.w	r7, [r0, #224]	; 0xe0
{
 8008448:	4604      	mov	r4, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800844a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800844e:	f500 76aa 	add.w	r6, r0, #340	; 0x154
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 8008452:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 8008456:	2f00      	cmp	r7, #0
 8008458:	f000 80af 	beq.w	80085ba <start_pass_huff_decoder+0x17a>
    if (cinfo->Ss == 0) {
 800845c:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 8008460:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 8008464:	b962      	cbnz	r2, 8008480 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 8008466:	b1a9      	cbz	r1, 8008494 <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	f04f 0c11 	mov.w	ip, #17
 800846e:	e9c3 1707 	strd	r1, r7, [r3, #28]
 8008472:	e9c3 c205 	strd	ip, r2, [r3, #20]
 8008476:	6258      	str	r0, [r3, #36]	; 0x24
 8008478:	4620      	mov	r0, r4
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4798      	blx	r3
 800847e:	e00f      	b.n	80084a0 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 8008480:	428a      	cmp	r2, r1
 8008482:	dcf1      	bgt.n	8008468 <start_pass_huff_decoder+0x28>
 8008484:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8008488:	428b      	cmp	r3, r1
 800848a:	dbed      	blt.n	8008468 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800848c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8008490:	2b01      	cmp	r3, #1
 8008492:	d1e9      	bne.n	8008468 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 8008494:	b117      	cbz	r7, 800849c <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 8008496:	1e7b      	subs	r3, r7, #1
 8008498:	4283      	cmp	r3, r0
 800849a:	d1e5      	bne.n	8008468 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800849c:	280d      	cmp	r0, #13
 800849e:	dce3      	bgt.n	8008468 <start_pass_huff_decoder+0x28>
{
 80084a0:	46b3      	mov	fp, r6
 80084a2:	f04f 0900 	mov.w	r9, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80084a6:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 80084aa:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80084ae:	454a      	cmp	r2, r9
 80084b0:	dc1b      	bgt.n	80084ea <start_pass_huff_decoder+0xaa>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 80084b2:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 80084b6:	2a00      	cmp	r2, #0
 80084b8:	d155      	bne.n	8008566 <start_pass_huff_decoder+0x126>
      if (cinfo->Ss == 0)
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d151      	bne.n	8008562 <start_pass_huff_decoder+0x122>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 80084be:	4bbc      	ldr	r3, [pc, #752]	; (80087b0 <start_pass_huff_decoder+0x370>)
{
 80084c0:	f04f 0800 	mov.w	r8, #0
 80084c4:	f105 0914 	add.w	r9, r5, #20
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 80084c8:	606b      	str	r3, [r5, #4]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 80084ca:	46c2      	mov	sl, r8
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80084cc:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80084d0:	4543      	cmp	r3, r8
 80084d2:	dc4d      	bgt.n	8008570 <start_pass_huff_decoder+0x130>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	612b      	str	r3, [r5, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 80084d8:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 80084da:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->insufficient_data = FALSE;
 80084de:	626b      	str	r3, [r5, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 80084e0:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80084e4:	62ab      	str	r3, [r5, #40]	; 0x28
}
 80084e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 80084ea:	f85b 2b04 	ldr.w	r2, [fp], #4
 80084ee:	f8d2 a004 	ldr.w	sl, [r2, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 80084f2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80084f6:	ea4f 210a 	mov.w	r1, sl, lsl #8
 80084fa:	eb02 280a 	add.w	r8, r2, sl, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 80084fe:	b16b      	cbz	r3, 800851c <start_pass_huff_decoder+0xdc>
 8008500:	5853      	ldr	r3, [r2, r1]
 8008502:	2b00      	cmp	r3, #0
 8008504:	da0a      	bge.n	800851c <start_pass_huff_decoder+0xdc>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	2276      	movs	r2, #118	; 0x76
 800850a:	f04f 31ff 	mov.w	r1, #4294967295
 800850e:	4620      	mov	r0, r4
 8008510:	e9c3 2a05 	strd	r2, sl, [r3, #20]
 8008514:	2200      	movs	r2, #0
 8008516:	61da      	str	r2, [r3, #28]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800851c:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 8008520:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 8008524:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 8008528:	42bb      	cmp	r3, r7
 800852a:	da02      	bge.n	8008532 <start_pass_huff_decoder+0xf2>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800852c:	f109 0901 	add.w	r9, r9, #1
 8008530:	e7b9      	b.n	80084a6 <start_pass_huff_decoder+0x66>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8008532:	f8d8 3000 	ldr.w	r3, [r8]
	if (cinfo->Ah != expected)
 8008536:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800853a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800853e:	429a      	cmp	r2, r3
 8008540:	d009      	beq.n	8008556 <start_pass_huff_decoder+0x116>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	2276      	movs	r2, #118	; 0x76
 8008546:	f04f 31ff 	mov.w	r1, #4294967295
 800854a:	4620      	mov	r0, r4
 800854c:	61df      	str	r7, [r3, #28]
 800854e:	e9c3 2a05 	strd	r2, sl, [r3, #20]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 8008556:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800855a:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800855c:	f848 3b04 	str.w	r3, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8008560:	e7e0      	b.n	8008524 <start_pass_huff_decoder+0xe4>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 8008562:	4b94      	ldr	r3, [pc, #592]	; (80087b4 <start_pass_huff_decoder+0x374>)
 8008564:	e7ac      	b.n	80084c0 <start_pass_huff_decoder+0x80>
      if (cinfo->Ss == 0)
 8008566:	b90b      	cbnz	r3, 800856c <start_pass_huff_decoder+0x12c>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 8008568:	4b93      	ldr	r3, [pc, #588]	; (80087b8 <start_pass_huff_decoder+0x378>)
 800856a:	e7a9      	b.n	80084c0 <start_pass_huff_decoder+0x80>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800856c:	4b93      	ldr	r3, [pc, #588]	; (80087bc <start_pass_huff_decoder+0x37c>)
 800856e:	e7a7      	b.n	80084c0 <start_pass_huff_decoder+0x80>
      if (cinfo->Ss == 0) {
 8008570:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 8008574:	f856 3b04 	ldr.w	r3, [r6], #4
      if (cinfo->Ss == 0) {
 8008578:	b982      	cbnz	r2, 800859c <start_pass_huff_decoder+0x15c>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800857a:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800857e:	b942      	cbnz	r2, 8008592 <start_pass_huff_decoder+0x152>
	  tbl = compptr->dc_tbl_no;
 8008580:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 8008582:	2101      	movs	r1, #1
 8008584:	4620      	mov	r0, r4
 8008586:	f102 030b 	add.w	r3, r2, #11
 800858a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800858e:	f7ff fe69 	bl	8008264 <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008592:	f108 0801 	add.w	r8, r8, #1
      entropy->saved.last_dc_val[ci] = 0;
 8008596:	f849 ab04 	str.w	sl, [r9], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800859a:	e797      	b.n	80084cc <start_pass_huff_decoder+0x8c>
	tbl = compptr->ac_tbl_no;
 800859c:	699f      	ldr	r7, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800859e:	2100      	movs	r1, #0
 80085a0:	4620      	mov	r0, r4
 80085a2:	f107 030b 	add.w	r3, r7, #11
 80085a6:	463a      	mov	r2, r7
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 80085a8:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 80085ac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80085b0:	f7ff fe58 	bl	8008264 <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80085b8:	e7eb      	b.n	8008592 <start_pass_huff_decoder+0x152>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 80085ba:	b982      	cbnz	r2, 80085de <start_pass_huff_decoder+0x19e>
 80085bc:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 80085c0:	b96b      	cbnz	r3, 80085de <start_pass_huff_decoder+0x19e>
 80085c2:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 80085c6:	b953      	cbnz	r3, 80085de <start_pass_huff_decoder+0x19e>
 80085c8:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 80085cc:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 80085d0:	b90a      	cbnz	r2, 80085d6 <start_pass_huff_decoder+0x196>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 80085d2:	2b3f      	cmp	r3, #63	; 0x3f
 80085d4:	dc0b      	bgt.n	80085ee <start_pass_huff_decoder+0x1ae>
 80085d6:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 80085da:	429a      	cmp	r2, r3
 80085dc:	d007      	beq.n	80085ee <start_pass_huff_decoder+0x1ae>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	227d      	movs	r2, #125	; 0x7d
 80085e2:	f04f 31ff 	mov.w	r1, #4294967295
 80085e6:	4620      	mov	r0, r4
 80085e8:	615a      	str	r2, [r3, #20]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 80085ee:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 80085f2:	f04f 0800 	mov.w	r8, #0
 80085f6:	4b72      	ldr	r3, [pc, #456]	; (80087c0 <start_pass_huff_decoder+0x380>)
 80085f8:	f105 0914 	add.w	r9, r5, #20
 80085fc:	4a71      	ldr	r2, [pc, #452]	; (80087c4 <start_pass_huff_decoder+0x384>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 80085fe:	46c2      	mov	sl, r8
      entropy->pub.decode_mcu = decode_mcu;
 8008600:	293f      	cmp	r1, #63	; 0x3f
 8008602:	bf08      	it	eq
 8008604:	4613      	moveq	r3, r2
 8008606:	606b      	str	r3, [r5, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008608:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800860c:	4543      	cmp	r3, r8
 800860e:	dc4a      	bgt.n	80086a6 <start_pass_huff_decoder+0x266>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008610:	f8d4 616c 	ldr.w	r6, [r4, #364]	; 0x16c
 8008614:	f105 0260 	add.w	r2, r5, #96	; 0x60
 8008618:	f504 70b8 	add.w	r0, r4, #368	; 0x170
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800861c:	496a      	ldr	r1, [pc, #424]	; (80087c8 <start_pass_huff_decoder+0x388>)
 800861e:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1;
 8008622:	f04f 0e01 	mov.w	lr, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008626:	42be      	cmp	r6, r7
 8008628:	f77f af56 	ble.w	80084d8 <start_pass_huff_decoder+0x98>
      ci = cinfo->MCU_membership[blkn];
 800862c:	f850 3b04 	ldr.w	r3, [r0], #4
      compptr = cinfo->cur_comp_info[ci];
 8008630:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008634:	f8d3 8154 	ldr.w	r8, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 8008638:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800863c:	3310      	adds	r3, #16
 800863e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008642:	f842 3b04 	str.w	r3, [r2], #4
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 8008646:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800864a:	3314      	adds	r3, #20
 800864c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008650:	6253      	str	r3, [r2, #36]	; 0x24
      if (compptr->component_needed) {
 8008652:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8008656:	2b00      	cmp	r3, #0
 8008658:	d07c      	beq.n	8008754 <start_pass_huff_decoder+0x314>
	i = compptr->DCT_h_scaled_size;
 800865a:	e9d8 a309 	ldrd	sl, r3, [r8, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800865e:	f8d4 81b0 	ldr.w	r8, [r4, #432]	; 0x1b0
 8008662:	f1b8 0f0f 	cmp.w	r8, #15
 8008666:	f000 808f 	beq.w	8008788 <start_pass_huff_decoder+0x348>
 800866a:	dc3a      	bgt.n	80086e2 <start_pass_huff_decoder+0x2a2>
 800866c:	f1b8 0f03 	cmp.w	r8, #3
 8008670:	d05d      	beq.n	800872e <start_pass_huff_decoder+0x2ee>
 8008672:	f1b8 0f08 	cmp.w	r8, #8
 8008676:	d06f      	beq.n	8008758 <start_pass_huff_decoder+0x318>
 8008678:	f1b8 0f00 	cmp.w	r8, #0
 800867c:	d053      	beq.n	8008726 <start_pass_huff_decoder+0x2e6>
	  if (ci <= 0 || ci > 8) ci = 8;
 800867e:	f103 38ff 	add.w	r8, r3, #4294967295
 8008682:	f1b8 0f08 	cmp.w	r8, #8
	  if (i <= 0 || i > 8) i = 8;
 8008686:	f10a 38ff 	add.w	r8, sl, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800868a:	bf28      	it	cs
 800868c:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800868e:	f1b8 0f08 	cmp.w	r8, #8
 8008692:	bf28      	it	cs
 8008694:	f04f 0a08 	movcs.w	sl, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 8008698:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 800869c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80086a0:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 80086a4:	e055      	b.n	8008752 <start_pass_huff_decoder+0x312>
      compptr = cinfo->cur_comp_info[ci];
 80086a6:	f856 bb04 	ldr.w	fp, [r6], #4
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 80086aa:	2101      	movs	r1, #1
 80086ac:	4620      	mov	r0, r4
      tbl = compptr->dc_tbl_no;
 80086ae:	f8db 2014 	ldr.w	r2, [fp, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 80086b2:	f102 0310 	add.w	r3, r2, #16
 80086b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80086ba:	f7ff fdd3 	bl	8008264 <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 80086be:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80086c2:	b14b      	cbz	r3, 80086d8 <start_pass_huff_decoder+0x298>
	tbl = compptr->ac_tbl_no;
 80086c4:	f8db 2018 	ldr.w	r2, [fp, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 80086c8:	2100      	movs	r1, #0
 80086ca:	4620      	mov	r0, r4
 80086cc:	f102 0314 	add.w	r3, r2, #20
 80086d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80086d4:	f7ff fdc6 	bl	8008264 <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80086d8:	f108 0801 	add.w	r8, r8, #1
      entropy->saved.last_dc_val[ci] = 0;
 80086dc:	f849 ab04 	str.w	sl, [r9], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80086e0:	e792      	b.n	8008608 <start_pass_huff_decoder+0x1c8>
	switch (cinfo->lim_Se) {
 80086e2:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
 80086e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80086ea:	f10a 39ff 	add.w	r9, sl, #4294967295
 80086ee:	d06d      	beq.n	80087cc <start_pass_huff_decoder+0x38c>
 80086f0:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 80086f4:	d07e      	beq.n	80087f4 <start_pass_huff_decoder+0x3b4>
 80086f6:	f1b8 0f18 	cmp.w	r8, #24
 80086fa:	d1c0      	bne.n	800867e <start_pass_huff_decoder+0x23e>
	  if (ci <= 0 || ci > 5) ci = 5;
 80086fc:	f1bb 0f05 	cmp.w	fp, #5
 8008700:	bf28      	it	cs
 8008702:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 8008704:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 8008708:	f103 39ff 	add.w	r9, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800870c:	bf28      	it	cs
 800870e:	f04f 0a05 	movcs.w	sl, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 8008712:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8008716:	f10a 33ff 	add.w	r3, sl, #4294967295
 800871a:	4499      	add	r9, r3
 800871c:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 8008720:	f8d9 30b4 	ldr.w	r3, [r9, #180]	; 0xb4
 8008724:	e015      	b.n	8008752 <start_pass_huff_decoder+0x312>
	  entropy->coef_limit[blkn] = 1;
 8008726:	f8c2 e04c 	str.w	lr, [r2, #76]	; 0x4c
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800872a:	3701      	adds	r7, #1
 800872c:	e77b      	b.n	8008626 <start_pass_huff_decoder+0x1e6>
	  if (ci <= 0 || ci > 2) ci = 2;
 800872e:	f103 38ff 	add.w	r8, r3, #4294967295
 8008732:	f1b8 0f02 	cmp.w	r8, #2
	  if (i <= 0 || i > 2) i = 2;
 8008736:	f10a 38ff 	add.w	r8, sl, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800873a:	bf28      	it	cs
 800873c:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800873e:	f1b8 0f02 	cmp.w	r8, #2
 8008742:	bf28      	it	cs
 8008744:	f04f 0a02 	movcs.w	sl, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 8008748:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 800874c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 8008752:	3301      	adds	r3, #1
	entropy->coef_limit[blkn] = 0;
 8008754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008756:	e7e8      	b.n	800872a <start_pass_huff_decoder+0x2ea>
	  if (ci <= 0 || ci > 3) ci = 3;
 8008758:	f103 38ff 	add.w	r8, r3, #4294967295
 800875c:	f1b8 0f03 	cmp.w	r8, #3
	  if (i <= 0 || i > 3) i = 3;
 8008760:	f10a 38ff 	add.w	r8, sl, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 8008764:	bf28      	it	cs
 8008766:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 8008768:	f1b8 0f03 	cmp.w	r8, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800876c:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 8008770:	bf28      	it	cs
 8008772:	f04f 0a03 	movcs.w	sl, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 8008776:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800877a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800877e:	4453      	add	r3, sl
 8008780:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008786:	e7e4      	b.n	8008752 <start_pass_huff_decoder+0x312>
	  if (ci <= 0 || ci > 4) ci = 4;
 8008788:	f103 38ff 	add.w	r8, r3, #4294967295
 800878c:	f1b8 0f04 	cmp.w	r8, #4
	  if (i <= 0 || i > 4) i = 4;
 8008790:	f10a 38ff 	add.w	r8, sl, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 8008794:	bf28      	it	cs
 8008796:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 8008798:	f1b8 0f04 	cmp.w	r8, #4
 800879c:	bf28      	it	cs
 800879e:	f04f 0a04 	movcs.w	sl, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 80087a2:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80087a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80087aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ac:	e7d1      	b.n	8008752 <start_pass_huff_decoder+0x312>
 80087ae:	bf00      	nop
 80087b0:	080076a1 	.word	0x080076a1
 80087b4:	08007815 	.word	0x08007815
 80087b8:	08007975 	.word	0x08007975
 80087bc:	08007a09 	.word	0x08007a09
 80087c0:	08007c91 	.word	0x08007c91
 80087c4:	08007f81 	.word	0x08007f81
 80087c8:	08012558 	.word	0x08012558
	  if (ci <= 0 || ci > 6) ci = 6;
 80087cc:	f1bb 0f06 	cmp.w	fp, #6
 80087d0:	bf28      	it	cs
 80087d2:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 80087d4:	f1b9 0f06 	cmp.w	r9, #6
 80087d8:	bf28      	it	cs
 80087da:	f04f 0a06 	movcs.w	sl, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 80087de:	f103 38ff 	add.w	r8, r3, #4294967295
 80087e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80087e6:	fb0c 3308 	mla	r3, ip, r8, r3
 80087ea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80087ee:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80087f2:	e7ae      	b.n	8008752 <start_pass_huff_decoder+0x312>
	  if (ci <= 0 || ci > 7) ci = 7;
 80087f4:	f1bb 0f07 	cmp.w	fp, #7
 80087f8:	bf28      	it	cs
 80087fa:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 80087fc:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 8008800:	f103 38ff 	add.w	r8, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 8008804:	bf28      	it	cs
 8008806:	f04f 0a07 	movcs.w	sl, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800880a:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800880e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008812:	4498      	add	r8, r3
 8008814:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 8008818:	f8d8 31a8 	ldr.w	r3, [r8, #424]	; 0x1a8
 800881c:	e799      	b.n	8008752 <start_pass_huff_decoder+0x312>
 800881e:	bf00      	nop

08008820 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 8008820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008822:	6843      	ldr	r3, [r0, #4]
 8008824:	22d8      	movs	r2, #216	; 0xd8
 8008826:	2101      	movs	r1, #1
{
 8008828:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800882e:	4b17      	ldr	r3, [pc, #92]	; (800888c <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 8008830:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008834:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 8008836:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 8008838:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800883c:	b943      	cbnz	r3, 8008850 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800883e:	6503      	str	r3, [r0, #80]	; 0x50
 8008840:	6403      	str	r3, [r0, #64]	; 0x40
 8008842:	6543      	str	r3, [r0, #84]	; 0x54
 8008844:	6443      	str	r3, [r0, #68]	; 0x44
 8008846:	6583      	str	r3, [r0, #88]	; 0x58
 8008848:	6483      	str	r3, [r0, #72]	; 0x48
 800884a:	65c3      	str	r3, [r0, #92]	; 0x5c
 800884c:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800884e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008850:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008852:	2101      	movs	r1, #1
 8008854:	686b      	ldr	r3, [r5, #4]
 8008856:	4628      	mov	r0, r5
 8008858:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800885a:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4798      	blx	r3
 8008860:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 8008862:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 8008866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008868:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800886c:	42b3      	cmp	r3, r6
 800886e:	dc05      	bgt.n	800887c <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 8008870:	2300      	movs	r3, #0
 8008872:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8008876:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800887a:	e7e8      	b.n	800884e <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800887c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008880:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 8008882:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 8008884:	f004 ffe2 	bl	800d84c <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 8008888:	e7ed      	b.n	8008866 <jinit_huff_decoder+0x46>
 800888a:	bf00      	nop
 800888c:	08008441 	.word	0x08008441

08008890 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 8008890:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 8008894:	4a01      	ldr	r2, [pc, #4]	; (800889c <finish_input_pass+0xc>)
 8008896:	601a      	str	r2, [r3, #0]
}
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	08008a59 	.word	0x08008a59

080088a0 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 80088a0:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 80088a2:	4a0a      	ldr	r2, [pc, #40]	; (80088cc <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 80088a4:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 80088a6:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 80088aa:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 80088ac:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 80088ae:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 80088b0:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 80088b4:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 80088b6:	6803      	ldr	r3, [r0, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 80088bc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 80088c0:	4620      	mov	r0, r4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 80088c6:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	08008a59 	.word	0x08008a59

080088d0 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 80088d0:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80088d4:	2a01      	cmp	r2, #1
{
 80088d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088da:	4604      	mov	r4, r0
 80088dc:	f500 76aa 	add.w	r6, r0, #340	; 0x154
  if (cinfo->comps_in_scan == 1) {
 80088e0:	d135      	bne.n	800894e <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 80088e2:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 80088e6:	69d9      	ldr	r1, [r3, #28]
 80088e8:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 80088ec:	6a19      	ldr	r1, [r3, #32]
 80088ee:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 80088f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 80088f4:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 80088f6:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 80088fa:	68d8      	ldr	r0, [r3, #12]
 80088fc:	fbb1 f5f0 	udiv	r5, r1, r0
 8008900:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 8008904:	2900      	cmp	r1, #0
 8008906:	bf08      	it	eq
 8008908:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800890a:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800890e:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 8008910:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 8008912:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 8008916:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800891a:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800891c:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800891e:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008922:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8008926:	429f      	cmp	r7, r3
 8008928:	db71      	blt.n	8008a0e <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800892a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800892e:	4620      	mov	r0, r4
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 8008934:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 8008938:	4620      	mov	r0, r4
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800893e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 8008942:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8008946:	6852      	ldr	r2, [r2, #4]
 8008948:	601a      	str	r2, [r3, #0]
}
 800894a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800894e:	1e53      	subs	r3, r2, #1
 8008950:	2b03      	cmp	r3, #3
 8008952:	d907      	bls.n	8008964 <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 8008954:	6803      	ldr	r3, [r0, #0]
 8008956:	211b      	movs	r1, #27
 8008958:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800895c:	2204      	movs	r2, #4
 800895e:	61da      	str	r2, [r3, #28]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 8008964:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 8008968:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800896a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800896e:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 8008970:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 8008972:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 8008976:	4359      	muls	r1, r3
 8008978:	f004 ff06 	bl	800d788 <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800897c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8008980:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 8008984:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 8008988:	4359      	muls	r1, r3
 800898a:	6a20      	ldr	r0, [r4, #32]
 800898c:	f004 fefc 	bl	800d788 <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 8008990:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 8008994:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008998:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800899c:	429d      	cmp	r5, r3
 800899e:	dabc      	bge.n	800891a <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 80089a0:	f858 3b04 	ldr.w	r3, [r8], #4
      compptr->MCU_width = compptr->h_samp_factor;
 80089a4:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 80089a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 80089a8:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 80089aa:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 80089ac:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 80089b0:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 80089b2:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 80089b4:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 80089b6:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 80089b8:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 80089ba:	fbb2 fcf1 	udiv	ip, r2, r1
 80089be:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 80089c2:	2a00      	cmp	r2, #0
 80089c4:	bf08      	it	eq
 80089c6:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 80089c8:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 80089ca:	6a1a      	ldr	r2, [r3, #32]
 80089cc:	fbb2 f1f0 	udiv	r1, r2, r0
 80089d0:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 80089d4:	2a00      	cmp	r2, #0
 80089d6:	bf08      	it	eq
 80089d8:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 80089da:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 80089dc:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 80089e0:	443b      	add	r3, r7
 80089e2:	2b0a      	cmp	r3, #10
 80089e4:	dd05      	ble.n	80089f2 <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	4620      	mov	r0, r4
 80089ea:	f8c3 9014 	str.w	r9, [r3, #20]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4798      	blx	r3
      while (mcublks-- > 0) {
 80089f2:	2f00      	cmp	r7, #0
 80089f4:	dc01      	bgt.n	80089fa <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80089f6:	3501      	adds	r5, #1
 80089f8:	e7ce      	b.n	8008998 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 80089fa:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 80089fe:	3f01      	subs	r7, #1
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	335c      	adds	r3, #92	; 0x5c
 8008a04:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 8008a08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8008a0c:	e7f1      	b.n	80089f2 <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 8008a0e:	f859 6b04 	ldr.w	r6, [r9], #4
    if (compptr->quant_table != NULL)
 8008a12:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008a14:	b9eb      	cbnz	r3, 8008a52 <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 8008a16:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 8008a18:	2a03      	cmp	r2, #3
 8008a1a:	f102 0528 	add.w	r5, r2, #40	; 0x28
 8008a1e:	d803      	bhi.n	8008a28 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 8008a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	b92b      	cbnz	r3, 8008a34 <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	e9c3 a205 	strd	sl, r2, [r3, #20]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008a34:	6863      	ldr	r3, [r4, #4]
 8008a36:	2284      	movs	r2, #132	; 0x84
 8008a38:	2101      	movs	r1, #1
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 8008a3e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008a42:	4798      	blx	r3
 8008a44:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 8008a46:	2284      	movs	r2, #132	; 0x84
 8008a48:	6869      	ldr	r1, [r5, #4]
 8008a4a:	f004 fef1 	bl	800d830 <memcpy>
    compptr->quant_table = qtbl;
 8008a4e:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008a52:	3701      	adds	r7, #1
 8008a54:	e765      	b.n	8008922 <start_input_pass+0x52>
	...

08008a58 <consume_markers>:
{
 8008a58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 8008a5c:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 8008a60:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 8008a62:	6973      	ldr	r3, [r6, #20]
 8008a64:	b9eb      	cbnz	r3, 8008aa2 <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 8008a66:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 8008a6a:	4db0      	ldr	r5, [pc, #704]	; (8008d2c <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 8008a6c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8008a70:	4620      	mov	r0, r4
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	4798      	blx	r3
    switch (val) {
 8008a76:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 8008a78:	4607      	mov	r7, r0
    switch (val) {
 8008a7a:	d016      	beq.n	8008aaa <consume_markers+0x52>
 8008a7c:	2802      	cmp	r0, #2
 8008a7e:	d111      	bne.n	8008aa4 <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 8008a84:	69b3      	ldr	r3, [r6, #24]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 8174 	beq.w	8008d74 <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 8008a8c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	b133      	cbz	r3, 8008aa2 <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	223d      	movs	r2, #61	; 0x3d
 8008a98:	4620      	mov	r0, r4
 8008a9a:	615a      	str	r2, [r3, #20]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4798      	blx	r3
 8008aa0:	e000      	b.n	8008aa4 <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 8008aa2:	2702      	movs	r7, #2
}
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 8008aaa:	69b3      	ldr	r3, [r6, #24]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 8150 	beq.w	8008d52 <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	f040 80d8 	bne.w	8008c68 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 8008ab8:	6a22      	ldr	r2, [r4, #32]
 8008aba:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	dc02      	bgt.n	8008ac8 <consume_markers+0x70>
 8008ac2:	69e2      	ldr	r2, [r4, #28]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	dd08      	ble.n	8008ada <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	212a      	movs	r1, #42	; 0x2a
 8008acc:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 8008ada:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 8008ade:	2a08      	cmp	r2, #8
 8008ae0:	d006      	beq.n	8008af0 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	2110      	movs	r1, #16
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 8008af0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008af2:	2a0a      	cmp	r2, #10
 8008af4:	dd08      	ble.n	8008b08 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	211b      	movs	r1, #27
 8008afa:	4620      	mov	r0, r4
 8008afc:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008b00:	220a      	movs	r2, #10
 8008b02:	61da      	str	r2, [r3, #28]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008b08:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 8008b0c:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 8008b10:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 8008b14:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b1a:	459a      	cmp	sl, r3
 8008b1c:	db0d      	blt.n	8008b3a <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 8008b1e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8008b22:	b92b      	cbnz	r3, 8008b30 <consume_markers+0xd8>
 8008b24:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008b28:	b383      	cbz	r3, 8008b8c <consume_markers+0x134>
 8008b2a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8008b2e:	b36b      	cbz	r3, 8008b8c <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 8008b30:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 8008b32:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 8008b36:	233f      	movs	r3, #63	; 0x3f
 8008b38:	e071      	b.n	8008c1e <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 8008b3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d804      	bhi.n	8008b4e <consume_markers+0xf6>
 8008b44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	2b03      	cmp	r3, #3
 8008b4c:	d905      	bls.n	8008b5a <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	4620      	mov	r0, r4
 8008b52:	f8c3 b014 	str.w	fp, [r3, #20]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 8008b5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 8008b5e:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 8008b62:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 8008b66:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	bfac      	ite	ge
 8008b6e:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 8008b72:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 8008b76:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8008b7a:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	bfac      	ite	ge
 8008b82:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 8008b86:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 8008b8a:	e7c5      	b.n	8008b18 <consume_markers+0xc0>
    switch (cinfo->Se) {
 8008b8c:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 8008b90:	2b50      	cmp	r3, #80	; 0x50
 8008b92:	f000 808a 	beq.w	8008caa <consume_markers+0x252>
 8008b96:	dc2b      	bgt.n	8008bf0 <consume_markers+0x198>
 8008b98:	2b18      	cmp	r3, #24
 8008b9a:	d078      	beq.n	8008c8e <consume_markers+0x236>
 8008b9c:	dc1d      	bgt.n	8008bda <consume_markers+0x182>
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	d070      	beq.n	8008c84 <consume_markers+0x22c>
 8008ba2:	dc13      	bgt.n	8008bcc <consume_markers+0x174>
 8008ba4:	b3bb      	cbz	r3, 8008c16 <consume_markers+0x1be>
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d065      	beq.n	8008c76 <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 8008baa:	6822      	ldr	r2, [r4, #0]
 8008bac:	2111      	movs	r1, #17
 8008bae:	4620      	mov	r0, r4
 8008bb0:	6151      	str	r1, [r2, #20]
 8008bb2:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 8008bb6:	e9c2 1306 	strd	r1, r3, [r2, #24]
 8008bba:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8008bbe:	6213      	str	r3, [r2, #32]
 8008bc0:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8008bc4:	6253      	str	r3, [r2, #36]	; 0x24
 8008bc6:	6813      	ldr	r3, [r2, #0]
 8008bc8:	4798      	blx	r3
      break;
 8008bca:	e02a      	b.n	8008c22 <consume_markers+0x1ca>
    switch (cinfo->Se) {
 8008bcc:	2b0f      	cmp	r3, #15
 8008bce:	d1ec      	bne.n	8008baa <consume_markers+0x152>
      cinfo->block_size = 4;
 8008bd0:	2204      	movs	r2, #4
 8008bd2:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 8008bd6:	4a56      	ldr	r2, [pc, #344]	; (8008d30 <consume_markers+0x2d8>)
 8008bd8:	e051      	b.n	8008c7e <consume_markers+0x226>
    switch (cinfo->Se) {
 8008bda:	2b30      	cmp	r3, #48	; 0x30
 8008bdc:	d05c      	beq.n	8008c98 <consume_markers+0x240>
 8008bde:	2b3f      	cmp	r3, #63	; 0x3f
 8008be0:	d05f      	beq.n	8008ca2 <consume_markers+0x24a>
 8008be2:	2b23      	cmp	r3, #35	; 0x23
 8008be4:	d1e1      	bne.n	8008baa <consume_markers+0x152>
      cinfo->block_size = 6;
 8008be6:	2206      	movs	r2, #6
 8008be8:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 8008bec:	4a51      	ldr	r2, [pc, #324]	; (8008d34 <consume_markers+0x2dc>)
 8008bee:	e046      	b.n	8008c7e <consume_markers+0x226>
    switch (cinfo->Se) {
 8008bf0:	2ba8      	cmp	r3, #168	; 0xa8
 8008bf2:	d060      	beq.n	8008cb6 <consume_markers+0x25e>
 8008bf4:	dc07      	bgt.n	8008c06 <consume_markers+0x1ae>
 8008bf6:	2b78      	cmp	r3, #120	; 0x78
 8008bf8:	d059      	beq.n	8008cae <consume_markers+0x256>
 8008bfa:	2b8f      	cmp	r3, #143	; 0x8f
 8008bfc:	d059      	beq.n	8008cb2 <consume_markers+0x25a>
 8008bfe:	2b63      	cmp	r3, #99	; 0x63
 8008c00:	d1d3      	bne.n	8008baa <consume_markers+0x152>
      cinfo->block_size = 10;
 8008c02:	230a      	movs	r3, #10
 8008c04:	e795      	b.n	8008b32 <consume_markers+0xda>
    switch (cinfo->Se) {
 8008c06:	2be0      	cmp	r3, #224	; 0xe0
 8008c08:	d057      	beq.n	8008cba <consume_markers+0x262>
 8008c0a:	2bff      	cmp	r3, #255	; 0xff
 8008c0c:	d057      	beq.n	8008cbe <consume_markers+0x266>
 8008c0e:	2bc3      	cmp	r3, #195	; 0xc3
 8008c10:	d1cb      	bne.n	8008baa <consume_markers+0x152>
      cinfo->block_size = 14;
 8008c12:	230e      	movs	r3, #14
 8008c14:	e78d      	b.n	8008b32 <consume_markers+0xda>
      cinfo->block_size = 1;
 8008c16:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 8008c1a:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 8008c1e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008c22:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 8008c26:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008c2a:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 8008c2e:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 8008c30:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 8008c36:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008c3a:	459a      	cmp	sl, r3
 8008c3c:	db41      	blt.n	8008cc2 <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 8008c3e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 8008c42:	6a20      	ldr	r0, [r4, #32]
 8008c44:	4359      	muls	r1, r3
 8008c46:	f004 fd9f 	bl	800d788 <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 8008c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c4c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 8008c50:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 8008c54:	429a      	cmp	r2, r3
 8008c56:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8008c5a:	db03      	blt.n	8008c64 <consume_markers+0x20c>
 8008c5c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8008c60:	2a00      	cmp	r2, #0
 8008c62:	d071      	beq.n	8008d48 <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 8008c64:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 8008c68:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d16d      	bne.n	8008d4c <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 8008c70:	2302      	movs	r3, #2
 8008c72:	61b3      	str	r3, [r6, #24]
	  break;
 8008c74:	e6fa      	b.n	8008a6c <consume_markers+0x14>
      cinfo->block_size = 2;
 8008c76:	2202      	movs	r2, #2
 8008c78:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 8008c7c:	4a2e      	ldr	r2, [pc, #184]	; (8008d38 <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 8008c7e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 8008c82:	e7cc      	b.n	8008c1e <consume_markers+0x1c6>
      cinfo->block_size = 3;
 8008c84:	2203      	movs	r2, #3
 8008c86:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 8008c8a:	4a2c      	ldr	r2, [pc, #176]	; (8008d3c <consume_markers+0x2e4>)
 8008c8c:	e7f7      	b.n	8008c7e <consume_markers+0x226>
      cinfo->block_size = 5;
 8008c8e:	2205      	movs	r2, #5
 8008c90:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 8008c94:	4a2a      	ldr	r2, [pc, #168]	; (8008d40 <consume_markers+0x2e8>)
 8008c96:	e7f2      	b.n	8008c7e <consume_markers+0x226>
      cinfo->block_size = 7;
 8008c98:	2207      	movs	r2, #7
 8008c9a:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 8008c9e:	4a29      	ldr	r2, [pc, #164]	; (8008d44 <consume_markers+0x2ec>)
 8008ca0:	e7ed      	b.n	8008c7e <consume_markers+0x226>
      cinfo->block_size = 8;
 8008ca2:	2208      	movs	r2, #8
 8008ca4:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 8008ca8:	e7b7      	b.n	8008c1a <consume_markers+0x1c2>
      cinfo->block_size = 9;
 8008caa:	2309      	movs	r3, #9
 8008cac:	e741      	b.n	8008b32 <consume_markers+0xda>
      cinfo->block_size = 11;
 8008cae:	230b      	movs	r3, #11
 8008cb0:	e73f      	b.n	8008b32 <consume_markers+0xda>
      cinfo->block_size = 12;
 8008cb2:	230c      	movs	r3, #12
 8008cb4:	e73d      	b.n	8008b32 <consume_markers+0xda>
      cinfo->block_size = 13;
 8008cb6:	230d      	movs	r3, #13
 8008cb8:	e73b      	b.n	8008b32 <consume_markers+0xda>
      cinfo->block_size = 15;
 8008cba:	230f      	movs	r3, #15
 8008cbc:	e739      	b.n	8008b32 <consume_markers+0xda>
      cinfo->block_size = 16;
 8008cbe:	2310      	movs	r3, #16
 8008cc0:	e737      	b.n	8008b32 <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 8008cc2:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 8008cc6:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 8008cca:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 8008cce:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 8008cd2:	69e3      	ldr	r3, [r4, #28]
 8008cd4:	4351      	muls	r1, r2
 8008cd6:	4358      	muls	r0, r3
 8008cd8:	f004 fd56 	bl	800d788 <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 8008cdc:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 8008ce0:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 8008ce4:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 8008ce8:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 8008cea:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 8008cee:	4358      	muls	r0, r3
 8008cf0:	4351      	muls	r1, r2
 8008cf2:	f004 fd49 	bl	800d788 <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 8008cf6:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 8008cfa:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8008cfe:	69e3      	ldr	r3, [r4, #28]
 8008d00:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8008d04:	4358      	muls	r0, r3
 8008d06:	f004 fd3f 	bl	800d788 <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 8008d0a:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 8008d0e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8008d12:	6a23      	ldr	r3, [r4, #32]
 8008d14:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8008d18:	4358      	muls	r0, r3
 8008d1a:	f004 fd35 	bl	800d788 <jdiv_round_up>
    compptr->quant_table = NULL;
 8008d1e:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 8008d22:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 8008d26:	f108 0858 	add.w	r8, r8, #88	; 0x58
 8008d2a:	e783      	b.n	8008c34 <consume_markers+0x1dc>
 8008d2c:	08012f8c 	.word	0x08012f8c
 8008d30:	08012c94 	.word	0x08012c94
 8008d34:	08012db8 	.word	0x08012db8
 8008d38:	08012be0 	.word	0x08012be0
 8008d3c:	08012c30 	.word	0x08012c30
 8008d40:	08012d14 	.word	0x08012d14
 8008d44:	08012e88 	.word	0x08012e88
    cinfo->inputctl->has_multiple_scans = FALSE;
 8008d48:	611a      	str	r2, [r3, #16]
 8008d4a:	e78d      	b.n	8008c68 <consume_markers+0x210>
	inputctl->inheaders = 0;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	61b3      	str	r3, [r6, #24]
 8008d50:	e6a8      	b.n	8008aa4 <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 8008d52:	6933      	ldr	r3, [r6, #16]
 8008d54:	b92b      	cbnz	r3, 8008d62 <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	2224      	movs	r2, #36	; 0x24
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	615a      	str	r2, [r3, #20]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 8008d62:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f43f ae80 	beq.w	8008a6c <consume_markers+0x14>
	start_input_pass(cinfo);
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f7ff fdaf 	bl	80088d0 <start_input_pass>
 8008d72:	e697      	b.n	8008aa4 <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 8008d74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008d78:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	f77f ae90 	ble.w	8008aa2 <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 8008d82:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8008d86:	e68d      	b.n	8008aa4 <consume_markers+0x4c>

08008d88 <jpeg_core_output_dimensions>:
  cinfo->output_width = cinfo->image_width;
 8008d88:	69c3      	ldr	r3, [r0, #28]
 8008d8a:	6703      	str	r3, [r0, #112]	; 0x70
  cinfo->output_height = cinfo->image_height;
 8008d8c:	6a03      	ldr	r3, [r0, #32]
 8008d8e:	6743      	str	r3, [r0, #116]	; 0x74
}
 8008d90:	4770      	bx	lr
	...

08008d94 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8008d94:	6843      	ldr	r3, [r0, #4]
 8008d96:	221c      	movs	r2, #28
 8008d98:	2100      	movs	r1, #0
 8008d9a:	681b      	ldr	r3, [r3, #0]
{
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8008da0:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 8008da2:	4b08      	ldr	r3, [pc, #32]	; (8008dc4 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 8008da4:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 8008da8:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 8008daa:	4b07      	ldr	r3, [pc, #28]	; (8008dc8 <jinit_input_controller+0x34>)
 8008dac:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 8008dae:	4b07      	ldr	r3, [pc, #28]	; (8008dcc <jinit_input_controller+0x38>)
 8008db0:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 8008db2:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <jinit_input_controller+0x3c>)
 8008db4:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 8008db6:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 8008db8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	6183      	str	r3, [r0, #24]
}
 8008dc0:	bd10      	pop	{r4, pc}
 8008dc2:	bf00      	nop
 8008dc4:	08008a59 	.word	0x08008a59
 8008dc8:	080088a1 	.word	0x080088a1
 8008dcc:	080088d1 	.word	0x080088d1
 8008dd0:	08008891 	.word	0x08008891

08008dd4 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 8008dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 8008dd8:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 8008ddc:	4602      	mov	r2, r0

  switch (pass_mode) {
 8008dde:	b149      	cbz	r1, 8008df4 <start_pass_main+0x20>
 8008de0:	2902      	cmp	r1, #2
 8008de2:	d070      	beq.n	8008ec6 <start_pass_main+0xf2>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8008de4:	6803      	ldr	r3, [r0, #0]
 8008de6:	2203      	movs	r2, #3
 8008de8:	615a      	str	r2, [r3, #20]
 8008dea:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 8008dec:	b003      	add	sp, #12
 8008dee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8008df2:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 8008df4:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 8008df8:	6880      	ldr	r0, [r0, #8]
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d060      	beq.n	8008ec0 <start_pass_main+0xec>
  int M = cinfo->min_DCT_v_scaled_size;
 8008dfe:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
 8008e02:	f103 0e08 	add.w	lr, r3, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008e06:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 8008e0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 8008e0c:	482f      	ldr	r0, [pc, #188]	; (8008ecc <start_pass_main+0xf8>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008e0e:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 8008e10:	1cba      	adds	r2, r7, #2
      main->pub.process_data = process_data_context_main;
 8008e12:	6058      	str	r0, [r3, #4]
    for (i = 0; i < rgroup * (M + 2); i++) {
 8008e14:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8008e16:	9a00      	ldr	r2, [sp, #0]
 8008e18:	4291      	cmp	r1, r2
 8008e1a:	db09      	blt.n	8008e30 <start_pass_main+0x5c>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 8008e1c:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 8008e1e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 8008e22:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 8008e24:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 8008e26:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 8008e2a:	b003      	add	sp, #12
 8008e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8008e30:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8008e32:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 8008e34:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8008e36:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 8008e38:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 8008e3a:	f85e 4b04 	ldr.w	r4, [lr], #4
    xbuf0 = main->xbuffer[0][ci];
 8008e3e:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 8008e42:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8008e44:	fb92 f2f7 	sdiv	r2, r2, r7
    xbuf1 = main->xbuffer[1][ci];
 8008e48:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 8008e4c:	fb02 f905 	mul.w	r9, r2, r5
 8008e50:	2500      	movs	r5, #0
 8008e52:	454d      	cmp	r5, r9
 8008e54:	db1c      	blt.n	8008e90 <start_pass_main+0xbc>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 8008e56:	fb02 fb07 	mul.w	fp, r2, r7
 8008e5a:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 8008e5e:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 8008e62:	fb05 b502 	mla	r5, r5, r2, fp
 8008e66:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 8008e6a:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 8008e6e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 8008e72:	2400      	movs	r4, #0
 8008e74:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 8008e78:	4554      	cmp	r4, sl
 8008e7a:	db11      	blt.n	8008ea0 <start_pass_main+0xcc>
 8008e7c:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 8008e80:	2400      	movs	r4, #0
 8008e82:	fb00 c502 	mla	r5, r0, r2, ip
 8008e86:	42a2      	cmp	r2, r4
 8008e88:	dc14      	bgt.n	8008eb4 <start_pass_main+0xe0>
       ci++, compptr++) {
 8008e8a:	3101      	adds	r1, #1
 8008e8c:	3658      	adds	r6, #88	; 0x58
 8008e8e:	e7c2      	b.n	8008e16 <start_pass_main+0x42>
      xbuf0[i] = xbuf1[i] = buf[i];
 8008e90:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 8008e94:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 8008e98:	f84c 8025 	str.w	r8, [ip, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	e7d8      	b.n	8008e52 <start_pass_main+0x7e>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 8008ea0:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 8008ea4:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 8008ea6:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 8008eaa:	f855 bb04 	ldr.w	fp, [r5], #4
 8008eae:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 8008eb2:	e7e1      	b.n	8008e78 <start_pass_main+0xa4>
      xbuf0[i - rgroup] = xbuf0[0];
 8008eb4:	f8dc 0000 	ldr.w	r0, [ip]
 8008eb8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 8008ebc:	3401      	adds	r4, #1
 8008ebe:	e7e2      	b.n	8008e86 <start_pass_main+0xb2>
      main->pub.process_data = process_data_simple_main;
 8008ec0:	4a03      	ldr	r2, [pc, #12]	; (8008ed0 <start_pass_main+0xfc>)
 8008ec2:	605a      	str	r2, [r3, #4]
 8008ec4:	e7ae      	b.n	8008e24 <start_pass_main+0x50>
    main->pub.process_data = process_data_crank_post;
 8008ec6:	4a03      	ldr	r2, [pc, #12]	; (8008ed4 <start_pass_main+0x100>)
 8008ec8:	605a      	str	r2, [r3, #4]
    break;
 8008eca:	e7ae      	b.n	8008e2a <start_pass_main+0x56>
 8008ecc:	08008f31 	.word	0x08008f31
 8008ed0:	08008ed9 	.word	0x08008ed9
 8008ed4:	08009125 	.word	0x08009125

08008ed8 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 8008ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 8008edc:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 8008ee0:	4698      	mov	r8, r3
 8008ee2:	460e      	mov	r6, r1
 8008ee4:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 8008ee6:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 8008ee8:	4605      	mov	r5, r0
 8008eea:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 8008eec:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 8008ef0:	b943      	cbnz	r3, 8008f04 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 8008ef2:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 8008ef6:	9105      	str	r1, [sp, #20]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	4798      	blx	r3
 8008efc:	b1a8      	cbz	r0, 8008f2a <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 8008efe:	2301      	movs	r3, #1
 8008f00:	9905      	ldr	r1, [sp, #20]
 8008f02:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 8008f04:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 8008f08:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008f0c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 8008f10:	4628      	mov	r0, r5
 8008f12:	9600      	str	r6, [sp, #0]
 8008f14:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8008f18:	685e      	ldr	r6, [r3, #4]
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 8008f1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f20:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 8008f22:	bf24      	itt	cs
 8008f24:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 8008f26:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 8008f2a:	b007      	add	sp, #28
 8008f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008f30 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 8008f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 8008f34:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 8008f38:	4698      	mov	r8, r3
 8008f3a:	b08b      	sub	sp, #44	; 0x2c
 8008f3c:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 8008f3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 8008f40:	4689      	mov	r9, r1
 8008f42:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 8008f44:	b973      	cbnz	r3, 8008f64 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 8008f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f48:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 8008f4c:	330e      	adds	r3, #14
 8008f4e:	68d2      	ldr	r2, [r2, #12]
 8008f50:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8008f54:	4790      	blx	r2
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d05a      	beq.n	8009010 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 8008f5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008f60:	3301      	adds	r3, #1
 8008f62:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 8008f64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d011      	beq.n	8008f8e <process_data_context_main+0x5e>
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d036      	beq.n	8008fdc <process_data_context_main+0xac>
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d14e      	bne.n	8009010 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 8008f72:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 8008f76:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 8008f78:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 8008f7a:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 8008f7e:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 8008f80:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 8008f82:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d045      	beq.n	8009016 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 8008f8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f90:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008f94:	4628      	mov	r0, r5
 8008f96:	f103 010e 	add.w	r1, r3, #14
 8008f9a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 8008f9e:	f8cd 9000 	str.w	r9, [sp]
 8008fa2:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8008fa6:	685e      	ldr	r6, [r3, #4]
 8008fa8:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8008fac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008fae:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 8008fb0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008fb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d32b      	bcc.n	8009010 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 8008fb8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 8008fba:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d063      	beq.n	800908a <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 8008fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fc4:	f083 0301 	eor.w	r3, r3, #1
 8008fc8:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 8008fce:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 8008fd0:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 8008fd2:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 8008fd4:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 8008fd6:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 8008fd8:	6463      	str	r3, [r4, #68]	; 0x44
 8008fda:	e019      	b.n	8009010 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 8008fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fde:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f103 010e 	add.w	r1, r3, #14
 8008fe8:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 8008fec:	f8cd 9000 	str.w	r9, [sp]
 8008ff0:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8008ff4:	685e      	ldr	r6, [r3, #4]
 8008ff6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8008ffa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008ffc:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 8008ffe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009000:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009002:	429a      	cmp	r2, r3
 8009004:	d304      	bcc.n	8009010 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 8009006:	2300      	movs	r3, #0
 8009008:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	4543      	cmp	r3, r8
 800900e:	d3b0      	bcc.n	8008f72 <process_data_context_main+0x42>
  }
}
 8009010:	b00b      	add	sp, #44	; 0x2c
 8009012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009016:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 8009018:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800901c:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009020:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 8009024:	9206      	str	r2, [sp, #24]
 8009026:	9a06      	ldr	r2, [sp, #24]
 8009028:	4296      	cmp	r6, r2
 800902a:	daae      	bge.n	8008f8a <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800902c:	68d8      	ldr	r0, [r3, #12]
 800902e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009030:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 8009032:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009034:	fbb0 fbf2 	udiv	fp, r0, r2
 8009038:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800903c:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 8009040:	2800      	cmp	r0, #0
 8009042:	bf08      	it	eq
 8009044:	4610      	moveq	r0, r2
    if (ci == 0) {
 8009046:	b926      	cbnz	r6, 8009052 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 8009048:	1e42      	subs	r2, r0, #1
 800904a:	fb92 f2fa 	sdiv	r2, r2, sl
 800904e:	3201      	adds	r2, #1
 8009050:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 8009052:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 8009054:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 8009056:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800905a:	320e      	adds	r2, #14
 800905c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009060:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 8009064:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 8009068:	2200      	movs	r2, #0
 800906a:	4658      	mov	r0, fp
 800906c:	3004      	adds	r0, #4
 800906e:	9205      	str	r2, [sp, #20]
 8009070:	9a05      	ldr	r2, [sp, #20]
 8009072:	4552      	cmp	r2, sl
 8009074:	db02      	blt.n	800907c <process_data_context_main+0x14c>
       ci++, compptr++) {
 8009076:	3601      	adds	r6, #1
 8009078:	3358      	adds	r3, #88	; 0x58
 800907a:	e7d4      	b.n	8009026 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800907c:	f8db 2000 	ldr.w	r2, [fp]
 8009080:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 8009084:	9a05      	ldr	r2, [sp, #20]
 8009086:	3201      	adds	r2, #1
 8009088:	e7f1      	b.n	800906e <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800908a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800908e:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009092:	9305      	str	r3, [sp, #20]
 8009094:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009096:	2500      	movs	r5, #0
 8009098:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800909a:	1c43      	adds	r3, r0, #1
 800909c:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800909e:	9b08      	ldr	r3, [sp, #32]
 80090a0:	429d      	cmp	r5, r3
 80090a2:	da8e      	bge.n	8008fc2 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80090a4:	9b05      	ldr	r3, [sp, #20]
 80090a6:	68da      	ldr	r2, [r3, #12]
 80090a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090aa:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 80090ac:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80090b0:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 80090b4:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 80090b8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80090bc:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 80090c0:	9b07      	ldr	r3, [sp, #28]
 80090c2:	4353      	muls	r3, r2
 80090c4:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80090c8:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 80090cc:	4413      	add	r3, r2
 80090ce:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 80090d0:	2100      	movs	r1, #0
 80090d2:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 80090d6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80090da:	461e      	mov	r6, r3
 80090dc:	f06f 0303 	mvn.w	r3, #3
 80090e0:	fb03 fe02 	mul.w	lr, r3, r2
 80090e4:	eb07 030e 	add.w	r3, r7, lr
 80090e8:	44e6      	add	lr, ip
 80090ea:	9309      	str	r3, [sp, #36]	; 0x24
 80090ec:	428a      	cmp	r2, r1
 80090ee:	dc04      	bgt.n	80090fa <process_data_context_main+0x1ca>
       ci++, compptr++) {
 80090f0:	9b05      	ldr	r3, [sp, #20]
 80090f2:	3501      	adds	r5, #1
 80090f4:	3358      	adds	r3, #88	; 0x58
 80090f6:	9305      	str	r3, [sp, #20]
 80090f8:	e7d1      	b.n	800909e <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 80090fa:	9b06      	ldr	r3, [sp, #24]
 80090fc:	f853 bb04 	ldr.w	fp, [r3], #4
 8009100:	9306      	str	r3, [sp, #24]
 8009102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009104:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 8009108:	f85a bb04 	ldr.w	fp, [sl], #4
 800910c:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 8009110:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 8009114:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 8009118:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800911c:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800911e:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 8009122:	e7e3      	b.n	80090ec <process_data_context_main+0x1bc>

08009124 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 8009124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 8009126:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800912a:	9100      	str	r1, [sp, #0]
 800912c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009130:	2300      	movs	r3, #0
 8009132:	6864      	ldr	r4, [r4, #4]
 8009134:	461a      	mov	r2, r3
 8009136:	4619      	mov	r1, r3
 8009138:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800913a:	b004      	add	sp, #16
 800913c:	bd10      	pop	{r4, pc}
	...

08009140 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 8009140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009144:	6843      	ldr	r3, [r0, #4]
{
 8009146:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009148:	2250      	movs	r2, #80	; 0x50
 800914a:	2101      	movs	r1, #1
 800914c:	681b      	ldr	r3, [r3, #0]
{
 800914e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009150:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 8009152:	4b3a      	ldr	r3, [pc, #232]	; (800923c <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 8009154:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009158:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800915a:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800915c:	b12d      	cbz	r5, 800916a <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	2203      	movs	r2, #3
 8009162:	4620      	mov	r0, r4
 8009164:	615a      	str	r2, [r3, #20]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800916a:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800916e:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	b31b      	cbz	r3, 80091be <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 8009176:	2d01      	cmp	r5, #1
 8009178:	dc05      	bgt.n	8009186 <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	2230      	movs	r2, #48	; 0x30
 800917e:	4620      	mov	r0, r4
 8009180:	615a      	str	r2, [r3, #20]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009186:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009188:	2101      	movs	r1, #1
 800918a:	6863      	ldr	r3, [r4, #4]
 800918c:	4620      	mov	r0, r4
 800918e:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 8009190:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009194:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009196:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800919a:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800919e:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 80091a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 80091a2:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 80091a4:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 80091a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80091ac:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 80091b0:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80091b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 80091b4:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80091b8:	4598      	cmp	r8, r3
 80091ba:	db0a      	blt.n	80091d2 <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 80091bc:	1c85      	adds	r5, r0, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80091be:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 80091c2:	3608      	adds	r6, #8
 80091c4:	f04f 0800 	mov.w	r8, #0
 80091c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ca:	4543      	cmp	r3, r8
 80091cc:	dc1d      	bgt.n	800920a <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 80091ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80091d2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80091d4:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80091d6:	68eb      	ldr	r3, [r5, #12]
       ci++, compptr++) {
 80091d8:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80091da:	4353      	muls	r3, r2
 80091dc:	fb93 fbf0 	sdiv	fp, r3, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80091e0:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 80091e2:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80091e6:	4620      	mov	r0, r4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091ee:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 80091f2:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 80091f6:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 80091fa:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 80091fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009200:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 8009204:	f108 0801 	add.w	r8, r8, #1
 8009208:	e7d3      	b.n	80091b2 <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800920a:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800920c:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8009210:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 8009212:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 8009214:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8009218:	4353      	muls	r3, r2
 800921a:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800921e:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8009220:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 8009224:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 8009228:	436b      	muls	r3, r5
 800922a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800922e:	4620      	mov	r0, r4
 8009230:	434a      	muls	r2, r1
 8009232:	2101      	movs	r1, #1
 8009234:	47c8      	blx	r9
 8009236:	f846 0b04 	str.w	r0, [r6], #4
       ci++, compptr++) {
 800923a:	e7c5      	b.n	80091c8 <jinit_d_main_controller+0x88>
 800923c:	08008dd5 	.word	0x08008dd5

08009240 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 8009240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 8009244:	6986      	ldr	r6, [r0, #24]
{
 8009246:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 8009248:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800924c:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 8009250:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 8009254:	b93d      	cbnz	r5, 8009266 <get_sof+0x26>
 8009256:	68f3      	ldr	r3, [r6, #12]
 8009258:	4798      	blx	r3
 800925a:	b910      	cbnz	r0, 8009262 <get_sof+0x22>
 800925c:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800925e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009262:	e9d6 c500 	ldrd	ip, r5, [r6]
 8009266:	1e6b      	subs	r3, r5, #1
 8009268:	f89c 7000 	ldrb.w	r7, [ip]
 800926c:	f000 8088 	beq.w	8009380 <get_sof+0x140>
 8009270:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 8009274:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009276:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800927a:	f000 808a 	beq.w	8009392 <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800927e:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 8009280:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 8009282:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 8009284:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 8009288:	f000 808c 	beq.w	80093a4 <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800928c:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800928e:	782a      	ldrb	r2, [r5, #0]
 8009290:	3b01      	subs	r3, #1
 8009292:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8009296:	6222      	str	r2, [r4, #32]
 8009298:	f000 808d 	beq.w	80093b6 <get_sof+0x176>
 800929c:	3501      	adds	r5, #1
 800929e:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 80092a0:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 80092a2:	6a22      	ldr	r2, [r4, #32]
 80092a4:	440a      	add	r2, r1
 80092a6:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 80092a8:	f000 808e 	beq.w	80093c8 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 80092ac:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 80092ae:	782a      	ldrb	r2, [r5, #0]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80092b6:	61e2      	str	r2, [r4, #28]
 80092b8:	f000 808f 	beq.w	80093da <get_sof+0x19a>
 80092bc:	3501      	adds	r5, #1
 80092be:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 80092c0:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 80092c2:	69e2      	ldr	r2, [r4, #28]
 80092c4:	440a      	add	r2, r1
 80092c6:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 80092c8:	f000 8090 	beq.w	80093ec <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 80092cc:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 80092ce:	f103 39ff 	add.w	r9, r3, #4294967295
 80092d2:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 80092d6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 80092da:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 80092dc:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 80092de:	4620      	mov	r0, r4
 80092e0:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 80092e2:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 80092e6:	619a      	str	r2, [r3, #24]
  length -= 8;
 80092e8:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 80092ec:	69e2      	ldr	r2, [r4, #28]
 80092ee:	61da      	str	r2, [r3, #28]
 80092f0:	6a22      	ldr	r2, [r4, #32]
 80092f2:	621a      	str	r2, [r3, #32]
 80092f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80092f6:	625a      	str	r2, [r3, #36]	; 0x24
 80092f8:	2266      	movs	r2, #102	; 0x66
 80092fa:	615a      	str	r2, [r3, #20]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 8009300:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	b12b      	cbz	r3, 8009314 <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	223c      	movs	r2, #60	; 0x3c
 800930c:	4620      	mov	r0, r4
 800930e:	615a      	str	r2, [r3, #20]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 8009314:	6a23      	ldr	r3, [r4, #32]
 8009316:	b123      	cbz	r3, 8009322 <get_sof+0xe2>
 8009318:	69e3      	ldr	r3, [r4, #28]
 800931a:	b113      	cbz	r3, 8009322 <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800931c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800931e:	2b00      	cmp	r3, #0
 8009320:	dc05      	bgt.n	800932e <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	2221      	movs	r2, #33	; 0x21
 8009326:	4620      	mov	r0, r4
 8009328:	615a      	str	r2, [r3, #20]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800932e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009330:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009334:	4543      	cmp	r3, r8
 8009336:	d005      	beq.n	8009344 <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	220c      	movs	r2, #12
 800933c:	4620      	mov	r0, r4
 800933e:	615a      	str	r2, [r3, #20]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 8009344:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8009348:	b94b      	cbnz	r3, 800935e <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800934a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800934c:	2158      	movs	r1, #88	; 0x58
 800934e:	6863      	ldr	r3, [r4, #4]
 8009350:	4620      	mov	r0, r4
 8009352:	434a      	muls	r2, r1
 8009354:	2101      	movs	r1, #1
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4798      	blx	r3
 800935a:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800935e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 8009362:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 8009366:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800936a:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800936c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800936e:	4543      	cmp	r3, r8
 8009370:	dc45      	bgt.n	80093fe <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 8009372:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8009376:	2001      	movs	r0, #1
 8009378:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800937a:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800937e:	e76e      	b.n	800925e <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009380:	68f3      	ldr	r3, [r6, #12]
 8009382:	4620      	mov	r0, r4
 8009384:	4798      	blx	r3
 8009386:	2800      	cmp	r0, #0
 8009388:	f43f af68 	beq.w	800925c <get_sof+0x1c>
 800938c:	e9d6 5300 	ldrd	r5, r3, [r6]
 8009390:	e770      	b.n	8009274 <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 8009392:	68f3      	ldr	r3, [r6, #12]
 8009394:	4620      	mov	r0, r4
 8009396:	4798      	blx	r3
 8009398:	2800      	cmp	r0, #0
 800939a:	f43f af5f 	beq.w	800925c <get_sof+0x1c>
 800939e:	e9d6 5300 	ldrd	r5, r3, [r6]
 80093a2:	e76d      	b.n	8009280 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 80093a4:	68f3      	ldr	r3, [r6, #12]
 80093a6:	4620      	mov	r0, r4
 80093a8:	4798      	blx	r3
 80093aa:	2800      	cmp	r0, #0
 80093ac:	f43f af56 	beq.w	800925c <get_sof+0x1c>
 80093b0:	e9d6 5300 	ldrd	r5, r3, [r6]
 80093b4:	e76b      	b.n	800928e <get_sof+0x4e>
 80093b6:	68f3      	ldr	r3, [r6, #12]
 80093b8:	4620      	mov	r0, r4
 80093ba:	4798      	blx	r3
 80093bc:	2800      	cmp	r0, #0
 80093be:	f43f af4d 	beq.w	800925c <get_sof+0x1c>
 80093c2:	e9d6 5300 	ldrd	r5, r3, [r6]
 80093c6:	e76a      	b.n	800929e <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 80093c8:	68f3      	ldr	r3, [r6, #12]
 80093ca:	4620      	mov	r0, r4
 80093cc:	4798      	blx	r3
 80093ce:	2800      	cmp	r0, #0
 80093d0:	f43f af44 	beq.w	800925c <get_sof+0x1c>
 80093d4:	e9d6 5300 	ldrd	r5, r3, [r6]
 80093d8:	e769      	b.n	80092ae <get_sof+0x6e>
 80093da:	68f3      	ldr	r3, [r6, #12]
 80093dc:	4620      	mov	r0, r4
 80093de:	4798      	blx	r3
 80093e0:	2800      	cmp	r0, #0
 80093e2:	f43f af3b 	beq.w	800925c <get_sof+0x1c>
 80093e6:	e9d6 5300 	ldrd	r5, r3, [r6]
 80093ea:	e768      	b.n	80092be <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 80093ec:	68f3      	ldr	r3, [r6, #12]
 80093ee:	4620      	mov	r0, r4
 80093f0:	4798      	blx	r3
 80093f2:	2800      	cmp	r0, #0
 80093f4:	f43f af32 	beq.w	800925c <get_sof+0x1c>
 80093f8:	e9d6 5300 	ldrd	r5, r3, [r6]
 80093fc:	e767      	b.n	80092ce <get_sof+0x8e>
    compptr->component_index = ci;
 80093fe:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 8009402:	f1b9 0f00 	cmp.w	r9, #0
 8009406:	d107      	bne.n	8009418 <get_sof+0x1d8>
 8009408:	68f3      	ldr	r3, [r6, #12]
 800940a:	4620      	mov	r0, r4
 800940c:	4798      	blx	r3
 800940e:	2800      	cmp	r0, #0
 8009410:	f43f af24 	beq.w	800925c <get_sof+0x1c>
 8009414:	e9d6 5900 	ldrd	r5, r9, [r6]
 8009418:	782b      	ldrb	r3, [r5, #0]
 800941a:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800941e:	f1b9 0301 	subs.w	r3, r9, #1
 8009422:	d029      	beq.n	8009478 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 8009424:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 8009426:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 8009428:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800942a:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800942e:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 8009432:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 8009436:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800943a:	d026      	beq.n	800948a <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800943c:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800943e:	f103 39ff 	add.w	r9, r3, #4294967295
 8009442:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 8009446:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800944a:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800944c:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 8009450:	4620      	mov	r0, r4
 8009452:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 8009454:	f108 0801 	add.w	r8, r8, #1
 8009458:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800945a:	619a      	str	r2, [r3, #24]
 800945c:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 8009460:	61da      	str	r2, [r3, #28]
 8009462:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 8009466:	621a      	str	r2, [r3, #32]
 8009468:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800946c:	f8c3 a014 	str.w	sl, [r3, #20]
 8009470:	625a      	str	r2, [r3, #36]	; 0x24
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	4798      	blx	r3
       ci++, compptr++) {
 8009476:	e779      	b.n	800936c <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 8009478:	68f3      	ldr	r3, [r6, #12]
 800947a:	4620      	mov	r0, r4
 800947c:	4798      	blx	r3
 800947e:	2800      	cmp	r0, #0
 8009480:	f43f aeec 	beq.w	800925c <get_sof+0x1c>
 8009484:	e9d6 5300 	ldrd	r5, r3, [r6]
 8009488:	e7cd      	b.n	8009426 <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800948a:	68f3      	ldr	r3, [r6, #12]
 800948c:	4620      	mov	r0, r4
 800948e:	4798      	blx	r3
 8009490:	2800      	cmp	r0, #0
 8009492:	f43f aee3 	beq.w	800925c <get_sof+0x1c>
 8009496:	e9d6 5300 	ldrd	r5, r3, [r6]
 800949a:	e7d0      	b.n	800943e <get_sof+0x1fe>

0800949c <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800949c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 80094a0:	6986      	ldr	r6, [r0, #24]
{
 80094a2:	b085      	sub	sp, #20
 80094a4:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 80094a6:	6877      	ldr	r7, [r6, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 80094a8:	b3bf      	cbz	r7, 800951a <get_interesting_appn+0x7e>
  INPUT_VARS(cinfo);
 80094aa:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 80094ac:	f895 8000 	ldrb.w	r8, [r5]
 80094b0:	3f01      	subs	r7, #1
 80094b2:	ea4f 2908 	mov.w	r9, r8, lsl #8
 80094b6:	d03a      	beq.n	800952e <get_interesting_appn+0x92>
 80094b8:	3501      	adds	r5, #1
 80094ba:	f815 8b01 	ldrb.w	r8, [r5], #1
 80094be:	3f01      	subs	r7, #1
 80094c0:	44c8      	add	r8, r9
  length -= 2;
 80094c2:	f1a8 0802 	sub.w	r8, r8, #2

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 80094c6:	f1b8 0f0d 	cmp.w	r8, #13
 80094ca:	dc38      	bgt.n	800953e <get_interesting_appn+0xa2>
    numtoread = APPN_DATA_LEN;
  else if (length > 0)
 80094cc:	f1b8 0f00 	cmp.w	r8, #0
 80094d0:	dd38      	ble.n	8009544 <get_interesting_appn+0xa8>
    numtoread = (unsigned int) length;
 80094d2:	46c2      	mov	sl, r8
  else
    numtoread = 0;
  for (i = 0; i < numtoread; i++)
 80094d4:	f04f 0900 	mov.w	r9, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 80094d8:	b92f      	cbnz	r7, 80094e6 <get_interesting_appn+0x4a>
 80094da:	68f3      	ldr	r3, [r6, #12]
 80094dc:	4620      	mov	r0, r4
 80094de:	4798      	blx	r3
 80094e0:	b1f0      	cbz	r0, 8009520 <get_interesting_appn+0x84>
 80094e2:	e9d6 5700 	ldrd	r5, r7, [r6]
 80094e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80094ea:	3f01      	subs	r7, #1
 80094ec:	f80d 3009 	strb.w	r3, [sp, r9]
  for (i = 0; i < numtoread; i++)
 80094f0:	f109 0901 	add.w	r9, r9, #1
 80094f4:	45ca      	cmp	sl, r9
 80094f6:	d1ef      	bne.n	80094d8 <get_interesting_appn+0x3c>
  length -= numtoread;

  /* process it */
  switch (cinfo->unread_marker) {
 80094f8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
  length -= numtoread;
 80094fc:	eba8 090a 	sub.w	r9, r8, sl
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 8009500:	6823      	ldr	r3, [r4, #0]
  switch (cinfo->unread_marker) {
 8009502:	2ae0      	cmp	r2, #224	; 0xe0
 8009504:	d021      	beq.n	800954a <get_interesting_appn+0xae>
 8009506:	2aee      	cmp	r2, #238	; 0xee
 8009508:	f000 80d9 	beq.w	80096be <get_interesting_appn+0x222>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
    break;
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800950c:	2146      	movs	r1, #70	; 0x46
 800950e:	4620      	mov	r0, r4
 8009510:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4798      	blx	r3
    break;
 8009518:	e094      	b.n	8009644 <get_interesting_appn+0x1a8>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800951a:	68f3      	ldr	r3, [r6, #12]
 800951c:	4798      	blx	r3
 800951e:	b918      	cbnz	r0, 8009528 <get_interesting_appn+0x8c>
 8009520:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 8009522:	b005      	add	sp, #20
 8009524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009528:	e9d6 5700 	ldrd	r5, r7, [r6]
 800952c:	e7be      	b.n	80094ac <get_interesting_appn+0x10>
 800952e:	68f3      	ldr	r3, [r6, #12]
 8009530:	4620      	mov	r0, r4
 8009532:	4798      	blx	r3
 8009534:	2800      	cmp	r0, #0
 8009536:	d0f3      	beq.n	8009520 <get_interesting_appn+0x84>
 8009538:	e9d6 5700 	ldrd	r5, r7, [r6]
 800953c:	e7bd      	b.n	80094ba <get_interesting_appn+0x1e>
    numtoread = APPN_DATA_LEN;
 800953e:	f04f 0a0e 	mov.w	sl, #14
 8009542:	e7c7      	b.n	80094d4 <get_interesting_appn+0x38>
    numtoread = 0;
 8009544:	f04f 0a00 	mov.w	sl, #0
 8009548:	e7d6      	b.n	80094f8 <get_interesting_appn+0x5c>
  if (datalen >= APP0_DATA_LEN &&
 800954a:	f1ba 0f0e 	cmp.w	sl, #14
  INT32 totallen = (INT32) datalen + remaining;
 800954e:	eb0a 0809 	add.w	r8, sl, r9
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 8009552:	685a      	ldr	r2, [r3, #4]
  if (datalen >= APP0_DATA_LEN &&
 8009554:	f040 8082 	bne.w	800965c <get_interesting_appn+0x1c0>
 8009558:	f89d 1000 	ldrb.w	r1, [sp]
 800955c:	294a      	cmp	r1, #74	; 0x4a
 800955e:	f040 80ac 	bne.w	80096ba <get_interesting_appn+0x21e>
      GETJOCTET(data[0]) == 0x4A &&
 8009562:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8009566:	2946      	cmp	r1, #70	; 0x46
 8009568:	d17f      	bne.n	800966a <get_interesting_appn+0x1ce>
      GETJOCTET(data[1]) == 0x46 &&
 800956a:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800956e:	2949      	cmp	r1, #73	; 0x49
 8009570:	d17b      	bne.n	800966a <get_interesting_appn+0x1ce>
      GETJOCTET(data[2]) == 0x49 &&
 8009572:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8009576:	2946      	cmp	r1, #70	; 0x46
 8009578:	d177      	bne.n	800966a <get_interesting_appn+0x1ce>
      GETJOCTET(data[3]) == 0x46 &&
 800957a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800957e:	2900      	cmp	r1, #0
 8009580:	d173      	bne.n	800966a <get_interesting_appn+0x1ce>
    cinfo->density_unit = GETJOCTET(data[7]);
 8009582:	f89d 0007 	ldrb.w	r0, [sp, #7]
    cinfo->saw_JFIF_marker = TRUE;
 8009586:	2101      	movs	r1, #1
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 8009588:	f89d e008 	ldrb.w	lr, [sp, #8]
    cinfo->density_unit = GETJOCTET(data[7]);
 800958c:	f884 0122 	strb.w	r0, [r4, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 8009590:	f89d 0009 	ldrb.w	r0, [sp, #9]
    cinfo->saw_JFIF_marker = TRUE;
 8009594:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 8009598:	eb00 200e 	add.w	r0, r0, lr, lsl #8
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800959c:	f89d 1005 	ldrb.w	r1, [sp, #5]
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 80095a0:	f89d e00a 	ldrb.w	lr, [sp, #10]
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 80095a4:	f8a4 0124 	strh.w	r0, [r4, #292]	; 0x124
    if (cinfo->JFIF_major_version != 1)
 80095a8:	2901      	cmp	r1, #1
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 80095aa:	f89d 000b 	ldrb.w	r0, [sp, #11]
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 80095ae:	f89d c006 	ldrb.w	ip, [sp, #6]
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 80095b2:	eb00 200e 	add.w	r0, r0, lr, lsl #8
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 80095b6:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 80095ba:	f884 c121 	strb.w	ip, [r4, #289]	; 0x121
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 80095be:	f8a4 0126 	strh.w	r0, [r4, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 80095c2:	d008      	beq.n	80095d6 <get_interesting_appn+0x13a>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 80095c4:	207a      	movs	r0, #122	; 0x7a
 80095c6:	f8c3 c01c 	str.w	ip, [r3, #28]
 80095ca:	e9c3 0105 	strd	r0, r1, [r3, #20]
 80095ce:	f04f 31ff 	mov.w	r1, #4294967295
 80095d2:	4620      	mov	r0, r4
 80095d4:	4790      	blx	r2
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	2101      	movs	r1, #1
 80095da:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
 80095de:	4620      	mov	r0, r4
 80095e0:	619a      	str	r2, [r3, #24]
 80095e2:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
 80095e6:	61da      	str	r2, [r3, #28]
 80095e8:	f8b4 2124 	ldrh.w	r2, [r4, #292]	; 0x124
 80095ec:	621a      	str	r2, [r3, #32]
 80095ee:	f8b4 2126 	ldrh.w	r2, [r4, #294]	; 0x126
 80095f2:	625a      	str	r2, [r3, #36]	; 0x24
 80095f4:	f894 2122 	ldrb.w	r2, [r4, #290]	; 0x122
 80095f8:	629a      	str	r2, [r3, #40]	; 0x28
 80095fa:	2259      	movs	r2, #89	; 0x59
 80095fc:	615a      	str	r2, [r3, #20]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	4798      	blx	r3
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 8009602:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8009606:	f89d b00d 	ldrb.w	fp, [sp, #13]
 800960a:	ea5a 030b 	orrs.w	r3, sl, fp
 800960e:	d009      	beq.n	8009624 <get_interesting_appn+0x188>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	225c      	movs	r2, #92	; 0x5c
 8009614:	2101      	movs	r1, #1
 8009616:	4620      	mov	r0, r4
 8009618:	f8c3 b01c 	str.w	fp, [r3, #28]
 800961c:	e9c3 2a05 	strd	r2, sl, [r3, #20]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	4798      	blx	r3
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 8009624:	fb1a fa0b 	smulbb	sl, sl, fp
    totallen -= APP0_DATA_LEN;
 8009628:	f1a8 020e 	sub.w	r2, r8, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800962c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    if (totallen !=
 8009630:	4552      	cmp	r2, sl
 8009632:	d007      	beq.n	8009644 <get_interesting_appn+0x1a8>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	215a      	movs	r1, #90	; 0x5a
 8009638:	4620      	mov	r0, r4
 800963a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	2101      	movs	r1, #1
 8009642:	4798      	blx	r3
  if (length > 0)
 8009644:	f1b9 0f00 	cmp.w	r9, #0
  INPUT_SYNC(cinfo);
 8009648:	e9c6 5700 	strd	r5, r7, [r6]
  if (length > 0)
 800964c:	dd04      	ble.n	8009658 <get_interesting_appn+0x1bc>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800964e:	69a3      	ldr	r3, [r4, #24]
 8009650:	4649      	mov	r1, r9
 8009652:	4620      	mov	r0, r4
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	4798      	blx	r3
  return TRUE;
 8009658:	2001      	movs	r0, #1
 800965a:	e762      	b.n	8009522 <get_interesting_appn+0x86>
  } else if (datalen >= 6 &&
 800965c:	f1ba 0f05 	cmp.w	sl, #5
 8009660:	d92b      	bls.n	80096ba <get_interesting_appn+0x21e>
 8009662:	f89d 1000 	ldrb.w	r1, [sp]
 8009666:	294a      	cmp	r1, #74	; 0x4a
 8009668:	d127      	bne.n	80096ba <get_interesting_appn+0x21e>
      GETJOCTET(data[0]) == 0x4A &&
 800966a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800966e:	2946      	cmp	r1, #70	; 0x46
 8009670:	d123      	bne.n	80096ba <get_interesting_appn+0x21e>
      GETJOCTET(data[1]) == 0x46 &&
 8009672:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8009676:	2958      	cmp	r1, #88	; 0x58
 8009678:	d11f      	bne.n	80096ba <get_interesting_appn+0x21e>
      GETJOCTET(data[2]) == 0x58 &&
 800967a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800967e:	2958      	cmp	r1, #88	; 0x58
 8009680:	d11b      	bne.n	80096ba <get_interesting_appn+0x21e>
      GETJOCTET(data[3]) == 0x58 &&
 8009682:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009686:	b9c1      	cbnz	r1, 80096ba <get_interesting_appn+0x21e>
    switch (GETJOCTET(data[5])) {
 8009688:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800968c:	2911      	cmp	r1, #17
 800968e:	d007      	beq.n	80096a0 <get_interesting_appn+0x204>
 8009690:	2913      	cmp	r1, #19
 8009692:	d007      	beq.n	80096a4 <get_interesting_appn+0x208>
 8009694:	2910      	cmp	r1, #16
 8009696:	d107      	bne.n	80096a8 <get_interesting_appn+0x20c>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 8009698:	216e      	movs	r1, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800969a:	e9c3 1805 	strd	r1, r8, [r3, #20]
 800969e:	e008      	b.n	80096b2 <get_interesting_appn+0x216>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 80096a0:	216f      	movs	r1, #111	; 0x6f
 80096a2:	e7fa      	b.n	800969a <get_interesting_appn+0x1fe>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 80096a4:	2170      	movs	r1, #112	; 0x70
 80096a6:	e7f8      	b.n	800969a <get_interesting_appn+0x1fe>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 80096a8:	205b      	movs	r0, #91	; 0x5b
 80096aa:	f8c3 801c 	str.w	r8, [r3, #28]
 80096ae:	e9c3 0105 	strd	r0, r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 80096b2:	2101      	movs	r1, #1
 80096b4:	4620      	mov	r0, r4
 80096b6:	4790      	blx	r2
 80096b8:	e7c4      	b.n	8009644 <get_interesting_appn+0x1a8>
 80096ba:	214f      	movs	r1, #79	; 0x4f
 80096bc:	e7ed      	b.n	800969a <get_interesting_appn+0x1fe>
  if (datalen >= APP14_DATA_LEN &&
 80096be:	f1ba 0f0b 	cmp.w	sl, #11
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 80096c2:	f8d3 b004 	ldr.w	fp, [r3, #4]
  if (datalen >= APP14_DATA_LEN &&
 80096c6:	d936      	bls.n	8009736 <get_interesting_appn+0x29a>
 80096c8:	f89d 2000 	ldrb.w	r2, [sp]
 80096cc:	2a41      	cmp	r2, #65	; 0x41
 80096ce:	d132      	bne.n	8009736 <get_interesting_appn+0x29a>
      GETJOCTET(data[0]) == 0x41 &&
 80096d0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80096d4:	2a64      	cmp	r2, #100	; 0x64
 80096d6:	d12e      	bne.n	8009736 <get_interesting_appn+0x29a>
      GETJOCTET(data[1]) == 0x64 &&
 80096d8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80096dc:	2a6f      	cmp	r2, #111	; 0x6f
 80096de:	d12a      	bne.n	8009736 <get_interesting_appn+0x29a>
      GETJOCTET(data[2]) == 0x6F &&
 80096e0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80096e4:	2a62      	cmp	r2, #98	; 0x62
 80096e6:	d126      	bne.n	8009736 <get_interesting_appn+0x29a>
      GETJOCTET(data[3]) == 0x62 &&
 80096e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80096ec:	2a65      	cmp	r2, #101	; 0x65
 80096ee:	d122      	bne.n	8009736 <get_interesting_appn+0x29a>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 80096f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80096f4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 80096f8:	f89d 0009 	ldrb.w	r0, [sp, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 80096fc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 8009700:	f89d 200a 	ldrb.w	r2, [sp, #10]
    transform = GETJOCTET(data[11]);
 8009704:	f89d 800b 	ldrb.w	r8, [sp, #11]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 8009708:	eb02 2200 	add.w	r2, r2, r0, lsl #8
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800970c:	f89d c005 	ldrb.w	ip, [sp, #5]
 8009710:	f89d 0006 	ldrb.w	r0, [sp, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 8009714:	e9c3 2808 	strd	r2, r8, [r3, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 8009718:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800971c:	224e      	movs	r2, #78	; 0x4e
 800971e:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8009722:	615a      	str	r2, [r3, #20]
 8009724:	2101      	movs	r1, #1
 8009726:	4620      	mov	r0, r4
 8009728:	47d8      	blx	fp
    cinfo->saw_Adobe_marker = TRUE;
 800972a:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800972c:	f884 812c 	strb.w	r8, [r4, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 8009730:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    cinfo->Adobe_transform = (UINT8) transform;
 8009734:	e786      	b.n	8009644 <get_interesting_appn+0x1a8>
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 8009736:	2250      	movs	r2, #80	; 0x50
 8009738:	2101      	movs	r1, #1
 800973a:	4620      	mov	r0, r4
 800973c:	e9c3 2805 	strd	r2, r8, [r3, #20]
 8009740:	47d8      	blx	fp
 8009742:	e77f      	b.n	8009644 <get_interesting_appn+0x1a8>

08009744 <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 8009744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 8009748:	6984      	ldr	r4, [r0, #24]
{
 800974a:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800974c:	6863      	ldr	r3, [r4, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800974e:	b31b      	cbz	r3, 8009798 <skip_variable+0x54>
  INPUT_VARS(cinfo);
 8009750:	6825      	ldr	r5, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009752:	782e      	ldrb	r6, [r5, #0]
 8009754:	f1b3 0801 	subs.w	r8, r3, #1
 8009758:	ea4f 2906 	mov.w	r9, r6, lsl #8
 800975c:	d025      	beq.n	80097aa <skip_variable+0x66>
 800975e:	3501      	adds	r5, #1
 8009760:	f815 6b01 	ldrb.w	r6, [r5], #1
  length -= 2;
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 8009764:	235d      	movs	r3, #93	; 0x5d
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800976a:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800976c:	4638      	mov	r0, r7
 800976e:	6153      	str	r3, [r2, #20]
  length -= 2;
 8009770:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 8009772:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8009776:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800977a:	6853      	ldr	r3, [r2, #4]
 800977c:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800977e:	f108 33ff 	add.w	r3, r8, #4294967295

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
 8009782:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 8009784:	6025      	str	r5, [r4, #0]
 8009786:	6063      	str	r3, [r4, #4]
  if (length > 0)
 8009788:	dd04      	ble.n	8009794 <skip_variable+0x50>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	4631      	mov	r1, r6
 800978e:	4638      	mov	r0, r7
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	4798      	blx	r3

  return TRUE;
 8009794:	2001      	movs	r0, #1
 8009796:	e003      	b.n	80097a0 <skip_variable+0x5c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009798:	68e3      	ldr	r3, [r4, #12]
 800979a:	4798      	blx	r3
 800979c:	b910      	cbnz	r0, 80097a4 <skip_variable+0x60>
 800979e:	2000      	movs	r0, #0
}
 80097a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 80097a4:	e9d4 5300 	ldrd	r5, r3, [r4]
 80097a8:	e7d3      	b.n	8009752 <skip_variable+0xe>
 80097aa:	68e3      	ldr	r3, [r4, #12]
 80097ac:	4638      	mov	r0, r7
 80097ae:	4798      	blx	r3
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d0f4      	beq.n	800979e <skip_variable+0x5a>
 80097b4:	e9d4 5800 	ldrd	r5, r8, [r4]
 80097b8:	e7d2      	b.n	8009760 <skip_variable+0x1c>

080097ba <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 80097ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 80097be:	6986      	ldr	r6, [r0, #24]
{
 80097c0:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 80097c2:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 80097c6:	b987      	cbnz	r7, 80097ea <next_marker+0x30>
 80097c8:	68f3      	ldr	r3, [r6, #12]
 80097ca:	4640      	mov	r0, r8
 80097cc:	4798      	blx	r3
 80097ce:	b950      	cbnz	r0, 80097e6 <next_marker+0x2c>
 80097d0:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 80097d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 80097d6:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 80097da:	6993      	ldr	r3, [r2, #24]
 80097dc:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 80097de:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 80097e0:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 80097e4:	e7ef      	b.n	80097c6 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 80097e6:	e9d6 4700 	ldrd	r4, r7, [r6]
 80097ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097ee:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 80097f0:	2bff      	cmp	r3, #255	; 0xff
 80097f2:	d1f0      	bne.n	80097d6 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 80097f4:	b937      	cbnz	r7, 8009804 <next_marker+0x4a>
 80097f6:	68f3      	ldr	r3, [r6, #12]
 80097f8:	4640      	mov	r0, r8
 80097fa:	4798      	blx	r3
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d0e7      	beq.n	80097d0 <next_marker+0x16>
 8009800:	e9d6 4700 	ldrd	r4, r7, [r6]
 8009804:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009808:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800980a:	2dff      	cmp	r5, #255	; 0xff
 800980c:	d0f2      	beq.n	80097f4 <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800980e:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 8009812:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 8009814:	b90d      	cbnz	r5, 800981a <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 8009816:	3302      	adds	r3, #2
 8009818:	e7e1      	b.n	80097de <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800981a:	b173      	cbz	r3, 800983a <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800981c:	f8d8 2000 	ldr.w	r2, [r8]
 8009820:	2177      	movs	r1, #119	; 0x77
 8009822:	4640      	mov	r0, r8
 8009824:	61d5      	str	r5, [r2, #28]
 8009826:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800982a:	6853      	ldr	r3, [r2, #4]
 800982c:	f04f 31ff 	mov.w	r1, #4294967295
 8009830:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 8009832:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 8009836:	2200      	movs	r2, #0
 8009838:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800983a:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800983e:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 8009840:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 8009844:	e7c5      	b.n	80097d2 <next_marker+0x18>

08009846 <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 8009846:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800984a:	b510      	push	{r4, lr}
 800984c:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800984e:	b1e3      	cbz	r3, 800988a <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 8009850:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 8009854:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 8009858:	6959      	ldr	r1, [r3, #20]
 800985a:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800985e:	429a      	cmp	r2, r3
 8009860:	d119      	bne.n	8009896 <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	2264      	movs	r2, #100	; 0x64
 8009866:	4620      	mov	r0, r4
 8009868:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	2103      	movs	r1, #3
 8009870:	4798      	blx	r3
    cinfo->unread_marker = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 8009878:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800987c:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800987e:	6953      	ldr	r3, [r2, #20]
 8009880:	3301      	adds	r3, #1
 8009882:	f003 0307 	and.w	r3, r3, #7
 8009886:	6153      	str	r3, [r2, #20]
  return TRUE;
 8009888:	e004      	b.n	8009894 <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800988a:	f7ff ff96 	bl	80097ba <next_marker>
 800988e:	2800      	cmp	r0, #0
 8009890:	d1de      	bne.n	8009850 <read_restart_marker+0xa>
      return FALSE;
 8009892:	2000      	movs	r0, #0
}
 8009894:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 8009896:	69a3      	ldr	r3, [r4, #24]
 8009898:	4620      	mov	r0, r4
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	4798      	blx	r3
 800989e:	2800      	cmp	r0, #0
 80098a0:	d1ea      	bne.n	8009878 <read_restart_marker+0x32>
 80098a2:	e7f6      	b.n	8009892 <read_restart_marker+0x4c>

080098a4 <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 80098a4:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 80098a6:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 80098aa:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 80098ae:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 80098b2:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 80098b6:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 80098b8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 80098bc:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 80098c0:	4770      	bx	lr

080098c2 <get_dht>:
{
 80098c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 80098c6:	6987      	ldr	r7, [r0, #24]
{
 80098c8:	b0c9      	sub	sp, #292	; 0x124
 80098ca:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 80098cc:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 80098ce:	b1fe      	cbz	r6, 8009910 <get_dht+0x4e>
  INPUT_VARS(cinfo);
 80098d0:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 80098d2:	f894 9000 	ldrb.w	r9, [r4]
 80098d6:	3e01      	subs	r6, #1
 80098d8:	ea4f 2809 	mov.w	r8, r9, lsl #8
 80098dc:	d022      	beq.n	8009924 <get_dht+0x62>
 80098de:	3401      	adds	r4, #1
 80098e0:	f814 9b01 	ldrb.w	r9, [r4], #1
 80098e4:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 80098e6:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 80098ea:	44c1      	add	r9, r8
  length -= 2;
 80098ec:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 80098f0:	f1b9 0f10 	cmp.w	r9, #16
 80098f4:	dc1e      	bgt.n	8009934 <get_dht+0x72>
  if (length != 0)
 80098f6:	f1b9 0f00 	cmp.w	r9, #0
 80098fa:	d005      	beq.n	8009908 <get_dht+0x46>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	220c      	movs	r2, #12
 8009900:	4628      	mov	r0, r5
 8009902:	615a      	str	r2, [r3, #20]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4798      	blx	r3
  return TRUE;
 8009908:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800990a:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800990e:	e003      	b.n	8009918 <get_dht+0x56>
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4798      	blx	r3
 8009914:	b918      	cbnz	r0, 800991e <get_dht+0x5c>
 8009916:	2000      	movs	r0, #0
}
 8009918:	b049      	add	sp, #292	; 0x124
 800991a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800991e:	e9d7 4600 	ldrd	r4, r6, [r7]
 8009922:	e7d6      	b.n	80098d2 <get_dht+0x10>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	4628      	mov	r0, r5
 8009928:	4798      	blx	r3
 800992a:	2800      	cmp	r0, #0
 800992c:	d0f3      	beq.n	8009916 <get_dht+0x54>
 800992e:	e9d7 4600 	ldrd	r4, r6, [r7]
 8009932:	e7d5      	b.n	80098e0 <get_dht+0x1e>
    INPUT_BYTE(cinfo, index, return FALSE);
 8009934:	b936      	cbnz	r6, 8009944 <get_dht+0x82>
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	4628      	mov	r0, r5
 800993a:	4790      	blx	r2
 800993c:	2800      	cmp	r0, #0
 800993e:	d0ea      	beq.n	8009916 <get_dht+0x54>
 8009940:	e9d7 4600 	ldrd	r4, r6, [r7]
 8009944:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 8009948:	2152      	movs	r1, #82	; 0x52
 800994a:	682a      	ldr	r2, [r5, #0]
 800994c:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800994e:	f8cd 8000 	str.w	r8, [sp]
 8009952:	3e01      	subs	r6, #1
    count = 0;
 8009954:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 8009958:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800995c:	6852      	ldr	r2, [r2, #4]
 800995e:	2101      	movs	r1, #1
 8009960:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 8009962:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 8009964:	b946      	cbnz	r6, 8009978 <get_dht+0xb6>
 8009966:	68f9      	ldr	r1, [r7, #12]
 8009968:	4628      	mov	r0, r5
 800996a:	9201      	str	r2, [sp, #4]
 800996c:	4788      	blx	r1
 800996e:	2800      	cmp	r0, #0
 8009970:	d0d1      	beq.n	8009916 <get_dht+0x54>
 8009972:	9a01      	ldr	r2, [sp, #4]
 8009974:	e9d7 4600 	ldrd	r4, r6, [r7]
 8009978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800997c:	3e01      	subs	r6, #1
 800997e:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 8009982:	3201      	adds	r2, #1
      count += bits[i];
 8009984:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 8009986:	2a11      	cmp	r2, #17
 8009988:	d1ec      	bne.n	8009964 <get_dht+0xa2>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800998a:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800998c:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 8009990:	f89b 1001 	ldrb.w	r1, [fp, #1]
 8009994:	f04f 0958 	mov.w	r9, #88	; 0x58
 8009998:	4628      	mov	r0, r5
    length -= 1 + 16;
 800999a:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800999c:	6191      	str	r1, [r2, #24]
 800999e:	f89b 1002 	ldrb.w	r1, [fp, #2]
 80099a2:	f8c2 9014 	str.w	r9, [r2, #20]
 80099a6:	61d1      	str	r1, [r2, #28]
 80099a8:	f89b 1003 	ldrb.w	r1, [fp, #3]
 80099ac:	6211      	str	r1, [r2, #32]
 80099ae:	f89b 1004 	ldrb.w	r1, [fp, #4]
 80099b2:	6251      	str	r1, [r2, #36]	; 0x24
 80099b4:	f89b 1005 	ldrb.w	r1, [fp, #5]
 80099b8:	6291      	str	r1, [r2, #40]	; 0x28
 80099ba:	f89b 1006 	ldrb.w	r1, [fp, #6]
 80099be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80099c0:	f89b 1007 	ldrb.w	r1, [fp, #7]
 80099c4:	6311      	str	r1, [r2, #48]	; 0x30
 80099c6:	f89b 1008 	ldrb.w	r1, [fp, #8]
 80099ca:	6351      	str	r1, [r2, #52]	; 0x34
 80099cc:	2102      	movs	r1, #2
 80099ce:	6852      	ldr	r2, [r2, #4]
 80099d0:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 80099d2:	682a      	ldr	r2, [r5, #0]
 80099d4:	f89b 1009 	ldrb.w	r1, [fp, #9]
 80099d8:	4628      	mov	r0, r5
 80099da:	f8c2 9014 	str.w	r9, [r2, #20]
 80099de:	6191      	str	r1, [r2, #24]
 80099e0:	f89b 100a 	ldrb.w	r1, [fp, #10]
 80099e4:	61d1      	str	r1, [r2, #28]
 80099e6:	f89b 100b 	ldrb.w	r1, [fp, #11]
 80099ea:	6211      	str	r1, [r2, #32]
 80099ec:	f89b 100c 	ldrb.w	r1, [fp, #12]
 80099f0:	6251      	str	r1, [r2, #36]	; 0x24
 80099f2:	f89b 100d 	ldrb.w	r1, [fp, #13]
 80099f6:	6291      	str	r1, [r2, #40]	; 0x28
 80099f8:	f89b 100e 	ldrb.w	r1, [fp, #14]
 80099fc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80099fe:	f89b 100f 	ldrb.w	r1, [fp, #15]
 8009a02:	6311      	str	r1, [r2, #48]	; 0x30
 8009a04:	f89b 1010 	ldrb.w	r1, [fp, #16]
 8009a08:	6351      	str	r1, [r2, #52]	; 0x34
 8009a0a:	2102      	movs	r1, #2
 8009a0c:	6852      	ldr	r2, [r2, #4]
 8009a0e:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 8009a10:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 8009a14:	dc02      	bgt.n	8009a1c <get_dht+0x15a>
 8009a16:	9b01      	ldr	r3, [sp, #4]
 8009a18:	4553      	cmp	r3, sl
 8009a1a:	da05      	bge.n	8009a28 <get_dht+0x166>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 8009a1c:	682a      	ldr	r2, [r5, #0]
 8009a1e:	2109      	movs	r1, #9
 8009a20:	4628      	mov	r0, r5
 8009a22:	6151      	str	r1, [r2, #20]
 8009a24:	6812      	ldr	r2, [r2, #0]
 8009a26:	4790      	blx	r2
 8009a28:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 8009a2c:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 8009a2e:	45d1      	cmp	r9, sl
 8009a30:	d13f      	bne.n	8009ab2 <get_dht+0x1f0>
    if (index & 0x10) {		/* AC table definition */
 8009a32:	f018 0f10 	tst.w	r8, #16
    length -= count;
 8009a36:	9b01      	ldr	r3, [sp, #4]
 8009a38:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 8009a3c:	bf17      	itett	ne
 8009a3e:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 8009a42:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 8009a46:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 8009a4a:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 8009a4c:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 8009a4e:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d906      	bls.n	8009a64 <get_dht+0x1a2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 8009a56:	682a      	ldr	r2, [r5, #0]
 8009a58:	211f      	movs	r1, #31
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8009a60:	6812      	ldr	r2, [r2, #0]
 8009a62:	4790      	blx	r2
    if (*htblptr == NULL)
 8009a64:	f8d8 2000 	ldr.w	r2, [r8]
 8009a68:	b922      	cbnz	r2, 8009a74 <get_dht+0x1b2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	f7fc f920 	bl	8005cb0 <jpeg_alloc_huff_table>
 8009a70:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 8009a74:	2200      	movs	r2, #0
 8009a76:	46de      	mov	lr, fp
 8009a78:	f10d 0a1c 	add.w	sl, sp, #28
 8009a7c:	f88b 2000 	strb.w	r2, [fp]
 8009a80:	f8d8 2000 	ldr.w	r2, [r8]
 8009a84:	46f4      	mov	ip, lr
 8009a86:	3208      	adds	r2, #8
 8009a88:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8009a8c:	45d4      	cmp	ip, sl
 8009a8e:	f842 0c08 	str.w	r0, [r2, #-8]
 8009a92:	f842 1c04 	str.w	r1, [r2, #-4]
 8009a96:	46e6      	mov	lr, ip
 8009a98:	d1f4      	bne.n	8009a84 <get_dht+0x1c2>
 8009a9a:	f89c 1000 	ldrb.w	r1, [ip]
 8009a9e:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 8009aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009aa4:	f8d8 0000 	ldr.w	r0, [r8]
 8009aa8:	a908      	add	r1, sp, #32
 8009aaa:	3011      	adds	r0, #17
 8009aac:	f003 fec0 	bl	800d830 <memcpy>
 8009ab0:	e71e      	b.n	80098f0 <get_dht+0x2e>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 8009ab2:	b946      	cbnz	r6, 8009ac6 <get_dht+0x204>
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	4790      	blx	r2
 8009aba:	2800      	cmp	r0, #0
 8009abc:	f43f af2b 	beq.w	8009916 <get_dht+0x54>
 8009ac0:	a908      	add	r1, sp, #32
 8009ac2:	e9d7 4600 	ldrd	r4, r6, [r7]
 8009ac6:	f814 2b01 	ldrb.w	r2, [r4], #1
 8009aca:	3e01      	subs	r6, #1
 8009acc:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 8009ad0:	f109 0901 	add.w	r9, r9, #1
 8009ad4:	e7ab      	b.n	8009a2e <get_dht+0x16c>
	...

08009ad8 <read_markers>:
{
 8009ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	4604      	mov	r4, r0
 8009ade:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 8009ae0:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 8009ae4:	bb2b      	cbnz	r3, 8009b32 <read_markers+0x5a>
      if (! cinfo->marker->saw_SOI) {
 8009ae6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d17c      	bne.n	8009bea <read_markers+0x112>
  INPUT_VARS(cinfo);
 8009af0:	69a7      	ldr	r7, [r4, #24]
 8009af2:	687b      	ldr	r3, [r7, #4]
  INPUT_BYTE(cinfo, c, return FALSE);
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d06a      	beq.n	8009bce <read_markers+0xf6>
  INPUT_VARS(cinfo);
 8009af8:	683d      	ldr	r5, [r7, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 8009afa:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 8009afc:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 8009b00:	d06c      	beq.n	8009bdc <read_markers+0x104>
  INPUT_BYTE(cinfo, c, return FALSE);
 8009b02:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 8009b04:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 8009b08:	f103 36ff 	add.w	r6, r3, #4294967295
 8009b0c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 8009b10:	d102      	bne.n	8009b18 <read_markers+0x40>
 8009b12:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 8009b16:	d008      	beq.n	8009b2a <read_markers+0x52>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	2237      	movs	r2, #55	; 0x37
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f8c3 901c 	str.w	r9, [r3, #28]
 8009b22:	e9c3 2805 	strd	r2, r8, [r3, #20]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4798      	blx	r3
  cinfo->unread_marker = c2;
 8009b2a:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 8009b2e:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 8009b32:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	f000 83c3 	beq.w	800a2c2 <read_markers+0x7ea>
 8009b3c:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 8009b40:	2a3e      	cmp	r2, #62	; 0x3e
 8009b42:	f200 83cb 	bhi.w	800a2dc <read_markers+0x804>
 8009b46:	2a3e      	cmp	r2, #62	; 0x3e
 8009b48:	f200 83c8 	bhi.w	800a2dc <read_markers+0x804>
 8009b4c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009b50:	009b0092 	.word	0x009b0092
 8009b54:	00a7009e 	.word	0x00a7009e
 8009b58:	00a70239 	.word	0x00a70239
 8009b5c:	00a700a7 	.word	0x00a700a7
 8009b60:	00a200a7 	.word	0x00a200a7
 8009b64:	00a700a4 	.word	0x00a700a4
 8009b68:	00a701bf 	.word	0x00a701bf
 8009b6c:	00a700a7 	.word	0x00a700a7
 8009b70:	03b903b9 	.word	0x03b903b9
 8009b74:	03b903b9 	.word	0x03b903b9
 8009b78:	03b903b9 	.word	0x03b903b9
 8009b7c:	03b903b9 	.word	0x03b903b9
 8009b80:	01b30054 	.word	0x01b30054
 8009b84:	023d00af 	.word	0x023d00af
 8009b88:	035b03c2 	.word	0x035b03c2
 8009b8c:	03c603c6 	.word	0x03c603c6
 8009b90:	03ad03ad 	.word	0x03ad03ad
 8009b94:	03ad03ad 	.word	0x03ad03ad
 8009b98:	03ad03ad 	.word	0x03ad03ad
 8009b9c:	03ad03ad 	.word	0x03ad03ad
 8009ba0:	03ad03ad 	.word	0x03ad03ad
 8009ba4:	03ad03ad 	.word	0x03ad03ad
 8009ba8:	03ad03ad 	.word	0x03ad03ad
 8009bac:	03ad03ad 	.word	0x03ad03ad
 8009bb0:	03c603c6 	.word	0x03c603c6
 8009bb4:	03c603c6 	.word	0x03c603c6
 8009bb8:	03c603c6 	.word	0x03c603c6
 8009bbc:	03c603c6 	.word	0x03c603c6
 8009bc0:	03c603c6 	.word	0x03c603c6
 8009bc4:	03c603c6 	.word	0x03c603c6
 8009bc8:	03c603c6 	.word	0x03c603c6
 8009bcc:	03b5      	.short	0x03b5
  INPUT_BYTE(cinfo, c, return FALSE);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	4798      	blx	r3
 8009bd4:	b170      	cbz	r0, 8009bf4 <read_markers+0x11c>
 8009bd6:	e9d7 5300 	ldrd	r5, r3, [r7]
 8009bda:	e78e      	b.n	8009afa <read_markers+0x22>
  INPUT_BYTE(cinfo, c2, return FALSE);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4620      	mov	r0, r4
 8009be0:	4798      	blx	r3
 8009be2:	b138      	cbz	r0, 8009bf4 <read_markers+0x11c>
 8009be4:	e9d7 5300 	ldrd	r5, r3, [r7]
 8009be8:	e78c      	b.n	8009b04 <read_markers+0x2c>
	if (! next_marker(cinfo))
 8009bea:	4620      	mov	r0, r4
 8009bec:	f7ff fde5 	bl	80097ba <next_marker>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d19e      	bne.n	8009b32 <read_markers+0x5a>
	  return JPEG_SUSPENDED;
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	e0e9      	b.n	8009dcc <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	2268      	movs	r2, #104	; 0x68
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	4620      	mov	r0, r4
 8009c00:	615a      	str	r2, [r3, #20]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 8009c06:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	b12b      	cbz	r3, 8009c1a <read_markers+0x142>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	223f      	movs	r2, #63	; 0x3f
 8009c12:	4620      	mov	r0, r4
 8009c14:	615a      	str	r2, [r3, #20]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 8009c1a:	2210      	movs	r2, #16
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8009c22:	f003 fe13 	bl	800d84c <memset>
    cinfo->arith_dc_U[i] = 1;
 8009c26:	2210      	movs	r2, #16
 8009c28:	2101      	movs	r1, #1
 8009c2a:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 8009c2e:	f003 fe0d 	bl	800d84c <memset>
    cinfo->arith_ac_K[i] = 5;
 8009c32:	2210      	movs	r2, #16
 8009c34:	2105      	movs	r1, #5
 8009c36:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8009c3a:	f003 fe07 	bl	800d84c <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 8009c3e:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 8009c42:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 8009c44:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 8009c48:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 8009c4c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 8009c50:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 8009c54:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 8009c58:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 8009c5c:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 8009c60:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 8009c64:	2201      	movs	r2, #1
 8009c66:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8009c6a:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 8009c72:	e735      	b.n	8009ae0 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 8009c74:	2300      	movs	r3, #0
 8009c76:	2101      	movs	r1, #1
 8009c78:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f7ff fae0 	bl	8009240 <get_sof>
      if (! skip_variable(cinfo))
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d1f3      	bne.n	8009c6c <read_markers+0x194>
 8009c84:	e7b6      	b.n	8009bf4 <read_markers+0x11c>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 8009c86:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 8009c88:	2200      	movs	r2, #0
 8009c8a:	e001      	b.n	8009c90 <read_markers+0x1b8>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 8009c90:	2100      	movs	r1, #0
 8009c92:	e7f2      	b.n	8009c7a <read_markers+0x1a2>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 8009c94:	2301      	movs	r3, #1
 8009c96:	e7f7      	b.n	8009c88 <read_markers+0x1b0>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 8009c98:	2301      	movs	r3, #1
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	e7f8      	b.n	8009c90 <read_markers+0x1b8>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 8009c9e:	6822      	ldr	r2, [r4, #0]
 8009ca0:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8009ca8:	6813      	ldr	r3, [r2, #0]
 8009caa:	4798      	blx	r3
      break;
 8009cac:	e7de      	b.n	8009c6c <read_markers+0x194>
  if (! cinfo->marker->saw_SOF)
 8009cae:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 8009cb2:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 8009cb4:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 8009cb6:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 8009cba:	b92b      	cbnz	r3, 8009cc8 <read_markers+0x1f0>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	2240      	movs	r2, #64	; 0x40
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	615a      	str	r2, [r3, #20]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009cc8:	b936      	cbnz	r6, 8009cd8 <read_markers+0x200>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4620      	mov	r0, r4
 8009cce:	4798      	blx	r3
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d08f      	beq.n	8009bf4 <read_markers+0x11c>
 8009cd4:	e9d7 5600 	ldrd	r5, r6, [r7]
 8009cd8:	f895 8000 	ldrb.w	r8, [r5]
 8009cdc:	3e01      	subs	r6, #1
 8009cde:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8009ce2:	d076      	beq.n	8009dd2 <read_markers+0x2fa>
 8009ce4:	3501      	adds	r5, #1
 8009ce6:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 8009ce8:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009cea:	4498      	add	r8, r3
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 8009cec:	d07a      	beq.n	8009de4 <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009cee:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 8009cf0:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 8009cf4:	2269      	movs	r2, #105	; 0x69
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	2101      	movs	r1, #1
 8009cfa:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 8009cfc:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 8009cfe:	e9c3 2905 	strd	r2, r9, [r3, #20]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 8009d06:	f109 0303 	add.w	r3, r9, #3
 8009d0a:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 8009d0e:	d108      	bne.n	8009d22 <read_markers+0x24a>
 8009d10:	f1b9 0f04 	cmp.w	r9, #4
 8009d14:	dc05      	bgt.n	8009d22 <read_markers+0x24a>
 8009d16:	f1b9 0f00 	cmp.w	r9, #0
 8009d1a:	d108      	bne.n	8009d2e <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 8009d1c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009d20:	b92b      	cbnz	r3, 8009d2e <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	220c      	movs	r2, #12
 8009d26:	4620      	mov	r0, r4
 8009d28:	615a      	str	r2, [r3, #20]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 8009d2e:	f504 73aa 	add.w	r3, r4, #340	; 0x154
  for (i = 0; i < n; i++) {
 8009d32:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 8009d36:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 8009d3a:	9301      	str	r3, [sp, #4]
 8009d3c:	45d1      	cmp	r9, sl
 8009d3e:	dc5a      	bgt.n	8009df6 <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 8009d40:	b93e      	cbnz	r6, 8009d52 <read_markers+0x27a>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	4620      	mov	r0, r4
 8009d46:	4798      	blx	r3
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	f43f af53 	beq.w	8009bf4 <read_markers+0x11c>
 8009d4e:	e9d7 5600 	ldrd	r5, r6, [r7]
 8009d52:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 8009d54:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 8009d56:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 8009d5a:	f000 809a 	beq.w	8009e92 <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 8009d5e:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 8009d60:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 8009d62:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 8009d64:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 8009d68:	f000 809c 	beq.w	8009ea4 <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 8009d6c:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 8009d6e:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 8009d72:	2101      	movs	r1, #1
 8009d74:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 8009d76:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 8009d78:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 8009d7a:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 8009d7e:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 8009d82:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 8009d86:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	619a      	str	r2, [r3, #24]
 8009d8e:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 8009d92:	61da      	str	r2, [r3, #28]
 8009d94:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 8009d98:	621a      	str	r2, [r3, #32]
 8009d9a:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 8009d9e:	625a      	str	r2, [r3, #36]	; 0x24
 8009da0:	226b      	movs	r2, #107	; 0x6b
 8009da2:	615a      	str	r2, [r3, #20]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 8009da8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8009dac:	2200      	movs	r2, #0
 8009dae:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 8009db0:	f1b9 0f00 	cmp.w	r9, #0
 8009db4:	d004      	beq.n	8009dc0 <read_markers+0x2e8>
 8009db6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009dba:	3301      	adds	r3, #1
 8009dbc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 8009dc0:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 8009dc2:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 8009dc4:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 8009dc8:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 8009dcc:	b005      	add	sp, #20
 8009dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4798      	blx	r3
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	f43f af0b 	beq.w	8009bf4 <read_markers+0x11c>
 8009dde:	e9d7 5600 	ldrd	r5, r6, [r7]
 8009de2:	e780      	b.n	8009ce6 <read_markers+0x20e>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	4620      	mov	r0, r4
 8009de8:	4798      	blx	r3
 8009dea:	2800      	cmp	r0, #0
 8009dec:	f43f af02 	beq.w	8009bf4 <read_markers+0x11c>
 8009df0:	e9d7 5600 	ldrd	r5, r6, [r7]
 8009df4:	e77c      	b.n	8009cf0 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 8009df6:	b93e      	cbnz	r6, 8009e08 <read_markers+0x330>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	4798      	blx	r3
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f43f aef8 	beq.w	8009bf4 <read_markers+0x11c>
 8009e04:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 8009e08:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 8009e0a:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 8009e0e:	d02f      	beq.n	8009e70 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 8009e10:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 8009e12:	3e01      	subs	r6, #1
 8009e14:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009e18:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009e20:	4290      	cmp	r0, r2
 8009e22:	db2e      	blt.n	8009e82 <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 8009e24:	6821      	ldr	r1, [r4, #0]
 8009e26:	4620      	mov	r0, r4
 8009e28:	9302      	str	r3, [sp, #8]
 8009e2a:	2304      	movs	r3, #4
 8009e2c:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 8009e30:	6809      	ldr	r1, [r1, #0]
 8009e32:	4788      	blx	r1
 8009e34:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 8009e36:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 8009e38:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 8009e3a:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 8009e3e:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 8009e40:	f842 8b04 	str.w	r8, [r2], #4
  for (i = 0; i < n; i++) {
 8009e44:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 8009e48:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 8009e4c:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 8009e4e:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 8009e52:	f8c1 b018 	str.w	fp, [r1, #24]
 8009e56:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 8009e5a:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 8009e5c:	61cb      	str	r3, [r1, #28]
 8009e5e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009e62:	620b      	str	r3, [r1, #32]
 8009e64:	236a      	movs	r3, #106	; 0x6a
 8009e66:	614b      	str	r3, [r1, #20]
 8009e68:	684b      	ldr	r3, [r1, #4]
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 8009e6e:	e765      	b.n	8009d3c <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4620      	mov	r0, r4
 8009e74:	4798      	blx	r3
 8009e76:	2800      	cmp	r0, #0
 8009e78:	f43f aebc 	beq.w	8009bf4 <read_markers+0x11c>
 8009e7c:	e9d7 5600 	ldrd	r5, r6, [r7]
 8009e80:	e7c7      	b.n	8009e12 <read_markers+0x33a>
      if (cc == compptr->component_id)
 8009e82:	f8d8 1000 	ldr.w	r1, [r8]
 8009e86:	458b      	cmp	fp, r1
 8009e88:	d0d5      	beq.n	8009e36 <read_markers+0x35e>
	 ci++, compptr++) {
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	f108 0858 	add.w	r8, r8, #88	; 0x58
 8009e90:	e7c6      	b.n	8009e20 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4620      	mov	r0, r4
 8009e96:	4798      	blx	r3
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	f43f aeab 	beq.w	8009bf4 <read_markers+0x11c>
 8009e9e:	e9d7 5600 	ldrd	r5, r6, [r7]
 8009ea2:	e75d      	b.n	8009d60 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	4798      	blx	r3
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	f43f aea2 	beq.w	8009bf4 <read_markers+0x11c>
 8009eb0:	e9d7 5600 	ldrd	r5, r6, [r7]
 8009eb4:	e75b      	b.n	8009d6e <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	2257      	movs	r2, #87	; 0x57
 8009eba:	4620      	mov	r0, r4
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	615a      	str	r2, [r3, #20]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 8009ec4:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 8009ec6:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 8009ec8:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 8009ecc:	e77e      	b.n	8009dcc <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 8009ece:	69a7      	ldr	r7, [r4, #24]
 8009ed0:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009ed2:	b1e6      	cbz	r6, 8009f0e <read_markers+0x436>
  INPUT_VARS(cinfo);
 8009ed4:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009ed6:	f895 9000 	ldrb.w	r9, [r5]
 8009eda:	3e01      	subs	r6, #1
 8009edc:	ea4f 2909 	mov.w	r9, r9, lsl #8
 8009ee0:	d01e      	beq.n	8009f20 <read_markers+0x448>
 8009ee2:	3501      	adds	r5, #1
 8009ee4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ee8:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 8009eea:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009eee:	4499      	add	r9, r3
  length -= 2;
 8009ef0:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 8009ef4:	f1b9 0f00 	cmp.w	r9, #0
 8009ef8:	dc1b      	bgt.n	8009f32 <read_markers+0x45a>
  if (length != 0)
 8009efa:	d005      	beq.n	8009f08 <read_markers+0x430>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	220c      	movs	r2, #12
 8009f00:	4620      	mov	r0, r4
 8009f02:	615a      	str	r2, [r3, #20]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 8009f08:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 8009f0a:	607e      	str	r6, [r7, #4]
  return TRUE;
 8009f0c:	e6ae      	b.n	8009c6c <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4620      	mov	r0, r4
 8009f12:	4798      	blx	r3
 8009f14:	2800      	cmp	r0, #0
 8009f16:	f43f ae6d 	beq.w	8009bf4 <read_markers+0x11c>
 8009f1a:	e9d7 5600 	ldrd	r5, r6, [r7]
 8009f1e:	e7da      	b.n	8009ed6 <read_markers+0x3fe>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4620      	mov	r0, r4
 8009f24:	4798      	blx	r3
 8009f26:	2800      	cmp	r0, #0
 8009f28:	f43f ae64 	beq.w	8009bf4 <read_markers+0x11c>
 8009f2c:	e9d7 5600 	ldrd	r5, r6, [r7]
 8009f30:	e7d8      	b.n	8009ee4 <read_markers+0x40c>
    INPUT_BYTE(cinfo, index, return FALSE);
 8009f32:	b93e      	cbnz	r6, 8009f44 <read_markers+0x46c>
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4620      	mov	r0, r4
 8009f38:	4798      	blx	r3
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	f43f ae5a 	beq.w	8009bf4 <read_markers+0x11c>
 8009f40:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 8009f44:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 8009f46:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 8009f4a:	d01f      	beq.n	8009f8c <read_markers+0x4b4>
    INPUT_BYTE(cinfo, index, return FALSE);
 8009f4c:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 8009f4e:	6822      	ldr	r2, [r4, #0]
 8009f50:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 8009f52:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 8009f56:	2101      	movs	r1, #1
 8009f58:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 8009f5a:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 8009f5c:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 8009f60:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 8009f64:	e9c2 3805 	strd	r3, r8, [r2, #20]
 8009f68:	6852      	ldr	r2, [r2, #4]
 8009f6a:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 8009f6c:	f1b8 0f1f 	cmp.w	r8, #31
 8009f70:	d905      	bls.n	8009f7e <read_markers+0x4a6>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 8009f72:	6822      	ldr	r2, [r4, #0]
 8009f74:	4620      	mov	r0, r4
 8009f76:	e9c2 b805 	strd	fp, r8, [r2, #20]
 8009f7a:	6812      	ldr	r2, [r2, #0]
 8009f7c:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 8009f7e:	f1b8 0f0f 	cmp.w	r8, #15
 8009f82:	44a0      	add	r8, r4
 8009f84:	dd0b      	ble.n	8009f9e <read_markers+0x4c6>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 8009f86:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 8009f8a:	e7b3      	b.n	8009ef4 <read_markers+0x41c>
    INPUT_BYTE(cinfo, val, return FALSE);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4620      	mov	r0, r4
 8009f90:	4798      	blx	r3
 8009f92:	2800      	cmp	r0, #0
 8009f94:	f43f ae2e 	beq.w	8009bf4 <read_markers+0x11c>
 8009f98:	e9d7 5600 	ldrd	r5, r6, [r7]
 8009f9c:	e7d7      	b.n	8009f4e <read_markers+0x476>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 8009f9e:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 8009fa2:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 8009fa6:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 8009fa8:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 8009fac:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 8009fb0:	d9a0      	bls.n	8009ef4 <read_markers+0x41c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 8009fb2:	6822      	ldr	r2, [r4, #0]
 8009fb4:	211e      	movs	r1, #30
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	6813      	ldr	r3, [r2, #0]
 8009fba:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 8009fbe:	4798      	blx	r3
 8009fc0:	e798      	b.n	8009ef4 <read_markers+0x41c>
      if (! get_dht(cinfo))
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f7ff fc7d 	bl	80098c2 <get_dht>
 8009fc8:	e65a      	b.n	8009c80 <read_markers+0x1a8>
  INPUT_VARS(cinfo);
 8009fca:	69a6      	ldr	r6, [r4, #24]
 8009fcc:	6873      	ldr	r3, [r6, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009fce:	b1db      	cbz	r3, 800a008 <read_markers+0x530>
  INPUT_VARS(cinfo);
 8009fd0:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 8009fd2:	f895 8000 	ldrb.w	r8, [r5]
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8009fdc:	d01d      	beq.n	800a01a <read_markers+0x542>
 8009fde:	3501      	adds	r5, #1
 8009fe0:	f815 8b01 	ldrb.w	r8, [r5], #1
 8009fe4:	f103 3aff 	add.w	sl, r3, #4294967295
 8009fe8:	44b8      	add	r8, r7
  length -= 2;
 8009fea:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 8009fee:	f1b8 0f00 	cmp.w	r8, #0
 8009ff2:	dc1b      	bgt.n	800a02c <read_markers+0x554>
  if (length != 0)
 8009ff4:	d005      	beq.n	800a002 <read_markers+0x52a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 8009ff6:	6822      	ldr	r2, [r4, #0]
 8009ff8:	210c      	movs	r1, #12
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	6151      	str	r1, [r2, #20]
 8009ffe:	6812      	ldr	r2, [r2, #0]
 800a000:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800a002:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800a006:	e631      	b.n	8009c6c <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800a008:	68f3      	ldr	r3, [r6, #12]
 800a00a:	4620      	mov	r0, r4
 800a00c:	4798      	blx	r3
 800a00e:	2800      	cmp	r0, #0
 800a010:	f43f adf0 	beq.w	8009bf4 <read_markers+0x11c>
 800a014:	e9d6 5300 	ldrd	r5, r3, [r6]
 800a018:	e7db      	b.n	8009fd2 <read_markers+0x4fa>
 800a01a:	68f3      	ldr	r3, [r6, #12]
 800a01c:	4620      	mov	r0, r4
 800a01e:	4798      	blx	r3
 800a020:	2800      	cmp	r0, #0
 800a022:	f43f ade7 	beq.w	8009bf4 <read_markers+0x11c>
 800a026:	e9d6 5300 	ldrd	r5, r3, [r6]
 800a02a:	e7d9      	b.n	8009fe0 <read_markers+0x508>
    length--;
 800a02c:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800a030:	f1ba 0f00 	cmp.w	sl, #0
 800a034:	d107      	bne.n	800a046 <read_markers+0x56e>
 800a036:	68f3      	ldr	r3, [r6, #12]
 800a038:	4620      	mov	r0, r4
 800a03a:	4798      	blx	r3
 800a03c:	2800      	cmp	r0, #0
 800a03e:	f43f add9 	beq.w	8009bf4 <read_markers+0x11c>
 800a042:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800a046:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800a04a:	2153      	movs	r1, #83	; 0x53
 800a04c:	6822      	ldr	r2, [r4, #0]
 800a04e:	4620      	mov	r0, r4
    prec = n >> 4;
 800a050:	ea4f 1329 	mov.w	r3, r9, asr #4
 800a054:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800a058:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800a05c:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800a05e:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800a060:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800a064:	6852      	ldr	r2, [r2, #4]
 800a066:	2101      	movs	r1, #1
 800a068:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800a06a:	f019 0f0c 	tst.w	r9, #12
 800a06e:	d006      	beq.n	800a07e <read_markers+0x5a6>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800a070:	6822      	ldr	r2, [r4, #0]
 800a072:	2120      	movs	r1, #32
 800a074:	4620      	mov	r0, r4
 800a076:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800a07a:	6812      	ldr	r2, [r2, #0]
 800a07c:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800a07e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a082:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a086:	b922      	cbnz	r2, 800a092 <read_markers+0x5ba>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800a088:	4620      	mov	r0, r4
 800a08a:	f7fb fe07 	bl	8005c9c <jpeg_alloc_quant_table>
 800a08e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800a092:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800a094:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d057      	beq.n	800a14c <read_markers+0x674>
      if (length < DCTSIZE2 * 2) {
 800a09c:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800a0a0:	dc6c      	bgt.n	800a17c <read_markers+0x6a4>
 800a0a2:	f1ab 0202 	sub.w	r2, fp, #2
 800a0a6:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800a0b0:	4291      	cmp	r1, r2
 800a0b2:	d1fb      	bne.n	800a0ac <read_markers+0x5d4>
	count = length >> 1;
 800a0b4:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800a0b8:	f1b9 0f19 	cmp.w	r9, #25
 800a0bc:	d062      	beq.n	800a184 <read_markers+0x6ac>
 800a0be:	dc53      	bgt.n	800a168 <read_markers+0x690>
 800a0c0:	f1b9 0f09 	cmp.w	r9, #9
 800a0c4:	d060      	beq.n	800a188 <read_markers+0x6b0>
 800a0c6:	f1b9 0f10 	cmp.w	r9, #16
 800a0ca:	d05f      	beq.n	800a18c <read_markers+0x6b4>
    default:    natural_order = jpeg_natural_order;  break;
 800a0cc:	4f85      	ldr	r7, [pc, #532]	; (800a2e4 <read_markers+0x80c>)
 800a0ce:	4a86      	ldr	r2, [pc, #536]	; (800a2e8 <read_markers+0x810>)
 800a0d0:	f1b9 0f04 	cmp.w	r9, #4
 800a0d4:	bf18      	it	ne
 800a0d6:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800a0d8:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800a0dc:	9302      	str	r3, [sp, #8]
 800a0de:	9b02      	ldr	r3, [sp, #8]
 800a0e0:	42bb      	cmp	r3, r7
 800a0e2:	d157      	bne.n	800a194 <read_markers+0x6bc>
    if (cinfo->err->trace_level >= 2) {
 800a0e4:	6822      	ldr	r2, [r4, #0]
 800a0e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a0e8:	2a01      	cmp	r2, #1
 800a0ea:	dd26      	ble.n	800a13a <read_markers+0x662>
 800a0ec:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800a0f0:	275f      	movs	r7, #95	; 0x5f
 800a0f2:	f8bb 1000 	ldrh.w	r1, [fp]
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800a0fa:	f10b 0b10 	add.w	fp, fp, #16
 800a0fe:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800a100:	6191      	str	r1, [r2, #24]
 800a102:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800a106:	61d1      	str	r1, [r2, #28]
 800a108:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800a10c:	6211      	str	r1, [r2, #32]
 800a10e:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800a112:	6251      	str	r1, [r2, #36]	; 0x24
 800a114:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800a118:	6291      	str	r1, [r2, #40]	; 0x28
 800a11a:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800a11e:	62d1      	str	r1, [r2, #44]	; 0x2c
 800a120:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800a124:	6311      	str	r1, [r2, #48]	; 0x30
 800a126:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800a12a:	6157      	str	r7, [r2, #20]
 800a12c:	6351      	str	r1, [r2, #52]	; 0x34
 800a12e:	2102      	movs	r1, #2
 800a130:	6852      	ldr	r2, [r2, #4]
 800a132:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800a134:	9b02      	ldr	r3, [sp, #8]
 800a136:	459b      	cmp	fp, r3
 800a138:	d1db      	bne.n	800a0f2 <read_markers+0x61a>
    if (prec) length -= count;
 800a13a:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800a13c:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800a140:	2b00      	cmp	r3, #0
 800a142:	f43f af54 	beq.w	8009fee <read_markers+0x516>
 800a146:	eba8 0809 	sub.w	r8, r8, r9
 800a14a:	e750      	b.n	8009fee <read_markers+0x516>
      if (length < DCTSIZE2) {
 800a14c:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800a150:	dc14      	bgt.n	800a17c <read_markers+0x6a4>
 800a152:	f1ab 0202 	sub.w	r2, fp, #2
 800a156:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800a15a:	2001      	movs	r0, #1
 800a15c:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800a160:	4291      	cmp	r1, r2
 800a162:	d1fb      	bne.n	800a15c <read_markers+0x684>
 800a164:	46c1      	mov	r9, r8
 800a166:	e7a7      	b.n	800a0b8 <read_markers+0x5e0>
    switch (count) {
 800a168:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800a16c:	d010      	beq.n	800a190 <read_markers+0x6b8>
    default:    natural_order = jpeg_natural_order;  break;
 800a16e:	4f5e      	ldr	r7, [pc, #376]	; (800a2e8 <read_markers+0x810>)
 800a170:	4b5e      	ldr	r3, [pc, #376]	; (800a2ec <read_markers+0x814>)
 800a172:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800a176:	bf08      	it	eq
 800a178:	461f      	moveq	r7, r3
 800a17a:	e7ad      	b.n	800a0d8 <read_markers+0x600>
	count = DCTSIZE2;
 800a17c:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800a180:	4f59      	ldr	r7, [pc, #356]	; (800a2e8 <read_markers+0x810>)
 800a182:	e7a9      	b.n	800a0d8 <read_markers+0x600>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800a184:	4f5a      	ldr	r7, [pc, #360]	; (800a2f0 <read_markers+0x818>)
 800a186:	e7a7      	b.n	800a0d8 <read_markers+0x600>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800a188:	4f5a      	ldr	r7, [pc, #360]	; (800a2f4 <read_markers+0x81c>)
 800a18a:	e7a5      	b.n	800a0d8 <read_markers+0x600>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800a18c:	4f5a      	ldr	r7, [pc, #360]	; (800a2f8 <read_markers+0x820>)
 800a18e:	e7a3      	b.n	800a0d8 <read_markers+0x600>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800a190:	4f5a      	ldr	r7, [pc, #360]	; (800a2fc <read_markers+0x824>)
 800a192:	e7a1      	b.n	800a0d8 <read_markers+0x600>
      if (prec)
 800a194:	9b01      	ldr	r3, [sp, #4]
 800a196:	b333      	cbz	r3, 800a1e6 <read_markers+0x70e>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800a198:	f1ba 0f00 	cmp.w	sl, #0
 800a19c:	d107      	bne.n	800a1ae <read_markers+0x6d6>
 800a19e:	68f3      	ldr	r3, [r6, #12]
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	4798      	blx	r3
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	f43f ad25 	beq.w	8009bf4 <read_markers+0x11c>
 800a1aa:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800a1ae:	782a      	ldrb	r2, [r5, #0]
 800a1b0:	f1ba 0301 	subs.w	r3, sl, #1
 800a1b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800a1b8:	d00a      	beq.n	800a1d0 <read_markers+0x6f8>
 800a1ba:	3501      	adds	r5, #1
 800a1bc:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a1c0:	f103 3aff 	add.w	sl, r3, #4294967295
 800a1c4:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800a1c6:	f857 1b04 	ldr.w	r1, [r7], #4
 800a1ca:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800a1ce:	e786      	b.n	800a0de <read_markers+0x606>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800a1d0:	68f3      	ldr	r3, [r6, #12]
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	9203      	str	r2, [sp, #12]
 800a1d6:	4798      	blx	r3
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	f43f ad0b 	beq.w	8009bf4 <read_markers+0x11c>
 800a1de:	9a03      	ldr	r2, [sp, #12]
 800a1e0:	e9d6 5300 	ldrd	r5, r3, [r6]
 800a1e4:	e7ea      	b.n	800a1bc <read_markers+0x6e4>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800a1e6:	f1ba 0f00 	cmp.w	sl, #0
 800a1ea:	d107      	bne.n	800a1fc <read_markers+0x724>
 800a1ec:	68f3      	ldr	r3, [r6, #12]
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	4798      	blx	r3
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	f43f acfe 	beq.w	8009bf4 <read_markers+0x11c>
 800a1f8:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800a1fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a200:	f815 2b01 	ldrb.w	r2, [r5], #1
 800a204:	e7df      	b.n	800a1c6 <read_markers+0x6ee>
  INPUT_VARS(cinfo);
 800a206:	69a7      	ldr	r7, [r4, #24]
 800a208:	687b      	ldr	r3, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800a20a:	b353      	cbz	r3, 800a262 <read_markers+0x78a>
  INPUT_VARS(cinfo);
 800a20c:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800a20e:	782a      	ldrb	r2, [r5, #0]
 800a210:	3b01      	subs	r3, #1
 800a212:	ea4f 2802 	mov.w	r8, r2, lsl #8
 800a216:	d02d      	beq.n	800a274 <read_markers+0x79c>
 800a218:	3501      	adds	r5, #1
 800a21a:	782a      	ldrb	r2, [r5, #0]
 800a21c:	1e5e      	subs	r6, r3, #1
 800a21e:	4442      	add	r2, r8
  if (length != 4)
 800a220:	2a04      	cmp	r2, #4
 800a222:	d005      	beq.n	800a230 <read_markers+0x758>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	220c      	movs	r2, #12
 800a228:	4620      	mov	r0, r4
 800a22a:	615a      	str	r2, [r3, #20]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800a230:	b34e      	cbz	r6, 800a286 <read_markers+0x7ae>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800a232:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800a234:	f895 8000 	ldrb.w	r8, [r5]
 800a238:	3e01      	subs	r6, #1
 800a23a:	ea4f 2908 	mov.w	r9, r8, lsl #8
 800a23e:	d02b      	beq.n	800a298 <read_markers+0x7c0>
 800a240:	3501      	adds	r5, #1
 800a242:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800a246:	2254      	movs	r2, #84	; 0x54
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800a24c:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800a24e:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800a250:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800a252:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800a25a:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800a25e:	603d      	str	r5, [r7, #0]
 800a260:	e653      	b.n	8009f0a <read_markers+0x432>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	4620      	mov	r0, r4
 800a266:	4798      	blx	r3
 800a268:	2800      	cmp	r0, #0
 800a26a:	f43f acc3 	beq.w	8009bf4 <read_markers+0x11c>
 800a26e:	e9d7 5300 	ldrd	r5, r3, [r7]
 800a272:	e7cc      	b.n	800a20e <read_markers+0x736>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	4620      	mov	r0, r4
 800a278:	4798      	blx	r3
 800a27a:	2800      	cmp	r0, #0
 800a27c:	f43f acba 	beq.w	8009bf4 <read_markers+0x11c>
 800a280:	e9d7 5300 	ldrd	r5, r3, [r7]
 800a284:	e7c9      	b.n	800a21a <read_markers+0x742>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	4620      	mov	r0, r4
 800a28a:	4798      	blx	r3
 800a28c:	2800      	cmp	r0, #0
 800a28e:	f43f acb1 	beq.w	8009bf4 <read_markers+0x11c>
 800a292:	e9d7 5600 	ldrd	r5, r6, [r7]
 800a296:	e7cd      	b.n	800a234 <read_markers+0x75c>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4620      	mov	r0, r4
 800a29c:	4798      	blx	r3
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	f43f aca8 	beq.w	8009bf4 <read_markers+0x11c>
 800a2a4:	e9d7 5600 	ldrd	r5, r6, [r7]
 800a2a8:	e7cb      	b.n	800a242 <read_markers+0x76a>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800a2aa:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800a2ae:	3bd8      	subs	r3, #216	; 0xd8
 800a2b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4798      	blx	r3
 800a2b8:	e4e2      	b.n	8009c80 <read_markers+0x1a8>
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800a2ba:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800a2be:	69db      	ldr	r3, [r3, #28]
 800a2c0:	e7f8      	b.n	800a2b4 <read_markers+0x7dc>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800a2c2:	6822      	ldr	r2, [r4, #0]
 800a2c4:	215e      	movs	r1, #94	; 0x5e
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800a2cc:	6853      	ldr	r3, [r2, #4]
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	4798      	blx	r3
      break;
 800a2d2:	e4cb      	b.n	8009c6c <read_markers+0x194>
      if (! skip_variable(cinfo))
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f7ff fa35 	bl	8009744 <skip_variable>
 800a2da:	e4d1      	b.n	8009c80 <read_markers+0x1a8>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800a2dc:	6822      	ldr	r2, [r4, #0]
 800a2de:	2146      	movs	r1, #70	; 0x46
 800a2e0:	e4df      	b.n	8009ca2 <read_markers+0x1ca>
 800a2e2:	bf00      	nop
 800a2e4:	08012be0 	.word	0x08012be0
 800a2e8:	08012f8c 	.word	0x08012f8c
 800a2ec:	08012e88 	.word	0x08012e88
 800a2f0:	08012d14 	.word	0x08012d14
 800a2f4:	08012c30 	.word	0x08012c30
 800a2f8:	08012c94 	.word	0x08012c94
 800a2fc:	08012db8 	.word	0x08012db8

0800a300 <jpeg_resync_to_restart>:
{
 800a300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a304:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800a306:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800a308:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800a30c:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800a30e:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800a312:	61d9      	str	r1, [r3, #28]
 800a314:	f04f 31ff 	mov.w	r1, #4294967295
{
 800a318:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800a31a:	f008 0807 	and.w	r8, r8, #7
 800a31e:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800a322:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800a32a:	2dbf      	cmp	r5, #191	; 0xbf
 800a32c:	dd2e      	ble.n	800a38c <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800a32e:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800a332:	2b07      	cmp	r3, #7
 800a334:	d828      	bhi.n	800a388 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800a336:	4545      	cmp	r5, r8
 800a338:	d026      	beq.n	800a388 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800a33a:	1cbb      	adds	r3, r7, #2
 800a33c:	f003 0307 	and.w	r3, r3, #7
 800a340:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800a342:	429d      	cmp	r5, r3
 800a344:	d020      	beq.n	800a388 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800a346:	1e7b      	subs	r3, r7, #1
 800a348:	f003 0307 	and.w	r3, r3, #7
 800a34c:	33d0      	adds	r3, #208	; 0xd0
 800a34e:	429d      	cmp	r5, r3
 800a350:	d01c      	beq.n	800a38c <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800a352:	1ebc      	subs	r4, r7, #2
 800a354:	f004 0407 	and.w	r4, r4, #7
 800a358:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800a35a:	42a5      	cmp	r5, r4
 800a35c:	bf14      	ite	ne
 800a35e:	2401      	movne	r4, #1
 800a360:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800a362:	6833      	ldr	r3, [r6, #0]
 800a364:	2263      	movs	r2, #99	; 0x63
 800a366:	2104      	movs	r1, #4
 800a368:	4630      	mov	r0, r6
 800a36a:	61dc      	str	r4, [r3, #28]
 800a36c:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	4798      	blx	r3
    switch (action) {
 800a374:	2c02      	cmp	r4, #2
 800a376:	d00b      	beq.n	800a390 <jpeg_resync_to_restart+0x90>
 800a378:	2c03      	cmp	r4, #3
 800a37a:	d002      	beq.n	800a382 <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800a382:	2001      	movs	r0, #1
}
 800a384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800a388:	2403      	movs	r4, #3
 800a38a:	e7ea      	b.n	800a362 <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800a38c:	2402      	movs	r4, #2
 800a38e:	e7e8      	b.n	800a362 <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800a390:	4630      	mov	r0, r6
 800a392:	f7ff fa12 	bl	80097ba <next_marker>
 800a396:	2800      	cmp	r0, #0
 800a398:	d0f4      	beq.n	800a384 <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800a39a:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800a39e:	e7c4      	b.n	800a32a <jpeg_resync_to_restart+0x2a>

0800a3a0 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800a3a0:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800a3a2:	6843      	ldr	r3, [r0, #4]
 800a3a4:	22ac      	movs	r2, #172	; 0xac
 800a3a6:	2100      	movs	r1, #0
{
 800a3a8:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800a3ae:	4b11      	ldr	r3, [pc, #68]	; (800a3f4 <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800a3b0:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800a3b4:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800a3b6:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800a3b8:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800a3bc:	4b0e      	ldr	r3, [pc, #56]	; (800a3f8 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800a3be:	4a0f      	ldr	r2, [pc, #60]	; (800a3fc <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800a3c0:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800a3c2:	4b0f      	ldr	r3, [pc, #60]	; (800a400 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800a3c4:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800a3c6:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800a3cc:	f100 0320 	add.w	r3, r0, #32
    marker->process_APPn[i] = skip_variable;
 800a3d0:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < 16; i++) {
 800a3d4:	4299      	cmp	r1, r3
 800a3d6:	d1fb      	bne.n	800a3d0 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800a3d8:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800a3dc:	2240      	movs	r2, #64	; 0x40
 800a3de:	2100      	movs	r1, #0
 800a3e0:	f003 fa34 	bl	800d84c <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800a3e4:	4b07      	ldr	r3, [pc, #28]	; (800a404 <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800a3e6:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800a3e8:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800a3ea:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800a3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800a3f0:	f7ff ba58 	b.w	80098a4 <reset_marker_reader>
 800a3f4:	080098a5 	.word	0x080098a5
 800a3f8:	08009ad9 	.word	0x08009ad9
 800a3fc:	08009745 	.word	0x08009745
 800a400:	08009847 	.word	0x08009847
 800a404:	0800949d 	.word	0x0800949d

0800a408 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800a408:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800a40a:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800a40e:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800a410:	68ab      	ldr	r3, [r5, #8]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d02a      	beq.n	800a46c <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800a416:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800a418:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800a41c:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800a422:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800a426:	2102      	movs	r1, #2
 800a428:	4620      	mov	r0, r4
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800a42e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800a432:	2102      	movs	r1, #2
 800a434:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800a436:	4620      	mov	r0, r4
 800a438:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800a43a:	68a2      	ldr	r2, [r4, #8]
 800a43c:	b1aa      	cbz	r2, 800a46a <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800a43e:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800a440:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800a442:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800a444:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800a446:	bf14      	ite	ne
 800a448:	2102      	movne	r1, #2
 800a44a:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800a44c:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800a44e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800a450:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800a452:	b151      	cbz	r1, 800a46a <prepare_for_output_pass+0x62>
 800a454:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800a458:	6949      	ldr	r1, [r1, #20]
 800a45a:	b931      	cbnz	r1, 800a46a <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800a45c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a45e:	2900      	cmp	r1, #0
 800a460:	bf14      	ite	ne
 800a462:	2102      	movne	r1, #2
 800a464:	2101      	moveq	r1, #1
 800a466:	440b      	add	r3, r1
 800a468:	6113      	str	r3, [r2, #16]
    }
  }
}
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800a46c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a46e:	b16b      	cbz	r3, 800a48c <prepare_for_output_pass+0x84>
 800a470:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800a474:	b953      	cbnz	r3, 800a48c <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800a476:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d037      	beq.n	800a4ec <prepare_for_output_pass+0xe4>
 800a47c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d034      	beq.n	800a4ec <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800a482:	69ab      	ldr	r3, [r5, #24]
 800a484:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800a488:	2301      	movs	r3, #1
 800a48a:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800a48c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800a490:	4620      	mov	r0, r4
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800a496:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800a49a:	4620      	mov	r0, r4
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800a4a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1c9      	bne.n	800a43a <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800a4a6:	692b      	ldr	r3, [r5, #16]
 800a4a8:	b923      	cbnz	r3, 800a4b4 <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800a4aa:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800a4b4:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800a4be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a4c0:	b12b      	cbz	r3, 800a4ce <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800a4c2:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	68a9      	ldr	r1, [r5, #8]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800a4ce:	68aa      	ldr	r2, [r5, #8]
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800a4d6:	2a00      	cmp	r2, #0
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	bf14      	ite	ne
 800a4dc:	2103      	movne	r1, #3
 800a4de:	2100      	moveq	r1, #0
 800a4e0:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800a4e2:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	e7a4      	b.n	800a436 <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800a4ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4ee:	b11b      	cbz	r3, 800a4f8 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800a4f0:	696b      	ldr	r3, [r5, #20]
 800a4f2:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800a4f6:	e7c9      	b.n	800a48c <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	222f      	movs	r2, #47	; 0x2f
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	615a      	str	r2, [r3, #20]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4798      	blx	r3
 800a504:	e7c2      	b.n	800a48c <prepare_for_output_pass+0x84>

0800a506 <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800a506:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800a508:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800a50a:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800a50e:	b11a      	cbz	r2, 800a518 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800a510:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	4798      	blx	r3
  master->pass_number++;
 800a518:	68e3      	ldr	r3, [r4, #12]
 800a51a:	3301      	adds	r3, #1
 800a51c:	60e3      	str	r3, [r4, #12]
}
 800a51e:	bd10      	pop	{r4, pc}

0800a520 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800a520:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800a522:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800a524:	2b00      	cmp	r3, #0
 800a526:	d143      	bne.n	800a5b0 <use_merged_upsample+0x90>
 800a528:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 800a52c:	2a00      	cmp	r2, #0
 800a52e:	d141      	bne.n	800a5b4 <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800a530:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800a534:	2b03      	cmp	r3, #3
 800a536:	d139      	bne.n	800a5ac <use_merged_upsample+0x8c>
 800a538:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d136      	bne.n	800a5ac <use_merged_upsample+0x8c>
 800a53e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800a542:	2b02      	cmp	r3, #2
 800a544:	d132      	bne.n	800a5ac <use_merged_upsample+0x8c>
      cinfo->out_color_space != JCS_RGB ||
 800a546:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800a548:	2b03      	cmp	r3, #3
 800a54a:	d12f      	bne.n	800a5ac <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800a54c:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800a550:	6899      	ldr	r1, [r3, #8]
 800a552:	2902      	cmp	r1, #2
 800a554:	d12a      	bne.n	800a5ac <use_merged_upsample+0x8c>
 800a556:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800a558:	2901      	cmp	r1, #1
 800a55a:	d127      	bne.n	800a5ac <use_merged_upsample+0x8c>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800a55c:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800a560:	2901      	cmp	r1, #1
 800a562:	d123      	bne.n	800a5ac <use_merged_upsample+0x8c>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800a564:	68d9      	ldr	r1, [r3, #12]
 800a566:	2902      	cmp	r1, #2
 800a568:	dc20      	bgt.n	800a5ac <use_merged_upsample+0x8c>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800a56a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800a56c:	2901      	cmp	r1, #1
 800a56e:	d11d      	bne.n	800a5ac <use_merged_upsample+0x8c>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800a570:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800a574:	2901      	cmp	r1, #1
 800a576:	d119      	bne.n	800a5ac <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800a578:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
 800a57c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a57e:	42a1      	cmp	r1, r4
 800a580:	d114      	bne.n	800a5ac <use_merged_upsample+0x8c>
 800a582:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800a584:	42a1      	cmp	r1, r4
 800a586:	d111      	bne.n	800a5ac <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800a588:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800a58c:	42a1      	cmp	r1, r4
 800a58e:	d10d      	bne.n	800a5ac <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800a590:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800a594:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a596:	4281      	cmp	r1, r0
 800a598:	d108      	bne.n	800a5ac <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800a59a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a59e:	4281      	cmp	r1, r0
 800a5a0:	d104      	bne.n	800a5ac <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800a5a2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800a5a6:	1a53      	subs	r3, r2, r1
 800a5a8:	425a      	negs	r2, r3
 800a5aa:	415a      	adcs	r2, r3
}
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	bd10      	pop	{r4, pc}
    return FALSE;
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	e7fb      	b.n	800a5ac <use_merged_upsample+0x8c>
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	e7f9      	b.n	800a5ac <use_merged_upsample+0x8c>

0800a5b8 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800a5b8:	6942      	ldr	r2, [r0, #20]
 800a5ba:	2aca      	cmp	r2, #202	; 0xca
{
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800a5c0:	d005      	beq.n	800a5ce <jpeg_calc_output_dimensions+0x16>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800a5c2:	6803      	ldr	r3, [r0, #0]
 800a5c4:	2115      	movs	r1, #21
 800a5c6:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f7fe fbda 	bl	8008d88 <jpeg_core_output_dimensions>
  switch (cinfo->out_color_space) {
 800a5d4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	d804      	bhi.n	800a5e6 <jpeg_calc_output_dimensions+0x2e>
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d807      	bhi.n	800a5f0 <jpeg_calc_output_dimensions+0x38>
 800a5e0:	d007      	beq.n	800a5f2 <jpeg_calc_output_dimensions+0x3a>
    cinfo->out_color_components = cinfo->num_components;
 800a5e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5e4:	e005      	b.n	800a5f2 <jpeg_calc_output_dimensions+0x3a>
  switch (cinfo->out_color_space) {
 800a5e6:	3b04      	subs	r3, #4
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d8fa      	bhi.n	800a5e2 <jpeg_calc_output_dimensions+0x2a>
    cinfo->out_color_components = 4;
 800a5ec:	2304      	movs	r3, #4
 800a5ee:	e000      	b.n	800a5f2 <jpeg_calc_output_dimensions+0x3a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800a5f0:	2303      	movs	r3, #3
    cinfo->out_color_components = cinfo->num_components;
 800a5f2:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800a5f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a5f6:	b953      	cbnz	r3, 800a60e <jpeg_calc_output_dimensions+0x56>
 800a5f8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  if (use_merged_upsample(cinfo))
 800a5fa:	4620      	mov	r0, r4
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800a5fc:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800a5fe:	f7ff ff8f 	bl	800a520 <use_merged_upsample>
 800a602:	b130      	cbz	r0, 800a612 <jpeg_calc_output_dimensions+0x5a>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800a604:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800a608:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800a60c:	bd10      	pop	{r4, pc}
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800a60e:	2301      	movs	r3, #1
 800a610:	e7f3      	b.n	800a5fa <jpeg_calc_output_dimensions+0x42>
    cinfo->rec_outbuf_height = 1;
 800a612:	2301      	movs	r3, #1
 800a614:	e7f8      	b.n	800a608 <jpeg_calc_output_dimensions+0x50>
	...

0800a618 <jinit_master_decompress>:
jinit_master_decompress (j_decompress_ptr cinfo)
{
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a618:	6843      	ldr	r3, [r0, #4]
 800a61a:	221c      	movs	r2, #28
 800a61c:	2101      	movs	r1, #1
 800a61e:	681b      	ldr	r3, [r3, #0]
{
 800a620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a624:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a626:	4798      	blx	r3
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800a628:	4b5e      	ldr	r3, [pc, #376]	; (800a7a4 <jinit_master_decompress+0x18c>)
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800a62a:	2600      	movs	r6, #0
  cinfo->master = (struct jpeg_decomp_master *) master;
 800a62c:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a630:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800a632:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800a634:	4b5c      	ldr	r3, [pc, #368]	; (800a7a8 <jinit_master_decompress+0x190>)
  master->pub.is_dummy_pass = FALSE;
 800a636:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800a638:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800a63a:	4620      	mov	r0, r4
 800a63c:	f7ff ffbc 	bl	800a5b8 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a640:	6863      	ldr	r3, [r4, #4]
 800a642:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800a646:	2101      	movs	r1, #1
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4620      	mov	r0, r4
 800a64c:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800a64e:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a652:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800a654:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800a656:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800a65a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a65e:	f003 f8f5 	bl	800d84c <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800a662:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 800a666:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800a668:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800a66c:	3101      	adds	r1, #1
 800a66e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a672:	d1f9      	bne.n	800a668 <jinit_master_decompress+0x50>
    table[i] = MAXJSAMPLE;
 800a674:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a678:	21ff      	movs	r1, #255	; 0xff
 800a67a:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 800a67e:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 800a680:	f003 f8e4 	bl	800d84c <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800a684:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a688:	2100      	movs	r1, #0
 800a68a:	f507 7060 	add.w	r0, r7, #896	; 0x380
 800a68e:	f003 f8dd 	bl	800d84c <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800a692:	2280      	movs	r2, #128	; 0x80
 800a694:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800a698:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 800a69c:	f003 f8c8 	bl	800d830 <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800a6a0:	4620      	mov	r0, r4
  master->pass_number = 0;
 800a6a2:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800a6a4:	f7ff ff3c 	bl	800a520 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800a6a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800a6aa:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800a6ac:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800a6b0:	b1b3      	cbz	r3, 800a6e0 <jinit_master_decompress+0xc8>
 800a6b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a6b4:	b1a2      	cbz	r2, 800a6e0 <jinit_master_decompress+0xc8>
    if (cinfo->raw_data_out)
 800a6b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d148      	bne.n	800a74e <jinit_master_decompress+0x136>
    if (cinfo->out_color_components != 3) {
 800a6bc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	f04f 0301 	mov.w	r3, #1
 800a6c4:	d04a      	beq.n	800a75c <jinit_master_decompress+0x144>
      cinfo->enable_1pass_quant = TRUE;
 800a6c6:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800a6c8:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800a6ca:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800a6ce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f002 f95e 	bl	800c994 <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800a6d8:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800a6dc:	616b      	str	r3, [r5, #20]
 800a6de:	e044      	b.n	800a76a <jinit_master_decompress+0x152>
    cinfo->enable_external_quant = FALSE;
 800a6e0:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800a6e4:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1e5      	bne.n	800a6b6 <jinit_master_decompress+0x9e>
  if (! cinfo->raw_data_out) {
 800a6ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a6ec:	b94b      	cbnz	r3, 800a702 <jinit_master_decompress+0xea>
    if (master->using_merged_upsample) {
 800a6ee:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800a6f0:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d04b      	beq.n	800a78e <jinit_master_decompress+0x176>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800a6f6:	f000 fa01 	bl	800aafc <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800a6fa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f000 fb7d 	bl	800adfc <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800a702:	4620      	mov	r0, r4
 800a704:	f7fc fed4 	bl	80074b0 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800a708:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800a70c:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d043      	beq.n	800a79a <jinit_master_decompress+0x182>
    jinit_arith_decoder(cinfo);
 800a712:	f7fc f9f5 	bl	8006b00 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800a716:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d13f      	bne.n	800a7a0 <jinit_master_decompress+0x188>
 800a720:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a722:	3900      	subs	r1, #0
 800a724:	bf18      	it	ne
 800a726:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800a728:	4620      	mov	r0, r4
 800a72a:	f7fc fb6d 	bl	8006e08 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800a72e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a730:	b911      	cbnz	r1, 800a738 <jinit_master_decompress+0x120>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800a732:	4620      	mov	r0, r4
 800a734:	f7fe fd04 	bl	8009140 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800a738:	6863      	ldr	r3, [r4, #4]
 800a73a:	4620      	mov	r0, r4
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800a740:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a744:	4620      	mov	r0, r4
 800a746:	689b      	ldr	r3, [r3, #8]

  master_selection(cinfo);
}
 800a748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800a74c:	4718      	bx	r3
      ERREXIT(cinfo, JERR_NOTIMPL);
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	2230      	movs	r2, #48	; 0x30
 800a752:	4620      	mov	r0, r4
 800a754:	615a      	str	r2, [r3, #20]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4798      	blx	r3
 800a75a:	e7af      	b.n	800a6bc <jinit_master_decompress+0xa4>
    } else if (cinfo->colormap != NULL) {
 800a75c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800a760:	b17a      	cbz	r2, 800a782 <jinit_master_decompress+0x16a>
      cinfo->enable_external_quant = TRUE;
 800a762:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800a764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1b3      	bne.n	800a6d2 <jinit_master_decompress+0xba>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800a76a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a76c:	b913      	cbnz	r3, 800a774 <jinit_master_decompress+0x15c>
 800a76e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a770:	2b00      	cmp	r3, #0
 800a772:	d0ba      	beq.n	800a6ea <jinit_master_decompress+0xd2>
      jinit_2pass_quantizer(cinfo);
 800a774:	4620      	mov	r0, r4
 800a776:	f002 ff9b 	bl	800d6b0 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800a77a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800a77e:	61ab      	str	r3, [r5, #24]
 800a780:	e7b3      	b.n	800a6ea <jinit_master_decompress+0xd2>
    } else if (cinfo->two_pass_quantize) {
 800a782:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a784:	b10a      	cbz	r2, 800a78a <jinit_master_decompress+0x172>
      cinfo->enable_2pass_quant = TRUE;
 800a786:	66e3      	str	r3, [r4, #108]	; 0x6c
 800a788:	e7ec      	b.n	800a764 <jinit_master_decompress+0x14c>
      cinfo->enable_1pass_quant = TRUE;
 800a78a:	6663      	str	r3, [r4, #100]	; 0x64
 800a78c:	e7a1      	b.n	800a6d2 <jinit_master_decompress+0xba>
      jinit_color_deconverter(cinfo);
 800a78e:	f7fc fd31 	bl	80071f4 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800a792:	4620      	mov	r0, r4
 800a794:	f000 fc52 	bl	800b03c <jinit_upsampler>
 800a798:	e7af      	b.n	800a6fa <jinit_master_decompress+0xe2>
    jinit_huff_decoder(cinfo);
 800a79a:	f7fe f841 	bl	8008820 <jinit_huff_decoder>
 800a79e:	e7ba      	b.n	800a716 <jinit_master_decompress+0xfe>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	e7c1      	b.n	800a728 <jinit_master_decompress+0x110>
 800a7a4:	0800a409 	.word	0x0800a409
 800a7a8:	0800a507 	.word	0x0800a507

0800a7ac <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800a7ac:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800a7b4:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800a7b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a7b8:	4770      	bx	lr

0800a7ba <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800a7ba:	b570      	push	{r4, r5, r6, lr}
 800a7bc:	9d05      	ldr	r5, [sp, #20]
 800a7be:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800a7c0:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800a7c4:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800a7c6:	68de      	ldr	r6, [r3, #12]
 800a7c8:	9b04      	ldr	r3, [sp, #16]
 800a7ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a7ce:	6822      	ldr	r2, [r4, #0]
 800a7d0:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800a7d2:	682b      	ldr	r3, [r5, #0]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	6023      	str	r3, [r4, #0]
}
 800a7de:	bd70      	pop	{r4, r5, r6, pc}

0800a7e0 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800a7e4:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800a7e8:	b087      	sub	sp, #28
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800a7ea:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800a7ee:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800a7f0:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800a7f4:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800a7f6:	9600      	str	r6, [sp, #0]
  int * Cbbtab = upsample->Cb_b_tab;
 800a7f8:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800a7fa:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800a7fe:	9601      	str	r6, [sp, #4]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800a800:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800a802:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800a804:	9602      	str	r6, [sp, #8]
  inptr0 = input_buf[0][in_row_group_ctr];
 800a806:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800a80a:	9503      	str	r5, [sp, #12]
  inptr1 = input_buf[1][in_row_group_ctr];
 800a80c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800a80e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800a810:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800a814:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a818:	9903      	ldr	r1, [sp, #12]
 800a81a:	9204      	str	r2, [sp, #16]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800a81c:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800a81e:	f8dd 9010 	ldr.w	r9, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800a822:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800a826:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800a82a:	9205      	str	r2, [sp, #20]
 800a82c:	9a05      	ldr	r2, [sp, #20]
 800a82e:	3306      	adds	r3, #6
 800a830:	3102      	adds	r1, #2
 800a832:	4295      	cmp	r5, r2
 800a834:	d128      	bne.n	800a888 <h2v1_merged_upsample+0xa8>
 800a836:	2606      	movs	r6, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800a838:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800a83a:	fb06 f60e 	mul.w	r6, r6, lr
 800a83e:	07db      	lsls	r3, r3, #31
 800a840:	eb0c 0206 	add.w	r2, ip, r6
 800a844:	d51d      	bpl.n	800a882 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800a846:	9b04      	ldr	r3, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a848:	9902      	ldr	r1, [sp, #8]
    cred = Crrtab[cr];
 800a84a:	f813 000e 	ldrb.w	r0, [r3, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a84e:	782b      	ldrb	r3, [r5, #0]
 800a850:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a854:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800a858:	9f00      	ldr	r7, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a85a:	4429      	add	r1, r5
    cblue = Cbbtab[cb];
 800a85c:	9d01      	ldr	r5, [sp, #4]
    outptr[RGB_RED] =   range_limit[y + cred];
 800a85e:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
    cblue = Cbbtab[cb];
 800a862:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800a866:	eb04 4121 	add.w	r1, r4, r1, asr #16
    y  = GETJSAMPLE(*inptr0);
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	f813 301e 	ldrb.w	r3, [r3, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800a870:	18e7      	adds	r7, r4, r3
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800a872:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800a874:	5c38      	ldrb	r0, [r7, r0]
 800a876:	f80c 0006 	strb.w	r0, [ip, r6]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800a87a:	5cc9      	ldrb	r1, [r1, r3]
 800a87c:	7051      	strb	r1, [r2, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800a87e:	5ce3      	ldrb	r3, [r4, r3]
 800a880:	7093      	strb	r3, [r2, #2]
  }
}
 800a882:	b007      	add	sp, #28
 800a884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800a888:	f819 ab01 	ldrb.w	sl, [r9], #1
 800a88c:	9a00      	ldr	r2, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a88e:	f815 6b01 	ldrb.w	r6, [r5], #1
    cred = Crrtab[cr];
 800a892:	f852 b02a 	ldr.w	fp, [r2, sl, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a896:	9a02      	ldr	r2, [sp, #8]
 800a898:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
 800a89c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    y  = GETJSAMPLE(*inptr0++);
 800a8a0:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a8a4:	443a      	add	r2, r7
    cblue = Cbbtab[cb];
 800a8a6:	9f01      	ldr	r7, [sp, #4]
 800a8a8:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800a8ac:	eb0b 0704 	add.w	r7, fp, r4
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800a8b0:	eb04 4222 	add.w	r2, r4, r2, asr #16
    outptr[RGB_RED] =   range_limit[y + cred];
 800a8b4:	f817 b00a 	ldrb.w	fp, [r7, sl]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800a8b8:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800a8ba:	f803 bc06 	strb.w	fp, [r3, #-6]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800a8be:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800a8c2:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800a8c6:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800a8ca:	f803 ac04 	strb.w	sl, [r3, #-4]
    y  = GETJSAMPLE(*inptr0++);
 800a8ce:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800a8d2:	f817 700a 	ldrb.w	r7, [r7, sl]
 800a8d6:	f803 7c03 	strb.w	r7, [r3, #-3]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800a8da:	f812 200a 	ldrb.w	r2, [r2, sl]
 800a8de:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800a8e2:	f816 200a 	ldrb.w	r2, [r6, sl]
 800a8e6:	f803 2c01 	strb.w	r2, [r3, #-1]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800a8ea:	e79f      	b.n	800a82c <h2v1_merged_upsample+0x4c>

0800a8ec <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800a8f0:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800a8f4:	b08d      	sub	sp, #52	; 0x34
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800a8f6:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800a8fa:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800a8fc:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800a900:	9605      	str	r6, [sp, #20]
  int * Cbbtab = upsample->Cb_b_tab;
 800a902:	696e      	ldr	r6, [r5, #20]
 800a904:	9606      	str	r6, [sp, #24]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800a906:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800a908:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800a90a:	9607      	str	r6, [sp, #28]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800a90c:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800a910:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800a914:	686d      	ldr	r5, [r5, #4]
 800a916:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800a918:	9608      	str	r6, [sp, #32]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800a91a:	9509      	str	r5, [sp, #36]	; 0x24
  inptr1 = input_buf[1][in_row_group_ctr];
 800a91c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800a91e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800a920:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800a924:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800a928:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800a92a:	920a      	str	r2, [sp, #40]	; 0x28
  outptr0 = output_buf[0];
 800a92c:	681a      	ldr	r2, [r3, #0]
  outptr1 = output_buf[1];
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800a934:	9303      	str	r3, [sp, #12]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800a936:	084b      	lsrs	r3, r1, #1
 800a938:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr0 = output_buf[0];
 800a93c:	9202      	str	r2, [sp, #8]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	910b      	str	r1, [sp, #44]	; 0x2c
 800a942:	9b03      	ldr	r3, [sp, #12]
  inptr2 = input_buf[2][in_row_group_ctr];
 800a944:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a946:	9104      	str	r1, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800a948:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a94a:	3206      	adds	r2, #6
 800a94c:	3306      	adds	r3, #6
 800a94e:	f10e 0e02 	add.w	lr, lr, #2
 800a952:	4588      	cmp	r8, r1
 800a954:	f10c 0c02 	add.w	ip, ip, #2
 800a958:	d13d      	bne.n	800a9d6 <h2v2_merged_upsample+0xea>
 800a95a:	9a01      	ldr	r2, [sp, #4]
 800a95c:	2306      	movs	r3, #6
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800a95e:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800a960:	4353      	muls	r3, r2
 800a962:	9a02      	ldr	r2, [sp, #8]
 800a964:	07c0      	lsls	r0, r0, #31
 800a966:	eb02 0103 	add.w	r1, r2, r3
 800a96a:	9a03      	ldr	r2, [sp, #12]
 800a96c:	441a      	add	r2, r3
 800a96e:	d52f      	bpl.n	800a9d0 <h2v2_merged_upsample+0xe4>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800a970:	9d01      	ldr	r5, [sp, #4]
 800a972:	980a      	ldr	r0, [sp, #40]	; 0x28
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a974:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800a978:	5d40      	ldrb	r0, [r0, r5]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a97a:	9f07      	ldr	r7, [sp, #28]
    cred = Crrtab[cr];
 800a97c:	9d05      	ldr	r5, [sp, #20]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a97e:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
    cred = Crrtab[cr];
 800a982:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a986:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
 800a98a:	9f01      	ldr	r7, [sp, #4]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800a98c:	4425      	add	r5, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a98e:	4484      	add	ip, r0
    cblue = Cbbtab[cb];
 800a990:	9806      	ldr	r0, [sp, #24]
 800a992:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800a996:	eb04 4c2c 	add.w	ip, r4, ip, asr #16
    y  = GETJSAMPLE(*inptr00);
 800a99a:	9808      	ldr	r0, [sp, #32]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800a99c:	4434      	add	r4, r6
    y  = GETJSAMPLE(*inptr00);
 800a99e:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800a9a2:	9f02      	ldr	r7, [sp, #8]
 800a9a4:	f815 e000 	ldrb.w	lr, [r5, r0]
 800a9a8:	f807 e003 	strb.w	lr, [r7, r3]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800a9ac:	f81c e000 	ldrb.w	lr, [ip, r0]
 800a9b0:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800a9b4:	5c20      	ldrb	r0, [r4, r0]
 800a9b6:	7088      	strb	r0, [r1, #2]
    y  = GETJSAMPLE(*inptr01);
 800a9b8:	9801      	ldr	r0, [sp, #4]
 800a9ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9bc:	f811 1010 	ldrb.w	r1, [r1, r0, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800a9c0:	5c68      	ldrb	r0, [r5, r1]
 800a9c2:	9d03      	ldr	r5, [sp, #12]
 800a9c4:	54e8      	strb	r0, [r5, r3]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800a9c6:	f81c 3001 	ldrb.w	r3, [ip, r1]
 800a9ca:	7053      	strb	r3, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800a9cc:	5c63      	ldrb	r3, [r4, r1]
 800a9ce:	7093      	strb	r3, [r2, #2]
  }
}
 800a9d0:	b00d      	add	sp, #52	; 0x34
 800a9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800a9d6:	9904      	ldr	r1, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a9d8:	f818 5b01 	ldrb.w	r5, [r8], #1
    cred = Crrtab[cr];
 800a9dc:	f811 9b01 	ldrb.w	r9, [r1], #1
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a9e0:	f85a 7025 	ldr.w	r7, [sl, r5, lsl #2]
    cred = Crrtab[cr];
 800a9e4:	9104      	str	r1, [sp, #16]
 800a9e6:	9905      	ldr	r1, [sp, #20]
 800a9e8:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a9ec:	9907      	ldr	r1, [sp, #28]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800a9ee:	4426      	add	r6, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a9f0:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
    y  = GETJSAMPLE(*inptr00++);
 800a9f4:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800a9f8:	4439      	add	r1, r7
    cblue = Cbbtab[cb];
 800a9fa:	9f06      	ldr	r7, [sp, #24]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800a9fc:	f816 b009 	ldrb.w	fp, [r6, r9]
    cblue = Cbbtab[cb];
 800aa00:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800aa04:	eb04 4121 	add.w	r1, r4, r1, asr #16
    outptr0[RGB_RED] =   range_limit[y + cred];
 800aa08:	f802 bc06 	strb.w	fp, [r2, #-6]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800aa0c:	4425      	add	r5, r4
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800aa0e:	f811 b009 	ldrb.w	fp, [r1, r9]
 800aa12:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800aa16:	f815 9009 	ldrb.w	r9, [r5, r9]
 800aa1a:	f802 9c04 	strb.w	r9, [r2, #-4]
    y  = GETJSAMPLE(*inptr00++);
 800aa1e:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800aa22:	f816 b009 	ldrb.w	fp, [r6, r9]
 800aa26:	f802 bc03 	strb.w	fp, [r2, #-3]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800aa2a:	f811 b009 	ldrb.w	fp, [r1, r9]
 800aa2e:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800aa32:	f815 9009 	ldrb.w	r9, [r5, r9]
 800aa36:	f802 9c01 	strb.w	r9, [r2, #-1]
    y  = GETJSAMPLE(*inptr01++);
 800aa3a:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800aa3e:	f816 b009 	ldrb.w	fp, [r6, r9]
 800aa42:	f803 bc06 	strb.w	fp, [r3, #-6]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800aa46:	f811 b009 	ldrb.w	fp, [r1, r9]
 800aa4a:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800aa4e:	f815 9009 	ldrb.w	r9, [r5, r9]
 800aa52:	f803 9c04 	strb.w	r9, [r3, #-4]
    y  = GETJSAMPLE(*inptr01++);
 800aa56:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800aa5a:	f816 6009 	ldrb.w	r6, [r6, r9]
 800aa5e:	f803 6c03 	strb.w	r6, [r3, #-3]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800aa62:	f811 1009 	ldrb.w	r1, [r1, r9]
 800aa66:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800aa6a:	f815 1009 	ldrb.w	r1, [r5, r9]
 800aa6e:	f803 1c01 	strb.w	r1, [r3, #-1]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800aa72:	e769      	b.n	800a948 <h2v2_merged_upsample+0x5c>

0800aa74 <merged_2v_upsample>:
{
 800aa74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800aa78:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800aa7c:	4616      	mov	r6, r2
 800aa7e:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800aa82:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800aa84:	f8d8 3000 	ldr.w	r3, [r8]
 800aa88:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 800aa8c:	b1dd      	cbz	r5, 800aac6 <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800aa8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa90:	2501      	movs	r5, #1
 800aa92:	f104 0020 	add.w	r0, r4, #32
 800aa96:	9301      	str	r3, [sp, #4]
 800aa98:	2300      	movs	r3, #0
 800aa9a:	9500      	str	r5, [sp, #0]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	f002 fe80 	bl	800d7a2 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800aaa6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaaa:	442b      	add	r3, r5
 800aaac:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800aab0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aab2:	1b5b      	subs	r3, r3, r5
 800aab4:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800aab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aab8:	b913      	cbnz	r3, 800aac0 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800aaba:	6833      	ldr	r3, [r6, #0]
 800aabc:	3301      	adds	r3, #1
 800aabe:	6033      	str	r3, [r6, #0]
}
 800aac0:	b004      	add	sp, #16
 800aac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800aac6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800aac8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800aaca:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800aacc:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800aad0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800aad4:	bf28      	it	cs
 800aad6:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800aad8:	9302      	str	r3, [sp, #8]
 800aada:	42bd      	cmp	r5, r7
 800aadc:	bf28      	it	cs
 800aade:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800aae0:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800aae2:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800aae4:	bf17      	itett	ne
 800aae6:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800aae8:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800aaea:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800aaec:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800aaee:	bf0c      	ite	eq
 800aaf0:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800aaf2:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800aaf4:	ab02      	add	r3, sp, #8
 800aaf6:	6832      	ldr	r2, [r6, #0]
 800aaf8:	47b8      	blx	r7
 800aafa:	e7d4      	b.n	800aaa6 <merged_2v_upsample+0x32>

0800aafc <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aafc:	6843      	ldr	r3, [r0, #4]
 800aafe:	2230      	movs	r2, #48	; 0x30
 800ab00:	2101      	movs	r1, #1
 800ab02:	681b      	ldr	r3, [r3, #0]
{
 800ab04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab08:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab0a:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800ab0c:	4b37      	ldr	r3, [pc, #220]	; (800abec <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab0e:	4605      	mov	r5, r0
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800ab10:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800ab12:	6f22      	ldr	r2, [r4, #112]	; 0x70
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800ab14:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800ab18:	434a      	muls	r2, r1

  if (cinfo->max_v_samp_factor == 2) {
 800ab1a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  upsample->pub.start_pass = start_pass_merged_upsample;
 800ab1e:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800ab20:	2300      	movs	r3, #0
  if (cinfo->max_v_samp_factor == 2) {
 800ab22:	2902      	cmp	r1, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800ab24:	6282      	str	r2, [r0, #40]	; 0x28
  upsample->pub.need_context_rows = FALSE;
 800ab26:	6083      	str	r3, [r0, #8]
  if (cinfo->max_v_samp_factor == 2) {
 800ab28:	d15a      	bne.n	800abe0 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800ab2a:	4b31      	ldr	r3, [pc, #196]	; (800abf0 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab2c:	2101      	movs	r1, #1
    upsample->pub.upsample = merged_2v_upsample;
 800ab2e:	6043      	str	r3, [r0, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800ab30:	4b30      	ldr	r3, [pc, #192]	; (800abf4 <jinit_merged_upsampler+0xf8>)
 800ab32:	60c3      	str	r3, [r0, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab34:	4620      	mov	r0, r4
 800ab36:	6863      	ldr	r3, [r4, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	4798      	blx	r3
    upsample->spare_row = (JSAMPROW)
 800ab3c:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab3e:	6863      	ldr	r3, [r4, #4]
 800ab40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab44:	2101      	movs	r1, #1
 800ab46:	4620      	mov	r0, r4
 800ab48:	681b      	ldr	r3, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ab4a:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab4e:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab50:	6863      	ldr	r3, [r4, #4]
 800ab52:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800ab56:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab58:	2101      	movs	r1, #1
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab60:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800ab62:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800ab6e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800ac0c <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab72:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab74:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800ab76:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab78:	2101      	movs	r1, #1
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800ab82:	4f1d      	ldr	r7, [pc, #116]	; (800abf8 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ab84:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800ab86:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800ab88:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800ab8a:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800ab8c:	f8df e080 	ldr.w	lr, [pc, #128]	; 800ac10 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800ab90:	491a      	ldr	r1, [pc, #104]	; (800abfc <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800ab92:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800ab96:	4d1a      	ldr	r5, [pc, #104]	; (800ac00 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800ab98:	fb08 e203 	mla	r2, r8, r3, lr
 800ab9c:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800ab9e:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800aba2:	fb07 f203 	mul.w	r2, r7, r3
 800aba6:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800abaa:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800abae:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800abb0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800abb4:	fb05 f203 	mul.w	r2, r5, r3
 800abb8:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800abbc:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800abc0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800abc4:	fb01 f203 	mul.w	r2, r1, r3
 800abc8:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800abcc:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800abd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800abd4:	3301      	adds	r3, #1
 800abd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abda:	d1dd      	bne.n	800ab98 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800abe0:	4a08      	ldr	r2, [pc, #32]	; (800ac04 <jinit_merged_upsampler+0x108>)
    upsample->spare_row = NULL;
 800abe2:	6203      	str	r3, [r0, #32]
    upsample->pub.upsample = merged_1v_upsample;
 800abe4:	6042      	str	r2, [r0, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800abe6:	4a08      	ldr	r2, [pc, #32]	; (800ac08 <jinit_merged_upsampler+0x10c>)
 800abe8:	60c2      	str	r2, [r0, #12]
    upsample->spare_row = NULL;
 800abea:	e7a8      	b.n	800ab3e <jinit_merged_upsampler+0x42>
 800abec:	0800a7ad 	.word	0x0800a7ad
 800abf0:	0800aa75 	.word	0x0800aa75
 800abf4:	0800a8ed 	.word	0x0800a8ed
 800abf8:	0001c5a2 	.word	0x0001c5a2
 800abfc:	ffffa7e6 	.word	0xffffa7e6
 800ac00:	ffff492e 	.word	0xffff492e
 800ac04:	0800a7bb 	.word	0x0800a7bb
 800ac08:	0800a7e1 	.word	0x0800a7e1
 800ac0c:	000166e9 	.word	0x000166e9
 800ac10:	ff4d0b80 	.word	0xff4d0b80

0800ac14 <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800ac14:	2902      	cmp	r1, #2
{
 800ac16:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800ac18:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800ac1c:	d023      	beq.n	800ac66 <start_pass_dpost+0x52>
 800ac1e:	2903      	cmp	r1, #3
 800ac20:	d019      	beq.n	800ac56 <start_pass_dpost+0x42>
 800ac22:	2900      	cmp	r1, #0
 800ac24:	d128      	bne.n	800ac78 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800ac26:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800ac28:	b182      	cbz	r2, 800ac4c <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800ac2a:	4a16      	ldr	r2, [pc, #88]	; (800ac84 <start_pass_dpost+0x70>)
 800ac2c:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800ac2e:	68e2      	ldr	r2, [r4, #12]
 800ac30:	b93a      	cbnz	r2, 800ac42 <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800ac32:	6843      	ldr	r3, [r0, #4]
 800ac34:	2101      	movs	r1, #1
 800ac36:	9100      	str	r1, [sp, #0]
 800ac38:	69dd      	ldr	r5, [r3, #28]
 800ac3a:	68a1      	ldr	r1, [r4, #8]
 800ac3c:	6923      	ldr	r3, [r4, #16]
 800ac3e:	47a8      	blx	r5
 800ac40:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800ac42:	2300      	movs	r3, #0
 800ac44:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800ac48:	b003      	add	sp, #12
 800ac4a:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800ac4c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800ac50:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800ac52:	6063      	str	r3, [r4, #4]
    break;
 800ac54:	e7f5      	b.n	800ac42 <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800ac56:	68a2      	ldr	r2, [r4, #8]
 800ac58:	b91a      	cbnz	r2, 800ac62 <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800ac5a:	6803      	ldr	r3, [r0, #0]
 800ac5c:	6159      	str	r1, [r3, #20]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800ac62:	4b09      	ldr	r3, [pc, #36]	; (800ac88 <start_pass_dpost+0x74>)
 800ac64:	e7f5      	b.n	800ac52 <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800ac66:	68a2      	ldr	r2, [r4, #8]
 800ac68:	b922      	cbnz	r2, 800ac74 <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800ac6a:	6803      	ldr	r3, [r0, #0]
 800ac6c:	2203      	movs	r2, #3
 800ac6e:	615a      	str	r2, [r3, #20]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800ac74:	4b05      	ldr	r3, [pc, #20]	; (800ac8c <start_pass_dpost+0x78>)
 800ac76:	e7ec      	b.n	800ac52 <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800ac78:	6803      	ldr	r3, [r0, #0]
 800ac7a:	2203      	movs	r2, #3
 800ac7c:	615a      	str	r2, [r3, #20]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4798      	blx	r3
    break;
 800ac82:	e7de      	b.n	800ac42 <start_pass_dpost+0x2e>
 800ac84:	0800ac91 	.word	0x0800ac91
 800ac88:	0800acf1 	.word	0x0800acf1
 800ac8c:	0800ad7f 	.word	0x0800ad7f

0800ac90 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800ac90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac94:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800ac96:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800ac9e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800aca0:	682f      	ldr	r7, [r5, #0]
 800aca2:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800aca4:	2700      	movs	r7, #0
 800aca6:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800aca8:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800acac:	9705      	str	r7, [sp, #20]
 800acae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800acb2:	42be      	cmp	r6, r7
 800acb4:	bf94      	ite	ls
 800acb6:	9602      	strls	r6, [sp, #8]
 800acb8:	9702      	strhi	r7, [sp, #8]
 800acba:	ae07      	add	r6, sp, #28
 800acbc:	9601      	str	r6, [sp, #4]
 800acbe:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800acc2:	9600      	str	r6, [sp, #0]
 800acc4:	9e05      	ldr	r6, [sp, #20]
 800acc6:	6876      	ldr	r6, [r6, #4]
 800acc8:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800acca:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800accc:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800acd0:	4620      	mov	r0, r4
 800acd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acd4:	685e      	ldr	r6, [r3, #4]
 800acd6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800acda:	9b07      	ldr	r3, [sp, #28]
 800acdc:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800ace0:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800ace2:	682b      	ldr	r3, [r5, #0]
 800ace4:	9a07      	ldr	r2, [sp, #28]
 800ace6:	4413      	add	r3, r2
 800ace8:	602b      	str	r3, [r5, #0]
}
 800acea:	b008      	add	sp, #32
 800acec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800acf0 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800acf4:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800acf8:	b085      	sub	sp, #20
 800acfa:	469a      	mov	sl, r3
 800acfc:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800acfe:	69a3      	ldr	r3, [r4, #24]
{
 800ad00:	460e      	mov	r6, r1
 800ad02:	4691      	mov	r9, r2
 800ad04:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800ad08:	b943      	cbnz	r3, 800ad1c <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800ad0a:	6843      	ldr	r3, [r0, #4]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	9200      	str	r2, [sp, #0]
 800ad10:	69df      	ldr	r7, [r3, #28]
 800ad12:	68a1      	ldr	r1, [r4, #8]
 800ad14:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ad18:	47b8      	blx	r7
 800ad1a:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800ad1c:	6922      	ldr	r2, [r4, #16]
 800ad1e:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800ad20:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800ad22:	4628      	mov	r0, r5
 800ad24:	9202      	str	r2, [sp, #8]
 800ad26:	f104 0218 	add.w	r2, r4, #24
 800ad2a:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800ad2e:	9201      	str	r2, [sp, #4]
 800ad30:	68e2      	ldr	r2, [r4, #12]
 800ad32:	9200      	str	r2, [sp, #0]
 800ad34:	464a      	mov	r2, r9
 800ad36:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800ad3a:	4653      	mov	r3, sl
 800ad3c:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800ad3e:	69a6      	ldr	r6, [r4, #24]
 800ad40:	42be      	cmp	r6, r7
 800ad42:	d910      	bls.n	800ad66 <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800ad44:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800ad48:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800ad4a:	68e1      	ldr	r1, [r4, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ad52:	4628      	mov	r0, r5
 800ad54:	4633      	mov	r3, r6
 800ad56:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800ad5a:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800ad5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ad60:	4433      	add	r3, r6
 800ad62:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800ad66:	6922      	ldr	r2, [r4, #16]
 800ad68:	69a3      	ldr	r3, [r4, #24]
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d304      	bcc.n	800ad78 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800ad6e:	6963      	ldr	r3, [r4, #20]
 800ad70:	4413      	add	r3, r2
 800ad72:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800ad74:	2300      	movs	r3, #0
 800ad76:	61a3      	str	r3, [r4, #24]
  }
}
 800ad78:	b005      	add	sp, #20
 800ad7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad7e <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800ad7e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800ad82:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800ad86:	4607      	mov	r7, r0
 800ad88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800ad8a:	69a3      	ldr	r3, [r4, #24]
 800ad8c:	b93b      	cbnz	r3, 800ad9e <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800ad8e:	6842      	ldr	r2, [r0, #4]
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	69d5      	ldr	r5, [r2, #28]
 800ad94:	68a1      	ldr	r1, [r4, #8]
 800ad96:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ad9a:	47a8      	blx	r5
 800ad9c:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800ad9e:	6963      	ldr	r3, [r4, #20]
 800ada0:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800ada2:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800ada4:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800ada6:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800ada8:	6832      	ldr	r2, [r6, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800adaa:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800adac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adae:	429d      	cmp	r5, r3
 800adb0:	bf28      	it	cs
 800adb2:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800adb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adb6:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800adb8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800adbc:	429d      	cmp	r5, r3
 800adbe:	bf28      	it	cs
 800adc0:	461d      	movcs	r5, r3
 800adc2:	68e3      	ldr	r3, [r4, #12]
 800adc4:	9303      	str	r3, [sp, #12]
 800adc6:	9803      	ldr	r0, [sp, #12]
 800adc8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800adcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800add0:	4638      	mov	r0, r7
 800add2:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800add6:	462b      	mov	r3, r5
 800add8:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800adda:	6833      	ldr	r3, [r6, #0]
 800addc:	442b      	add	r3, r5
 800adde:	6033      	str	r3, [r6, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800ade0:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800ade2:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800ade4:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800ade6:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800ade8:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800adea:	d304      	bcc.n	800adf6 <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800adec:	6963      	ldr	r3, [r4, #20]
 800adee:	4413      	add	r3, r2
 800adf0:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	61a3      	str	r3, [r4, #24]
  }
}
 800adf6:	b004      	add	sp, #16
 800adf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800adfc <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800adfc:	6843      	ldr	r3, [r0, #4]
 800adfe:	221c      	movs	r2, #28
{
 800ae00:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ae02:	681b      	ldr	r3, [r3, #0]
{
 800ae04:	b085      	sub	sp, #20
 800ae06:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ae08:	2101      	movs	r1, #1
{
 800ae0a:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ae0c:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800ae0e:	4b15      	ldr	r3, [pc, #84]	; (800ae64 <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800ae10:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800ae12:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ae16:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800ae18:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800ae1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800ae1c:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800ae20:	b1bb      	cbz	r3, 800ae52 <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800ae22:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800ae26:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800ae28:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800ae2a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ae2c:	6861      	ldr	r1, [r4, #4]
 800ae2e:	4342      	muls	r2, r0
    if (need_full_buffer) {
 800ae30:	b18f      	cbz	r7, 800ae56 <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800ae32:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800ae34:	4619      	mov	r1, r3
 800ae36:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ae38:	9203      	str	r2, [sp, #12]
 800ae3a:	f002 fcaa 	bl	800d792 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800ae3e:	692b      	ldr	r3, [r5, #16]
 800ae40:	2101      	movs	r1, #1
 800ae42:	9a03      	ldr	r2, [sp, #12]
 800ae44:	e9cd 0300 	strd	r0, r3, [sp]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	47b8      	blx	r7
 800ae50:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800ae52:	b005      	add	sp, #20
 800ae54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800ae56:	688e      	ldr	r6, [r1, #8]
 800ae58:	4620      	mov	r0, r4
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	47b0      	blx	r6
 800ae5e:	60e8      	str	r0, [r5, #12]
}
 800ae60:	e7f7      	b.n	800ae52 <jinit_d_post_controller+0x56>
 800ae62:	bf00      	nop
 800ae64:	0800ac15 	.word	0x0800ac15

0800ae68 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800ae68:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ae6c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800ae70:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800ae72:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800ae74:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ae76:	4770      	bx	lr

0800ae78 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ae7c:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800ae80:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800ae82:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 800ae86:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800ae88:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800ae8a:	4683      	mov	fp, r0
 800ae8c:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	db10      	blt.n	800aeb4 <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ae92:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800ae96:	2600      	movs	r6, #0
 800ae98:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800ae9c:	9303      	str	r3, [sp, #12]
 800ae9e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800aea2:	9a03      	ldr	r2, [sp, #12]
 800aea4:	fb0a 2106 	mla	r1, sl, r6, r2
 800aea8:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800aeac:	42b2      	cmp	r2, r6
 800aeae:	dc32      	bgt.n	800af16 <sep_upsample+0x9e>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800aeb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800aeb6:	4658      	mov	r0, fp
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800aeb8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800aeba:	f8db 613c 	ldr.w	r6, [fp, #316]	; 0x13c
  out_rows_avail -= *out_row_ctr;
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	9910      	ldr	r1, [sp, #64]	; 0x40
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800aec2:	eba6 0c02 	sub.w	ip, r6, r2
  out_rows_avail -= *out_row_ctr;
 800aec6:	1ace      	subs	r6, r1, r3
 800aec8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800aeca:	428e      	cmp	r6, r1
 800aecc:	bf28      	it	cs
 800aece:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800aed0:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800aed4:	4566      	cmp	r6, ip
 800aed6:	bf28      	it	cs
 800aed8:	4666      	movcs	r6, ip
 800aeda:	9600      	str	r6, [sp, #0]
 800aedc:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800aee0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aee2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800aee6:	f104 010c 	add.w	r1, r4, #12
 800aeea:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800aeec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aeee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4433      	add	r3, r6
 800aef4:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800aef6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800aef8:	1b9b      	subs	r3, r3, r6
 800aefa:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800aefc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800aefe:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800af00:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800af04:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800af06:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800af08:	bfa2      	ittt	ge
 800af0a:	682b      	ldrge	r3, [r5, #0]
 800af0c:	3301      	addge	r3, #1
 800af0e:	602b      	strge	r3, [r5, #0]
}
 800af10:	b005      	add	sp, #20
 800af12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800af16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af18:	f103 0904 	add.w	r9, r3, #4
 800af1c:	682a      	ldr	r2, [r5, #0]
 800af1e:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800af20:	f853 0928 	ldr.w	r0, [r3], #-40
 800af24:	4607      	mov	r7, r0
 800af26:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800af2a:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800af2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800af30:	4658      	mov	r0, fp
 800af32:	47b8      	blx	r7
	 ci++, compptr++) {
 800af34:	464b      	mov	r3, r9
 800af36:	e7b4      	b.n	800aea2 <sep_upsample+0x2a>

0800af38 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800af38:	601a      	str	r2, [r3, #0]
}
 800af3a:	4770      	bx	lr

0800af3c <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800af3c:	2200      	movs	r2, #0
 800af3e:	601a      	str	r2, [r3, #0]
}
 800af40:	4770      	bx	lr

0800af42 <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800af42:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800af44:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800af46:	2300      	movs	r3, #0
 800af48:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800af4c:	4299      	cmp	r1, r3
 800af4e:	dc00      	bgt.n	800af52 <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800af50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800af52:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800af56:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800af58:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800af5c:	440c      	add	r4, r1
    while (outptr < outend) {
 800af5e:	42a1      	cmp	r1, r4
 800af60:	d301      	bcc.n	800af66 <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800af62:	3301      	adds	r3, #1
 800af64:	e7f0      	b.n	800af48 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800af66:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800af6a:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800af6e:	f801 6c01 	strb.w	r6, [r1, #-1]
 800af72:	e7f4      	b.n	800af5e <h2v1_upsample+0x1c>

0800af74 <int_upsample>:
{
 800af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af78:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800af7a:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800af7c:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 800af80:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 800af82:	684b      	ldr	r3, [r1, #4]
 800af84:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 800af86:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 800af88:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 800af8a:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800af8e:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800af92:	f108 33ff 	add.w	r3, r8, #4294967295
 800af96:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 800af98:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800af9c:	42a3      	cmp	r3, r4
 800af9e:	dc02      	bgt.n	800afa6 <int_upsample+0x32>
}
 800afa0:	b005      	add	sp, #20
 800afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 800afa6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800afaa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800afac:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800afb0:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 800afb4:	454b      	cmp	r3, r9
 800afb6:	d30e      	bcc.n	800afd6 <int_upsample+0x62>
    if (v_expand > 1) {
 800afb8:	f1b8 0f01 	cmp.w	r8, #1
 800afbc:	dd09      	ble.n	800afd2 <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800afbe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800afc0:	463a      	mov	r2, r7
 800afc2:	4621      	mov	r1, r4
 800afc4:	4638      	mov	r0, r7
 800afc6:	9301      	str	r3, [sp, #4]
 800afc8:	9b03      	ldr	r3, [sp, #12]
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	1c63      	adds	r3, r4, #1
 800afce:	f002 fbe8 	bl	800d7a2 <jcopy_sample_rows>
    outrow += v_expand;
 800afd2:	4444      	add	r4, r8
 800afd4:	e7e0      	b.n	800af98 <int_upsample+0x24>
	*outptr++ = invalue;
 800afd6:	4618      	mov	r0, r3
 800afd8:	4652      	mov	r2, sl
 800afda:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800afde:	f002 fc35 	bl	800d84c <memset>
 800afe2:	4603      	mov	r3, r0
 800afe4:	4453      	add	r3, sl
 800afe6:	e7e5      	b.n	800afb4 <int_upsample+0x40>

0800afe8 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800afe8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800afec:	4605      	mov	r5, r0
 800afee:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800aff0:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800aff2:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800aff4:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800aff8:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800affc:	42a3      	cmp	r3, r4
 800affe:	dc02      	bgt.n	800b006 <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800b000:	b002      	add	sp, #8
 800b002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800b006:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800b00a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800b00c:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800b010:	441a      	add	r2, r3
    while (outptr < outend) {
 800b012:	4293      	cmp	r3, r2
 800b014:	d30a      	bcc.n	800b02c <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800b016:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b018:	4621      	mov	r1, r4
 800b01a:	4632      	mov	r2, r6
 800b01c:	4630      	mov	r0, r6
 800b01e:	e9cd 8300 	strd	r8, r3, [sp]
 800b022:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800b024:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800b026:	f002 fbbc 	bl	800d7a2 <jcopy_sample_rows>
    outrow += 2;
 800b02a:	e7e5      	b.n	800aff8 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800b02c:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800b030:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800b034:	f803 0c01 	strb.w	r0, [r3, #-1]
 800b038:	e7eb      	b.n	800b012 <h2v2_upsample+0x2a>
	...

0800b03c <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800b03c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b040:	6843      	ldr	r3, [r0, #4]
 800b042:	22a0      	movs	r2, #160	; 0xa0
 800b044:	2101      	movs	r1, #1
{
 800b046:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800b04c:	4b3f      	ldr	r3, [pc, #252]	; (800b14c <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800b04e:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b052:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800b054:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800b056:	4b3e      	ldr	r3, [pc, #248]	; (800b150 <jinit_upsampler+0x114>)
 800b058:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800b05a:	2300      	movs	r3, #0
 800b05c:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800b05e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800b062:	b12b      	cbz	r3, 800b070 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	221a      	movs	r2, #26
 800b068:	4620      	mov	r0, r4
 800b06a:	615a      	str	r2, [r3, #20]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b070:	f105 060c 	add.w	r6, r5, #12
 800b074:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800b078:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800b07c:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800b080:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800b160 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b084:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800b088:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b164 <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b08c:	3574      	adds	r5, #116	; 0x74
 800b08e:	eb05 0308 	add.w	r3, r5, r8
 800b092:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b094:	429a      	cmp	r2, r3
 800b096:	dc01      	bgt.n	800b09c <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800b098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800b09c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b09e:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800b0a0:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800b0a4:	4343      	muls	r3, r0
 800b0a6:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800b0aa:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 800b0ae:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800b0b2:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 800b0b6:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800b0ba:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 800b0bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0be:	b932      	cbnz	r2, 800b0ce <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 800b0c0:	4b24      	ldr	r3, [pc, #144]	; (800b154 <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 800b0c2:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 800b0c4:	3758      	adds	r7, #88	; 0x58
 800b0c6:	3604      	adds	r6, #4
 800b0c8:	f108 0801 	add.w	r8, r8, #1
 800b0cc:	e7df      	b.n	800b08e <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800b0ce:	fb0c f20e 	mul.w	r2, ip, lr
 800b0d2:	fb92 f1f1 	sdiv	r1, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800b0d6:	4559      	cmp	r1, fp
 800b0d8:	d103      	bne.n	800b0e2 <jinit_upsampler+0xa6>
 800b0da:	4283      	cmp	r3, r0
 800b0dc:	d101      	bne.n	800b0e2 <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 800b0de:	4b1e      	ldr	r3, [pc, #120]	; (800b158 <jinit_upsampler+0x11c>)
 800b0e0:	e7ef      	b.n	800b0c2 <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 800b0e2:	ebbb 0f41 	cmp.w	fp, r1, lsl #1
 800b0e6:	d119      	bne.n	800b11c <jinit_upsampler+0xe0>
 800b0e8:	4283      	cmp	r3, r0
 800b0ea:	d111      	bne.n	800b110 <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 800b0ec:	4b1b      	ldr	r3, [pc, #108]	; (800b15c <jinit_upsampler+0x120>)
 800b0ee:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800b0f0:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800b0f2:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800b0f6:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800b0f8:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800b0fc:	f002 fb49 	bl	800d792 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800b100:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800b104:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800b106:	2101      	movs	r1, #1
 800b108:	4620      	mov	r0, r4
 800b10a:	47d8      	blx	fp
 800b10c:	6030      	str	r0, [r6, #0]
 800b10e:	e7d9      	b.n	800b0c4 <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 800b110:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800b114:	d102      	bne.n	800b11c <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 800b116:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 800b11a:	e7e9      	b.n	800b0f0 <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 800b11c:	fb9b f2f1 	sdiv	r2, fp, r1
 800b120:	fb01 b112 	mls	r1, r1, r2, fp
 800b124:	b959      	cbnz	r1, 800b13e <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 800b126:	fb90 f1f3 	sdiv	r1, r0, r3
 800b12a:	fb03 0311 	mls	r3, r3, r1, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 800b12e:	b933      	cbnz	r3, 800b13e <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 800b130:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800b134:	f888 2000 	strb.w	r2, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800b138:	f888 100a 	strb.w	r1, [r8, #10]
    if (need_buffer) {
 800b13c:	e7d8      	b.n	800b0f0 <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800b13e:	6823      	ldr	r3, [r4, #0]
 800b140:	2227      	movs	r2, #39	; 0x27
 800b142:	4620      	mov	r0, r4
 800b144:	615a      	str	r2, [r3, #20]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4798      	blx	r3
    if (need_buffer) {
 800b14a:	e7d1      	b.n	800b0f0 <jinit_upsampler+0xb4>
 800b14c:	0800ae69 	.word	0x0800ae69
 800b150:	0800ae79 	.word	0x0800ae79
 800b154:	0800af3d 	.word	0x0800af3d
 800b158:	0800af39 	.word	0x0800af39
 800b15c:	0800af43 	.word	0x0800af43
 800b160:	0800af75 	.word	0x0800af75
 800b164:	0800afe9 	.word	0x0800afe9

0800b168 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800b168:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800b16a:	6803      	ldr	r3, [r0, #0]
{
 800b16c:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	4669      	mov	r1, sp
 800b172:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800b174:	b033      	add	sp, #204	; 0xcc
 800b176:	f85d fb04 	ldr.w	pc, [sp], #4

0800b17a <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800b17a:	2900      	cmp	r1, #0
{
 800b17c:	4603      	mov	r3, r0
 800b17e:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800b180:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800b182:	da0b      	bge.n	800b19c <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800b184:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800b186:	b112      	cbz	r2, 800b18e <emit_message+0x14>
 800b188:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800b18a:	2a02      	cmp	r2, #2
 800b18c:	dd02      	ble.n	800b194 <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800b18e:	68a2      	ldr	r2, [r4, #8]
 800b190:	4618      	mov	r0, r3
 800b192:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800b194:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b196:	3301      	adds	r3, #1
 800b198:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800b19a:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800b19c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b19e:	428b      	cmp	r3, r1
 800b1a0:	dbfb      	blt.n	800b19a <emit_message+0x20>
      (*err->output_message) (cinfo);
 800b1a2:	68a3      	ldr	r3, [r4, #8]
}
 800b1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800b1a8:	4718      	bx	r3

0800b1aa <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800b1aa:	6803      	ldr	r3, [r0, #0]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800b1b0:	615a      	str	r2, [r3, #20]
}
 800b1b2:	4770      	bx	lr

0800b1b4 <format_message>:
{
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800b1b8:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800b1ba:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800b1bc:	2b00      	cmp	r3, #0
{
 800b1be:	b530      	push	{r4, r5, lr}
 800b1c0:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800b1c2:	dd1f      	ble.n	800b204 <format_message+0x50>
 800b1c4:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800b1c6:	4299      	cmp	r1, r3
 800b1c8:	db1c      	blt.n	800b204 <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800b1ca:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800b1cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800b1d0:	b911      	cbnz	r1, 800b1d8 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800b1d2:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800b1d4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b1d6:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800b1d8:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800b1da:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b1de:	b9fc      	cbnz	r4, 800b220 <format_message+0x6c>
    sprintf(buffer, msgtext,
 800b1e0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b1e2:	9305      	str	r3, [sp, #20]
 800b1e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b1e6:	9304      	str	r3, [sp, #16]
 800b1e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b1ea:	9303      	str	r3, [sp, #12]
 800b1ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b1ee:	9302      	str	r3, [sp, #8]
 800b1f0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b1f2:	9301      	str	r3, [sp, #4]
 800b1f4:	6a13      	ldr	r3, [r2, #32]
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800b1fc:	f002 fc1e 	bl	800da3c <siprintf>
}
 800b200:	b007      	add	sp, #28
 800b202:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800b204:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800b206:	2c00      	cmp	r4, #0
 800b208:	d0e3      	beq.n	800b1d2 <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800b20a:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800b20c:	4299      	cmp	r1, r3
 800b20e:	dce0      	bgt.n	800b1d2 <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800b210:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 800b214:	429d      	cmp	r5, r3
 800b216:	dbdc      	blt.n	800b1d2 <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800b218:	1a59      	subs	r1, r3, r1
 800b21a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800b21e:	e7d7      	b.n	800b1d0 <format_message+0x1c>
    if (ch == '%') {
 800b220:	2c25      	cmp	r4, #37	; 0x25
 800b222:	d1da      	bne.n	800b1da <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	2b73      	cmp	r3, #115	; 0x73
 800b228:	d1da      	bne.n	800b1e0 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800b22a:	3218      	adds	r2, #24
}
 800b22c:	b007      	add	sp, #28
 800b22e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800b232:	f002 bc03 	b.w	800da3c <siprintf>

0800b236 <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800b236:	6803      	ldr	r3, [r0, #0]
{
 800b238:	b510      	push	{r4, lr}
 800b23a:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800b240:	4620      	mov	r0, r4
}
 800b242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800b246:	f7fa bd1f 	b.w	8005c88 <jpeg_destroy>
	...

0800b24c <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800b24c:	4a0a      	ldr	r2, [pc, #40]	; (800b278 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800b24e:	490b      	ldr	r1, [pc, #44]	; (800b27c <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800b250:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800b252:	4a0b      	ldr	r2, [pc, #44]	; (800b280 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800b254:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800b256:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 800b258:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800b25a:	4a0a      	ldr	r2, [pc, #40]	; (800b284 <jpeg_std_error+0x38>)
 800b25c:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800b25e:	4a0a      	ldr	r2, [pc, #40]	; (800b288 <jpeg_std_error+0x3c>)
 800b260:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800b262:	4a0a      	ldr	r2, [pc, #40]	; (800b28c <jpeg_std_error+0x40>)
 800b264:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800b266:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800b268:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800b26c:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800b26e:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800b272:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 800b276:	4770      	bx	lr
 800b278:	0800b237 	.word	0x0800b237
 800b27c:	080128c4 	.word	0x080128c4
 800b280:	0800b17b 	.word	0x0800b17b
 800b284:	0800b169 	.word	0x0800b169
 800b288:	0800b1b5 	.word	0x0800b1b5
 800b28c:	0800b1ab 	.word	0x0800b1ab

0800b290 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800b290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800b294:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 800b298:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800b29a:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800b29e:	3a02      	subs	r2, #2
 800b2a0:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 800b2a4:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800b2a6:	ed9f 5abd 	vldr	s10, [pc, #756]	; 800b59c <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800b2aa:	ed9f 4abd 	vldr	s8, [pc, #756]	; 800b5a0 <jpeg_idct_float+0x310>
 800b2ae:	eddf 4abd 	vldr	s9, [pc, #756]	; 800b5a4 <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800b2b2:	eddf 3abd 	vldr	s7, [pc, #756]	; 800b5a8 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800b2b6:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 800b2ba:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800b2bc:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800b2c0:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 800b2c4:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800b2c8:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800b2cc:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800b2d0:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800b2d4:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 800b2d8:	ecbc 7a01 	vldmia	ip!, {s14}
 800b2dc:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800b2e0:	ea4e 0b09 	orr.w	fp, lr, r9
 800b2e4:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800b2e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800b2ec:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800b2f0:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800b2f4:	ea41 0b0b 	orr.w	fp, r1, fp
 800b2f8:	ea45 0b0b 	orr.w	fp, r5, fp
 800b2fc:	ea50 0b0b 	orrs.w	fp, r0, fp
 800b300:	f040 80c0 	bne.w	800b484 <jpeg_idct_float+0x1f4>
      wsptr[DCTSIZE*0] = dcval;
 800b304:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800b308:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 800b30c:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800b310:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800b314:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800b318:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800b31c:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800b320:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800b324:	45e2      	cmp	sl, ip
 800b326:	d1c6      	bne.n	800b2b6 <jpeg_idct_float+0x26>
 800b328:	1f1c      	subs	r4, r3, #4
 800b32a:	f103 001c 	add.w	r0, r3, #28
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800b32e:	466a      	mov	r2, sp
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800b330:	eddf 2a9e 	vldr	s5, [pc, #632]	; 800b5ac <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800b334:	eddf 4a99 	vldr	s9, [pc, #612]	; 800b59c <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800b338:	ed9f 3a99 	vldr	s6, [pc, #612]	; 800b5a0 <jpeg_idct_float+0x310>
 800b33c:	ed9f 4a99 	vldr	s8, [pc, #612]	; 800b5a4 <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800b340:	eddf 3a99 	vldr	s7, [pc, #612]	; 800b5a8 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800b344:	edd2 5a00 	vldr	s11, [r2]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800b348:	3220      	adds	r2, #32
    tmp10 = z5 + wsptr[4];
 800b34a:	ed52 7a04 	vldr	s15, [r2, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800b34e:	ee75 5aa2 	vadd.f32	s11, s11, s5
    tmp13 = wsptr[2] + wsptr[6];
 800b352:	ed52 6a02 	vldr	s13, [r2, #-8]
    z11 = wsptr[1] + wsptr[7];
 800b356:	ed12 1a01 	vldr	s2, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 800b35a:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 800b35e:	ee37 5aa5 	vadd.f32	s10, s15, s11
    outptr = output_buf[ctr] + output_col;
 800b362:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 800b364:	ee75 5ae7 	vsub.f32	s11, s11, s15
    tmp13 = wsptr[2] + wsptr[6];
 800b368:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 800b36c:	18e9      	adds	r1, r5, r3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800b36e:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 800b370:	ee37 7aa6 	vadd.f32	s14, s15, s13
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800b374:	42a0      	cmp	r0, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800b376:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b37a:	eeb0 2a47 	vmov.f32	s4, s14
    tmp0 = tmp10 + tmp13;
 800b37e:	ee35 6a07 	vadd.f32	s12, s10, s14
    tmp3 = tmp10 - tmp13;
 800b382:	ee35 5a47 	vsub.f32	s10, s10, s14
    z13 = wsptr[5] + wsptr[3];
 800b386:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800b38a:	ee97 2aa4 	vfnms.f32	s4, s15, s9
    z13 = wsptr[5] + wsptr[3];
 800b38e:	ed52 7a03 	vldr	s15, [r2, #-12]
 800b392:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 800b396:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 800b39a:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 800b39e:	ee75 6a82 	vadd.f32	s13, s11, s4
    tmp2 = tmp11 - tmp12;
 800b3a2:	ee75 5ac2 	vsub.f32	s11, s11, s4
    z11 = wsptr[1] + wsptr[7];
 800b3a6:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 800b3aa:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 800b3ae:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800b3b2:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800b3b6:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800b3ba:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800b3be:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800b3c2:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800b3c6:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 800b3ca:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 800b3ce:	eef0 1a67 	vmov.f32	s3, s15
 800b3d2:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800b3d6:	ee36 2a01 	vadd.f32	s4, s12, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800b3da:	ee36 6a41 	vsub.f32	s12, s12, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800b3de:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800b3e2:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tmp4 = tmp10 - tmp5;
 800b3e6:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800b3ea:	ee12 3a10 	vmov	r3, s4
 800b3ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3f2:	5cf3      	ldrb	r3, [r6, r3]
 800b3f4:	55eb      	strb	r3, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800b3f6:	ee16 3a10 	vmov	r3, s12
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800b3fa:	ee36 6aa7 	vadd.f32	s12, s13, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800b3fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800b402:	ee76 6ae7 	vsub.f32	s13, s13, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800b406:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800b40a:	5cf3      	ldrb	r3, [r6, r3]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800b40c:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800b410:	71cb      	strb	r3, [r1, #7]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800b412:	ee75 6aa1 	vadd.f32	s13, s11, s3
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800b416:	ee16 3a10 	vmov	r3, s12
 800b41a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b41e:	5cf3      	ldrb	r3, [r6, r3]
 800b420:	704b      	strb	r3, [r1, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800b422:	ee17 3a90 	vmov	r3, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800b426:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800b42a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b42e:	5cf3      	ldrb	r3, [r6, r3]
 800b430:	718b      	strb	r3, [r1, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800b432:	ee17 3a90 	vmov	r3, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800b436:	ee75 7ae1 	vsub.f32	s15, s11, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800b43a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800b43e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800b442:	5cf3      	ldrb	r3, [r6, r3]
 800b444:	708b      	strb	r3, [r1, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800b446:	ee17 3a90 	vmov	r3, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800b44a:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800b44e:	ee35 7a47 	vsub.f32	s14, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800b452:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800b456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800b45a:	5cf3      	ldrb	r3, [r6, r3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800b45c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800b460:	714b      	strb	r3, [r1, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800b462:	ee17 3a90 	vmov	r3, s15
 800b466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b46a:	5cf3      	ldrb	r3, [r6, r3]
 800b46c:	70cb      	strb	r3, [r1, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800b46e:	ee17 3a10 	vmov	r3, s14
 800b472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b476:	5cf3      	ldrb	r3, [r6, r3]
 800b478:	710b      	strb	r3, [r1, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800b47a:	f47f af63 	bne.w	800b344 <jpeg_idct_float+0xb4>
  }
}
 800b47e:	b041      	add	sp, #260	; 0x104
 800b480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800b484:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800b488:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800b48c:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800b490:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800b494:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800b498:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800b49c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800b4a0:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800b4a4:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800b4a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800b4ac:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800b4b0:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800b4b4:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800b4b8:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 800b4bc:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800b4c0:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800b4c4:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800b4c8:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800b4cc:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800b4d0:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800b4d4:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 800b4d8:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800b4dc:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800b4e0:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 800b4e4:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 800b4e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800b4ec:	ee07 ea90 	vmov	s15, lr
 800b4f0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800b4f4:	ee07 8a90 	vmov	s15, r8
 800b4f8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800b4fc:	ee07 1a90 	vmov	s15, r1
 800b500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b504:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800b508:	ee07 0a10 	vmov	s14, r0
 800b50c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b510:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 800b514:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 800b518:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 800b51c:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 800b520:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 800b524:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 800b528:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800b52c:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800b530:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 800b534:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800b538:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800b53c:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 800b540:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800b544:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800b548:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 800b54c:	eeb0 6a67 	vmov.f32	s12, s15
 800b550:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800b554:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800b558:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800b55c:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800b560:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800b564:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800b568:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800b56c:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 800b570:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800b574:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800b578:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800b57c:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800b580:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800b584:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800b588:	ee33 7a47 	vsub.f32	s14, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800b58c:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800b590:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800b594:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
    wsptr++;
 800b598:	e6c4      	b.n	800b324 <jpeg_idct_float+0x94>
 800b59a:	bf00      	nop
 800b59c:	3fb504f3 	.word	0x3fb504f3
 800b5a0:	3f8a8bd4 	.word	0x3f8a8bd4
 800b5a4:	3fec835e 	.word	0x3fec835e
 800b5a8:	40273d75 	.word	0x40273d75
 800b5ac:	43008000 	.word	0x43008000

0800b5b0 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 800b5b6:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800b5b8:	3a02      	subs	r2, #2
{
 800b5ba:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800b5bc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800b5c0:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800b5c4:	f105 0320 	add.w	r3, r5, #32
 800b5c8:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800b5ca:	ab04      	add	r3, sp, #16
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800b5cc:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800b5d0:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800b5d2:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
 800b5d6:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800b5da:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 800b5de:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800b5e2:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800b5e6:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800b5ea:	f855 0b04 	ldr.w	r0, [r5], #4
 800b5ee:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800b5f2:	9101      	str	r1, [sp, #4]
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800b5f4:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800b5f6:	ea46 000c 	orr.w	r0, r6, ip
 800b5fa:	4338      	orrs	r0, r7
 800b5fc:	ea4a 0000 	orr.w	r0, sl, r0
 800b600:	4308      	orrs	r0, r1
 800b602:	ea4e 0000 	orr.w	r0, lr, r0
 800b606:	ea58 0100 	orrs.w	r1, r8, r0
 800b60a:	d146      	bne.n	800b69a <jpeg_idct_ifast+0xea>
      wsptr[DCTSIZE*0] = dcval;
 800b60c:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800b610:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 800b612:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800b614:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800b616:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800b618:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800b61c:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800b620:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800b624:	9903      	ldr	r1, [sp, #12]
 800b626:	42a9      	cmp	r1, r5
 800b628:	d1d0      	bne.n	800b5cc <jpeg_idct_ifast+0x1c>
 800b62a:	9b02      	ldr	r3, [sp, #8]
 800b62c:	f1a3 0b04 	sub.w	fp, r3, #4
 800b630:	331c      	adds	r3, #28
 800b632:	9302      	str	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800b634:	ab04      	add	r3, sp, #16
 800b636:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800b638:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800b63a:	f85b af04 	ldr.w	sl, [fp, #4]!
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800b63e:	9a00      	ldr	r2, [sp, #0]
    outptr = output_buf[ctr] + output_col;
 800b640:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800b644:	9b00      	ldr	r3, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800b646:	9d00      	ldr	r5, [sp, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800b648:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
 800b64c:	68db      	ldr	r3, [r3, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800b64e:	ea4e 0701 	orr.w	r7, lr, r1
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800b652:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800b656:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800b65a:	431f      	orrs	r7, r3
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800b65c:	9500      	str	r5, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800b65e:	ea47 0708 	orr.w	r7, r7, r8
 800b662:	e9d2 c206 	ldrd	ip, r2, [r2, #24]
 800b666:	4327      	orrs	r7, r4
 800b668:	ea47 070c 	orr.w	r7, r7, ip
 800b66c:	ea57 0502 	orrs.w	r5, r7, r2
 800b670:	d17e      	bne.n	800b770 <jpeg_idct_ifast+0x1c0>
				  & RANGE_MASK];
 800b672:	f3c6 1849 	ubfx	r8, r6, #5, #10
      
      outptr[0] = dcval;
 800b676:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800b678:	f819 3008 	ldrb.w	r3, [r9, r8]
      outptr[0] = dcval;
 800b67c:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 800b680:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 800b682:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 800b684:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 800b686:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 800b688:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 800b68a:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 800b68c:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800b68e:	9b02      	ldr	r3, [sp, #8]
 800b690:	455b      	cmp	r3, fp
 800b692:	d1d1      	bne.n	800b638 <jpeg_idct_ifast+0x88>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800b694:	b045      	add	sp, #276	; 0x114
 800b696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800b69a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800b69c:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800b6a0:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800b6a4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800b6a6:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800b6aa:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800b6ae:	fb00 f00e 	mul.w	r0, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800b6b2:	eb0a 0b04 	add.w	fp, sl, r4
    tmp11 = tmp0 - tmp2;
 800b6b6:	eba4 040a 	sub.w	r4, r4, sl
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800b6ba:	eb0c 0a00 	add.w	sl, ip, r0
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800b6be:	ebac 0000 	sub.w	r0, ip, r0
 800b6c2:	4348      	muls	r0, r1
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800b6c4:	eb0b 0e0a 	add.w	lr, fp, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800b6c8:	ebca 2020 	rsb	r0, sl, r0, asr #8
    tmp3 = tmp10 - tmp13;
 800b6cc:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp1 = tmp11 + tmp12;
 800b6d0:	eb04 0c00 	add.w	ip, r4, r0
    tmp2 = tmp11 - tmp12;
 800b6d4:	1a21      	subs	r1, r4, r0
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800b6d6:	69e8      	ldr	r0, [r5, #28]
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800b6d8:	f240 14d9 	movw	r4, #473	; 0x1d9
    tmp2 = tmp11 - tmp12;
 800b6dc:	9100      	str	r1, [sp, #0]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800b6de:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800b6e0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800b6e2:	9901      	ldr	r1, [sp, #4]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800b6e4:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800b6e6:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800b6ea:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800b6ec:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800b6f0:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 800b6f4:	eb07 0b01 	add.w	fp, r7, r1
    z10 = tmp6 - tmp5;
 800b6f8:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 800b6fa:	eb06 0800 	add.w	r8, r6, r0
    z12 = tmp4 - tmp7;
 800b6fe:	1a36      	subs	r6, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800b700:	1988      	adds	r0, r1, r6
    tmp7 = z11 + z13;		/* phase 5 */
 800b702:	eb0b 0708 	add.w	r7, fp, r8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800b706:	eba8 0b0b 	sub.w	fp, r8, fp
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800b70a:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800b70c:	f46f 7427 	mvn.w	r4, #668	; 0x29c
 800b710:	4361      	muls	r1, r4
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800b712:	f44f 74b5 	mov.w	r4, #362	; 0x16a
 800b716:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800b71a:	f240 1415 	movw	r4, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800b71e:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800b720:	4366      	muls	r6, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800b722:	eb01 2120 	add.w	r1, r1, r0, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800b726:	1236      	asrs	r6, r6, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800b728:	1bc9      	subs	r1, r1, r7
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800b72a:	eba6 2020 	sub.w	r0, r6, r0, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800b72e:	eb0e 0607 	add.w	r6, lr, r7
    tmp5 = tmp11 - tmp6;
 800b732:	ebc1 2b2b 	rsb	fp, r1, fp, asr #8
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800b736:	ebae 0707 	sub.w	r7, lr, r7
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800b73a:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800b73e:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800b742:	ebac 0101 	sub.w	r1, ip, r1
    tmp4 = tmp10 + tmp5;
 800b746:	4458      	add	r0, fp
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800b748:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800b74c:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800b750:	9900      	ldr	r1, [sp, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800b752:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800b754:	4459      	add	r1, fp
 800b756:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800b758:	9900      	ldr	r1, [sp, #0]
 800b75a:	eba1 040b 	sub.w	r4, r1, fp
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800b75e:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800b762:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800b766:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800b76a:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800b76c:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 800b76e:	e759      	b.n	800b624 <jpeg_idct_ifast+0x74>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 800b770:	eb08 0706 	add.w	r7, r8, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800b774:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 800b778:	eba6 0808 	sub.w	r8, r6, r8
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 800b77c:	eb01 060c 	add.w	r6, r1, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800b780:	eba1 010c 	sub.w	r1, r1, ip
    tmp0 = tmp10 + tmp13;
 800b784:	eb07 0c06 	add.w	ip, r7, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800b788:	4369      	muls	r1, r5
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800b78a:	191d      	adds	r5, r3, r4
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 800b78c:	1ae3      	subs	r3, r4, r3
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 800b78e:	eb0e 0402 	add.w	r4, lr, r2
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800b792:	ebc6 2121 	rsb	r1, r6, r1, asr #8
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 800b796:	ebae 0202 	sub.w	r2, lr, r2
    tmp3 = tmp10 - tmp13;
 800b79a:	1bbe      	subs	r6, r7, r6
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800b79c:	9501      	str	r5, [sp, #4]
    tmp1 = tmp11 + tmp12;
 800b79e:	eb08 0701 	add.w	r7, r8, r1
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800b7a2:	eb03 0e02 	add.w	lr, r3, r2
    tmp2 = tmp11 - tmp12;
 800b7a6:	eba8 0101 	sub.w	r1, r8, r1
    tmp7 = z11 + z13;		/* phase 5 */
 800b7aa:	eb05 0804 	add.w	r8, r5, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800b7ae:	f240 15d9 	movw	r5, #473	; 0x1d9
 800b7b2:	fb05 fe0e 	mul.w	lr, r5, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800b7b6:	f46f 7527 	mvn.w	r5, #668	; 0x29c
 800b7ba:	436b      	muls	r3, r5
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800b7bc:	9d01      	ldr	r5, [sp, #4]
 800b7be:	1b64      	subs	r4, r4, r5
 800b7c0:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800b7c4:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800b7c6:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800b7c8:	f240 1515 	movw	r5, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800b7cc:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800b7d0:	436a      	muls	r2, r5
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800b7d2:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800b7d4:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800b7d8:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 800b7da:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800b7de:	eba2 2e2e 	sub.w	lr, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800b7e2:	eb0c 0208 	add.w	r2, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800b7e6:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 800b7ea:	f3c2 1249 	ubfx	r2, r2, #5, #10
    tmp4 = tmp10 + tmp5;
 800b7ee:	44a6      	add	lr, r4
			    & RANGE_MASK];
 800b7f0:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800b7f4:	f819 2002 	ldrb.w	r2, [r9, r2]
 800b7f8:	f80a 2005 	strb.w	r2, [sl, r5]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800b7fc:	f819 200c 	ldrb.w	r2, [r9, ip]
 800b800:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800b802:	18fa      	adds	r2, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800b804:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 800b806:	f3c2 1249 	ubfx	r2, r2, #5, #10
			    & RANGE_MASK];
 800b80a:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800b80e:	f819 2002 	ldrb.w	r2, [r9, r2]
 800b812:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800b814:	f819 3007 	ldrb.w	r3, [r9, r7]
 800b818:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800b81a:	190b      	adds	r3, r1, r4
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800b81c:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 800b81e:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800b822:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800b826:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b82a:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800b82c:	f819 3001 	ldrb.w	r3, [r9, r1]
 800b830:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800b832:	eb06 030e 	add.w	r3, r6, lr
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800b836:	eba6 0e0e 	sub.w	lr, r6, lr
			    & RANGE_MASK];
 800b83a:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800b83e:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800b842:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b846:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800b848:	f819 300e 	ldrb.w	r3, [r9, lr]
 800b84c:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800b84e:	e71e      	b.n	800b68e <jpeg_idct_ifast+0xde>

0800b850 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800b856:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800b858:	3a02      	subs	r2, #2
{
 800b85a:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 800b85c:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800b85e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800b862:	3380      	adds	r3, #128	; 0x80
 800b864:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800b866:	f105 0320 	add.w	r3, r5, #32
 800b86a:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800b86c:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800b870:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800b872:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800b876:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 800b87a:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800b87e:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 800b882:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800b886:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800b88a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b88e:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 800b892:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800b894:	ea4a 030b 	orr.w	r3, sl, fp
 800b898:	ea4e 0303 	orr.w	r3, lr, r3
 800b89c:	433b      	orrs	r3, r7
 800b89e:	ea48 0303 	orr.w	r3, r8, r3
 800b8a2:	4333      	orrs	r3, r6
 800b8a4:	ea59 0303 	orrs.w	r3, r9, r3
 800b8a8:	d145      	bne.n	800b936 <jpeg_idct_islow+0xe6>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800b8aa:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 800b8ac:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800b8b0:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 800b8b2:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800b8b4:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800b8b6:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800b8b8:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800b8bc:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800b8c0:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800b8c4:	9b05      	ldr	r3, [sp, #20]
 800b8c6:	42ab      	cmp	r3, r5
 800b8c8:	d1d0      	bne.n	800b86c <jpeg_idct_islow+0x1c>
 800b8ca:	9b04      	ldr	r3, [sp, #16]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800b8cc:	ad06      	add	r5, sp, #24
 800b8ce:	f1a3 0904 	sub.w	r9, r3, #4
 800b8d2:	331c      	adds	r3, #28
 800b8d4:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800b8d6:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800b8da:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800b8dc:	9302      	str	r3, [sp, #8]
 800b8de:	4413      	add	r3, r2
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800b8e0:	f8d5 c01c 	ldr.w	ip, [r5, #28]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800b8e4:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 800b8e8:	e9d5 e703 	ldrd	lr, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800b8ec:	ea4a 0200 	orr.w	r2, sl, r0
 800b8f0:	ea42 020e 	orr.w	r2, r2, lr
 800b8f4:	e9d5 8105 	ldrd	r8, r1, [r5, #20]
 800b8f8:	433a      	orrs	r2, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800b8fa:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800b8fe:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800b902:	3610      	adds	r6, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800b904:	430a      	orrs	r2, r1
 800b906:	ea52 020c 	orrs.w	r2, r2, ip
 800b90a:	f040 8098 	bne.w	800ba3e <jpeg_idct_islow+0x1ee>
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800b90e:	9901      	ldr	r1, [sp, #4]
				  & RANGE_MASK];
 800b910:	f3c6 1249 	ubfx	r2, r6, #5, #10

      outptr[0] = dcval;
 800b914:	9850      	ldr	r0, [sp, #320]	; 0x140
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800b916:	5c8a      	ldrb	r2, [r1, r2]
      outptr[0] = dcval;
 800b918:	9902      	ldr	r1, [sp, #8]
 800b91a:	540a      	strb	r2, [r1, r0]
      outptr[1] = dcval;
 800b91c:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 800b91e:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 800b920:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 800b922:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 800b924:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 800b926:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 800b928:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800b92a:	9b05      	ldr	r3, [sp, #20]
 800b92c:	454b      	cmp	r3, r9
 800b92e:	d1d2      	bne.n	800b8d6 <jpeg_idct_islow+0x86>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800b930:	b047      	add	sp, #284	; 0x11c
 800b932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800b936:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800b938:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800b93c:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800b940:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800b942:	f241 1651 	movw	r6, #4433	; 0x1151
 800b946:	eb0b 0300 	add.w	r3, fp, r0
 800b94a:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800b94c:	f641 067e 	movw	r6, #6270	; 0x187e
 800b950:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800b954:	4e7a      	ldr	r6, [pc, #488]	; (800bb40 <jpeg_idct_islow+0x2f0>)
 800b956:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 800b95a:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800b95c:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 800b95e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800b962:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 800b964:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 800b968:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 800b96c:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 800b970:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800b974:	69ec      	ldr	r4, [r5, #28]
    tmp11 = tmp1 + tmp3;
 800b976:	18f7      	adds	r7, r6, r3
    tmp13 = tmp0 - tmp2;
 800b978:	9002      	str	r0, [sp, #8]
    tmp12 = tmp1 - tmp3;
 800b97a:	1b9b      	subs	r3, r3, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800b97c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800b980:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 800b984:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800b986:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800b98a:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800b98e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800b992:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800b996:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800b998:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 800b99c:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 800b9a0:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800b9a4:	1930      	adds	r0, r6, r4
 800b9a6:	4358      	muls	r0, r3
    z2 += z1;
 800b9a8:	4b66      	ldr	r3, [pc, #408]	; (800bb44 <jpeg_idct_islow+0x2f4>)
 800b9aa:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 800b9ae:	4b66      	ldr	r3, [pc, #408]	; (800bb48 <jpeg_idct_islow+0x2f8>)
 800b9b0:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800b9b4:	eb09 040a 	add.w	r4, r9, sl
 800b9b8:	4b64      	ldr	r3, [pc, #400]	; (800bb4c <jpeg_idct_islow+0x2fc>)
 800b9ba:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 800b9bc:	f640 138e 	movw	r3, #2446	; 0x98e
 800b9c0:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 800b9c4:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 800b9c6:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 800b9ca:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800b9ce:	4b60      	ldr	r3, [pc, #384]	; (800bb50 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 800b9d0:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800b9d4:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 800b9d8:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800b9dc:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800b9e0:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 800b9e2:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 800b9e4:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 800b9e6:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 800b9ea:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 800b9ee:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800b9f2:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800b9f6:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800b9fa:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800b9fc:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800b9fe:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800ba02:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800ba06:	eb07 040a 	add.w	r4, r7, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800ba0a:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800ba0e:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800ba10:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800ba14:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800ba16:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800ba18:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800ba1a:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800ba1c:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800ba1e:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800ba22:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800ba24:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800ba26:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800ba28:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800ba2a:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800ba2e:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 800ba30:	9b02      	ldr	r3, [sp, #8]
 800ba32:	eba3 0909 	sub.w	r9, r3, r9
 800ba36:	ea4f 23e9 	mov.w	r3, r9, asr #11
 800ba3a:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 800ba3c:	e742      	b.n	800b8c4 <jpeg_idct_islow+0x74>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800ba3e:	1842      	adds	r2, r0, r1
 800ba40:	f241 1451 	movw	r4, #4433	; 0x1151
 800ba44:	4362      	muls	r2, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800ba46:	f641 047e 	movw	r4, #6270	; 0x187e
 800ba4a:	fb04 2000 	mla	r0, r4, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800ba4e:	4c3c      	ldr	r4, [pc, #240]	; (800bb40 <jpeg_idct_islow+0x2f0>)
 800ba50:	fb04 2101 	mla	r1, r4, r1, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 800ba54:	19bc      	adds	r4, r7, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 800ba56:	1bf2      	subs	r2, r6, r7
    tmp10 = tmp0 + tmp2;
 800ba58:	eb00 3744 	add.w	r7, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 800ba5c:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 800ba60:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = tmp1 + tmp3;
 800ba64:	eb01 3642 	add.w	r6, r1, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 800ba68:	9003      	str	r0, [sp, #12]
    tmp12 = tmp1 - tmp3;
 800ba6a:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    z3 = tmp1 + tmp3;
 800ba6e:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 800ba72:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800ba74:	f242 52a1 	movw	r2, #9633	; 0x25a1
 800ba78:	1821      	adds	r1, r4, r0
 800ba7a:	4351      	muls	r1, r2
    z2 += z1;
 800ba7c:	4a31      	ldr	r2, [pc, #196]	; (800bb44 <jpeg_idct_islow+0x2f4>)
 800ba7e:	fb02 1404 	mla	r4, r2, r4, r1
    z3 += z1;
 800ba82:	4a31      	ldr	r2, [pc, #196]	; (800bb48 <jpeg_idct_islow+0x2f8>)
 800ba84:	fb02 1100 	mla	r1, r2, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800ba88:	eb0a 000c 	add.w	r0, sl, ip
 800ba8c:	4a2f      	ldr	r2, [pc, #188]	; (800bb4c <jpeg_idct_islow+0x2fc>)
 800ba8e:	4350      	muls	r0, r2
    tmp0 += z1 + z2;
 800ba90:	f640 128e 	movw	r2, #2446	; 0x98e
 800ba94:	eb04 0b00 	add.w	fp, r4, r0
    tmp3 += z1 + z3;
 800ba98:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 800ba9a:	fb02 bc0c 	mla	ip, r2, ip, fp
    tmp3 += z1 + z3;
 800ba9e:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800baa2:	4a2b      	ldr	r2, [pc, #172]	; (800bb50 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 800baa4:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800baa8:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 800baac:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800bab0:	fb02 fa0a 	mul.w	sl, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800bab4:	9a01      	ldr	r2, [sp, #4]
    tmp1 += z1 + z3;
 800bab6:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 800bab8:	4454      	add	r4, sl
 800baba:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 800babe:	fb0b 1b08 	mla	fp, fp, r8, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800bac2:	eb07 0800 	add.w	r8, r7, r0
    tmp2 += z1 + z2;
 800bac6:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800baca:	9950      	ldr	r1, [sp, #320]	; 0x140
			    & RANGE_MASK];
 800bacc:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800bad0:	1a3f      	subs	r7, r7, r0
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800bad2:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800bad6:	f812 e008 	ldrb.w	lr, [r2, r8]
			    & RANGE_MASK];
 800bada:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800bade:	9a02      	ldr	r2, [sp, #8]
			    & RANGE_MASK];
 800bae0:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800bae4:	f802 e001 	strb.w	lr, [r2, r1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800bae8:	9a01      	ldr	r2, [sp, #4]
 800baea:	5dd0      	ldrb	r0, [r2, r7]
 800baec:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800baee:	1930      	adds	r0, r6, r4
			    & RANGE_MASK];
 800baf0:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800baf4:	5c10      	ldrb	r0, [r2, r0]
 800baf6:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800baf8:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800bafc:	9a04      	ldr	r2, [sp, #16]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800bafe:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800bb00:	eb02 000b 	add.w	r0, r2, fp
 800bb04:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 800bb06:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800bb0a:	5c10      	ldrb	r0, [r2, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800bb0c:	9a04      	ldr	r2, [sp, #16]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800bb0e:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800bb10:	eba2 010b 	sub.w	r1, r2, fp
 800bb14:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 800bb16:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800bb1a:	5c52      	ldrb	r2, [r2, r1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800bb1c:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800bb1e:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800bb20:	9a03      	ldr	r2, [sp, #12]
 800bb22:	4462      	add	r2, ip
			    & RANGE_MASK];
 800bb24:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800bb28:	5c8a      	ldrb	r2, [r1, r2]
 800bb2a:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 800bb2c:	9a03      	ldr	r2, [sp, #12]
 800bb2e:	eba2 0c0c 	sub.w	ip, r2, ip
			    & RANGE_MASK];
 800bb32:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 800bb36:	f811 200c 	ldrb.w	r2, [r1, ip]
 800bb3a:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800bb3c:	e6f5      	b.n	800b92a <jpeg_idct_islow+0xda>
 800bb3e:	bf00      	nop
 800bb40:	ffffc4df 	.word	0xffffc4df
 800bb44:	ffffc13b 	.word	0xffffc13b
 800bb48:	fffff384 	.word	0xfffff384
 800bb4c:	ffffe333 	.word	0xffffe333
 800bb50:	ffffadfd 	.word	0xffffadfd

0800bb54 <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 800bb54:	6803      	ldr	r3, [r0, #0]
 800bb56:	2238      	movs	r2, #56	; 0x38
 800bb58:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4718      	bx	r3

0800bb60 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 800bb60:	688b      	ldr	r3, [r1, #8]
{
 800bb62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 800bb66:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 800bb6a:	698b      	ldr	r3, [r1, #24]
{
 800bb6c:	b085      	sub	sp, #20
 800bb6e:	4681      	mov	r9, r0
 800bb70:	460c      	mov	r4, r1
 800bb72:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 800bb74:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800bb78:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800bb7a:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800bb7e:	6922      	ldr	r2, [r4, #16]
 800bb80:	42b2      	cmp	r2, r6
 800bb82:	dc02      	bgt.n	800bb8a <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 800bb84:	b005      	add	sp, #20
 800bb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800bb8a:	1b92      	subs	r2, r2, r6
 800bb8c:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 800bb8e:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800bb90:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 800bb92:	6863      	ldr	r3, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 800bb94:	eb06 0500 	add.w	r5, r6, r0
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800bb98:	bfa8      	it	ge
 800bb9a:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800bb9c:	69e1      	ldr	r1, [r4, #28]
 800bb9e:	1b49      	subs	r1, r1, r5
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 800bba0:	1b5d      	subs	r5, r3, r5
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800bba2:	428a      	cmp	r2, r1
 800bba4:	bfa8      	it	ge
 800bba6:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 800bba8:	42aa      	cmp	r2, r5
 800bbaa:	bfa8      	it	ge
 800bbac:	462a      	movge	r2, r5
    if (rows <= 0)		/* this chunk might be past end of file! */
 800bbae:	2a00      	cmp	r2, #0
 800bbb0:	dde8      	ble.n	800bb84 <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 800bbb2:	fb02 f308 	mul.w	r3, r2, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800bbb6:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 800bbb8:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800bbba:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 800bbbe:	f1ba 0f00 	cmp.w	sl, #0
 800bbc2:	d00a      	beq.n	800bbda <do_barray_io+0x7a>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	4659      	mov	r1, fp
 800bbc8:	463b      	mov	r3, r7
 800bbca:	4648      	mov	r0, r9
 800bbcc:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 800bbce:	47a8      	blx	r5
    file_offset += byte_count;
 800bbd0:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800bbd2:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 800bbd4:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800bbd6:	4416      	add	r6, r2
 800bbd8:	e7d1      	b.n	800bb7e <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 800bbda:	9b03      	ldr	r3, [sp, #12]
 800bbdc:	4659      	mov	r1, fp
 800bbde:	4648      	mov	r0, r9
 800bbe0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	463b      	mov	r3, r7
 800bbe6:	e7f2      	b.n	800bbce <do_barray_io+0x6e>

0800bbe8 <alloc_small>:
{
 800bbe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 800bbec:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	460d      	mov	r5, r1
 800bbf4:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 800bbf6:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800bbf8:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 800bbfa:	d902      	bls.n	800bc02 <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	f7ff ffa9 	bl	800bb54 <out_of_memory>
  if (odd_bytes > 0)
 800bc02:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 800bc06:	bf1c      	itt	ne
 800bc08:	3408      	addne	r4, #8
 800bc0a:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 800bc0c:	2d01      	cmp	r5, #1
 800bc0e:	d906      	bls.n	800bc1e <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 800bc10:	6833      	ldr	r3, [r6, #0]
 800bc12:	220f      	movs	r2, #15
 800bc14:	4630      	mov	r0, r6
 800bc16:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 800bc1e:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 800bc22:	f04f 0a00 	mov.w	sl, #0
 800bc26:	00aa      	lsls	r2, r5, #2
  hdr_ptr = mem->small_list[pool_id];
 800bc28:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 800bc2c:	b9e8      	cbnz	r0, 800bc6a <alloc_small+0x82>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 800bc2e:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 800bc32:	4b1f      	ldr	r3, [pc, #124]	; (800bcb0 <alloc_small+0xc8>)
 800bc34:	f1ba 0f00 	cmp.w	sl, #0
 800bc38:	d11d      	bne.n	800bc76 <alloc_small+0x8e>
      slop = first_pool_slop[pool_id];
 800bc3a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 800bc3e:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 800bc42:	429d      	cmp	r5, r3
 800bc44:	bf28      	it	cs
 800bc46:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 800bc48:	eb05 0b09 	add.w	fp, r5, r9
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	4659      	mov	r1, fp
 800bc50:	f000 fbce 	bl	800c3f0 <jpeg_get_small>
      if (hdr_ptr != NULL)
 800bc54:	b990      	cbnz	r0, 800bc7c <alloc_small+0x94>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 800bc56:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 800bc58:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 800bc5c:	d803      	bhi.n	800bc66 <alloc_small+0x7e>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 800bc5e:	2102      	movs	r1, #2
 800bc60:	4630      	mov	r0, r6
 800bc62:	f7ff ff77 	bl	800bb54 <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 800bc66:	465d      	mov	r5, fp
 800bc68:	e7ee      	b.n	800bc48 <alloc_small+0x60>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 800bc6a:	6883      	ldr	r3, [r0, #8]
 800bc6c:	42a3      	cmp	r3, r4
 800bc6e:	d212      	bcs.n	800bc96 <alloc_small+0xae>
    hdr_ptr = hdr_ptr->hdr.next;
 800bc70:	4682      	mov	sl, r0
 800bc72:	6800      	ldr	r0, [r0, #0]
 800bc74:	e7da      	b.n	800bc2c <alloc_small+0x44>
      slop = extra_pool_slop[pool_id];
 800bc76:	4413      	add	r3, r2
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	e7e0      	b.n	800bc3e <alloc_small+0x56>
    mem->total_space_allocated += min_request + slop;
 800bc7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 800bc7e:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 800bc80:	445b      	add	r3, fp
 800bc82:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 800bc84:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 800bc86:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 800bc88:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 800bc8c:	f1ba 0f00 	cmp.w	sl, #0
 800bc90:	d10b      	bne.n	800bcaa <alloc_small+0xc2>
      mem->small_list[pool_id] = hdr_ptr;
 800bc92:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 800bc96:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 800bc98:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 800bc9a:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 800bc9c:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 800bc9e:	6882      	ldr	r2, [r0, #8]
 800bca0:	1b12      	subs	r2, r2, r4
 800bca2:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 800bca4:	4418      	add	r0, r3
}
 800bca6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 800bcaa:	f8ca 0000 	str.w	r0, [sl]
 800bcae:	e7f2      	b.n	800bc96 <alloc_small+0xae>
 800bcb0:	08012ac4 	.word	0x08012ac4

0800bcb4 <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 800bcb4:	2901      	cmp	r1, #1
{
 800bcb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcba:	4604      	mov	r4, r0
 800bcbc:	460d      	mov	r5, r1
 800bcbe:	4616      	mov	r6, r2
 800bcc0:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800bcc2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 800bcc6:	d005      	beq.n	800bcd4 <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 800bcc8:	6803      	ldr	r3, [r0, #0]
 800bcca:	220f      	movs	r2, #15
 800bccc:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 800bcd4:	223c      	movs	r2, #60	; 0x3c
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f7ff ff85 	bl	800bbe8 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 800bcde:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 800bce0:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 800bce2:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 800bce4:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 800bce6:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 800bcea:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 800bcec:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 800bcee:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 800bcf2:	9a07      	ldr	r2, [sp, #28]
 800bcf4:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 800bcf6:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 800bcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bcfe <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 800bcfe:	2901      	cmp	r1, #1
{
 800bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd04:	4604      	mov	r4, r0
 800bd06:	460d      	mov	r5, r1
 800bd08:	4616      	mov	r6, r2
 800bd0a:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800bd0c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 800bd10:	d005      	beq.n	800bd1e <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 800bd12:	6803      	ldr	r3, [r0, #0]
 800bd14:	220f      	movs	r2, #15
 800bd16:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 800bd1e:	223c      	movs	r2, #60	; 0x3c
 800bd20:	4629      	mov	r1, r5
 800bd22:	4620      	mov	r0, r4
 800bd24:	f7ff ff60 	bl	800bbe8 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 800bd28:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 800bd2a:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 800bd2c:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 800bd2e:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 800bd30:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 800bd34:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 800bd36:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 800bd38:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 800bd3c:	9a07      	ldr	r2, [sp, #28]
 800bd3e:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 800bd40:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 800bd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bd48 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 800bd48:	2901      	cmp	r1, #1
{
 800bd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4e:	4606      	mov	r6, r0
 800bd50:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800bd52:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 800bd54:	d910      	bls.n	800bd78 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 800bd56:	6803      	ldr	r3, [r0, #0]
 800bd58:	220f      	movs	r2, #15
 800bd5a:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 800bd62:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 800bd66:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 800bd68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 800bd6a:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 800bd6c:	bb0b      	cbnz	r3, 800bdb2 <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 800bd6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 800bd70:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 800bd72:	bb69      	cbnz	r1, 800bdd0 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 800bd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 800bd78:	d1f3      	bne.n	800bd62 <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800bd7a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 800bd7c:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800bd7e:	b924      	cbnz	r4, 800bd8a <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800bd80:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 800bd82:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800bd84:	b95f      	cbnz	r7, 800bd9e <free_pool+0x56>
    mem->virt_barray_list = NULL;
 800bd86:	64af      	str	r7, [r5, #72]	; 0x48
 800bd88:	e7eb      	b.n	800bd62 <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 800bd8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd8c:	b12b      	cbz	r3, 800bd9a <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 800bd8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd90:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800bd94:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 800bd96:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 800bd98:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800bd9a:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800bd9c:	e7ef      	b.n	800bd7e <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 800bd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda0:	b12b      	cbz	r3, 800bdae <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 800bda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800bda8:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 800bdaa:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 800bdac:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800bdae:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 800bdb0:	e7e8      	b.n	800bd84 <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 800bdb2:	e9d3 8700 	ldrd	r8, r7, [r3]
 800bdb6:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 800bdb8:	4619      	mov	r1, r3
 800bdba:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 800bdbc:	4417      	add	r7, r2
 800bdbe:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 800bdc0:	463a      	mov	r2, r7
 800bdc2:	f000 fb1e 	bl	800c402 <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 800bdc6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800bdc8:	1bdb      	subs	r3, r3, r7
 800bdca:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 800bdcc:	4643      	mov	r3, r8
 800bdce:	e7cd      	b.n	800bd6c <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 800bdd0:	688a      	ldr	r2, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 800bdd2:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 800bdd4:	e9d1 7400 	ldrd	r7, r4, [r1]
 800bdd8:	4414      	add	r4, r2
 800bdda:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 800bddc:	4622      	mov	r2, r4
 800bdde:	f000 fb0a 	bl	800c3f6 <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 800bde2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 800bde4:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 800bde6:	1b1b      	subs	r3, r3, r4
 800bde8:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 800bdea:	e7c2      	b.n	800bd72 <free_pool+0x2a>

0800bdec <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 800bdec:	b510      	push	{r4, lr}
 800bdee:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	f7ff ffa9 	bl	800bd48 <free_pool>
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f7ff ffa5 	bl	800bd48 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 800bdfe:	4620      	mov	r0, r4
 800be00:	6861      	ldr	r1, [r4, #4]
 800be02:	2254      	movs	r2, #84	; 0x54
 800be04:	f000 faf7 	bl	800c3f6 <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 800be08:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 800be0a:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 800be0c:	6063      	str	r3, [r4, #4]
}
 800be0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 800be12:	f000 bb02 	b.w	800c41a <jpeg_mem_term>

0800be16 <access_virt_barray>:
{
 800be16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 800be1a:	18d7      	adds	r7, r2, r3
{
 800be1c:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 800be1e:	684a      	ldr	r2, [r1, #4]
{
 800be20:	460c      	mov	r4, r1
 800be22:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 800be26:	42ba      	cmp	r2, r7
 800be28:	d304      	bcc.n	800be34 <access_virt_barray+0x1e>
 800be2a:	68ca      	ldr	r2, [r1, #12]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d301      	bcc.n	800be34 <access_virt_barray+0x1e>
 800be30:	680b      	ldr	r3, [r1, #0]
 800be32:	b933      	cbnz	r3, 800be42 <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800be34:	6803      	ldr	r3, [r0, #0]
 800be36:	2217      	movs	r2, #23
 800be38:	9001      	str	r0, [sp, #4]
 800be3a:	615a      	str	r2, [r3, #20]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4798      	blx	r3
 800be40:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 800be42:	69a3      	ldr	r3, [r4, #24]
 800be44:	42ab      	cmp	r3, r5
 800be46:	d803      	bhi.n	800be50 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 800be48:	6922      	ldr	r2, [r4, #16]
 800be4a:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 800be4c:	42bb      	cmp	r3, r7
 800be4e:	d221      	bcs.n	800be94 <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 800be50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be52:	b933      	cbnz	r3, 800be62 <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 800be54:	6803      	ldr	r3, [r0, #0]
 800be56:	2247      	movs	r2, #71	; 0x47
 800be58:	9001      	str	r0, [sp, #4]
 800be5a:	615a      	str	r2, [r3, #20]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4798      	blx	r3
 800be60:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 800be62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be64:	b13b      	cbz	r3, 800be76 <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 800be66:	2201      	movs	r2, #1
 800be68:	4621      	mov	r1, r4
 800be6a:	9001      	str	r0, [sp, #4]
 800be6c:	f7ff fe78 	bl	800bb60 <do_barray_io>
      ptr->dirty = FALSE;
 800be70:	2300      	movs	r3, #0
 800be72:	9801      	ldr	r0, [sp, #4]
 800be74:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 800be76:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 800be78:	2200      	movs	r2, #0
 800be7a:	4621      	mov	r1, r4
 800be7c:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 800be7e:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 800be80:	bf29      	itett	cs
 800be82:	6923      	ldrcs	r3, [r4, #16]
 800be84:	462b      	movcc	r3, r5
 800be86:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 800be88:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 800be8c:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 800be8e:	f7ff fe67 	bl	800bb60 <do_barray_io>
 800be92:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 800be94:	69e6      	ldr	r6, [r4, #28]
 800be96:	42be      	cmp	r6, r7
 800be98:	d21c      	bcs.n	800bed4 <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 800be9a:	42ae      	cmp	r6, r5
 800be9c:	d20c      	bcs.n	800beb8 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 800be9e:	f1b8 0f00 	cmp.w	r8, #0
 800bea2:	d01b      	beq.n	800bedc <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800bea4:	6803      	ldr	r3, [r0, #0]
 800bea6:	2217      	movs	r2, #23
 800bea8:	9001      	str	r0, [sp, #4]
 800beaa:	462e      	mov	r6, r5
 800beac:	615a      	str	r2, [r3, #20]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4798      	blx	r3
    if (writable)
 800beb2:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 800beb4:	61e7      	str	r7, [r4, #28]
 800beb6:	e002      	b.n	800bebe <access_virt_barray+0xa8>
    if (writable)
 800beb8:	f1b8 0f00 	cmp.w	r8, #0
 800bebc:	d1fa      	bne.n	800beb4 <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 800bebe:	6a22      	ldr	r2, [r4, #32]
 800bec0:	b1b2      	cbz	r2, 800bef0 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 800bec2:	68a2      	ldr	r2, [r4, #8]
 800bec4:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 800bec8:	69a2      	ldr	r2, [r4, #24]
 800beca:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 800becc:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 800bece:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 800bed0:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 800bed2:	d305      	bcc.n	800bee0 <access_virt_barray+0xca>
  if (writable)
 800bed4:	f1b8 0f00 	cmp.w	r8, #0
 800bed8:	d10d      	bne.n	800bef6 <access_virt_barray+0xe0>
 800beda:	e00e      	b.n	800befa <access_virt_barray+0xe4>
 800bedc:	462e      	mov	r6, r5
 800bede:	e7ee      	b.n	800bebe <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 800bee0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bee4:	464a      	mov	r2, r9
 800bee6:	2100      	movs	r1, #0
	undef_row++;
 800bee8:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 800beea:	f001 fcaf 	bl	800d84c <memset>
	undef_row++;
 800beee:	e7ee      	b.n	800bece <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 800bef0:	f1b8 0f00 	cmp.w	r8, #0
 800bef4:	d009      	beq.n	800bf0a <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 800bef6:	2301      	movs	r3, #1
 800bef8:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 800befa:	69a0      	ldr	r0, [r4, #24]
 800befc:	1a2d      	subs	r5, r5, r0
 800befe:	6820      	ldr	r0, [r4, #0]
}
 800bf00:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800bf04:	b003      	add	sp, #12
 800bf06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800bf0a:	6803      	ldr	r3, [r0, #0]
 800bf0c:	2217      	movs	r2, #23
 800bf0e:	615a      	str	r2, [r3, #20]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4798      	blx	r3
  if (writable)
 800bf14:	e7f1      	b.n	800befa <access_virt_barray+0xe4>

0800bf16 <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 800bf16:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800bf1a:	429a      	cmp	r2, r3
{
 800bf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf20:	4606      	mov	r6, r0
 800bf22:	4688      	mov	r8, r1
 800bf24:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800bf26:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 800bf28:	d902      	bls.n	800bf30 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 800bf2a:	2103      	movs	r1, #3
 800bf2c:	f7ff fe12 	bl	800bb54 <out_of_memory>
  if (odd_bytes > 0)
 800bf30:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 800bf34:	bf1c      	itt	ne
 800bf36:	3408      	addne	r4, #8
 800bf38:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 800bf3a:	f1b8 0f01 	cmp.w	r8, #1
 800bf3e:	d906      	bls.n	800bf4e <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 800bf40:	6833      	ldr	r3, [r6, #0]
 800bf42:	220f      	movs	r2, #15
 800bf44:	4630      	mov	r0, r6
 800bf46:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 800bf4e:	f104 0110 	add.w	r1, r4, #16
 800bf52:	4630      	mov	r0, r6
 800bf54:	f000 fa52 	bl	800c3fc <jpeg_get_large>
  if (hdr_ptr == NULL)
 800bf58:	4605      	mov	r5, r0
 800bf5a:	b918      	cbnz	r0, 800bf64 <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 800bf5c:	2104      	movs	r1, #4
 800bf5e:	4630      	mov	r0, r6
 800bf60:	f7ff fdf8 	bl	800bb54 <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 800bf64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800bf66:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 800bf6a:	3310      	adds	r3, #16
 800bf6c:	4423      	add	r3, r4
 800bf6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 800bf70:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 800bf74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 800bf76:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 800bf7e:	63fd      	str	r5, [r7, #60]	; 0x3c
}
 800bf80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf84 <alloc_barray>:
{
 800bf84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 800bf88:	01d7      	lsls	r7, r2, #7
{
 800bf8a:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 800bf8c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 800bf90:	4680      	mov	r8, r0
 800bf92:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800bf94:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 800bf96:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 800bf98:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 800bf9c:	d904      	bls.n	800bfa8 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 800bf9e:	6803      	ldr	r3, [r0, #0]
 800bfa0:	2248      	movs	r2, #72	; 0x48
 800bfa2:	615a      	str	r2, [r3, #20]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4798      	blx	r3
  if (ltemp < (long) numrows)
 800bfa8:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 800bfaa:	ea4f 0285 	mov.w	r2, r5, lsl #2
 800bfae:	4651      	mov	r1, sl
 800bfb0:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 800bfb2:	bfa8      	it	ge
 800bfb4:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 800bfb6:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 800bfb8:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 800bfba:	f7ff fe15 	bl	800bbe8 <alloc_small>
 800bfbe:	4681      	mov	r9, r0
  while (currow < numrows) {
 800bfc0:	42ae      	cmp	r6, r5
 800bfc2:	d302      	bcc.n	800bfca <alloc_barray+0x46>
}
 800bfc4:	4648      	mov	r0, r9
 800bfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 800bfca:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 800bfcc:	4651      	mov	r1, sl
 800bfce:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 800bfd0:	429c      	cmp	r4, r3
 800bfd2:	bf28      	it	cs
 800bfd4:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 800bfd6:	fb04 f207 	mul.w	r2, r4, r7
 800bfda:	f7ff ff9c 	bl	800bf16 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 800bfde:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 800bfe2:	4426      	add	r6, r4
 800bfe4:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d0e9      	beq.n	800bfc0 <alloc_barray+0x3c>
      result[currow++] = workspace;
 800bfec:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 800bff0:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 800bff2:	e7f9      	b.n	800bfe8 <alloc_barray+0x64>

0800bff4 <alloc_sarray>:
{
 800bff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff8:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 800bffa:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 800bffe:	4607      	mov	r7, r0
 800c000:	468a      	mov	sl, r1
  if (ltemp <= 0)
 800c002:	429a      	cmp	r2, r3
{
 800c004:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800c006:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 800c008:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 800c00c:	d904      	bls.n	800c018 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 800c00e:	6803      	ldr	r3, [r0, #0]
 800c010:	2248      	movs	r2, #72	; 0x48
 800c012:	615a      	str	r2, [r3, #20]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4798      	blx	r3
  if (ltemp < (long) numrows)
 800c018:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 800c01a:	ea4f 0285 	mov.w	r2, r5, lsl #2
 800c01e:	4651      	mov	r1, sl
 800c020:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 800c022:	bfa8      	it	ge
 800c024:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 800c026:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 800c028:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 800c02a:	f7ff fddd 	bl	800bbe8 <alloc_small>
 800c02e:	4681      	mov	r9, r0
  while (currow < numrows) {
 800c030:	42ae      	cmp	r6, r5
 800c032:	d302      	bcc.n	800c03a <alloc_sarray+0x46>
}
 800c034:	4648      	mov	r0, r9
 800c036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 800c03a:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 800c03c:	4651      	mov	r1, sl
 800c03e:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 800c040:	429c      	cmp	r4, r3
 800c042:	bf28      	it	cs
 800c044:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 800c046:	fb04 f208 	mul.w	r2, r4, r8
 800c04a:	f7ff ff64 	bl	800bf16 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 800c04e:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 800c052:	4426      	add	r6, r4
 800c054:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 800c058:	4293      	cmp	r3, r2
 800c05a:	d0e9      	beq.n	800c030 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 800c05c:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 800c060:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 800c062:	e7f9      	b.n	800c058 <alloc_sarray+0x64>

0800c064 <realize_virt_arrays>:
{
 800c064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 800c068:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 800c06c:	2500      	movs	r5, #0
{
 800c06e:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800c070:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 800c074:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800c076:	bb03      	cbnz	r3, 800c0ba <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800c078:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 800c07c:	bb43      	cbnz	r3, 800c0d0 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 800c07e:	2e00      	cmp	r6, #0
 800c080:	dd19      	ble.n	800c0b6 <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 800c082:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800c086:	462a      	mov	r2, r5
 800c088:	4631      	mov	r1, r6
 800c08a:	4638      	mov	r0, r7
 800c08c:	f000 f9bc 	bl	800c408 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 800c090:	4285      	cmp	r5, r0
 800c092:	dd2a      	ble.n	800c0ea <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 800c094:	fb90 f6f6 	sdiv	r6, r0, r6
 800c098:	2e01      	cmp	r6, #1
 800c09a:	bfb8      	it	lt
 800c09c:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800c09e:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 800c0a2:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 800c0a6:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800c0a8:	bb0c      	cbnz	r4, 800c0ee <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800c0aa:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 800c0ae:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800c0b2:	2d00      	cmp	r5, #0
 800c0b4:	d141      	bne.n	800c13a <realize_virt_arrays+0xd6>
}
 800c0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	b932      	cbnz	r2, 800c0cc <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 800c0be:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 800c0c2:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 800c0c6:	6859      	ldr	r1, [r3, #4]
 800c0c8:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800c0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ce:	e7d2      	b.n	800c076 <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	b942      	cbnz	r2, 800c0e6 <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 800c0d4:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 800c0d8:	4351      	muls	r1, r2
 800c0da:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 800c0de:	6859      	ldr	r1, [r3, #4]
 800c0e0:	434a      	muls	r2, r1
 800c0e2:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800c0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e8:	e7c8      	b.n	800c07c <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 800c0ea:	4e27      	ldr	r6, [pc, #156]	; (800c188 <realize_virt_arrays+0x124>)
 800c0ec:	e7d7      	b.n	800c09e <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	b9ab      	cbnz	r3, 800c11e <realize_virt_arrays+0xba>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 800c0f2:	6862      	ldr	r2, [r4, #4]
 800c0f4:	68e1      	ldr	r1, [r4, #12]
 800c0f6:	1e53      	subs	r3, r2, #1
 800c0f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c0fc:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 800c0fe:	429e      	cmp	r6, r3
 800c100:	db0f      	blt.n	800c122 <realize_virt_arrays+0xbe>
	sptr->rows_in_mem = sptr->rows_in_array;
 800c102:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 800c104:	6923      	ldr	r3, [r4, #16]
 800c106:	2101      	movs	r1, #1
 800c108:	68a2      	ldr	r2, [r4, #8]
 800c10a:	4638      	mov	r0, r7
 800c10c:	f7ff ff72 	bl	800bff4 <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 800c110:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 800c114:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 800c116:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 800c118:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 800c11a:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 800c11e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800c120:	e7c2      	b.n	800c0a8 <realize_virt_arrays+0x44>
				(long) sptr->samplesperrow *
 800c122:	68a3      	ldr	r3, [r4, #8]
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 800c124:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 800c126:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 800c128:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 800c12a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800c12e:	435a      	muls	r2, r3
 800c130:	f000 f96c 	bl	800c40c <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 800c134:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 800c138:	e7e4      	b.n	800c104 <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 800c13a:	682b      	ldr	r3, [r5, #0]
 800c13c:	b9ab      	cbnz	r3, 800c16a <realize_virt_arrays+0x106>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 800c13e:	6868      	ldr	r0, [r5, #4]
 800c140:	68e9      	ldr	r1, [r5, #12]
 800c142:	1e43      	subs	r3, r0, #1
 800c144:	fbb3 f3f1 	udiv	r3, r3, r1
 800c148:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 800c14a:	429e      	cmp	r6, r3
 800c14c:	db0f      	blt.n	800c16e <realize_virt_arrays+0x10a>
	bptr->rows_in_mem = bptr->rows_in_array;
 800c14e:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 800c150:	692b      	ldr	r3, [r5, #16]
 800c152:	2101      	movs	r1, #1
 800c154:	68aa      	ldr	r2, [r5, #8]
 800c156:	4638      	mov	r0, r7
 800c158:	f7ff ff14 	bl	800bf84 <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 800c15c:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 800c160:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 800c162:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 800c164:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 800c166:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 800c16a:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 800c16c:	e7a1      	b.n	800c0b2 <realize_virt_arrays+0x4e>
				(long) bptr->blocksperrow *
 800c16e:	68aa      	ldr	r2, [r5, #8]
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 800c170:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 800c172:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 800c174:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 800c176:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 800c178:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800c17c:	01d2      	lsls	r2, r2, #7
 800c17e:	f000 f945 	bl	800c40c <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 800c182:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800c186:	e7e3      	b.n	800c150 <realize_virt_arrays+0xec>
 800c188:	3b9aca00 	.word	0x3b9aca00

0800c18c <access_virt_sarray>:
{
 800c18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 800c190:	eb02 0803 	add.w	r8, r2, r3
{
 800c194:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 800c196:	684a      	ldr	r2, [r1, #4]
{
 800c198:	b087      	sub	sp, #28
 800c19a:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 800c19c:	4542      	cmp	r2, r8
{
 800c19e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 800c1a2:	d304      	bcc.n	800c1ae <access_virt_sarray+0x22>
 800c1a4:	68ca      	ldr	r2, [r1, #12]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d301      	bcc.n	800c1ae <access_virt_sarray+0x22>
 800c1aa:	680b      	ldr	r3, [r1, #0]
 800c1ac:	b933      	cbnz	r3, 800c1bc <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800c1ae:	6803      	ldr	r3, [r0, #0]
 800c1b0:	2217      	movs	r2, #23
 800c1b2:	9003      	str	r0, [sp, #12]
 800c1b4:	615a      	str	r2, [r3, #20]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4798      	blx	r3
 800c1ba:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 800c1bc:	69a3      	ldr	r3, [r4, #24]
 800c1be:	42ab      	cmp	r3, r5
 800c1c0:	d80c      	bhi.n	800c1dc <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 800c1c2:	6922      	ldr	r2, [r4, #16]
 800c1c4:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 800c1c6:	4543      	cmp	r3, r8
 800c1c8:	d308      	bcc.n	800c1dc <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 800c1ca:	69e6      	ldr	r6, [r4, #28]
 800c1cc:	4546      	cmp	r6, r8
 800c1ce:	f0c0 8081 	bcc.w	800c2d4 <access_virt_sarray+0x148>
  if (writable)
 800c1d2:	f1ba 0f00 	cmp.w	sl, #0
 800c1d6:	f040 80a8 	bne.w	800c32a <access_virt_sarray+0x19e>
 800c1da:	e0a8      	b.n	800c32e <access_virt_sarray+0x1a2>
    if (! ptr->b_s_open)
 800c1dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c1de:	b933      	cbnz	r3, 800c1ee <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 800c1e0:	6803      	ldr	r3, [r0, #0]
 800c1e2:	2247      	movs	r2, #71	; 0x47
 800c1e4:	9003      	str	r0, [sp, #12]
 800c1e6:	615a      	str	r2, [r3, #20]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4798      	blx	r3
 800c1ec:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 800c1ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1f0:	b17b      	cbz	r3, 800c212 <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 800c1f2:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800c1f6:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 800c1fa:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800c1fc:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 800c200:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800c204:	6922      	ldr	r2, [r4, #16]
 800c206:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800c208:	e9d4 c706 	ldrd	ip, r7, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800c20c:	dc3c      	bgt.n	800c288 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 800c20e:	2300      	movs	r3, #0
 800c210:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 800c212:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800c214:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 800c218:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 800c21a:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 800c21e:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 800c220:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 800c224:	bf2a      	itet	cs
 800c226:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 800c22a:	462b      	movcc	r3, r5
 800c22c:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 800c230:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 800c232:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800c236:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800c238:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800c23a:	454a      	cmp	r2, r9
 800c23c:	ddc5      	ble.n	800c1ca <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800c23e:	eba2 0209 	sub.w	r2, r2, r9
 800c242:	6967      	ldr	r7, [r4, #20]
 800c244:	42ba      	cmp	r2, r7
 800c246:	bfa8      	it	ge
 800c248:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 800c24a:	69a7      	ldr	r7, [r4, #24]
 800c24c:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800c24e:	1bf6      	subs	r6, r6, r7
 800c250:	42b2      	cmp	r2, r6
 800c252:	bfa8      	it	ge
 800c254:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 800c256:	6866      	ldr	r6, [r4, #4]
 800c258:	1bf6      	subs	r6, r6, r7
 800c25a:	42b2      	cmp	r2, r6
 800c25c:	bfa8      	it	ge
 800c25e:	4632      	movge	r2, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 800c260:	2a00      	cmp	r2, #0
 800c262:	ddb2      	ble.n	800c1ca <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 800c264:	fb02 f60b 	mul.w	r6, r2, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 800c268:	6822      	ldr	r2, [r4, #0]
 800c26a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800c26c:	9600      	str	r6, [sp, #0]
 800c26e:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 800c272:	9305      	str	r3, [sp, #20]
 800c274:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800c278:	47b8      	blx	r7
    file_offset += byte_count;
 800c27a:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800c27c:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 800c27e:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800c280:	4491      	add	r9, r2
 800c282:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 800c286:	e7d6      	b.n	800c236 <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800c288:	eba2 0209 	sub.w	r2, r2, r9
 800c28c:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 800c28e:	44cc      	add	ip, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800c290:	42b2      	cmp	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800c292:	eba7 070c 	sub.w	r7, r7, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 800c296:	bfa8      	it	ge
 800c298:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 800c29a:	6866      	ldr	r6, [r4, #4]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 800c29c:	42ba      	cmp	r2, r7
 800c29e:	bfa8      	it	ge
 800c2a0:	463a      	movge	r2, r7
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 800c2a2:	eba6 070c 	sub.w	r7, r6, ip
 800c2a6:	42ba      	cmp	r2, r7
 800c2a8:	bfa8      	it	ge
 800c2aa:	463a      	movge	r2, r7
    if (rows <= 0)		/* this chunk might be past end of file! */
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	ddae      	ble.n	800c20e <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 800c2b0:	fb02 f70b 	mul.w	r7, r2, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 800c2b4:	6822      	ldr	r2, [r4, #0]
 800c2b6:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800c2b8:	9700      	str	r7, [sp, #0]
 800c2ba:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 800c2be:	9305      	str	r3, [sp, #20]
 800c2c0:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800c2c4:	47b0      	blx	r6
    file_offset += byte_count;
 800c2c6:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800c2c8:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 800c2ca:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 800c2cc:	4491      	add	r9, r2
 800c2ce:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 800c2d2:	e797      	b.n	800c204 <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 800c2d4:	42ae      	cmp	r6, r5
 800c2d6:	d20d      	bcs.n	800c2f4 <access_virt_sarray+0x168>
      if (writable)		/* writer skipped over a section of array */
 800c2d8:	f1ba 0f00 	cmp.w	sl, #0
 800c2dc:	d020      	beq.n	800c320 <access_virt_sarray+0x194>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800c2de:	6803      	ldr	r3, [r0, #0]
 800c2e0:	2217      	movs	r2, #23
 800c2e2:	9003      	str	r0, [sp, #12]
 800c2e4:	462e      	mov	r6, r5
 800c2e6:	615a      	str	r2, [r3, #20]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4798      	blx	r3
    if (writable)
 800c2ec:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 800c2ee:	f8c4 801c 	str.w	r8, [r4, #28]
 800c2f2:	e002      	b.n	800c2fa <access_virt_sarray+0x16e>
    if (writable)
 800c2f4:	f1ba 0f00 	cmp.w	sl, #0
 800c2f8:	d1f9      	bne.n	800c2ee <access_virt_sarray+0x162>
    if (ptr->pre_zero) {
 800c2fa:	6a22      	ldr	r2, [r4, #32]
 800c2fc:	b192      	cbz	r2, 800c324 <access_virt_sarray+0x198>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 800c2fe:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 800c300:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 800c302:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 800c304:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 800c308:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 800c30a:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 800c30c:	f4bf af61 	bcs.w	800c1d2 <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 800c310:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c314:	463a      	mov	r2, r7
 800c316:	2100      	movs	r1, #0
	undef_row++;
 800c318:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 800c31a:	f001 fa97 	bl	800d84c <memset>
	undef_row++;
 800c31e:	e7f3      	b.n	800c308 <access_virt_sarray+0x17c>
 800c320:	462e      	mov	r6, r5
 800c322:	e7ea      	b.n	800c2fa <access_virt_sarray+0x16e>
      if (! writable)		/* reader looking at undefined data */
 800c324:	f1ba 0f00 	cmp.w	sl, #0
 800c328:	d009      	beq.n	800c33e <access_virt_sarray+0x1b2>
    ptr->dirty = TRUE;
 800c32a:	2301      	movs	r3, #1
 800c32c:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 800c32e:	69a0      	ldr	r0, [r4, #24]
 800c330:	1a2d      	subs	r5, r5, r0
 800c332:	6820      	ldr	r0, [r4, #0]
}
 800c334:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800c338:	b007      	add	sp, #28
 800c33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 800c33e:	6803      	ldr	r3, [r0, #0]
 800c340:	2217      	movs	r2, #23
 800c342:	615a      	str	r2, [r3, #20]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4798      	blx	r3
  if (writable)
 800c348:	e7f1      	b.n	800c32e <access_virt_sarray+0x1a2>
	...

0800c34c <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 800c34c:	2300      	movs	r3, #0
{
 800c34e:	b570      	push	{r4, r5, r6, lr}
 800c350:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 800c352:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 800c354:	f000 f85f 	bl	800c416 <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 800c358:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 800c35a:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 800c35c:	4628      	mov	r0, r5
 800c35e:	f000 f847 	bl	800c3f0 <jpeg_get_small>

  if (mem == NULL) {
 800c362:	4604      	mov	r4, r0
 800c364:	b948      	cbnz	r0, 800c37a <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 800c366:	4628      	mov	r0, r5
 800c368:	f000 f857 	bl	800c41a <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	2238      	movs	r2, #56	; 0x38
 800c370:	4628      	mov	r0, r5
 800c372:	e9c3 2405 	strd	r2, r4, [r3, #20]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 800c37a:	4b12      	ldr	r3, [pc, #72]	; (800c3c4 <jinit_memory_mgr+0x78>)
 800c37c:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 800c37e:	4b12      	ldr	r3, [pc, #72]	; (800c3c8 <jinit_memory_mgr+0x7c>)
 800c380:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 800c382:	4b12      	ldr	r3, [pc, #72]	; (800c3cc <jinit_memory_mgr+0x80>)
 800c384:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 800c386:	4b12      	ldr	r3, [pc, #72]	; (800c3d0 <jinit_memory_mgr+0x84>)
 800c388:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 800c38a:	4b12      	ldr	r3, [pc, #72]	; (800c3d4 <jinit_memory_mgr+0x88>)
 800c38c:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 800c38e:	4b12      	ldr	r3, [pc, #72]	; (800c3d8 <jinit_memory_mgr+0x8c>)
 800c390:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 800c392:	4b12      	ldr	r3, [pc, #72]	; (800c3dc <jinit_memory_mgr+0x90>)
 800c394:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 800c396:	4b12      	ldr	r3, [pc, #72]	; (800c3e0 <jinit_memory_mgr+0x94>)
 800c398:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 800c39a:	4b12      	ldr	r3, [pc, #72]	; (800c3e4 <jinit_memory_mgr+0x98>)
 800c39c:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 800c39e:	4b12      	ldr	r3, [pc, #72]	; (800c3e8 <jinit_memory_mgr+0x9c>)
 800c3a0:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 800c3a2:	4b12      	ldr	r3, [pc, #72]	; (800c3ec <jinit_memory_mgr+0xa0>)
 800c3a4:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 800c3a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 800c3aa:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 800c3b2:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 800c3b4:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 800c3b6:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 800c3b8:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 800c3bc:	2354      	movs	r3, #84	; 0x54
 800c3be:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 800c3c0:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	0800bbe9 	.word	0x0800bbe9
 800c3c8:	0800bf17 	.word	0x0800bf17
 800c3cc:	0800bff5 	.word	0x0800bff5
 800c3d0:	0800bf85 	.word	0x0800bf85
 800c3d4:	0800bcff 	.word	0x0800bcff
 800c3d8:	0800bcb5 	.word	0x0800bcb5
 800c3dc:	0800c065 	.word	0x0800c065
 800c3e0:	0800c18d 	.word	0x0800c18d
 800c3e4:	0800be17 	.word	0x0800be17
 800c3e8:	0800bd49 	.word	0x0800bd49
 800c3ec:	0800bded 	.word	0x0800bded

0800c3f0 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	f001 ba0d 	b.w	800d810 <malloc>

0800c3f6 <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 800c3f6:	4608      	mov	r0, r1
 800c3f8:	f001 ba12 	b.w	800d820 <free>

0800c3fc <jpeg_get_large>:
 800c3fc:	4608      	mov	r0, r1
 800c3fe:	f001 ba07 	b.w	800d810 <malloc>

0800c402 <jpeg_free_large>:
 800c402:	4608      	mov	r0, r1
 800c404:	f001 ba0c 	b.w	800d820 <free>

0800c408 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 800c408:	4610      	mov	r0, r2
 800c40a:	4770      	bx	lr

0800c40c <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 800c40c:	6803      	ldr	r3, [r0, #0]
 800c40e:	2233      	movs	r2, #51	; 0x33
 800c410:	615a      	str	r2, [r3, #20]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4718      	bx	r3

0800c416 <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 800c416:	2000      	movs	r0, #0
 800c418:	4770      	bx	lr

0800c41a <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 800c41a:	4770      	bx	lr

0800c41c <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 800c41c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 800c420:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 800c424:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 800c426:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 800c42a:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 800c42c:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 800c42e:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 800c432:	bf16      	itet	ne
 800c434:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 800c436:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 800c43a:	461e      	movne	r6, r3
 800c43c:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 800c43e:	6843      	ldr	r3, [r0, #4]
 800c440:	f506 7280 	add.w	r2, r6, #256	; 0x100
 800c444:	689f      	ldr	r7, [r3, #8]
 800c446:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800c448:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 800c44a:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800c44e:	f105 0e20 	add.w	lr, r5, #32

  for (i = 0; i < cinfo->out_color_components; i++) {
 800c452:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 800c454:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 800c456:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800c458:	429a      	cmp	r2, r3
 800c45a:	dc01      	bgt.n	800c460 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 800c45c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 800c460:	f85e 1b04 	ldr.w	r1, [lr], #4
      cquantize->colorindex[i] += MAXJSAMPLE;
 800c464:	009f      	lsls	r7, r3, #2
 800c466:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 800c468:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 800c46c:	b126      	cbz	r6, 800c478 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 800c46e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c472:	32ff      	adds	r2, #255	; 0xff
 800c474:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 800c478:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 800c47c:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 800c480:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 800c482:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 800c484:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 800c488:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 800c48a:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 800c48e:	428f      	cmp	r7, r1
 800c490:	db0a      	blt.n	800c4a8 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 800c492:	fb10 fb0c 	smulbb	fp, r0, ip
 800c496:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 800c49a:	3101      	adds	r1, #1
 800c49c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c4a0:	d1f5      	bne.n	800c48e <create_colorindex+0x72>
    if (pad)
 800c4a2:	b93e      	cbnz	r6, 800c4b4 <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	e7d6      	b.n	800c456 <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 800c4a8:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 800c4aa:	fb08 a700 	mla	r7, r8, r0, sl
 800c4ae:	fb97 f7f9 	sdiv	r7, r7, r9
 800c4b2:	e7ec      	b.n	800c48e <create_colorindex+0x72>
 800c4b4:	4611      	mov	r1, r2
 800c4b6:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 800c4ba:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 800c4be:	f892 9000 	ldrb.w	r9, [r2]
 800c4c2:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 800c4c6:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 800c4c8:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 800c4cc:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 800c4d0:	d1f5      	bne.n	800c4be <create_colorindex+0xa2>
 800c4d2:	e7e7      	b.n	800c4a4 <create_colorindex+0x88>

0800c4d4 <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 800c4d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 800c4d8:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 800c4dc:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 800c4de:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800c4e2:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 800c4e6:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 800c4ea:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 800c4ec:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 800c4ee:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 800c4f0:	4540      	cmp	r0, r8
 800c4f2:	db02      	blt.n	800c4fa <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 800c4f4:	b003      	add	sp, #12
 800c4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 800c4fa:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 800c4fe:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 800c500:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 800c504:	eb04 0a03 	add.w	sl, r4, r3
 800c508:	4554      	cmp	r4, sl
 800c50a:	d10f      	bne.n	800c52c <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 800c50c:	3001      	adds	r0, #1
 800c50e:	e7ef      	b.n	800c4f0 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 800c510:	f815 b003 	ldrb.w	fp, [r5, r3]
 800c514:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 800c518:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 800c51a:	f817 700b 	ldrb.w	r7, [r7, fp]
 800c51e:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 800c520:	4563      	cmp	r3, ip
 800c522:	dbf5      	blt.n	800c510 <color_quantize+0x3c>
 800c524:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 800c526:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 800c52a:	e7ed      	b.n	800c508 <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 800c52c:	2300      	movs	r3, #0
      pixcode = 0;
 800c52e:	461e      	mov	r6, r3
 800c530:	e7f6      	b.n	800c520 <color_quantize+0x4c>

0800c532 <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 800c532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 800c536:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 800c53a:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 800c53e:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 800c540:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 800c542:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 800c546:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 800c54a:	4298      	cmp	r0, r3
 800c54c:	db01      	blt.n	800c552 <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 800c54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 800c552:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 800c556:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800c55a:	eb05 0a09 	add.w	sl, r5, r9
 800c55e:	4555      	cmp	r5, sl
 800c560:	f104 0403 	add.w	r4, r4, #3
 800c564:	d101      	bne.n	800c56a <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 800c566:	3001      	adds	r0, #1
 800c568:	e7ef      	b.n	800c54a <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 800c56a:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800c56e:	f81c 7006 	ldrb.w	r7, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 800c572:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 800c576:	f81e 6006 	ldrb.w	r6, [lr, r6]
 800c57a:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 800c57c:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800c580:	f818 6006 	ldrb.w	r6, [r8, r6]
 800c584:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 800c586:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 800c58a:	e7e8      	b.n	800c55e <color_quantize3+0x2c>

0800c58c <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 800c58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c590:	469a      	mov	sl, r3
 800c592:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 800c594:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 800c598:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 800c59c:	699a      	ldr	r2, [r3, #24]
 800c59e:	6811      	ldr	r1, [r2, #0]
 800c5a0:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 800c5a2:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 800c5a4:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 800c5a6:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 800c5a8:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 800c5aa:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 800c5ac:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800c5ae:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 800c5b0:	4551      	cmp	r1, sl
 800c5b2:	db02      	blt.n	800c5ba <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 800c5b4:	b00b      	add	sp, #44	; 0x2c
 800c5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 800c5ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 800c5bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5be:	9c07      	ldr	r4, [sp, #28]
 800c5c0:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 800c5c4:	0190      	lsls	r0, r2, #6
 800c5c6:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800c5ca:	9002      	str	r0, [sp, #8]
 800c5cc:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 800c5d0:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 800c5d2:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 800c5d4:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 800c5d8:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 800c5da:	9808      	ldr	r0, [sp, #32]
 800c5dc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800c5e0:	4575      	cmp	r5, lr
 800c5e2:	f100 0003 	add.w	r0, r0, #3
 800c5e6:	d106      	bne.n	800c5f6 <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 800c5e8:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 800c5ea:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 800c5ec:	3201      	adds	r2, #1
 800c5ee:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 800c5f2:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 800c5f4:	e7dc      	b.n	800c5b0 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 800c5f6:	9e02      	ldr	r6, [sp, #8]
 800c5f8:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 800c5fc:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 800c600:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 800c602:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 800c604:	f858 7006 	ldr.w	r7, [r8, r6]
 800c608:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 800c60a:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 800c60c:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 800c610:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 800c614:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 800c618:	f859 7006 	ldr.w	r7, [r9, r6]
 800c61c:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 800c61e:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 800c620:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 800c624:	5996      	ldr	r6, [r2, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 800c626:	44bb      	add	fp, r7
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 800c628:	9a06      	ldr	r2, [sp, #24]
 800c62a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 800c62e:	4417      	add	r7, r2
 800c630:	5dbe      	ldrb	r6, [r7, r6]
 800c632:	44b3      	add	fp, r6
      *output_ptr++ = (JSAMPLE) pixcode;
 800c634:	f805 bb01 	strb.w	fp, [r5], #1
    for (col = width; col > 0; col--) {
 800c638:	e7d2      	b.n	800c5e0 <quantize3_ord_dither+0x54>

0800c63a <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 800c63a:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 800c63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 800c63e:	3202      	adds	r2, #2
 800c640:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 800c644:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 800c646:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 800c648:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 800c64a:	3644      	adds	r6, #68	; 0x44
 800c64c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c64e:	42bb      	cmp	r3, r7
 800c650:	dc00      	bgt.n	800c654 <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 800c652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 800c654:	6863      	ldr	r3, [r4, #4]
 800c656:	462a      	mov	r2, r5
 800c658:	2101      	movs	r1, #1
 800c65a:	4620      	mov	r0, r4
 800c65c:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 800c65e:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 800c660:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 800c662:	f846 0b04 	str.w	r0, [r6], #4
  for (i = 0; i < cinfo->out_color_components; i++) {
 800c666:	e7f1      	b.n	800c64c <alloc_fs_workspace+0x12>

0800c668 <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 800c668:	4770      	bx	lr

0800c66a <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 800c66a:	6803      	ldr	r3, [r0, #0]
 800c66c:	222f      	movs	r2, #47	; 0x2f
 800c66e:	615a      	str	r2, [r3, #20]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4718      	bx	r3

0800c674 <start_pass_1_quant>:
{
 800c674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 800c678:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 800c67c:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 800c67e:	692b      	ldr	r3, [r5, #16]
 800c680:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 800c684:	696b      	ldr	r3, [r5, #20]
 800c686:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 800c68a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d00b      	beq.n	800c6aa <start_pass_1_quant+0x36>
 800c692:	2b02      	cmp	r3, #2
 800c694:	d05e      	beq.n	800c754 <start_pass_1_quant+0xe0>
 800c696:	2b00      	cmp	r3, #0
 800c698:	d174      	bne.n	800c784 <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 800c69a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800c69c:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 800c69e:	bf0c      	ite	eq
 800c6a0:	4b3c      	ldreq	r3, [pc, #240]	; (800c794 <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 800c6a2:	4b3d      	ldrne	r3, [pc, #244]	; (800c798 <start_pass_1_quant+0x124>)
 800c6a4:	606b      	str	r3, [r5, #4]
}
 800c6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 800c6aa:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 800c6ac:	4b3b      	ldr	r3, [pc, #236]	; (800c79c <start_pass_1_quant+0x128>)
 800c6ae:	4a3c      	ldr	r2, [pc, #240]	; (800c7a0 <start_pass_1_quant+0x12c>)
 800c6b0:	2903      	cmp	r1, #3
 800c6b2:	bf18      	it	ne
 800c6b4:	4613      	movne	r3, r2
 800c6b6:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 800c6bc:	69eb      	ldr	r3, [r5, #28]
 800c6be:	b90b      	cbnz	r3, 800c6c4 <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 800c6c0:	f7ff feac 	bl	800c41c <create_colorindex>
    if (cquantize->odither[0] == NULL)
 800c6c4:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800c6c6:	2d00      	cmp	r5, #0
 800c6c8:	d1ed      	bne.n	800c6a6 <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 800c6ca:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 800c6ce:	f107 0820 	add.w	r8, r7, #32
 800c6d2:	4646      	mov	r6, r8
 800c6d4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c6d6:	429d      	cmp	r5, r3
 800c6d8:	dae5      	bge.n	800c6a6 <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 800c6da:	f856 9b04 	ldr.w	r9, [r6], #4
    for (j = 0; j < i; j++) {
 800c6de:	4642      	mov	r2, r8
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	429d      	cmp	r5, r3
 800c6e4:	d007      	beq.n	800c6f6 <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 800c6e6:	f852 1b04 	ldr.w	r1, [r2], #4
 800c6ea:	4589      	cmp	r9, r1
 800c6ec:	d130      	bne.n	800c750 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 800c6ee:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c6f2:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 800c6f4:	bb48      	cbnz	r0, 800c74a <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c6f6:	6863      	ldr	r3, [r4, #4]
 800c6f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	4620      	mov	r0, r4
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 800c704:	f109 32ff 	add.w	r2, r9, #4294967295
 800c708:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 800c70c:	f8df c098 	ldr.w	ip, [pc, #152]	; 800c7a8 <start_pass_1_quant+0x134>
 800c710:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 800c712:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 800c716:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 800c71a:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 800c71c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c720:	005b      	lsls	r3, r3, #1
 800c722:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 800c726:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 800c72a:	bf45      	ittet	mi
 800c72c:	425b      	negmi	r3, r3
 800c72e:	fb93 f3f2 	sdivmi	r3, r3, r2
 800c732:	fb93 f3f2 	sdivpl	r3, r3, r2
 800c736:	425b      	negmi	r3, r3
 800c738:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 800c73c:	458e      	cmp	lr, r1
 800c73e:	d1ed      	bne.n	800c71c <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 800c740:	3140      	adds	r1, #64	; 0x40
 800c742:	f10c 0c10 	add.w	ip, ip, #16
 800c746:	458a      	cmp	sl, r1
 800c748:	d1e5      	bne.n	800c716 <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 800c74a:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 800c74c:	6130      	str	r0, [r6, #16]
  for (i = 0; i < cinfo->out_color_components; i++) {
 800c74e:	e7c1      	b.n	800c6d4 <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 800c750:	3301      	adds	r3, #1
 800c752:	e7c6      	b.n	800c6e2 <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 800c754:	4b13      	ldr	r3, [pc, #76]	; (800c7a4 <start_pass_1_quant+0x130>)
 800c756:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 800c758:	2300      	movs	r3, #0
 800c75a:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 800c75c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c75e:	b90b      	cbnz	r3, 800c764 <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 800c760:	f7ff ff6b 	bl	800c63a <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 800c764:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c766:	3544      	adds	r5, #68	; 0x44
    for (i = 0; i < cinfo->out_color_components; i++)
 800c768:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 800c76a:	3202      	adds	r2, #2
 800c76c:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 800c76e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c770:	42bb      	cmp	r3, r7
 800c772:	dd98      	ble.n	800c6a6 <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 800c774:	4632      	mov	r2, r6
 800c776:	2100      	movs	r1, #0
 800c778:	f855 0b04 	ldr.w	r0, [r5], #4
    for (i = 0; i < cinfo->out_color_components; i++)
 800c77c:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 800c77e:	f001 f865 	bl	800d84c <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 800c782:	e7f4      	b.n	800c76e <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 800c784:	6803      	ldr	r3, [r0, #0]
 800c786:	2231      	movs	r2, #49	; 0x31
}
 800c788:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 800c78c:	615a      	str	r2, [r3, #20]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4718      	bx	r3
 800c792:	bf00      	nop
 800c794:	0800c533 	.word	0x0800c533
 800c798:	0800c4d5 	.word	0x0800c4d5
 800c79c:	0800c58d 	.word	0x0800c58d
 800c7a0:	0800c8e5 	.word	0x0800c8e5
 800c7a4:	0800c7ad 	.word	0x0800c7ad
 800c7a8:	08012ad4 	.word	0x08012ad4

0800c7ac <quantize_fs_dither>:
{
 800c7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b0:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 800c7b2:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 800c7b4:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 800c7b8:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 800c7bc:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 800c7c0:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800c7c4:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800c7c8:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 800c7ca:	1e6b      	subs	r3, r5, #1
 800c7cc:	9304      	str	r3, [sp, #16]
 800c7ce:	fb03 f309 	mul.w	r3, r3, r9
 800c7d2:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 800c7d4:	1c6b      	adds	r3, r5, #1
 800c7d6:	005b      	lsls	r3, r3, #1
 800c7d8:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 800c7da:	2300      	movs	r3, #0
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	9a00      	ldr	r2, [sp, #0]
 800c7e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	db02      	blt.n	800c7ec <quantize_fs_dither+0x40>
}
 800c7e6:	b011      	add	sp, #68	; 0x44
 800c7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	462a      	mov	r2, r5
 800c7f0:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 800c7f4:	f001 f82a 	bl	800d84c <memset>
    for (ci = 0; ci < nc; ci++) {
 800c7f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	9305      	str	r3, [sp, #20]
	dirnc = -nc;
 800c800:	f1c9 0300 	rsb	r3, r9, #0
 800c804:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 800c806:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 800c808:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 800c80a:	db06      	blt.n	800c81a <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 800c80c:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 800c810:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 800c812:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 800c814:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 800c816:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 800c818:	e7e0      	b.n	800c7dc <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 800c81a:	9800      	ldr	r0, [sp, #0]
 800c81c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c81e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 800c822:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 800c826:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 800c82a:	9b05      	ldr	r3, [sp, #20]
 800c82c:	f853 cb04 	ldr.w	ip, [r3], #4
 800c830:	9305      	str	r3, [sp, #20]
      if (cquantize->on_odd_row) {
 800c832:	b312      	cbz	r2, 800c87a <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 800c834:	9b08      	ldr	r3, [sp, #32]
 800c836:	449e      	add	lr, r3
	output_ptr += width-1;
 800c838:	9b04      	ldr	r3, [sp, #16]
 800c83a:	4418      	add	r0, r3
	dirnc = -nc;
 800c83c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c83e:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 800c840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c842:	449c      	add	ip, r3
	dir = -1;
 800c844:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 800c848:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 800c84a:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 800c84c:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 800c84e:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 800c850:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c854:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 800c856:	6923      	ldr	r3, [r4, #16]
 800c858:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c85c:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 800c85e:	9b02      	ldr	r3, [sp, #8]
 800c860:	005b      	lsls	r3, r3, #1
 800c862:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 800c864:	2300      	movs	r3, #0
      cur = 0;
 800c866:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 800c868:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 800c86a:	9a03      	ldr	r2, [sp, #12]
 800c86c:	b94a      	cbnz	r2, 800c882 <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 800c86e:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 800c870:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 800c872:	436a      	muls	r2, r5
 800c874:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 800c878:	e7c5      	b.n	800c806 <quantize_fs_dither+0x5a>
	dir = 1;
 800c87a:	2301      	movs	r3, #1
 800c87c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c880:	e7e2      	b.n	800c848 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 800c882:	9a01      	ldr	r2, [sp, #4]
 800c884:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 800c888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 800c88a:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 800c88c:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 800c890:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 800c894:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 800c898:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 800c89a:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 800c89e:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 800c8a2:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 800c8a6:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 800c8a8:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 800c8aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 800c8ac:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 800c8b0:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 800c8b4:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 800c8b6:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 800c8ba:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 800c8bc:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 800c8be:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 800c8c2:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 800c8c4:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 800c8c6:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 800c8c8:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 800c8cc:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 800c8ce:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 800c8d0:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 800c8d2:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 800c8d4:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 800c8d6:	4443      	add	r3, r8
	belowerr = bnexterr;
 800c8d8:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 800c8dc:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 800c8e0:	4417      	add	r7, r2
 800c8e2:	e7c2      	b.n	800c86a <quantize_fs_dither+0xbe>

0800c8e4 <quantize_ord_dither>:
{
 800c8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e8:	b089      	sub	sp, #36	; 0x24
 800c8ea:	4689      	mov	r9, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 800c8ec:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 800c8f0:	1f14      	subs	r4, r2, #4
{
 800c8f2:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 800c8f4:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 800c8f6:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 800c8f8:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 800c8fc:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 800c8fe:	9b07      	ldr	r3, [sp, #28]
 800c900:	429f      	cmp	r7, r3
 800c902:	db02      	blt.n	800c90a <quantize_ord_dither+0x26>
}
 800c904:	b009      	add	sp, #36	; 0x24
 800c906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 800c90a:	4652      	mov	r2, sl
 800c90c:	2100      	movs	r1, #0
 800c90e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800c912:	f000 ff9b 	bl	800d84c <memset>
    row_index = cquantize->row_index;
 800c916:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    for (ci = 0; ci < nc; ci++) {
 800c91a:	f108 0c34 	add.w	ip, r8, #52	; 0x34
 800c91e:	2000      	movs	r0, #0
      dither = cquantize->odither[ci][row_index];
 800c920:	019a      	lsls	r2, r3, #6
 800c922:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 800c924:	9a01      	ldr	r2, [sp, #4]
 800c926:	4290      	cmp	r0, r2
 800c928:	db06      	blt.n	800c938 <quantize_ord_dither+0x54>
    row_index = (row_index + 1) & ODITHER_MASK;
 800c92a:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 800c92c:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 800c92e:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 800c932:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 800c936:	e7e2      	b.n	800c8fe <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 800c938:	f8d8 2018 	ldr.w	r2, [r8, #24]
      col_index = 0;
 800c93c:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 800c93e:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 800c942:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800c946:	6825      	ldr	r5, [r4, #0]
      input_ptr = input_buf[row] + ci;
 800c948:	4401      	add	r1, r0
      colorindex_ci = cquantize->colorindex[ci];
 800c94a:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 800c94c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c950:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 800c952:	eb0a 0205 	add.w	r2, sl, r5
 800c956:	9206      	str	r2, [sp, #24]
 800c958:	9a06      	ldr	r2, [sp, #24]
 800c95a:	4295      	cmp	r5, r2
 800c95c:	d101      	bne.n	800c962 <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 800c95e:	3001      	adds	r0, #1
 800c960:	e7e0      	b.n	800c924 <quantize_ord_dither+0x40>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 800c962:	782a      	ldrb	r2, [r5, #0]
 800c964:	f891 e000 	ldrb.w	lr, [r1]
 800c968:	9204      	str	r2, [sp, #16]
 800c96a:	9a02      	ldr	r2, [sp, #8]
 800c96c:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 800c970:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 800c972:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 800c974:	f85b b002 	ldr.w	fp, [fp, r2]
 800c978:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 800c97a:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 800c97e:	4496      	add	lr, r2
 800c980:	9a04      	ldr	r2, [sp, #16]
 800c982:	f81e e00b 	ldrb.w	lr, [lr, fp]
 800c986:	4472      	add	r2, lr
 800c988:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 800c98c:	9a01      	ldr	r2, [sp, #4]
 800c98e:	4411      	add	r1, r2
      for (col = width; col > 0; col--) {
 800c990:	e7e2      	b.n	800c958 <quantize_ord_dither+0x74>
	...

0800c994 <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c994:	6843      	ldr	r3, [r0, #4]
 800c996:	2258      	movs	r2, #88	; 0x58
 800c998:	2101      	movs	r1, #1
 800c99a:	681b      	ldr	r3, [r3, #0]
{
 800c99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a0:	b085      	sub	sp, #20
 800c9a2:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c9a4:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 800c9a6:	4b67      	ldr	r3, [pc, #412]	; (800cb44 <jinit_1pass_quantizer+0x1b0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 800c9a8:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 800c9ac:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 800c9ae:	4b66      	ldr	r3, [pc, #408]	; (800cb48 <jinit_1pass_quantizer+0x1b4>)
 800c9b0:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 800c9b2:	4b66      	ldr	r3, [pc, #408]	; (800cb4c <jinit_1pass_quantizer+0x1b8>)
 800c9b4:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 800c9ba:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 800c9bc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c9be:	2b04      	cmp	r3, #4
 800c9c0:	dd07      	ble.n	800c9d2 <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	2039      	movs	r0, #57	; 0x39
 800c9c6:	2204      	movs	r2, #4
 800c9c8:	e9c3 0205 	strd	r0, r2, [r3, #20]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 800c9d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c9d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9d8:	dd08      	ble.n	800c9ec <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	213b      	movs	r1, #59	; 0x3b
 800c9de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 800c9ec:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 800c9f0:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 800c9f2:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 800c9f6:	f106 0720 	add.w	r7, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 800c9fa:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    iroot++;
 800c9fe:	469a      	mov	sl, r3
 800ca00:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 800ca02:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 800ca04:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 800ca06:	4588      	cmp	r8, r1
 800ca08:	dc47      	bgt.n	800ca9a <jinit_1pass_quantizer+0x106>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 800ca0a:	4591      	cmp	r9, r2
 800ca0c:	daf7      	bge.n	800c9fe <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 800ca0e:	f1ba 0f01 	cmp.w	sl, #1
 800ca12:	d106      	bne.n	800ca22 <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 800ca14:	6823      	ldr	r3, [r4, #0]
 800ca16:	213a      	movs	r1, #58	; 0x3a
 800ca18:	4620      	mov	r0, r4
 800ca1a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4798      	blx	r3
    for (i = 1; i < nc; i++)
 800ca22:	463a      	mov	r2, r7
 800ca24:	2300      	movs	r3, #0
 800ca26:	2501      	movs	r5, #1
 800ca28:	9701      	str	r7, [sp, #4]
  for (i = 0; i < nc; i++) {
 800ca2a:	4598      	cmp	r8, r3
 800ca2c:	dc38      	bgt.n	800caa0 <jinit_1pass_quantizer+0x10c>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 800ca2e:	f8df c120 	ldr.w	ip, [pc, #288]	; 800cb50 <jinit_1pass_quantizer+0x1bc>
    changed = FALSE;
 800ca32:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 800ca34:	460b      	mov	r3, r1
 800ca36:	4598      	cmp	r8, r3
 800ca38:	dc38      	bgt.n	800caac <jinit_1pass_quantizer+0x118>
  } while (changed);
 800ca3a:	2900      	cmp	r1, #0
 800ca3c:	d1f9      	bne.n	800ca32 <jinit_1pass_quantizer+0x9e>
  if (cinfo->out_color_components == 3)
 800ca3e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 800ca40:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 800ca42:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 800ca44:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 800ca46:	d148      	bne.n	800cada <jinit_1pass_quantizer+0x146>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 800ca48:	619d      	str	r5, [r3, #24]
 800ca4a:	6a31      	ldr	r1, [r6, #32]
 800ca4c:	61d9      	str	r1, [r3, #28]
 800ca4e:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800ca50:	6219      	str	r1, [r3, #32]
 800ca52:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800ca54:	6259      	str	r1, [r3, #36]	; 0x24
 800ca56:	2160      	movs	r1, #96	; 0x60
 800ca58:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 800ca5a:	2101      	movs	r1, #1
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 800ca60:	6863      	ldr	r3, [r4, #4]
 800ca62:	462a      	mov	r2, r5
 800ca64:	2101      	movs	r1, #1
 800ca66:	689f      	ldr	r7, [r3, #8]
 800ca68:	4620      	mov	r0, r4
 800ca6a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ca6c:	47b8      	blx	r7
  for (i = 0; i < cinfo->out_color_components; i++) {
 800ca6e:	46ae      	mov	lr, r5
 800ca70:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 800ca72:	9002      	str	r0, [sp, #8]
  for (i = 0; i < cinfo->out_color_components; i++) {
 800ca74:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ca76:	429a      	cmp	r2, r3
 800ca78:	db33      	blt.n	800cae2 <jinit_1pass_quantizer+0x14e>
  cquantize->sv_colormap = colormap;
 800ca7a:	9b02      	ldr	r3, [sp, #8]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 800ca7c:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 800ca7e:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 800ca82:	f7ff fccb 	bl	800c41c <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 800ca86:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	d156      	bne.n	800cb3c <jinit_1pass_quantizer+0x1a8>
    alloc_fs_workspace(cinfo);
 800ca8e:	4620      	mov	r0, r4
}
 800ca90:	b005      	add	sp, #20
 800ca92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 800ca96:	f7ff bdd0 	b.w	800c63a <alloc_fs_workspace>
      temp *= iroot;
 800ca9a:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 800ca9c:	3101      	adds	r1, #1
 800ca9e:	e7b2      	b.n	800ca06 <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 800caa0:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < nc; i++) {
 800caa4:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 800caa6:	f842 ab04 	str.w	sl, [r2], #4
  for (i = 0; i < nc; i++) {
 800caaa:	e7be      	b.n	800ca2a <jinit_1pass_quantizer+0x96>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 800caac:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800cab0:	2a02      	cmp	r2, #2
 800cab2:	bf0c      	ite	eq
 800cab4:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 800cab8:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 800caba:	f857 a020 	ldr.w	sl, [r7, r0, lsl #2]
 800cabe:	fb95 f2fa 	sdiv	r2, r5, sl
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 800cac2:	fb0a 2202 	mla	r2, sl, r2, r2
 800cac6:	f10a 0e01 	add.w	lr, sl, #1
      if (temp > (long) max_colors)
 800caca:	4591      	cmp	r9, r2
 800cacc:	dbb5      	blt.n	800ca3a <jinit_1pass_quantizer+0xa6>
    for (i = 0; i < nc; i++) {
 800cace:	3301      	adds	r3, #1
 800cad0:	4615      	mov	r5, r2
      changed = TRUE;
 800cad2:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 800cad4:	f847 e020 	str.w	lr, [r7, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 800cad8:	e7ad      	b.n	800ca36 <jinit_1pass_quantizer+0xa2>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 800cada:	2161      	movs	r1, #97	; 0x61
 800cadc:	e9c3 1505 	strd	r1, r5, [r3, #20]
 800cae0:	e7bb      	b.n	800ca5a <jinit_1pass_quantizer+0xc6>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 800cae2:	9b01      	ldr	r3, [sp, #4]
 800cae4:	f853 9b04 	ldr.w	r9, [r3], #4
      val = output_value(cinfo, i, j, nci-1);
 800cae8:	f109 3bff 	add.w	fp, r9, #4294967295
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 800caec:	9301      	str	r3, [sp, #4]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 800caee:	ea4f 036b 	mov.w	r3, fp, asr #1
    blksize = blkdist / nci;
 800caf2:	fb9e f8f9 	sdiv	r8, lr, r9
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 800caf6:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 800caf8:	2300      	movs	r3, #0
 800cafa:	469a      	mov	sl, r3
 800cafc:	4599      	cmp	r9, r3
 800cafe:	dc02      	bgt.n	800cb06 <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 800cb00:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 800cb02:	46c6      	mov	lr, r8
 800cb04:	e7b6      	b.n	800ca74 <jinit_1pass_quantizer+0xe0>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 800cb06:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 800cb0a:	9f03      	ldr	r7, [sp, #12]
 800cb0c:	4439      	add	r1, r7
 800cb0e:	fb91 f1fb 	sdiv	r1, r1, fp
 800cb12:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 800cb14:	4651      	mov	r1, sl
 800cb16:	42a9      	cmp	r1, r5
 800cb18:	db0d      	blt.n	800cb36 <jinit_1pass_quantizer+0x1a2>
    for (j = 0; j < nci; j++) {
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	44c2      	add	sl, r8
 800cb1e:	e7ed      	b.n	800cafc <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 800cb20:	9f02      	ldr	r7, [sp, #8]
 800cb22:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 800cb26:	4467      	add	r7, ip
	for (k = 0; k < blksize; k++)
 800cb28:	f10c 0c01 	add.w	ip, ip, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 800cb2c:	5478      	strb	r0, [r7, r1]
	for (k = 0; k < blksize; k++)
 800cb2e:	45e0      	cmp	r8, ip
 800cb30:	dcf6      	bgt.n	800cb20 <jinit_1pass_quantizer+0x18c>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 800cb32:	4471      	add	r1, lr
 800cb34:	e7ef      	b.n	800cb16 <jinit_1pass_quantizer+0x182>
	for (k = 0; k < blksize; k++)
 800cb36:	f04f 0c00 	mov.w	ip, #0
 800cb3a:	e7f8      	b.n	800cb2e <jinit_1pass_quantizer+0x19a>
}
 800cb3c:	b005      	add	sp, #20
 800cb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb42:	bf00      	nop
 800cb44:	0800c675 	.word	0x0800c675
 800cb48:	0800c669 	.word	0x0800c669
 800cb4c:	0800c66b 	.word	0x0800c66b
 800cb50:	08012bd4 	.word	0x08012bd4

0800cb54 <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 800cb54:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
{
 800cb58:	b5f0      	push	{r4, r5, r6, r7, lr}
  register hist3d histogram = cquantize->histogram;
 800cb5a:	f8d2 c018 	ldr.w	ip, [r2, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 800cb5e:	2400      	movs	r4, #0
  JDIMENSION width = cinfo->output_width;
 800cb60:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  for (row = 0; row < num_rows; row++) {
 800cb64:	429c      	cmp	r4, r3
 800cb66:	db00      	blt.n	800cb6a <prescan_quantize+0x16>
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}
 800cb68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (col = width; col > 0; col--) {
 800cb6a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 800cb6e:	4677      	mov	r7, lr
 800cb70:	3203      	adds	r2, #3
 800cb72:	b90f      	cbnz	r7, 800cb78 <prescan_quantize+0x24>
  for (row = 0; row < num_rows; row++) {
 800cb74:	3401      	adds	r4, #1
 800cb76:	e7f5      	b.n	800cb64 <prescan_quantize+0x10>
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 800cb78:	f812 6c03 	ldrb.w	r6, [r2, #-3]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 800cb7c:	f812 5c02 	ldrb.w	r5, [r2, #-2]
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 800cb80:	08f6      	lsrs	r6, r6, #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 800cb82:	08a8      	lsrs	r0, r5, #2
 800cb84:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 800cb88:	f812 6c01 	ldrb.w	r6, [r2, #-1]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 800cb8c:	eb05 1580 	add.w	r5, r5, r0, lsl #6
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 800cb90:	08f6      	lsrs	r6, r6, #3
      if (++(*histp) <= 0)
 800cb92:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
 800cb96:	3001      	adds	r0, #1
 800cb98:	b280      	uxth	r0, r0
 800cb9a:	b108      	cbz	r0, 800cba0 <prescan_quantize+0x4c>
 800cb9c:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    for (col = width; col > 0; col--) {
 800cba0:	3f01      	subs	r7, #1
 800cba2:	3203      	adds	r2, #3
 800cba4:	e7e5      	b.n	800cb72 <prescan_quantize+0x1e>

0800cba6 <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 800cba6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbaa:	f2ad 5dcc 	subw	sp, sp, #1484	; 0x5cc
  minmaxdist = 0x7FFFFFFFL;
 800cbae:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  for (i = 0; i < numcolors; i++) {
 800cbb2:	2500      	movs	r5, #0
{
 800cbb4:	930c      	str	r3, [sp, #48]	; 0x30
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 800cbb6:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 800cbba:	9001      	str	r0, [sp, #4]
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 800cbbc:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 800cbbe:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 800cbc0:	0140      	lsls	r0, r0, #5
  hist3d histogram = cquantize->histogram;
 800cbc2:	9307      	str	r3, [sp, #28]
  c2 >>= BOX_C2_LOG;
 800cbc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 800cbc6:	f100 0a02 	add.w	sl, r0, #2
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 800cbca:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 800cbcc:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 800cbce:	9b01      	ldr	r3, [sp, #4]
  centerc1 = (minc1 + maxc1) >> 1;
 800cbd0:	eb0a 0b00 	add.w	fp, sl, r0
  int numcolors = cinfo->actual_number_of_colors;
 800cbd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 800cbd8:	0164      	lsls	r4, r4, #5
  centerc1 = (minc1 + maxc1) >> 1;
 800cbda:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  int numcolors = cinfo->actual_number_of_colors;
 800cbde:	9302      	str	r3, [sp, #8]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 800cbe0:	f104 0804 	add.w	r8, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 800cbe4:	341c      	adds	r4, #28
{
 800cbe6:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  c0 >>= BOX_C0_LOG;
 800cbea:	1089      	asrs	r1, r1, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 800cbec:	0149      	lsls	r1, r1, #5
 800cbee:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 800cbf2:	311c      	adds	r1, #28
  centerc0 = (minc0 + maxc0) >> 1;
 800cbf4:	eb09 0301 	add.w	r3, r9, r1
 800cbf8:	105b      	asrs	r3, r3, #1
 800cbfa:	9303      	str	r3, [sp, #12]
  centerc2 = (minc2 + maxc2) >> 1;
 800cbfc:	eb08 0304 	add.w	r3, r8, r4
 800cc00:	105b      	asrs	r3, r3, #1
 800cc02:	9304      	str	r3, [sp, #16]
  for (i = 0; i < numcolors; i++) {
 800cc04:	9b02      	ldr	r3, [sp, #8]
 800cc06:	42ab      	cmp	r3, r5
 800cc08:	dc43      	bgt.n	800cc92 <fill_inverse_cmap+0xec>
  ncolors = 0;
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	aa72      	add	r2, sp, #456	; 0x1c8
      colorlist[ncolors++] = (JSAMPLE) i;
 800cc0e:	a832      	add	r0, sp, #200	; 0xc8
  for (i = 0; i < numcolors; i++) {
 800cc10:	460b      	mov	r3, r1
 800cc12:	9c02      	ldr	r4, [sp, #8]
 800cc14:	429c      	cmp	r4, r3
 800cc16:	f300 809f 	bgt.w	800cd58 <fill_inverse_cmap+0x1b2>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 800cc1a:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 800cc1c:	aa72      	add	r2, sp, #456	; 0x1c8
    *bptr++ = 0x7FFFFFFFL;
 800cc1e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 800cc22:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 800cc24:	f842 0b04 	str.w	r0, [r2], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 800cc28:	d1fb      	bne.n	800cc22 <fill_inverse_cmap+0x7c>
 800cc2a:	aa32      	add	r2, sp, #200	; 0xc8
  for (i = 0; i < numcolors; i++) {
 800cc2c:	469b      	mov	fp, r3
 800cc2e:	9209      	str	r2, [sp, #36]	; 0x24
 800cc30:	458b      	cmp	fp, r1
 800cc32:	f040 8099 	bne.w	800cd68 <fill_inverse_cmap+0x1c2>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
 800cc36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  cptr = bestcolor;
 800cc38:	aa12      	add	r2, sp, #72	; 0x48
  c2 <<= BOX_C2_LOG;
 800cc3a:	f023 0003 	bic.w	r0, r3, #3
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 800cc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc40:	f023 0103 	bic.w	r1, r3, #3
 800cc44:	9b07      	ldr	r3, [sp, #28]
 800cc46:	eb03 0581 	add.w	r5, r3, r1, lsl #2
  c1 <<= BOX_C1_LOG;
 800cc4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc4c:	f023 0307 	bic.w	r3, r3, #7
 800cc50:	4629      	mov	r1, r5
 800cc52:	019b      	lsls	r3, r3, #6
 800cc54:	3110      	adds	r1, #16
 800cc56:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 800cc5a:	f855 4b04 	ldr.w	r4, [r5], #4
 800cc5e:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 800cc60:	f102 0720 	add.w	r7, r2, #32
 800cc64:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 800cc66:	4626      	mov	r6, r4
 800cc68:	4602      	mov	r2, r0
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 800cc6a:	f100 0c04 	add.w	ip, r0, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 800cc6e:	f812 0b01 	ldrb.w	r0, [r2], #1
 800cc72:	3001      	adds	r0, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 800cc74:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 800cc76:	f826 0b02 	strh.w	r0, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 800cc7a:	d1f8      	bne.n	800cc6e <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 800cc7c:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 800cc7e:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 800cc80:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800cc84:	d1ef      	bne.n	800cc66 <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 800cc86:	428d      	cmp	r5, r1
 800cc88:	d1e7      	bne.n	800cc5a <fill_inverse_cmap+0xb4>
      }
    }
  }
}
 800cc8a:	f20d 5dcc 	addw	sp, sp, #1484	; 0x5cc
 800cc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 800cc92:	9b01      	ldr	r3, [sp, #4]
 800cc94:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 800cc9c:	4591      	cmp	r9, r2
 800cc9e:	dd2b      	ble.n	800ccf8 <fill_inverse_cmap+0x152>
      tdist = (x - minc0) * C0_SCALE;
 800cca0:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 800cca4:	1a52      	subs	r2, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 800cca6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
      min_dist = tdist*tdist;
 800ccaa:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 800ccae:	0052      	lsls	r2, r2, #1
      max_dist = tdist*tdist;
 800ccb0:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 800ccb6:	459a      	cmp	sl, r3
 800ccb8:	dd34      	ble.n	800cd24 <fill_inverse_cmap+0x17e>
      tdist = (x - minc1) * C1_SCALE;
 800ccba:	eba3 0e0a 	sub.w	lr, r3, sl
 800ccbe:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 800ccc2:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 800ccc6:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 800ccc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 800cccc:	fb03 2203 	mla	r2, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc2) {
 800ccd4:	4598      	cmp	r8, r3
 800ccd6:	dd33      	ble.n	800cd40 <fill_inverse_cmap+0x19a>
      tdist = (x - minc2) * C2_SCALE;
 800ccd8:	eba3 0708 	sub.w	r7, r3, r8
      min_dist += tdist*tdist;
 800ccdc:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 800cce0:	1b1b      	subs	r3, r3, r4
	max_dist += tdist*tdist;
 800cce2:	fb03 2303 	mla	r3, r3, r3, r2
    mindist[i] = min_dist;	/* save away the results */
 800cce6:	aa72      	add	r2, sp, #456	; 0x1c8
 800cce8:	429e      	cmp	r6, r3
 800ccea:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 800ccee:	f105 0501 	add.w	r5, r5, #1
 800ccf2:	bfa8      	it	ge
 800ccf4:	461e      	movge	r6, r3
 800ccf6:	e785      	b.n	800cc04 <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 800ccf8:	4291      	cmp	r1, r2
 800ccfa:	da08      	bge.n	800cd0e <fill_inverse_cmap+0x168>
      tdist = (x - maxc0) * C0_SCALE;
 800ccfc:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 800cd00:	eba2 0209 	sub.w	r2, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 800cd04:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
      min_dist = tdist*tdist;
 800cd08:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 800cd0c:	e7cf      	b.n	800ccae <fill_inverse_cmap+0x108>
      if (x <= centerc0) {
 800cd0e:	9b03      	ldr	r3, [sp, #12]
      min_dist = 0;
 800cd10:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 800cd14:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 800cd16:	bfac      	ite	ge
 800cd18:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 800cd1a:	eba2 0209 	sublt.w	r2, r2, r9
 800cd1e:	0052      	lsls	r2, r2, #1
	max_dist = tdist*tdist;
 800cd20:	4352      	muls	r2, r2
 800cd22:	e7c6      	b.n	800ccb2 <fill_inverse_cmap+0x10c>
    } else if (x > maxc1) {
 800cd24:	4298      	cmp	r0, r3
 800cd26:	da08      	bge.n	800cd3a <fill_inverse_cmap+0x194>
      tdist = (x - maxc1) * C1_SCALE;
 800cd28:	eba3 0e00 	sub.w	lr, r3, r0
 800cd2c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 800cd30:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 800cd34:	eba3 030a 	sub.w	r3, r3, sl
 800cd38:	e7c6      	b.n	800ccc8 <fill_inverse_cmap+0x122>
      if (x <= centerc1) {
 800cd3a:	459b      	cmp	fp, r3
 800cd3c:	dbfa      	blt.n	800cd34 <fill_inverse_cmap+0x18e>
 800cd3e:	e7c2      	b.n	800ccc6 <fill_inverse_cmap+0x120>
    } else if (x > maxc2) {
 800cd40:	429c      	cmp	r4, r3
 800cd42:	da05      	bge.n	800cd50 <fill_inverse_cmap+0x1aa>
      tdist = (x - maxc2) * C2_SCALE;
 800cd44:	1b1f      	subs	r7, r3, r4
      min_dist += tdist*tdist;
 800cd46:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 800cd4a:	eba3 0308 	sub.w	r3, r3, r8
 800cd4e:	e7c8      	b.n	800cce2 <fill_inverse_cmap+0x13c>
      if (x <= centerc2) {
 800cd50:	9f04      	ldr	r7, [sp, #16]
 800cd52:	429f      	cmp	r7, r3
 800cd54:	dbf9      	blt.n	800cd4a <fill_inverse_cmap+0x1a4>
 800cd56:	e7c3      	b.n	800cce0 <fill_inverse_cmap+0x13a>
    if (mindist[i] <= minmaxdist)
 800cd58:	f852 4b04 	ldr.w	r4, [r2], #4
 800cd5c:	42a6      	cmp	r6, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 800cd5e:	bfa4      	itt	ge
 800cd60:	5443      	strbge	r3, [r0, r1]
 800cd62:	3101      	addge	r1, #1
  for (i = 0; i < numcolors; i++) {
 800cd64:	3301      	adds	r3, #1
 800cd66:	e754      	b.n	800cc12 <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 800cd68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cptr = bestcolor;
 800cd6a:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
    icolor = GETJSAMPLE(colorlist[i]);
 800cd6e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cd72:	9309      	str	r3, [sp, #36]	; 0x24
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 800cd74:	9b01      	ldr	r3, [sp, #4]
 800cd76:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 800cd7a:	6842      	ldr	r2, [r0, #4]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 800cd7c:	6803      	ldr	r3, [r0, #0]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 800cd7e:	5d92      	ldrb	r2, [r2, r6]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 800cd80:	5d9b      	ldrb	r3, [r3, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 800cd82:	ebaa 0202 	sub.w	r2, sl, r2
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 800cd86:	6880      	ldr	r0, [r0, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 800cd88:	eba9 0303 	sub.w	r3, r9, r3
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 800cd8c:	eb02 0442 	add.w	r4, r2, r2, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 800cd90:	5d80      	ldrb	r0, [r0, r6]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 800cd92:	005b      	lsls	r3, r3, #1
    dist0 += inc1*inc1;
 800cd94:	4364      	muls	r4, r4
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 800cd96:	eba8 0000 	sub.w	r0, r8, r0
    dist0 += inc1*inc1;
 800cd9a:	fb03 4403 	mla	r4, r3, r3, r4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 800cd9e:	3308      	adds	r3, #8
    dist0 += inc2*inc2;
 800cda0:	fb00 4400 	mla	r4, r0, r0, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 800cda4:	3004      	adds	r0, #4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 800cda6:	015b      	lsls	r3, r3, #5
    dist0 += inc2*inc2;
 800cda8:	9404      	str	r4, [sp, #16]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 800cdaa:	2448      	movs	r4, #72	; 0x48
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 800cdac:	0100      	lsls	r0, r0, #4
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 800cdae:	4362      	muls	r2, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 800cdb0:	9008      	str	r0, [sp, #32]
 800cdb2:	f503 6000 	add.w	r0, r3, #2048	; 0x800
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 800cdb6:	f102 0490 	add.w	r4, r2, #144	; 0x90
 800cdba:	f502 6219 	add.w	r2, r2, #2448	; 0x990
 800cdbe:	9010      	str	r0, [sp, #64]	; 0x40
    bptr = bestdist;
 800cdc0:	a872      	add	r0, sp, #456	; 0x1c8
 800cdc2:	920f      	str	r2, [sp, #60]	; 0x3c
 800cdc4:	9a08      	ldr	r2, [sp, #32]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 800cdc6:	940d      	str	r4, [sp, #52]	; 0x34
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 800cdc8:	f502 7200 	add.w	r2, r2, #512	; 0x200
    bptr = bestdist;
 800cdcc:	9005      	str	r0, [sp, #20]
 800cdce:	920e      	str	r2, [sp, #56]	; 0x38
	xx2 = inc2;
 800cdd0:	9a05      	ldr	r2, [sp, #20]
 800cdd2:	46f4      	mov	ip, lr
      xx1 = inc1;
 800cdd4:	980d      	ldr	r0, [sp, #52]	; 0x34
	xx2 = inc2;
 800cdd6:	9206      	str	r2, [sp, #24]
      xx1 = inc1;
 800cdd8:	9a04      	ldr	r2, [sp, #16]
 800cdda:	9203      	str	r2, [sp, #12]
 800cddc:	e023      	b.n	800ce26 <fill_inverse_cmap+0x280>
	  if (dist2 < *bptr) {
 800cdde:	463a      	mov	r2, r7
 800cde0:	f852 7f04 	ldr.w	r7, [r2, #4]!
 800cde4:	9711      	str	r7, [sp, #68]	; 0x44
 800cde6:	4617      	mov	r7, r2
 800cde8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cdea:	42a2      	cmp	r2, r4
	    *bptr = dist2;
 800cdec:	bfc4      	itt	gt
 800cdee:	463a      	movgt	r2, r7
 800cdf0:	6014      	strgt	r4, [r2, #0]
	  dist2 += xx2;
 800cdf2:	442c      	add	r4, r5
	    *cptr = (JSAMPLE) icolor;
 800cdf4:	bfc8      	it	gt
 800cdf6:	9a02      	ldrgt	r2, [sp, #8]
	  xx2 += 2 * STEP_C2 * STEP_C2;
 800cdf8:	f105 0580 	add.w	r5, r5, #128	; 0x80
	    *cptr = (JSAMPLE) icolor;
 800cdfc:	bfc8      	it	gt
 800cdfe:	7016      	strbgt	r6, [r2, #0]
	  cptr++;
 800ce00:	9a02      	ldr	r2, [sp, #8]
 800ce02:	3201      	adds	r2, #1
 800ce04:	9202      	str	r2, [sp, #8]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 800ce06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce08:	42aa      	cmp	r2, r5
 800ce0a:	d1e8      	bne.n	800cdde <fill_inverse_cmap+0x238>
	  bptr++;
 800ce0c:	9a06      	ldr	r2, [sp, #24]
	  cptr++;
 800ce0e:	f10c 0c04 	add.w	ip, ip, #4
	  bptr++;
 800ce12:	3210      	adds	r2, #16
 800ce14:	9206      	str	r2, [sp, #24]
	dist1 += xx1;
 800ce16:	9a03      	ldr	r2, [sp, #12]
 800ce18:	4402      	add	r2, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 800ce1a:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 800ce1e:	9203      	str	r2, [sp, #12]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 800ce20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce22:	4290      	cmp	r0, r2
 800ce24:	d007      	beq.n	800ce36 <fill_inverse_cmap+0x290>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 800ce26:	9a06      	ldr	r2, [sp, #24]
	xx2 = inc2;
 800ce28:	9d08      	ldr	r5, [sp, #32]
 800ce2a:	3a04      	subs	r2, #4
 800ce2c:	9c03      	ldr	r4, [sp, #12]
 800ce2e:	f8cd c008 	str.w	ip, [sp, #8]
 800ce32:	4617      	mov	r7, r2
 800ce34:	e7d3      	b.n	800cdde <fill_inverse_cmap+0x238>
	  bptr++;
 800ce36:	9a05      	ldr	r2, [sp, #20]
	  cptr++;
 800ce38:	f10e 0e20 	add.w	lr, lr, #32
	  bptr++;
 800ce3c:	3280      	adds	r2, #128	; 0x80
 800ce3e:	9205      	str	r2, [sp, #20]
      dist0 += xx0;
 800ce40:	9a04      	ldr	r2, [sp, #16]
 800ce42:	441a      	add	r2, r3
      xx0 += 2 * STEP_C0 * STEP_C0;
 800ce44:	f503 7300 	add.w	r3, r3, #512	; 0x200
      dist0 += xx0;
 800ce48:	9204      	str	r2, [sp, #16]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 800ce4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d1bf      	bne.n	800cdd0 <fill_inverse_cmap+0x22a>
  for (i = 0; i < numcolors; i++) {
 800ce50:	f10b 0b01 	add.w	fp, fp, #1
 800ce54:	e6ec      	b.n	800cc30 <fill_inverse_cmap+0x8a>

0800ce56 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 800ce56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5a:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 800ce5c:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 800ce60:	b085      	sub	sp, #20
 800ce62:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 800ce64:	699b      	ldr	r3, [r3, #24]
{
 800ce66:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 800ce68:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 800ce6a:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 800ce6c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800ce6e:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 800ce70:	4555      	cmp	r5, sl
 800ce72:	db02      	blt.n	800ce7a <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 800ce74:	b005      	add	sp, #20
 800ce76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 800ce7a:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 800ce7e:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 800ce82:	9b01      	ldr	r3, [sp, #4]
 800ce84:	3403      	adds	r4, #3
 800ce86:	eb06 0b03 	add.w	fp, r6, r3
 800ce8a:	455e      	cmp	r6, fp
 800ce8c:	d101      	bne.n	800ce92 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 800ce8e:	3501      	adds	r5, #1
 800ce90:	e7ee      	b.n	800ce70 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 800ce92:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 800ce96:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 800ce9a:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 800ce9e:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 800cea0:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 800cea4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 800cea8:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 800ceac:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 800ceae:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 800ceb2:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 800ceb6:	f1bc 0f00 	cmp.w	ip, #0
 800ceba:	d106      	bne.n	800ceca <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 800cebc:	4672      	mov	r2, lr
 800cebe:	9303      	str	r3, [sp, #12]
 800cec0:	9002      	str	r0, [sp, #8]
 800cec2:	f7ff fe70 	bl	800cba6 <fill_inverse_cmap>
 800cec6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 800ceca:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 800cece:	3403      	adds	r4, #3
 800ced0:	3b01      	subs	r3, #1
 800ced2:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 800ced6:	e7d8      	b.n	800ce8a <pass2_no_dither+0x34>

0800ced8 <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 800ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 800cedc:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
{
 800cee0:	b09f      	sub	sp, #124	; 0x7c
 800cee2:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 800cee4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800cee8:	9315      	str	r3, [sp, #84]	; 0x54
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 800ceea:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800ceec:	9305      	str	r3, [sp, #20]
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800ceee:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800cef2:	930a      	str	r3, [sp, #40]	; 0x28
  int *error_limit = cquantize->error_limiter;
 800cef4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800cef8:	930b      	str	r3, [sp, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 800cefa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800cefe:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 800cf06:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 800cf08:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 800cf0a:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 800cf0c:	9318      	str	r3, [sp, #96]	; 0x60
  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 800cf0e:	9b05      	ldr	r3, [sp, #20]
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 800cf10:	9a05      	ldr	r2, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 800cf12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cf16:	3b03      	subs	r3, #3
 800cf18:	9310      	str	r3, [sp, #64]	; 0x40
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 800cf1a:	2306      	movs	r3, #6
 800cf1c:	fb02 3303 	mla	r3, r2, r3, r3
 800cf20:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 800cf22:	2300      	movs	r3, #0
 800cf24:	9304      	str	r3, [sp, #16]
 800cf26:	9b04      	ldr	r3, [sp, #16]
 800cf28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	db02      	blt.n	800cf34 <pass2_fs_dither+0x5c>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 800cf2e:	b01f      	add	sp, #124	; 0x7c
 800cf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 800cf34:	9a04      	ldr	r2, [sp, #16]
 800cf36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf3c:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 800cf3e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cf40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf44:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 800cf46:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800cf4a:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 800cf4c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d036      	beq.n	800cfc2 <pass2_fs_dither+0xea>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 800cf54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf56:	9a01      	ldr	r2, [sp, #4]
 800cf58:	441a      	add	r2, r3
      outptr += width-1;
 800cf5a:	9b05      	ldr	r3, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 800cf5c:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	9a03      	ldr	r2, [sp, #12]
 800cf62:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 800cf64:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 800cf66:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 800cf68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf6a:	4413      	add	r3, r2
      dir3 = -3;
 800cf6c:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 800cf70:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 800cf72:	2300      	movs	r3, #0
      dir3 = -3;
 800cf74:	9208      	str	r2, [sp, #32]
      dir = -1;
 800cf76:	f04f 32ff 	mov.w	r2, #4294967295
 800cf7a:	920f      	str	r2, [sp, #60]	; 0x3c
 800cf7c:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 800cf80:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 800cf82:	9b08      	ldr	r3, [sp, #32]
 800cf84:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 800cf86:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 800cf88:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 800cf8a:	4622      	mov	r2, r4
    belowerr0 = belowerr1 = belowerr2 = 0;
 800cf8c:	940c      	str	r4, [sp, #48]	; 0x30
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 800cf8e:	1cab      	adds	r3, r5, #2
 800cf90:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 800cf92:	1d2b      	adds	r3, r5, #4
 800cf94:	9314      	str	r3, [sp, #80]	; 0x50
    for (col = width; col > 0; col--) {
 800cf96:	9b05      	ldr	r3, [sp, #20]
 800cf98:	9309      	str	r3, [sp, #36]	; 0x24
    cur0 = cur1 = cur2 = 0;
 800cf9a:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 800cf9c:	e9cd 4406 	strd	r4, r4, [sp, #24]
    belowerr0 = belowerr1 = belowerr2 = 0;
 800cfa0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 800cfa4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cfa6:	b98f      	cbnz	r7, 800cfcc <pass2_fs_dither+0xf4>
 800cfa8:	9b05      	ldr	r3, [sp, #20]
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 800cfaa:	9a02      	ldr	r2, [sp, #8]
 800cfac:	435d      	muls	r5, r3
 800cfae:	9906      	ldr	r1, [sp, #24]
 800cfb0:	9b02      	ldr	r3, [sp, #8]
 800cfb2:	5351      	strh	r1, [r2, r5]
 800cfb4:	442b      	add	r3, r5
    errorptr[1] = (FSERROR) bpreverr1;
 800cfb6:	9a07      	ldr	r2, [sp, #28]
    errorptr[2] = (FSERROR) bpreverr2;
 800cfb8:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 800cfba:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 800cfbc:	9b04      	ldr	r3, [sp, #16]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	e7b0      	b.n	800cf24 <pass2_fs_dither+0x4c>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 800cfc2:	2301      	movs	r3, #1
      dir3 = 3;
 800cfc4:	2203      	movs	r2, #3
      dir = 1;
 800cfc6:	930f      	str	r3, [sp, #60]	; 0x3c
      dir3 = 3;
 800cfc8:	9208      	str	r2, [sp, #32]
 800cfca:	e7d7      	b.n	800cf7c <pass2_fs_dither+0xa4>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 800cfcc:	f936 c005 	ldrsh.w	ip, [r6, r5]
 800cfd0:	1977      	adds	r7, r6, r5
 800cfd2:	4463      	add	r3, ip
 800cfd4:	9711      	str	r7, [sp, #68]	; 0x44
      cur0 = error_limit[cur0];
 800cfd6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 800cfd8:	f103 0c08 	add.w	ip, r3, #8
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 800cfdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cfde:	5ef3      	ldrsh	r3, [r6, r3]
 800cfe0:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 800cfe2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cfe4:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 800cfe6:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 800cfe8:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 800cfea:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 800cfec:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 800cff0:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 800cff2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 800cff6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 800cffa:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 800cffc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 800d000:	9f01      	ldr	r7, [sp, #4]
 800d002:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 800d006:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d008:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 800d00a:	443a      	add	r2, r7
      cur2 = GETJSAMPLE(range_limit[cur2]);
 800d00c:	443b      	add	r3, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 800d00e:	f811 b00c 	ldrb.w	fp, [r1, ip]
      cur1 += GETJSAMPLE(inptr[1]);
 800d012:	9901      	ldr	r1, [sp, #4]
 800d014:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 800d016:	f812 a001 	ldrb.w	sl, [r2, r1]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 800d01a:	ea4f 01eb 	mov.w	r1, fp, asr #3
      cur2 += GETJSAMPLE(inptr[2]);
 800d01e:	9a01      	ldr	r2, [sp, #4]
 800d020:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 800d022:	f813 9002 	ldrb.w	r9, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 800d026:	ea4f 02aa 	mov.w	r2, sl, asr #2
 800d02a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d02c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d030:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 800d034:	461f      	mov	r7, r3
 800d036:	ea4f 03e9 	mov.w	r3, r9, asr #3
      if (*cachep == 0)
 800d03a:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 800d03e:	f1bc 0f00 	cmp.w	ip, #0
 800d042:	d105      	bne.n	800d050 <pass2_fs_dither+0x178>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 800d044:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 800d048:	f7ff fdad 	bl	800cba6 <fill_inverse_cmap>
 800d04c:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 800d050:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 800d054:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 800d056:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 800d058:	9907      	ldr	r1, [sp, #28]
      inptr += dir3;		/* Advance pixel pointers to next column */
 800d05a:	9f01      	ldr	r7, [sp, #4]
	*outptr = (JSAMPLE) pixcode;
 800d05c:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 800d05e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d060:	5cd2      	ldrb	r2, [r2, r3]
 800d062:	ebab 0b02 	sub.w	fp, fp, r2
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 800d066:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d068:	5cd2      	ldrb	r2, [r2, r3]
 800d06a:	ebaa 0a02 	sub.w	sl, sl, r2
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 800d06e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d070:	5cd3      	ldrb	r3, [r2, r3]
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 800d072:	9a06      	ldr	r2, [sp, #24]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 800d074:	eba9 0903 	sub.w	r9, r9, r3
	cur0 += delta;		/* form error * 3 */
 800d078:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 800d07c:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 800d07e:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 800d082:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 800d084:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	belowerr0 = bnexterr;
 800d086:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	bpreverr0 = belowerr0 + cur0;
 800d08a:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 800d08c:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	bpreverr0 = belowerr0 + cur0;
 800d090:	9206      	str	r2, [sp, #24]
	cur1 += delta;		/* form error * 3 */
 800d092:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 800d096:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 800d098:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 800d09c:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 800d09e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d0a0:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 800d0a2:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	bpreverr1 = belowerr1 + cur1;
 800d0a6:	9107      	str	r1, [sp, #28]
	cur2 += delta;		/* form error * 3 */
 800d0a8:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 800d0ac:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 800d0ae:	eb01 0149 	add.w	r1, r1, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 800d0b2:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 800d0b4:	9e08      	ldr	r6, [sp, #32]
	bpreverr2 = belowerr2 + cur2;
 800d0b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      inptr += dir3;		/* Advance pixel pointers to next column */
 800d0b8:	4437      	add	r7, r6
      outptr += dir;
 800d0ba:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 800d0bc:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 800d0be:	eb01 0149 	add.w	r1, r1, r9, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 800d0c2:	9701      	str	r7, [sp, #4]
      outptr += dir;
 800d0c4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800d0c6:	443e      	add	r6, r7
 800d0c8:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 800d0ca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d0cc:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 800d0ce:	e9cd a90d 	strd	sl, r9, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 800d0d2:	9609      	str	r6, [sp, #36]	; 0x24
 800d0d4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d0d6:	e765      	b.n	800cfa4 <pass2_fs_dither+0xcc>

0800d0d8 <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 800d0d8:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 800d0da:	6843      	ldr	r3, [r0, #4]
 800d0dc:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800d0e0:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 800d0e2:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 800d0ea:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 800d0ee:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 800d0f2:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 800d0f6:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 800d0f8:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 800d0fa:	425c      	negs	r4, r3
 800d0fc:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 800d100:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 800d102:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 800d106:	2b10      	cmp	r3, #16
 800d108:	d1f7      	bne.n	800d0fa <init_error_limit+0x22>
 800d10a:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 800d10e:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 800d112:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 800d116:	425d      	negs	r5, r3
 800d118:	f844 3f04 	str.w	r3, [r4, #4]!
 800d11c:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 800d120:	f002 0501 	and.w	r5, r2, #1
 800d124:	3a01      	subs	r2, #1
 800d126:	442b      	add	r3, r5
 800d128:	f112 0f32 	cmn.w	r2, #50	; 0x32
 800d12c:	d1f3      	bne.n	800d116 <init_error_limit+0x3e>
 800d12e:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 800d132:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 800d136:	425c      	negs	r4, r3
 800d138:	f841 3f04 	str.w	r3, [r1, #4]!
 800d13c:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 800d140:	4282      	cmp	r2, r0
 800d142:	d1f9      	bne.n	800d138 <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 800d144:	bd38      	pop	{r3, r4, r5, pc}

0800d146 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 800d146:	4770      	bx	lr

0800d148 <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 800d148:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800d14c:	2201      	movs	r2, #1
 800d14e:	61da      	str	r2, [r3, #28]
}
 800d150:	4770      	bx	lr
	...

0800d154 <start_pass_2_quant>:
{
 800d154:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 800d156:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 800d15a:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 800d15c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 800d160:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 800d162:	2b00      	cmp	r3, #0
 800d164:	d050      	beq.n	800d208 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 800d166:	2302      	movs	r3, #2
 800d168:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 800d16c:	b189      	cbz	r1, 800d192 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 800d16e:	4b28      	ldr	r3, [pc, #160]	; (800d210 <start_pass_2_quant+0xbc>)
 800d170:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 800d172:	4b28      	ldr	r3, [pc, #160]	; (800d214 <start_pass_2_quant+0xc0>)
 800d174:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 800d176:	1f34      	subs	r4, r6, #4
 800d178:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 800d17a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800d17e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d182:	2100      	movs	r1, #0
 800d184:	f000 fb62 	bl	800d84c <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 800d188:	42a6      	cmp	r6, r4
 800d18a:	d1f6      	bne.n	800d17a <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 800d18c:	2300      	movs	r3, #0
 800d18e:	61eb      	str	r3, [r5, #28]
}
 800d190:	e02f      	b.n	800d1f2 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 800d192:	4b21      	ldr	r3, [pc, #132]	; (800d218 <start_pass_2_quant+0xc4>)
 800d194:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 800d196:	4b21      	ldr	r3, [pc, #132]	; (800d21c <start_pass_2_quant+0xc8>)
 800d198:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 800d19a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	dc29      	bgt.n	800d1f6 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 800d1a2:	223a      	movs	r2, #58	; 0x3a
 800d1a4:	6823      	ldr	r3, [r4, #0]
 800d1a6:	615a      	str	r2, [r3, #20]
 800d1a8:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 800d1aa:	619a      	str	r2, [r3, #24]
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 800d1b2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	d118      	bne.n	800d1ec <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 800d1ba:	2306      	movs	r3, #6
 800d1bc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d1be:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 800d1c0:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 800d1c2:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 800d1c4:	b93b      	cbnz	r3, 800d1d6 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 800d1c6:	6863      	ldr	r3, [r4, #4]
 800d1c8:	2101      	movs	r1, #1
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	9201      	str	r2, [sp, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	4798      	blx	r3
 800d1d2:	9a01      	ldr	r2, [sp, #4]
 800d1d4:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 800d1d6:	2100      	movs	r1, #0
 800d1d8:	6a28      	ldr	r0, [r5, #32]
 800d1da:	f000 fb37 	bl	800d84c <memset>
      if (cquantize->error_limiter == NULL)
 800d1de:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d1e0:	b913      	cbnz	r3, 800d1e8 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f7ff ff78 	bl	800d0d8 <init_error_limit>
      cquantize->on_odd_row = FALSE;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 800d1ec:	69eb      	ldr	r3, [r5, #28]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1c1      	bne.n	800d176 <start_pass_2_quant+0x22>
}
 800d1f2:	b002      	add	sp, #8
 800d1f4:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 800d1f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1fa:	ddda      	ble.n	800d1b2 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 800d1fc:	223b      	movs	r2, #59	; 0x3b
 800d1fe:	6823      	ldr	r3, [r4, #0]
 800d200:	615a      	str	r2, [r3, #20]
 800d202:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d206:	e7d0      	b.n	800d1aa <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 800d208:	2900      	cmp	r1, #0
 800d20a:	d1b0      	bne.n	800d16e <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 800d20c:	4b04      	ldr	r3, [pc, #16]	; (800d220 <start_pass_2_quant+0xcc>)
 800d20e:	e7c1      	b.n	800d194 <start_pass_2_quant+0x40>
 800d210:	0800cb55 	.word	0x0800cb55
 800d214:	0800d463 	.word	0x0800d463
 800d218:	0800ced9 	.word	0x0800ced9
 800d21c:	0800d147 	.word	0x0800d147
 800d220:	0800ce57 	.word	0x0800ce57

0800d224 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 800d224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0min = boxp->c0min;  c0max = boxp->c0max;
 800d228:	e9d1 7b00 	ldrd	r7, fp, [r1]
  hist3d histogram = cquantize->histogram;
 800d22c:	6983      	ldr	r3, [r0, #24]
update_box (j_decompress_ptr cinfo, boxptr boxp)
 800d22e:	b085      	sub	sp, #20
  if (c0max > c0min)
 800d230:	455f      	cmp	r7, fp
  hist3d histogram = cquantize->histogram;
 800d232:	9301      	str	r3, [sp, #4]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 800d234:	463b      	mov	r3, r7
  c2min = boxp->c2min;  c2max = boxp->c2max;
 800d236:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 800d23a:	e9d1 c002 	ldrd	ip, r0, [r1, #8]
  if (c0max > c0min)
 800d23e:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 800d242:	db24      	blt.n	800d28e <update_box.isra.0+0x6a>
  if (c1max > c1min)
 800d244:	4584      	cmp	ip, r0
 800d246:	4662      	mov	r2, ip
 800d248:	db5d      	blt.n	800d306 <update_box.isra.0+0xe2>
  if (c2max > c2min)
 800d24a:	42a5      	cmp	r5, r4
 800d24c:	f280 80eb 	bge.w	800d426 <update_box.isra.0+0x202>
	histp = & histogram[c0][c1min][c2];
 800d250:	0196      	lsls	r6, r2, #6
 800d252:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 800d256:	46ac      	mov	ip, r5
 800d258:	9602      	str	r6, [sp, #8]
 800d25a:	fb07 f602 	mul.w	r6, r7, r2
 800d25e:	9603      	str	r6, [sp, #12]
 800d260:	9e02      	ldr	r6, [sp, #8]
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 800d262:	469e      	mov	lr, r3
 800d264:	eb06 094c 	add.w	r9, r6, ip, lsl #1
 800d268:	9e03      	ldr	r6, [sp, #12]
 800d26a:	44b1      	add	r9, r6
 800d26c:	e083      	b.n	800d376 <update_box.isra.0+0x152>
	histp = & histogram[c0][c1][c2min];
 800d26e:	9a01      	ldr	r2, [sp, #4]
 800d270:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 800d274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d278:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 800d27a:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 800d27c:	454c      	cmp	r4, r9
 800d27e:	da08      	bge.n	800d292 <update_box.isra.0+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 800d280:	f108 0801 	add.w	r8, r8, #1
 800d284:	4540      	cmp	r0, r8
 800d286:	daf2      	bge.n	800d26e <update_box.isra.0+0x4a>
    for (c0 = c0min; c0 <= c0max; c0++)
 800d288:	3301      	adds	r3, #1
 800d28a:	459b      	cmp	fp, r3
 800d28c:	db0f      	blt.n	800d2ae <update_box.isra.0+0x8a>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 800d28e:	46e0      	mov	r8, ip
 800d290:	e7f8      	b.n	800d284 <update_box.isra.0+0x60>
	  if (*histp++ != 0) {
 800d292:	f832 ab02 	ldrh.w	sl, [r2], #2
 800d296:	f1ba 0f00 	cmp.w	sl, #0
 800d29a:	d005      	beq.n	800d2a8 <update_box.isra.0+0x84>
  if (c0max > c0min)
 800d29c:	459b      	cmp	fp, r3
	    boxp->c0min = c0min = c0;
 800d29e:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 800d2a0:	ddd0      	ble.n	800d244 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 800d2a2:	465f      	mov	r7, fp
 800d2a4:	46e0      	mov	r8, ip
 800d2a6:	e00f      	b.n	800d2c8 <update_box.isra.0+0xa4>
	for (c2 = c2min; c2 <= c2max; c2++)
 800d2a8:	f109 0901 	add.w	r9, r9, #1
 800d2ac:	e7e6      	b.n	800d27c <update_box.isra.0+0x58>
 have_c0min:
 800d2ae:	463b      	mov	r3, r7
 800d2b0:	e7f7      	b.n	800d2a2 <update_box.isra.0+0x7e>
	histp = & histogram[c0][c1][c2min];
 800d2b2:	9a01      	ldr	r2, [sp, #4]
 800d2b4:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 800d2b8:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d2bc:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 800d2be:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 800d2c0:	454c      	cmp	r4, r9
 800d2c2:	da07      	bge.n	800d2d4 <update_box.isra.0+0xb0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 800d2c4:	f108 0801 	add.w	r8, r8, #1
 800d2c8:	4540      	cmp	r0, r8
 800d2ca:	daf2      	bge.n	800d2b2 <update_box.isra.0+0x8e>
    for (c0 = c0max; c0 >= c0min; c0--)
 800d2cc:	3f01      	subs	r7, #1
 800d2ce:	429f      	cmp	r7, r3
 800d2d0:	dbb8      	blt.n	800d244 <update_box.isra.0+0x20>
 800d2d2:	e7e7      	b.n	800d2a4 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 800d2d4:	f832 ab02 	ldrh.w	sl, [r2], #2
 800d2d8:	f1ba 0f00 	cmp.w	sl, #0
 800d2dc:	d002      	beq.n	800d2e4 <update_box.isra.0+0xc0>
	    goto have_c0max;
 800d2de:	46bb      	mov	fp, r7
	    boxp->c0max = c0max = c0;
 800d2e0:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 800d2e2:	e7af      	b.n	800d244 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 800d2e4:	f109 0901 	add.w	r9, r9, #1
 800d2e8:	e7ea      	b.n	800d2c0 <update_box.isra.0+0x9c>
	histp = & histogram[c0][c1][c2min];
 800d2ea:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 800d2ec:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 800d2ee:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 800d2f2:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 800d2f4:	454c      	cmp	r4, r9
 800d2f6:	da0a      	bge.n	800d30e <update_box.isra.0+0xea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 800d2f8:	f108 0801 	add.w	r8, r8, #1
 800d2fc:	45d8      	cmp	r8, fp
 800d2fe:	ddf4      	ble.n	800d2ea <update_box.isra.0+0xc6>
    for (c1 = c1min; c1 <= c1max; c1++)
 800d300:	3201      	adds	r2, #1
 800d302:	4290      	cmp	r0, r2
 800d304:	db11      	blt.n	800d32a <update_box.isra.0+0x106>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 800d306:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 800d308:	eb0e 1a82 	add.w	sl, lr, r2, lsl #6
 800d30c:	e7f6      	b.n	800d2fc <update_box.isra.0+0xd8>
	  if (*histp++ != 0) {
 800d30e:	f837 6b02 	ldrh.w	r6, [r7], #2
 800d312:	b13e      	cbz	r6, 800d324 <update_box.isra.0+0x100>
  if (c1max > c1min)
 800d314:	4290      	cmp	r0, r2
	    boxp->c1min = c1min = c1;
 800d316:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 800d318:	dd97      	ble.n	800d24a <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 800d31a:	4684      	mov	ip, r0
 800d31c:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 800d31e:	eb0e 1a8c 	add.w	sl, lr, ip, lsl #6
 800d322:	e00d      	b.n	800d340 <update_box.isra.0+0x11c>
	for (c2 = c2min; c2 <= c2max; c2++)
 800d324:	f109 0901 	add.w	r9, r9, #1
 800d328:	e7e4      	b.n	800d2f4 <update_box.isra.0+0xd0>
 have_c1min:
 800d32a:	4662      	mov	r2, ip
 800d32c:	e7f5      	b.n	800d31a <update_box.isra.0+0xf6>
	histp = & histogram[c0][c1][c2min];
 800d32e:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 800d330:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 800d332:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 800d336:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 800d338:	454c      	cmp	r4, r9
 800d33a:	da09      	bge.n	800d350 <update_box.isra.0+0x12c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 800d33c:	f108 0801 	add.w	r8, r8, #1
 800d340:	45c3      	cmp	fp, r8
 800d342:	daf4      	bge.n	800d32e <update_box.isra.0+0x10a>
    for (c1 = c1max; c1 >= c1min; c1--)
 800d344:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d348:	4594      	cmp	ip, r2
 800d34a:	f6ff af7e 	blt.w	800d24a <update_box.isra.0+0x26>
 800d34e:	e7e5      	b.n	800d31c <update_box.isra.0+0xf8>
	  if (*histp++ != 0) {
 800d350:	f837 6b02 	ldrh.w	r6, [r7], #2
 800d354:	b11e      	cbz	r6, 800d35e <update_box.isra.0+0x13a>
	    goto have_c1max;
 800d356:	4660      	mov	r0, ip
	    boxp->c1max = c1max = c1;
 800d358:	f8c1 c00c 	str.w	ip, [r1, #12]
	    goto have_c1max;
 800d35c:	e775      	b.n	800d24a <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 800d35e:	f109 0901 	add.w	r9, r9, #1
 800d362:	e7e9      	b.n	800d338 <update_box.isra.0+0x114>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 800d364:	9e01      	ldr	r6, [sp, #4]
 800d366:	4690      	mov	r8, r2
 800d368:	f856 702e 	ldr.w	r7, [r6, lr, lsl #2]
 800d36c:	444f      	add	r7, r9
 800d36e:	4580      	cmp	r8, r0
 800d370:	dd11      	ble.n	800d396 <update_box.isra.0+0x172>
      for (c0 = c0min; c0 <= c0max; c0++) {
 800d372:	f10e 0e01 	add.w	lr, lr, #1
 800d376:	45f3      	cmp	fp, lr
 800d378:	daf4      	bge.n	800d364 <update_box.isra.0+0x140>
    for (c2 = c2min; c2 <= c2max; c2++)
 800d37a:	f10c 0c01 	add.w	ip, ip, #1
 800d37e:	4564      	cmp	r4, ip
 800d380:	f6bf af6e 	bge.w	800d260 <update_box.isra.0+0x3c>
 have_c2min:
 800d384:	46ac      	mov	ip, r5
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 800d386:	4627      	mov	r7, r4
 800d388:	9d02      	ldr	r5, [sp, #8]
 800d38a:	469e      	mov	lr, r3
 800d38c:	eb05 0947 	add.w	r9, r5, r7, lsl #1
 800d390:	9d03      	ldr	r5, [sp, #12]
 800d392:	44a9      	add	r9, r5
 800d394:	e034      	b.n	800d400 <update_box.isra.0+0x1dc>
	  if (*histp != 0) {
 800d396:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 800d39a:	f837 a00a 	ldrh.w	sl, [r7, sl]
 800d39e:	f1ba 0f00 	cmp.w	sl, #0
 800d3a2:	d021      	beq.n	800d3e8 <update_box.isra.0+0x1c4>
  if (c2max > c2min)
 800d3a4:	4564      	cmp	r4, ip
	    boxp->c2min = c2min = c2;
 800d3a6:	f8c1 c010 	str.w	ip, [r1, #16]
  if (c2max > c2min)
 800d3aa:	dcec      	bgt.n	800d386 <update_box.isra.0+0x162>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 800d3ac:	1a85      	subs	r5, r0, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 800d3ae:	ebab 0e03 	sub.w	lr, fp, r3
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 800d3b2:	eba4 070c 	sub.w	r7, r4, ip
 800d3b6:	ea4f 094c 	mov.w	r9, ip, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 800d3ba:	ea4f 08c5 	mov.w	r8, r5, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 800d3be:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 800d3c2:	eb08 0885 	add.w	r8, r8, r5, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 800d3c6:	00fd      	lsls	r5, r7, #3
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 800d3c8:	fb08 f808 	mul.w	r8, r8, r8
 800d3cc:	fb0e 880e 	mla	r8, lr, lr, r8
  ccount = 0;
 800d3d0:	f04f 0e00 	mov.w	lr, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 800d3d4:	fb05 8505 	mla	r5, r5, r5, r8
 800d3d8:	618d      	str	r5, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 800d3da:	459b      	cmp	fp, r3
 800d3dc:	da3f      	bge.n	800d45e <update_box.isra.0+0x23a>
  boxp->colorcount = ccount;
 800d3de:	f8c1 e01c 	str.w	lr, [r1, #28]
}
 800d3e2:	b005      	add	sp, #20
 800d3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 800d3e8:	f108 0801 	add.w	r8, r8, #1
 800d3ec:	e7bf      	b.n	800d36e <update_box.isra.0+0x14a>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 800d3ee:	9d01      	ldr	r5, [sp, #4]
 800d3f0:	4690      	mov	r8, r2
 800d3f2:	f855 502e 	ldr.w	r5, [r5, lr, lsl #2]
 800d3f6:	444d      	add	r5, r9
 800d3f8:	4540      	cmp	r0, r8
 800d3fa:	da07      	bge.n	800d40c <update_box.isra.0+0x1e8>
      for (c0 = c0min; c0 <= c0max; c0++) {
 800d3fc:	f10e 0e01 	add.w	lr, lr, #1
 800d400:	45f3      	cmp	fp, lr
 800d402:	daf4      	bge.n	800d3ee <update_box.isra.0+0x1ca>
    for (c2 = c2max; c2 >= c2min; c2--)
 800d404:	3f01      	subs	r7, #1
 800d406:	4567      	cmp	r7, ip
 800d408:	dbd0      	blt.n	800d3ac <update_box.isra.0+0x188>
 800d40a:	e7bd      	b.n	800d388 <update_box.isra.0+0x164>
	  if (*histp != 0) {
 800d40c:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 800d410:	f835 a00a 	ldrh.w	sl, [r5, sl]
 800d414:	f1ba 0f00 	cmp.w	sl, #0
 800d418:	d002      	beq.n	800d420 <update_box.isra.0+0x1fc>
	    goto have_c2max;
 800d41a:	463c      	mov	r4, r7
	    boxp->c2max = c2max = c2;
 800d41c:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 800d41e:	e7c5      	b.n	800d3ac <update_box.isra.0+0x188>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 800d420:	f108 0801 	add.w	r8, r8, #1
 800d424:	e7e8      	b.n	800d3f8 <update_box.isra.0+0x1d4>
 have_c2min:
 800d426:	46ac      	mov	ip, r5
 800d428:	e7c0      	b.n	800d3ac <update_box.isra.0+0x188>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 800d42a:	eb09 1587 	add.w	r5, r9, r7, lsl #6
 800d42e:	f1a5 0802 	sub.w	r8, r5, #2
 800d432:	9d01      	ldr	r5, [sp, #4]
 800d434:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 800d438:	4445      	add	r5, r8
 800d43a:	46e0      	mov	r8, ip
 800d43c:	4544      	cmp	r4, r8
 800d43e:	da04      	bge.n	800d44a <update_box.isra.0+0x226>
    for (c1 = c1min; c1 <= c1max; c1++) {
 800d440:	3701      	adds	r7, #1
 800d442:	42b8      	cmp	r0, r7
 800d444:	daf1      	bge.n	800d42a <update_box.isra.0+0x206>
  for (c0 = c0min; c0 <= c0max; c0++)
 800d446:	3301      	adds	r3, #1
 800d448:	e7c7      	b.n	800d3da <update_box.isra.0+0x1b6>
	if (*histp != 0) {
 800d44a:	f835 af02 	ldrh.w	sl, [r5, #2]!
 800d44e:	f1ba 0f00 	cmp.w	sl, #0
 800d452:	d001      	beq.n	800d458 <update_box.isra.0+0x234>
	  ccount++;
 800d454:	f10e 0e01 	add.w	lr, lr, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 800d458:	f108 0801 	add.w	r8, r8, #1
 800d45c:	e7ee      	b.n	800d43c <update_box.isra.0+0x218>
 800d45e:	4617      	mov	r7, r2
 800d460:	e7ef      	b.n	800d442 <update_box.isra.0+0x21e>

0800d462 <finish_pass1>:
{
 800d462:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 800d466:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 800d46a:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 800d46c:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 800d46e:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 800d472:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 800d474:	691b      	ldr	r3, [r3, #16]
{
 800d476:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 800d478:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 800d47c:	9b02      	ldr	r3, [sp, #8]
 800d47e:	695b      	ldr	r3, [r3, #20]
 800d480:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 800d482:	9a01      	ldr	r2, [sp, #4]
 800d484:	6843      	ldr	r3, [r0, #4]
 800d486:	0152      	lsls	r2, r2, #5
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 800d48c:	2300      	movs	r3, #0
 800d48e:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 800d490:	213f      	movs	r1, #63	; 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 800d492:	4605      	mov	r5, r0
  boxlist[0].c1min = 0;
 800d494:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 800d496:	6142      	str	r2, [r0, #20]
 800d498:	46a8      	mov	r8, r5
  boxlist[0].c2min = 0;
 800d49a:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 800d49e:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 800d4a2:	9b00      	ldr	r3, [sp, #0]
 800d4a4:	4601      	mov	r1, r0
 800d4a6:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 800d4aa:	f7ff febb 	bl	800d224 <update_box.isra.0>
  while (numboxes < desired_colors) {
 800d4ae:	9b01      	ldr	r3, [sp, #4]
 800d4b0:	455b      	cmp	r3, fp
 800d4b2:	dc24      	bgt.n	800d4fe <finish_pass1+0x9c>
 800d4b4:	2300      	movs	r3, #0
  hist3d histogram = cquantize->histogram;
 800d4b6:	9a00      	ldr	r2, [sp, #0]
 800d4b8:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 800d4bc:	6992      	ldr	r2, [r2, #24]
 800d4be:	9203      	str	r2, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 800d4c0:	e9d8 7200 	ldrd	r7, r2, [r8]
 800d4c4:	9204      	str	r2, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 800d4c6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800d4ca:	9205      	str	r2, [sp, #20]
 800d4cc:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800d4d0:	9206      	str	r2, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 800d4d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d4d6:	9201      	str	r2, [sp, #4]
 800d4d8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800d4dc:	9207      	str	r2, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 800d4de:	9a01      	ldr	r2, [sp, #4]
 800d4e0:	0052      	lsls	r2, r2, #1
 800d4e2:	9209      	str	r2, [sp, #36]	; 0x24
  long c2total = 0;
 800d4e4:	2200      	movs	r2, #0
  long c1total = 0;
 800d4e6:	4692      	mov	sl, r2
  long c0total = 0;
 800d4e8:	4691      	mov	r9, r2
  long total = 0;
 800d4ea:	4611      	mov	r1, r2
  for (c0 = c0min; c0 <= c0max; c0++)
 800d4ec:	9804      	ldr	r0, [sp, #16]
 800d4ee:	42b8      	cmp	r0, r7
 800d4f0:	f2c0 809f 	blt.w	800d632 <finish_pass1+0x1d0>
 800d4f4:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 800d4f6:	9e05      	ldr	r6, [sp, #20]
 800d4f8:	3004      	adds	r0, #4
 800d4fa:	9008      	str	r0, [sp, #32]
 800d4fc:	e083      	b.n	800d606 <finish_pass1+0x1a4>
    if (numboxes*2 <= desired_colors) {
 800d4fe:	9b01      	ldr	r3, [sp, #4]
 800d500:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 800d504:	db48      	blt.n	800d598 <finish_pass1+0x136>
  boxptr which = NULL;
 800d506:	2300      	movs	r3, #0
 800d508:	4628      	mov	r0, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 800d50a:	461e      	mov	r6, r3
  register long maxc = 0;
 800d50c:	461f      	mov	r7, r3
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 800d50e:	69c2      	ldr	r2, [r0, #28]
 800d510:	42ba      	cmp	r2, r7
 800d512:	dd04      	ble.n	800d51e <finish_pass1+0xbc>
 800d514:	6984      	ldr	r4, [r0, #24]
 800d516:	2c00      	cmp	r4, #0
 800d518:	bfc4      	itt	gt
 800d51a:	4603      	movgt	r3, r0
 800d51c:	4617      	movgt	r7, r2
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 800d51e:	3601      	adds	r6, #1
 800d520:	3020      	adds	r0, #32
 800d522:	45b3      	cmp	fp, r6
 800d524:	d1f3      	bne.n	800d50e <finish_pass1+0xac>
    if (b1 == NULL)		/* no splittable boxes left! */
 800d526:	2b00      	cmp	r3, #0
 800d528:	d0c5      	beq.n	800d4b6 <finish_pass1+0x54>
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 800d52a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d52e:	f101 0220 	add.w	r2, r1, #32
 800d532:	f8c1 a024 	str.w	sl, [r1, #36]	; 0x24
 800d536:	ee07 2a90 	vmov	s15, r2
 800d53a:	68da      	ldr	r2, [r3, #12]
 800d53c:	62ca      	str	r2, [r1, #44]	; 0x2c
 800d53e:	695a      	ldr	r2, [r3, #20]
 800d540:	634a      	str	r2, [r1, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	620a      	str	r2, [r1, #32]
 800d546:	689a      	ldr	r2, [r3, #8]
 800d548:	628a      	str	r2, [r1, #40]	; 0x28
 800d54a:	f8d3 e010 	ldr.w	lr, [r3, #16]
 800d54e:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 800d552:	681e      	ldr	r6, [r3, #0]
 800d554:	ebaa 0906 	sub.w	r9, sl, r6
 800d558:	ea4f 1209 	mov.w	r2, r9, lsl #4
 800d55c:	9203      	str	r2, [sp, #12]
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 800d55e:	68da      	ldr	r2, [r3, #12]
 800d560:	4614      	mov	r4, r2
 800d562:	689a      	ldr	r2, [r3, #8]
 800d564:	1aa0      	subs	r0, r4, r2
 800d566:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 800d56a:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 800d56e:	6958      	ldr	r0, [r3, #20]
    if (c0 > cmax) { cmax = c0; n = 0; }
 800d570:	ebbc 1f09 	cmp.w	ip, r9, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 800d574:	eba0 070e 	sub.w	r7, r0, lr
 800d578:	ea4f 07c7 	mov.w	r7, r7, lsl #3
    if (c0 > cmax) { cmax = c0; n = 0; }
 800d57c:	f2c0 808d 	blt.w	800d69a <finish_pass1+0x238>
    if (c2 > cmax) { n = 2; }
 800d580:	45bc      	cmp	ip, r7
 800d582:	f2c0 808d 	blt.w	800d6a0 <finish_pass1+0x23e>
      lb = (b1->c1max + b1->c1min) / 2;
 800d586:	4620      	mov	r0, r4
 800d588:	4410      	add	r0, r2
 800d58a:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 800d58e:	1052      	asrs	r2, r2, #1
      b1->c1max = lb;
 800d590:	60da      	str	r2, [r3, #12]
      b2->c1min = lb+1;
 800d592:	3201      	adds	r2, #1
 800d594:	628a      	str	r2, [r1, #40]	; 0x28
      break;
 800d596:	e015      	b.n	800d5c4 <finish_pass1+0x162>
  boxptr which = NULL;
 800d598:	2300      	movs	r3, #0
 800d59a:	462a      	mov	r2, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 800d59c:	4618      	mov	r0, r3
  register INT32 maxv = 0;
 800d59e:	461e      	mov	r6, r3
    if (boxp->volume > maxv) {
 800d5a0:	6997      	ldr	r7, [r2, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 800d5a2:	3001      	adds	r0, #1
    if (boxp->volume > maxv) {
 800d5a4:	42b7      	cmp	r7, r6
 800d5a6:	bfc4      	itt	gt
 800d5a8:	4613      	movgt	r3, r2
 800d5aa:	463e      	movgt	r6, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 800d5ac:	4583      	cmp	fp, r0
 800d5ae:	f102 0220 	add.w	r2, r2, #32
 800d5b2:	d1f5      	bne.n	800d5a0 <finish_pass1+0x13e>
 800d5b4:	e7b7      	b.n	800d526 <finish_pass1+0xc4>
      lb = (b1->c0max + b1->c0min) / 2;
 800d5b6:	4456      	add	r6, sl
 800d5b8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800d5bc:	1076      	asrs	r6, r6, #1
      b1->c0max = lb;
 800d5be:	605e      	str	r6, [r3, #4]
      b2->c0min = lb+1;
 800d5c0:	3601      	adds	r6, #1
 800d5c2:	620e      	str	r6, [r1, #32]
    update_box(cinfo, b1);
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	9b00      	ldr	r3, [sp, #0]
    numboxes++;
 800d5c8:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 800d5cc:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 800d5d0:	f7ff fe28 	bl	800d224 <update_box.isra.0>
    update_box(cinfo, b2);
 800d5d4:	9b00      	ldr	r3, [sp, #0]
 800d5d6:	ee17 1a90 	vmov	r1, s15
 800d5da:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 800d5de:	f7ff fe21 	bl	800d224 <update_box.isra.0>
    numboxes++;
 800d5e2:	e764      	b.n	800d4ae <finish_pass1+0x4c>
      histp = & histogram[c0][c1][c2min];
 800d5e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5e6:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 800d5ea:	9c03      	ldr	r4, [sp, #12]
 800d5ec:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800d5f0:	f10e 0e02 	add.w	lr, lr, #2
 800d5f4:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 800d5f8:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 800d5fc:	4428      	add	r0, r5
      for (c2 = c2min; c2 <= c2max; c2++) {
 800d5fe:	9c07      	ldr	r4, [sp, #28]
 800d600:	4564      	cmp	r4, ip
 800d602:	da05      	bge.n	800d610 <finish_pass1+0x1ae>
    for (c1 = c1min; c1 <= c1max; c1++) {
 800d604:	3601      	adds	r6, #1
 800d606:	9806      	ldr	r0, [sp, #24]
 800d608:	42b0      	cmp	r0, r6
 800d60a:	daeb      	bge.n	800d5e4 <finish_pass1+0x182>
  for (c0 = c0min; c0 <= c0max; c0++)
 800d60c:	3701      	adds	r7, #1
 800d60e:	e76d      	b.n	800d4ec <finish_pass1+0x8a>
	if ((count = *histp++) != 0) {
 800d610:	f830 5b02 	ldrh.w	r5, [r0], #2
 800d614:	b155      	cbz	r5, 800d62c <finish_pass1+0x1ca>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 800d616:	9c08      	ldr	r4, [sp, #32]
	  total += count;
 800d618:	4429      	add	r1, r5
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 800d61a:	fb0e aa05 	mla	sl, lr, r5, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 800d61e:	fb04 9905 	mla	r9, r4, r5, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 800d622:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800d626:	3404      	adds	r4, #4
 800d628:	fb05 2204 	mla	r2, r5, r4, r2
      for (c2 = c2min; c2 <= c2max; c2++) {
 800d62c:	f10c 0c01 	add.w	ip, ip, #1
 800d630:	e7e5      	b.n	800d5fe <finish_pass1+0x19c>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 800d632:	eb09 0961 	add.w	r9, r9, r1, asr #1
 800d636:	9800      	ldr	r0, [sp, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 800d638:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
  for (i = 0; i < numboxes; i++)
 800d63c:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 800d640:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 800d644:	eb02 0261 	add.w	r2, r2, r1, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 800d648:	fb99 f9f1 	sdiv	r9, r9, r1
 800d64c:	6800      	ldr	r0, [r0, #0]
 800d64e:	f800 9003 	strb.w	r9, [r0, r3]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 800d652:	9800      	ldr	r0, [sp, #0]
 800d654:	fb9a faf1 	sdiv	sl, sl, r1
 800d658:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 800d65c:	6840      	ldr	r0, [r0, #4]
 800d65e:	f800 a003 	strb.w	sl, [r0, r3]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 800d662:	9800      	ldr	r0, [sp, #0]
 800d664:	fb92 f1f1 	sdiv	r1, r2, r1
 800d668:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 800d66c:	6880      	ldr	r0, [r0, #8]
 800d66e:	54c1      	strb	r1, [r0, r3]
  for (i = 0; i < numboxes; i++)
 800d670:	3301      	adds	r3, #1
 800d672:	455b      	cmp	r3, fp
 800d674:	f47f af1f 	bne.w	800d4b6 <finish_pass1+0x54>
  cinfo->actual_number_of_colors = numboxes;
 800d678:	9a00      	ldr	r2, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 800d67a:	2162      	movs	r1, #98	; 0x62
 800d67c:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 800d67e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 800d682:	6812      	ldr	r2, [r2, #0]
 800d684:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800d688:	6853      	ldr	r3, [r2, #4]
 800d68a:	2101      	movs	r1, #1
 800d68c:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 800d68e:	2301      	movs	r3, #1
 800d690:	9a02      	ldr	r2, [sp, #8]
 800d692:	61d3      	str	r3, [r2, #28]
}
 800d694:	b00b      	add	sp, #44	; 0x2c
 800d696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c2 > cmax) { n = 2; }
 800d69a:	9a03      	ldr	r2, [sp, #12]
 800d69c:	42ba      	cmp	r2, r7
 800d69e:	da8a      	bge.n	800d5b6 <finish_pass1+0x154>
      lb = (b1->c2max + b1->c2min) / 2;
 800d6a0:	4470      	add	r0, lr
 800d6a2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800d6a6:	1040      	asrs	r0, r0, #1
      b1->c2max = lb;
 800d6a8:	6158      	str	r0, [r3, #20]
      b2->c2min = lb+1;
 800d6aa:	3001      	adds	r0, #1
 800d6ac:	6308      	str	r0, [r1, #48]	; 0x30
      break;
 800d6ae:	e789      	b.n	800d5c4 <finish_pass1+0x162>

0800d6b0 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 800d6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d6b2:	6843      	ldr	r3, [r0, #4]
 800d6b4:	222c      	movs	r2, #44	; 0x2c
 800d6b6:	2101      	movs	r1, #1
{
 800d6b8:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 800d6be:	4b30      	ldr	r3, [pc, #192]	; (800d780 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 800d6c0:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d6c4:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 800d6c6:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 800d6c8:	4b2e      	ldr	r3, [pc, #184]	; (800d784 <jinit_2pass_quantizer+0xd4>)
 800d6ca:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 800d6d0:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 800d6d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d6d4:	2b03      	cmp	r3, #3
 800d6d6:	d005      	beq.n	800d6e4 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 800d6d8:	6823      	ldr	r3, [r4, #0]
 800d6da:	2230      	movs	r2, #48	; 0x30
 800d6dc:	4620      	mov	r0, r4
 800d6de:	615a      	str	r2, [r3, #20]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 800d6e4:	6863      	ldr	r3, [r4, #4]
 800d6e6:	2600      	movs	r6, #0
 800d6e8:	2280      	movs	r2, #128	; 0x80
 800d6ea:	2101      	movs	r1, #1
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	4798      	blx	r3
 800d6f2:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 800d6f4:	6863      	ldr	r3, [r4, #4]
 800d6f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d6fa:	69af      	ldr	r7, [r5, #24]
 800d6fc:	2101      	movs	r1, #1
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	4620      	mov	r0, r4
 800d702:	4798      	blx	r3
 800d704:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 800d706:	3604      	adds	r6, #4
 800d708:	2e80      	cmp	r6, #128	; 0x80
 800d70a:	d1f3      	bne.n	800d6f4 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 800d70c:	2301      	movs	r3, #1
 800d70e:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 800d710:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d712:	2b00      	cmp	r3, #0
 800d714:	d031      	beq.n	800d77a <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 800d716:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 800d718:	2e07      	cmp	r6, #7
 800d71a:	dc25      	bgt.n	800d768 <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 800d71c:	223a      	movs	r2, #58	; 0x3a
 800d71e:	6823      	ldr	r3, [r4, #0]
 800d720:	615a      	str	r2, [r3, #20]
 800d722:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 800d724:	619a      	str	r2, [r3, #24]
 800d726:	4620      	mov	r0, r4
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 800d72c:	6863      	ldr	r3, [r4, #4]
 800d72e:	4632      	mov	r2, r6
 800d730:	2101      	movs	r1, #1
 800d732:	4620      	mov	r0, r4
 800d734:	689f      	ldr	r7, [r3, #8]
 800d736:	2303      	movs	r3, #3
 800d738:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 800d73a:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 800d73e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800d742:	b1e3      	cbz	r3, 800d77e <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 800d744:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 800d746:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d748:	4620      	mov	r0, r4
 800d74a:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 800d74c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 800d750:	2306      	movs	r3, #6
 800d752:	435a      	muls	r2, r3
 800d754:	6863      	ldr	r3, [r4, #4]
 800d756:	320c      	adds	r2, #12
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	4798      	blx	r3
 800d75c:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 800d75e:	4620      	mov	r0, r4
  }
}
 800d760:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 800d764:	f7ff bcb8 	b.w	800d0d8 <init_error_limit>
    if (desired > MAXNUMCOLORS)
 800d768:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800d76c:	ddde      	ble.n	800d72c <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 800d76e:	223b      	movs	r2, #59	; 0x3b
 800d770:	6823      	ldr	r3, [r4, #0]
 800d772:	615a      	str	r2, [r3, #20]
 800d774:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d778:	e7d4      	b.n	800d724 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 800d77a:	612b      	str	r3, [r5, #16]
 800d77c:	e7df      	b.n	800d73e <jinit_2pass_quantizer+0x8e>
}
 800d77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d780:	0800d155 	.word	0x0800d155
 800d784:	0800d149 	.word	0x0800d149

0800d788 <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 800d788:	4408      	add	r0, r1
 800d78a:	3801      	subs	r0, #1
}
 800d78c:	fb90 f0f1 	sdiv	r0, r0, r1
 800d790:	4770      	bx	lr

0800d792 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 800d792:	1e4b      	subs	r3, r1, #1
 800d794:	4418      	add	r0, r3
  return a - (a % b);
 800d796:	fb90 f3f1 	sdiv	r3, r0, r1
 800d79a:	fb01 0113 	mls	r1, r1, r3, r0
}
 800d79e:	1a40      	subs	r0, r0, r1
 800d7a0:	4770      	bx	lr

0800d7a2 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 800d7a2:	b570      	push	{r4, r5, r6, lr}
 800d7a4:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 800d7a6:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 800d7aa:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 800d7ae:	2e00      	cmp	r6, #0
 800d7b0:	dc00      	bgt.n	800d7b4 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 800d7b2:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 800d7b4:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 800d7b6:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 800d7b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d7bc:	f855 0b04 	ldr.w	r0, [r5], #4
 800d7c0:	f000 f836 	bl	800d830 <memcpy>
  for (row = num_rows; row > 0; row--) {
 800d7c4:	e7f3      	b.n	800d7ae <jcopy_sample_rows+0xc>
	...

0800d7c8 <__libc_init_array>:
 800d7c8:	b570      	push	{r4, r5, r6, lr}
 800d7ca:	4d0d      	ldr	r5, [pc, #52]	; (800d800 <__libc_init_array+0x38>)
 800d7cc:	4c0d      	ldr	r4, [pc, #52]	; (800d804 <__libc_init_array+0x3c>)
 800d7ce:	1b64      	subs	r4, r4, r5
 800d7d0:	10a4      	asrs	r4, r4, #2
 800d7d2:	2600      	movs	r6, #0
 800d7d4:	42a6      	cmp	r6, r4
 800d7d6:	d109      	bne.n	800d7ec <__libc_init_array+0x24>
 800d7d8:	4d0b      	ldr	r5, [pc, #44]	; (800d808 <__libc_init_array+0x40>)
 800d7da:	4c0c      	ldr	r4, [pc, #48]	; (800d80c <__libc_init_array+0x44>)
 800d7dc:	f000 fcac 	bl	800e138 <_init>
 800d7e0:	1b64      	subs	r4, r4, r5
 800d7e2:	10a4      	asrs	r4, r4, #2
 800d7e4:	2600      	movs	r6, #0
 800d7e6:	42a6      	cmp	r6, r4
 800d7e8:	d105      	bne.n	800d7f6 <__libc_init_array+0x2e>
 800d7ea:	bd70      	pop	{r4, r5, r6, pc}
 800d7ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7f0:	4798      	blx	r3
 800d7f2:	3601      	adds	r6, #1
 800d7f4:	e7ee      	b.n	800d7d4 <__libc_init_array+0xc>
 800d7f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7fa:	4798      	blx	r3
 800d7fc:	3601      	adds	r6, #1
 800d7fe:	e7f2      	b.n	800d7e6 <__libc_init_array+0x1e>
 800d800:	080143b8 	.word	0x080143b8
 800d804:	080143b8 	.word	0x080143b8
 800d808:	080143b8 	.word	0x080143b8
 800d80c:	080143bc 	.word	0x080143bc

0800d810 <malloc>:
 800d810:	4b02      	ldr	r3, [pc, #8]	; (800d81c <malloc+0xc>)
 800d812:	4601      	mov	r1, r0
 800d814:	6818      	ldr	r0, [r3, #0]
 800d816:	f000 b88d 	b.w	800d934 <_malloc_r>
 800d81a:	bf00      	nop
 800d81c:	20000040 	.word	0x20000040

0800d820 <free>:
 800d820:	4b02      	ldr	r3, [pc, #8]	; (800d82c <free+0xc>)
 800d822:	4601      	mov	r1, r0
 800d824:	6818      	ldr	r0, [r3, #0]
 800d826:	f000 b819 	b.w	800d85c <_free_r>
 800d82a:	bf00      	nop
 800d82c:	20000040 	.word	0x20000040

0800d830 <memcpy>:
 800d830:	440a      	add	r2, r1
 800d832:	4291      	cmp	r1, r2
 800d834:	f100 33ff 	add.w	r3, r0, #4294967295
 800d838:	d100      	bne.n	800d83c <memcpy+0xc>
 800d83a:	4770      	bx	lr
 800d83c:	b510      	push	{r4, lr}
 800d83e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d842:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d846:	4291      	cmp	r1, r2
 800d848:	d1f9      	bne.n	800d83e <memcpy+0xe>
 800d84a:	bd10      	pop	{r4, pc}

0800d84c <memset>:
 800d84c:	4402      	add	r2, r0
 800d84e:	4603      	mov	r3, r0
 800d850:	4293      	cmp	r3, r2
 800d852:	d100      	bne.n	800d856 <memset+0xa>
 800d854:	4770      	bx	lr
 800d856:	f803 1b01 	strb.w	r1, [r3], #1
 800d85a:	e7f9      	b.n	800d850 <memset+0x4>

0800d85c <_free_r>:
 800d85c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d85e:	2900      	cmp	r1, #0
 800d860:	d044      	beq.n	800d8ec <_free_r+0x90>
 800d862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d866:	9001      	str	r0, [sp, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	f1a1 0404 	sub.w	r4, r1, #4
 800d86e:	bfb8      	it	lt
 800d870:	18e4      	addlt	r4, r4, r3
 800d872:	f000 f903 	bl	800da7c <__malloc_lock>
 800d876:	4a1e      	ldr	r2, [pc, #120]	; (800d8f0 <_free_r+0x94>)
 800d878:	9801      	ldr	r0, [sp, #4]
 800d87a:	6813      	ldr	r3, [r2, #0]
 800d87c:	b933      	cbnz	r3, 800d88c <_free_r+0x30>
 800d87e:	6063      	str	r3, [r4, #4]
 800d880:	6014      	str	r4, [r2, #0]
 800d882:	b003      	add	sp, #12
 800d884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d888:	f000 b8fe 	b.w	800da88 <__malloc_unlock>
 800d88c:	42a3      	cmp	r3, r4
 800d88e:	d908      	bls.n	800d8a2 <_free_r+0x46>
 800d890:	6825      	ldr	r5, [r4, #0]
 800d892:	1961      	adds	r1, r4, r5
 800d894:	428b      	cmp	r3, r1
 800d896:	bf01      	itttt	eq
 800d898:	6819      	ldreq	r1, [r3, #0]
 800d89a:	685b      	ldreq	r3, [r3, #4]
 800d89c:	1949      	addeq	r1, r1, r5
 800d89e:	6021      	streq	r1, [r4, #0]
 800d8a0:	e7ed      	b.n	800d87e <_free_r+0x22>
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	b10b      	cbz	r3, 800d8ac <_free_r+0x50>
 800d8a8:	42a3      	cmp	r3, r4
 800d8aa:	d9fa      	bls.n	800d8a2 <_free_r+0x46>
 800d8ac:	6811      	ldr	r1, [r2, #0]
 800d8ae:	1855      	adds	r5, r2, r1
 800d8b0:	42a5      	cmp	r5, r4
 800d8b2:	d10b      	bne.n	800d8cc <_free_r+0x70>
 800d8b4:	6824      	ldr	r4, [r4, #0]
 800d8b6:	4421      	add	r1, r4
 800d8b8:	1854      	adds	r4, r2, r1
 800d8ba:	42a3      	cmp	r3, r4
 800d8bc:	6011      	str	r1, [r2, #0]
 800d8be:	d1e0      	bne.n	800d882 <_free_r+0x26>
 800d8c0:	681c      	ldr	r4, [r3, #0]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	6053      	str	r3, [r2, #4]
 800d8c6:	4421      	add	r1, r4
 800d8c8:	6011      	str	r1, [r2, #0]
 800d8ca:	e7da      	b.n	800d882 <_free_r+0x26>
 800d8cc:	d902      	bls.n	800d8d4 <_free_r+0x78>
 800d8ce:	230c      	movs	r3, #12
 800d8d0:	6003      	str	r3, [r0, #0]
 800d8d2:	e7d6      	b.n	800d882 <_free_r+0x26>
 800d8d4:	6825      	ldr	r5, [r4, #0]
 800d8d6:	1961      	adds	r1, r4, r5
 800d8d8:	428b      	cmp	r3, r1
 800d8da:	bf04      	itt	eq
 800d8dc:	6819      	ldreq	r1, [r3, #0]
 800d8de:	685b      	ldreq	r3, [r3, #4]
 800d8e0:	6063      	str	r3, [r4, #4]
 800d8e2:	bf04      	itt	eq
 800d8e4:	1949      	addeq	r1, r1, r5
 800d8e6:	6021      	streq	r1, [r4, #0]
 800d8e8:	6054      	str	r4, [r2, #4]
 800d8ea:	e7ca      	b.n	800d882 <_free_r+0x26>
 800d8ec:	b003      	add	sp, #12
 800d8ee:	bd30      	pop	{r4, r5, pc}
 800d8f0:	200014dc 	.word	0x200014dc

0800d8f4 <sbrk_aligned>:
 800d8f4:	b570      	push	{r4, r5, r6, lr}
 800d8f6:	4e0e      	ldr	r6, [pc, #56]	; (800d930 <sbrk_aligned+0x3c>)
 800d8f8:	460c      	mov	r4, r1
 800d8fa:	6831      	ldr	r1, [r6, #0]
 800d8fc:	4605      	mov	r5, r0
 800d8fe:	b911      	cbnz	r1, 800d906 <sbrk_aligned+0x12>
 800d900:	f000 f88c 	bl	800da1c <_sbrk_r>
 800d904:	6030      	str	r0, [r6, #0]
 800d906:	4621      	mov	r1, r4
 800d908:	4628      	mov	r0, r5
 800d90a:	f000 f887 	bl	800da1c <_sbrk_r>
 800d90e:	1c43      	adds	r3, r0, #1
 800d910:	d00a      	beq.n	800d928 <sbrk_aligned+0x34>
 800d912:	1cc4      	adds	r4, r0, #3
 800d914:	f024 0403 	bic.w	r4, r4, #3
 800d918:	42a0      	cmp	r0, r4
 800d91a:	d007      	beq.n	800d92c <sbrk_aligned+0x38>
 800d91c:	1a21      	subs	r1, r4, r0
 800d91e:	4628      	mov	r0, r5
 800d920:	f000 f87c 	bl	800da1c <_sbrk_r>
 800d924:	3001      	adds	r0, #1
 800d926:	d101      	bne.n	800d92c <sbrk_aligned+0x38>
 800d928:	f04f 34ff 	mov.w	r4, #4294967295
 800d92c:	4620      	mov	r0, r4
 800d92e:	bd70      	pop	{r4, r5, r6, pc}
 800d930:	200014e0 	.word	0x200014e0

0800d934 <_malloc_r>:
 800d934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d938:	1ccd      	adds	r5, r1, #3
 800d93a:	f025 0503 	bic.w	r5, r5, #3
 800d93e:	3508      	adds	r5, #8
 800d940:	2d0c      	cmp	r5, #12
 800d942:	bf38      	it	cc
 800d944:	250c      	movcc	r5, #12
 800d946:	2d00      	cmp	r5, #0
 800d948:	4607      	mov	r7, r0
 800d94a:	db01      	blt.n	800d950 <_malloc_r+0x1c>
 800d94c:	42a9      	cmp	r1, r5
 800d94e:	d905      	bls.n	800d95c <_malloc_r+0x28>
 800d950:	230c      	movs	r3, #12
 800d952:	603b      	str	r3, [r7, #0]
 800d954:	2600      	movs	r6, #0
 800d956:	4630      	mov	r0, r6
 800d958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d95c:	4e2e      	ldr	r6, [pc, #184]	; (800da18 <_malloc_r+0xe4>)
 800d95e:	f000 f88d 	bl	800da7c <__malloc_lock>
 800d962:	6833      	ldr	r3, [r6, #0]
 800d964:	461c      	mov	r4, r3
 800d966:	bb34      	cbnz	r4, 800d9b6 <_malloc_r+0x82>
 800d968:	4629      	mov	r1, r5
 800d96a:	4638      	mov	r0, r7
 800d96c:	f7ff ffc2 	bl	800d8f4 <sbrk_aligned>
 800d970:	1c43      	adds	r3, r0, #1
 800d972:	4604      	mov	r4, r0
 800d974:	d14d      	bne.n	800da12 <_malloc_r+0xde>
 800d976:	6834      	ldr	r4, [r6, #0]
 800d978:	4626      	mov	r6, r4
 800d97a:	2e00      	cmp	r6, #0
 800d97c:	d140      	bne.n	800da00 <_malloc_r+0xcc>
 800d97e:	6823      	ldr	r3, [r4, #0]
 800d980:	4631      	mov	r1, r6
 800d982:	4638      	mov	r0, r7
 800d984:	eb04 0803 	add.w	r8, r4, r3
 800d988:	f000 f848 	bl	800da1c <_sbrk_r>
 800d98c:	4580      	cmp	r8, r0
 800d98e:	d13a      	bne.n	800da06 <_malloc_r+0xd2>
 800d990:	6821      	ldr	r1, [r4, #0]
 800d992:	3503      	adds	r5, #3
 800d994:	1a6d      	subs	r5, r5, r1
 800d996:	f025 0503 	bic.w	r5, r5, #3
 800d99a:	3508      	adds	r5, #8
 800d99c:	2d0c      	cmp	r5, #12
 800d99e:	bf38      	it	cc
 800d9a0:	250c      	movcc	r5, #12
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	f7ff ffa5 	bl	800d8f4 <sbrk_aligned>
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	d02b      	beq.n	800da06 <_malloc_r+0xd2>
 800d9ae:	6823      	ldr	r3, [r4, #0]
 800d9b0:	442b      	add	r3, r5
 800d9b2:	6023      	str	r3, [r4, #0]
 800d9b4:	e00e      	b.n	800d9d4 <_malloc_r+0xa0>
 800d9b6:	6822      	ldr	r2, [r4, #0]
 800d9b8:	1b52      	subs	r2, r2, r5
 800d9ba:	d41e      	bmi.n	800d9fa <_malloc_r+0xc6>
 800d9bc:	2a0b      	cmp	r2, #11
 800d9be:	d916      	bls.n	800d9ee <_malloc_r+0xba>
 800d9c0:	1961      	adds	r1, r4, r5
 800d9c2:	42a3      	cmp	r3, r4
 800d9c4:	6025      	str	r5, [r4, #0]
 800d9c6:	bf18      	it	ne
 800d9c8:	6059      	strne	r1, [r3, #4]
 800d9ca:	6863      	ldr	r3, [r4, #4]
 800d9cc:	bf08      	it	eq
 800d9ce:	6031      	streq	r1, [r6, #0]
 800d9d0:	5162      	str	r2, [r4, r5]
 800d9d2:	604b      	str	r3, [r1, #4]
 800d9d4:	4638      	mov	r0, r7
 800d9d6:	f104 060b 	add.w	r6, r4, #11
 800d9da:	f000 f855 	bl	800da88 <__malloc_unlock>
 800d9de:	f026 0607 	bic.w	r6, r6, #7
 800d9e2:	1d23      	adds	r3, r4, #4
 800d9e4:	1af2      	subs	r2, r6, r3
 800d9e6:	d0b6      	beq.n	800d956 <_malloc_r+0x22>
 800d9e8:	1b9b      	subs	r3, r3, r6
 800d9ea:	50a3      	str	r3, [r4, r2]
 800d9ec:	e7b3      	b.n	800d956 <_malloc_r+0x22>
 800d9ee:	6862      	ldr	r2, [r4, #4]
 800d9f0:	42a3      	cmp	r3, r4
 800d9f2:	bf0c      	ite	eq
 800d9f4:	6032      	streq	r2, [r6, #0]
 800d9f6:	605a      	strne	r2, [r3, #4]
 800d9f8:	e7ec      	b.n	800d9d4 <_malloc_r+0xa0>
 800d9fa:	4623      	mov	r3, r4
 800d9fc:	6864      	ldr	r4, [r4, #4]
 800d9fe:	e7b2      	b.n	800d966 <_malloc_r+0x32>
 800da00:	4634      	mov	r4, r6
 800da02:	6876      	ldr	r6, [r6, #4]
 800da04:	e7b9      	b.n	800d97a <_malloc_r+0x46>
 800da06:	230c      	movs	r3, #12
 800da08:	603b      	str	r3, [r7, #0]
 800da0a:	4638      	mov	r0, r7
 800da0c:	f000 f83c 	bl	800da88 <__malloc_unlock>
 800da10:	e7a1      	b.n	800d956 <_malloc_r+0x22>
 800da12:	6025      	str	r5, [r4, #0]
 800da14:	e7de      	b.n	800d9d4 <_malloc_r+0xa0>
 800da16:	bf00      	nop
 800da18:	200014dc 	.word	0x200014dc

0800da1c <_sbrk_r>:
 800da1c:	b538      	push	{r3, r4, r5, lr}
 800da1e:	4d06      	ldr	r5, [pc, #24]	; (800da38 <_sbrk_r+0x1c>)
 800da20:	2300      	movs	r3, #0
 800da22:	4604      	mov	r4, r0
 800da24:	4608      	mov	r0, r1
 800da26:	602b      	str	r3, [r5, #0]
 800da28:	f000 fb78 	bl	800e11c <_sbrk>
 800da2c:	1c43      	adds	r3, r0, #1
 800da2e:	d102      	bne.n	800da36 <_sbrk_r+0x1a>
 800da30:	682b      	ldr	r3, [r5, #0]
 800da32:	b103      	cbz	r3, 800da36 <_sbrk_r+0x1a>
 800da34:	6023      	str	r3, [r4, #0]
 800da36:	bd38      	pop	{r3, r4, r5, pc}
 800da38:	200014e4 	.word	0x200014e4

0800da3c <siprintf>:
 800da3c:	b40e      	push	{r1, r2, r3}
 800da3e:	b500      	push	{lr}
 800da40:	b09c      	sub	sp, #112	; 0x70
 800da42:	ab1d      	add	r3, sp, #116	; 0x74
 800da44:	9002      	str	r0, [sp, #8]
 800da46:	9006      	str	r0, [sp, #24]
 800da48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da4c:	4809      	ldr	r0, [pc, #36]	; (800da74 <siprintf+0x38>)
 800da4e:	9107      	str	r1, [sp, #28]
 800da50:	9104      	str	r1, [sp, #16]
 800da52:	4909      	ldr	r1, [pc, #36]	; (800da78 <siprintf+0x3c>)
 800da54:	f853 2b04 	ldr.w	r2, [r3], #4
 800da58:	9105      	str	r1, [sp, #20]
 800da5a:	6800      	ldr	r0, [r0, #0]
 800da5c:	9301      	str	r3, [sp, #4]
 800da5e:	a902      	add	r1, sp, #8
 800da60:	f000 f874 	bl	800db4c <_svfiprintf_r>
 800da64:	9b02      	ldr	r3, [sp, #8]
 800da66:	2200      	movs	r2, #0
 800da68:	701a      	strb	r2, [r3, #0]
 800da6a:	b01c      	add	sp, #112	; 0x70
 800da6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800da70:	b003      	add	sp, #12
 800da72:	4770      	bx	lr
 800da74:	20000040 	.word	0x20000040
 800da78:	ffff0208 	.word	0xffff0208

0800da7c <__malloc_lock>:
 800da7c:	4801      	ldr	r0, [pc, #4]	; (800da84 <__malloc_lock+0x8>)
 800da7e:	f000 baf9 	b.w	800e074 <__retarget_lock_acquire_recursive>
 800da82:	bf00      	nop
 800da84:	200014e8 	.word	0x200014e8

0800da88 <__malloc_unlock>:
 800da88:	4801      	ldr	r0, [pc, #4]	; (800da90 <__malloc_unlock+0x8>)
 800da8a:	f000 baf4 	b.w	800e076 <__retarget_lock_release_recursive>
 800da8e:	bf00      	nop
 800da90:	200014e8 	.word	0x200014e8

0800da94 <__ssputs_r>:
 800da94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da98:	688e      	ldr	r6, [r1, #8]
 800da9a:	429e      	cmp	r6, r3
 800da9c:	4682      	mov	sl, r0
 800da9e:	460c      	mov	r4, r1
 800daa0:	4690      	mov	r8, r2
 800daa2:	461f      	mov	r7, r3
 800daa4:	d838      	bhi.n	800db18 <__ssputs_r+0x84>
 800daa6:	898a      	ldrh	r2, [r1, #12]
 800daa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800daac:	d032      	beq.n	800db14 <__ssputs_r+0x80>
 800daae:	6825      	ldr	r5, [r4, #0]
 800dab0:	6909      	ldr	r1, [r1, #16]
 800dab2:	eba5 0901 	sub.w	r9, r5, r1
 800dab6:	6965      	ldr	r5, [r4, #20]
 800dab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dabc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dac0:	3301      	adds	r3, #1
 800dac2:	444b      	add	r3, r9
 800dac4:	106d      	asrs	r5, r5, #1
 800dac6:	429d      	cmp	r5, r3
 800dac8:	bf38      	it	cc
 800daca:	461d      	movcc	r5, r3
 800dacc:	0553      	lsls	r3, r2, #21
 800dace:	d531      	bpl.n	800db34 <__ssputs_r+0xa0>
 800dad0:	4629      	mov	r1, r5
 800dad2:	f7ff ff2f 	bl	800d934 <_malloc_r>
 800dad6:	4606      	mov	r6, r0
 800dad8:	b950      	cbnz	r0, 800daf0 <__ssputs_r+0x5c>
 800dada:	230c      	movs	r3, #12
 800dadc:	f8ca 3000 	str.w	r3, [sl]
 800dae0:	89a3      	ldrh	r3, [r4, #12]
 800dae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dae6:	81a3      	strh	r3, [r4, #12]
 800dae8:	f04f 30ff 	mov.w	r0, #4294967295
 800daec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf0:	6921      	ldr	r1, [r4, #16]
 800daf2:	464a      	mov	r2, r9
 800daf4:	f7ff fe9c 	bl	800d830 <memcpy>
 800daf8:	89a3      	ldrh	r3, [r4, #12]
 800dafa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db02:	81a3      	strh	r3, [r4, #12]
 800db04:	6126      	str	r6, [r4, #16]
 800db06:	6165      	str	r5, [r4, #20]
 800db08:	444e      	add	r6, r9
 800db0a:	eba5 0509 	sub.w	r5, r5, r9
 800db0e:	6026      	str	r6, [r4, #0]
 800db10:	60a5      	str	r5, [r4, #8]
 800db12:	463e      	mov	r6, r7
 800db14:	42be      	cmp	r6, r7
 800db16:	d900      	bls.n	800db1a <__ssputs_r+0x86>
 800db18:	463e      	mov	r6, r7
 800db1a:	6820      	ldr	r0, [r4, #0]
 800db1c:	4632      	mov	r2, r6
 800db1e:	4641      	mov	r1, r8
 800db20:	f000 faaa 	bl	800e078 <memmove>
 800db24:	68a3      	ldr	r3, [r4, #8]
 800db26:	1b9b      	subs	r3, r3, r6
 800db28:	60a3      	str	r3, [r4, #8]
 800db2a:	6823      	ldr	r3, [r4, #0]
 800db2c:	4433      	add	r3, r6
 800db2e:	6023      	str	r3, [r4, #0]
 800db30:	2000      	movs	r0, #0
 800db32:	e7db      	b.n	800daec <__ssputs_r+0x58>
 800db34:	462a      	mov	r2, r5
 800db36:	f000 fab9 	bl	800e0ac <_realloc_r>
 800db3a:	4606      	mov	r6, r0
 800db3c:	2800      	cmp	r0, #0
 800db3e:	d1e1      	bne.n	800db04 <__ssputs_r+0x70>
 800db40:	6921      	ldr	r1, [r4, #16]
 800db42:	4650      	mov	r0, sl
 800db44:	f7ff fe8a 	bl	800d85c <_free_r>
 800db48:	e7c7      	b.n	800dada <__ssputs_r+0x46>
	...

0800db4c <_svfiprintf_r>:
 800db4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db50:	4698      	mov	r8, r3
 800db52:	898b      	ldrh	r3, [r1, #12]
 800db54:	061b      	lsls	r3, r3, #24
 800db56:	b09d      	sub	sp, #116	; 0x74
 800db58:	4607      	mov	r7, r0
 800db5a:	460d      	mov	r5, r1
 800db5c:	4614      	mov	r4, r2
 800db5e:	d50e      	bpl.n	800db7e <_svfiprintf_r+0x32>
 800db60:	690b      	ldr	r3, [r1, #16]
 800db62:	b963      	cbnz	r3, 800db7e <_svfiprintf_r+0x32>
 800db64:	2140      	movs	r1, #64	; 0x40
 800db66:	f7ff fee5 	bl	800d934 <_malloc_r>
 800db6a:	6028      	str	r0, [r5, #0]
 800db6c:	6128      	str	r0, [r5, #16]
 800db6e:	b920      	cbnz	r0, 800db7a <_svfiprintf_r+0x2e>
 800db70:	230c      	movs	r3, #12
 800db72:	603b      	str	r3, [r7, #0]
 800db74:	f04f 30ff 	mov.w	r0, #4294967295
 800db78:	e0d1      	b.n	800dd1e <_svfiprintf_r+0x1d2>
 800db7a:	2340      	movs	r3, #64	; 0x40
 800db7c:	616b      	str	r3, [r5, #20]
 800db7e:	2300      	movs	r3, #0
 800db80:	9309      	str	r3, [sp, #36]	; 0x24
 800db82:	2320      	movs	r3, #32
 800db84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db88:	f8cd 800c 	str.w	r8, [sp, #12]
 800db8c:	2330      	movs	r3, #48	; 0x30
 800db8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd38 <_svfiprintf_r+0x1ec>
 800db92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db96:	f04f 0901 	mov.w	r9, #1
 800db9a:	4623      	mov	r3, r4
 800db9c:	469a      	mov	sl, r3
 800db9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dba2:	b10a      	cbz	r2, 800dba8 <_svfiprintf_r+0x5c>
 800dba4:	2a25      	cmp	r2, #37	; 0x25
 800dba6:	d1f9      	bne.n	800db9c <_svfiprintf_r+0x50>
 800dba8:	ebba 0b04 	subs.w	fp, sl, r4
 800dbac:	d00b      	beq.n	800dbc6 <_svfiprintf_r+0x7a>
 800dbae:	465b      	mov	r3, fp
 800dbb0:	4622      	mov	r2, r4
 800dbb2:	4629      	mov	r1, r5
 800dbb4:	4638      	mov	r0, r7
 800dbb6:	f7ff ff6d 	bl	800da94 <__ssputs_r>
 800dbba:	3001      	adds	r0, #1
 800dbbc:	f000 80aa 	beq.w	800dd14 <_svfiprintf_r+0x1c8>
 800dbc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbc2:	445a      	add	r2, fp
 800dbc4:	9209      	str	r2, [sp, #36]	; 0x24
 800dbc6:	f89a 3000 	ldrb.w	r3, [sl]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 80a2 	beq.w	800dd14 <_svfiprintf_r+0x1c8>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbda:	f10a 0a01 	add.w	sl, sl, #1
 800dbde:	9304      	str	r3, [sp, #16]
 800dbe0:	9307      	str	r3, [sp, #28]
 800dbe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbe6:	931a      	str	r3, [sp, #104]	; 0x68
 800dbe8:	4654      	mov	r4, sl
 800dbea:	2205      	movs	r2, #5
 800dbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbf0:	4851      	ldr	r0, [pc, #324]	; (800dd38 <_svfiprintf_r+0x1ec>)
 800dbf2:	f7f2 fb0d 	bl	8000210 <memchr>
 800dbf6:	9a04      	ldr	r2, [sp, #16]
 800dbf8:	b9d8      	cbnz	r0, 800dc32 <_svfiprintf_r+0xe6>
 800dbfa:	06d0      	lsls	r0, r2, #27
 800dbfc:	bf44      	itt	mi
 800dbfe:	2320      	movmi	r3, #32
 800dc00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc04:	0711      	lsls	r1, r2, #28
 800dc06:	bf44      	itt	mi
 800dc08:	232b      	movmi	r3, #43	; 0x2b
 800dc0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc0e:	f89a 3000 	ldrb.w	r3, [sl]
 800dc12:	2b2a      	cmp	r3, #42	; 0x2a
 800dc14:	d015      	beq.n	800dc42 <_svfiprintf_r+0xf6>
 800dc16:	9a07      	ldr	r2, [sp, #28]
 800dc18:	4654      	mov	r4, sl
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	f04f 0c0a 	mov.w	ip, #10
 800dc20:	4621      	mov	r1, r4
 800dc22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc26:	3b30      	subs	r3, #48	; 0x30
 800dc28:	2b09      	cmp	r3, #9
 800dc2a:	d94e      	bls.n	800dcca <_svfiprintf_r+0x17e>
 800dc2c:	b1b0      	cbz	r0, 800dc5c <_svfiprintf_r+0x110>
 800dc2e:	9207      	str	r2, [sp, #28]
 800dc30:	e014      	b.n	800dc5c <_svfiprintf_r+0x110>
 800dc32:	eba0 0308 	sub.w	r3, r0, r8
 800dc36:	fa09 f303 	lsl.w	r3, r9, r3
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	9304      	str	r3, [sp, #16]
 800dc3e:	46a2      	mov	sl, r4
 800dc40:	e7d2      	b.n	800dbe8 <_svfiprintf_r+0x9c>
 800dc42:	9b03      	ldr	r3, [sp, #12]
 800dc44:	1d19      	adds	r1, r3, #4
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	9103      	str	r1, [sp, #12]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	bfbb      	ittet	lt
 800dc4e:	425b      	neglt	r3, r3
 800dc50:	f042 0202 	orrlt.w	r2, r2, #2
 800dc54:	9307      	strge	r3, [sp, #28]
 800dc56:	9307      	strlt	r3, [sp, #28]
 800dc58:	bfb8      	it	lt
 800dc5a:	9204      	strlt	r2, [sp, #16]
 800dc5c:	7823      	ldrb	r3, [r4, #0]
 800dc5e:	2b2e      	cmp	r3, #46	; 0x2e
 800dc60:	d10c      	bne.n	800dc7c <_svfiprintf_r+0x130>
 800dc62:	7863      	ldrb	r3, [r4, #1]
 800dc64:	2b2a      	cmp	r3, #42	; 0x2a
 800dc66:	d135      	bne.n	800dcd4 <_svfiprintf_r+0x188>
 800dc68:	9b03      	ldr	r3, [sp, #12]
 800dc6a:	1d1a      	adds	r2, r3, #4
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	9203      	str	r2, [sp, #12]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	bfb8      	it	lt
 800dc74:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc78:	3402      	adds	r4, #2
 800dc7a:	9305      	str	r3, [sp, #20]
 800dc7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd48 <_svfiprintf_r+0x1fc>
 800dc80:	7821      	ldrb	r1, [r4, #0]
 800dc82:	2203      	movs	r2, #3
 800dc84:	4650      	mov	r0, sl
 800dc86:	f7f2 fac3 	bl	8000210 <memchr>
 800dc8a:	b140      	cbz	r0, 800dc9e <_svfiprintf_r+0x152>
 800dc8c:	2340      	movs	r3, #64	; 0x40
 800dc8e:	eba0 000a 	sub.w	r0, r0, sl
 800dc92:	fa03 f000 	lsl.w	r0, r3, r0
 800dc96:	9b04      	ldr	r3, [sp, #16]
 800dc98:	4303      	orrs	r3, r0
 800dc9a:	3401      	adds	r4, #1
 800dc9c:	9304      	str	r3, [sp, #16]
 800dc9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dca2:	4826      	ldr	r0, [pc, #152]	; (800dd3c <_svfiprintf_r+0x1f0>)
 800dca4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dca8:	2206      	movs	r2, #6
 800dcaa:	f7f2 fab1 	bl	8000210 <memchr>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d038      	beq.n	800dd24 <_svfiprintf_r+0x1d8>
 800dcb2:	4b23      	ldr	r3, [pc, #140]	; (800dd40 <_svfiprintf_r+0x1f4>)
 800dcb4:	bb1b      	cbnz	r3, 800dcfe <_svfiprintf_r+0x1b2>
 800dcb6:	9b03      	ldr	r3, [sp, #12]
 800dcb8:	3307      	adds	r3, #7
 800dcba:	f023 0307 	bic.w	r3, r3, #7
 800dcbe:	3308      	adds	r3, #8
 800dcc0:	9303      	str	r3, [sp, #12]
 800dcc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcc4:	4433      	add	r3, r6
 800dcc6:	9309      	str	r3, [sp, #36]	; 0x24
 800dcc8:	e767      	b.n	800db9a <_svfiprintf_r+0x4e>
 800dcca:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcce:	460c      	mov	r4, r1
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	e7a5      	b.n	800dc20 <_svfiprintf_r+0xd4>
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	3401      	adds	r4, #1
 800dcd8:	9305      	str	r3, [sp, #20]
 800dcda:	4619      	mov	r1, r3
 800dcdc:	f04f 0c0a 	mov.w	ip, #10
 800dce0:	4620      	mov	r0, r4
 800dce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dce6:	3a30      	subs	r2, #48	; 0x30
 800dce8:	2a09      	cmp	r2, #9
 800dcea:	d903      	bls.n	800dcf4 <_svfiprintf_r+0x1a8>
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d0c5      	beq.n	800dc7c <_svfiprintf_r+0x130>
 800dcf0:	9105      	str	r1, [sp, #20]
 800dcf2:	e7c3      	b.n	800dc7c <_svfiprintf_r+0x130>
 800dcf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcf8:	4604      	mov	r4, r0
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e7f0      	b.n	800dce0 <_svfiprintf_r+0x194>
 800dcfe:	ab03      	add	r3, sp, #12
 800dd00:	9300      	str	r3, [sp, #0]
 800dd02:	462a      	mov	r2, r5
 800dd04:	4b0f      	ldr	r3, [pc, #60]	; (800dd44 <_svfiprintf_r+0x1f8>)
 800dd06:	a904      	add	r1, sp, #16
 800dd08:	4638      	mov	r0, r7
 800dd0a:	f3af 8000 	nop.w
 800dd0e:	1c42      	adds	r2, r0, #1
 800dd10:	4606      	mov	r6, r0
 800dd12:	d1d6      	bne.n	800dcc2 <_svfiprintf_r+0x176>
 800dd14:	89ab      	ldrh	r3, [r5, #12]
 800dd16:	065b      	lsls	r3, r3, #25
 800dd18:	f53f af2c 	bmi.w	800db74 <_svfiprintf_r+0x28>
 800dd1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd1e:	b01d      	add	sp, #116	; 0x74
 800dd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd24:	ab03      	add	r3, sp, #12
 800dd26:	9300      	str	r3, [sp, #0]
 800dd28:	462a      	mov	r2, r5
 800dd2a:	4b06      	ldr	r3, [pc, #24]	; (800dd44 <_svfiprintf_r+0x1f8>)
 800dd2c:	a904      	add	r1, sp, #16
 800dd2e:	4638      	mov	r0, r7
 800dd30:	f000 f87a 	bl	800de28 <_printf_i>
 800dd34:	e7eb      	b.n	800dd0e <_svfiprintf_r+0x1c2>
 800dd36:	bf00      	nop
 800dd38:	0801437a 	.word	0x0801437a
 800dd3c:	08014384 	.word	0x08014384
 800dd40:	00000000 	.word	0x00000000
 800dd44:	0800da95 	.word	0x0800da95
 800dd48:	08014380 	.word	0x08014380

0800dd4c <_printf_common>:
 800dd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd50:	4616      	mov	r6, r2
 800dd52:	4699      	mov	r9, r3
 800dd54:	688a      	ldr	r2, [r1, #8]
 800dd56:	690b      	ldr	r3, [r1, #16]
 800dd58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	bfb8      	it	lt
 800dd60:	4613      	movlt	r3, r2
 800dd62:	6033      	str	r3, [r6, #0]
 800dd64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd68:	4607      	mov	r7, r0
 800dd6a:	460c      	mov	r4, r1
 800dd6c:	b10a      	cbz	r2, 800dd72 <_printf_common+0x26>
 800dd6e:	3301      	adds	r3, #1
 800dd70:	6033      	str	r3, [r6, #0]
 800dd72:	6823      	ldr	r3, [r4, #0]
 800dd74:	0699      	lsls	r1, r3, #26
 800dd76:	bf42      	ittt	mi
 800dd78:	6833      	ldrmi	r3, [r6, #0]
 800dd7a:	3302      	addmi	r3, #2
 800dd7c:	6033      	strmi	r3, [r6, #0]
 800dd7e:	6825      	ldr	r5, [r4, #0]
 800dd80:	f015 0506 	ands.w	r5, r5, #6
 800dd84:	d106      	bne.n	800dd94 <_printf_common+0x48>
 800dd86:	f104 0a19 	add.w	sl, r4, #25
 800dd8a:	68e3      	ldr	r3, [r4, #12]
 800dd8c:	6832      	ldr	r2, [r6, #0]
 800dd8e:	1a9b      	subs	r3, r3, r2
 800dd90:	42ab      	cmp	r3, r5
 800dd92:	dc26      	bgt.n	800dde2 <_printf_common+0x96>
 800dd94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd98:	1e13      	subs	r3, r2, #0
 800dd9a:	6822      	ldr	r2, [r4, #0]
 800dd9c:	bf18      	it	ne
 800dd9e:	2301      	movne	r3, #1
 800dda0:	0692      	lsls	r2, r2, #26
 800dda2:	d42b      	bmi.n	800ddfc <_printf_common+0xb0>
 800dda4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dda8:	4649      	mov	r1, r9
 800ddaa:	4638      	mov	r0, r7
 800ddac:	47c0      	blx	r8
 800ddae:	3001      	adds	r0, #1
 800ddb0:	d01e      	beq.n	800ddf0 <_printf_common+0xa4>
 800ddb2:	6823      	ldr	r3, [r4, #0]
 800ddb4:	68e5      	ldr	r5, [r4, #12]
 800ddb6:	6832      	ldr	r2, [r6, #0]
 800ddb8:	f003 0306 	and.w	r3, r3, #6
 800ddbc:	2b04      	cmp	r3, #4
 800ddbe:	bf08      	it	eq
 800ddc0:	1aad      	subeq	r5, r5, r2
 800ddc2:	68a3      	ldr	r3, [r4, #8]
 800ddc4:	6922      	ldr	r2, [r4, #16]
 800ddc6:	bf0c      	ite	eq
 800ddc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ddcc:	2500      	movne	r5, #0
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	bfc4      	itt	gt
 800ddd2:	1a9b      	subgt	r3, r3, r2
 800ddd4:	18ed      	addgt	r5, r5, r3
 800ddd6:	2600      	movs	r6, #0
 800ddd8:	341a      	adds	r4, #26
 800ddda:	42b5      	cmp	r5, r6
 800dddc:	d11a      	bne.n	800de14 <_printf_common+0xc8>
 800ddde:	2000      	movs	r0, #0
 800dde0:	e008      	b.n	800ddf4 <_printf_common+0xa8>
 800dde2:	2301      	movs	r3, #1
 800dde4:	4652      	mov	r2, sl
 800dde6:	4649      	mov	r1, r9
 800dde8:	4638      	mov	r0, r7
 800ddea:	47c0      	blx	r8
 800ddec:	3001      	adds	r0, #1
 800ddee:	d103      	bne.n	800ddf8 <_printf_common+0xac>
 800ddf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddf8:	3501      	adds	r5, #1
 800ddfa:	e7c6      	b.n	800dd8a <_printf_common+0x3e>
 800ddfc:	18e1      	adds	r1, r4, r3
 800ddfe:	1c5a      	adds	r2, r3, #1
 800de00:	2030      	movs	r0, #48	; 0x30
 800de02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800de06:	4422      	add	r2, r4
 800de08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800de0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800de10:	3302      	adds	r3, #2
 800de12:	e7c7      	b.n	800dda4 <_printf_common+0x58>
 800de14:	2301      	movs	r3, #1
 800de16:	4622      	mov	r2, r4
 800de18:	4649      	mov	r1, r9
 800de1a:	4638      	mov	r0, r7
 800de1c:	47c0      	blx	r8
 800de1e:	3001      	adds	r0, #1
 800de20:	d0e6      	beq.n	800ddf0 <_printf_common+0xa4>
 800de22:	3601      	adds	r6, #1
 800de24:	e7d9      	b.n	800ddda <_printf_common+0x8e>
	...

0800de28 <_printf_i>:
 800de28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de2c:	7e0f      	ldrb	r7, [r1, #24]
 800de2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800de30:	2f78      	cmp	r7, #120	; 0x78
 800de32:	4691      	mov	r9, r2
 800de34:	4680      	mov	r8, r0
 800de36:	460c      	mov	r4, r1
 800de38:	469a      	mov	sl, r3
 800de3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800de3e:	d807      	bhi.n	800de50 <_printf_i+0x28>
 800de40:	2f62      	cmp	r7, #98	; 0x62
 800de42:	d80a      	bhi.n	800de5a <_printf_i+0x32>
 800de44:	2f00      	cmp	r7, #0
 800de46:	f000 80d8 	beq.w	800dffa <_printf_i+0x1d2>
 800de4a:	2f58      	cmp	r7, #88	; 0x58
 800de4c:	f000 80a3 	beq.w	800df96 <_printf_i+0x16e>
 800de50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de58:	e03a      	b.n	800ded0 <_printf_i+0xa8>
 800de5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de5e:	2b15      	cmp	r3, #21
 800de60:	d8f6      	bhi.n	800de50 <_printf_i+0x28>
 800de62:	a101      	add	r1, pc, #4	; (adr r1, 800de68 <_printf_i+0x40>)
 800de64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de68:	0800dec1 	.word	0x0800dec1
 800de6c:	0800ded5 	.word	0x0800ded5
 800de70:	0800de51 	.word	0x0800de51
 800de74:	0800de51 	.word	0x0800de51
 800de78:	0800de51 	.word	0x0800de51
 800de7c:	0800de51 	.word	0x0800de51
 800de80:	0800ded5 	.word	0x0800ded5
 800de84:	0800de51 	.word	0x0800de51
 800de88:	0800de51 	.word	0x0800de51
 800de8c:	0800de51 	.word	0x0800de51
 800de90:	0800de51 	.word	0x0800de51
 800de94:	0800dfe1 	.word	0x0800dfe1
 800de98:	0800df05 	.word	0x0800df05
 800de9c:	0800dfc3 	.word	0x0800dfc3
 800dea0:	0800de51 	.word	0x0800de51
 800dea4:	0800de51 	.word	0x0800de51
 800dea8:	0800e003 	.word	0x0800e003
 800deac:	0800de51 	.word	0x0800de51
 800deb0:	0800df05 	.word	0x0800df05
 800deb4:	0800de51 	.word	0x0800de51
 800deb8:	0800de51 	.word	0x0800de51
 800debc:	0800dfcb 	.word	0x0800dfcb
 800dec0:	682b      	ldr	r3, [r5, #0]
 800dec2:	1d1a      	adds	r2, r3, #4
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	602a      	str	r2, [r5, #0]
 800dec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800decc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ded0:	2301      	movs	r3, #1
 800ded2:	e0a3      	b.n	800e01c <_printf_i+0x1f4>
 800ded4:	6820      	ldr	r0, [r4, #0]
 800ded6:	6829      	ldr	r1, [r5, #0]
 800ded8:	0606      	lsls	r6, r0, #24
 800deda:	f101 0304 	add.w	r3, r1, #4
 800dede:	d50a      	bpl.n	800def6 <_printf_i+0xce>
 800dee0:	680e      	ldr	r6, [r1, #0]
 800dee2:	602b      	str	r3, [r5, #0]
 800dee4:	2e00      	cmp	r6, #0
 800dee6:	da03      	bge.n	800def0 <_printf_i+0xc8>
 800dee8:	232d      	movs	r3, #45	; 0x2d
 800deea:	4276      	negs	r6, r6
 800deec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800def0:	485e      	ldr	r0, [pc, #376]	; (800e06c <_printf_i+0x244>)
 800def2:	230a      	movs	r3, #10
 800def4:	e019      	b.n	800df2a <_printf_i+0x102>
 800def6:	680e      	ldr	r6, [r1, #0]
 800def8:	602b      	str	r3, [r5, #0]
 800defa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800defe:	bf18      	it	ne
 800df00:	b236      	sxthne	r6, r6
 800df02:	e7ef      	b.n	800dee4 <_printf_i+0xbc>
 800df04:	682b      	ldr	r3, [r5, #0]
 800df06:	6820      	ldr	r0, [r4, #0]
 800df08:	1d19      	adds	r1, r3, #4
 800df0a:	6029      	str	r1, [r5, #0]
 800df0c:	0601      	lsls	r1, r0, #24
 800df0e:	d501      	bpl.n	800df14 <_printf_i+0xec>
 800df10:	681e      	ldr	r6, [r3, #0]
 800df12:	e002      	b.n	800df1a <_printf_i+0xf2>
 800df14:	0646      	lsls	r6, r0, #25
 800df16:	d5fb      	bpl.n	800df10 <_printf_i+0xe8>
 800df18:	881e      	ldrh	r6, [r3, #0]
 800df1a:	4854      	ldr	r0, [pc, #336]	; (800e06c <_printf_i+0x244>)
 800df1c:	2f6f      	cmp	r7, #111	; 0x6f
 800df1e:	bf0c      	ite	eq
 800df20:	2308      	moveq	r3, #8
 800df22:	230a      	movne	r3, #10
 800df24:	2100      	movs	r1, #0
 800df26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df2a:	6865      	ldr	r5, [r4, #4]
 800df2c:	60a5      	str	r5, [r4, #8]
 800df2e:	2d00      	cmp	r5, #0
 800df30:	bfa2      	ittt	ge
 800df32:	6821      	ldrge	r1, [r4, #0]
 800df34:	f021 0104 	bicge.w	r1, r1, #4
 800df38:	6021      	strge	r1, [r4, #0]
 800df3a:	b90e      	cbnz	r6, 800df40 <_printf_i+0x118>
 800df3c:	2d00      	cmp	r5, #0
 800df3e:	d04d      	beq.n	800dfdc <_printf_i+0x1b4>
 800df40:	4615      	mov	r5, r2
 800df42:	fbb6 f1f3 	udiv	r1, r6, r3
 800df46:	fb03 6711 	mls	r7, r3, r1, r6
 800df4a:	5dc7      	ldrb	r7, [r0, r7]
 800df4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800df50:	4637      	mov	r7, r6
 800df52:	42bb      	cmp	r3, r7
 800df54:	460e      	mov	r6, r1
 800df56:	d9f4      	bls.n	800df42 <_printf_i+0x11a>
 800df58:	2b08      	cmp	r3, #8
 800df5a:	d10b      	bne.n	800df74 <_printf_i+0x14c>
 800df5c:	6823      	ldr	r3, [r4, #0]
 800df5e:	07de      	lsls	r6, r3, #31
 800df60:	d508      	bpl.n	800df74 <_printf_i+0x14c>
 800df62:	6923      	ldr	r3, [r4, #16]
 800df64:	6861      	ldr	r1, [r4, #4]
 800df66:	4299      	cmp	r1, r3
 800df68:	bfde      	ittt	le
 800df6a:	2330      	movle	r3, #48	; 0x30
 800df6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df74:	1b52      	subs	r2, r2, r5
 800df76:	6122      	str	r2, [r4, #16]
 800df78:	f8cd a000 	str.w	sl, [sp]
 800df7c:	464b      	mov	r3, r9
 800df7e:	aa03      	add	r2, sp, #12
 800df80:	4621      	mov	r1, r4
 800df82:	4640      	mov	r0, r8
 800df84:	f7ff fee2 	bl	800dd4c <_printf_common>
 800df88:	3001      	adds	r0, #1
 800df8a:	d14c      	bne.n	800e026 <_printf_i+0x1fe>
 800df8c:	f04f 30ff 	mov.w	r0, #4294967295
 800df90:	b004      	add	sp, #16
 800df92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df96:	4835      	ldr	r0, [pc, #212]	; (800e06c <_printf_i+0x244>)
 800df98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800df9c:	6829      	ldr	r1, [r5, #0]
 800df9e:	6823      	ldr	r3, [r4, #0]
 800dfa0:	f851 6b04 	ldr.w	r6, [r1], #4
 800dfa4:	6029      	str	r1, [r5, #0]
 800dfa6:	061d      	lsls	r5, r3, #24
 800dfa8:	d514      	bpl.n	800dfd4 <_printf_i+0x1ac>
 800dfaa:	07df      	lsls	r7, r3, #31
 800dfac:	bf44      	itt	mi
 800dfae:	f043 0320 	orrmi.w	r3, r3, #32
 800dfb2:	6023      	strmi	r3, [r4, #0]
 800dfb4:	b91e      	cbnz	r6, 800dfbe <_printf_i+0x196>
 800dfb6:	6823      	ldr	r3, [r4, #0]
 800dfb8:	f023 0320 	bic.w	r3, r3, #32
 800dfbc:	6023      	str	r3, [r4, #0]
 800dfbe:	2310      	movs	r3, #16
 800dfc0:	e7b0      	b.n	800df24 <_printf_i+0xfc>
 800dfc2:	6823      	ldr	r3, [r4, #0]
 800dfc4:	f043 0320 	orr.w	r3, r3, #32
 800dfc8:	6023      	str	r3, [r4, #0]
 800dfca:	2378      	movs	r3, #120	; 0x78
 800dfcc:	4828      	ldr	r0, [pc, #160]	; (800e070 <_printf_i+0x248>)
 800dfce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dfd2:	e7e3      	b.n	800df9c <_printf_i+0x174>
 800dfd4:	0659      	lsls	r1, r3, #25
 800dfd6:	bf48      	it	mi
 800dfd8:	b2b6      	uxthmi	r6, r6
 800dfda:	e7e6      	b.n	800dfaa <_printf_i+0x182>
 800dfdc:	4615      	mov	r5, r2
 800dfde:	e7bb      	b.n	800df58 <_printf_i+0x130>
 800dfe0:	682b      	ldr	r3, [r5, #0]
 800dfe2:	6826      	ldr	r6, [r4, #0]
 800dfe4:	6961      	ldr	r1, [r4, #20]
 800dfe6:	1d18      	adds	r0, r3, #4
 800dfe8:	6028      	str	r0, [r5, #0]
 800dfea:	0635      	lsls	r5, r6, #24
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	d501      	bpl.n	800dff4 <_printf_i+0x1cc>
 800dff0:	6019      	str	r1, [r3, #0]
 800dff2:	e002      	b.n	800dffa <_printf_i+0x1d2>
 800dff4:	0670      	lsls	r0, r6, #25
 800dff6:	d5fb      	bpl.n	800dff0 <_printf_i+0x1c8>
 800dff8:	8019      	strh	r1, [r3, #0]
 800dffa:	2300      	movs	r3, #0
 800dffc:	6123      	str	r3, [r4, #16]
 800dffe:	4615      	mov	r5, r2
 800e000:	e7ba      	b.n	800df78 <_printf_i+0x150>
 800e002:	682b      	ldr	r3, [r5, #0]
 800e004:	1d1a      	adds	r2, r3, #4
 800e006:	602a      	str	r2, [r5, #0]
 800e008:	681d      	ldr	r5, [r3, #0]
 800e00a:	6862      	ldr	r2, [r4, #4]
 800e00c:	2100      	movs	r1, #0
 800e00e:	4628      	mov	r0, r5
 800e010:	f7f2 f8fe 	bl	8000210 <memchr>
 800e014:	b108      	cbz	r0, 800e01a <_printf_i+0x1f2>
 800e016:	1b40      	subs	r0, r0, r5
 800e018:	6060      	str	r0, [r4, #4]
 800e01a:	6863      	ldr	r3, [r4, #4]
 800e01c:	6123      	str	r3, [r4, #16]
 800e01e:	2300      	movs	r3, #0
 800e020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e024:	e7a8      	b.n	800df78 <_printf_i+0x150>
 800e026:	6923      	ldr	r3, [r4, #16]
 800e028:	462a      	mov	r2, r5
 800e02a:	4649      	mov	r1, r9
 800e02c:	4640      	mov	r0, r8
 800e02e:	47d0      	blx	sl
 800e030:	3001      	adds	r0, #1
 800e032:	d0ab      	beq.n	800df8c <_printf_i+0x164>
 800e034:	6823      	ldr	r3, [r4, #0]
 800e036:	079b      	lsls	r3, r3, #30
 800e038:	d413      	bmi.n	800e062 <_printf_i+0x23a>
 800e03a:	68e0      	ldr	r0, [r4, #12]
 800e03c:	9b03      	ldr	r3, [sp, #12]
 800e03e:	4298      	cmp	r0, r3
 800e040:	bfb8      	it	lt
 800e042:	4618      	movlt	r0, r3
 800e044:	e7a4      	b.n	800df90 <_printf_i+0x168>
 800e046:	2301      	movs	r3, #1
 800e048:	4632      	mov	r2, r6
 800e04a:	4649      	mov	r1, r9
 800e04c:	4640      	mov	r0, r8
 800e04e:	47d0      	blx	sl
 800e050:	3001      	adds	r0, #1
 800e052:	d09b      	beq.n	800df8c <_printf_i+0x164>
 800e054:	3501      	adds	r5, #1
 800e056:	68e3      	ldr	r3, [r4, #12]
 800e058:	9903      	ldr	r1, [sp, #12]
 800e05a:	1a5b      	subs	r3, r3, r1
 800e05c:	42ab      	cmp	r3, r5
 800e05e:	dcf2      	bgt.n	800e046 <_printf_i+0x21e>
 800e060:	e7eb      	b.n	800e03a <_printf_i+0x212>
 800e062:	2500      	movs	r5, #0
 800e064:	f104 0619 	add.w	r6, r4, #25
 800e068:	e7f5      	b.n	800e056 <_printf_i+0x22e>
 800e06a:	bf00      	nop
 800e06c:	0801438b 	.word	0x0801438b
 800e070:	0801439c 	.word	0x0801439c

0800e074 <__retarget_lock_acquire_recursive>:
 800e074:	4770      	bx	lr

0800e076 <__retarget_lock_release_recursive>:
 800e076:	4770      	bx	lr

0800e078 <memmove>:
 800e078:	4288      	cmp	r0, r1
 800e07a:	b510      	push	{r4, lr}
 800e07c:	eb01 0402 	add.w	r4, r1, r2
 800e080:	d902      	bls.n	800e088 <memmove+0x10>
 800e082:	4284      	cmp	r4, r0
 800e084:	4623      	mov	r3, r4
 800e086:	d807      	bhi.n	800e098 <memmove+0x20>
 800e088:	1e43      	subs	r3, r0, #1
 800e08a:	42a1      	cmp	r1, r4
 800e08c:	d008      	beq.n	800e0a0 <memmove+0x28>
 800e08e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e092:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e096:	e7f8      	b.n	800e08a <memmove+0x12>
 800e098:	4402      	add	r2, r0
 800e09a:	4601      	mov	r1, r0
 800e09c:	428a      	cmp	r2, r1
 800e09e:	d100      	bne.n	800e0a2 <memmove+0x2a>
 800e0a0:	bd10      	pop	{r4, pc}
 800e0a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0aa:	e7f7      	b.n	800e09c <memmove+0x24>

0800e0ac <_realloc_r>:
 800e0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b0:	4680      	mov	r8, r0
 800e0b2:	4614      	mov	r4, r2
 800e0b4:	460e      	mov	r6, r1
 800e0b6:	b921      	cbnz	r1, 800e0c2 <_realloc_r+0x16>
 800e0b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0bc:	4611      	mov	r1, r2
 800e0be:	f7ff bc39 	b.w	800d934 <_malloc_r>
 800e0c2:	b92a      	cbnz	r2, 800e0d0 <_realloc_r+0x24>
 800e0c4:	f7ff fbca 	bl	800d85c <_free_r>
 800e0c8:	4625      	mov	r5, r4
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d0:	f000 f81b 	bl	800e10a <_malloc_usable_size_r>
 800e0d4:	4284      	cmp	r4, r0
 800e0d6:	4607      	mov	r7, r0
 800e0d8:	d802      	bhi.n	800e0e0 <_realloc_r+0x34>
 800e0da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0de:	d812      	bhi.n	800e106 <_realloc_r+0x5a>
 800e0e0:	4621      	mov	r1, r4
 800e0e2:	4640      	mov	r0, r8
 800e0e4:	f7ff fc26 	bl	800d934 <_malloc_r>
 800e0e8:	4605      	mov	r5, r0
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d0ed      	beq.n	800e0ca <_realloc_r+0x1e>
 800e0ee:	42bc      	cmp	r4, r7
 800e0f0:	4622      	mov	r2, r4
 800e0f2:	4631      	mov	r1, r6
 800e0f4:	bf28      	it	cs
 800e0f6:	463a      	movcs	r2, r7
 800e0f8:	f7ff fb9a 	bl	800d830 <memcpy>
 800e0fc:	4631      	mov	r1, r6
 800e0fe:	4640      	mov	r0, r8
 800e100:	f7ff fbac 	bl	800d85c <_free_r>
 800e104:	e7e1      	b.n	800e0ca <_realloc_r+0x1e>
 800e106:	4635      	mov	r5, r6
 800e108:	e7df      	b.n	800e0ca <_realloc_r+0x1e>

0800e10a <_malloc_usable_size_r>:
 800e10a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e10e:	1f18      	subs	r0, r3, #4
 800e110:	2b00      	cmp	r3, #0
 800e112:	bfbc      	itt	lt
 800e114:	580b      	ldrlt	r3, [r1, r0]
 800e116:	18c0      	addlt	r0, r0, r3
 800e118:	4770      	bx	lr
	...

0800e11c <_sbrk>:
 800e11c:	4a04      	ldr	r2, [pc, #16]	; (800e130 <_sbrk+0x14>)
 800e11e:	6811      	ldr	r1, [r2, #0]
 800e120:	4603      	mov	r3, r0
 800e122:	b909      	cbnz	r1, 800e128 <_sbrk+0xc>
 800e124:	4903      	ldr	r1, [pc, #12]	; (800e134 <_sbrk+0x18>)
 800e126:	6011      	str	r1, [r2, #0]
 800e128:	6810      	ldr	r0, [r2, #0]
 800e12a:	4403      	add	r3, r0
 800e12c:	6013      	str	r3, [r2, #0]
 800e12e:	4770      	bx	lr
 800e130:	200014ec 	.word	0x200014ec
 800e134:	200014f0 	.word	0x200014f0

0800e138 <_init>:
 800e138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13a:	bf00      	nop
 800e13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e13e:	bc08      	pop	{r3}
 800e140:	469e      	mov	lr, r3
 800e142:	4770      	bx	lr

0800e144 <_fini>:
 800e144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e146:	bf00      	nop
 800e148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e14a:	bc08      	pop	{r3}
 800e14c:	469e      	mov	lr, r3
 800e14e:	4770      	bx	lr
